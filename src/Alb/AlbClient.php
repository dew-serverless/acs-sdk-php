<?php

declare(strict_types=1);

namespace Dew\Acs\Alb;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeZones(array $arguments = [])
 * @method \Http\Promise\Promise describeZonesAsync($arguments = [])
 * @method \Dew\Acs\Result createLoadBalancer(array $arguments = [])
 * @method \Http\Promise\Promise createLoadBalancerAsync($arguments = [])
 * @method \Dew\Acs\Result getLoadBalancerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise getLoadBalancerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLoadBalancer(array $arguments = [])
 * @method \Http\Promise\Promise deleteLoadBalancerAsync($arguments = [])
 * @method \Dew\Acs\Result updateLoadBalancerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateLoadBalancerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result updateLoadBalancerZones(array $arguments = [])
 * @method \Http\Promise\Promise updateLoadBalancerZonesAsync($arguments = [])
 * @method \Dew\Acs\Result updateLoadBalancerEdition(array $arguments = [])
 * @method \Http\Promise\Promise updateLoadBalancerEditionAsync($arguments = [])
 * @method \Dew\Acs\Result updateLoadBalancerAddressTypeConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateLoadBalancerAddressTypeConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listLoadBalancers(array $arguments = [])
 * @method \Http\Promise\Promise listLoadBalancersAsync($arguments = [])
 * @method \Dew\Acs\Result disableDeletionProtection(array $arguments = [])
 * @method \Http\Promise\Promise disableDeletionProtectionAsync($arguments = [])
 * @method \Dew\Acs\Result enableDeletionProtection(array $arguments = [])
 * @method \Http\Promise\Promise enableDeletionProtectionAsync($arguments = [])
 * @method \Dew\Acs\Result startShiftLoadBalancerZones(array $arguments = [])
 * @method \Http\Promise\Promise startShiftLoadBalancerZonesAsync($arguments = [])
 * @method \Dew\Acs\Result cancelShiftLoadBalancerZones(array $arguments = [])
 * @method \Http\Promise\Promise cancelShiftLoadBalancerZonesAsync($arguments = [])
 * @method \Dew\Acs\Result enableLoadBalancerIpv6Internet(array $arguments = [])
 * @method \Http\Promise\Promise enableLoadBalancerIpv6InternetAsync($arguments = [])
 * @method \Dew\Acs\Result disableLoadBalancerIpv6Internet(array $arguments = [])
 * @method \Http\Promise\Promise disableLoadBalancerIpv6InternetAsync($arguments = [])
 * @method \Dew\Acs\Result loadBalancerJoinSecurityGroup(array $arguments = [])
 * @method \Http\Promise\Promise loadBalancerJoinSecurityGroupAsync($arguments = [])
 * @method \Dew\Acs\Result loadBalancerLeaveSecurityGroup(array $arguments = [])
 * @method \Http\Promise\Promise loadBalancerLeaveSecurityGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createListener(array $arguments = [])
 * @method \Http\Promise\Promise createListenerAsync($arguments = [])
 * @method \Dew\Acs\Result getListenerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise getListenerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result deleteListener(array $arguments = [])
 * @method \Http\Promise\Promise deleteListenerAsync($arguments = [])
 * @method \Dew\Acs\Result listListeners(array $arguments = [])
 * @method \Http\Promise\Promise listListenersAsync($arguments = [])
 * @method \Dew\Acs\Result startListener(array $arguments = [])
 * @method \Http\Promise\Promise startListenerAsync($arguments = [])
 * @method \Dew\Acs\Result stopListener(array $arguments = [])
 * @method \Http\Promise\Promise stopListenerAsync($arguments = [])
 * @method \Dew\Acs\Result updateListenerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateListenerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result updateListenerLogConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateListenerLogConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getListenerHealthStatus(array $arguments = [])
 * @method \Http\Promise\Promise getListenerHealthStatusAsync($arguments = [])
 * @method \Dew\Acs\Result addServersToServerGroup(array $arguments = [])
 * @method \Http\Promise\Promise addServersToServerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createServerGroup(array $arguments = [])
 * @method \Http\Promise\Promise createServerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteServerGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteServerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateServerGroupAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateServerGroupAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result updateServerGroupServersAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateServerGroupServersAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listServerGroups(array $arguments = [])
 * @method \Http\Promise\Promise listServerGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result listServerGroupServers(array $arguments = [])
 * @method \Http\Promise\Promise listServerGroupServersAsync($arguments = [])
 * @method \Dew\Acs\Result removeServersFromServerGroup(array $arguments = [])
 * @method \Http\Promise\Promise removeServersFromServerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result replaceServersInServerGroup(array $arguments = [])
 * @method \Http\Promise\Promise replaceServersInServerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createRule(array $arguments = [])
 * @method \Http\Promise\Promise createRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createRules(array $arguments = [])
 * @method \Http\Promise\Promise createRulesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRules(array $arguments = [])
 * @method \Http\Promise\Promise deleteRulesAsync($arguments = [])
 * @method \Dew\Acs\Result updateRuleAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateRuleAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result updateRulesAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateRulesAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listRules(array $arguments = [])
 * @method \Http\Promise\Promise listRulesAsync($arguments = [])
 * @method \Dew\Acs\Result associateAdditionalCertificatesWithListener(array $arguments = [])
 * @method \Http\Promise\Promise associateAdditionalCertificatesWithListenerAsync($arguments = [])
 * @method \Dew\Acs\Result dissociateAdditionalCertificatesFromListener(array $arguments = [])
 * @method \Http\Promise\Promise dissociateAdditionalCertificatesFromListenerAsync($arguments = [])
 * @method \Dew\Acs\Result listListenerCertificates(array $arguments = [])
 * @method \Http\Promise\Promise listListenerCertificatesAsync($arguments = [])
 * @method \Dew\Acs\Result detachCommonBandwidthPackageFromLoadBalancer(array $arguments = [])
 * @method \Http\Promise\Promise detachCommonBandwidthPackageFromLoadBalancerAsync($arguments = [])
 * @method \Dew\Acs\Result attachCommonBandwidthPackageToLoadBalancer(array $arguments = [])
 * @method \Http\Promise\Promise attachCommonBandwidthPackageToLoadBalancerAsync($arguments = [])
 * @method \Dew\Acs\Result disableLoadBalancerAccessLog(array $arguments = [])
 * @method \Http\Promise\Promise disableLoadBalancerAccessLogAsync($arguments = [])
 * @method \Dew\Acs\Result enableLoadBalancerAccessLog(array $arguments = [])
 * @method \Http\Promise\Promise enableLoadBalancerAccessLogAsync($arguments = [])
 * @method \Dew\Acs\Result createHealthCheckTemplate(array $arguments = [])
 * @method \Http\Promise\Promise createHealthCheckTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result getHealthCheckTemplateAttribute(array $arguments = [])
 * @method \Http\Promise\Promise getHealthCheckTemplateAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result deleteHealthCheckTemplates(array $arguments = [])
 * @method \Http\Promise\Promise deleteHealthCheckTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result updateHealthCheckTemplateAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateHealthCheckTemplateAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listHealthCheckTemplates(array $arguments = [])
 * @method \Http\Promise\Promise listHealthCheckTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result applyHealthCheckTemplateToServerGroup(array $arguments = [])
 * @method \Http\Promise\Promise applyHealthCheckTemplateToServerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createSecurityPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createSecurityPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSecurityPolicy(array $arguments = [])
 * @method \Http\Promise\Promise deleteSecurityPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result updateSecurityPolicyAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateSecurityPolicyAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listSecurityPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listSecurityPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result listSecurityPolicyRelations(array $arguments = [])
 * @method \Http\Promise\Promise listSecurityPolicyRelationsAsync($arguments = [])
 * @method \Dew\Acs\Result listSystemSecurityPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listSystemSecurityPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result addEntriesToAcl(array $arguments = [])
 * @method \Http\Promise\Promise addEntriesToAclAsync($arguments = [])
 * @method \Dew\Acs\Result createAcl(array $arguments = [])
 * @method \Http\Promise\Promise createAclAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAcl(array $arguments = [])
 * @method \Http\Promise\Promise deleteAclAsync($arguments = [])
 * @method \Dew\Acs\Result updateAclAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateAclAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listAcls(array $arguments = [])
 * @method \Http\Promise\Promise listAclsAsync($arguments = [])
 * @method \Dew\Acs\Result listAclEntries(array $arguments = [])
 * @method \Http\Promise\Promise listAclEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result associateAclsWithListener(array $arguments = [])
 * @method \Http\Promise\Promise associateAclsWithListenerAsync($arguments = [])
 * @method \Dew\Acs\Result listAclRelations(array $arguments = [])
 * @method \Http\Promise\Promise listAclRelationsAsync($arguments = [])
 * @method \Dew\Acs\Result dissociateAclsFromListener(array $arguments = [])
 * @method \Http\Promise\Promise dissociateAclsFromListenerAsync($arguments = [])
 * @method \Dew\Acs\Result removeEntriesFromAcl(array $arguments = [])
 * @method \Http\Promise\Promise removeEntriesFromAclAsync($arguments = [])
 * @method \Dew\Acs\Result moveResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise moveResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listTagKeys(array $arguments = [])
 * @method \Http\Promise\Promise listTagKeysAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagValues(array $arguments = [])
 * @method \Http\Promise\Promise listTagValuesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result unTagResources(array $arguments = [])
 * @method \Http\Promise\Promise unTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listAsynJobs(array $arguments = [])
 * @method \Http\Promise\Promise listAsynJobsAsync($arguments = [])
 * @method \Dew\Acs\Result updateAScripts(array $arguments = [])
 * @method \Http\Promise\Promise updateAScriptsAsync($arguments = [])
 * @method \Dew\Acs\Result createAScripts(array $arguments = [])
 * @method \Http\Promise\Promise createAScriptsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAScripts(array $arguments = [])
 * @method \Http\Promise\Promise deleteAScriptsAsync($arguments = [])
 * @method \Dew\Acs\Result listAScripts(array $arguments = [])
 * @method \Http\Promise\Promise listAScriptsAsync($arguments = [])
 */
final class AlbClient extends AcsClient
{
    //
}
