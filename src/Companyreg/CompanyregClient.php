<?php

declare(strict_types=1);

namespace Dew\Acs\Companyreg;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result putMeasureReadyFlag(array $arguments = [])
 * @method \Http\Promise\Promise putMeasureReadyFlagAsync($arguments = [])
 * @method \Dew\Acs\Result putMeasureData(array $arguments = [])
 * @method \Http\Promise\Promise putMeasureDataAsync($arguments = [])
 * @method \Dew\Acs\Result queryBagRemaining(array $arguments = [])
 * @method \Http\Promise\Promise queryBagRemainingAsync($arguments = [])
 * @method \Dew\Acs\Result listUserIntentions(array $arguments = [])
 * @method \Http\Promise\Promise listUserIntentionsAsync($arguments = [])
 * @method \Dew\Acs\Result listUserIntentionNotes(array $arguments = [])
 * @method \Http\Promise\Promise listUserIntentionNotesAsync($arguments = [])
 * @method \Dew\Acs\Result listIntentionNote(array $arguments = [])
 * @method \Http\Promise\Promise listIntentionNoteAsync($arguments = [])
 * @method \Dew\Acs\Result listUserProduceOperateLogs(array $arguments = [])
 * @method \Http\Promise\Promise listUserProduceOperateLogsAsync($arguments = [])
 * @method \Dew\Acs\Result getAlipayUrl(array $arguments = [])
 * @method \Http\Promise\Promise getAlipayUrlAsync($arguments = [])
 * @method \Dew\Acs\Result describePartnerConfig(array $arguments = [])
 * @method \Http\Promise\Promise describePartnerConfigAsync($arguments = [])
 * @method \Dew\Acs\Result generateUploadFilePolicy(array $arguments = [])
 * @method \Http\Promise\Promise generateUploadFilePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result createProduceForPartner(array $arguments = [])
 * @method \Http\Promise\Promise createProduceForPartnerAsync($arguments = [])
 * @method \Dew\Acs\Result listProduceAuthorization(array $arguments = [])
 * @method \Http\Promise\Promise listProduceAuthorizationAsync($arguments = [])
 * @method \Dew\Acs\Result closeIntentionForPartner(array $arguments = [])
 * @method \Http\Promise\Promise closeIntentionForPartnerAsync($arguments = [])
 * @method \Dew\Acs\Result createBusinessOpportunity(array $arguments = [])
 * @method \Http\Promise\Promise createBusinessOpportunityAsync($arguments = [])
 * @method \Dew\Acs\Result listUserDetailSolutions(array $arguments = [])
 * @method \Http\Promise\Promise listUserDetailSolutionsAsync($arguments = [])
 * @method \Dew\Acs\Result listUserSolutions(array $arguments = [])
 * @method \Http\Promise\Promise listUserSolutionsAsync($arguments = [])
 * @method \Dew\Acs\Result operateProduceForPartner(array $arguments = [])
 * @method \Http\Promise\Promise operateProduceForPartnerAsync($arguments = [])
 * @method \Dew\Acs\Result rejectSolution(array $arguments = [])
 * @method \Http\Promise\Promise rejectSolutionAsync($arguments = [])
 * @method \Dew\Acs\Result rejectUserSolution(array $arguments = [])
 * @method \Http\Promise\Promise rejectUserSolutionAsync($arguments = [])
 * @method \Dew\Acs\Result queryPartnerIntentionList(array $arguments = [])
 * @method \Http\Promise\Promise queryPartnerIntentionListAsync($arguments = [])
 * @method \Dew\Acs\Result submitSolution(array $arguments = [])
 * @method \Http\Promise\Promise submitSolutionAsync($arguments = [])
 * @method \Dew\Acs\Result releaseProduceAuthorization(array $arguments = [])
 * @method \Http\Promise\Promise releaseProduceAuthorizationAsync($arguments = [])
 * @method \Dew\Acs\Result queryPartnerProduceList(array $arguments = [])
 * @method \Http\Promise\Promise queryPartnerProduceListAsync($arguments = [])
 * @method \Dew\Acs\Result queryInstance(array $arguments = [])
 * @method \Http\Promise\Promise queryInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result queryUserNeedAuth(array $arguments = [])
 * @method \Http\Promise\Promise queryUserNeedAuthAsync($arguments = [])
 * @method \Dew\Acs\Result bindProduceAuthorization(array $arguments = [])
 * @method \Http\Promise\Promise bindProduceAuthorizationAsync($arguments = [])
 * @method \Dew\Acs\Result submitIntentionNote(array $arguments = [])
 * @method \Http\Promise\Promise submitIntentionNoteAsync($arguments = [])
 * @method \Dew\Acs\Result closeUserIntention(array $arguments = [])
 * @method \Http\Promise\Promise closeUserIntentionAsync($arguments = [])
 * @method \Dew\Acs\Result recordPostBack(array $arguments = [])
 * @method \Http\Promise\Promise recordPostBackAsync($arguments = [])
 * @method \Dew\Acs\Result queryAvailableNumbers(array $arguments = [])
 * @method \Http\Promise\Promise queryAvailableNumbersAsync($arguments = [])
 * @method \Dew\Acs\Result startBackToBackCall(array $arguments = [])
 * @method \Http\Promise\Promise startBackToBackCallAsync($arguments = [])
 * @method \Dew\Acs\Result transferIntentionOwner(array $arguments = [])
 * @method \Http\Promise\Promise transferIntentionOwnerAsync($arguments = [])
 * @method \Dew\Acs\Result transferProduceOwner(array $arguments = [])
 * @method \Http\Promise\Promise transferProduceOwnerAsync($arguments = [])
 */
final class CompanyregClient extends AcsClient
{
    //
}
