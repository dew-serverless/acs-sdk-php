<?php

declare(strict_types=1);

namespace Dew\Acs\ResourceManager;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result enableResourceDirectory(array $arguments = [])
 * @method \Http\Promise\Promise enableResourceDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result sendVerificationCodeForEnableRD(array $arguments = [])
 * @method \Http\Promise\Promise sendVerificationCodeForEnableRDAsync($arguments = [])
 * @method \Dew\Acs\Result getResourceDirectory(array $arguments = [])
 * @method \Http\Promise\Promise getResourceDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result destroyResourceDirectory(array $arguments = [])
 * @method \Http\Promise\Promise destroyResourceDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result createFolder(array $arguments = [])
 * @method \Http\Promise\Promise createFolderAsync($arguments = [])
 * @method \Dew\Acs\Result getFolder(array $arguments = [])
 * @method \Http\Promise\Promise getFolderAsync($arguments = [])
 * @method \Dew\Acs\Result updateFolder(array $arguments = [])
 * @method \Http\Promise\Promise updateFolderAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFolder(array $arguments = [])
 * @method \Http\Promise\Promise deleteFolderAsync($arguments = [])
 * @method \Dew\Acs\Result listFoldersForParent(array $arguments = [])
 * @method \Http\Promise\Promise listFoldersForParentAsync($arguments = [])
 * @method \Dew\Acs\Result listAncestors(array $arguments = [])
 * @method \Http\Promise\Promise listAncestorsAsync($arguments = [])
 * @method \Dew\Acs\Result createResourceAccount(array $arguments = [])
 * @method \Http\Promise\Promise createResourceAccountAsync($arguments = [])
 * @method \Dew\Acs\Result updateAccount(array $arguments = [])
 * @method \Http\Promise\Promise updateAccountAsync($arguments = [])
 * @method \Dew\Acs\Result getAccount(array $arguments = [])
 * @method \Http\Promise\Promise getAccountAsync($arguments = [])
 * @method \Dew\Acs\Result getPayerForAccount(array $arguments = [])
 * @method \Http\Promise\Promise getPayerForAccountAsync($arguments = [])
 * @method \Dew\Acs\Result listAccounts(array $arguments = [])
 * @method \Http\Promise\Promise listAccountsAsync($arguments = [])
 * @method \Dew\Acs\Result listAccountsForParent(array $arguments = [])
 * @method \Http\Promise\Promise listAccountsForParentAsync($arguments = [])
 * @method \Dew\Acs\Result moveAccount(array $arguments = [])
 * @method \Http\Promise\Promise moveAccountAsync($arguments = [])
 * @method \Dew\Acs\Result removeCloudAccount(array $arguments = [])
 * @method \Http\Promise\Promise removeCloudAccountAsync($arguments = [])
 * @method \Dew\Acs\Result bindSecureMobilePhone(array $arguments = [])
 * @method \Http\Promise\Promise bindSecureMobilePhoneAsync($arguments = [])
 * @method \Dew\Acs\Result sendVerificationCodeForBindSecureMobilePhone(array $arguments = [])
 * @method \Http\Promise\Promise sendVerificationCodeForBindSecureMobilePhoneAsync($arguments = [])
 * @method \Dew\Acs\Result changeAccountEmail(array $arguments = [])
 * @method \Http\Promise\Promise changeAccountEmailAsync($arguments = [])
 * @method \Dew\Acs\Result retryChangeAccountEmail(array $arguments = [])
 * @method \Http\Promise\Promise retryChangeAccountEmailAsync($arguments = [])
 * @method \Dew\Acs\Result cancelChangeAccountEmail(array $arguments = [])
 * @method \Http\Promise\Promise cancelChangeAccountEmailAsync($arguments = [])
 * @method \Dew\Acs\Result checkAccountDelete(array $arguments = [])
 * @method \Http\Promise\Promise checkAccountDeleteAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccount(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccountAsync($arguments = [])
 * @method \Dew\Acs\Result setMemberDeletionPermission(array $arguments = [])
 * @method \Http\Promise\Promise setMemberDeletionPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result getAccountDeletionStatus(array $arguments = [])
 * @method \Http\Promise\Promise getAccountDeletionStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getAccountDeletionCheckResult(array $arguments = [])
 * @method \Http\Promise\Promise getAccountDeletionCheckResultAsync($arguments = [])
 * @method \Dew\Acs\Result inviteAccountToResourceDirectory(array $arguments = [])
 * @method \Http\Promise\Promise inviteAccountToResourceDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result getHandshake(array $arguments = [])
 * @method \Http\Promise\Promise getHandshakeAsync($arguments = [])
 * @method \Dew\Acs\Result cancelHandshake(array $arguments = [])
 * @method \Http\Promise\Promise cancelHandshakeAsync($arguments = [])
 * @method \Dew\Acs\Result listHandshakesForAccount(array $arguments = [])
 * @method \Http\Promise\Promise listHandshakesForAccountAsync($arguments = [])
 * @method \Dew\Acs\Result listHandshakesForResourceDirectory(array $arguments = [])
 * @method \Http\Promise\Promise listHandshakesForResourceDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result acceptHandshake(array $arguments = [])
 * @method \Http\Promise\Promise acceptHandshakeAsync($arguments = [])
 * @method \Dew\Acs\Result declineHandshake(array $arguments = [])
 * @method \Http\Promise\Promise declineHandshakeAsync($arguments = [])
 * @method \Dew\Acs\Result enableControlPolicy(array $arguments = [])
 * @method \Http\Promise\Promise enableControlPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getControlPolicyEnablementStatus(array $arguments = [])
 * @method \Http\Promise\Promise getControlPolicyEnablementStatusAsync($arguments = [])
 * @method \Dew\Acs\Result disableControlPolicy(array $arguments = [])
 * @method \Http\Promise\Promise disableControlPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result createControlPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createControlPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getControlPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getControlPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result updateControlPolicy(array $arguments = [])
 * @method \Http\Promise\Promise updateControlPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteControlPolicy(array $arguments = [])
 * @method \Http\Promise\Promise deleteControlPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result attachControlPolicy(array $arguments = [])
 * @method \Http\Promise\Promise attachControlPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result detachControlPolicy(array $arguments = [])
 * @method \Http\Promise\Promise detachControlPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listControlPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listControlPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result listControlPolicyAttachmentsForTarget(array $arguments = [])
 * @method \Http\Promise\Promise listControlPolicyAttachmentsForTargetAsync($arguments = [])
 * @method \Dew\Acs\Result listTargetAttachmentsForControlPolicy(array $arguments = [])
 * @method \Http\Promise\Promise listTargetAttachmentsForControlPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listTrustedServiceStatus(array $arguments = [])
 * @method \Http\Promise\Promise listTrustedServiceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result registerDelegatedAdministrator(array $arguments = [])
 * @method \Http\Promise\Promise registerDelegatedAdministratorAsync($arguments = [])
 * @method \Dew\Acs\Result deregisterDelegatedAdministrator(array $arguments = [])
 * @method \Http\Promise\Promise deregisterDelegatedAdministratorAsync($arguments = [])
 * @method \Dew\Acs\Result listDelegatedAdministrators(array $arguments = [])
 * @method \Http\Promise\Promise listDelegatedAdministratorsAsync($arguments = [])
 * @method \Dew\Acs\Result listDelegatedServicesForAccount(array $arguments = [])
 * @method \Http\Promise\Promise listDelegatedServicesForAccountAsync($arguments = [])
 * @method \Dew\Acs\Result createResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise createResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listResourceGroups(array $arguments = [])
 * @method \Http\Promise\Promise listResourceGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result listResources(array $arguments = [])
 * @method \Http\Promise\Promise listResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result getResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise getResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result moveResources(array $arguments = [])
 * @method \Http\Promise\Promise moveResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result enableAutoGrouping(array $arguments = [])
 * @method \Http\Promise\Promise enableAutoGroupingAsync($arguments = [])
 * @method \Dew\Acs\Result disableAutoGrouping(array $arguments = [])
 * @method \Http\Promise\Promise disableAutoGroupingAsync($arguments = [])
 * @method \Dew\Acs\Result updateAutoGroupingConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateAutoGroupingConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getAutoGroupingStatus(array $arguments = [])
 * @method \Http\Promise\Promise getAutoGroupingStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createAutoGroupingRule(array $arguments = [])
 * @method \Http\Promise\Promise createAutoGroupingRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAutoGroupingRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteAutoGroupingRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateAutoGroupingRule(array $arguments = [])
 * @method \Http\Promise\Promise updateAutoGroupingRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listAutoGroupingRules(array $arguments = [])
 * @method \Http\Promise\Promise listAutoGroupingRulesAsync($arguments = [])
 * @method \Dew\Acs\Result getAutoGroupingRule(array $arguments = [])
 * @method \Http\Promise\Promise getAutoGroupingRuleAsync($arguments = [])
 * @method \Dew\Acs\Result enableAssociatedTransfer(array $arguments = [])
 * @method \Http\Promise\Promise enableAssociatedTransferAsync($arguments = [])
 * @method \Dew\Acs\Result disableAssociatedTransfer(array $arguments = [])
 * @method \Http\Promise\Promise disableAssociatedTransferAsync($arguments = [])
 * @method \Dew\Acs\Result updateAssociatedTransferSetting(array $arguments = [])
 * @method \Http\Promise\Promise updateAssociatedTransferSettingAsync($arguments = [])
 * @method \Dew\Acs\Result listAssociatedTransferSetting(array $arguments = [])
 * @method \Http\Promise\Promise listAssociatedTransferSettingAsync($arguments = [])
 * @method \Dew\Acs\Result getResourceGroupResourceCounts(array $arguments = [])
 * @method \Http\Promise\Promise getResourceGroupResourceCountsAsync($arguments = [])
 * @method \Dew\Acs\Result createRole(array $arguments = [])
 * @method \Http\Promise\Promise createRoleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRole(array $arguments = [])
 * @method \Http\Promise\Promise deleteRoleAsync($arguments = [])
 * @method \Dew\Acs\Result updateRole(array $arguments = [])
 * @method \Http\Promise\Promise updateRoleAsync($arguments = [])
 * @method \Dew\Acs\Result getRole(array $arguments = [])
 * @method \Http\Promise\Promise getRoleAsync($arguments = [])
 * @method \Dew\Acs\Result listRoles(array $arguments = [])
 * @method \Http\Promise\Promise listRolesAsync($arguments = [])
 * @method \Dew\Acs\Result createServiceLinkedRole(array $arguments = [])
 * @method \Http\Promise\Promise createServiceLinkedRoleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteServiceLinkedRole(array $arguments = [])
 * @method \Http\Promise\Promise deleteServiceLinkedRoleAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceLinkedRoleDeletionStatus(array $arguments = [])
 * @method \Http\Promise\Promise getServiceLinkedRoleDeletionStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deletePolicy(array $arguments = [])
 * @method \Http\Promise\Promise deletePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result setDefaultPolicyVersion(array $arguments = [])
 * @method \Http\Promise\Promise setDefaultPolicyVersionAsync($arguments = [])
 * @method \Dew\Acs\Result attachPolicy(array $arguments = [])
 * @method \Http\Promise\Promise attachPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result detachPolicy(array $arguments = [])
 * @method \Http\Promise\Promise detachPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result getPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listPolicyAttachments(array $arguments = [])
 * @method \Http\Promise\Promise listPolicyAttachmentsAsync($arguments = [])
 * @method \Dew\Acs\Result createPolicyVersion(array $arguments = [])
 * @method \Http\Promise\Promise createPolicyVersionAsync($arguments = [])
 * @method \Dew\Acs\Result deletePolicyVersion(array $arguments = [])
 * @method \Http\Promise\Promise deletePolicyVersionAsync($arguments = [])
 * @method \Dew\Acs\Result listPolicyVersions(array $arguments = [])
 * @method \Http\Promise\Promise listPolicyVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result getPolicyVersion(array $arguments = [])
 * @method \Http\Promise\Promise getPolicyVersionAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagKeys(array $arguments = [])
 * @method \Http\Promise\Promise listTagKeysAsync($arguments = [])
 * @method \Dew\Acs\Result listTagValues(array $arguments = [])
 * @method \Http\Promise\Promise listTagValuesAsync($arguments = [])
 * @method \Dew\Acs\Result initResourceDirectory(array $arguments = [])
 * @method \Http\Promise\Promise initResourceDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result createCloudAccount(array $arguments = [])
 * @method \Http\Promise\Promise createCloudAccountAsync($arguments = [])
 * @method \Dew\Acs\Result promoteResourceAccount(array $arguments = [])
 * @method \Http\Promise\Promise promoteResourceAccountAsync($arguments = [])
 * @method \Dew\Acs\Result resendPromoteResourceAccountEmail(array $arguments = [])
 * @method \Http\Promise\Promise resendPromoteResourceAccountEmailAsync($arguments = [])
 * @method \Dew\Acs\Result resendCreateCloudAccountEmail(array $arguments = [])
 * @method \Http\Promise\Promise resendCreateCloudAccountEmailAsync($arguments = [])
 * @method \Dew\Acs\Result cancelCreateCloudAccount(array $arguments = [])
 * @method \Http\Promise\Promise cancelCreateCloudAccountAsync($arguments = [])
 * @method \Dew\Acs\Result cancelPromoteResourceAccount(array $arguments = [])
 * @method \Http\Promise\Promise cancelPromoteResourceAccountAsync($arguments = [])
 */
final class ResourceManagerClient extends AcsClient
{
    //
}
