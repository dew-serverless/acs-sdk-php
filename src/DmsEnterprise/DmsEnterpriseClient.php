<?php

declare(strict_types=1);

namespace Dew\Acs\DmsEnterprise;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result deleteUser(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserAsync($arguments = [])
 * @method \Dew\Acs\Result updateUser(array $arguments = [])
 * @method \Http\Promise\Promise updateUserAsync($arguments = [])
 * @method \Dew\Acs\Result disableUser(array $arguments = [])
 * @method \Http\Promise\Promise disableUserAsync($arguments = [])
 * @method \Dew\Acs\Result enableUser(array $arguments = [])
 * @method \Http\Promise\Promise enableUserAsync($arguments = [])
 * @method \Dew\Acs\Result listUsers(array $arguments = [])
 * @method \Http\Promise\Promise listUsersAsync($arguments = [])
 * @method \Dew\Acs\Result getUser(array $arguments = [])
 * @method \Http\Promise\Promise getUserAsync($arguments = [])
 * @method \Dew\Acs\Result getUserActiveTenant(array $arguments = [])
 * @method \Http\Promise\Promise getUserActiveTenantAsync($arguments = [])
 * @method \Dew\Acs\Result listUserTenants(array $arguments = [])
 * @method \Http\Promise\Promise listUserTenantsAsync($arguments = [])
 * @method \Dew\Acs\Result registerUser(array $arguments = [])
 * @method \Http\Promise\Promise registerUserAsync($arguments = [])
 * @method \Dew\Acs\Result addInstance(array $arguments = [])
 * @method \Http\Promise\Promise addInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstance(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result listInstances(array $arguments = [])
 * @method \Http\Promise\Promise listInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result getInstance(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result registerInstance(array $arguments = [])
 * @method \Http\Promise\Promise registerInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result updateInstance(array $arguments = [])
 * @method \Http\Promise\Promise updateInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getOpLog(array $arguments = [])
 * @method \Http\Promise\Promise getOpLogAsync($arguments = [])
 * @method \Dew\Acs\Result listInstanceLoginAuditLog(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceLoginAuditLogAsync($arguments = [])
 * @method \Dew\Acs\Result listProxySQLExecAuditLog(array $arguments = [])
 * @method \Http\Promise\Promise listProxySQLExecAuditLogAsync($arguments = [])
 * @method \Dew\Acs\Result listSQLExecAuditLog(array $arguments = [])
 * @method \Http\Promise\Promise listSQLExecAuditLogAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkFlowTemplates(array $arguments = [])
 * @method \Http\Promise\Promise listWorkFlowTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkFlowNodes(array $arguments = [])
 * @method \Http\Promise\Promise listWorkFlowNodesAsync($arguments = [])
 * @method \Dew\Acs\Result setWorkflowExtraInfo(array $arguments = [])
 * @method \Http\Promise\Promise setWorkflowExtraInfoAsync($arguments = [])
 * @method \Dew\Acs\Result createLogicDatabase(array $arguments = [])
 * @method \Http\Promise\Promise createLogicDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result addLogicTableRouteConfig(array $arguments = [])
 * @method \Http\Promise\Promise addLogicTableRouteConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLogicDatabase(array $arguments = [])
 * @method \Http\Promise\Promise deleteLogicDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLogicTableRouteConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteLogicTableRouteConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listLogicDatabases(array $arguments = [])
 * @method \Http\Promise\Promise listLogicDatabasesAsync($arguments = [])
 * @method \Dew\Acs\Result getLogicDatabase(array $arguments = [])
 * @method \Http\Promise\Promise getLogicDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result listLogicTables(array $arguments = [])
 * @method \Http\Promise\Promise listLogicTablesAsync($arguments = [])
 * @method \Dew\Acs\Result getDBTopology(array $arguments = [])
 * @method \Http\Promise\Promise getDBTopologyAsync($arguments = [])
 * @method \Dew\Acs\Result getTableDBTopology(array $arguments = [])
 * @method \Http\Promise\Promise getTableDBTopologyAsync($arguments = [])
 * @method \Dew\Acs\Result listLogicTableRouteConfig(array $arguments = [])
 * @method \Http\Promise\Promise listLogicTableRouteConfigAsync($arguments = [])
 * @method \Dew\Acs\Result editLogicDatabase(array $arguments = [])
 * @method \Http\Promise\Promise editLogicDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeDatabase(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result getDataLakeDatabase(array $arguments = [])
 * @method \Http\Promise\Promise getDataLakeDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeCatalog(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeCatalogAsync($arguments = [])
 * @method \Dew\Acs\Result getDataLakeCatalog(array $arguments = [])
 * @method \Http\Promise\Promise getDataLakeCatalogAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeTablebaseInfo(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeTablebaseInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getDataLakeTable(array $arguments = [])
 * @method \Http\Promise\Promise getDataLakeTableAsync($arguments = [])
 * @method \Dew\Acs\Result batchCreateDataLakePartitions(array $arguments = [])
 * @method \Http\Promise\Promise batchCreateDataLakePartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataLakeTable(array $arguments = [])
 * @method \Http\Promise\Promise updateDataLakeTableAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataLakePartition(array $arguments = [])
 * @method \Http\Promise\Promise updateDataLakePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataLakeDatabase(array $arguments = [])
 * @method \Http\Promise\Promise updateDataLakeDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeTableName(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeTableNameAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeTable(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeTableAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakePartitionName(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakePartitionNameAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakePartitionByFilter(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakePartitionByFilterAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakePartition(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result getDataLakePartition(array $arguments = [])
 * @method \Http\Promise\Promise getDataLakePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataLakeTable(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataLakeTableAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataLakePartition(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataLakePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataLakeDatabase(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataLakeDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result createDataLakeTable(array $arguments = [])
 * @method \Http\Promise\Promise createDataLakeTableAsync($arguments = [])
 * @method \Dew\Acs\Result createDataLakePartition(array $arguments = [])
 * @method \Http\Promise\Promise createDataLakePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result createDataLakeDatabase(array $arguments = [])
 * @method \Http\Promise\Promise createDataLakeDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result batchUpdateDataLakePartitions(array $arguments = [])
 * @method \Http\Promise\Promise batchUpdateDataLakePartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeleteDataLakePartitions(array $arguments = [])
 * @method \Http\Promise\Promise batchDeleteDataLakePartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result createDataLakeFunction(array $arguments = [])
 * @method \Http\Promise\Promise createDataLakeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result getDataLakeFunction(array $arguments = [])
 * @method \Http\Promise\Promise getDataLakeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataLakeFunction(array $arguments = [])
 * @method \Http\Promise\Promise updateDataLakeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataLakeFunction(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataLakeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeFunction(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeFunctionName(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeFunctionNameAsync($arguments = [])
 * @method \Dew\Acs\Result searchDatabase(array $arguments = [])
 * @method \Http\Promise\Promise searchDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result searchTable(array $arguments = [])
 * @method \Http\Promise\Promise searchTableAsync($arguments = [])
 * @method \Dew\Acs\Result listDatabases(array $arguments = [])
 * @method \Http\Promise\Promise listDatabasesAsync($arguments = [])
 * @method \Dew\Acs\Result listTables(array $arguments = [])
 * @method \Http\Promise\Promise listTablesAsync($arguments = [])
 * @method \Dew\Acs\Result listColumns(array $arguments = [])
 * @method \Http\Promise\Promise listColumnsAsync($arguments = [])
 * @method \Dew\Acs\Result listIndexes(array $arguments = [])
 * @method \Http\Promise\Promise listIndexesAsync($arguments = [])
 * @method \Dew\Acs\Result getDatabase(array $arguments = [])
 * @method \Http\Promise\Promise getDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result getPhysicalDatabase(array $arguments = [])
 * @method \Http\Promise\Promise getPhysicalDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result getTableTopology(array $arguments = [])
 * @method \Http\Promise\Promise getTableTopologyAsync($arguments = [])
 * @method \Dew\Acs\Result getMetaTableDetailInfo(array $arguments = [])
 * @method \Http\Promise\Promise getMetaTableDetailInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getMetaTableColumn(array $arguments = [])
 * @method \Http\Promise\Promise getMetaTableColumnAsync($arguments = [])
 * @method \Dew\Acs\Result syncInstanceMeta(array $arguments = [])
 * @method \Http\Promise\Promise syncInstanceMetaAsync($arguments = [])
 * @method \Dew\Acs\Result syncDatabaseMeta(array $arguments = [])
 * @method \Http\Promise\Promise syncDatabaseMetaAsync($arguments = [])
 * @method \Dew\Acs\Result createOrder(array $arguments = [])
 * @method \Http\Promise\Promise createOrderAsync($arguments = [])
 * @method \Dew\Acs\Result getApprovalDetail(array $arguments = [])
 * @method \Http\Promise\Promise getApprovalDetailAsync($arguments = [])
 * @method \Dew\Acs\Result listOrders(array $arguments = [])
 * @method \Http\Promise\Promise listOrdersAsync($arguments = [])
 * @method \Dew\Acs\Result getOrderBaseInfo(array $arguments = [])
 * @method \Http\Promise\Promise getOrderBaseInfoAsync($arguments = [])
 * @method \Dew\Acs\Result submitOrderApproval(array $arguments = [])
 * @method \Http\Promise\Promise submitOrderApprovalAsync($arguments = [])
 * @method \Dew\Acs\Result approveOrder(array $arguments = [])
 * @method \Http\Promise\Promise approveOrderAsync($arguments = [])
 * @method \Dew\Acs\Result closeOrder(array $arguments = [])
 * @method \Http\Promise\Promise closeOrderAsync($arguments = [])
 * @method \Dew\Acs\Result getOrderAttachmentFile(array $arguments = [])
 * @method \Http\Promise\Promise getOrderAttachmentFileAsync($arguments = [])
 * @method \Dew\Acs\Result previewWorkflow(array $arguments = [])
 * @method \Http\Promise\Promise previewWorkflowAsync($arguments = [])
 * @method \Dew\Acs\Result getOwnerApplyOrderDetail(array $arguments = [])
 * @method \Http\Promise\Promise getOwnerApplyOrderDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getPermApplyOrderDetail(array $arguments = [])
 * @method \Http\Promise\Promise getPermApplyOrderDetailAsync($arguments = [])
 * @method \Dew\Acs\Result createStructSyncOrder(array $arguments = [])
 * @method \Http\Promise\Promise createStructSyncOrderAsync($arguments = [])
 * @method \Dew\Acs\Result getStructSyncOrderDetail(array $arguments = [])
 * @method \Http\Promise\Promise getStructSyncOrderDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getStructSyncJobDetail(array $arguments = [])
 * @method \Http\Promise\Promise getStructSyncJobDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getStructSyncJobAnalyzeResult(array $arguments = [])
 * @method \Http\Promise\Promise getStructSyncJobAnalyzeResultAsync($arguments = [])
 * @method \Dew\Acs\Result getStructSyncExecSqlDetail(array $arguments = [])
 * @method \Http\Promise\Promise getStructSyncExecSqlDetailAsync($arguments = [])
 * @method \Dew\Acs\Result submitStructSyncOrderApproval(array $arguments = [])
 * @method \Http\Promise\Promise submitStructSyncOrderApprovalAsync($arguments = [])
 * @method \Dew\Acs\Result executeStructSync(array $arguments = [])
 * @method \Http\Promise\Promise executeStructSyncAsync($arguments = [])
 * @method \Dew\Acs\Result createDataCorrectOrder(array $arguments = [])
 * @method \Http\Promise\Promise createDataCorrectOrderAsync($arguments = [])
 * @method \Dew\Acs\Result createDataCronClearOrder(array $arguments = [])
 * @method \Http\Promise\Promise createDataCronClearOrderAsync($arguments = [])
 * @method \Dew\Acs\Result createDataImportOrder(array $arguments = [])
 * @method \Http\Promise\Promise createDataImportOrderAsync($arguments = [])
 * @method \Dew\Acs\Result createFreeLockCorrectOrder(array $arguments = [])
 * @method \Http\Promise\Promise createFreeLockCorrectOrderAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDataCorrectExecSQL(array $arguments = [])
 * @method \Http\Promise\Promise modifyDataCorrectExecSQLAsync($arguments = [])
 * @method \Dew\Acs\Result pauseDataCorrectSQLJob(array $arguments = [])
 * @method \Http\Promise\Promise pauseDataCorrectSQLJobAsync($arguments = [])
 * @method \Dew\Acs\Result getDataCorrectTaskDetail(array $arguments = [])
 * @method \Http\Promise\Promise getDataCorrectTaskDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getDataCronClearTaskDetailList(array $arguments = [])
 * @method \Http\Promise\Promise getDataCronClearTaskDetailListAsync($arguments = [])
 * @method \Dew\Acs\Result getDataCorrectRollbackFile(array $arguments = [])
 * @method \Http\Promise\Promise getDataCorrectRollbackFileAsync($arguments = [])
 * @method \Dew\Acs\Result getDataCorrectBackupFiles(array $arguments = [])
 * @method \Http\Promise\Promise getDataCorrectBackupFilesAsync($arguments = [])
 * @method \Dew\Acs\Result getDataCorrectOrderDetail(array $arguments = [])
 * @method \Http\Promise\Promise getDataCorrectOrderDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getDataCronClearConfig(array $arguments = [])
 * @method \Http\Promise\Promise getDataCronClearConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getDataCorrectSQLFile(array $arguments = [])
 * @method \Http\Promise\Promise getDataCorrectSQLFileAsync($arguments = [])
 * @method \Dew\Acs\Result listDataCorrectPreCheckSQL(array $arguments = [])
 * @method \Http\Promise\Promise listDataCorrectPreCheckSQLAsync($arguments = [])
 * @method \Dew\Acs\Result listDataCorrectPreCheckDB(array $arguments = [])
 * @method \Http\Promise\Promise listDataCorrectPreCheckDBAsync($arguments = [])
 * @method \Dew\Acs\Result executeDataCorrect(array $arguments = [])
 * @method \Http\Promise\Promise executeDataCorrectAsync($arguments = [])
 * @method \Dew\Acs\Result retryDataCorrectPreCheck(array $arguments = [])
 * @method \Http\Promise\Promise retryDataCorrectPreCheckAsync($arguments = [])
 * @method \Dew\Acs\Result restartDataCorrectSQLJob(array $arguments = [])
 * @method \Http\Promise\Promise restartDataCorrectSQLJobAsync($arguments = [])
 * @method \Dew\Acs\Result listDataImportSQLPreCheckDetail(array $arguments = [])
 * @method \Http\Promise\Promise listDataImportSQLPreCheckDetailAsync($arguments = [])
 * @method \Dew\Acs\Result listDataImportSQLType(array $arguments = [])
 * @method \Http\Promise\Promise listDataImportSQLTypeAsync($arguments = [])
 * @method \Dew\Acs\Result getDataImportSQL(array $arguments = [])
 * @method \Http\Promise\Promise getDataImportSQLAsync($arguments = [])
 * @method \Dew\Acs\Result skipDataCorrectRowCheck(array $arguments = [])
 * @method \Http\Promise\Promise skipDataCorrectRowCheckAsync($arguments = [])
 * @method \Dew\Acs\Result createProcCorrectOrder(array $arguments = [])
 * @method \Http\Promise\Promise createProcCorrectOrderAsync($arguments = [])
 * @method \Dew\Acs\Result createPublishGroupTask(array $arguments = [])
 * @method \Http\Promise\Promise createPublishGroupTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listDDLPublishRecords(array $arguments = [])
 * @method \Http\Promise\Promise listDDLPublishRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result getTableDesignProjectFlow(array $arguments = [])
 * @method \Http\Promise\Promise getTableDesignProjectFlowAsync($arguments = [])
 * @method \Dew\Acs\Result getTableDesignProjectInfo(array $arguments = [])
 * @method \Http\Promise\Promise getTableDesignProjectInfoAsync($arguments = [])
 * @method \Dew\Acs\Result createDatabaseExportOrder(array $arguments = [])
 * @method \Http\Promise\Promise createDatabaseExportOrderAsync($arguments = [])
 * @method \Dew\Acs\Result createDataExportOrder(array $arguments = [])
 * @method \Http\Promise\Promise createDataExportOrderAsync($arguments = [])
 * @method \Dew\Acs\Result executeDataExport(array $arguments = [])
 * @method \Http\Promise\Promise executeDataExportAsync($arguments = [])
 * @method \Dew\Acs\Result getDataExportPreCheckDetail(array $arguments = [])
 * @method \Http\Promise\Promise getDataExportPreCheckDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getDataExportDownloadURL(array $arguments = [])
 * @method \Http\Promise\Promise getDataExportDownloadURLAsync($arguments = [])
 * @method \Dew\Acs\Result getDatabaseExportOrderDetail(array $arguments = [])
 * @method \Http\Promise\Promise getDatabaseExportOrderDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getDataExportOrderDetail(array $arguments = [])
 * @method \Http\Promise\Promise getDataExportOrderDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getDbExportDownloadURL(array $arguments = [])
 * @method \Http\Promise\Promise getDbExportDownloadURLAsync($arguments = [])
 * @method \Dew\Acs\Result suspendDataExportJob(array $arguments = [])
 * @method \Http\Promise\Promise suspendDataExportJobAsync($arguments = [])
 * @method \Dew\Acs\Result pauseDataExportJob(array $arguments = [])
 * @method \Http\Promise\Promise pauseDataExportJobAsync($arguments = [])
 * @method \Dew\Acs\Result removeDataExportJob(array $arguments = [])
 * @method \Http\Promise\Promise removeDataExportJobAsync($arguments = [])
 * @method \Dew\Acs\Result restartDataExportJob(array $arguments = [])
 * @method \Http\Promise\Promise restartDataExportJobAsync($arguments = [])
 * @method \Dew\Acs\Result createSQLReviewOrder(array $arguments = [])
 * @method \Http\Promise\Promise createSQLReviewOrderAsync($arguments = [])
 * @method \Dew\Acs\Result getSQLReviewCheckResultStatus(array $arguments = [])
 * @method \Http\Promise\Promise getSQLReviewCheckResultStatusAsync($arguments = [])
 * @method \Dew\Acs\Result listSQLReviewOriginSQL(array $arguments = [])
 * @method \Http\Promise\Promise listSQLReviewOriginSQLAsync($arguments = [])
 * @method \Dew\Acs\Result getSQLReviewOptimizeDetail(array $arguments = [])
 * @method \Http\Promise\Promise getSQLReviewOptimizeDetailAsync($arguments = [])
 * @method \Dew\Acs\Result createDataTrackOrder(array $arguments = [])
 * @method \Http\Promise\Promise createDataTrackOrderAsync($arguments = [])
 * @method \Dew\Acs\Result getDataTrackJobDegree(array $arguments = [])
 * @method \Http\Promise\Promise getDataTrackJobDegreeAsync($arguments = [])
 * @method \Dew\Acs\Result getDataTrackJobTableMeta(array $arguments = [])
 * @method \Http\Promise\Promise getDataTrackJobTableMetaAsync($arguments = [])
 * @method \Dew\Acs\Result getDataTrackOrderDetail(array $arguments = [])
 * @method \Http\Promise\Promise getDataTrackOrderDetailAsync($arguments = [])
 * @method \Dew\Acs\Result searchDataTrackResult(array $arguments = [])
 * @method \Http\Promise\Promise searchDataTrackResultAsync($arguments = [])
 * @method \Dew\Acs\Result downloadDataTrackResult(array $arguments = [])
 * @method \Http\Promise\Promise downloadDataTrackResultAsync($arguments = [])
 * @method \Dew\Acs\Result queryDataTrackResultDownloadStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryDataTrackResultDownloadStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createUploadFileJob(array $arguments = [])
 * @method \Http\Promise\Promise createUploadFileJobAsync($arguments = [])
 * @method \Dew\Acs\Result createUploadOSSFileJob(array $arguments = [])
 * @method \Http\Promise\Promise createUploadOSSFileJobAsync($arguments = [])
 * @method \Dew\Acs\Result getUserUploadFileJob(array $arguments = [])
 * @method \Http\Promise\Promise getUserUploadFileJobAsync($arguments = [])
 * @method \Dew\Acs\Result createDataArchiveOrder(array $arguments = [])
 * @method \Http\Promise\Promise createDataArchiveOrderAsync($arguments = [])
 * @method \Dew\Acs\Result getDataArchiveOrderDetail(array $arguments = [])
 * @method \Http\Promise\Promise getDataArchiveOrderDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getDataArchiveCount(array $arguments = [])
 * @method \Http\Promise\Promise getDataArchiveCountAsync($arguments = [])
 * @method \Dew\Acs\Result getPagedInstance(array $arguments = [])
 * @method \Http\Promise\Promise getPagedInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result listDBTaskSQLJob(array $arguments = [])
 * @method \Http\Promise\Promise listDBTaskSQLJobAsync($arguments = [])
 * @method \Dew\Acs\Result listDBTaskSQLJobDetail(array $arguments = [])
 * @method \Http\Promise\Promise listDBTaskSQLJobDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getDBTaskSQLJobLog(array $arguments = [])
 * @method \Http\Promise\Promise getDBTaskSQLJobLogAsync($arguments = [])
 * @method \Dew\Acs\Result getOnlineDDLProgress(array $arguments = [])
 * @method \Http\Promise\Promise getOnlineDDLProgressAsync($arguments = [])
 * @method \Dew\Acs\Result setOwners(array $arguments = [])
 * @method \Http\Promise\Promise setOwnersAsync($arguments = [])
 * @method \Dew\Acs\Result listInstanceUserPermissions(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceUserPermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result listDatabaseUserPermssions(array $arguments = [])
 * @method \Http\Promise\Promise listDatabaseUserPermssionsAsync($arguments = [])
 * @method \Dew\Acs\Result listUserPermissions(array $arguments = [])
 * @method \Http\Promise\Promise listUserPermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result grantUserPermission(array $arguments = [])
 * @method \Http\Promise\Promise grantUserPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result revokeUserPermission(array $arguments = [])
 * @method \Http\Promise\Promise revokeUserPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result listAuthorizedInstancesForUser(array $arguments = [])
 * @method \Http\Promise\Promise listAuthorizedInstancesForUserAsync($arguments = [])
 * @method \Dew\Acs\Result listAuthorizedUsersForInstance(array $arguments = [])
 * @method \Http\Promise\Promise listAuthorizedUsersForInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result listAuthorizedDatabasesForUser(array $arguments = [])
 * @method \Http\Promise\Promise listAuthorizedDatabasesForUserAsync($arguments = [])
 * @method \Dew\Acs\Result listAuthorizedUsersForDatabase(array $arguments = [])
 * @method \Http\Promise\Promise listAuthorizedUsersForDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result createStandardGroup(array $arguments = [])
 * @method \Http\Promise\Promise createStandardGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listStandardGroups(array $arguments = [])
 * @method \Http\Promise\Promise listStandardGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result updateStandardGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateStandardGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteStandardGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteStandardGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getStandardGroup(array $arguments = [])
 * @method \Http\Promise\Promise getStandardGroupAsync($arguments = [])
 * @method \Dew\Acs\Result addDesensitizationRule(array $arguments = [])
 * @method \Http\Promise\Promise addDesensitizationRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listDesensitizationRule(array $arguments = [])
 * @method \Http\Promise\Promise listDesensitizationRuleAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDesensitizationStrategy(array $arguments = [])
 * @method \Http\Promise\Promise modifyDesensitizationStrategyAsync($arguments = [])
 * @method \Dew\Acs\Result listClassificationTemplates(array $arguments = [])
 * @method \Http\Promise\Promise listClassificationTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result listSensitiveDataAuditLog(array $arguments = [])
 * @method \Http\Promise\Promise listSensitiveDataAuditLogAsync($arguments = [])
 * @method \Dew\Acs\Result listSensitiveColumns(array $arguments = [])
 * @method \Http\Promise\Promise listSensitiveColumnsAsync($arguments = [])
 * @method \Dew\Acs\Result listSensitiveColumnsDetail(array $arguments = [])
 * @method \Http\Promise\Promise listSensitiveColumnsDetailAsync($arguments = [])
 * @method \Dew\Acs\Result changeColumnSecLevel(array $arguments = [])
 * @method \Http\Promise\Promise changeColumnSecLevelAsync($arguments = [])
 * @method \Dew\Acs\Result changeColumnSecurityLevel(array $arguments = [])
 * @method \Http\Promise\Promise changeColumnSecurityLevelAsync($arguments = [])
 * @method \Dew\Acs\Result getClassificationTemplate(array $arguments = [])
 * @method \Http\Promise\Promise getClassificationTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result listSensitivityLevel(array $arguments = [])
 * @method \Http\Promise\Promise listSensitivityLevelAsync($arguments = [])
 * @method \Dew\Acs\Result listSensitiveColumnInfo(array $arguments = [])
 * @method \Http\Promise\Promise listSensitiveColumnInfoAsync($arguments = [])
 * @method \Dew\Acs\Result createProxy(array $arguments = [])
 * @method \Http\Promise\Promise createProxyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProxy(array $arguments = [])
 * @method \Http\Promise\Promise deleteProxyAsync($arguments = [])
 * @method \Dew\Acs\Result listProxies(array $arguments = [])
 * @method \Http\Promise\Promise listProxiesAsync($arguments = [])
 * @method \Dew\Acs\Result getProxy(array $arguments = [])
 * @method \Http\Promise\Promise getProxyAsync($arguments = [])
 * @method \Dew\Acs\Result createProxyAccess(array $arguments = [])
 * @method \Http\Promise\Promise createProxyAccessAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProxyAccess(array $arguments = [])
 * @method \Http\Promise\Promise deleteProxyAccessAsync($arguments = [])
 * @method \Dew\Acs\Result listProxyAccesses(array $arguments = [])
 * @method \Http\Promise\Promise listProxyAccessesAsync($arguments = [])
 * @method \Dew\Acs\Result inspectProxyAccessSecret(array $arguments = [])
 * @method \Http\Promise\Promise inspectProxyAccessSecretAsync($arguments = [])
 * @method \Dew\Acs\Result getProxyAccess(array $arguments = [])
 * @method \Http\Promise\Promise getProxyAccessAsync($arguments = [])
 * @method \Dew\Acs\Result grantTemplateAuthority(array $arguments = [])
 * @method \Http\Promise\Promise grantTemplateAuthorityAsync($arguments = [])
 * @method \Dew\Acs\Result revokeTemplateAuthority(array $arguments = [])
 * @method \Http\Promise\Promise revokeTemplateAuthorityAsync($arguments = [])
 * @method \Dew\Acs\Result createAuthorityTemplate(array $arguments = [])
 * @method \Http\Promise\Promise createAuthorityTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result updateAuthorityTemplate(array $arguments = [])
 * @method \Http\Promise\Promise updateAuthorityTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result addAuthorityTemplateItems(array $arguments = [])
 * @method \Http\Promise\Promise addAuthorityTemplateItemsAsync($arguments = [])
 * @method \Dew\Acs\Result getAuthorityTemplateItem(array $arguments = [])
 * @method \Http\Promise\Promise getAuthorityTemplateItemAsync($arguments = [])
 * @method \Dew\Acs\Result getAuthorityTemplate(array $arguments = [])
 * @method \Http\Promise\Promise getAuthorityTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result listAuthorityTemplate(array $arguments = [])
 * @method \Http\Promise\Promise listAuthorityTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAuthorityTemplate(array $arguments = [])
 * @method \Http\Promise\Promise deleteAuthorityTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result createAbacPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createAbacPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listAbacPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listAbacPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result updateAbacPolicy(array $arguments = [])
 * @method \Http\Promise\Promise updateAbacPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAbacPolicy(array $arguments = [])
 * @method \Http\Promise\Promise deleteAbacPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getAbacPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getAbacPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result createAbacAuthorization(array $arguments = [])
 * @method \Http\Promise\Promise createAbacAuthorizationAsync($arguments = [])
 * @method \Dew\Acs\Result listAbacAuthorizations(array $arguments = [])
 * @method \Http\Promise\Promise listAbacAuthorizationsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAbacAuthorization(array $arguments = [])
 * @method \Http\Promise\Promise deleteAbacAuthorizationAsync($arguments = [])
 * @method \Dew\Acs\Result executeScript(array $arguments = [])
 * @method \Http\Promise\Promise executeScriptAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskFlowConstants(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskFlowConstantsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTaskFlow(array $arguments = [])
 * @method \Http\Promise\Promise deleteTaskFlowAsync($arguments = [])
 * @method \Dew\Acs\Result offlineTaskFlow(array $arguments = [])
 * @method \Http\Promise\Promise offlineTaskFlowAsync($arguments = [])
 * @method \Dew\Acs\Result listTaskFlow(array $arguments = [])
 * @method \Http\Promise\Promise listTaskFlowAsync($arguments = [])
 * @method \Dew\Acs\Result getTaskInstanceRelation(array $arguments = [])
 * @method \Http\Promise\Promise getTaskInstanceRelationAsync($arguments = [])
 * @method \Dew\Acs\Result listTaskFlowInstance(array $arguments = [])
 * @method \Http\Promise\Promise listTaskFlowInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result listDAGVersions(array $arguments = [])
 * @method \Http\Promise\Promise listDAGVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result reDeployLhDagVersion(array $arguments = [])
 * @method \Http\Promise\Promise reDeployLhDagVersionAsync($arguments = [])
 * @method \Dew\Acs\Result updateScenario(array $arguments = [])
 * @method \Http\Promise\Promise updateScenarioAsync($arguments = [])
 * @method \Dew\Acs\Result resumeTaskFlowInstance(array $arguments = [])
 * @method \Http\Promise\Promise resumeTaskFlowInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskContent(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskContentAsync($arguments = [])
 * @method \Dew\Acs\Result listTaskFlowsByPage(array $arguments = [])
 * @method \Http\Promise\Promise listTaskFlowsByPageAsync($arguments = [])
 * @method \Dew\Acs\Result listScenarios(array $arguments = [])
 * @method \Http\Promise\Promise listScenariosAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listTaskFlowConstants(array $arguments = [])
 * @method \Http\Promise\Promise listTaskFlowConstantsAsync($arguments = [])
 * @method \Dew\Acs\Result backFill(array $arguments = [])
 * @method \Http\Promise\Promise backFillAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskTimeVariables(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskTimeVariablesAsync($arguments = [])
 * @method \Dew\Acs\Result listTaskFlowTimeVariables(array $arguments = [])
 * @method \Http\Promise\Promise listTaskFlowTimeVariablesAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskFlowTimeVariables(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskFlowTimeVariablesAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskFlowCooperators(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskFlowCooperatorsAsync($arguments = [])
 * @method \Dew\Acs\Result createScenario(array $arguments = [])
 * @method \Http\Promise\Promise createScenarioAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScenario(array $arguments = [])
 * @method \Http\Promise\Promise deleteScenarioAsync($arguments = [])
 * @method \Dew\Acs\Result updateSLARules(array $arguments = [])
 * @method \Http\Promise\Promise updateSLARulesAsync($arguments = [])
 * @method \Dew\Acs\Result getRuleNumLimitOfSLA(array $arguments = [])
 * @method \Http\Promise\Promise getRuleNumLimitOfSLAAsync($arguments = [])
 * @method \Dew\Acs\Result getIntervalLimitOfSLA(array $arguments = [])
 * @method \Http\Promise\Promise getIntervalLimitOfSLAAsync($arguments = [])
 * @method \Dew\Acs\Result listDefaultSLARules(array $arguments = [])
 * @method \Http\Promise\Promise listDefaultSLARulesAsync($arguments = [])
 * @method \Dew\Acs\Result listTaskFlowCooperators(array $arguments = [])
 * @method \Http\Promise\Promise listTaskFlowCooperatorsAsync($arguments = [])
 * @method \Dew\Acs\Result listSLARules(array $arguments = [])
 * @method \Http\Promise\Promise listSLARulesAsync($arguments = [])
 * @method \Dew\Acs\Result getTask(array $arguments = [])
 * @method \Http\Promise\Promise getTaskAsync($arguments = [])
 * @method \Dew\Acs\Result moveTaskFlowToScenario(array $arguments = [])
 * @method \Http\Promise\Promise moveTaskFlowToScenarioAsync($arguments = [])
 * @method \Dew\Acs\Result getTaskFlowNotification(array $arguments = [])
 * @method \Http\Promise\Promise getTaskFlowNotificationAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskName(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskNameAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskOutput(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskOutputAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTaskFlowEdgesByCondition(array $arguments = [])
 * @method \Http\Promise\Promise deleteTaskFlowEdgesByConditionAsync($arguments = [])
 * @method \Dew\Acs\Result listTaskFlowEdgesByCondition(array $arguments = [])
 * @method \Http\Promise\Promise listTaskFlowEdgesByConditionAsync($arguments = [])
 * @method \Dew\Acs\Result addTaskFlowEdges(array $arguments = [])
 * @method \Http\Promise\Promise addTaskFlowEdgesAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskFlowNameAndDesc(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskFlowNameAndDescAsync($arguments = [])
 * @method \Dew\Acs\Result getTaskFlowGraph(array $arguments = [])
 * @method \Http\Promise\Promise getTaskFlowGraphAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskFlowEdges(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskFlowEdgesAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskFlowOwner(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskFlowOwnerAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskFlowSchedule(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskFlowScheduleAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskFlowRelations(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskFlowRelationsAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskFlowNotification(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskFlowNotificationAsync($arguments = [])
 * @method \Dew\Acs\Result listTasksInTaskFlow(array $arguments = [])
 * @method \Http\Promise\Promise listTasksInTaskFlowAsync($arguments = [])
 * @method \Dew\Acs\Result createTaskFlow(array $arguments = [])
 * @method \Http\Promise\Promise createTaskFlowAsync($arguments = [])
 * @method \Dew\Acs\Result suspendTaskFlowInstance(array $arguments = [])
 * @method \Http\Promise\Promise suspendTaskFlowInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result reRunTaskFlowInstance(array $arguments = [])
 * @method \Http\Promise\Promise reRunTaskFlowInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result makeTaskFlowInstanceSuccess(array $arguments = [])
 * @method \Http\Promise\Promise makeTaskFlowInstanceSuccessAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTask(array $arguments = [])
 * @method \Http\Promise\Promise deleteTaskAsync($arguments = [])
 * @method \Dew\Acs\Result publishAndDeployTaskFlow(array $arguments = [])
 * @method \Http\Promise\Promise publishAndDeployTaskFlowAsync($arguments = [])
 * @method \Dew\Acs\Result stopTaskFlowInstance(array $arguments = [])
 * @method \Http\Promise\Promise stopTaskFlowInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createTask(array $arguments = [])
 * @method \Http\Promise\Promise createTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createLakeHouseSpace(array $arguments = [])
 * @method \Http\Promise\Promise createLakeHouseSpaceAsync($arguments = [])
 * @method \Dew\Acs\Result getLhSpaceByName(array $arguments = [])
 * @method \Http\Promise\Promise getLhSpaceByNameAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLakeHouseSpace(array $arguments = [])
 * @method \Http\Promise\Promise deleteLakeHouseSpaceAsync($arguments = [])
 * @method \Dew\Acs\Result listLhTaskFlowAndScenario(array $arguments = [])
 * @method \Http\Promise\Promise listLhTaskFlowAndScenarioAsync($arguments = [])
 * @method \Dew\Acs\Result addLhMembers(array $arguments = [])
 * @method \Http\Promise\Promise addLhMembersAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLhMembers(array $arguments = [])
 * @method \Http\Promise\Promise deleteLhMembersAsync($arguments = [])
 * @method \Dew\Acs\Result changeLhDagOwner(array $arguments = [])
 * @method \Http\Promise\Promise changeLhDagOwnerAsync($arguments = [])
 * @method \Dew\Acs\Result listEffectiveOrders(array $arguments = [])
 * @method \Http\Promise\Promise listEffectiveOrdersAsync($arguments = [])
 * @method \Dew\Acs\Result refundPayAsYouGoOrder(array $arguments = [])
 * @method \Http\Promise\Promise refundPayAsYouGoOrderAsync($arguments = [])
 * @method \Dew\Acs\Result buyPayAsYouGoOrder(array $arguments = [])
 * @method \Http\Promise\Promise buyPayAsYouGoOrderAsync($arguments = [])
 * @method \Dew\Acs\Result analyzeSQLLineage(array $arguments = [])
 * @method \Http\Promise\Promise analyzeSQLLineageAsync($arguments = [])
 */
final class DmsEnterpriseClient extends AcsClient
{
    //
}
