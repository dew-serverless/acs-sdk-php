<?php

declare(strict_types=1);

namespace Dew\Acs\MaxCompute;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result listQuotas(array $arguments = [])
 * @method \Http\Promise\Promise listQuotasAsync($arguments = [])
 * @method \Dew\Acs\Result queryQuota(array $arguments = [])
 * @method \Http\Promise\Promise queryQuotaAsync($arguments = [])
 * @method \Dew\Acs\Result getQuota(array $arguments = [])
 * @method \Http\Promise\Promise getQuotaAsync($arguments = [])
 * @method \Dew\Acs\Result createComputeQuotaPlan(array $arguments = [])
 * @method \Http\Promise\Promise createComputeQuotaPlanAsync($arguments = [])
 * @method \Dew\Acs\Result updateComputeSubQuota(array $arguments = [])
 * @method \Http\Promise\Promise updateComputeSubQuotaAsync($arguments = [])
 * @method \Dew\Acs\Result getComputeQuotaPlan(array $arguments = [])
 * @method \Http\Promise\Promise getComputeQuotaPlanAsync($arguments = [])
 * @method \Dew\Acs\Result listComputeQuotaPlan(array $arguments = [])
 * @method \Http\Promise\Promise listComputeQuotaPlanAsync($arguments = [])
 * @method \Dew\Acs\Result updateComputeQuotaPlan(array $arguments = [])
 * @method \Http\Promise\Promise updateComputeQuotaPlanAsync($arguments = [])
 * @method \Dew\Acs\Result deleteComputeQuotaPlan(array $arguments = [])
 * @method \Http\Promise\Promise deleteComputeQuotaPlanAsync($arguments = [])
 * @method \Dew\Acs\Result applyComputeQuotaPlan(array $arguments = [])
 * @method \Http\Promise\Promise applyComputeQuotaPlanAsync($arguments = [])
 * @method \Dew\Acs\Result getComputeQuotaSchedule(array $arguments = [])
 * @method \Http\Promise\Promise getComputeQuotaScheduleAsync($arguments = [])
 * @method \Dew\Acs\Result updateComputeQuotaSchedule(array $arguments = [])
 * @method \Http\Promise\Promise updateComputeQuotaScheduleAsync($arguments = [])
 * @method \Dew\Acs\Result getComputeEffectivePlan(array $arguments = [])
 * @method \Http\Promise\Promise getComputeEffectivePlanAsync($arguments = [])
 * @method \Dew\Acs\Result listTunnelQuotaTimer(array $arguments = [])
 * @method \Http\Promise\Promise listTunnelQuotaTimerAsync($arguments = [])
 * @method \Dew\Acs\Result updateTunnelQuotaTimer(array $arguments = [])
 * @method \Http\Promise\Promise updateTunnelQuotaTimerAsync($arguments = [])
 * @method \Dew\Acs\Result createQuotaPlan(array $arguments = [])
 * @method \Http\Promise\Promise createQuotaPlanAsync($arguments = [])
 * @method \Dew\Acs\Result getQuotaPlan(array $arguments = [])
 * @method \Http\Promise\Promise getQuotaPlanAsync($arguments = [])
 * @method \Dew\Acs\Result updateQuotaPlan(array $arguments = [])
 * @method \Http\Promise\Promise updateQuotaPlanAsync($arguments = [])
 * @method \Dew\Acs\Result listQuotasPlans(array $arguments = [])
 * @method \Http\Promise\Promise listQuotasPlansAsync($arguments = [])
 * @method \Dew\Acs\Result deleteQuotaPlan(array $arguments = [])
 * @method \Http\Promise\Promise deleteQuotaPlanAsync($arguments = [])
 * @method \Dew\Acs\Result updateQuotaSchedule(array $arguments = [])
 * @method \Http\Promise\Promise updateQuotaScheduleAsync($arguments = [])
 * @method \Dew\Acs\Result getQuotaSchedule(array $arguments = [])
 * @method \Http\Promise\Promise getQuotaScheduleAsync($arguments = [])
 * @method \Dew\Acs\Result createProject(array $arguments = [])
 * @method \Http\Promise\Promise createProjectAsync($arguments = [])
 * @method \Dew\Acs\Result listProjects(array $arguments = [])
 * @method \Http\Promise\Promise listProjectsAsync($arguments = [])
 * @method \Dew\Acs\Result getProject(array $arguments = [])
 * @method \Http\Promise\Promise getProjectAsync($arguments = [])
 * @method \Dew\Acs\Result updateProjectBasicMeta(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectBasicMetaAsync($arguments = [])
 * @method \Dew\Acs\Result updateProjectDefaultQuota(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectDefaultQuotaAsync($arguments = [])
 * @method \Dew\Acs\Result updateProjectIpWhiteList(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectIpWhiteListAsync($arguments = [])
 * @method \Dew\Acs\Result getTrustedProjects(array $arguments = [])
 * @method \Http\Promise\Promise getTrustedProjectsAsync($arguments = [])
 * @method \Dew\Acs\Result listProjectUsers(array $arguments = [])
 * @method \Http\Promise\Promise listProjectUsersAsync($arguments = [])
 * @method \Dew\Acs\Result createRole(array $arguments = [])
 * @method \Http\Promise\Promise createRoleAsync($arguments = [])
 * @method \Dew\Acs\Result listRoles(array $arguments = [])
 * @method \Http\Promise\Promise listRolesAsync($arguments = [])
 * @method \Dew\Acs\Result getRoleAcl(array $arguments = [])
 * @method \Http\Promise\Promise getRoleAclAsync($arguments = [])
 * @method \Dew\Acs\Result getRoleAclOnObject(array $arguments = [])
 * @method \Http\Promise\Promise getRoleAclOnObjectAsync($arguments = [])
 * @method \Dew\Acs\Result getRolePolicy(array $arguments = [])
 * @method \Http\Promise\Promise getRolePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listUsersByRole(array $arguments = [])
 * @method \Http\Promise\Promise listUsersByRoleAsync($arguments = [])
 * @method \Dew\Acs\Result updateUsersToRole(array $arguments = [])
 * @method \Http\Promise\Promise updateUsersToRoleAsync($arguments = [])
 * @method \Dew\Acs\Result listPackages(array $arguments = [])
 * @method \Http\Promise\Promise listPackagesAsync($arguments = [])
 * @method \Dew\Acs\Result updatePackage(array $arguments = [])
 * @method \Http\Promise\Promise updatePackageAsync($arguments = [])
 * @method \Dew\Acs\Result createPackage(array $arguments = [])
 * @method \Http\Promise\Promise createPackageAsync($arguments = [])
 * @method \Dew\Acs\Result getPackage(array $arguments = [])
 * @method \Http\Promise\Promise getPackageAsync($arguments = [])
 * @method \Dew\Acs\Result listTables(array $arguments = [])
 * @method \Http\Promise\Promise listTablesAsync($arguments = [])
 * @method \Dew\Acs\Result getTableInfo(array $arguments = [])
 * @method \Http\Promise\Promise getTableInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listFunctions(array $arguments = [])
 * @method \Http\Promise\Promise listFunctionsAsync($arguments = [])
 * @method \Dew\Acs\Result listResources(array $arguments = [])
 * @method \Http\Promise\Promise listResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listUsers(array $arguments = [])
 * @method \Http\Promise\Promise listUsersAsync($arguments = [])
 * @method \Dew\Acs\Result queryTunnelMetricDetail(array $arguments = [])
 * @method \Http\Promise\Promise queryTunnelMetricDetailAsync($arguments = [])
 * @method \Dew\Acs\Result queryTunnelMetric(array $arguments = [])
 * @method \Http\Promise\Promise queryTunnelMetricAsync($arguments = [])
 * @method \Dew\Acs\Result getQuotaUsage(array $arguments = [])
 * @method \Http\Promise\Promise getQuotaUsageAsync($arguments = [])
 * @method \Dew\Acs\Result listJobMetric(array $arguments = [])
 * @method \Http\Promise\Promise listJobMetricAsync($arguments = [])
 * @method \Dew\Acs\Result queryStorageMetric(array $arguments = [])
 * @method \Http\Promise\Promise queryStorageMetricAsync($arguments = [])
 * @method \Dew\Acs\Result listStorageTablesInfo(array $arguments = [])
 * @method \Http\Promise\Promise listStorageTablesInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listStoragePartitionsInfo(array $arguments = [])
 * @method \Http\Promise\Promise listStoragePartitionsInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getStorageSizeSummary(array $arguments = [])
 * @method \Http\Promise\Promise getStorageSizeSummaryAsync($arguments = [])
 * @method \Dew\Acs\Result getStorageAmountSummary(array $arguments = [])
 * @method \Http\Promise\Promise getStorageAmountSummaryAsync($arguments = [])
 * @method \Dew\Acs\Result getStorageSummaryCompared(array $arguments = [])
 * @method \Http\Promise\Promise getStorageSummaryComparedAsync($arguments = [])
 * @method \Dew\Acs\Result listStorageProjectsInfo(array $arguments = [])
 * @method \Http\Promise\Promise listStorageProjectsInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listJobInfos(array $arguments = [])
 * @method \Http\Promise\Promise listJobInfosAsync($arguments = [])
 * @method \Dew\Acs\Result listJobSnapshotInfos(array $arguments = [])
 * @method \Http\Promise\Promise listJobSnapshotInfosAsync($arguments = [])
 * @method \Dew\Acs\Result getJobInfo(array $arguments = [])
 * @method \Http\Promise\Promise getJobInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getRunningJobs(array $arguments = [])
 * @method \Http\Promise\Promise getRunningJobsAsync($arguments = [])
 * @method \Dew\Acs\Result killJobs(array $arguments = [])
 * @method \Http\Promise\Promise killJobsAsync($arguments = [])
 * @method \Dew\Acs\Result getJobResourceUsage(array $arguments = [])
 * @method \Http\Promise\Promise getJobResourceUsageAsync($arguments = [])
 * @method \Dew\Acs\Result createMmsDataSource(array $arguments = [])
 * @method \Http\Promise\Promise createMmsDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result getMmsDataSource(array $arguments = [])
 * @method \Http\Promise\Promise getMmsDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result listMmsDataSources(array $arguments = [])
 * @method \Http\Promise\Promise listMmsDataSourcesAsync($arguments = [])
 * @method \Dew\Acs\Result updateMmsDataSource(array $arguments = [])
 * @method \Http\Promise\Promise updateMmsDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteMmsDataSource(array $arguments = [])
 * @method \Http\Promise\Promise deleteMmsDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result createMmsFetchMetadataJob(array $arguments = [])
 * @method \Http\Promise\Promise createMmsFetchMetadataJobAsync($arguments = [])
 * @method \Dew\Acs\Result getMmsFetchMetadataJob(array $arguments = [])
 * @method \Http\Promise\Promise getMmsFetchMetadataJobAsync($arguments = [])
 * @method \Dew\Acs\Result listMmsDbs(array $arguments = [])
 * @method \Http\Promise\Promise listMmsDbsAsync($arguments = [])
 * @method \Dew\Acs\Result getMmsDb(array $arguments = [])
 * @method \Http\Promise\Promise getMmsDbAsync($arguments = [])
 * @method \Dew\Acs\Result listMmsTables(array $arguments = [])
 * @method \Http\Promise\Promise listMmsTablesAsync($arguments = [])
 * @method \Dew\Acs\Result getMmsTable(array $arguments = [])
 * @method \Http\Promise\Promise getMmsTableAsync($arguments = [])
 * @method \Dew\Acs\Result listMmsPartitions(array $arguments = [])
 * @method \Http\Promise\Promise listMmsPartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result getMmsPartition(array $arguments = [])
 * @method \Http\Promise\Promise getMmsPartitionAsync($arguments = [])
 * @method \Dew\Acs\Result createMmsJob(array $arguments = [])
 * @method \Http\Promise\Promise createMmsJobAsync($arguments = [])
 * @method \Dew\Acs\Result listMmsJobs(array $arguments = [])
 * @method \Http\Promise\Promise listMmsJobsAsync($arguments = [])
 * @method \Dew\Acs\Result getMmsJob(array $arguments = [])
 * @method \Http\Promise\Promise getMmsJobAsync($arguments = [])
 * @method \Dew\Acs\Result getMmsAsyncTask(array $arguments = [])
 * @method \Http\Promise\Promise getMmsAsyncTaskAsync($arguments = [])
 * @method \Dew\Acs\Result deleteMmsJob(array $arguments = [])
 * @method \Http\Promise\Promise deleteMmsJobAsync($arguments = [])
 * @method \Dew\Acs\Result startMmsJob(array $arguments = [])
 * @method \Http\Promise\Promise startMmsJobAsync($arguments = [])
 * @method \Dew\Acs\Result stopMmsJob(array $arguments = [])
 * @method \Http\Promise\Promise stopMmsJobAsync($arguments = [])
 * @method \Dew\Acs\Result retryMmsJob(array $arguments = [])
 * @method \Http\Promise\Promise retryMmsJobAsync($arguments = [])
 * @method \Dew\Acs\Result listMmsTasks(array $arguments = [])
 * @method \Http\Promise\Promise listMmsTasksAsync($arguments = [])
 * @method \Dew\Acs\Result getMmsTask(array $arguments = [])
 * @method \Http\Promise\Promise getMmsTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listMmsTaskLogs(array $arguments = [])
 * @method \Http\Promise\Promise listMmsTaskLogsAsync($arguments = [])
 * @method \Dew\Acs\Result listComputeMetricsByInstance(array $arguments = [])
 * @method \Http\Promise\Promise listComputeMetricsByInstanceAsync($arguments = [])
 */
final class MaxComputeClient extends AcsClient
{
    //
}
