<?php

declare(strict_types=1);

namespace Dew\Acs\Devs;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result updateToolset(array $arguments = [])
 * @method \Http\Promise\Promise updateToolsetAsync($arguments = [])
 * @method \Dew\Acs\Result listToolsets(array $arguments = [])
 * @method \Http\Promise\Promise listToolsetsAsync($arguments = [])
 * @method \Dew\Acs\Result getToolset(array $arguments = [])
 * @method \Http\Promise\Promise getToolsetAsync($arguments = [])
 * @method \Dew\Acs\Result deleteToolset(array $arguments = [])
 * @method \Http\Promise\Promise deleteToolsetAsync($arguments = [])
 * @method \Dew\Acs\Result createToolset(array $arguments = [])
 * @method \Http\Promise\Promise createToolsetAsync($arguments = [])
 * @method \Dew\Acs\Result renderServicesByTemplate(array $arguments = [])
 * @method \Http\Promise\Promise renderServicesByTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result fetchArtifactDownloadUrl(array $arguments = [])
 * @method \Http\Promise\Promise fetchArtifactDownloadUrlAsync($arguments = [])
 * @method \Dew\Acs\Result fetchArtifactTempBucketToken(array $arguments = [])
 * @method \Http\Promise\Promise fetchArtifactTempBucketTokenAsync($arguments = [])
 * @method \Dew\Acs\Result getArtifact(array $arguments = [])
 * @method \Http\Promise\Promise getArtifactAsync($arguments = [])
 * @method \Dew\Acs\Result putArtifact(array $arguments = [])
 * @method \Http\Promise\Promise putArtifactAsync($arguments = [])
 * @method \Dew\Acs\Result deleteArtifact(array $arguments = [])
 * @method \Http\Promise\Promise deleteArtifactAsync($arguments = [])
 * @method \Dew\Acs\Result createArtifact(array $arguments = [])
 * @method \Http\Promise\Promise createArtifactAsync($arguments = [])
 * @method \Dew\Acs\Result createProject(array $arguments = [])
 * @method \Http\Promise\Promise createProjectAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProject(array $arguments = [])
 * @method \Http\Promise\Promise deleteProjectAsync($arguments = [])
 * @method \Dew\Acs\Result updateProject(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectAsync($arguments = [])
 * @method \Dew\Acs\Result listProjects(array $arguments = [])
 * @method \Http\Promise\Promise listProjectsAsync($arguments = [])
 * @method \Dew\Acs\Result getProject(array $arguments = [])
 * @method \Http\Promise\Promise getProjectAsync($arguments = [])
 * @method \Dew\Acs\Result deployEnvironment(array $arguments = [])
 * @method \Http\Promise\Promise deployEnvironmentAsync($arguments = [])
 * @method \Dew\Acs\Result getEnvironmentDeployment(array $arguments = [])
 * @method \Http\Promise\Promise getEnvironmentDeploymentAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceDeployment(array $arguments = [])
 * @method \Http\Promise\Promise getServiceDeploymentAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceDeployments(array $arguments = [])
 * @method \Http\Promise\Promise listServiceDeploymentsAsync($arguments = [])
 * @method \Dew\Acs\Result previewEnvironment(array $arguments = [])
 * @method \Http\Promise\Promise previewEnvironmentAsync($arguments = [])
 * @method \Dew\Acs\Result createEnvironment(array $arguments = [])
 * @method \Http\Promise\Promise createEnvironmentAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEnvironment(array $arguments = [])
 * @method \Http\Promise\Promise deleteEnvironmentAsync($arguments = [])
 * @method \Dew\Acs\Result updateEnvironment(array $arguments = [])
 * @method \Http\Promise\Promise updateEnvironmentAsync($arguments = [])
 * @method \Dew\Acs\Result listEnvironments(array $arguments = [])
 * @method \Http\Promise\Promise listEnvironmentsAsync($arguments = [])
 * @method \Dew\Acs\Result getEnvironment(array $arguments = [])
 * @method \Http\Promise\Promise getEnvironmentAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConnection(array $arguments = [])
 * @method \Http\Promise\Promise deleteConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result listConnections(array $arguments = [])
 * @method \Http\Promise\Promise listConnectionsAsync($arguments = [])
 * @method \Dew\Acs\Result getRepository(array $arguments = [])
 * @method \Http\Promise\Promise getRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result createPipeline(array $arguments = [])
 * @method \Http\Promise\Promise createPipelineAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelines(array $arguments = [])
 * @method \Http\Promise\Promise listPipelinesAsync($arguments = [])
 * @method \Dew\Acs\Result getPipeline(array $arguments = [])
 * @method \Http\Promise\Promise getPipelineAsync($arguments = [])
 * @method \Dew\Acs\Result startPipeline(array $arguments = [])
 * @method \Http\Promise\Promise startPipelineAsync($arguments = [])
 * @method \Dew\Acs\Result cancelPipeline(array $arguments = [])
 * @method \Http\Promise\Promise cancelPipelineAsync($arguments = [])
 * @method \Dew\Acs\Result putPipelineStatus(array $arguments = [])
 * @method \Http\Promise\Promise putPipelineStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createTask(array $arguments = [])
 * @method \Http\Promise\Promise createTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listTasks(array $arguments = [])
 * @method \Http\Promise\Promise listTasksAsync($arguments = [])
 * @method \Dew\Acs\Result getTask(array $arguments = [])
 * @method \Http\Promise\Promise getTaskAsync($arguments = [])
 * @method \Dew\Acs\Result startTask(array $arguments = [])
 * @method \Http\Promise\Promise startTaskAsync($arguments = [])
 * @method \Dew\Acs\Result retryTask(array $arguments = [])
 * @method \Http\Promise\Promise retryTaskAsync($arguments = [])
 * @method \Dew\Acs\Result resumeTask(array $arguments = [])
 * @method \Http\Promise\Promise resumeTaskAsync($arguments = [])
 * @method \Dew\Acs\Result cancelTask(array $arguments = [])
 * @method \Http\Promise\Promise cancelTaskAsync($arguments = [])
 * @method \Dew\Acs\Result putTaskStatus(array $arguments = [])
 * @method \Http\Promise\Promise putTaskStatusAsync($arguments = [])
 * @method \Dew\Acs\Result activateConnection(array $arguments = [])
 * @method \Http\Promise\Promise activateConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result fetchConnectionCredential(array $arguments = [])
 * @method \Http\Promise\Promise fetchConnectionCredentialAsync($arguments = [])
 */
final class DevsClient extends AcsClient
{
    //
}
