<?php

declare(strict_types=1);

namespace Dew\Acs\Eiam;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createConditionalAccessPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createConditionalAccessPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConditionalAccessPolicy(array $arguments = [])
 * @method \Http\Promise\Promise deleteConditionalAccessPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result disableConditionalAccessPolicy(array $arguments = [])
 * @method \Http\Promise\Promise disableConditionalAccessPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result enableConditionalAccessPolicy(array $arguments = [])
 * @method \Http\Promise\Promise enableConditionalAccessPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getConditionalAccessPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getConditionalAccessPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listConditionalAccessPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listConditionalAccessPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result listConditionalAccessPoliciesForNetworkZone(array $arguments = [])
 * @method \Http\Promise\Promise listConditionalAccessPoliciesForNetworkZoneAsync($arguments = [])
 * @method \Dew\Acs\Result updateConditionalAccessPolicy(array $arguments = [])
 * @method \Http\Promise\Promise updateConditionalAccessPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result updateConditionalAccessPolicyDescription(array $arguments = [])
 * @method \Http\Promise\Promise updateConditionalAccessPolicyDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result listRegions(array $arguments = [])
 * @method \Http\Promise\Promise listRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result createInstance(array $arguments = [])
 * @method \Http\Promise\Promise createInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result updateInstanceDescription(array $arguments = [])
 * @method \Http\Promise\Promise updateInstanceDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result listInstances(array $arguments = [])
 * @method \Http\Promise\Promise listInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result getInstance(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result enableInitDomainAutoRedirect(array $arguments = [])
 * @method \Http\Promise\Promise enableInitDomainAutoRedirectAsync($arguments = [])
 * @method \Dew\Acs\Result disableInitDomainAutoRedirect(array $arguments = [])
 * @method \Http\Promise\Promise disableInitDomainAutoRedirectAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceLicense(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceLicenseAsync($arguments = [])
 * @method \Dew\Acs\Result getDomainDnsChallenge(array $arguments = [])
 * @method \Http\Promise\Promise getDomainDnsChallengeAsync($arguments = [])
 * @method \Dew\Acs\Result createDomain(array $arguments = [])
 * @method \Http\Promise\Promise createDomainAsync($arguments = [])
 * @method \Dew\Acs\Result getDomain(array $arguments = [])
 * @method \Http\Promise\Promise getDomainAsync($arguments = [])
 * @method \Dew\Acs\Result setDefaultDomain(array $arguments = [])
 * @method \Http\Promise\Promise setDefaultDomainAsync($arguments = [])
 * @method \Dew\Acs\Result listDomains(array $arguments = [])
 * @method \Http\Promise\Promise listDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDomain(array $arguments = [])
 * @method \Http\Promise\Promise deleteDomainAsync($arguments = [])
 * @method \Dew\Acs\Result createDomainProxyToken(array $arguments = [])
 * @method \Http\Promise\Promise createDomainProxyTokenAsync($arguments = [])
 * @method \Dew\Acs\Result obtainDomainProxyToken(array $arguments = [])
 * @method \Http\Promise\Promise obtainDomainProxyTokenAsync($arguments = [])
 * @method \Dew\Acs\Result enableDomainProxyToken(array $arguments = [])
 * @method \Http\Promise\Promise enableDomainProxyTokenAsync($arguments = [])
 * @method \Dew\Acs\Result disableDomainProxyToken(array $arguments = [])
 * @method \Http\Promise\Promise disableDomainProxyTokenAsync($arguments = [])
 * @method \Dew\Acs\Result listDomainProxyTokens(array $arguments = [])
 * @method \Http\Promise\Promise listDomainProxyTokensAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDomainProxyToken(array $arguments = [])
 * @method \Http\Promise\Promise deleteDomainProxyTokenAsync($arguments = [])
 * @method \Dew\Acs\Result createApplication(array $arguments = [])
 * @method \Http\Promise\Promise createApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteApplication(array $arguments = [])
 * @method \Http\Promise\Promise deleteApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result updateApplicationDescription(array $arguments = [])
 * @method \Http\Promise\Promise updateApplicationDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result enableApplication(array $arguments = [])
 * @method \Http\Promise\Promise enableApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result disableApplication(array $arguments = [])
 * @method \Http\Promise\Promise disableApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result getApplication(array $arguments = [])
 * @method \Http\Promise\Promise getApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result listApplications(array $arguments = [])
 * @method \Http\Promise\Promise listApplicationsAsync($arguments = [])
 * @method \Dew\Acs\Result enableApplicationSso(array $arguments = [])
 * @method \Http\Promise\Promise enableApplicationSsoAsync($arguments = [])
 * @method \Dew\Acs\Result disableApplicationSso(array $arguments = [])
 * @method \Http\Promise\Promise disableApplicationSsoAsync($arguments = [])
 * @method \Dew\Acs\Result setApplicationSsoConfig(array $arguments = [])
 * @method \Http\Promise\Promise setApplicationSsoConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getApplicationSsoConfig(array $arguments = [])
 * @method \Http\Promise\Promise getApplicationSsoConfigAsync($arguments = [])
 * @method \Dew\Acs\Result authorizeApplicationToUsers(array $arguments = [])
 * @method \Http\Promise\Promise authorizeApplicationToUsersAsync($arguments = [])
 * @method \Dew\Acs\Result authorizeApplicationToOrganizationalUnits(array $arguments = [])
 * @method \Http\Promise\Promise authorizeApplicationToOrganizationalUnitsAsync($arguments = [])
 * @method \Dew\Acs\Result authorizeApplicationToGroups(array $arguments = [])
 * @method \Http\Promise\Promise authorizeApplicationToGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result revokeApplicationFromUsers(array $arguments = [])
 * @method \Http\Promise\Promise revokeApplicationFromUsersAsync($arguments = [])
 * @method \Dew\Acs\Result revokeApplicationFromOrganizationalUnits(array $arguments = [])
 * @method \Http\Promise\Promise revokeApplicationFromOrganizationalUnitsAsync($arguments = [])
 * @method \Dew\Acs\Result revokeApplicationFromGroups(array $arguments = [])
 * @method \Http\Promise\Promise revokeApplicationFromGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result updateApplicationAuthorizationType(array $arguments = [])
 * @method \Http\Promise\Promise updateApplicationAuthorizationTypeAsync($arguments = [])
 * @method \Dew\Acs\Result listUsersForApplication(array $arguments = [])
 * @method \Http\Promise\Promise listUsersForApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result listOrganizationalUnitsForApplication(array $arguments = [])
 * @method \Http\Promise\Promise listOrganizationalUnitsForApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result listGroupsForApplication(array $arguments = [])
 * @method \Http\Promise\Promise listGroupsForApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result listApplicationsForUser(array $arguments = [])
 * @method \Http\Promise\Promise listApplicationsForUserAsync($arguments = [])
 * @method \Dew\Acs\Result listApplicationsForOrganizationalUnit(array $arguments = [])
 * @method \Http\Promise\Promise listApplicationsForOrganizationalUnitAsync($arguments = [])
 * @method \Dew\Acs\Result createApplicationClientSecret(array $arguments = [])
 * @method \Http\Promise\Promise createApplicationClientSecretAsync($arguments = [])
 * @method \Dew\Acs\Result deleteApplicationClientSecret(array $arguments = [])
 * @method \Http\Promise\Promise deleteApplicationClientSecretAsync($arguments = [])
 * @method \Dew\Acs\Result disableApplicationClientSecret(array $arguments = [])
 * @method \Http\Promise\Promise disableApplicationClientSecretAsync($arguments = [])
 * @method \Dew\Acs\Result enableApplicationClientSecret(array $arguments = [])
 * @method \Http\Promise\Promise enableApplicationClientSecretAsync($arguments = [])
 * @method \Dew\Acs\Result listApplicationClientSecrets(array $arguments = [])
 * @method \Http\Promise\Promise listApplicationClientSecretsAsync($arguments = [])
 * @method \Dew\Acs\Result obtainApplicationClientSecret(array $arguments = [])
 * @method \Http\Promise\Promise obtainApplicationClientSecretAsync($arguments = [])
 * @method \Dew\Acs\Result enableApplicationApiInvoke(array $arguments = [])
 * @method \Http\Promise\Promise enableApplicationApiInvokeAsync($arguments = [])
 * @method \Dew\Acs\Result disableApplicationApiInvoke(array $arguments = [])
 * @method \Http\Promise\Promise disableApplicationApiInvokeAsync($arguments = [])
 * @method \Dew\Acs\Result setApplicationGrantScope(array $arguments = [])
 * @method \Http\Promise\Promise setApplicationGrantScopeAsync($arguments = [])
 * @method \Dew\Acs\Result getApplicationGrantScope(array $arguments = [])
 * @method \Http\Promise\Promise getApplicationGrantScopeAsync($arguments = [])
 * @method \Dew\Acs\Result disableApplicationProvisioning(array $arguments = [])
 * @method \Http\Promise\Promise disableApplicationProvisioningAsync($arguments = [])
 * @method \Dew\Acs\Result enableApplicationProvisioning(array $arguments = [])
 * @method \Http\Promise\Promise enableApplicationProvisioningAsync($arguments = [])
 * @method \Dew\Acs\Result setApplicationProvisioningConfig(array $arguments = [])
 * @method \Http\Promise\Promise setApplicationProvisioningConfigAsync($arguments = [])
 * @method \Dew\Acs\Result setApplicationProvisioningScope(array $arguments = [])
 * @method \Http\Promise\Promise setApplicationProvisioningScopeAsync($arguments = [])
 * @method \Dew\Acs\Result getApplicationProvisioningConfig(array $arguments = [])
 * @method \Http\Promise\Promise getApplicationProvisioningConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getApplicationProvisioningScope(array $arguments = [])
 * @method \Http\Promise\Promise getApplicationProvisioningScopeAsync($arguments = [])
 * @method \Dew\Acs\Result createUser(array $arguments = [])
 * @method \Http\Promise\Promise createUserAsync($arguments = [])
 * @method \Dew\Acs\Result addUserToOrganizationalUnits(array $arguments = [])
 * @method \Http\Promise\Promise addUserToOrganizationalUnitsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUser(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserAsync($arguments = [])
 * @method \Dew\Acs\Result removeUserFromOrganizationalUnits(array $arguments = [])
 * @method \Http\Promise\Promise removeUserFromOrganizationalUnitsAsync($arguments = [])
 * @method \Dew\Acs\Result updateUser(array $arguments = [])
 * @method \Http\Promise\Promise updateUserAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserPassword(array $arguments = [])
 * @method \Http\Promise\Promise updateUserPasswordAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserDescription(array $arguments = [])
 * @method \Http\Promise\Promise updateUserDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result disableUser(array $arguments = [])
 * @method \Http\Promise\Promise disableUserAsync($arguments = [])
 * @method \Dew\Acs\Result enableUser(array $arguments = [])
 * @method \Http\Promise\Promise enableUserAsync($arguments = [])
 * @method \Dew\Acs\Result unlockUser(array $arguments = [])
 * @method \Http\Promise\Promise unlockUserAsync($arguments = [])
 * @method \Dew\Acs\Result setUserPrimaryOrganizationalUnit(array $arguments = [])
 * @method \Http\Promise\Promise setUserPrimaryOrganizationalUnitAsync($arguments = [])
 * @method \Dew\Acs\Result getUser(array $arguments = [])
 * @method \Http\Promise\Promise getUserAsync($arguments = [])
 * @method \Dew\Acs\Result listUsers(array $arguments = [])
 * @method \Http\Promise\Promise listUsersAsync($arguments = [])
 * @method \Dew\Acs\Result createOrganizationalUnit(array $arguments = [])
 * @method \Http\Promise\Promise createOrganizationalUnitAsync($arguments = [])
 * @method \Dew\Acs\Result deleteOrganizationalUnit(array $arguments = [])
 * @method \Http\Promise\Promise deleteOrganizationalUnitAsync($arguments = [])
 * @method \Dew\Acs\Result deleteOrganizationalUnitChildren(array $arguments = [])
 * @method \Http\Promise\Promise deleteOrganizationalUnitChildrenAsync($arguments = [])
 * @method \Dew\Acs\Result updateOrganizationalUnit(array $arguments = [])
 * @method \Http\Promise\Promise updateOrganizationalUnitAsync($arguments = [])
 * @method \Dew\Acs\Result updateOrganizationalUnitDescription(array $arguments = [])
 * @method \Http\Promise\Promise updateOrganizationalUnitDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result updateOrganizationalUnitParentId(array $arguments = [])
 * @method \Http\Promise\Promise updateOrganizationalUnitParentIdAsync($arguments = [])
 * @method \Dew\Acs\Result getRootOrganizationalUnit(array $arguments = [])
 * @method \Http\Promise\Promise getRootOrganizationalUnitAsync($arguments = [])
 * @method \Dew\Acs\Result getOrganizationalUnit(array $arguments = [])
 * @method \Http\Promise\Promise getOrganizationalUnitAsync($arguments = [])
 * @method \Dew\Acs\Result listOrganizationalUnits(array $arguments = [])
 * @method \Http\Promise\Promise listOrganizationalUnitsAsync($arguments = [])
 * @method \Dew\Acs\Result listOrganizationalUnitParents(array $arguments = [])
 * @method \Http\Promise\Promise listOrganizationalUnitParentsAsync($arguments = [])
 * @method \Dew\Acs\Result createGroup(array $arguments = [])
 * @method \Http\Promise\Promise createGroupAsync($arguments = [])
 * @method \Dew\Acs\Result addUsersToGroup(array $arguments = [])
 * @method \Http\Promise\Promise addUsersToGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteGroupAsync($arguments = [])
 * @method \Dew\Acs\Result removeUsersFromGroup(array $arguments = [])
 * @method \Http\Promise\Promise removeUsersFromGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateGroupDescription(array $arguments = [])
 * @method \Http\Promise\Promise updateGroupDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result getGroup(array $arguments = [])
 * @method \Http\Promise\Promise getGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listGroups(array $arguments = [])
 * @method \Http\Promise\Promise listGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result listUsersForGroup(array $arguments = [])
 * @method \Http\Promise\Promise listUsersForGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listGroupsForUser(array $arguments = [])
 * @method \Http\Promise\Promise listGroupsForUserAsync($arguments = [])
 * @method \Dew\Acs\Result createIdentityProvider(array $arguments = [])
 * @method \Http\Promise\Promise createIdentityProviderAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIdentityProvider(array $arguments = [])
 * @method \Http\Promise\Promise deleteIdentityProviderAsync($arguments = [])
 * @method \Dew\Acs\Result updateIdentityProvider(array $arguments = [])
 * @method \Http\Promise\Promise updateIdentityProviderAsync($arguments = [])
 * @method \Dew\Acs\Result getIdentityProvider(array $arguments = [])
 * @method \Http\Promise\Promise getIdentityProviderAsync($arguments = [])
 * @method \Dew\Acs\Result listIdentityProviders(array $arguments = [])
 * @method \Http\Promise\Promise listIdentityProvidersAsync($arguments = [])
 * @method \Dew\Acs\Result enableIdentityProviderUdPull(array $arguments = [])
 * @method \Http\Promise\Promise enableIdentityProviderUdPullAsync($arguments = [])
 * @method \Dew\Acs\Result disableIdentityProviderUdPull(array $arguments = [])
 * @method \Http\Promise\Promise disableIdentityProviderUdPullAsync($arguments = [])
 * @method \Dew\Acs\Result setIdentityProviderUdPullConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise setIdentityProviderUdPullConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result getIdentityProviderUdPullConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getIdentityProviderUdPullConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result setForgetPasswordConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise setForgetPasswordConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result setPasswordInitializationConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise setPasswordInitializationConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result setPasswordHistoryConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise setPasswordHistoryConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result setPasswordExpirationConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise setPasswordExpirationConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result setPasswordComplexityConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise setPasswordComplexityConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result getForgetPasswordConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getForgetPasswordConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result getPasswordInitializationConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getPasswordInitializationConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result getPasswordHistoryConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getPasswordHistoryConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result getPasswordExpirationConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getPasswordExpirationConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result getPasswordComplexityConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getPasswordComplexityConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result listSynchronizationJobs(array $arguments = [])
 * @method \Http\Promise\Promise listSynchronizationJobsAsync($arguments = [])
 * @method \Dew\Acs\Result runSynchronizationJob(array $arguments = [])
 * @method \Http\Promise\Promise runSynchronizationJobAsync($arguments = [])
 * @method \Dew\Acs\Result getSynchronizationJob(array $arguments = [])
 * @method \Http\Promise\Promise getSynchronizationJobAsync($arguments = [])
 * @method \Dew\Acs\Result createNetworkAccessEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise createNetworkAccessEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNetworkAccessEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise deleteNetworkAccessEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result updateNetworkAccessEndpointName(array $arguments = [])
 * @method \Http\Promise\Promise updateNetworkAccessEndpointNameAsync($arguments = [])
 * @method \Dew\Acs\Result listNetworkAccessEndpointAvailableRegions(array $arguments = [])
 * @method \Http\Promise\Promise listNetworkAccessEndpointAvailableRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result listNetworkAccessEndpointAvailableZones(array $arguments = [])
 * @method \Http\Promise\Promise listNetworkAccessEndpointAvailableZonesAsync($arguments = [])
 * @method \Dew\Acs\Result getNetworkAccessEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise getNetworkAccessEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result listNetworkAccessEndpoints(array $arguments = [])
 * @method \Http\Promise\Promise listNetworkAccessEndpointsAsync($arguments = [])
 * @method \Dew\Acs\Result listNetworkAccessPaths(array $arguments = [])
 * @method \Http\Promise\Promise listNetworkAccessPathsAsync($arguments = [])
 * @method \Dew\Acs\Result listEiamRegions(array $arguments = [])
 * @method \Http\Promise\Promise listEiamRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result listEiamInstances(array $arguments = [])
 * @method \Http\Promise\Promise listEiamInstancesAsync($arguments = [])
 */
final class EiamClient extends AcsClient
{
    //
}
