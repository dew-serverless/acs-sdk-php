<?php

declare(strict_types=1);

namespace Dew\Acs\OceanBasePro;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result modifyTagValueName(array $arguments = [])
 * @method \Http\Promise\Promise modifyTagValueNameAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTagName(array $arguments = [])
 * @method \Http\Promise\Promise modifyTagNameAsync($arguments = [])
 * @method \Dew\Acs\Result describeTagValues(array $arguments = [])
 * @method \Http\Promise\Promise describeTagValuesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTagValue(array $arguments = [])
 * @method \Http\Promise\Promise deleteTagValueAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTag(array $arguments = [])
 * @method \Http\Promise\Promise deleteTagAsync($arguments = [])
 * @method \Dew\Acs\Result createTagValue(array $arguments = [])
 * @method \Http\Promise\Promise createTagValueAsync($arguments = [])
 * @method \Dew\Acs\Result createTag(array $arguments = [])
 * @method \Http\Promise\Promise createTagAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceTags(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceTagsAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenantTags(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantTagsAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTenantTags(array $arguments = [])
 * @method \Http\Promise\Promise modifyTenantTagsAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceTags(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceTagsAsync($arguments = [])
 * @method \Dew\Acs\Result createInstance(array $arguments = [])
 * @method \Http\Promise\Promise createInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstance(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceTopology(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceTopologyAsync($arguments = [])
 * @method \Dew\Acs\Result describeAvailableSpec(array $arguments = [])
 * @method \Http\Promise\Promise describeAvailableSpecAsync($arguments = [])
 * @method \Dew\Acs\Result describeAvailableZone(array $arguments = [])
 * @method \Http\Promise\Promise describeAvailableZoneAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceName(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceNameAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceSpec(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceSpecAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceNodeNum(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceNodeNumAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceTemporaryCapacity(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceTemporaryCapacityAsync($arguments = [])
 * @method \Dew\Acs\Result switchoverInstance(array $arguments = [])
 * @method \Http\Promise\Promise switchoverInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteInstances(array $arguments = [])
 * @method \Http\Promise\Promise deleteInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenantReadableScn(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantReadableScnAsync($arguments = [])
 * @method \Dew\Acs\Result createTenant(array $arguments = [])
 * @method \Http\Promise\Promise createTenantAsync($arguments = [])
 * @method \Dew\Acs\Result createTenantReadOnlyConnection(array $arguments = [])
 * @method \Http\Promise\Promise createTenantReadOnlyConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result createTenantSecurityIpGroup(array $arguments = [])
 * @method \Http\Promise\Promise createTenantSecurityIpGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenants(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantsAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceTenantModes(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceTenantModesAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenant(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantAsync($arguments = [])
 * @method \Dew\Acs\Result describeAvailableCpuResource(array $arguments = [])
 * @method \Http\Promise\Promise describeAvailableCpuResourceAsync($arguments = [])
 * @method \Dew\Acs\Result describeAvailableMemResource(array $arguments = [])
 * @method \Http\Promise\Promise describeAvailableMemResourceAsync($arguments = [])
 * @method \Dew\Acs\Result describeCharset(array $arguments = [])
 * @method \Http\Promise\Promise describeCharsetAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceCreatableZone(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceCreatableZoneAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenantZonesRead(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantZonesReadAsync($arguments = [])
 * @method \Dew\Acs\Result describeTimeZones(array $arguments = [])
 * @method \Http\Promise\Promise describeTimeZonesAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenantSecurityIpGroups(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantSecurityIpGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeZones(array $arguments = [])
 * @method \Http\Promise\Promise describeZonesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTenantPrimaryZone(array $arguments = [])
 * @method \Http\Promise\Promise modifyTenantPrimaryZoneAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTenantResource(array $arguments = [])
 * @method \Http\Promise\Promise modifyTenantResourceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTenantSecurityIpGroup(array $arguments = [])
 * @method \Http\Promise\Promise modifyTenantSecurityIpGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTenants(array $arguments = [])
 * @method \Http\Promise\Promise deleteTenantsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTenantSecurityIpGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteTenantSecurityIpGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createTenantUser(array $arguments = [])
 * @method \Http\Promise\Promise createTenantUserAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenantUsers(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantUsersAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenantUserRoles(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantUserRolesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTenantUserDescription(array $arguments = [])
 * @method \Http\Promise\Promise modifyTenantUserDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTenantUserPassword(array $arguments = [])
 * @method \Http\Promise\Promise modifyTenantUserPasswordAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTenantUserRoles(array $arguments = [])
 * @method \Http\Promise\Promise modifyTenantUserRolesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTenantUsers(array $arguments = [])
 * @method \Http\Promise\Promise deleteTenantUsersAsync($arguments = [])
 * @method \Dew\Acs\Result createDatabase(array $arguments = [])
 * @method \Http\Promise\Promise createDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result describeDatabases(array $arguments = [])
 * @method \Http\Promise\Promise describeDatabasesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDatabaseDescription(array $arguments = [])
 * @method \Http\Promise\Promise modifyDatabaseDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTenantUserStatus(array $arguments = [])
 * @method \Http\Promise\Promise modifyTenantUserStatusAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDatabaseUserRoles(array $arguments = [])
 * @method \Http\Promise\Promise modifyDatabaseUserRolesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDatabases(array $arguments = [])
 * @method \Http\Promise\Promise deleteDatabasesAsync($arguments = [])
 * @method \Dew\Acs\Result describeParameters(array $arguments = [])
 * @method \Http\Promise\Promise describeParametersAsync($arguments = [])
 * @method \Dew\Acs\Result describeParametersHistory(array $arguments = [])
 * @method \Http\Promise\Promise describeParametersHistoryAsync($arguments = [])
 * @method \Dew\Acs\Result modifyParameters(array $arguments = [])
 * @method \Http\Promise\Promise modifyParametersAsync($arguments = [])
 * @method \Dew\Acs\Result describeSessionList(array $arguments = [])
 * @method \Http\Promise\Promise describeSessionListAsync($arguments = [])
 * @method \Dew\Acs\Result batchKillSessionList(array $arguments = [])
 * @method \Http\Promise\Promise batchKillSessionListAsync($arguments = [])
 * @method \Dew\Acs\Result batchKillProcessList(array $arguments = [])
 * @method \Http\Promise\Promise batchKillProcessListAsync($arguments = [])
 * @method \Dew\Acs\Result describeProcessStatsComposition(array $arguments = [])
 * @method \Http\Promise\Promise describeProcessStatsCompositionAsync($arguments = [])
 * @method \Dew\Acs\Result killProcessList(array $arguments = [])
 * @method \Http\Promise\Promise killProcessListAsync($arguments = [])
 * @method \Dew\Acs\Result describeOasAnomalySQLList(array $arguments = [])
 * @method \Http\Promise\Promise describeOasAnomalySQLListAsync($arguments = [])
 * @method \Dew\Acs\Result describeSampleSqlRawTexts(array $arguments = [])
 * @method \Http\Promise\Promise describeSampleSqlRawTextsAsync($arguments = [])
 * @method \Dew\Acs\Result describeOasSQLDetails(array $arguments = [])
 * @method \Http\Promise\Promise describeOasSQLDetailsAsync($arguments = [])
 * @method \Dew\Acs\Result describeOasSQLPlans(array $arguments = [])
 * @method \Http\Promise\Promise describeOasSQLPlansAsync($arguments = [])
 * @method \Dew\Acs\Result describeSQLSamples(array $arguments = [])
 * @method \Http\Promise\Promise describeSQLSamplesAsync($arguments = [])
 * @method \Dew\Acs\Result describeOasSQLHistoryList(array $arguments = [])
 * @method \Http\Promise\Promise describeOasSQLHistoryListAsync($arguments = [])
 * @method \Dew\Acs\Result describeOasTopSQLList(array $arguments = [])
 * @method \Http\Promise\Promise describeOasTopSQLListAsync($arguments = [])
 * @method \Dew\Acs\Result describeOasSlowSQLList(array $arguments = [])
 * @method \Http\Promise\Promise describeOasSlowSQLListAsync($arguments = [])
 * @method \Dew\Acs\Result describeOutlineBinding(array $arguments = [])
 * @method \Http\Promise\Promise describeOutlineBindingAsync($arguments = [])
 * @method \Dew\Acs\Result describeRecommendIndex(array $arguments = [])
 * @method \Http\Promise\Promise describeRecommendIndexAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceSSL(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceSSLAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceSSL(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceSSLAsync($arguments = [])
 * @method \Dew\Acs\Result createSecurityIpGroup(array $arguments = [])
 * @method \Http\Promise\Promise createSecurityIpGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeSecurityIpGroups(array $arguments = [])
 * @method \Http\Promise\Promise describeSecurityIpGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenantSecurityConfigs(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantSecurityConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenantEncryption(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantEncryptionAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceSecurityConfigs(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceSecurityConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result modifySecurityIps(array $arguments = [])
 * @method \Http\Promise\Promise modifySecurityIpsAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTenantEncryption(array $arguments = [])
 * @method \Http\Promise\Promise modifyTenantEncryptionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSecurityIpGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteSecurityIpGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeMetricsData(array $arguments = [])
 * @method \Http\Promise\Promise describeMetricsDataAsync($arguments = [])
 * @method \Dew\Acs\Result describeNodeMetrics(array $arguments = [])
 * @method \Http\Promise\Promise describeNodeMetricsAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenantMetrics(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantMetricsAsync($arguments = [])
 * @method \Dew\Acs\Result createProject(array $arguments = [])
 * @method \Http\Promise\Promise createProjectAsync($arguments = [])
 * @method \Dew\Acs\Result startProject(array $arguments = [])
 * @method \Http\Promise\Promise startProjectAsync($arguments = [])
 * @method \Dew\Acs\Result stopProject(array $arguments = [])
 * @method \Http\Promise\Promise stopProjectAsync($arguments = [])
 * @method \Dew\Acs\Result resumeProject(array $arguments = [])
 * @method \Http\Promise\Promise resumeProjectAsync($arguments = [])
 * @method \Dew\Acs\Result releaseProject(array $arguments = [])
 * @method \Http\Promise\Promise releaseProjectAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProject(array $arguments = [])
 * @method \Http\Promise\Promise deleteProjectAsync($arguments = [])
 * @method \Dew\Acs\Result listProjects(array $arguments = [])
 * @method \Http\Promise\Promise listProjectsAsync($arguments = [])
 * @method \Dew\Acs\Result describeProject(array $arguments = [])
 * @method \Http\Promise\Promise describeProjectAsync($arguments = [])
 * @method \Dew\Acs\Result describeProjectSteps(array $arguments = [])
 * @method \Http\Promise\Promise describeProjectStepsAsync($arguments = [])
 * @method \Dew\Acs\Result describeProjectStepMetric(array $arguments = [])
 * @method \Http\Promise\Promise describeProjectStepMetricAsync($arguments = [])
 * @method \Dew\Acs\Result describeProjectProgress(array $arguments = [])
 * @method \Http\Promise\Promise describeProjectProgressAsync($arguments = [])
 * @method \Dew\Acs\Result describeProjectComponents(array $arguments = [])
 * @method \Http\Promise\Promise describeProjectComponentsAsync($arguments = [])
 * @method \Dew\Acs\Result listProjectFullVerifyResult(array $arguments = [])
 * @method \Http\Promise\Promise listProjectFullVerifyResultAsync($arguments = [])
 * @method \Dew\Acs\Result startProjectsByLabel(array $arguments = [])
 * @method \Http\Promise\Promise startProjectsByLabelAsync($arguments = [])
 * @method \Dew\Acs\Result stopProjectsByLabel(array $arguments = [])
 * @method \Http\Promise\Promise stopProjectsByLabelAsync($arguments = [])
 * @method \Dew\Acs\Result getUploadOssUrl(array $arguments = [])
 * @method \Http\Promise\Promise getUploadOssUrlAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkerInstances(array $arguments = [])
 * @method \Http\Promise\Promise listWorkerInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result createMySqlDataSource(array $arguments = [])
 * @method \Http\Promise\Promise createMySqlDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result createOceanBaseDataSource(array $arguments = [])
 * @method \Http\Promise\Promise createOceanBaseDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result listDataSource(array $arguments = [])
 * @method \Http\Promise\Promise listDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result createLabel(array $arguments = [])
 * @method \Http\Promise\Promise createLabelAsync($arguments = [])
 * @method \Dew\Acs\Result listAllLabels(array $arguments = [])
 * @method \Http\Promise\Promise listAllLabelsAsync($arguments = [])
 * @method \Dew\Acs\Result createOmsMysqlDataSource(array $arguments = [])
 * @method \Http\Promise\Promise createOmsMysqlDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result releaseWorkerInstance(array $arguments = [])
 * @method \Http\Promise\Promise releaseWorkerInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result cancelProjectModifyRecord(array $arguments = [])
 * @method \Http\Promise\Promise cancelProjectModifyRecordAsync($arguments = [])
 * @method \Dew\Acs\Result retryProjectModifyRecords(array $arguments = [])
 * @method \Http\Promise\Promise retryProjectModifyRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result stopProjectModifyRecords(array $arguments = [])
 * @method \Http\Promise\Promise stopProjectModifyRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result listProjectModifyRecords(array $arguments = [])
 * @method \Http\Promise\Promise listProjectModifyRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result createProjectModifyRecords(array $arguments = [])
 * @method \Http\Promise\Promise createProjectModifyRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result updateProjectConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataSource(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result createRdsPostgreSQLDataSource(array $arguments = [])
 * @method \Http\Promise\Promise createRdsPostgreSQLDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result describeBackupSetDownloadLink(array $arguments = [])
 * @method \Http\Promise\Promise describeBackupSetDownloadLinkAsync($arguments = [])
 * @method \Dew\Acs\Result describeDataBackupSet(array $arguments = [])
 * @method \Http\Promise\Promise describeDataBackupSetAsync($arguments = [])
 * @method \Dew\Acs\Result createBackupSetDownloadLink(array $arguments = [])
 * @method \Http\Promise\Promise createBackupSetDownloadLinkAsync($arguments = [])
 * @method \Dew\Acs\Result describeAnomalySQLList(array $arguments = [])
 * @method \Http\Promise\Promise describeAnomalySQLListAsync($arguments = [])
 * @method \Dew\Acs\Result describeSQLDetails(array $arguments = [])
 * @method \Http\Promise\Promise describeSQLDetailsAsync($arguments = [])
 * @method \Dew\Acs\Result describeSQLPlans(array $arguments = [])
 * @method \Http\Promise\Promise describeSQLPlansAsync($arguments = [])
 * @method \Dew\Acs\Result describeSQLHistoryList(array $arguments = [])
 * @method \Http\Promise\Promise describeSQLHistoryListAsync($arguments = [])
 * @method \Dew\Acs\Result describeTopSQLList(array $arguments = [])
 * @method \Http\Promise\Promise describeTopSQLListAsync($arguments = [])
 * @method \Dew\Acs\Result describeSlowSQLList(array $arguments = [])
 * @method \Http\Promise\Promise describeSlowSQLListAsync($arguments = [])
 * @method \Dew\Acs\Result describeSlowSQLHistoryList(array $arguments = [])
 * @method \Http\Promise\Promise describeSlowSQLHistoryListAsync($arguments = [])
 * @method \Dew\Acs\Result describeSQLTuningAdvices(array $arguments = [])
 * @method \Http\Promise\Promise describeSQLTuningAdvicesAsync($arguments = [])
 */
final class OceanBaseProClient extends AcsClient
{
    //
}
