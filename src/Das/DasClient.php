<?php

declare(strict_types=1);

namespace Dew\Acs\Das;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result addHDMInstance(array $arguments = [])
 * @method \Http\Promise\Promise addHDMInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceInspections(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceInspectionsAsync($arguments = [])
 * @method \Dew\Acs\Result setEventSubscription(array $arguments = [])
 * @method \Http\Promise\Promise setEventSubscriptionAsync($arguments = [])
 * @method \Dew\Acs\Result getEventSubscription(array $arguments = [])
 * @method \Http\Promise\Promise getEventSubscriptionAsync($arguments = [])
 * @method \Dew\Acs\Result getAutonomousNotifyEventContent(array $arguments = [])
 * @method \Http\Promise\Promise getAutonomousNotifyEventContentAsync($arguments = [])
 * @method \Dew\Acs\Result getAutonomousNotifyEventsInRange(array $arguments = [])
 * @method \Http\Promise\Promise getAutonomousNotifyEventsInRangeAsync($arguments = [])
 * @method \Dew\Acs\Result createDiagnosticReport(array $arguments = [])
 * @method \Http\Promise\Promise createDiagnosticReportAsync($arguments = [])
 * @method \Dew\Acs\Result describeDiagnosticReportList(array $arguments = [])
 * @method \Http\Promise\Promise describeDiagnosticReportListAsync($arguments = [])
 * @method \Dew\Acs\Result getDBInstanceConnectivityDiagnosis(array $arguments = [])
 * @method \Http\Promise\Promise getDBInstanceConnectivityDiagnosisAsync($arguments = [])
 * @method \Dew\Acs\Result createCacheAnalysisJob(array $arguments = [])
 * @method \Http\Promise\Promise createCacheAnalysisJobAsync($arguments = [])
 * @method \Dew\Acs\Result describeCacheAnalysisJob(array $arguments = [])
 * @method \Http\Promise\Promise describeCacheAnalysisJobAsync($arguments = [])
 * @method \Dew\Acs\Result describeCacheAnalysisJobs(array $arguments = [])
 * @method \Http\Promise\Promise describeCacheAnalysisJobsAsync($arguments = [])
 * @method \Dew\Acs\Result enableSqlConcurrencyControl(array $arguments = [])
 * @method \Http\Promise\Promise enableSqlConcurrencyControlAsync($arguments = [])
 * @method \Dew\Acs\Result disableSqlConcurrencyControl(array $arguments = [])
 * @method \Http\Promise\Promise disableSqlConcurrencyControlAsync($arguments = [])
 * @method \Dew\Acs\Result disableAllSqlConcurrencyControlRules(array $arguments = [])
 * @method \Http\Promise\Promise disableAllSqlConcurrencyControlRulesAsync($arguments = [])
 * @method \Dew\Acs\Result getRunningSqlConcurrencyControlRules(array $arguments = [])
 * @method \Http\Promise\Promise getRunningSqlConcurrencyControlRulesAsync($arguments = [])
 * @method \Dew\Acs\Result getSqlConcurrencyControlRulesHistory(array $arguments = [])
 * @method \Http\Promise\Promise getSqlConcurrencyControlRulesHistoryAsync($arguments = [])
 * @method \Dew\Acs\Result getSqlConcurrencyControlKeywordsFromSqlText(array $arguments = [])
 * @method \Http\Promise\Promise getSqlConcurrencyControlKeywordsFromSqlTextAsync($arguments = [])
 * @method \Dew\Acs\Result createRequestDiagnosis(array $arguments = [])
 * @method \Http\Promise\Promise createRequestDiagnosisAsync($arguments = [])
 * @method \Dew\Acs\Result getRequestDiagnosisResult(array $arguments = [])
 * @method \Http\Promise\Promise getRequestDiagnosisResultAsync($arguments = [])
 * @method \Dew\Acs\Result getRequestDiagnosisPage(array $arguments = [])
 * @method \Http\Promise\Promise getRequestDiagnosisPageAsync($arguments = [])
 * @method \Dew\Acs\Result describeHotBigKeys(array $arguments = [])
 * @method \Http\Promise\Promise describeHotBigKeysAsync($arguments = [])
 * @method \Dew\Acs\Result describeTopHotKeys(array $arguments = [])
 * @method \Http\Promise\Promise describeTopHotKeysAsync($arguments = [])
 * @method \Dew\Acs\Result describeTopBigKeys(array $arguments = [])
 * @method \Http\Promise\Promise describeTopBigKeysAsync($arguments = [])
 * @method \Dew\Acs\Result describeHotKeys(array $arguments = [])
 * @method \Http\Promise\Promise describeHotKeysAsync($arguments = [])
 * @method \Dew\Acs\Result createQueryOptimizeTag(array $arguments = [])
 * @method \Http\Promise\Promise createQueryOptimizeTagAsync($arguments = [])
 * @method \Dew\Acs\Result getQueryOptimizeExecErrorStats(array $arguments = [])
 * @method \Http\Promise\Promise getQueryOptimizeExecErrorStatsAsync($arguments = [])
 * @method \Dew\Acs\Result getQueryOptimizeExecErrorSample(array $arguments = [])
 * @method \Http\Promise\Promise getQueryOptimizeExecErrorSampleAsync($arguments = [])
 * @method \Dew\Acs\Result getQueryOptimizeSolution(array $arguments = [])
 * @method \Http\Promise\Promise getQueryOptimizeSolutionAsync($arguments = [])
 * @method \Dew\Acs\Result getQueryOptimizeRuleList(array $arguments = [])
 * @method \Http\Promise\Promise getQueryOptimizeRuleListAsync($arguments = [])
 * @method \Dew\Acs\Result getQueryOptimizeDataTrend(array $arguments = [])
 * @method \Http\Promise\Promise getQueryOptimizeDataTrendAsync($arguments = [])
 * @method \Dew\Acs\Result getQueryOptimizeDataTop(array $arguments = [])
 * @method \Http\Promise\Promise getQueryOptimizeDataTopAsync($arguments = [])
 * @method \Dew\Acs\Result getQueryOptimizeDataStats(array $arguments = [])
 * @method \Http\Promise\Promise getQueryOptimizeDataStatsAsync($arguments = [])
 * @method \Dew\Acs\Result getQueryOptimizeTag(array $arguments = [])
 * @method \Http\Promise\Promise getQueryOptimizeTagAsync($arguments = [])
 * @method \Dew\Acs\Result getQueryOptimizeShareUrl(array $arguments = [])
 * @method \Http\Promise\Promise getQueryOptimizeShareUrlAsync($arguments = [])
 * @method \Dew\Acs\Result getErrorRequestSample(array $arguments = [])
 * @method \Http\Promise\Promise getErrorRequestSampleAsync($arguments = [])
 * @method \Dew\Acs\Result getAsyncErrorRequestStatResult(array $arguments = [])
 * @method \Http\Promise\Promise getAsyncErrorRequestStatResultAsync($arguments = [])
 * @method \Dew\Acs\Result getAsyncErrorRequestListByCode(array $arguments = [])
 * @method \Http\Promise\Promise getAsyncErrorRequestListByCodeAsync($arguments = [])
 * @method \Dew\Acs\Result getAsyncErrorRequestStatByCode(array $arguments = [])
 * @method \Http\Promise\Promise getAsyncErrorRequestStatByCodeAsync($arguments = [])
 * @method \Dew\Acs\Result getFullRequestOriginStatByInstanceId(array $arguments = [])
 * @method \Http\Promise\Promise getFullRequestOriginStatByInstanceIdAsync($arguments = [])
 * @method \Dew\Acs\Result getFullRequestStatResultByInstanceId(array $arguments = [])
 * @method \Http\Promise\Promise getFullRequestStatResultByInstanceIdAsync($arguments = [])
 * @method \Dew\Acs\Result getFullRequestSampleByInstanceId(array $arguments = [])
 * @method \Http\Promise\Promise getFullRequestSampleByInstanceIdAsync($arguments = [])
 * @method \Dew\Acs\Result describeSqlLogConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeSqlLogConfigAsync($arguments = [])
 * @method \Dew\Acs\Result modifySqlLogConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifySqlLogConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeSqlLogStatistic(array $arguments = [])
 * @method \Http\Promise\Promise describeSqlLogStatisticAsync($arguments = [])
 * @method \Dew\Acs\Result getDasSQLLogHotData(array $arguments = [])
 * @method \Http\Promise\Promise getDasSQLLogHotDataAsync($arguments = [])
 * @method \Dew\Acs\Result createSqlLogTask(array $arguments = [])
 * @method \Http\Promise\Promise createSqlLogTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describeSqlLogTask(array $arguments = [])
 * @method \Http\Promise\Promise describeSqlLogTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describeSqlLogTasks(array $arguments = [])
 * @method \Http\Promise\Promise describeSqlLogTasksAsync($arguments = [])
 * @method \Dew\Acs\Result getRedisAllSession(array $arguments = [])
 * @method \Http\Promise\Promise getRedisAllSessionAsync($arguments = [])
 * @method \Dew\Acs\Result getMongoDBCurrentOp(array $arguments = [])
 * @method \Http\Promise\Promise getMongoDBCurrentOpAsync($arguments = [])
 * @method \Dew\Acs\Result killInstanceAllSession(array $arguments = [])
 * @method \Http\Promise\Promise killInstanceAllSessionAsync($arguments = [])
 * @method \Dew\Acs\Result createKillInstanceSessionTask(array $arguments = [])
 * @method \Http\Promise\Promise createKillInstanceSessionTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getKillInstanceSessionTaskResult(array $arguments = [])
 * @method \Http\Promise\Promise getKillInstanceSessionTaskResultAsync($arguments = [])
 * @method \Dew\Acs\Result getMySQLAllSessionAsync(array $arguments = [])
 * @method \Http\Promise\Promise getMySQLAllSessionAsyncAsync($arguments = [])
 * @method \Dew\Acs\Result createStorageAnalysisTask(array $arguments = [])
 * @method \Http\Promise\Promise createStorageAnalysisTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getStorageAnalysisResult(array $arguments = [])
 * @method \Http\Promise\Promise getStorageAnalysisResultAsync($arguments = [])
 * @method \Dew\Acs\Result getAutoIncrementUsageStatistic(array $arguments = [])
 * @method \Http\Promise\Promise getAutoIncrementUsageStatisticAsync($arguments = [])
 * @method \Dew\Acs\Result getDeadLockDetailList(array $arguments = [])
 * @method \Http\Promise\Promise getDeadLockDetailListAsync($arguments = [])
 * @method \Dew\Acs\Result getBlockingDetailList(array $arguments = [])
 * @method \Http\Promise\Promise getBlockingDetailListAsync($arguments = [])
 * @method \Dew\Acs\Result createLatestDeadLockAnalysis(array $arguments = [])
 * @method \Http\Promise\Promise createLatestDeadLockAnalysisAsync($arguments = [])
 * @method \Dew\Acs\Result getDeadLockHistory(array $arguments = [])
 * @method \Http\Promise\Promise getDeadLockHistoryAsync($arguments = [])
 * @method \Dew\Acs\Result getDeadLockDetail(array $arguments = [])
 * @method \Http\Promise\Promise getDeadLockDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getDeadlockHistogram(array $arguments = [])
 * @method \Http\Promise\Promise getDeadlockHistogramAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceMissingIndexList(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceMissingIndexListAsync($arguments = [])
 * @method \Dew\Acs\Result updateAutoThrottleRulesAsync(array $arguments = [])
 * @method \Http\Promise\Promise updateAutoThrottleRulesAsyncAsync($arguments = [])
 * @method \Dew\Acs\Result disableAutoThrottleRules(array $arguments = [])
 * @method \Http\Promise\Promise disableAutoThrottleRulesAsync($arguments = [])
 * @method \Dew\Acs\Result getAutoThrottleRules(array $arguments = [])
 * @method \Http\Promise\Promise getAutoThrottleRulesAsync($arguments = [])
 * @method \Dew\Acs\Result updateAutoSqlOptimizeStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateAutoSqlOptimizeStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getSqlOptimizeAdvice(array $arguments = [])
 * @method \Http\Promise\Promise getSqlOptimizeAdviceAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceSqlOptimizeStatistic(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceSqlOptimizeStatisticAsync($arguments = [])
 * @method \Dew\Acs\Result updateAutoResourceOptimizeRulesAsync(array $arguments = [])
 * @method \Http\Promise\Promise updateAutoResourceOptimizeRulesAsyncAsync($arguments = [])
 * @method \Dew\Acs\Result disableAutoResourceOptimizeRules(array $arguments = [])
 * @method \Http\Promise\Promise disableAutoResourceOptimizeRulesAsync($arguments = [])
 * @method \Dew\Acs\Result getAutoResourceOptimizeRules(array $arguments = [])
 * @method \Http\Promise\Promise getAutoResourceOptimizeRulesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyAutoScalingConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyAutoScalingConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeAutoScalingConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeAutoScalingConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeAutoScalingHistory(array $arguments = [])
 * @method \Http\Promise\Promise describeAutoScalingHistoryAsync($arguments = [])
 * @method \Dew\Acs\Result disableInstanceDasConfig(array $arguments = [])
 * @method \Http\Promise\Promise disableInstanceDasConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getPartitionsHeatmap(array $arguments = [])
 * @method \Http\Promise\Promise getPartitionsHeatmapAsync($arguments = [])
 * @method \Dew\Acs\Result getPfsSqlSample(array $arguments = [])
 * @method \Http\Promise\Promise getPfsSqlSampleAsync($arguments = [])
 * @method \Dew\Acs\Result getPfsMetricTrends(array $arguments = [])
 * @method \Http\Promise\Promise getPfsMetricTrendsAsync($arguments = [])
 * @method \Dew\Acs\Result getPfsSqlSummaries(array $arguments = [])
 * @method \Http\Promise\Promise getPfsSqlSummariesAsync($arguments = [])
 * @method \Dew\Acs\Result getHDMAliyunResourceSyncResult(array $arguments = [])
 * @method \Http\Promise\Promise getHDMAliyunResourceSyncResultAsync($arguments = [])
 * @method \Dew\Acs\Result getEndpointSwitchTask(array $arguments = [])
 * @method \Http\Promise\Promise getEndpointSwitchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getHDMLastAliyunResourceSyncResult(array $arguments = [])
 * @method \Http\Promise\Promise getHDMLastAliyunResourceSyncResultAsync($arguments = [])
 * @method \Dew\Acs\Result describeSqlLogRecords(array $arguments = [])
 * @method \Http\Promise\Promise describeSqlLogRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result enableDasPro(array $arguments = [])
 * @method \Http\Promise\Promise enableDasProAsync($arguments = [])
 * @method \Dew\Acs\Result disableDasPro(array $arguments = [])
 * @method \Http\Promise\Promise disableDasProAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceDasPro(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceDasProAsync($arguments = [])
 * @method \Dew\Acs\Result getDasProServiceUsage(array $arguments = [])
 * @method \Http\Promise\Promise getDasProServiceUsageAsync($arguments = [])
 * @method \Dew\Acs\Result describeSlowLogHistogramAsync(array $arguments = [])
 * @method \Http\Promise\Promise describeSlowLogHistogramAsyncAsync($arguments = [])
 * @method \Dew\Acs\Result describeSlowLogStatistic(array $arguments = [])
 * @method \Http\Promise\Promise describeSlowLogStatisticAsync($arguments = [])
 * @method \Dew\Acs\Result runCloudBenchTask(array $arguments = [])
 * @method \Http\Promise\Promise runCloudBenchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describeCloudbenchTask(array $arguments = [])
 * @method \Http\Promise\Promise describeCloudbenchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describeCloudBenchTasks(array $arguments = [])
 * @method \Http\Promise\Promise describeCloudBenchTasksAsync($arguments = [])
 * @method \Dew\Acs\Result createCloudBenchTasks(array $arguments = [])
 * @method \Http\Promise\Promise createCloudBenchTasksAsync($arguments = [])
 * @method \Dew\Acs\Result describeCloudbenchTaskConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeCloudbenchTaskConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCloudBenchTask(array $arguments = [])
 * @method \Http\Promise\Promise deleteCloudBenchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result deleteStopGateway(array $arguments = [])
 * @method \Http\Promise\Promise deleteStopGatewayAsync($arguments = [])
 */
final class DasClient extends AcsClient
{
    //
}
