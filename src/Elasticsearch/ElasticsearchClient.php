<?php

declare(strict_types=1);

namespace Dew\Acs\Elasticsearch;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result closeManagedIndex(array $arguments = [])
 * @method \Http\Promise\Promise closeManagedIndexAsync($arguments = [])
 * @method \Dew\Acs\Result createDataStream(array $arguments = [])
 * @method \Http\Promise\Promise createDataStreamAsync($arguments = [])
 * @method \Dew\Acs\Result createILMPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createILMPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result createIndexTemplate(array $arguments = [])
 * @method \Http\Promise\Promise createIndexTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataStream(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataStreamAsync($arguments = [])
 * @method \Dew\Acs\Result deleteILMPolicy(array $arguments = [])
 * @method \Http\Promise\Promise deleteILMPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIndexTemplate(array $arguments = [])
 * @method \Http\Promise\Promise deleteIndexTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result describeILMPolicy(array $arguments = [])
 * @method \Http\Promise\Promise describeILMPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result describeIndexTemplate(array $arguments = [])
 * @method \Http\Promise\Promise describeIndexTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result listDataStreams(array $arguments = [])
 * @method \Http\Promise\Promise listDataStreamsAsync($arguments = [])
 * @method \Dew\Acs\Result listILMPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listILMPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result listIndexTemplates(array $arguments = [])
 * @method \Http\Promise\Promise listIndexTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result rolloverDataStream(array $arguments = [])
 * @method \Http\Promise\Promise rolloverDataStreamAsync($arguments = [])
 * @method \Dew\Acs\Result updateILMPolicy(array $arguments = [])
 * @method \Http\Promise\Promise updateILMPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result updateIndexTemplate(array $arguments = [])
 * @method \Http\Promise\Promise updateIndexTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result createComponentIndex(array $arguments = [])
 * @method \Http\Promise\Promise createComponentIndexAsync($arguments = [])
 * @method \Dew\Acs\Result deleteComponentIndex(array $arguments = [])
 * @method \Http\Promise\Promise deleteComponentIndexAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDeprecatedTemplate(array $arguments = [])
 * @method \Http\Promise\Promise deleteDeprecatedTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result describeComponentIndex(array $arguments = [])
 * @method \Http\Promise\Promise describeComponentIndexAsync($arguments = [])
 * @method \Dew\Acs\Result describeDeprecatedTemplate(array $arguments = [])
 * @method \Http\Promise\Promise describeDeprecatedTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result listComponentIndices(array $arguments = [])
 * @method \Http\Promise\Promise listComponentIndicesAsync($arguments = [])
 * @method \Dew\Acs\Result listDeprecatedTemplates(array $arguments = [])
 * @method \Http\Promise\Promise listDeprecatedTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result updateComponentIndex(array $arguments = [])
 * @method \Http\Promise\Promise updateComponentIndexAsync($arguments = [])
 * @method \Dew\Acs\Result deleteInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result updateInstanceChargeType(array $arguments = [])
 * @method \Http\Promise\Promise updateInstanceChargeTypeAsync($arguments = [])
 * @method \Dew\Acs\Result updateDescription(array $arguments = [])
 * @method \Http\Promise\Promise updateDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result updateReadWritePolicy(array $arguments = [])
 * @method \Http\Promise\Promise updateReadWritePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result modifyElastictask(array $arguments = [])
 * @method \Http\Promise\Promise modifyElastictaskAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceMaintainTime(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceMaintainTimeAsync($arguments = [])
 * @method \Dew\Acs\Result updateKibanaWhiteIps(array $arguments = [])
 * @method \Http\Promise\Promise updateKibanaWhiteIpsAsync($arguments = [])
 * @method \Dew\Acs\Result updateWhiteIps(array $arguments = [])
 * @method \Http\Promise\Promise updateWhiteIpsAsync($arguments = [])
 * @method \Dew\Acs\Result listInstance(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstance(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result listAllNode(array $arguments = [])
 * @method \Http\Promise\Promise listAllNodeAsync($arguments = [])
 * @method \Dew\Acs\Result getElastictask(array $arguments = [])
 * @method \Http\Promise\Promise getElastictaskAsync($arguments = [])
 * @method \Dew\Acs\Result listInstanceIndices(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceIndicesAsync($arguments = [])
 * @method \Dew\Acs\Result createInstance(array $arguments = [])
 * @method \Http\Promise\Promise createInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result estimatedRestartTime(array $arguments = [])
 * @method \Http\Promise\Promise estimatedRestartTimeAsync($arguments = [])
 * @method \Dew\Acs\Result restartInstance(array $arguments = [])
 * @method \Http\Promise\Promise restartInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result renewInstance(array $arguments = [])
 * @method \Http\Promise\Promise renewInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result activateZones(array $arguments = [])
 * @method \Http\Promise\Promise activateZonesAsync($arguments = [])
 * @method \Dew\Acs\Result deactivateZones(array $arguments = [])
 * @method \Http\Promise\Promise deactivateZonesAsync($arguments = [])
 * @method \Dew\Acs\Result interruptElasticsearchTask(array $arguments = [])
 * @method \Http\Promise\Promise interruptElasticsearchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result resumeElasticsearchTask(array $arguments = [])
 * @method \Http\Promise\Promise resumeElasticsearchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result migrateToOtherZone(array $arguments = [])
 * @method \Http\Promise\Promise migrateToOtherZoneAsync($arguments = [])
 * @method \Dew\Acs\Result cancelDeletion(array $arguments = [])
 * @method \Http\Promise\Promise cancelDeletionAsync($arguments = [])
 * @method \Dew\Acs\Result diagnoseInstance(array $arguments = [])
 * @method \Http\Promise\Promise diagnoseInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result moveResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise moveResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result capacityPlan(array $arguments = [])
 * @method \Http\Promise\Promise capacityPlanAsync($arguments = [])
 * @method \Dew\Acs\Result getOpenStoreUsage(array $arguments = [])
 * @method \Http\Promise\Promise getOpenStoreUsageAsync($arguments = [])
 * @method \Dew\Acs\Result listDicts(array $arguments = [])
 * @method \Http\Promise\Promise listDictsAsync($arguments = [])
 * @method \Dew\Acs\Result listShardRecoveries(array $arguments = [])
 * @method \Http\Promise\Promise listShardRecoveriesAsync($arguments = [])
 * @method \Dew\Acs\Result listTags(array $arguments = [])
 * @method \Http\Promise\Promise listTagsAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataTask(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getTransferableNodes(array $arguments = [])
 * @method \Http\Promise\Promise getTransferableNodesAsync($arguments = [])
 * @method \Dew\Acs\Result listDataTasks(array $arguments = [])
 * @method \Http\Promise\Promise listDataTasksAsync($arguments = [])
 * @method \Dew\Acs\Result getClusterDataInformation(array $arguments = [])
 * @method \Http\Promise\Promise getClusterDataInformationAsync($arguments = [])
 * @method \Dew\Acs\Result validateTransferableNodes(array $arguments = [])
 * @method \Http\Promise\Promise validateTransferableNodesAsync($arguments = [])
 * @method \Dew\Acs\Result transferNode(array $arguments = [])
 * @method \Http\Promise\Promise transferNodeAsync($arguments = [])
 * @method \Dew\Acs\Result cancelTask(array $arguments = [])
 * @method \Http\Promise\Promise cancelTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createCollector(array $arguments = [])
 * @method \Http\Promise\Promise createCollectorAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCollector(array $arguments = [])
 * @method \Http\Promise\Promise deleteCollectorAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDeployMachine(array $arguments = [])
 * @method \Http\Promise\Promise modifyDeployMachineAsync($arguments = [])
 * @method \Dew\Acs\Result updateCollector(array $arguments = [])
 * @method \Http\Promise\Promise updateCollectorAsync($arguments = [])
 * @method \Dew\Acs\Result updateCollectorName(array $arguments = [])
 * @method \Http\Promise\Promise updateCollectorNameAsync($arguments = [])
 * @method \Dew\Acs\Result startCollector(array $arguments = [])
 * @method \Http\Promise\Promise startCollectorAsync($arguments = [])
 * @method \Dew\Acs\Result stopCollector(array $arguments = [])
 * @method \Http\Promise\Promise stopCollectorAsync($arguments = [])
 * @method \Dew\Acs\Result describeCollector(array $arguments = [])
 * @method \Http\Promise\Promise describeCollectorAsync($arguments = [])
 * @method \Dew\Acs\Result listDefaultCollectorConfigurations(array $arguments = [])
 * @method \Http\Promise\Promise listDefaultCollectorConfigurationsAsync($arguments = [])
 * @method \Dew\Acs\Result listCollectors(array $arguments = [])
 * @method \Http\Promise\Promise listCollectorsAsync($arguments = [])
 * @method \Dew\Acs\Result listNodes(array $arguments = [])
 * @method \Http\Promise\Promise listNodesAsync($arguments = [])
 * @method \Dew\Acs\Result restartCollector(array $arguments = [])
 * @method \Http\Promise\Promise restartCollectorAsync($arguments = [])
 * @method \Dew\Acs\Result reinstallCollector(array $arguments = [])
 * @method \Http\Promise\Promise reinstallCollectorAsync($arguments = [])
 * @method \Dew\Acs\Result updateInstance(array $arguments = [])
 * @method \Http\Promise\Promise updateInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getSuggestShrinkableNodes(array $arguments = [])
 * @method \Http\Promise\Promise getSuggestShrinkableNodesAsync($arguments = [])
 * @method \Dew\Acs\Result validateShrinkNodes(array $arguments = [])
 * @method \Http\Promise\Promise validateShrinkNodesAsync($arguments = [])
 * @method \Dew\Acs\Result shrinkNode(array $arguments = [])
 * @method \Http\Promise\Promise shrinkNodeAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeEngineVersion(array $arguments = [])
 * @method \Http\Promise\Promise upgradeEngineVersionAsync($arguments = [])
 * @method \Dew\Acs\Result updateInstanceSettings(array $arguments = [])
 * @method \Http\Promise\Promise updateInstanceSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result updateHotIkDicts(array $arguments = [])
 * @method \Http\Promise\Promise updateHotIkDictsAsync($arguments = [])
 * @method \Dew\Acs\Result updateSynonymsDicts(array $arguments = [])
 * @method \Http\Promise\Promise updateSynonymsDictsAsync($arguments = [])
 * @method \Dew\Acs\Result updateDict(array $arguments = [])
 * @method \Http\Promise\Promise updateDictAsync($arguments = [])
 * @method \Dew\Acs\Result updateAdvancedSetting(array $arguments = [])
 * @method \Http\Promise\Promise updateAdvancedSettingAsync($arguments = [])
 * @method \Dew\Acs\Result updateExtendConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateExtendConfigAsync($arguments = [])
 * @method \Dew\Acs\Result updateTemplate(array $arguments = [])
 * @method \Http\Promise\Promise updateTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result updateAliwsDict(array $arguments = [])
 * @method \Http\Promise\Promise updateAliwsDictAsync($arguments = [])
 * @method \Dew\Acs\Result updateBlackIps(array $arguments = []) {@deprecated 2017-06-13}
 * @method \Http\Promise\Promise updateBlackIpsAsync($arguments = []) {@deprecated 2017-06-13}
 * @method \Dew\Acs\Result describeTemplates(array $arguments = [])
 * @method \Http\Promise\Promise describeTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result listAckClusters(array $arguments = [])
 * @method \Http\Promise\Promise listAckClustersAsync($arguments = [])
 * @method \Dew\Acs\Result listDictInformation(array $arguments = [])
 * @method \Http\Promise\Promise listDictInformationAsync($arguments = [])
 * @method \Dew\Acs\Result listEcsInstances(array $arguments = [])
 * @method \Http\Promise\Promise listEcsInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result describeAckOperator(array $arguments = [])
 * @method \Http\Promise\Promise describeAckOperatorAsync($arguments = [])
 * @method \Dew\Acs\Result getRegionConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getRegionConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result listAckNamespaces(array $arguments = [])
 * @method \Http\Promise\Promise listAckNamespacesAsync($arguments = [])
 * @method \Dew\Acs\Result installAckOperator(array $arguments = [])
 * @method \Http\Promise\Promise installAckOperatorAsync($arguments = [])
 * @method \Dew\Acs\Result installUserPlugins(array $arguments = [])
 * @method \Http\Promise\Promise installUserPluginsAsync($arguments = [])
 * @method \Dew\Acs\Result recommendTemplates(array $arguments = [])
 * @method \Http\Promise\Promise recommendTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result validateSlrPermission(array $arguments = [])
 * @method \Http\Promise\Promise validateSlrPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result initializeOperationRole(array $arguments = [])
 * @method \Http\Promise\Promise initializeOperationRoleAsync($arguments = [])
 * @method \Dew\Acs\Result listPlugins(array $arguments = [])
 * @method \Http\Promise\Promise listPluginsAsync($arguments = [])
 * @method \Dew\Acs\Result installSystemPlugin(array $arguments = [])
 * @method \Http\Promise\Promise installSystemPluginAsync($arguments = [])
 * @method \Dew\Acs\Result uninstallPlugin(array $arguments = [])
 * @method \Http\Promise\Promise uninstallPluginAsync($arguments = [])
 * @method \Dew\Acs\Result getEmonMonitorData(array $arguments = [])
 * @method \Http\Promise\Promise getEmonMonitorDataAsync($arguments = [])
 * @method \Dew\Acs\Result describeElasticsearchHealth(array $arguments = [])
 * @method \Http\Promise\Promise describeElasticsearchHealthAsync($arguments = [])
 * @method \Dew\Acs\Result getEmonGrafanaAlerts(array $arguments = [])
 * @method \Http\Promise\Promise getEmonGrafanaAlertsAsync($arguments = [])
 * @method \Dew\Acs\Result getEmonGrafanaDashboards(array $arguments = [])
 * @method \Http\Promise\Promise getEmonGrafanaDashboardsAsync($arguments = [])
 * @method \Dew\Acs\Result postEmonTryAlarmRule(array $arguments = [])
 * @method \Http\Promise\Promise postEmonTryAlarmRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listSearchLog(array $arguments = [])
 * @method \Http\Promise\Promise listSearchLogAsync($arguments = [])
 * @method \Dew\Acs\Result addConnectableCluster(array $arguments = [])
 * @method \Http\Promise\Promise addConnectableClusterAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConnectedCluster(array $arguments = [])
 * @method \Http\Promise\Promise deleteConnectedClusterAsync($arguments = [])
 * @method \Dew\Acs\Result updatePrivateNetworkWhiteIps(array $arguments = [])
 * @method \Http\Promise\Promise updatePrivateNetworkWhiteIpsAsync($arguments = [])
 * @method \Dew\Acs\Result updatePublicWhiteIps(array $arguments = [])
 * @method \Http\Promise\Promise updatePublicWhiteIpsAsync($arguments = [])
 * @method \Dew\Acs\Result updatePublicNetwork(array $arguments = [])
 * @method \Http\Promise\Promise updatePublicNetworkAsync($arguments = [])
 * @method \Dew\Acs\Result updateAdminPassword(array $arguments = [])
 * @method \Http\Promise\Promise updateAdminPasswordAsync($arguments = [])
 * @method \Dew\Acs\Result modifyWhiteIps(array $arguments = [])
 * @method \Http\Promise\Promise modifyWhiteIpsAsync($arguments = [])
 * @method \Dew\Acs\Result describeConnectableClusters(array $arguments = [])
 * @method \Http\Promise\Promise describeConnectableClustersAsync($arguments = [])
 * @method \Dew\Acs\Result listConnectedClusters(array $arguments = [])
 * @method \Http\Promise\Promise listConnectedClustersAsync($arguments = [])
 * @method \Dew\Acs\Result triggerNetwork(array $arguments = [])
 * @method \Http\Promise\Promise triggerNetworkAsync($arguments = [])
 * @method \Dew\Acs\Result openHttps(array $arguments = [])
 * @method \Http\Promise\Promise openHttpsAsync($arguments = [])
 * @method \Dew\Acs\Result closeHttps(array $arguments = [])
 * @method \Http\Promise\Promise closeHttpsAsync($arguments = [])
 * @method \Dew\Acs\Result createVpcEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise createVpcEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpcEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpcEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result listVpcEndpoints(array $arguments = [])
 * @method \Http\Promise\Promise listVpcEndpointsAsync($arguments = [])
 * @method \Dew\Acs\Result createSnapshot(array $arguments = [])
 * @method \Http\Promise\Promise createSnapshotAsync($arguments = [])
 * @method \Dew\Acs\Result addSnapshotRepo(array $arguments = [])
 * @method \Http\Promise\Promise addSnapshotRepoAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSnapshotRepo(array $arguments = [])
 * @method \Http\Promise\Promise deleteSnapshotRepoAsync($arguments = [])
 * @method \Dew\Acs\Result updateSnapshotSetting(array $arguments = [])
 * @method \Http\Promise\Promise updateSnapshotSettingAsync($arguments = [])
 * @method \Dew\Acs\Result describeSnapshotSetting(array $arguments = [])
 * @method \Http\Promise\Promise describeSnapshotSettingAsync($arguments = [])
 * @method \Dew\Acs\Result listSnapshotReposByInstanceId(array $arguments = [])
 * @method \Http\Promise\Promise listSnapshotReposByInstanceIdAsync($arguments = [])
 * @method \Dew\Acs\Result listAlternativeSnapshotRepos(array $arguments = [])
 * @method \Http\Promise\Promise listAlternativeSnapshotReposAsync($arguments = [])
 * @method \Dew\Acs\Result listDiagnosisItems(array $arguments = [])
 * @method \Http\Promise\Promise listDiagnosisItemsAsync($arguments = [])
 * @method \Dew\Acs\Result updateDiagnosisSettings(array $arguments = [])
 * @method \Http\Promise\Promise updateDiagnosisSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result listDiagnoseReport(array $arguments = [])
 * @method \Http\Promise\Promise listDiagnoseReportAsync($arguments = [])
 * @method \Dew\Acs\Result listDiagnoseReportIds(array $arguments = [])
 * @method \Http\Promise\Promise listDiagnoseReportIdsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDiagnoseReport(array $arguments = [])
 * @method \Http\Promise\Promise describeDiagnoseReportAsync($arguments = [])
 * @method \Dew\Acs\Result describeDiagnosisSettings(array $arguments = [])
 * @method \Http\Promise\Promise describeDiagnosisSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result listDiagnoseIndices(array $arguments = [])
 * @method \Http\Promise\Promise listDiagnoseIndicesAsync($arguments = [])
 * @method \Dew\Acs\Result openDiagnosis(array $arguments = [])
 * @method \Http\Promise\Promise openDiagnosisAsync($arguments = [])
 * @method \Dew\Acs\Result closeDiagnosis(array $arguments = [])
 * @method \Http\Promise\Promise closeDiagnosisAsync($arguments = [])
 * @method \Dew\Acs\Result updateKibanaSettings(array $arguments = [])
 * @method \Http\Promise\Promise updateKibanaSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result describeKibanaSettings(array $arguments = [])
 * @method \Http\Promise\Promise describeKibanaSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result listKibanaPlugins(array $arguments = [])
 * @method \Http\Promise\Promise listKibanaPluginsAsync($arguments = [])
 * @method \Dew\Acs\Result installKibanaSystemPlugin(array $arguments = [])
 * @method \Http\Promise\Promise installKibanaSystemPluginAsync($arguments = [])
 * @method \Dew\Acs\Result uninstallKibanaPlugin(array $arguments = [])
 * @method \Http\Promise\Promise uninstallKibanaPluginAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLogstash(array $arguments = [])
 * @method \Http\Promise\Promise deleteLogstashAsync($arguments = [])
 * @method \Dew\Acs\Result updateLogstash(array $arguments = [])
 * @method \Http\Promise\Promise updateLogstashAsync($arguments = [])
 * @method \Dew\Acs\Result updateLogstashDescription(array $arguments = [])
 * @method \Http\Promise\Promise updateLogstashDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result updateLogstashChargeType(array $arguments = [])
 * @method \Http\Promise\Promise updateLogstashChargeTypeAsync($arguments = [])
 * @method \Dew\Acs\Result listLogstash(array $arguments = [])
 * @method \Http\Promise\Promise listLogstashAsync($arguments = [])
 * @method \Dew\Acs\Result describeLogstash(array $arguments = [])
 * @method \Http\Promise\Promise describeLogstashAsync($arguments = [])
 * @method \Dew\Acs\Result renewLogstash(array $arguments = [])
 * @method \Http\Promise\Promise renewLogstashAsync($arguments = [])
 * @method \Dew\Acs\Result restartLogstash(array $arguments = [])
 * @method \Http\Promise\Promise restartLogstashAsync($arguments = [])
 * @method \Dew\Acs\Result estimatedLogstashRestartTime(array $arguments = [])
 * @method \Http\Promise\Promise estimatedLogstashRestartTimeAsync($arguments = [])
 * @method \Dew\Acs\Result updateLogstashSettings(array $arguments = [])
 * @method \Http\Promise\Promise updateLogstashSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result listExtendfiles(array $arguments = [])
 * @method \Http\Promise\Promise listExtendfilesAsync($arguments = [])
 * @method \Dew\Acs\Result listLogstashPlugins(array $arguments = [])
 * @method \Http\Promise\Promise listLogstashPluginsAsync($arguments = [])
 * @method \Dew\Acs\Result installLogstashSystemPlugin(array $arguments = [])
 * @method \Http\Promise\Promise installLogstashSystemPluginAsync($arguments = [])
 * @method \Dew\Acs\Result uninstallLogstashPlugin(array $arguments = [])
 * @method \Http\Promise\Promise uninstallLogstashPluginAsync($arguments = [])
 * @method \Dew\Acs\Result listLogstashLog(array $arguments = [])
 * @method \Http\Promise\Promise listLogstashLogAsync($arguments = [])
 * @method \Dew\Acs\Result updateXpackMonitorConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateXpackMonitorConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listAvailableEsInstanceIds(array $arguments = [])
 * @method \Http\Promise\Promise listAvailableEsInstanceIdsAsync($arguments = [])
 * @method \Dew\Acs\Result describeXpackMonitorConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeXpackMonitorConfigAsync($arguments = [])
 * @method \Dew\Acs\Result validateConnection(array $arguments = [])
 * @method \Http\Promise\Promise validateConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result interruptLogstashTask(array $arguments = [])
 * @method \Http\Promise\Promise interruptLogstashTaskAsync($arguments = [])
 * @method \Dew\Acs\Result resumeLogstashTask(array $arguments = [])
 * @method \Http\Promise\Promise resumeLogstashTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createPipelines(array $arguments = [])
 * @method \Http\Promise\Promise createPipelinesAsync($arguments = [])
 * @method \Dew\Acs\Result deletePipelines(array $arguments = [])
 * @method \Http\Promise\Promise deletePipelinesAsync($arguments = [])
 * @method \Dew\Acs\Result updatePipelines(array $arguments = [])
 * @method \Http\Promise\Promise updatePipelinesAsync($arguments = [])
 * @method \Dew\Acs\Result stopPipelines(array $arguments = [])
 * @method \Http\Promise\Promise stopPipelinesAsync($arguments = [])
 * @method \Dew\Acs\Result updatePipelineManagementConfig(array $arguments = [])
 * @method \Http\Promise\Promise updatePipelineManagementConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listPipeline(array $arguments = [])
 * @method \Http\Promise\Promise listPipelineAsync($arguments = [])
 * @method \Dew\Acs\Result describePipeline(array $arguments = [])
 * @method \Http\Promise\Promise describePipelineAsync($arguments = [])
 * @method \Dew\Acs\Result describePipelineManagementConfig(array $arguments = [])
 * @method \Http\Promise\Promise describePipelineManagementConfigAsync($arguments = [])
 * @method \Dew\Acs\Result runPipelines(array $arguments = [])
 * @method \Http\Promise\Promise runPipelinesAsync($arguments = [])
 * @method \Dew\Acs\Result createLogstash(array $arguments = [])
 * @method \Http\Promise\Promise createLogstashAsync($arguments = [])
 * @method \Dew\Acs\Result updateExtendfiles(array $arguments = [])
 * @method \Http\Promise\Promise updateExtendfilesAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelineIds(array $arguments = [])
 * @method \Http\Promise\Promise listPipelineIdsAsync($arguments = [])
 * @method \Dew\Acs\Result cancelLogstashDeletion(array $arguments = [])
 * @method \Http\Promise\Promise cancelLogstashDeletionAsync($arguments = [])
 * @method \Dew\Acs\Result turnOnZone(array $arguments = [])
 * @method \Http\Promise\Promise turnOnZoneAsync($arguments = [])
 * @method \Dew\Acs\Result listInstanceHistoryEvents(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceHistoryEventsAsync($arguments = [])
 * @method \Dew\Acs\Result updateDynamicSettings(array $arguments = [])
 * @method \Http\Promise\Promise updateDynamicSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDynamicSettings(array $arguments = [])
 * @method \Http\Promise\Promise describeDynamicSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result listActionRecords(array $arguments = [])
 * @method \Http\Promise\Promise listActionRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result disableKibanaPvlNetwork(array $arguments = [])
 * @method \Http\Promise\Promise disableKibanaPvlNetworkAsync($arguments = [])
 * @method \Dew\Acs\Result updateKibanaPvlNetwork(array $arguments = [])
 * @method \Http\Promise\Promise updateKibanaPvlNetworkAsync($arguments = [])
 * @method \Dew\Acs\Result listKibanaPvlNetwork(array $arguments = [])
 * @method \Http\Promise\Promise listKibanaPvlNetworkAsync($arguments = [])
 * @method \Dew\Acs\Result enableKibanaPvlNetwork(array $arguments = [])
 * @method \Http\Promise\Promise enableKibanaPvlNetworkAsync($arguments = [])
 * @method \Dew\Acs\Result turnOffZone(array $arguments = [])
 * @method \Http\Promise\Promise turnOffZoneAsync($arguments = [])
 */
final class ElasticsearchClient extends AcsClient
{
    //
}
