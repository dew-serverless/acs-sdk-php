<?php

declare(strict_types=1);

namespace Dew\Acs\Mse;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result updateMigrationTask(array $arguments = [])
 * @method \Http\Promise\Promise updateMigrationTaskAsync($arguments = [])
 * @method \Dew\Acs\Result addMigrationTask(array $arguments = [])
 * @method \Http\Promise\Promise addMigrationTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listMigrationTask(array $arguments = [])
 * @method \Http\Promise\Promise listMigrationTaskAsync($arguments = [])
 * @method \Dew\Acs\Result deleteMigrationTask(array $arguments = [])
 * @method \Http\Promise\Promise deleteMigrationTaskAsync($arguments = [])
 * @method \Dew\Acs\Result putClusterHealthCheckTask(array $arguments = [])
 * @method \Http\Promise\Promise putClusterHealthCheckTaskAsync($arguments = [])
 * @method \Dew\Acs\Result orderClusterHealthCheckRiskNotice(array $arguments = [])
 * @method \Http\Promise\Promise orderClusterHealthCheckRiskNoticeAsync($arguments = [])
 * @method \Dew\Acs\Result listClusterHealthCheckTask(array $arguments = [])
 * @method \Http\Promise\Promise listClusterHealthCheckTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listConfigTrack(array $arguments = [])
 * @method \Http\Promise\Promise listConfigTrackAsync($arguments = [])
 * @method \Dew\Acs\Result createNacosConfig(array $arguments = [])
 * @method \Http\Promise\Promise createNacosConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNacosConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteNacosConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNacosConfigs(array $arguments = [])
 * @method \Http\Promise\Promise deleteNacosConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result updateNacosConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateNacosConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listListenersByConfig(array $arguments = [])
 * @method \Http\Promise\Promise listListenersByConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listListenersByIp(array $arguments = [])
 * @method \Http\Promise\Promise listListenersByIpAsync($arguments = [])
 * @method \Dew\Acs\Result getNacosConfig(array $arguments = [])
 * @method \Http\Promise\Promise getNacosConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getNacosHistoryConfig(array $arguments = [])
 * @method \Http\Promise\Promise getNacosHistoryConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listNacosConfigs(array $arguments = [])
 * @method \Http\Promise\Promise listNacosConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result listNacosHistoryConfigs(array $arguments = [])
 * @method \Http\Promise\Promise listNacosHistoryConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result cloneNacosConfig(array $arguments = [])
 * @method \Http\Promise\Promise cloneNacosConfigAsync($arguments = [])
 * @method \Dew\Acs\Result exportNacosConfig(array $arguments = [])
 * @method \Http\Promise\Promise exportNacosConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getImportFileUrl(array $arguments = [])
 * @method \Http\Promise\Promise getImportFileUrlAsync($arguments = [])
 * @method \Dew\Acs\Result importNacosConfig(array $arguments = [])
 * @method \Http\Promise\Promise importNacosConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listNamingTrack(array $arguments = [])
 * @method \Http\Promise\Promise listNamingTrackAsync($arguments = [])
 * @method \Dew\Acs\Result createNacosService(array $arguments = [])
 * @method \Http\Promise\Promise createNacosServiceAsync($arguments = [])
 * @method \Dew\Acs\Result listAnsServices(array $arguments = [])
 * @method \Http\Promise\Promise listAnsServicesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNacosService(array $arguments = [])
 * @method \Http\Promise\Promise deleteNacosServiceAsync($arguments = [])
 * @method \Dew\Acs\Result updateNacosService(array $arguments = [])
 * @method \Http\Promise\Promise updateNacosServiceAsync($arguments = [])
 * @method \Dew\Acs\Result updateNacosCluster(array $arguments = [])
 * @method \Http\Promise\Promise updateNacosClusterAsync($arguments = [])
 * @method \Dew\Acs\Result listAnsServiceClusters(array $arguments = [])
 * @method \Http\Promise\Promise listAnsServiceClustersAsync($arguments = [])
 * @method \Dew\Acs\Result createNacosInstance(array $arguments = [])
 * @method \Http\Promise\Promise createNacosInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNacosInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteNacosInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result updateNacosInstance(array $arguments = [])
 * @method \Http\Promise\Promise updateNacosInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result listAnsInstances(array $arguments = [])
 * @method \Http\Promise\Promise listAnsInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceListeners(array $arguments = [])
 * @method \Http\Promise\Promise getServiceListenersAsync($arguments = [])
 * @method \Dew\Acs\Result listEurekaServices(array $arguments = [])
 * @method \Http\Promise\Promise listEurekaServicesAsync($arguments = [])
 * @method \Dew\Acs\Result listEurekaInstances(array $arguments = [])
 * @method \Http\Promise\Promise listEurekaInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result queryMonitor(array $arguments = [])
 * @method \Http\Promise\Promise queryMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result updateAcl(array $arguments = [])
 * @method \Http\Promise\Promise updateAclAsync($arguments = [])
 * @method \Dew\Acs\Result queryInstancesInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryInstancesInfoAsync($arguments = [])
 * @method \Dew\Acs\Result queryClusterInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryClusterInfoAsync($arguments = [])
 * @method \Dew\Acs\Result queryClusterDetail(array $arguments = [])
 * @method \Http\Promise\Promise queryClusterDetailAsync($arguments = [])
 * @method \Dew\Acs\Result createCluster(array $arguments = [])
 * @method \Http\Promise\Promise createClusterAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCluster(array $arguments = [])
 * @method \Http\Promise\Promise deleteClusterAsync($arguments = [])
 * @method \Dew\Acs\Result updateCluster(array $arguments = [])
 * @method \Http\Promise\Promise updateClusterAsync($arguments = [])
 * @method \Dew\Acs\Result updateConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listClusters(array $arguments = [])
 * @method \Http\Promise\Promise listClustersAsync($arguments = [])
 * @method \Dew\Acs\Result listClusterTypes(array $arguments = [])
 * @method \Http\Promise\Promise listClusterTypesAsync($arguments = [])
 * @method \Dew\Acs\Result listClusterVersions(array $arguments = [])
 * @method \Http\Promise\Promise listClusterVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result queryClusterSpecification(array $arguments = [])
 * @method \Http\Promise\Promise queryClusterSpecificationAsync($arguments = [])
 * @method \Dew\Acs\Result queryClusterDiskSpecification(array $arguments = [])
 * @method \Http\Promise\Promise queryClusterDiskSpecificationAsync($arguments = [])
 * @method \Dew\Acs\Result listInstanceCount(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceCountAsync($arguments = [])
 * @method \Dew\Acs\Result queryConfig(array $arguments = [])
 * @method \Http\Promise\Promise queryConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getImage(array $arguments = [])
 * @method \Http\Promise\Promise getImageAsync($arguments = [])
 * @method \Dew\Acs\Result updateImage(array $arguments = [])
 * @method \Http\Promise\Promise updateImageAsync($arguments = [])
 * @method \Dew\Acs\Result getMseFeatureSwitch(array $arguments = [])
 * @method \Http\Promise\Promise getMseFeatureSwitchAsync($arguments = [])
 * @method \Dew\Acs\Result queryBusinessLocations(array $arguments = [])
 * @method \Http\Promise\Promise queryBusinessLocationsAsync($arguments = [])
 * @method \Dew\Acs\Result listClusterConnectionTypes(array $arguments = [])
 * @method \Http\Promise\Promise listClusterConnectionTypesAsync($arguments = [])
 * @method \Dew\Acs\Result querySlbSpec(array $arguments = [])
 * @method \Http\Promise\Promise querySlbSpecAsync($arguments = [])
 * @method \Dew\Acs\Result updateClusterSpec(array $arguments = [])
 * @method \Http\Promise\Promise updateClusterSpecAsync($arguments = [])
 * @method \Dew\Acs\Result restartCluster(array $arguments = [])
 * @method \Http\Promise\Promise restartClusterAsync($arguments = [])
 * @method \Dew\Acs\Result retryCluster(array $arguments = [])
 * @method \Http\Promise\Promise retryClusterAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeCluster(array $arguments = [])
 * @method \Http\Promise\Promise upgradeClusterAsync($arguments = [])
 * @method \Dew\Acs\Result createEngineNamespace(array $arguments = [])
 * @method \Http\Promise\Promise createEngineNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEngineNamespace(array $arguments = [])
 * @method \Http\Promise\Promise deleteEngineNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result updateEngineNamespace(array $arguments = [])
 * @method \Http\Promise\Promise updateEngineNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result getEngineNamepace(array $arguments = [])
 * @method \Http\Promise\Promise getEngineNamepaceAsync($arguments = [])
 * @method \Dew\Acs\Result listEngineNamespaces(array $arguments = [])
 * @method \Http\Promise\Promise listEngineNamespacesAsync($arguments = [])
 * @method \Dew\Acs\Result importZookeeperData(array $arguments = [])
 * @method \Http\Promise\Promise importZookeeperDataAsync($arguments = [])
 * @method \Dew\Acs\Result getZookeeperDataImportUrl(array $arguments = [])
 * @method \Http\Promise\Promise getZookeeperDataImportUrlAsync($arguments = [])
 * @method \Dew\Acs\Result exportZookeeperData(array $arguments = [])
 * @method \Http\Promise\Promise exportZookeeperDataAsync($arguments = [])
 * @method \Dew\Acs\Result listExportZookeeperData(array $arguments = [])
 * @method \Http\Promise\Promise listExportZookeeperDataAsync($arguments = [])
 * @method \Dew\Acs\Result createZnode(array $arguments = [])
 * @method \Http\Promise\Promise createZnodeAsync($arguments = [])
 * @method \Dew\Acs\Result deleteZnode(array $arguments = [])
 * @method \Http\Promise\Promise deleteZnodeAsync($arguments = [])
 * @method \Dew\Acs\Result updateZnode(array $arguments = [])
 * @method \Http\Promise\Promise updateZnodeAsync($arguments = [])
 * @method \Dew\Acs\Result listZnodeChildren(array $arguments = [])
 * @method \Http\Promise\Promise listZnodeChildrenAsync($arguments = [])
 * @method \Dew\Acs\Result queryZnodeDetail(array $arguments = [])
 * @method \Http\Promise\Promise queryZnodeDetailAsync($arguments = [])
 * @method \Dew\Acs\Result listZkTrack(array $arguments = [])
 * @method \Http\Promise\Promise listZkTrackAsync($arguments = [])
 * @method \Dew\Acs\Result listSentinelBlockFallbackDefinitions(array $arguments = [])
 * @method \Http\Promise\Promise listSentinelBlockFallbackDefinitionsAsync($arguments = [])
 * @method \Dew\Acs\Result bindSentinelBlockFallbackDefinition(array $arguments = [])
 * @method \Http\Promise\Promise bindSentinelBlockFallbackDefinitionAsync($arguments = [])
 * @method \Dew\Acs\Result listIsolationRules(array $arguments = [])
 * @method \Http\Promise\Promise listIsolationRulesAsync($arguments = [])
 * @method \Dew\Acs\Result createIsolationRule(array $arguments = [])
 * @method \Http\Promise\Promise createIsolationRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIsolationRules(array $arguments = [])
 * @method \Http\Promise\Promise deleteIsolationRulesAsync($arguments = [])
 * @method \Dew\Acs\Result updateIsolationRule(array $arguments = [])
 * @method \Http\Promise\Promise updateIsolationRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCircuitBreakerRules(array $arguments = [])
 * @method \Http\Promise\Promise deleteCircuitBreakerRulesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFlowRules(array $arguments = [])
 * @method \Http\Promise\Promise deleteFlowRulesAsync($arguments = [])
 * @method \Dew\Acs\Result updateFlowRule(array $arguments = [])
 * @method \Http\Promise\Promise updateFlowRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listFlowRules(array $arguments = [])
 * @method \Http\Promise\Promise listFlowRulesAsync($arguments = [])
 * @method \Dew\Acs\Result createFlowRule(array $arguments = [])
 * @method \Http\Promise\Promise createFlowRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createCircuitBreakerRule(array $arguments = [])
 * @method \Http\Promise\Promise createCircuitBreakerRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listCircuitBreakerRules(array $arguments = [])
 * @method \Http\Promise\Promise listCircuitBreakerRulesAsync($arguments = [])
 * @method \Dew\Acs\Result updateCircuitBreakerRule(array $arguments = [])
 * @method \Http\Promise\Promise updateCircuitBreakerRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listAuthPolicy(array $arguments = [])
 * @method \Http\Promise\Promise listAuthPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result updateAuthPolicy(array $arguments = [])
 * @method \Http\Promise\Promise updateAuthPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result addAuthPolicy(array $arguments = [])
 * @method \Http\Promise\Promise addAuthPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result removeAuthPolicy(array $arguments = [])
 * @method \Http\Promise\Promise removeAuthPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceMethodPage(array $arguments = [])
 * @method \Http\Promise\Promise getServiceMethodPageAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceListPage(array $arguments = [])
 * @method \Http\Promise\Promise getServiceListPageAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceList(array $arguments = [])
 * @method \Http\Promise\Promise getServiceListAsync($arguments = [])
 * @method \Dew\Acs\Result createOrUpdateSwimmingLaneGroup(array $arguments = [])
 * @method \Http\Promise\Promise createOrUpdateSwimmingLaneGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSwimmingLaneGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteSwimmingLaneGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createOrUpdateSwimmingLane(array $arguments = [])
 * @method \Http\Promise\Promise createOrUpdateSwimmingLaneAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSwimmingLane(array $arguments = [])
 * @method \Http\Promise\Promise deleteSwimmingLaneAsync($arguments = [])
 * @method \Dew\Acs\Result queryAllSwimmingLaneGroup(array $arguments = [])
 * @method \Http\Promise\Promise queryAllSwimmingLaneGroupAsync($arguments = [])
 * @method \Dew\Acs\Result queryAllSwimmingLane(array $arguments = [])
 * @method \Http\Promise\Promise queryAllSwimmingLaneAsync($arguments = [])
 * @method \Dew\Acs\Result getTagsBySwimmingLaneGroupId(array $arguments = [])
 * @method \Http\Promise\Promise getTagsBySwimmingLaneGroupIdAsync($arguments = [])
 * @method \Dew\Acs\Result querySwimmingLaneById(array $arguments = [])
 * @method \Http\Promise\Promise querySwimmingLaneByIdAsync($arguments = [])
 * @method \Dew\Acs\Result listAppBySwimmingLaneGroupTags(array $arguments = [])
 * @method \Http\Promise\Promise listAppBySwimmingLaneGroupTagsAsync($arguments = [])
 * @method \Dew\Acs\Result listAppBySwimmingLaneGroupTag(array $arguments = []) {@deprecated 2019-05-31}
 * @method \Http\Promise\Promise listAppBySwimmingLaneGroupTagAsync($arguments = []) {@deprecated 2019-05-31}
 * @method \Dew\Acs\Result getLosslessRuleByApp(array $arguments = [])
 * @method \Http\Promise\Promise getLosslessRuleByAppAsync($arguments = [])
 * @method \Dew\Acs\Result modifyLosslessRule(array $arguments = [])
 * @method \Http\Promise\Promise modifyLosslessRuleAsync($arguments = [])
 * @method \Dew\Acs\Result fetchLosslessRuleList(array $arguments = [])
 * @method \Http\Promise\Promise fetchLosslessRuleListAsync($arguments = [])
 * @method \Dew\Acs\Result getApplicationList(array $arguments = [])
 * @method \Http\Promise\Promise getApplicationListAsync($arguments = [])
 * @method \Dew\Acs\Result createMseServiceApplication(array $arguments = []) {@deprecated 2019-05-31}
 * @method \Http\Promise\Promise createMseServiceApplicationAsync($arguments = []) {@deprecated 2019-05-31}
 * @method \Dew\Acs\Result createApplication(array $arguments = [])
 * @method \Http\Promise\Promise createApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result getOverview(array $arguments = [])
 * @method \Http\Promise\Promise getOverviewAsync($arguments = [])
 * @method \Dew\Acs\Result removeApplication(array $arguments = [])
 * @method \Http\Promise\Promise removeApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result modifyGovernanceKubernetesCluster(array $arguments = [])
 * @method \Http\Promise\Promise modifyGovernanceKubernetesClusterAsync($arguments = [])
 * @method \Dew\Acs\Result getGovernanceKubernetesCluster(array $arguments = [])
 * @method \Http\Promise\Promise getGovernanceKubernetesClusterAsync($arguments = [])
 * @method \Dew\Acs\Result queryGovernanceKubernetesCluster(array $arguments = [])
 * @method \Http\Promise\Promise queryGovernanceKubernetesClusterAsync($arguments = [])
 * @method \Dew\Acs\Result applyTagPolicies(array $arguments = [])
 * @method \Http\Promise\Promise applyTagPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result listApplicationsWithTagRules(array $arguments = [])
 * @method \Http\Promise\Promise listApplicationsWithTagRulesAsync($arguments = [])
 * @method \Dew\Acs\Result getAppMessageQueueRoute(array $arguments = [])
 * @method \Http\Promise\Promise getAppMessageQueueRouteAsync($arguments = [])
 * @method \Dew\Acs\Result updateMessageQueueRoute(array $arguments = [])
 * @method \Http\Promise\Promise updateMessageQueueRouteAsync($arguments = [])
 * @method \Dew\Acs\Result addMockRule(array $arguments = [])
 * @method \Http\Promise\Promise addMockRuleAsync($arguments = [])
 * @method \Dew\Acs\Result getPlugins(array $arguments = [])
 * @method \Http\Promise\Promise getPluginsAsync($arguments = [])
 * @method \Dew\Acs\Result getPluginConfig(array $arguments = [])
 * @method \Http\Promise\Promise getPluginConfigAsync($arguments = [])
 * @method \Dew\Acs\Result updatePluginConfig(array $arguments = [])
 * @method \Http\Promise\Promise updatePluginConfigAsync($arguments = [])
 * @method \Dew\Acs\Result addSSLCert(array $arguments = [])
 * @method \Http\Promise\Promise addSSLCertAsync($arguments = [])
 * @method \Dew\Acs\Result addGatewayDomain(array $arguments = [])
 * @method \Http\Promise\Promise addGatewayDomainAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewayDomain(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewayDomainAsync($arguments = [])
 * @method \Dew\Acs\Result updateSSLCert(array $arguments = [])
 * @method \Http\Promise\Promise updateSSLCertAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayDomain(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayDomainAsync($arguments = [])
 * @method \Dew\Acs\Result listSSLCert(array $arguments = [])
 * @method \Http\Promise\Promise listSSLCertAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewayDomain(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayDomainAsync($arguments = [])
 * @method \Dew\Acs\Result getGatewayDomainDetail(array $arguments = [])
 * @method \Http\Promise\Promise getGatewayDomainDetailAsync($arguments = [])
 * @method \Dew\Acs\Result addGateway(array $arguments = [])
 * @method \Http\Promise\Promise addGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewayZone(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayZoneAsync($arguments = [])
 * @method \Dew\Acs\Result addGatewaySlb(array $arguments = [])
 * @method \Http\Promise\Promise addGatewaySlbAsync($arguments = [])
 * @method \Dew\Acs\Result addSecurityGroupRule(array $arguments = [])
 * @method \Http\Promise\Promise addSecurityGroupRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGateway(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewaySlb(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewaySlbAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSecurityGroupRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteSecurityGroupRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayOption(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayOptionAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayName(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayNameAsync($arguments = [])
 * @method \Dew\Acs\Result queryGatewayRegion(array $arguments = [])
 * @method \Http\Promise\Promise queryGatewayRegionAsync($arguments = [])
 * @method \Dew\Acs\Result queryGatewayType(array $arguments = [])
 * @method \Http\Promise\Promise queryGatewayTypeAsync($arguments = [])
 * @method \Dew\Acs\Result getGateway(array $arguments = [])
 * @method \Http\Promise\Promise getGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result listGateway(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewaySlb(array $arguments = [])
 * @method \Http\Promise\Promise listGatewaySlbAsync($arguments = [])
 * @method \Dew\Acs\Result getGatewayOption(array $arguments = [])
 * @method \Http\Promise\Promise getGatewayOptionAsync($arguments = [])
 * @method \Dew\Acs\Result listSecurityGroupRule(array $arguments = [])
 * @method \Http\Promise\Promise listSecurityGroupRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listSecurityGroup(array $arguments = [])
 * @method \Http\Promise\Promise listSecurityGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewaySpec(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewaySpecAsync($arguments = [])
 * @method \Dew\Acs\Result selectGatewaySlb(array $arguments = [])
 * @method \Http\Promise\Promise selectGatewaySlbAsync($arguments = [])
 * @method \Dew\Acs\Result addServiceSource(array $arguments = [])
 * @method \Http\Promise\Promise addServiceSourceAsync($arguments = [])
 * @method \Dew\Acs\Result addGatewayServiceVersion(array $arguments = [])
 * @method \Http\Promise\Promise addGatewayServiceVersionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteServiceSource(array $arguments = [])
 * @method \Http\Promise\Promise deleteServiceSourceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewayServiceVersion(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewayServiceVersionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewayService(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewayServiceAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayServiceTrafficPolicy(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayServiceTrafficPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayServiceVersion(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayServiceVersionAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceSource(array $arguments = [])
 * @method \Http\Promise\Promise listServiceSourceAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewayService(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayServiceAsync($arguments = [])
 * @method \Dew\Acs\Result getMseSource(array $arguments = [])
 * @method \Http\Promise\Promise getMseSourceAsync($arguments = [])
 * @method \Dew\Acs\Result getKubernetesSource(array $arguments = [])
 * @method \Http\Promise\Promise getKubernetesSourceAsync($arguments = [])
 * @method \Dew\Acs\Result getGatewayServiceDetail(array $arguments = [])
 * @method \Http\Promise\Promise getGatewayServiceDetailAsync($arguments = [])
 * @method \Dew\Acs\Result updateServiceSource(array $arguments = [])
 * @method \Http\Promise\Promise updateServiceSourceAsync($arguments = [])
 * @method \Dew\Acs\Result importServices(array $arguments = [])
 * @method \Http\Promise\Promise importServicesAsync($arguments = [])
 * @method \Dew\Acs\Result pullServices(array $arguments = [])
 * @method \Http\Promise\Promise pullServicesAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayServiceCheck(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayServiceCheckAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayRouteAuth(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayRouteAuthAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewayAuthConsumerResource(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayAuthConsumerResourceAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayAuthConsumer(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayAuthConsumerAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewayRouteOnAuth(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayRouteOnAuthAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewayAuthConsumer(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayAuthConsumerAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayAuthConsumerResource(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayAuthConsumerResourceAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayAuthConsumerStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayAuthConsumerStatusAsync($arguments = [])
 * @method \Dew\Acs\Result addGatewayAuthConsumer(array $arguments = [])
 * @method \Http\Promise\Promise addGatewayAuthConsumerAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewayAuthConsumerResource(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewayAuthConsumerResourceAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayAuthConsumerResourceStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayAuthConsumerResourceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewayAuthConsumer(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewayAuthConsumerAsync($arguments = [])
 * @method \Dew\Acs\Result getGatewayAuthConsumerDetail(array $arguments = [])
 * @method \Http\Promise\Promise getGatewayAuthConsumerDetailAsync($arguments = [])
 * @method \Dew\Acs\Result addBlackWhiteList(array $arguments = [])
 * @method \Http\Promise\Promise addBlackWhiteListAsync($arguments = [])
 * @method \Dew\Acs\Result updateBlackWhiteList(array $arguments = [])
 * @method \Http\Promise\Promise updateBlackWhiteListAsync($arguments = [])
 * @method \Dew\Acs\Result getBlackWhiteList(array $arguments = [])
 * @method \Http\Promise\Promise getBlackWhiteListAsync($arguments = [])
 * @method \Dew\Acs\Result addGatewayAuth(array $arguments = [])
 * @method \Http\Promise\Promise addGatewayAuthAsync($arguments = [])
 * @method \Dew\Acs\Result getGatewayAuthDetail(array $arguments = [])
 * @method \Http\Promise\Promise getGatewayAuthDetailAsync($arguments = [])
 * @method \Dew\Acs\Result addAuthResource(array $arguments = [])
 * @method \Http\Promise\Promise addAuthResourceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAuthResource(array $arguments = [])
 * @method \Http\Promise\Promise deleteAuthResourceAsync($arguments = [])
 * @method \Dew\Acs\Result addGatewayRoute(array $arguments = [])
 * @method \Http\Promise\Promise addGatewayRouteAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewayRoute(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewayRouteAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayRouteHTTPRewrite(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayRouteHTTPRewriteAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayRoute(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayRouteAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayRouteCORS(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayRouteCORSAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayRouteHeaderOp(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayRouteHeaderOpAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayRouteTimeout(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayRouteTimeoutAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayRouteRetry(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayRouteRetryAsync($arguments = [])
 * @method \Dew\Acs\Result getGatewayRouteDetail(array $arguments = [])
 * @method \Http\Promise\Promise getGatewayRouteDetailAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewayRoute(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayRouteAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayRouteWafStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayRouteWafStatusAsync($arguments = [])
 * @method \Dew\Acs\Result applyGatewayRoute(array $arguments = [])
 * @method \Http\Promise\Promise applyGatewayRouteAsync($arguments = [])
 * @method \Dew\Acs\Result offlineGatewayRoute(array $arguments = [])
 * @method \Http\Promise\Promise offlineGatewayRouteAsync($arguments = [])
 * @method \Dew\Acs\Result createGatewayFlowRule(array $arguments = [])
 * @method \Http\Promise\Promise createGatewayFlowRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewayFlowRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewayFlowRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayFlowRule(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayFlowRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewayFlowRule(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayFlowRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createGatewayCircuitBreakerRule(array $arguments = [])
 * @method \Http\Promise\Promise createGatewayCircuitBreakerRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewayCircuitBreakerRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewayCircuitBreakerRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayCircuitBreakerRule(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayCircuitBreakerRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewayCircuitBreakerRule(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayCircuitBreakerRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createGatewayIsolationRule(array $arguments = [])
 * @method \Http\Promise\Promise createGatewayIsolationRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewayIsolationRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewayIsolationRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayIsolationRule(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayIsolationRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewayIsolationRule(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayIsolationRuleAsync($arguments = [])
 * @method \Dew\Acs\Result queryNamespace(array $arguments = [])
 * @method \Http\Promise\Promise queryNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNamespace(array $arguments = [])
 * @method \Http\Promise\Promise deleteNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result getApplicationInstanceList(array $arguments = [])
 * @method \Http\Promise\Promise getApplicationInstanceListAsync($arguments = [])
 * @method \Dew\Acs\Result cloneSentinelRuleFromAhas(array $arguments = [])
 * @method \Http\Promise\Promise cloneSentinelRuleFromAhasAsync($arguments = [])
 * @method \Dew\Acs\Result enableProxyProtocol(array $arguments = [])
 * @method \Http\Promise\Promise enableProxyProtocolAsync($arguments = [])
 */
final class MseClient extends AcsClient
{
    //
}
