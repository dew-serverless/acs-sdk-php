<?php

declare(strict_types=1);

namespace Dew\Acs\Rds;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result transformDBInstancePayType(array $arguments = [])
 * @method \Http\Promise\Promise transformDBInstancePayTypeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstancePayType(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstancePayTypeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceAutoRenewalAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceAutoRenewalAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describePrice(array $arguments = [])
 * @method \Http\Promise\Promise describePriceAsync($arguments = [])
 * @method \Dew\Acs\Result describeRenewalPrice(array $arguments = [])
 * @method \Http\Promise\Promise describeRenewalPriceAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceAutoRenewalAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceAutoRenewalAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result renewInstance(array $arguments = [])
 * @method \Http\Promise\Promise renewInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstancePromoteActivity(array $arguments = []) {@deprecated 2014-08-15}
 * @method \Http\Promise\Promise describeDBInstancePromoteActivityAsync($arguments = []) {@deprecated 2014-08-15}
 * @method \Dew\Acs\Result createDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise createDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createDBInstanceForRebuild(array $arguments = [])
 * @method \Http\Promise\Promise createDBInstanceForRebuildAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result restartDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise restartDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result stopDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise stopDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result startDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise startDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceSpec(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceSpecAsync($arguments = [])
 * @method \Dew\Acs\Result destroyDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise destroyDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDasInstanceConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyDasInstanceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result migrateToOtherZone(array $arguments = [])
 * @method \Http\Promise\Promise migrateToOtherZoneAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceDescription(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceMaintainTime(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceMaintainTimeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise modifyResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result modifyHADiagnoseConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyHADiagnoseConfigAsync($arguments = [])
 * @method \Dew\Acs\Result modifyAccountSecurityPolicy(array $arguments = [])
 * @method \Http\Promise\Promise modifyAccountSecurityPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result describeSupportOnlineResizeDisk(array $arguments = [])
 * @method \Http\Promise\Promise describeSupportOnlineResizeDiskAsync($arguments = [])
 * @method \Dew\Acs\Result describeAvailableZones(array $arguments = [])
 * @method \Http\Promise\Promise describeAvailableZonesAsync($arguments = [])
 * @method \Dew\Acs\Result describeAvailableClasses(array $arguments = [])
 * @method \Http\Promise\Promise describeAvailableClassesAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result getDBInstanceTopology(array $arguments = [])
 * @method \Http\Promise\Promise getDBInstanceTopologyAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result listClasses(array $arguments = [])
 * @method \Http\Promise\Promise listClassesAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstancesByExpireTime(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstancesByExpireTimeAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result checkInstanceExist(array $arguments = [])
 * @method \Http\Promise\Promise checkInstanceExistAsync($arguments = [])
 * @method \Dew\Acs\Result describeHADiagnoseConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeHADiagnoseConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeAnalyticdbByPrimaryDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise describeAnalyticdbByPrimaryDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result checkCloudResourceAuthorized(array $arguments = [])
 * @method \Http\Promise\Promise checkCloudResourceAuthorizedAsync($arguments = [])
 * @method \Dew\Acs\Result releaseInstanceConnection(array $arguments = [])
 * @method \Http\Promise\Promise releaseInstanceConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceDetail(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceDetailAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstancesByPerformance(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstancesByPerformanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstancesForClone(array $arguments = []) {@deprecated 2014-08-15}
 * @method \Http\Promise\Promise describeDBInstancesForCloneAsync($arguments = []) {@deprecated 2014-08-15}
 * @method \Dew\Acs\Result describeDBInstancesAsCsv(array $arguments = []) {@deprecated 2014-08-15}
 * @method \Http\Promise\Promise describeDBInstancesAsCsvAsync($arguments = []) {@deprecated 2014-08-15}
 * @method \Dew\Acs\Result modifyDBInstanceAutoUpgradeMinorVersion(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceAutoUpgradeMinorVersionAsync($arguments = [])
 * @method \Dew\Acs\Result describeUpgradeMajorVersionPrecheckTask(array $arguments = [])
 * @method \Http\Promise\Promise describeUpgradeMajorVersionPrecheckTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describeUpgradeMajorVersionTasks(array $arguments = [])
 * @method \Http\Promise\Promise describeUpgradeMajorVersionTasksAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeDBInstanceEngineVersion(array $arguments = [])
 * @method \Http\Promise\Promise upgradeDBInstanceEngineVersionAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeDBInstanceKernelVersion(array $arguments = [])
 * @method \Http\Promise\Promise upgradeDBInstanceKernelVersionAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeDBInstanceMajorVersionPrecheck(array $arguments = [])
 * @method \Http\Promise\Promise upgradeDBInstanceMajorVersionPrecheckAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeDBInstanceMajorVersion(array $arguments = [])
 * @method \Http\Promise\Promise upgradeDBInstanceMajorVersionAsync($arguments = [])
 * @method \Dew\Acs\Result allocateInstancePublicConnection(array $arguments = [])
 * @method \Http\Promise\Promise allocateInstancePublicConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result releaseInstancePublicConnection(array $arguments = [])
 * @method \Http\Promise\Promise releaseInstancePublicConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceConnectionString(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceConnectionStringAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceNetworkExpireTime(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceNetworkExpireTimeAsync($arguments = [])
 * @method \Dew\Acs\Result switchDBInstanceNetType(array $arguments = [])
 * @method \Http\Promise\Promise switchDBInstanceNetTypeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceNetworkType(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceNetworkTypeAsync($arguments = [])
 * @method \Dew\Acs\Result switchDBInstanceVpc(array $arguments = [])
 * @method \Http\Promise\Promise switchDBInstanceVpcAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceNetInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceNetInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeVSwitches(array $arguments = [])
 * @method \Http\Promise\Promise describeVSwitchesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceHAConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceHAConfigAsync($arguments = [])
 * @method \Dew\Acs\Result modifyHASwitchConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyHASwitchConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceHAConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceHAConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeHASwitchConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeHASwitchConfigAsync($arguments = [])
 * @method \Dew\Acs\Result switchDBInstanceHA(array $arguments = [])
 * @method \Http\Promise\Promise switchDBInstanceHAAsync($arguments = [])
 * @method \Dew\Acs\Result modifyActionEventPolicy(array $arguments = [])
 * @method \Http\Promise\Promise modifyActionEventPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result describeEvents(array $arguments = [])
 * @method \Http\Promise\Promise describeEventsAsync($arguments = [])
 * @method \Dew\Acs\Result describeActionEventPolicy(array $arguments = [])
 * @method \Http\Promise\Promise describeActionEventPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result queryNotify(array $arguments = [])
 * @method \Http\Promise\Promise queryNotifyAsync($arguments = [])
 * @method \Dew\Acs\Result confirmNotify(array $arguments = [])
 * @method \Http\Promise\Promise confirmNotifyAsync($arguments = [])
 * @method \Dew\Acs\Result describeRdsResourceSettings(array $arguments = []) {@deprecated 2014-08-15}
 * @method \Http\Promise\Promise describeRdsResourceSettingsAsync($arguments = []) {@deprecated 2014-08-15}
 * @method \Dew\Acs\Result createAccount(array $arguments = [])
 * @method \Http\Promise\Promise createAccountAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccount(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccountAsync($arguments = [])
 * @method \Dew\Acs\Result modifyAccountCheckPolicy(array $arguments = [])
 * @method \Http\Promise\Promise modifyAccountCheckPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result modifyAccountDescription(array $arguments = [])
 * @method \Http\Promise\Promise modifyAccountDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyPGHbaConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyPGHbaConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeAccounts(array $arguments = [])
 * @method \Http\Promise\Promise describeAccountsAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceKeywords(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceKeywordsAsync($arguments = [])
 * @method \Dew\Acs\Result describePGHbaConfig(array $arguments = [])
 * @method \Http\Promise\Promise describePGHbaConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeModifyPGHbaConfigLog(array $arguments = [])
 * @method \Http\Promise\Promise describeModifyPGHbaConfigLogAsync($arguments = [])
 * @method \Dew\Acs\Result resetAccountPassword(array $arguments = [])
 * @method \Http\Promise\Promise resetAccountPasswordAsync($arguments = [])
 * @method \Dew\Acs\Result lockAccount(array $arguments = [])
 * @method \Http\Promise\Promise lockAccountAsync($arguments = [])
 * @method \Dew\Acs\Result unlockAccount(array $arguments = [])
 * @method \Http\Promise\Promise unlockAccountAsync($arguments = [])
 * @method \Dew\Acs\Result grantAccountPrivilege(array $arguments = [])
 * @method \Http\Promise\Promise grantAccountPrivilegeAsync($arguments = [])
 * @method \Dew\Acs\Result grantOperatorPermission(array $arguments = [])
 * @method \Http\Promise\Promise grantOperatorPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result revokeOperatorPermission(array $arguments = [])
 * @method \Http\Promise\Promise revokeOperatorPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result revokeAccountPrivilege(array $arguments = [])
 * @method \Http\Promise\Promise revokeAccountPrivilegeAsync($arguments = [])
 * @method \Dew\Acs\Result resetAccount(array $arguments = [])
 * @method \Http\Promise\Promise resetAccountAsync($arguments = [])
 * @method \Dew\Acs\Result checkAccountNameAvailable(array $arguments = [])
 * @method \Http\Promise\Promise checkAccountNameAvailableAsync($arguments = [])
 * @method \Dew\Acs\Result createDatabase(array $arguments = [])
 * @method \Http\Promise\Promise createDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDatabase(array $arguments = [])
 * @method \Http\Promise\Promise deleteDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result copyDatabase(array $arguments = [])
 * @method \Http\Promise\Promise copyDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBDescription(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDatabaseConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyDatabaseConfigAsync($arguments = [])
 * @method \Dew\Acs\Result modifyCollationTimeZone(array $arguments = [])
 * @method \Http\Promise\Promise modifyCollationTimeZoneAsync($arguments = [])
 * @method \Dew\Acs\Result describeDatabases(array $arguments = [])
 * @method \Http\Promise\Promise describeDatabasesAsync($arguments = [])
 * @method \Dew\Acs\Result describeCollationTimeZones(array $arguments = [])
 * @method \Http\Promise\Promise describeCollationTimeZonesAsync($arguments = [])
 * @method \Dew\Acs\Result describeCharacterSetName(array $arguments = [])
 * @method \Http\Promise\Promise describeCharacterSetNameAsync($arguments = [])
 * @method \Dew\Acs\Result copyDatabaseBetweenInstances(array $arguments = [])
 * @method \Http\Promise\Promise copyDatabaseBetweenInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result checkDBNameAvailable(array $arguments = [])
 * @method \Http\Promise\Promise checkDBNameAvailableAsync($arguments = [])
 * @method \Dew\Acs\Result createReadOnlyDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise createReadOnlyDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyReadonlyInstanceDelayReplicationTime(array $arguments = [])
 * @method \Http\Promise\Promise modifyReadonlyInstanceDelayReplicationTimeAsync($arguments = [])
 * @method \Dew\Acs\Result describeReadDBInstanceDelay(array $arguments = [])
 * @method \Http\Promise\Promise describeReadDBInstanceDelayAsync($arguments = [])
 * @method \Dew\Acs\Result createDBNodes(array $arguments = [])
 * @method \Http\Promise\Promise createDBNodesAsync($arguments = [])
 * @method \Dew\Acs\Result createDBInstanceEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise createDBInstanceEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result createDBInstanceEndpointAddress(array $arguments = [])
 * @method \Http\Promise\Promise createDBInstanceEndpointAddressAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDBNodes(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBNodesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDBInstanceEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBInstanceEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDBInstanceEndpointAddress(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBInstanceEndpointAddressAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBNode(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBNodeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceEndpointAddress(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceEndpointAddressAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceEndpoints(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceEndpointsAsync($arguments = [])
 * @method \Dew\Acs\Result createDBProxyEndpointAddress(array $arguments = [])
 * @method \Http\Promise\Promise createDBProxyEndpointAddressAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDBProxyEndpointAddress(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBProxyEndpointAddressAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBProxy(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBProxyAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeDBProxyInstanceKernelVersion(array $arguments = [])
 * @method \Http\Promise\Promise upgradeDBProxyInstanceKernelVersionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBProxyInstance(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBProxyInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBProxyEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBProxyEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBProxyEndpointAddress(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBProxyEndpointAddressAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDbProxyInstanceSsl(array $arguments = [])
 * @method \Http\Promise\Promise modifyDbProxyInstanceSslAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBProxy(array $arguments = [])
 * @method \Http\Promise\Promise describeDBProxyAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBProxyEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise describeDBProxyEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBProxyPerformance(array $arguments = [])
 * @method \Http\Promise\Promise describeDBProxyPerformanceAsync($arguments = [])
 * @method \Dew\Acs\Result getDbProxyInstanceSsl(array $arguments = [])
 * @method \Http\Promise\Promise getDbProxyInstanceSslAsync($arguments = [])
 * @method \Dew\Acs\Result modifyReadWriteSplittingConnection(array $arguments = [])
 * @method \Http\Promise\Promise modifyReadWriteSplittingConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceProxyConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceProxyConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result allocateReadWriteSplittingConnection(array $arguments = [])
 * @method \Http\Promise\Promise allocateReadWriteSplittingConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result releaseReadWriteSplittingConnection(array $arguments = [])
 * @method \Http\Promise\Promise releaseReadWriteSplittingConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result calculateDBInstanceWeight(array $arguments = [])
 * @method \Http\Promise\Promise calculateDBInstanceWeightAsync($arguments = [])
 * @method \Dew\Acs\Result attachWhitelistTemplateToInstance(array $arguments = [])
 * @method \Http\Promise\Promise attachWhitelistTemplateToInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createServiceLinkedRole(array $arguments = [])
 * @method \Http\Promise\Promise createServiceLinkedRoleAsync($arguments = [])
 * @method \Dew\Acs\Result detachWhitelistTemplateToInstance(array $arguments = [])
 * @method \Http\Promise\Promise detachWhitelistTemplateToInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyWhitelistTemplate(array $arguments = [])
 * @method \Http\Promise\Promise modifyWhitelistTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result describeSecurityGroupConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise describeSecurityGroupConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result modifySecurityGroupConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise modifySecurityGroupConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result createDBInstanceSecurityGroupRule(array $arguments = [])
 * @method \Http\Promise\Promise createDBInstanceSecurityGroupRuleAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceSecurityGroupRule(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceSecurityGroupRuleAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceSecurityGroupRule(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceSecurityGroupRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDBInstanceSecurityGroupRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBInstanceSecurityGroupRuleAsync($arguments = [])
 * @method \Dew\Acs\Result modifySecurityIps(array $arguments = [])
 * @method \Http\Promise\Promise modifySecurityIpsAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceSSL(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceSSLAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceTDE(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceTDEAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDTCSecurityIpHostsForSQLServer(array $arguments = [])
 * @method \Http\Promise\Promise modifyDTCSecurityIpHostsForSQLServerAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceDeletionProtection(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceDeletionProtectionAsync($arguments = [])
 * @method \Dew\Acs\Result describeWhitelistTemplateLinkedInstance(array $arguments = [])
 * @method \Http\Promise\Promise describeWhitelistTemplateLinkedInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceLinkedWhitelistTemplate(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceLinkedWhitelistTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result describeWhitelistTemplate(array $arguments = [])
 * @method \Http\Promise\Promise describeWhitelistTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result describeAllWhitelistTemplate(array $arguments = [])
 * @method \Http\Promise\Promise describeAllWhitelistTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceIPArrayList(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceIPArrayListAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceSSL(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceSSLAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceTDE(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceTDEAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceEncryptionKey(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceEncryptionKeyAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceIpHostname(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceIpHostnameAsync($arguments = [])
 * @method \Dew\Acs\Result describeDTCSecurityIpHostsForSQLServer(array $arguments = [])
 * @method \Http\Promise\Promise describeDTCSecurityIpHostsForSQLServerAsync($arguments = [])
 * @method \Dew\Acs\Result migrateSecurityIPMode(array $arguments = [])
 * @method \Http\Promise\Promise migrateSecurityIPModeAsync($arguments = [])
 * @method \Dew\Acs\Result describeSQLLogReportList(array $arguments = [])
 * @method \Http\Promise\Promise describeSQLLogReportListAsync($arguments = [])
 * @method \Dew\Acs\Result purgeDBInstanceLog(array $arguments = [])
 * @method \Http\Promise\Promise purgeDBInstanceLogAsync($arguments = [])
 * @method \Dew\Acs\Result describeSQLLogFiles(array $arguments = [])
 * @method \Http\Promise\Promise describeSQLLogFilesAsync($arguments = [])
 * @method \Dew\Acs\Result describeSlowLogs(array $arguments = [])
 * @method \Http\Promise\Promise describeSlowLogsAsync($arguments = [])
 * @method \Dew\Acs\Result describeSlowLogRecords(array $arguments = [])
 * @method \Http\Promise\Promise describeSlowLogRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result describeErrorLogs(array $arguments = [])
 * @method \Http\Promise\Promise describeErrorLogsAsync($arguments = [])
 * @method \Dew\Acs\Result modifySQLCollectorPolicy(array $arguments = [])
 * @method \Http\Promise\Promise modifySQLCollectorPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result modifySQLCollectorRetention(array $arguments = [])
 * @method \Http\Promise\Promise modifySQLCollectorRetentionAsync($arguments = [])
 * @method \Dew\Acs\Result describeSQLCollectorPolicy(array $arguments = [])
 * @method \Http\Promise\Promise describeSQLCollectorPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result describeSQLLogRecords(array $arguments = [])
 * @method \Http\Promise\Promise describeSQLLogRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result describeSQLCollectorRetention(array $arguments = [])
 * @method \Http\Promise\Promise describeSQLCollectorRetentionAsync($arguments = [])
 * @method \Dew\Acs\Result createBackup(array $arguments = [])
 * @method \Http\Promise\Promise createBackupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBackup(array $arguments = [])
 * @method \Http\Promise\Promise deleteBackupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBackupFile(array $arguments = [])
 * @method \Http\Promise\Promise deleteBackupFileAsync($arguments = [])
 * @method \Dew\Acs\Result modifyBackupPolicy(array $arguments = [])
 * @method \Http\Promise\Promise modifyBackupPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result describeBackups(array $arguments = [])
 * @method \Http\Promise\Promise describeBackupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDetachedBackups(array $arguments = [])
 * @method \Http\Promise\Promise describeDetachedBackupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeBackupPolicy(array $arguments = [])
 * @method \Http\Promise\Promise describeBackupPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result describeBackupTasks(array $arguments = [])
 * @method \Http\Promise\Promise describeBackupTasksAsync($arguments = [])
 * @method \Dew\Acs\Result describeBinlogFiles(array $arguments = [])
 * @method \Http\Promise\Promise describeBinlogFilesAsync($arguments = [])
 * @method \Dew\Acs\Result describeLogBackupFiles(array $arguments = [])
 * @method \Http\Promise\Promise describeLogBackupFilesAsync($arguments = [])
 * @method \Dew\Acs\Result describeBackupDatabase(array $arguments = [])
 * @method \Http\Promise\Promise describeBackupDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result createTempDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise createTempDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeLocalAvailableRecoveryTime(array $arguments = [])
 * @method \Http\Promise\Promise describeLocalAvailableRecoveryTimeAsync($arguments = [])
 * @method \Dew\Acs\Result describeMetaList(array $arguments = [])
 * @method \Http\Promise\Promise describeMetaListAsync($arguments = [])
 * @method \Dew\Acs\Result recoveryDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise recoveryDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result cloneDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise cloneDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result restoreTable(array $arguments = [])
 * @method \Http\Promise\Promise restoreTableAsync($arguments = [])
 * @method \Dew\Acs\Result createDdrInstance(array $arguments = [])
 * @method \Http\Promise\Promise createDdrInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceCrossBackupPolicy(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceCrossBackupPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceCrossBackupPolicy(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceCrossBackupPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result describeCrossBackupMetaList(array $arguments = [])
 * @method \Http\Promise\Promise describeCrossBackupMetaListAsync($arguments = [])
 * @method \Dew\Acs\Result describeCrossRegionBackups(array $arguments = [])
 * @method \Http\Promise\Promise describeCrossRegionBackupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeCrossRegionLogBackupFiles(array $arguments = [])
 * @method \Http\Promise\Promise describeCrossRegionLogBackupFilesAsync($arguments = [])
 * @method \Dew\Acs\Result describeAvailableCrossRegion(array $arguments = [])
 * @method \Http\Promise\Promise describeAvailableCrossRegionAsync($arguments = [])
 * @method \Dew\Acs\Result describeAvailableRecoveryTime(array $arguments = [])
 * @method \Http\Promise\Promise describeAvailableRecoveryTimeAsync($arguments = [])
 * @method \Dew\Acs\Result describeCrossRegionBackupDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise describeCrossRegionBackupDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result checkCreateDdrDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise checkCreateDdrDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result restoreDdrTable(array $arguments = [])
 * @method \Http\Promise\Promise restoreDdrTableAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceMonitor(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceMetrics(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceMetricsAsync($arguments = [])
 * @method \Dew\Acs\Result describeResourceUsage(array $arguments = [])
 * @method \Http\Promise\Promise describeResourceUsageAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstancePerformance(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstancePerformanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceMonitor(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result describeAvailableMetrics(array $arguments = [])
 * @method \Http\Promise\Promise describeAvailableMetricsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceMetrics(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceMetricsAsync($arguments = [])
 * @method \Dew\Acs\Result createParameterGroup(array $arguments = [])
 * @method \Http\Promise\Promise createParameterGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteParameterGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteParameterGroupAsync($arguments = [])
 * @method \Dew\Acs\Result modifyParameter(array $arguments = [])
 * @method \Http\Promise\Promise modifyParameterAsync($arguments = [])
 * @method \Dew\Acs\Result modifyParameterGroup(array $arguments = [])
 * @method \Http\Promise\Promise modifyParameterGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeParameters(array $arguments = [])
 * @method \Http\Promise\Promise describeParametersAsync($arguments = [])
 * @method \Dew\Acs\Result describeModifyParameterLog(array $arguments = [])
 * @method \Http\Promise\Promise describeModifyParameterLogAsync($arguments = [])
 * @method \Dew\Acs\Result describeParameterTemplates(array $arguments = [])
 * @method \Http\Promise\Promise describeParameterTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result describeParameterGroups(array $arguments = [])
 * @method \Http\Promise\Promise describeParameterGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeParameterGroup(array $arguments = [])
 * @method \Http\Promise\Promise describeParameterGroupAsync($arguments = [])
 * @method \Dew\Acs\Result cloneParameterGroup(array $arguments = [])
 * @method \Http\Promise\Promise cloneParameterGroupAsync($arguments = [])
 * @method \Dew\Acs\Result descibeImportsFromDatabase(array $arguments = [])
 * @method \Http\Promise\Promise descibeImportsFromDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result modifyActiveOperationTasks(array $arguments = [])
 * @method \Http\Promise\Promise modifyActiveOperationTasksAsync($arguments = [])
 * @method \Dew\Acs\Result describeActiveOperationTasks(array $arguments = [])
 * @method \Http\Promise\Promise describeActiveOperationTasksAsync($arguments = [])
 * @method \Dew\Acs\Result cancelActiveOperationTasks(array $arguments = [])
 * @method \Http\Promise\Promise cancelActiveOperationTasksAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserBackupFile(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserBackupFileAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserBackupFile(array $arguments = [])
 * @method \Http\Promise\Promise updateUserBackupFileAsync($arguments = [])
 * @method \Dew\Acs\Result listUserBackupFiles(array $arguments = [])
 * @method \Http\Promise\Promise listUserBackupFilesAsync($arguments = [])
 * @method \Dew\Acs\Result importUserBackupFile(array $arguments = [])
 * @method \Http\Promise\Promise importUserBackupFileAsync($arguments = [])
 * @method \Dew\Acs\Result createMigrateTask(array $arguments = [])
 * @method \Http\Promise\Promise createMigrateTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createOnlineDatabaseTask(array $arguments = [])
 * @method \Http\Promise\Promise createOnlineDatabaseTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describeMigrateTasks(array $arguments = [])
 * @method \Http\Promise\Promise describeMigrateTasksAsync($arguments = [])
 * @method \Dew\Acs\Result describeOssDownloads(array $arguments = [])
 * @method \Http\Promise\Promise describeOssDownloadsAsync($arguments = [])
 * @method \Dew\Acs\Result describeMigrateTaskById(array $arguments = [])
 * @method \Http\Promise\Promise describeMigrateTaskByIdAsync($arguments = [])
 * @method \Dew\Acs\Result terminateMigrateTask(array $arguments = [])
 * @method \Http\Promise\Promise terminateMigrateTaskAsync($arguments = [])
 * @method \Dew\Acs\Result deleteADSetting(array $arguments = [])
 * @method \Http\Promise\Promise deleteADSettingAsync($arguments = [])
 * @method \Dew\Acs\Result modifyADInfo(array $arguments = [])
 * @method \Http\Promise\Promise modifyADInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeADInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeADInfoAsync($arguments = [])
 * @method \Dew\Acs\Result createCloudMigrationPrecheckTask(array $arguments = [])
 * @method \Http\Promise\Promise createCloudMigrationPrecheckTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createCloudMigrationTask(array $arguments = [])
 * @method \Http\Promise\Promise createCloudMigrationTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describeCloudMigrationPrecheckResult(array $arguments = [])
 * @method \Http\Promise\Promise describeCloudMigrationPrecheckResultAsync($arguments = [])
 * @method \Dew\Acs\Result describeCloudMigrationResult(array $arguments = [])
 * @method \Http\Promise\Promise describeCloudMigrationResultAsync($arguments = [])
 * @method \Dew\Acs\Result activateMigrationTargetInstance(array $arguments = [])
 * @method \Http\Promise\Promise activateMigrationTargetInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createGADInstance(array $arguments = [])
 * @method \Http\Promise\Promise createGADInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createGadInstanceMember(array $arguments = [])
 * @method \Http\Promise\Promise createGadInstanceMemberAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGadInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteGadInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result detachGadInstanceMember(array $arguments = [])
 * @method \Http\Promise\Promise detachGadInstanceMemberAsync($arguments = [])
 * @method \Dew\Acs\Result describeGadInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeGadInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result receiveDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise receiveDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result addTagsToResource(array $arguments = [])
 * @method \Http\Promise\Promise addTagsToResourceAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result removeTagsFromResource(array $arguments = [])
 * @method \Http\Promise\Promise removeTagsFromResourceAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result describeTags(array $arguments = [])
 * @method \Http\Promise\Promise describeTagsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceByTags(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceByTagsAsync($arguments = [])
 * @method \Dew\Acs\Result createPostgresExtensions(array $arguments = [])
 * @method \Http\Promise\Promise createPostgresExtensionsAsync($arguments = [])
 * @method \Dew\Acs\Result deletePostgresExtensions(array $arguments = [])
 * @method \Http\Promise\Promise deletePostgresExtensionsAsync($arguments = [])
 * @method \Dew\Acs\Result updatePostgresExtensions(array $arguments = [])
 * @method \Http\Promise\Promise updatePostgresExtensionsAsync($arguments = [])
 * @method \Dew\Acs\Result describePostgresExtensions(array $arguments = [])
 * @method \Http\Promise\Promise describePostgresExtensionsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSlot(array $arguments = [])
 * @method \Http\Promise\Promise deleteSlotAsync($arguments = [])
 * @method \Dew\Acs\Result describeSlots(array $arguments = [])
 * @method \Http\Promise\Promise describeSlotsAsync($arguments = [])
 * @method \Dew\Acs\Result createReplicationLink(array $arguments = [])
 * @method \Http\Promise\Promise createReplicationLinkAsync($arguments = [])
 * @method \Dew\Acs\Result describeReplicationLinkLogs(array $arguments = [])
 * @method \Http\Promise\Promise describeReplicationLinkLogsAsync($arguments = [])
 * @method \Dew\Acs\Result rebuildReplicationLink(array $arguments = [])
 * @method \Http\Promise\Promise rebuildReplicationLinkAsync($arguments = [])
 * @method \Dew\Acs\Result switchReplicationLink(array $arguments = [])
 * @method \Http\Promise\Promise switchReplicationLinkAsync($arguments = [])
 * @method \Dew\Acs\Result deleteReplicationLink(array $arguments = [])
 * @method \Http\Promise\Promise deleteReplicationLinkAsync($arguments = [])
 * @method \Dew\Acs\Result createSecret(array $arguments = [])
 * @method \Http\Promise\Promise createSecretAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSecret(array $arguments = [])
 * @method \Http\Promise\Promise deleteSecretAsync($arguments = [])
 * @method \Dew\Acs\Result describeSecrets(array $arguments = [])
 * @method \Http\Promise\Promise describeSecretsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDedicatedHostGroups(array $arguments = [])
 * @method \Http\Promise\Promise describeDedicatedHostGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDedicatedHosts(array $arguments = [])
 * @method \Http\Promise\Promise describeDedicatedHostsAsync($arguments = [])
 * @method \Dew\Acs\Result migrateDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise migrateDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result rebuildDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise rebuildDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result migrateConnectionToOtherZone(array $arguments = [])
 * @method \Http\Promise\Promise migrateConnectionToOtherZoneAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceDelayedReplicationTime(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceDelayedReplicationTimeAsync($arguments = [])
 * @method \Dew\Acs\Result checkServiceLinkedRole(array $arguments = [])
 * @method \Http\Promise\Promise checkServiceLinkedRoleAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBMiniEngineVersions(array $arguments = [])
 * @method \Http\Promise\Promise describeDBMiniEngineVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegionInfos(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionInfosAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceNetInfoForChannel(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceNetInfoForChannelAsync($arguments = [])
 * @method \Dew\Acs\Result describeHostWebShell(array $arguments = [])
 * @method \Http\Promise\Promise describeHostWebShellAsync($arguments = [])
 * @method \Dew\Acs\Result describeClassDetails(array $arguments = [])
 * @method \Http\Promise\Promise describeClassDetailsAsync($arguments = [])
 * @method \Dew\Acs\Result describeKmsAssociateResources(array $arguments = [])
 * @method \Http\Promise\Promise describeKmsAssociateResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result describeRCSnapshots(array $arguments = [])
 * @method \Http\Promise\Promise describeRCSnapshotsAsync($arguments = [])
 * @method \Dew\Acs\Result detachRCDisk(array $arguments = [])
 * @method \Http\Promise\Promise detachRCDiskAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRCSnapshot(array $arguments = [])
 * @method \Http\Promise\Promise deleteRCSnapshotAsync($arguments = [])
 * @method \Dew\Acs\Result createRCSnapshot(array $arguments = [])
 * @method \Http\Promise\Promise createRCSnapshotAsync($arguments = [])
 * @method \Dew\Acs\Result describeRCDisks(array $arguments = [])
 * @method \Http\Promise\Promise describeRCDisksAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRCDisk(array $arguments = [])
 * @method \Http\Promise\Promise deleteRCDiskAsync($arguments = [])
 * @method \Dew\Acs\Result attachRCDisk(array $arguments = [])
 * @method \Http\Promise\Promise attachRCDiskAsync($arguments = [])
 * @method \Dew\Acs\Result describeRCClusterConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeRCClusterConfigAsync($arguments = [])
 * @method \Dew\Acs\Result attachRCInstances(array $arguments = [])
 * @method \Http\Promise\Promise attachRCInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result describeRCClusterNodes(array $arguments = [])
 * @method \Http\Promise\Promise describeRCClusterNodesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRCClusterNodes(array $arguments = [])
 * @method \Http\Promise\Promise deleteRCClusterNodesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceReplicationSwitch(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceReplicationSwitchAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceReplication(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceReplicationAsync($arguments = [])
 * @method \Dew\Acs\Result migrateDBNodes(array $arguments = [])
 * @method \Http\Promise\Promise migrateDBNodesAsync($arguments = [])
 * @method \Dew\Acs\Result switchOverMajorVersionUpgrade(array $arguments = [])
 * @method \Http\Promise\Promise switchOverMajorVersionUpgradeAsync($arguments = [])
 * @method \Dew\Acs\Result associateEipAddressWithRCInstance(array $arguments = [])
 * @method \Http\Promise\Promise associateEipAddressWithRCInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeRCInstanceIpAddress(array $arguments = [])
 * @method \Http\Promise\Promise describeRCInstanceIpAddressAsync($arguments = [])
 * @method \Dew\Acs\Result describeRCInstanceDdosCount(array $arguments = [])
 * @method \Http\Promise\Promise describeRCInstanceDdosCountAsync($arguments = [])
 * @method \Dew\Acs\Result describeHistoryEventsStat(array $arguments = [])
 * @method \Http\Promise\Promise describeHistoryEventsStatAsync($arguments = [])
 * @method \Dew\Acs\Result describeHistoryEvents(array $arguments = [])
 * @method \Http\Promise\Promise describeHistoryEventsAsync($arguments = [])
 * @method \Dew\Acs\Result modifyEventInfo(array $arguments = [])
 * @method \Http\Promise\Promise modifyEventInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeHistoryTasksStat(array $arguments = [])
 * @method \Http\Promise\Promise describeHistoryTasksStatAsync($arguments = [])
 * @method \Dew\Acs\Result describeHistoryTasks(array $arguments = [])
 * @method \Http\Promise\Promise describeHistoryTasksAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTaskInfo(array $arguments = [])
 * @method \Http\Promise\Promise modifyTaskInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeTasks(array $arguments = [])
 * @method \Http\Promise\Promise describeTasksAsync($arguments = [])
 * @method \Dew\Acs\Result createYouhuiForOrder(array $arguments = [])
 * @method \Http\Promise\Promise createYouhuiForOrderAsync($arguments = [])
 * @method \Dew\Acs\Result describeCurrentModifyOrder(array $arguments = [])
 * @method \Http\Promise\Promise describeCurrentModifyOrderAsync($arguments = [])
 * @method \Dew\Acs\Result describeCustinsResourceInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeCustinsResourceInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceConnectivity(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceConnectivityAsync($arguments = [])
 * @method \Dew\Acs\Result describeHostGroupElasticStrategyParameters(array $arguments = [])
 * @method \Http\Promise\Promise describeHostGroupElasticStrategyParametersAsync($arguments = [])
 * @method \Dew\Acs\Result describeMarketingActivity(array $arguments = [])
 * @method \Http\Promise\Promise describeMarketingActivityAsync($arguments = [])
 * @method \Dew\Acs\Result describeQuickSaleConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeQuickSaleConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeResourceDetails(array $arguments = [])
 * @method \Http\Promise\Promise describeResourceDetailsAsync($arguments = [])
 * @method \Dew\Acs\Result evaluateLocalExtendDisk(array $arguments = [])
 * @method \Http\Promise\Promise evaluateLocalExtendDiskAsync($arguments = [])
 * @method \Dew\Acs\Result modifyCustinsResource(array $arguments = [])
 * @method \Http\Promise\Promise modifyCustinsResourceAsync($arguments = [])
 * @method \Dew\Acs\Result preCheckCreateOrderForDeleteDBNodes(array $arguments = [])
 * @method \Http\Promise\Promise preCheckCreateOrderForDeleteDBNodesAsync($arguments = [])
 * @method \Dew\Acs\Result queryRecommendByCode(array $arguments = [])
 * @method \Http\Promise\Promise queryRecommendByCodeAsync($arguments = [])
 * @method \Dew\Acs\Result createOrderForDeleteDBNodes(array $arguments = [])
 * @method \Http\Promise\Promise createOrderForDeleteDBNodesAsync($arguments = [])
 * @method \Dew\Acs\Result createDiagnosticReport(array $arguments = [])
 * @method \Http\Promise\Promise createDiagnosticReportAsync($arguments = [])
 * @method \Dew\Acs\Result describeDiagnosticReportList(array $arguments = []) {@deprecated 2014-08-15}
 * @method \Http\Promise\Promise describeDiagnosticReportListAsync($arguments = []) {@deprecated 2014-08-15}
 * @method \Dew\Acs\Result modifyComputeBurstConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyComputeBurstConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeComputeBurstConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeComputeBurstConfigAsync($arguments = [])
 */
final class RdsClient extends AcsClient
{
    //
}
