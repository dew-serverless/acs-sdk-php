<?php

declare(strict_types=1);

namespace Dew\Acs\Servicemesh;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result describeMetadata(array $arguments = [])
 * @method \Http\Promise\Promise describeMetadataAsync($arguments = [])
 * @method \Dew\Acs\Result createServiceMesh(array $arguments = [])
 * @method \Http\Promise\Promise createServiceMeshAsync($arguments = [])
 * @method \Dew\Acs\Result deleteServiceMesh(array $arguments = [])
 * @method \Http\Promise\Promise deleteServiceMeshAsync($arguments = [])
 * @method \Dew\Acs\Result modifyServiceMeshName(array $arguments = [])
 * @method \Http\Promise\Promise modifyServiceMeshNameAsync($arguments = [])
 * @method \Dew\Acs\Result updateMeshFeature(array $arguments = [])
 * @method \Http\Promise\Promise updateMeshFeatureAsync($arguments = [])
 * @method \Dew\Acs\Result revokeKubeconfig(array $arguments = [])
 * @method \Http\Promise\Promise revokeKubeconfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeServiceMeshes(array $arguments = [])
 * @method \Http\Promise\Promise describeServiceMeshesAsync($arguments = [])
 * @method \Dew\Acs\Result describeServiceMeshDetail(array $arguments = [])
 * @method \Http\Promise\Promise describeServiceMeshDetailAsync($arguments = [])
 * @method \Dew\Acs\Result describeServiceMeshKubeconfig(array $arguments = [])
 * @method \Http\Promise\Promise describeServiceMeshKubeconfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeServiceMeshAdditionalStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeServiceMeshAdditionalStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeVersions(array $arguments = [])
 * @method \Http\Promise\Promise describeVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result reActivateAudit(array $arguments = [])
 * @method \Http\Promise\Promise reActivateAuditAsync($arguments = [])
 * @method \Dew\Acs\Result describeNodesInstanceType(array $arguments = [])
 * @method \Http\Promise\Promise describeNodesInstanceTypeAsync($arguments = [])
 * @method \Dew\Acs\Result describeCCMVersion(array $arguments = [])
 * @method \Http\Promise\Promise describeCCMVersionAsync($arguments = [])
 * @method \Dew\Acs\Result getCaCert(array $arguments = [])
 * @method \Http\Promise\Promise getCaCertAsync($arguments = [])
 * @method \Dew\Acs\Result grantUserPermissions(array $arguments = [])
 * @method \Http\Promise\Promise grantUserPermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeUserPermissions(array $arguments = [])
 * @method \Http\Promise\Promise describeUserPermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeUsersWithPermissions(array $arguments = [])
 * @method \Http\Promise\Promise describeUsersWithPermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result updateMeshCRAggregation(array $arguments = [])
 * @method \Http\Promise\Promise updateMeshCRAggregationAsync($arguments = [])
 * @method \Dew\Acs\Result modifyApiServerEipResource(array $arguments = [])
 * @method \Http\Promise\Promise modifyApiServerEipResourceAsync($arguments = [])
 * @method \Dew\Acs\Result describeVSwitches(array $arguments = [])
 * @method \Http\Promise\Promise describeVSwitchesAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpcs(array $arguments = [])
 * @method \Http\Promise\Promise describeVpcsAsync($arguments = [])
 * @method \Dew\Acs\Result describeCens(array $arguments = [])
 * @method \Http\Promise\Promise describeCensAsync($arguments = [])
 * @method \Dew\Acs\Result describeCrTemplates(array $arguments = [])
 * @method \Http\Promise\Promise describeCrTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result describeEipResources(array $arguments = [])
 * @method \Http\Promise\Promise describeEipResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result updateNamespaceScopeSidecarConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateNamespaceScopeSidecarConfigAsync($arguments = [])
 * @method \Dew\Acs\Result updateIstioInjectionConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateIstioInjectionConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeServiceMeshProxyStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeServiceMeshProxyStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeNamespaceScopeSidecarConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeNamespaceScopeSidecarConfigAsync($arguments = [])
 * @method \Dew\Acs\Result addClusterIntoServiceMesh(array $arguments = [])
 * @method \Http\Promise\Promise addClusterIntoServiceMeshAsync($arguments = [])
 * @method \Dew\Acs\Result removeClusterFromServiceMesh(array $arguments = [])
 * @method \Http\Promise\Promise removeClusterFromServiceMeshAsync($arguments = [])
 * @method \Dew\Acs\Result updateASMNamespaceFromGuestCluster(array $arguments = [])
 * @method \Http\Promise\Promise updateASMNamespaceFromGuestClusterAsync($arguments = [])
 * @method \Dew\Acs\Result describeServiceMeshClusters(array $arguments = [])
 * @method \Http\Promise\Promise describeServiceMeshClustersAsync($arguments = [])
 * @method \Dew\Acs\Result describeClustersInServiceMesh(array $arguments = [])
 * @method \Http\Promise\Promise describeClustersInServiceMeshAsync($arguments = [])
 * @method \Dew\Acs\Result describeGuestClusterPods(array $arguments = [])
 * @method \Http\Promise\Promise describeGuestClusterPodsAsync($arguments = [])
 * @method \Dew\Acs\Result describeGuestClusterNamespaces(array $arguments = [])
 * @method \Http\Promise\Promise describeGuestClusterNamespacesAsync($arguments = [])
 * @method \Dew\Acs\Result describeReusableSlb(array $arguments = [])
 * @method \Http\Promise\Promise describeReusableSlbAsync($arguments = [])
 * @method \Dew\Acs\Result getRegisteredServiceEndpoints(array $arguments = [])
 * @method \Http\Promise\Promise getRegisteredServiceEndpointsAsync($arguments = [])
 * @method \Dew\Acs\Result getRegisteredServiceNamespaces(array $arguments = [])
 * @method \Http\Promise\Promise getRegisteredServiceNamespacesAsync($arguments = [])
 * @method \Dew\Acs\Result createASMGateway(array $arguments = [])
 * @method \Http\Promise\Promise createASMGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result createIstioGatewayRoutes(array $arguments = [])
 * @method \Http\Promise\Promise createIstioGatewayRoutesAsync($arguments = [])
 * @method \Dew\Acs\Result createGatewaySecret(array $arguments = [])
 * @method \Http\Promise\Promise createGatewaySecretAsync($arguments = [])
 * @method \Dew\Acs\Result createIstioGatewayDomains(array $arguments = [])
 * @method \Http\Promise\Promise createIstioGatewayDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewayRoute(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewayRouteAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGatewaySecret(array $arguments = [])
 * @method \Http\Promise\Promise deleteGatewaySecretAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIstioGatewayDomains(array $arguments = [])
 * @method \Http\Promise\Promise deleteIstioGatewayDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result updateASMGateway(array $arguments = [])
 * @method \Http\Promise\Promise updateASMGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result updateASMGatewayImportedServices(array $arguments = [])
 * @method \Http\Promise\Promise updateASMGatewayImportedServicesAsync($arguments = [])
 * @method \Dew\Acs\Result updateIstioGatewayRoutes(array $arguments = [])
 * @method \Http\Promise\Promise updateIstioGatewayRoutesAsync($arguments = [])
 * @method \Dew\Acs\Result updateIstioRouteAdditionalStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateIstioRouteAdditionalStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeImportedServicesDetail(array $arguments = [])
 * @method \Http\Promise\Promise describeImportedServicesDetailAsync($arguments = [])
 * @method \Dew\Acs\Result describeASMGatewayImportedServices(array $arguments = [])
 * @method \Http\Promise\Promise describeASMGatewayImportedServicesAsync($arguments = [])
 * @method \Dew\Acs\Result describeIstioGatewayRouteDetail(array $arguments = [])
 * @method \Http\Promise\Promise describeIstioGatewayRouteDetailAsync($arguments = [])
 * @method \Dew\Acs\Result describeGatewaySecretDetails(array $arguments = [])
 * @method \Http\Promise\Promise describeGatewaySecretDetailsAsync($arguments = [])
 * @method \Dew\Acs\Result describeIstioGatewayDomains(array $arguments = [])
 * @method \Http\Promise\Promise describeIstioGatewayDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result describeIstioGatewayRoutes(array $arguments = [])
 * @method \Http\Promise\Promise describeIstioGatewayRoutesAsync($arguments = [])
 * @method \Dew\Acs\Result describeClusterGrafana(array $arguments = [])
 * @method \Http\Promise\Promise describeClusterGrafanaAsync($arguments = [])
 * @method \Dew\Acs\Result describeClusterPrometheus(array $arguments = [])
 * @method \Http\Promise\Promise describeClusterPrometheusAsync($arguments = [])
 * @method \Dew\Acs\Result describeServiceMeshLogs(array $arguments = [])
 * @method \Http\Promise\Promise describeServiceMeshLogsAsync($arguments = [])
 * @method \Dew\Acs\Result describeGuestClusterAccessLogDashboards(array $arguments = [])
 * @method \Http\Promise\Promise describeGuestClusterAccessLogDashboardsAsync($arguments = [])
 * @method \Dew\Acs\Result getGrafanaDashboardUrl(array $arguments = [])
 * @method \Http\Promise\Promise getGrafanaDashboardUrlAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeMeshVersion(array $arguments = [])
 * @method \Http\Promise\Promise upgradeMeshVersionAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeMeshEditionPartially(array $arguments = [])
 * @method \Http\Promise\Promise upgradeMeshEditionPartiallyAsync($arguments = [])
 * @method \Dew\Acs\Result describeUpgradeVersion(array $arguments = [])
 * @method \Http\Promise\Promise describeUpgradeVersionAsync($arguments = [])
 * @method \Dew\Acs\Result describeServiceMeshUpgradeStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeServiceMeshUpgradeStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createSwimLane(array $arguments = [])
 * @method \Http\Promise\Promise createSwimLaneAsync($arguments = [])
 * @method \Dew\Acs\Result createSwimLaneGroup(array $arguments = [])
 * @method \Http\Promise\Promise createSwimLaneGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSwimLane(array $arguments = [])
 * @method \Http\Promise\Promise deleteSwimLaneAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSwimLaneGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteSwimLaneGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateSwimLane(array $arguments = [])
 * @method \Http\Promise\Promise updateSwimLaneAsync($arguments = [])
 * @method \Dew\Acs\Result updateSwimLaneGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateSwimLaneGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getSwimLaneDetail(array $arguments = [])
 * @method \Http\Promise\Promise getSwimLaneDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getSwimLaneGroupList(array $arguments = [])
 * @method \Http\Promise\Promise getSwimLaneGroupListAsync($arguments = [])
 * @method \Dew\Acs\Result getSwimLaneList(array $arguments = [])
 * @method \Http\Promise\Promise getSwimLaneListAsync($arguments = [])
 * @method \Dew\Acs\Result getDeploymentBySelector(array $arguments = [])
 * @method \Http\Promise\Promise getDeploymentBySelectorAsync($arguments = [])
 * @method \Dew\Acs\Result updateControlPlaneLogConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateControlPlaneLogConfigAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result updateWaypoint(array $arguments = [])
 * @method \Http\Promise\Promise updateWaypointAsync($arguments = [])
 * @method \Dew\Acs\Result createWaypoint(array $arguments = [])
 * @method \Http\Promise\Promise createWaypointAsync($arguments = [])
 * @method \Dew\Acs\Result deleteWaypoint(array $arguments = [])
 * @method \Http\Promise\Promise deleteWaypointAsync($arguments = [])
 * @method \Dew\Acs\Result listWaypoints(array $arguments = [])
 * @method \Http\Promise\Promise listWaypointsAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceAccounts(array $arguments = [])
 * @method \Http\Promise\Promise listServiceAccountsAsync($arguments = [])
 * @method \Dew\Acs\Result addVMIntoServiceMesh(array $arguments = []) {@deprecated 2020-01-11}
 * @method \Http\Promise\Promise addVMIntoServiceMeshAsync($arguments = []) {@deprecated 2020-01-11}
 * @method \Dew\Acs\Result removeVMFromServiceMesh(array $arguments = []) {@deprecated 2020-01-11}
 * @method \Http\Promise\Promise removeVMFromServiceMeshAsync($arguments = []) {@deprecated 2020-01-11}
 * @method \Dew\Acs\Result getVmMeta(array $arguments = []) {@deprecated 2020-01-11}
 * @method \Http\Promise\Promise getVmMetaAsync($arguments = []) {@deprecated 2020-01-11}
 * @method \Dew\Acs\Result getVmAppMeshInfo(array $arguments = []) {@deprecated 2020-01-11}
 * @method \Http\Promise\Promise getVmAppMeshInfoAsync($arguments = []) {@deprecated 2020-01-11}
 * @method \Dew\Acs\Result describeVMsInServiceMesh(array $arguments = []) {@deprecated 2020-01-11}
 * @method \Http\Promise\Promise describeVMsInServiceMeshAsync($arguments = []) {@deprecated 2020-01-11}
 * @method \Dew\Acs\Result describeServiceMeshVMs(array $arguments = []) {@deprecated 2020-01-11}
 * @method \Http\Promise\Promise describeServiceMeshVMsAsync($arguments = []) {@deprecated 2020-01-11}
 * @method \Dew\Acs\Result addVmAppToMesh(array $arguments = [])
 * @method \Http\Promise\Promise addVmAppToMeshAsync($arguments = [])
 * @method \Dew\Acs\Result removeVmAppFromMesh(array $arguments = [])
 * @method \Http\Promise\Promise removeVmAppFromMeshAsync($arguments = [])
 * @method \Dew\Acs\Result updateMeshMultiClusterNetwork(array $arguments = [])
 * @method \Http\Promise\Promise updateMeshMultiClusterNetworkAsync($arguments = [])
 * @method \Dew\Acs\Result describeMeshMultiClusterNetwork(array $arguments = [])
 * @method \Http\Promise\Promise describeMeshMultiClusterNetworkAsync($arguments = [])
 * @method \Dew\Acs\Result modifyPilotEipResource(array $arguments = [])
 * @method \Http\Promise\Promise modifyPilotEipResourceAsync($arguments = [])
 */
final class ServicemeshClient extends AcsClient
{
    //
}
