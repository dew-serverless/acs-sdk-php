<?php

declare(strict_types=1);

namespace Dew\Acs\Domain;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result saveSingleTaskForCreatingOrderActivate(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForCreatingOrderActivateAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForCreatingOrderActivate(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForCreatingOrderActivateAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForCreatingOrderRenew(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForCreatingOrderRenewAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForCreatingOrderRenew(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForCreatingOrderRenewAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForCreatingOrderRedeem(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForCreatingOrderRedeemAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForCreatingOrderRedeem(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForCreatingOrderRedeemAsync($arguments = [])
 * @method \Dew\Acs\Result checkDomain(array $arguments = [])
 * @method \Http\Promise\Promise checkDomainAsync($arguments = [])
 * @method \Dew\Acs\Result fuzzyMatchDomainSensitiveWord(array $arguments = [])
 * @method \Http\Promise\Promise fuzzyMatchDomainSensitiveWordAsync($arguments = [])
 * @method \Dew\Acs\Result batchFuzzyMatchDomainSensitiveWord(array $arguments = [])
 * @method \Http\Promise\Promise batchFuzzyMatchDomainSensitiveWordAsync($arguments = [])
 * @method \Dew\Acs\Result setupDomainAutoRenew(array $arguments = [])
 * @method \Http\Promise\Promise setupDomainAutoRenewAsync($arguments = [])
 * @method \Dew\Acs\Result saveRegistrantProfile(array $arguments = [])
 * @method \Http\Promise\Promise saveRegistrantProfileAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRegistrantProfile(array $arguments = [])
 * @method \Http\Promise\Promise deleteRegistrantProfileAsync($arguments = [])
 * @method \Dew\Acs\Result deleteContactTemplates(array $arguments = [])
 * @method \Http\Promise\Promise deleteContactTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result registrantProfileRealNameVerification(array $arguments = [])
 * @method \Http\Promise\Promise registrantProfileRealNameVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result setDefaultRegistrantProfile(array $arguments = [])
 * @method \Http\Promise\Promise setDefaultRegistrantProfileAsync($arguments = [])
 * @method \Dew\Acs\Result queryDomainAdminDivision(array $arguments = [])
 * @method \Http\Promise\Promise queryDomainAdminDivisionAsync($arguments = [])
 * @method \Dew\Acs\Result queryFailReasonForRegistrantProfileRealNameVerification(array $arguments = [])
 * @method \Http\Promise\Promise queryFailReasonForRegistrantProfileRealNameVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result verifyContactField(array $arguments = [])
 * @method \Http\Promise\Promise verifyContactFieldAsync($arguments = [])
 * @method \Dew\Acs\Result queryRegistrantProfiles(array $arguments = [])
 * @method \Http\Promise\Promise queryRegistrantProfilesAsync($arguments = [])
 * @method \Dew\Acs\Result queryRegistrantProfileRealNameVerificationInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryRegistrantProfileRealNameVerificationInfoAsync($arguments = [])
 * @method \Dew\Acs\Result saveTaskForSubmittingDomainRealNameVerificationByIdentityCredential(array $arguments = [])
 * @method \Http\Promise\Promise saveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialAsync($arguments = [])
 * @method \Dew\Acs\Result saveTaskForSubmittingDomainRealNameVerificationByRegistrantProfileID(array $arguments = [])
 * @method \Http\Promise\Promise saveTaskForSubmittingDomainRealNameVerificationByRegistrantProfileIDAsync($arguments = [])
 * @method \Dew\Acs\Result cancelDomainVerification(array $arguments = [])
 * @method \Http\Promise\Promise cancelDomainVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result queryDomainRealNameVerificationInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryDomainRealNameVerificationInfoAsync($arguments = [])
 * @method \Dew\Acs\Result queryFailReasonForDomainRealNameVerification(array $arguments = [])
 * @method \Http\Promise\Promise queryFailReasonForDomainRealNameVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEmailVerification(array $arguments = [])
 * @method \Http\Promise\Promise deleteEmailVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result verifyEmail(array $arguments = [])
 * @method \Http\Promise\Promise verifyEmailAsync($arguments = [])
 * @method \Dew\Acs\Result resendEmailVerification(array $arguments = [])
 * @method \Http\Promise\Promise resendEmailVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result submitEmailVerification(array $arguments = [])
 * @method \Http\Promise\Promise submitEmailVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result queryEmailVerification(array $arguments = [])
 * @method \Http\Promise\Promise queryEmailVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result listEmailVerification(array $arguments = [])
 * @method \Http\Promise\Promise listEmailVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForUpdateProhibitionLock(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForUpdateProhibitionLockAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForUpdateProhibitionLock(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForUpdateProhibitionLockAsync($arguments = [])
 * @method \Dew\Acs\Result saveTaskForUpdatingRegistrantInfoByRegistrantProfileID(array $arguments = [])
 * @method \Http\Promise\Promise saveTaskForUpdatingRegistrantInfoByRegistrantProfileIDAsync($arguments = [])
 * @method \Dew\Acs\Result saveTaskForUpdatingRegistrantInfoByIdentityCredential(array $arguments = [])
 * @method \Http\Promise\Promise saveTaskForUpdatingRegistrantInfoByIdentityCredentialAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForUpdatingContactInfo(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForUpdatingContactInfoAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForUpdatingContactInfoByNewContact(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForUpdatingContactInfoByNewContactAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForUpdatingContactInfoByRegistrantProfileId(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForUpdatingContactInfoByRegistrantProfileIdAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForCreatingOrderTransfer(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForCreatingOrderTransferAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForCreatingOrderTransfer(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForCreatingOrderTransferAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForCancelingTransferIn(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForCancelingTransferInAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForCancelingTransferOut(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForCancelingTransferOutAsync($arguments = [])
 * @method \Dew\Acs\Result transferInReenterTransferAuthorizationCode(array $arguments = [])
 * @method \Http\Promise\Promise transferInReenterTransferAuthorizationCodeAsync($arguments = [])
 * @method \Dew\Acs\Result transferInResendMailToken(array $arguments = [])
 * @method \Http\Promise\Promise transferInResendMailTokenAsync($arguments = [])
 * @method \Dew\Acs\Result transferInRefetchWhoisEmail(array $arguments = [])
 * @method \Http\Promise\Promise transferInRefetchWhoisEmailAsync($arguments = [])
 * @method \Dew\Acs\Result transferInCheckMailToken(array $arguments = [])
 * @method \Http\Promise\Promise transferInCheckMailTokenAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForQueryingTransferAuthorizationCode(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForQueryingTransferAuthorizationCodeAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForTransferProhibitionLock(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForTransferProhibitionLockAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForTransferProhibitionLock(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForTransferProhibitionLockAsync($arguments = [])
 * @method \Dew\Acs\Result confirmTransferInEmail(array $arguments = [])
 * @method \Http\Promise\Promise confirmTransferInEmailAsync($arguments = [])
 * @method \Dew\Acs\Result queryTransferInByInstanceId(array $arguments = [])
 * @method \Http\Promise\Promise queryTransferInByInstanceIdAsync($arguments = [])
 * @method \Dew\Acs\Result queryTransferInList(array $arguments = [])
 * @method \Http\Promise\Promise queryTransferInListAsync($arguments = [])
 * @method \Dew\Acs\Result queryTransferOutInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryTransferOutInfoAsync($arguments = [])
 * @method \Dew\Acs\Result checkTransferInFeasibility(array $arguments = [])
 * @method \Http\Promise\Promise checkTransferInFeasibilityAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForApplyQuickTransferOutOpenly(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForApplyQuickTransferOutOpenlyAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForApplyQuickTransferOutOpenly(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForApplyQuickTransferOutOpenlyAsync($arguments = [])
 * @method \Dew\Acs\Result cancelTask(array $arguments = [])
 * @method \Http\Promise\Promise cancelTaskAsync($arguments = [])
 * @method \Dew\Acs\Result acknowledgeTaskResult(array $arguments = [])
 * @method \Http\Promise\Promise acknowledgeTaskResultAsync($arguments = [])
 * @method \Dew\Acs\Result queryTaskDetailHistory(array $arguments = [])
 * @method \Http\Promise\Promise queryTaskDetailHistoryAsync($arguments = [])
 * @method \Dew\Acs\Result pollTaskResult(array $arguments = [])
 * @method \Http\Promise\Promise pollTaskResultAsync($arguments = [])
 * @method \Dew\Acs\Result queryTaskList(array $arguments = [])
 * @method \Http\Promise\Promise queryTaskListAsync($arguments = [])
 * @method \Dew\Acs\Result queryTaskInfoHistory(array $arguments = [])
 * @method \Http\Promise\Promise queryTaskInfoHistoryAsync($arguments = [])
 * @method \Dew\Acs\Result queryTaskDetailList(array $arguments = [])
 * @method \Http\Promise\Promise queryTaskDetailListAsync($arguments = [])
 * @method \Dew\Acs\Result queryDomainByDomainName(array $arguments = [])
 * @method \Http\Promise\Promise queryDomainByDomainNameAsync($arguments = [])
 * @method \Dew\Acs\Result queryContactInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryContactInfoAsync($arguments = [])
 * @method \Dew\Acs\Result queryDomainByInstanceId(array $arguments = [])
 * @method \Http\Promise\Promise queryDomainByInstanceIdAsync($arguments = [])
 * @method \Dew\Acs\Result queryDomainList(array $arguments = [])
 * @method \Http\Promise\Promise queryDomainListAsync($arguments = [])
 * @method \Dew\Acs\Result scrollDomainList(array $arguments = [])
 * @method \Http\Promise\Promise scrollDomainListAsync($arguments = [])
 * @method \Dew\Acs\Result queryDomainSuffix(array $arguments = [])
 * @method \Http\Promise\Promise queryDomainSuffixAsync($arguments = [])
 * @method \Dew\Acs\Result queryAdvancedDomainList(array $arguments = [])
 * @method \Http\Promise\Promise queryAdvancedDomainListAsync($arguments = [])
 * @method \Dew\Acs\Result lookupTmchNotice(array $arguments = [])
 * @method \Http\Promise\Promise lookupTmchNoticeAsync($arguments = [])
 * @method \Dew\Acs\Result checkDomainSunriseClaim(array $arguments = [])
 * @method \Http\Promise\Promise checkDomainSunriseClaimAsync($arguments = [])
 * @method \Dew\Acs\Result queryArtExtension(array $arguments = [])
 * @method \Http\Promise\Promise queryArtExtensionAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForCreatingDnsHost(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForCreatingDnsHostAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForAddingDSRecord(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForAddingDSRecordAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForDeletingDnsHost(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForDeletingDnsHostAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForDeletingDSRecord(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForDeletingDSRecordAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForSynchronizingDnsHost(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForSynchronizingDnsHostAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForSynchronizingDSRecord(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForSynchronizingDSRecordAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForModifyingDnsHost(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForModifyingDnsHostAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForModifyingDSRecord(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForModifyingDSRecordAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForModifyingDomainDns(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForModifyingDomainDnsAsync($arguments = [])
 * @method \Dew\Acs\Result queryDnsHost(array $arguments = [])
 * @method \Http\Promise\Promise queryDnsHostAsync($arguments = [])
 * @method \Dew\Acs\Result queryDSRecord(array $arguments = [])
 * @method \Http\Promise\Promise queryDSRecordAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDomainGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteDomainGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateDomainToDomainGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateDomainToDomainGroupAsync($arguments = [])
 * @method \Dew\Acs\Result saveDomainGroup(array $arguments = [])
 * @method \Http\Promise\Promise saveDomainGroupAsync($arguments = [])
 * @method \Dew\Acs\Result queryDomainGroupList(array $arguments = [])
 * @method \Http\Promise\Promise queryDomainGroupListAsync($arguments = [])
 * @method \Dew\Acs\Result queryServerLock(array $arguments = [])
 * @method \Http\Promise\Promise queryServerLockAsync($arguments = [])
 * @method \Dew\Acs\Result checkProcessingServerLockApply(array $arguments = [])
 * @method \Http\Promise\Promise checkProcessingServerLockApplyAsync($arguments = [])
 * @method \Dew\Acs\Result checkMaxYearOfServerLock(array $arguments = [])
 * @method \Http\Promise\Promise checkMaxYearOfServerLockAsync($arguments = [])
 * @method \Dew\Acs\Result listServerLock(array $arguments = [])
 * @method \Http\Promise\Promise listServerLockAsync($arguments = [])
 * @method \Dew\Acs\Result getIntlFixPriceDomainListUrl(array $arguments = [])
 * @method \Http\Promise\Promise getIntlFixPriceDomainListUrlAsync($arguments = [])
 * @method \Dew\Acs\Result checkIntlFixPriceDomainStatus(array $arguments = [])
 * @method \Http\Promise\Promise checkIntlFixPriceDomainStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createIntlFixedPriceDomainOrder(array $arguments = [])
 * @method \Http\Promise\Promise createIntlFixedPriceDomainOrderAsync($arguments = [])
 * @method \Dew\Acs\Result queryIntlFixedPriceOrderList(array $arguments = [])
 * @method \Http\Promise\Promise queryIntlFixedPriceOrderListAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForDomainNameProxyService(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForDomainNameProxyServiceAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForDomainNameProxyService(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForDomainNameProxyServiceAsync($arguments = [])
 * @method \Dew\Acs\Result submitOperationAuditInfo(array $arguments = [])
 * @method \Http\Promise\Promise submitOperationAuditInfoAsync($arguments = [])
 * @method \Dew\Acs\Result submitOperationCredentials(array $arguments = [])
 * @method \Http\Promise\Promise submitOperationCredentialsAsync($arguments = [])
 * @method \Dew\Acs\Result cancelOperationAudit(array $arguments = [])
 * @method \Http\Promise\Promise cancelOperationAuditAsync($arguments = [])
 * @method \Dew\Acs\Result cancelQualificationVerification(array $arguments = [])
 * @method \Http\Promise\Promise cancelQualificationVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result resetQualificationVerification(array $arguments = [])
 * @method \Http\Promise\Promise resetQualificationVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result saveRegistrantProfileRealNameVerification(array $arguments = [])
 * @method \Http\Promise\Promise saveRegistrantProfileRealNameVerificationAsync($arguments = [])
 * @method \Dew\Acs\Result queryFailingReasonListForQualification(array $arguments = [])
 * @method \Http\Promise\Promise queryFailingReasonListForQualificationAsync($arguments = [])
 * @method \Dew\Acs\Result queryOperationAuditInfoDetail(array $arguments = [])
 * @method \Http\Promise\Promise queryOperationAuditInfoDetailAsync($arguments = [])
 * @method \Dew\Acs\Result queryOperationAuditInfoList(array $arguments = [])
 * @method \Http\Promise\Promise queryOperationAuditInfoListAsync($arguments = [])
 * @method \Dew\Acs\Result queryQualificationDetail(array $arguments = [])
 * @method \Http\Promise\Promise queryQualificationDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getOperationOssUploadPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getOperationOssUploadPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result saveTaskForSubmittingDomainDelete(array $arguments = [])
 * @method \Http\Promise\Promise saveTaskForSubmittingDomainDeleteAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForAssociatingEns(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForAssociatingEnsAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForDisassociatingEns(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForDisassociatingEnsAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchDomainRemark(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchDomainRemarkAsync($arguments = [])
 * @method \Dew\Acs\Result saveSingleTaskForSaveArtExtension(array $arguments = [])
 * @method \Http\Promise\Promise saveSingleTaskForSaveArtExtensionAsync($arguments = [])
 * @method \Dew\Acs\Result queryChangeLogList(array $arguments = [])
 * @method \Http\Promise\Promise queryChangeLogListAsync($arguments = [])
 * @method \Dew\Acs\Result queryLocalEnsAssociation(array $arguments = [])
 * @method \Http\Promise\Promise queryLocalEnsAssociationAsync($arguments = [])
 * @method \Dew\Acs\Result queryEnsAssociation(array $arguments = [])
 * @method \Http\Promise\Promise queryEnsAssociationAsync($arguments = [])
 * @method \Dew\Acs\Result getQualificationUploadPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getQualificationUploadPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result changeResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise changeResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result domainSpecialBizCancel(array $arguments = [])
 * @method \Http\Promise\Promise domainSpecialBizCancelAsync($arguments = [])
 * @method \Dew\Acs\Result submitDomainSpecialBizCredentials(array $arguments = [])
 * @method \Http\Promise\Promise submitDomainSpecialBizCredentialsAsync($arguments = [])
 * @method \Dew\Acs\Result queryDomainSpecialBizInfoByDomain(array $arguments = [])
 * @method \Http\Promise\Promise queryDomainSpecialBizInfoByDomainAsync($arguments = [])
 * @method \Dew\Acs\Result queryDomainSpecialBizDetail(array $arguments = [])
 * @method \Http\Promise\Promise queryDomainSpecialBizDetailAsync($arguments = [])
 * @method \Dew\Acs\Result saveBatchTaskForReserveDropListDomain(array $arguments = [])
 * @method \Http\Promise\Promise saveBatchTaskForReserveDropListDomainAsync($arguments = [])
 */
final class DomainClient extends AcsClient
{
    //
}
