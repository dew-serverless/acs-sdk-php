<?php

declare(strict_types=1);

namespace Dew\Acs\Ga;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result listAccelerateAreas(array $arguments = [])
 * @method \Http\Promise\Promise listAccelerateAreasAsync($arguments = [])
 * @method \Dew\Acs\Result listBusiRegions(array $arguments = [])
 * @method \Http\Promise\Promise listBusiRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result listAvailableBusiRegions(array $arguments = [])
 * @method \Http\Promise\Promise listAvailableBusiRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result listCommonAreas(array $arguments = [])
 * @method \Http\Promise\Promise listCommonAreasAsync($arguments = [])
 * @method \Dew\Acs\Result changeResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise changeResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result describeCommodity(array $arguments = [])
 * @method \Http\Promise\Promise describeCommodityAsync($arguments = [])
 * @method \Dew\Acs\Result describeCommodityPrice(array $arguments = [])
 * @method \Http\Promise\Promise describeCommodityPriceAsync($arguments = [])
 * @method \Dew\Acs\Result bandwidthPackageAddAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise bandwidthPackageAddAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result bandwidthPackageRemoveAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise bandwidthPackageRemoveAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result describeBandwidthPackage(array $arguments = [])
 * @method \Http\Promise\Promise describeBandwidthPackageAsync($arguments = [])
 * @method \Dew\Acs\Result listBandwidthPackages(array $arguments = [])
 * @method \Http\Promise\Promise listBandwidthPackagesAsync($arguments = [])
 * @method \Dew\Acs\Result updateBandwidthPackage(array $arguments = [])
 * @method \Http\Promise\Promise updateBandwidthPackageAsync($arguments = [])
 * @method \Dew\Acs\Result replaceBandwidthPackage(array $arguments = [])
 * @method \Http\Promise\Promise replaceBandwidthPackageAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBandwidthPackage(array $arguments = [])
 * @method \Http\Promise\Promise deleteBandwidthPackageAsync($arguments = [])
 * @method \Dew\Acs\Result createBandwidthPackage(array $arguments = [])
 * @method \Http\Promise\Promise createBandwidthPackageAsync($arguments = [])
 * @method \Dew\Acs\Result listBandwidthackages(array $arguments = [])
 * @method \Http\Promise\Promise listBandwidthackagesAsync($arguments = [])
 * @method \Dew\Acs\Result describeBandwidthPackageAutoRenewAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeBandwidthPackageAutoRenewAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result updateBandwidthPackagaAutoRenewAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateBandwidthPackagaAutoRenewAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listIspTypes(array $arguments = [])
 * @method \Http\Promise\Promise listIspTypesAsync($arguments = [])
 * @method \Dew\Acs\Result updateAcceleratorCrossBorderMode(array $arguments = [])
 * @method \Http\Promise\Promise updateAcceleratorCrossBorderModeAsync($arguments = [])
 * @method \Dew\Acs\Result updateAcceleratorCrossBorderStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateAcceleratorCrossBorderStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise createAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result describeAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise describeAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result listAccelerators(array $arguments = [])
 * @method \Http\Promise\Promise listAcceleratorsAsync($arguments = [])
 * @method \Dew\Acs\Result updateAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise updateAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result updateAcceleratorConfirm(array $arguments = [])
 * @method \Http\Promise\Promise updateAcceleratorConfirmAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise deleteAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result attachDdosToAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise attachDdosToAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result detachDdosFromAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise detachDdosFromAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result createSpareIps(array $arguments = [])
 * @method \Http\Promise\Promise createSpareIpsAsync($arguments = [])
 * @method \Dew\Acs\Result listSpareIps(array $arguments = [])
 * @method \Http\Promise\Promise listSpareIpsAsync($arguments = [])
 * @method \Dew\Acs\Result getSpareIp(array $arguments = [])
 * @method \Http\Promise\Promise getSpareIpAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSpareIps(array $arguments = [])
 * @method \Http\Promise\Promise deleteSpareIpsAsync($arguments = [])
 * @method \Dew\Acs\Result describeAcceleratorAutoRenewAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeAcceleratorAutoRenewAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result updateAcceleratorAutoRenewAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateAcceleratorAutoRenewAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result createIpSets(array $arguments = [])
 * @method \Http\Promise\Promise createIpSetsAsync($arguments = [])
 * @method \Dew\Acs\Result describeIpSet(array $arguments = [])
 * @method \Http\Promise\Promise describeIpSetAsync($arguments = [])
 * @method \Dew\Acs\Result listIpSets(array $arguments = [])
 * @method \Http\Promise\Promise listIpSetsAsync($arguments = [])
 * @method \Dew\Acs\Result updateIpSet(array $arguments = [])
 * @method \Http\Promise\Promise updateIpSetAsync($arguments = [])
 * @method \Dew\Acs\Result updateIpSets(array $arguments = [])
 * @method \Http\Promise\Promise updateIpSetsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIpSet(array $arguments = [])
 * @method \Http\Promise\Promise deleteIpSetAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIpSets(array $arguments = [])
 * @method \Http\Promise\Promise deleteIpSetsAsync($arguments = [])
 * @method \Dew\Acs\Result listAvailableAccelerateAreas(array $arguments = [])
 * @method \Http\Promise\Promise listAvailableAccelerateAreasAsync($arguments = [])
 * @method \Dew\Acs\Result getIpsetsBandwidthLimit(array $arguments = [])
 * @method \Http\Promise\Promise getIpsetsBandwidthLimitAsync($arguments = [])
 * @method \Dew\Acs\Result createListener(array $arguments = [])
 * @method \Http\Promise\Promise createListenerAsync($arguments = [])
 * @method \Dew\Acs\Result describeListener(array $arguments = [])
 * @method \Http\Promise\Promise describeListenerAsync($arguments = [])
 * @method \Dew\Acs\Result listListeners(array $arguments = [])
 * @method \Http\Promise\Promise listListenersAsync($arguments = [])
 * @method \Dew\Acs\Result updateListener(array $arguments = [])
 * @method \Http\Promise\Promise updateListenerAsync($arguments = [])
 * @method \Dew\Acs\Result deleteListener(array $arguments = [])
 * @method \Http\Promise\Promise deleteListenerAsync($arguments = [])
 * @method \Dew\Acs\Result getHealthStatus(array $arguments = [])
 * @method \Http\Promise\Promise getHealthStatusAsync($arguments = [])
 * @method \Dew\Acs\Result associateAdditionalCertificatesWithListener(array $arguments = [])
 * @method \Http\Promise\Promise associateAdditionalCertificatesWithListenerAsync($arguments = [])
 * @method \Dew\Acs\Result dissociateAdditionalCertificatesFromListener(array $arguments = [])
 * @method \Http\Promise\Promise dissociateAdditionalCertificatesFromListenerAsync($arguments = [])
 * @method \Dew\Acs\Result updateAdditionalCertificateWithListener(array $arguments = [])
 * @method \Http\Promise\Promise updateAdditionalCertificateWithListenerAsync($arguments = [])
 * @method \Dew\Acs\Result listListenerCertificates(array $arguments = [])
 * @method \Http\Promise\Promise listListenerCertificatesAsync($arguments = [])
 * @method \Dew\Acs\Result listSystemSecurityPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listSystemSecurityPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result createEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise createEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise describeEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listEndpointGroups(array $arguments = [])
 * @method \Http\Promise\Promise listEndpointGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result updateEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateEndpointGroupAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateEndpointGroupAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeLogStoreOfEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise describeLogStoreOfEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result attachLogStoreToEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise attachLogStoreToEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result detachLogStoreFromEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise detachLogStoreFromEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createEndpointGroups(array $arguments = [])
 * @method \Http\Promise\Promise createEndpointGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result updateEndpointGroups(array $arguments = [])
 * @method \Http\Promise\Promise updateEndpointGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result configEndpointProbe(array $arguments = [])
 * @method \Http\Promise\Promise configEndpointProbeAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEndpointGroups(array $arguments = [])
 * @method \Http\Promise\Promise deleteEndpointGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result createCustomRoutingEndpointGroups(array $arguments = [])
 * @method \Http\Promise\Promise createCustomRoutingEndpointGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result updateCustomRoutingEndpointGroupAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateCustomRoutingEndpointGroupAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeCustomRoutingEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise describeCustomRoutingEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listCustomRoutingEndpointGroups(array $arguments = [])
 * @method \Http\Promise\Promise listCustomRoutingEndpointGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCustomRoutingEndpointGroups(array $arguments = [])
 * @method \Http\Promise\Promise deleteCustomRoutingEndpointGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result createCustomRoutingEndpointGroupDestinations(array $arguments = [])
 * @method \Http\Promise\Promise createCustomRoutingEndpointGroupDestinationsAsync($arguments = [])
 * @method \Dew\Acs\Result updateCustomRoutingEndpointGroupDestinations(array $arguments = [])
 * @method \Http\Promise\Promise updateCustomRoutingEndpointGroupDestinationsAsync($arguments = [])
 * @method \Dew\Acs\Result describeCustomRoutingEndpointGroupDestinations(array $arguments = [])
 * @method \Http\Promise\Promise describeCustomRoutingEndpointGroupDestinationsAsync($arguments = [])
 * @method \Dew\Acs\Result listCustomRoutingEndpointGroupDestinations(array $arguments = [])
 * @method \Http\Promise\Promise listCustomRoutingEndpointGroupDestinationsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCustomRoutingEndpointGroupDestinations(array $arguments = [])
 * @method \Http\Promise\Promise deleteCustomRoutingEndpointGroupDestinationsAsync($arguments = [])
 * @method \Dew\Acs\Result createCustomRoutingEndpoints(array $arguments = [])
 * @method \Http\Promise\Promise createCustomRoutingEndpointsAsync($arguments = [])
 * @method \Dew\Acs\Result updateCustomRoutingEndpoints(array $arguments = [])
 * @method \Http\Promise\Promise updateCustomRoutingEndpointsAsync($arguments = [])
 * @method \Dew\Acs\Result describeCustomRoutingEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise describeCustomRoutingEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result listCustomRoutingEndpoints(array $arguments = [])
 * @method \Http\Promise\Promise listCustomRoutingEndpointsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCustomRoutingEndpoints(array $arguments = [])
 * @method \Http\Promise\Promise deleteCustomRoutingEndpointsAsync($arguments = [])
 * @method \Dew\Acs\Result createCustomRoutingEndpointTrafficPolicies(array $arguments = [])
 * @method \Http\Promise\Promise createCustomRoutingEndpointTrafficPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result updateCustomRoutingEndpointTrafficPolicies(array $arguments = [])
 * @method \Http\Promise\Promise updateCustomRoutingEndpointTrafficPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result describeCustomRoutingEndPointTrafficPolicy(array $arguments = [])
 * @method \Http\Promise\Promise describeCustomRoutingEndPointTrafficPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listCustomRoutingEndpointTrafficPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listCustomRoutingEndpointTrafficPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCustomRoutingEndpointTrafficPolicies(array $arguments = [])
 * @method \Http\Promise\Promise deleteCustomRoutingEndpointTrafficPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result listCustomRoutingPortMappings(array $arguments = [])
 * @method \Http\Promise\Promise listCustomRoutingPortMappingsAsync($arguments = [])
 * @method \Dew\Acs\Result listCustomRoutingPortMappingsByDestination(array $arguments = [])
 * @method \Http\Promise\Promise listCustomRoutingPortMappingsByDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result createForwardingRules(array $arguments = [])
 * @method \Http\Promise\Promise createForwardingRulesAsync($arguments = [])
 * @method \Dew\Acs\Result updateForwardingRules(array $arguments = [])
 * @method \Http\Promise\Promise updateForwardingRulesAsync($arguments = [])
 * @method \Dew\Acs\Result listForwardingRules(array $arguments = [])
 * @method \Http\Promise\Promise listForwardingRulesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteForwardingRules(array $arguments = [])
 * @method \Http\Promise\Promise deleteForwardingRulesAsync($arguments = [])
 * @method \Dew\Acs\Result createAcl(array $arguments = [])
 * @method \Http\Promise\Promise createAclAsync($arguments = [])
 * @method \Dew\Acs\Result updateAclAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateAclAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result addEntriesToAcl(array $arguments = [])
 * @method \Http\Promise\Promise addEntriesToAclAsync($arguments = [])
 * @method \Dew\Acs\Result removeEntriesFromAcl(array $arguments = [])
 * @method \Http\Promise\Promise removeEntriesFromAclAsync($arguments = [])
 * @method \Dew\Acs\Result listAcls(array $arguments = [])
 * @method \Http\Promise\Promise listAclsAsync($arguments = [])
 * @method \Dew\Acs\Result getAcl(array $arguments = [])
 * @method \Http\Promise\Promise getAclAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAcl(array $arguments = [])
 * @method \Http\Promise\Promise deleteAclAsync($arguments = [])
 * @method \Dew\Acs\Result associateAclsWithListener(array $arguments = [])
 * @method \Http\Promise\Promise associateAclsWithListenerAsync($arguments = [])
 * @method \Dew\Acs\Result dissociateAclsFromListener(array $arguments = [])
 * @method \Http\Promise\Promise dissociateAclsFromListenerAsync($arguments = [])
 * @method \Dew\Acs\Result createApplicationMonitor(array $arguments = [])
 * @method \Http\Promise\Promise createApplicationMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result updateApplicationMonitor(array $arguments = [])
 * @method \Http\Promise\Promise updateApplicationMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result disableApplicationMonitor(array $arguments = [])
 * @method \Http\Promise\Promise disableApplicationMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result enableApplicationMonitor(array $arguments = [])
 * @method \Http\Promise\Promise enableApplicationMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result deleteApplicationMonitor(array $arguments = [])
 * @method \Http\Promise\Promise deleteApplicationMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result listApplicationMonitor(array $arguments = [])
 * @method \Http\Promise\Promise listApplicationMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result describeApplicationMonitor(array $arguments = [])
 * @method \Http\Promise\Promise describeApplicationMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result detectApplicationMonitor(array $arguments = [])
 * @method \Http\Promise\Promise detectApplicationMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result listApplicationMonitorDetectResult(array $arguments = [])
 * @method \Http\Promise\Promise listApplicationMonitorDetectResultAsync($arguments = [])
 * @method \Dew\Acs\Result createDomain(array $arguments = [])
 * @method \Http\Promise\Promise createDomainAsync($arguments = [])
 * @method \Dew\Acs\Result updateDomainState(array $arguments = [])
 * @method \Http\Promise\Promise updateDomainStateAsync($arguments = [])
 * @method \Dew\Acs\Result updateDomain(array $arguments = [])
 * @method \Http\Promise\Promise updateDomainAsync($arguments = [])
 * @method \Dew\Acs\Result listDomains(array $arguments = [])
 * @method \Http\Promise\Promise listDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result getInvalidDomainCount(array $arguments = [])
 * @method \Http\Promise\Promise getInvalidDomainCountAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDomainAcceleratorRelation(array $arguments = [])
 * @method \Http\Promise\Promise deleteDomainAcceleratorRelationAsync($arguments = [])
 * @method \Dew\Acs\Result createBasicAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise createBasicAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result updateBasicAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise updateBasicAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result getBasicAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise getBasicAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result listBasicAccelerators(array $arguments = [])
 * @method \Http\Promise\Promise listBasicAcceleratorsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBasicAccelerator(array $arguments = [])
 * @method \Http\Promise\Promise deleteBasicAcceleratorAsync($arguments = [])
 * @method \Dew\Acs\Result createBasicIpSet(array $arguments = [])
 * @method \Http\Promise\Promise createBasicIpSetAsync($arguments = [])
 * @method \Dew\Acs\Result updateBasicIpSet(array $arguments = [])
 * @method \Http\Promise\Promise updateBasicIpSetAsync($arguments = [])
 * @method \Dew\Acs\Result getBasicIpSet(array $arguments = [])
 * @method \Http\Promise\Promise getBasicIpSetAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBasicIpSet(array $arguments = [])
 * @method \Http\Promise\Promise deleteBasicIpSetAsync($arguments = [])
 * @method \Dew\Acs\Result createBasicAccelerateIp(array $arguments = [])
 * @method \Http\Promise\Promise createBasicAccelerateIpAsync($arguments = [])
 * @method \Dew\Acs\Result getBasicAccelerateIp(array $arguments = [])
 * @method \Http\Promise\Promise getBasicAccelerateIpAsync($arguments = [])
 * @method \Dew\Acs\Result getBasicAccelerateIpIdleCount(array $arguments = [])
 * @method \Http\Promise\Promise getBasicAccelerateIpIdleCountAsync($arguments = [])
 * @method \Dew\Acs\Result listBasicAccelerateIps(array $arguments = [])
 * @method \Http\Promise\Promise listBasicAccelerateIpsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBasicAccelerateIp(array $arguments = [])
 * @method \Http\Promise\Promise deleteBasicAccelerateIpAsync($arguments = [])
 * @method \Dew\Acs\Result createBasicEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise createBasicEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateBasicEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateBasicEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getBasicEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise getBasicEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBasicEndpointGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteBasicEndpointGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createBasicEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise createBasicEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result createBasicEndpoints(array $arguments = [])
 * @method \Http\Promise\Promise createBasicEndpointsAsync($arguments = [])
 * @method \Dew\Acs\Result updateBasicEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise updateBasicEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result getBasicEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise getBasicEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result listBasicEndpoints(array $arguments = [])
 * @method \Http\Promise\Promise listBasicEndpointsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBasicEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise deleteBasicEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result createBasicAccelerateIpEndpointRelations(array $arguments = [])
 * @method \Http\Promise\Promise createBasicAccelerateIpEndpointRelationsAsync($arguments = [])
 * @method \Dew\Acs\Result createBasicAccelerateIpEndpointRelation(array $arguments = [])
 * @method \Http\Promise\Promise createBasicAccelerateIpEndpointRelationAsync($arguments = [])
 * @method \Dew\Acs\Result getBasicAccelerateIpEndpointRelation(array $arguments = [])
 * @method \Http\Promise\Promise getBasicAccelerateIpEndpointRelationAsync($arguments = [])
 * @method \Dew\Acs\Result listBasicAccelerateIpEndpointRelations(array $arguments = [])
 * @method \Http\Promise\Promise listBasicAccelerateIpEndpointRelationsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBasicAccelerateIpEndpointRelation(array $arguments = [])
 * @method \Http\Promise\Promise deleteBasicAccelerateIpEndpointRelationAsync($arguments = [])
 * @method \Dew\Acs\Result updateServiceManagedControl(array $arguments = [])
 * @method \Http\Promise\Promise updateServiceManagedControlAsync($arguments = [])
 * @method \Dew\Acs\Result queryCrossBorderApprovalStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryCrossBorderApprovalStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeAcceleratorServiceStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeAcceleratorServiceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result openAcceleratorService(array $arguments = [])
 * @method \Http\Promise\Promise openAcceleratorServiceAsync($arguments = [])
 * @method \Dew\Acs\Result listEndpointGroupIpAddressCidrBlocks(array $arguments = [])
 * @method \Http\Promise\Promise listEndpointGroupIpAddressCidrBlocksAsync($arguments = [])
 */
final class GaClient extends AcsClient
{
    //
}
