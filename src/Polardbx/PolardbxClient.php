<?php

declare(strict_types=1);

namespace Dew\Acs\Polardbx;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise createDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceSSL(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceSSLAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceTDE(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceTDEAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceTopology(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceTopologyAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceViaEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceViaEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceDescription(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result releaseInstancePublicConnection(array $arguments = [])
 * @method \Http\Promise\Promise releaseInstancePublicConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result restartDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise restartDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeDBInstanceKernelVersion(array $arguments = [])
 * @method \Http\Promise\Promise upgradeDBInstanceKernelVersionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceClass(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceClassAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceHA(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceHAAsync($arguments = [])
 * @method \Dew\Acs\Result updatePolarDBXInstanceNode(array $arguments = [])
 * @method \Http\Promise\Promise updatePolarDBXInstanceNodeAsync($arguments = [])
 * @method \Dew\Acs\Result describeSlowLogRecords(array $arguments = [])
 * @method \Http\Promise\Promise describeSlowLogRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBNodePerformance(array $arguments = [])
 * @method \Http\Promise\Promise describeDBNodePerformanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeTasks(array $arguments = [])
 * @method \Http\Promise\Promise describeTasksAsync($arguments = [])
 * @method \Dew\Acs\Result describeScaleOutMigrateTaskList(array $arguments = [])
 * @method \Http\Promise\Promise describeScaleOutMigrateTaskListAsync($arguments = [])
 * @method \Dew\Acs\Result updateDBInstanceSSL(array $arguments = [])
 * @method \Http\Promise\Promise updateDBInstanceSSLAsync($arguments = [])
 * @method \Dew\Acs\Result modifyParameter(array $arguments = [])
 * @method \Http\Promise\Promise modifyParameterAsync($arguments = [])
 * @method \Dew\Acs\Result describeParameterTemplates(array $arguments = [])
 * @method \Http\Promise\Promise describeParameterTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result describeParameters(array $arguments = [])
 * @method \Http\Promise\Promise describeParametersAsync($arguments = [])
 * @method \Dew\Acs\Result createBackup(array $arguments = [])
 * @method \Http\Promise\Promise createBackupAsync($arguments = [])
 * @method \Dew\Acs\Result describeBackupPolicy(array $arguments = [])
 * @method \Http\Promise\Promise describeBackupPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result describeBackupSetList(array $arguments = [])
 * @method \Http\Promise\Promise describeBackupSetListAsync($arguments = [])
 * @method \Dew\Acs\Result describeBinaryLogList(array $arguments = [])
 * @method \Http\Promise\Promise describeBinaryLogListAsync($arguments = [])
 * @method \Dew\Acs\Result updateBackupPolicy(array $arguments = [])
 * @method \Http\Promise\Promise updateBackupPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result describeOpenBackupSet(array $arguments = [])
 * @method \Http\Promise\Promise describeOpenBackupSetAsync($arguments = [])
 * @method \Dew\Acs\Result updateDBInstanceTDE(array $arguments = [])
 * @method \Http\Promise\Promise updateDBInstanceTDEAsync($arguments = [])
 * @method \Dew\Acs\Result modifySecurityIps(array $arguments = [])
 * @method \Http\Promise\Promise modifySecurityIpsAsync($arguments = [])
 * @method \Dew\Acs\Result describeUserEncryptionKeyList(array $arguments = [])
 * @method \Http\Promise\Promise describeUserEncryptionKeyListAsync($arguments = [])
 * @method \Dew\Acs\Result describeSecurityIps(array $arguments = [])
 * @method \Http\Promise\Promise describeSecurityIpsAsync($arguments = [])
 * @method \Dew\Acs\Result resetAccountPassword(array $arguments = [])
 * @method \Http\Promise\Promise resetAccountPasswordAsync($arguments = [])
 * @method \Dew\Acs\Result createAccount(array $arguments = [])
 * @method \Http\Promise\Promise createAccountAsync($arguments = [])
 * @method \Dew\Acs\Result createSuperAccount(array $arguments = [])
 * @method \Http\Promise\Promise createSuperAccountAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccount(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccountAsync($arguments = [])
 * @method \Dew\Acs\Result describeAccountList(array $arguments = [])
 * @method \Http\Promise\Promise describeAccountListAsync($arguments = [])
 * @method \Dew\Acs\Result modifyAccountDescription(array $arguments = [])
 * @method \Http\Promise\Promise modifyAccountDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result createDB(array $arguments = [])
 * @method \Http\Promise\Promise createDBAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDB(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBAsync($arguments = [])
 * @method \Dew\Acs\Result describeCharacterSet(array $arguments = [])
 * @method \Http\Promise\Promise describeCharacterSetAsync($arguments = [])
 * @method \Dew\Acs\Result describeDbList(array $arguments = [])
 * @method \Http\Promise\Promise describeDbListAsync($arguments = [])
 * @method \Dew\Acs\Result describeDistributeTableList(array $arguments = [])
 * @method \Http\Promise\Promise describeDistributeTableListAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDatabaseDescription(array $arguments = [])
 * @method \Http\Promise\Promise modifyDatabaseDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result describeTags(array $arguments = [])
 * @method \Http\Promise\Promise describeTagsAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result switchDBInstanceHA(array $arguments = [])
 * @method \Http\Promise\Promise switchDBInstanceHAAsync($arguments = [])
 * @method \Dew\Acs\Result releaseColdDataVolume(array $arguments = [])
 * @method \Http\Promise\Promise releaseColdDataVolumeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceConnectionString(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceConnectionStringAsync($arguments = [])
 * @method \Dew\Acs\Result modifyActiveOperationTasks(array $arguments = [])
 * @method \Http\Promise\Promise modifyActiveOperationTasksAsync($arguments = [])
 * @method \Dew\Acs\Result modifyActiveOperationMaintainConf(array $arguments = [])
 * @method \Http\Promise\Promise modifyActiveOperationMaintainConfAsync($arguments = [])
 * @method \Dew\Acs\Result modifyAccountPrivilege(array $arguments = [])
 * @method \Http\Promise\Promise modifyAccountPrivilegeAsync($arguments = [])
 * @method \Dew\Acs\Result enableRightsSeparation(array $arguments = [])
 * @method \Http\Promise\Promise enableRightsSeparationAsync($arguments = [])
 * @method \Dew\Acs\Result disableRightsSeparation(array $arguments = [])
 * @method \Http\Promise\Promise disableRightsSeparationAsync($arguments = [])
 * @method \Dew\Acs\Result describeEvents(array $arguments = [])
 * @method \Http\Promise\Promise describeEventsAsync($arguments = [])
 * @method \Dew\Acs\Result describeColdDataBasicInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeColdDataBasicInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeBackupSet(array $arguments = [])
 * @method \Http\Promise\Promise describeBackupSetAsync($arguments = [])
 * @method \Dew\Acs\Result alignStoragePrimaryAzone(array $arguments = [])
 * @method \Http\Promise\Promise alignStoragePrimaryAzoneAsync($arguments = [])
 * @method \Dew\Acs\Result allocateColdDataVolume(array $arguments = [])
 * @method \Http\Promise\Promise allocateColdDataVolumeAsync($arguments = [])
 * @method \Dew\Acs\Result allocateInstancePublicConnection(array $arguments = [])
 * @method \Http\Promise\Promise allocateInstancePublicConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result cancelActiveOperationTasks(array $arguments = [])
 * @method \Http\Promise\Promise cancelActiveOperationTasksAsync($arguments = [])
 * @method \Dew\Acs\Result checkCloudResourceAuthorized(array $arguments = [])
 * @method \Http\Promise\Promise checkCloudResourceAuthorizedAsync($arguments = [])
 * @method \Dew\Acs\Result describeActiveOperationMaintainConf(array $arguments = [])
 * @method \Http\Promise\Promise describeActiveOperationMaintainConfAsync($arguments = [])
 * @method \Dew\Acs\Result describeActiveOperationTaskCount(array $arguments = [])
 * @method \Http\Promise\Promise describeActiveOperationTaskCountAsync($arguments = [])
 * @method \Dew\Acs\Result describeActiveOperationTasks(array $arguments = [])
 * @method \Http\Promise\Promise describeActiveOperationTasksAsync($arguments = [])
 * @method \Dew\Acs\Result describeArchiveTableList(array $arguments = [])
 * @method \Http\Promise\Promise describeArchiveTableListAsync($arguments = [])
 * @method \Dew\Acs\Result changeResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise changeResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result switchGdnMemberRole(array $arguments = [])
 * @method \Http\Promise\Promise switchGdnMemberRoleAsync($arguments = [])
 * @method \Dew\Acs\Result describeGdnInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeGdnInstancesAsync($arguments = [])
 */
final class PolardbxClient extends AcsClient
{
    //
}
