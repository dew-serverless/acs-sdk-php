<?php

declare(strict_types=1);

namespace Dew\Acs\DataLake;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createCatalog(array $arguments = [])
 * @method \Http\Promise\Promise createCatalogAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCatalog(array $arguments = [])
 * @method \Http\Promise\Promise deleteCatalogAsync($arguments = [])
 * @method \Dew\Acs\Result updateCatalog(array $arguments = [])
 * @method \Http\Promise\Promise updateCatalogAsync($arguments = [])
 * @method \Dew\Acs\Result listCatalogs(array $arguments = [])
 * @method \Http\Promise\Promise listCatalogsAsync($arguments = [])
 * @method \Dew\Acs\Result getCatalog(array $arguments = [])
 * @method \Http\Promise\Promise getCatalogAsync($arguments = [])
 * @method \Dew\Acs\Result createDatabase(array $arguments = [])
 * @method \Http\Promise\Promise createDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDatabase(array $arguments = [])
 * @method \Http\Promise\Promise deleteDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result updateDatabase(array $arguments = [])
 * @method \Http\Promise\Promise updateDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result getDatabase(array $arguments = [])
 * @method \Http\Promise\Promise getDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result listDatabases(array $arguments = [])
 * @method \Http\Promise\Promise listDatabasesAsync($arguments = [])
 * @method \Dew\Acs\Result createTable(array $arguments = [])
 * @method \Http\Promise\Promise createTableAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTable(array $arguments = [])
 * @method \Http\Promise\Promise deleteTableAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTableColumnStatistics(array $arguments = [])
 * @method \Http\Promise\Promise deleteTableColumnStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTableVersion(array $arguments = [])
 * @method \Http\Promise\Promise deleteTableVersionAsync($arguments = [])
 * @method \Dew\Acs\Result updateTable(array $arguments = [])
 * @method \Http\Promise\Promise updateTableAsync($arguments = [])
 * @method \Dew\Acs\Result updateTableColumnStatistics(array $arguments = [])
 * @method \Http\Promise\Promise updateTableColumnStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result getTable(array $arguments = [])
 * @method \Http\Promise\Promise getTableAsync($arguments = [])
 * @method \Dew\Acs\Result getTableColumnStatistics(array $arguments = [])
 * @method \Http\Promise\Promise getTableColumnStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result getTableVersion(array $arguments = [])
 * @method \Http\Promise\Promise getTableVersionAsync($arguments = [])
 * @method \Dew\Acs\Result listTableNames(array $arguments = [])
 * @method \Http\Promise\Promise listTableNamesAsync($arguments = [])
 * @method \Dew\Acs\Result listTables(array $arguments = [])
 * @method \Http\Promise\Promise listTablesAsync($arguments = [])
 * @method \Dew\Acs\Result listTableVersions(array $arguments = [])
 * @method \Http\Promise\Promise listTableVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result getTableProfile(array $arguments = [])
 * @method \Http\Promise\Promise getTableProfileAsync($arguments = [])
 * @method \Dew\Acs\Result renameTable(array $arguments = [])
 * @method \Http\Promise\Promise renameTableAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetTables(array $arguments = [])
 * @method \Http\Promise\Promise batchGetTablesAsync($arguments = [])
 * @method \Dew\Acs\Result batchCreateTables(array $arguments = [])
 * @method \Http\Promise\Promise batchCreateTablesAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeleteTables(array $arguments = [])
 * @method \Http\Promise\Promise batchDeleteTablesAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeleteTableVersions(array $arguments = [])
 * @method \Http\Promise\Promise batchDeleteTableVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result batchUpdateTables(array $arguments = [])
 * @method \Http\Promise\Promise batchUpdateTablesAsync($arguments = [])
 * @method \Dew\Acs\Result createPartition(array $arguments = [])
 * @method \Http\Promise\Promise createPartitionAsync($arguments = [])
 * @method \Dew\Acs\Result deletePartition(array $arguments = [])
 * @method \Http\Promise\Promise deletePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result deletePartitionColumnStatistics(array $arguments = [])
 * @method \Http\Promise\Promise deletePartitionColumnStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result updatePartitionColumnStatistics(array $arguments = [])
 * @method \Http\Promise\Promise updatePartitionColumnStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result getPartition(array $arguments = [])
 * @method \Http\Promise\Promise getPartitionAsync($arguments = [])
 * @method \Dew\Acs\Result getPartitionColumnStatistics(array $arguments = [])
 * @method \Http\Promise\Promise getPartitionColumnStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result listPartitionNames(array $arguments = [])
 * @method \Http\Promise\Promise listPartitionNamesAsync($arguments = [])
 * @method \Dew\Acs\Result listPartitions(array $arguments = [])
 * @method \Http\Promise\Promise listPartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result listPartitionsByFilter(array $arguments = [])
 * @method \Http\Promise\Promise listPartitionsByFilterAsync($arguments = [])
 * @method \Dew\Acs\Result batchCreatePartitions(array $arguments = [])
 * @method \Http\Promise\Promise batchCreatePartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeletePartitions(array $arguments = [])
 * @method \Http\Promise\Promise batchDeletePartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetPartitionColumnStatistics(array $arguments = [])
 * @method \Http\Promise\Promise batchGetPartitionColumnStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetPartitions(array $arguments = [])
 * @method \Http\Promise\Promise batchGetPartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result batchUpdatePartitions(array $arguments = [])
 * @method \Http\Promise\Promise batchUpdatePartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result renamePartition(array $arguments = [])
 * @method \Http\Promise\Promise renamePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result createFunction(array $arguments = [])
 * @method \Http\Promise\Promise createFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFunction(array $arguments = [])
 * @method \Http\Promise\Promise deleteFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result updateFunction(array $arguments = [])
 * @method \Http\Promise\Promise updateFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result listFunctionNames(array $arguments = [])
 * @method \Http\Promise\Promise listFunctionNamesAsync($arguments = [])
 * @method \Dew\Acs\Result listFunctions(array $arguments = [])
 * @method \Http\Promise\Promise listFunctionsAsync($arguments = [])
 * @method \Dew\Acs\Result getFunction(array $arguments = [])
 * @method \Http\Promise\Promise getFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result createLock(array $arguments = [])
 * @method \Http\Promise\Promise createLockAsync($arguments = [])
 * @method \Dew\Acs\Result getLock(array $arguments = [])
 * @method \Http\Promise\Promise getLockAsync($arguments = [])
 * @method \Dew\Acs\Result abortLock(array $arguments = [])
 * @method \Http\Promise\Promise abortLockAsync($arguments = [])
 * @method \Dew\Acs\Result refreshLock(array $arguments = [])
 * @method \Http\Promise\Promise refreshLockAsync($arguments = [])
 * @method \Dew\Acs\Result unLock(array $arguments = [])
 * @method \Http\Promise\Promise unLockAsync($arguments = [])
 * @method \Dew\Acs\Result stopMigrationWorkflow(array $arguments = [])
 * @method \Http\Promise\Promise stopMigrationWorkflowAsync($arguments = [])
 * @method \Dew\Acs\Result runMigrationWorkflow(array $arguments = [])
 * @method \Http\Promise\Promise runMigrationWorkflowAsync($arguments = [])
 * @method \Dew\Acs\Result getAsyncTaskStatus(array $arguments = [])
 * @method \Http\Promise\Promise getAsyncTaskStatusAsync($arguments = [])
 * @method \Dew\Acs\Result search(array $arguments = [])
 * @method \Http\Promise\Promise searchAsync($arguments = [])
 * @method \Dew\Acs\Result createRole(array $arguments = [])
 * @method \Http\Promise\Promise createRoleAsync($arguments = [])
 * @method \Dew\Acs\Result grantRoleToUsers(array $arguments = [])
 * @method \Http\Promise\Promise grantRoleToUsersAsync($arguments = [])
 * @method \Dew\Acs\Result grantRolesToUser(array $arguments = [])
 * @method \Http\Promise\Promise grantRolesToUserAsync($arguments = [])
 * @method \Dew\Acs\Result grantPermissions(array $arguments = [])
 * @method \Http\Promise\Promise grantPermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result batchGrantPermissions(array $arguments = [])
 * @method \Http\Promise\Promise batchGrantPermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRole(array $arguments = [])
 * @method \Http\Promise\Promise deleteRoleAsync($arguments = [])
 * @method \Dew\Acs\Result revokeRoleFromUsers(array $arguments = [])
 * @method \Http\Promise\Promise revokeRoleFromUsersAsync($arguments = [])
 * @method \Dew\Acs\Result revokeRolesFromUser(array $arguments = [])
 * @method \Http\Promise\Promise revokeRolesFromUserAsync($arguments = [])
 * @method \Dew\Acs\Result revokePermissions(array $arguments = [])
 * @method \Http\Promise\Promise revokePermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result batchRevokePermissions(array $arguments = [])
 * @method \Http\Promise\Promise batchRevokePermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result updateRole(array $arguments = [])
 * @method \Http\Promise\Promise updateRoleAsync($arguments = [])
 * @method \Dew\Acs\Result updateRoleUsers(array $arguments = [])
 * @method \Http\Promise\Promise updateRoleUsersAsync($arguments = [])
 * @method \Dew\Acs\Result updatePermissions(array $arguments = [])
 * @method \Http\Promise\Promise updatePermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result updateCatalogSettings(array $arguments = [])
 * @method \Http\Promise\Promise updateCatalogSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result getRole(array $arguments = [])
 * @method \Http\Promise\Promise getRoleAsync($arguments = [])
 * @method \Dew\Acs\Result listRoles(array $arguments = [])
 * @method \Http\Promise\Promise listRolesAsync($arguments = [])
 * @method \Dew\Acs\Result listRoleUsers(array $arguments = [])
 * @method \Http\Promise\Promise listRoleUsersAsync($arguments = [])
 * @method \Dew\Acs\Result listUserRoles(array $arguments = [])
 * @method \Http\Promise\Promise listUserRolesAsync($arguments = [])
 * @method \Dew\Acs\Result listPermissions(array $arguments = [])
 * @method \Http\Promise\Promise listPermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result checkPermissions(array $arguments = [])
 * @method \Http\Promise\Promise checkPermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result getCatalogSettings(array $arguments = [])
 * @method \Http\Promise\Promise getCatalogSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result getQueryResult(array $arguments = [])
 * @method \Http\Promise\Promise getQueryResultAsync($arguments = [])
 * @method \Dew\Acs\Result submitQuery(array $arguments = [])
 * @method \Http\Promise\Promise submitQueryAsync($arguments = [])
 * @method \Dew\Acs\Result cancelQuery(array $arguments = [])
 * @method \Http\Promise\Promise cancelQueryAsync($arguments = [])
 * @method \Dew\Acs\Result getRegionStatus(array $arguments = [])
 * @method \Http\Promise\Promise getRegionStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceStatus(array $arguments = [])
 * @method \Http\Promise\Promise getServiceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result searchAcrossCatalog(array $arguments = [])
 * @method \Http\Promise\Promise searchAcrossCatalogAsync($arguments = [])
 * @method \Dew\Acs\Result registerLocation(array $arguments = [])
 * @method \Http\Promise\Promise registerLocationAsync($arguments = [])
 * @method \Dew\Acs\Result deregisterLocation(array $arguments = [])
 * @method \Http\Promise\Promise deregisterLocationAsync($arguments = [])
 * @method \Dew\Acs\Result updateRegisteredLocation(array $arguments = [])
 * @method \Http\Promise\Promise updateRegisteredLocationAsync($arguments = [])
 * @method \Dew\Acs\Result listPartitionsByExpr(array $arguments = [])
 * @method \Http\Promise\Promise listPartitionsByExprAsync($arguments = [])
 * @method \Dew\Acs\Result getDatabaseProfile(array $arguments = [])
 * @method \Http\Promise\Promise getDatabaseProfileAsync($arguments = [])
 * @method \Dew\Acs\Result getLifecycleRule(array $arguments = [])
 * @method \Http\Promise\Promise getLifecycleRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listPartitionsProfile(array $arguments = [])
 * @method \Http\Promise\Promise listPartitionsProfileAsync($arguments = [])
 */
final class DataLakeClient extends AcsClient
{
    //
}
