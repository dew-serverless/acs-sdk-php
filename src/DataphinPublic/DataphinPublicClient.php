<?php

declare(strict_types=1);

namespace Dew\Acs\DataphinPublic;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createDataSource(array $arguments = [])
 * @method \Http\Promise\Promise createDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataSource(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataSourceBasicInfo(array $arguments = [])
 * @method \Http\Promise\Promise updateDataSourceBasicInfoAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataSourceConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateDataSourceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listDataSourceWithConfig(array $arguments = [])
 * @method \Http\Promise\Promise listDataSourceWithConfigAsync($arguments = [])
 * @method \Dew\Acs\Result checkDataSourceConnectivity(array $arguments = [])
 * @method \Http\Promise\Promise checkDataSourceConnectivityAsync($arguments = [])
 * @method \Dew\Acs\Result checkDataSourceConnectivityById(array $arguments = [])
 * @method \Http\Promise\Promise checkDataSourceConnectivityByIdAsync($arguments = [])
 * @method \Dew\Acs\Result getSparkLocalClientInfo(array $arguments = [])
 * @method \Http\Promise\Promise getSparkLocalClientInfoAsync($arguments = [])
 * @method \Dew\Acs\Result addTenantMembers(array $arguments = [])
 * @method \Http\Promise\Promise addTenantMembersAsync($arguments = [])
 * @method \Dew\Acs\Result addTenantMembersBySourceUser(array $arguments = [])
 * @method \Http\Promise\Promise addTenantMembersBySourceUserAsync($arguments = [])
 * @method \Dew\Acs\Result createUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise createUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result addUserGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise addUserGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserGroupSwitch(array $arguments = [])
 * @method \Http\Promise\Promise updateUserGroupSwitchAsync($arguments = [])
 * @method \Dew\Acs\Result updateTenantMember(array $arguments = [])
 * @method \Http\Promise\Promise updateTenantMemberAsync($arguments = [])
 * @method \Dew\Acs\Result listResourcePermissionOperationLog(array $arguments = [])
 * @method \Http\Promise\Promise listResourcePermissionOperationLogAsync($arguments = [])
 * @method \Dew\Acs\Result listResourcePermissions(array $arguments = [])
 * @method \Http\Promise\Promise listResourcePermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result getProjectProduceUser(array $arguments = [])
 * @method \Http\Promise\Promise getProjectProduceUserAsync($arguments = [])
 * @method \Dew\Acs\Result getUsers(array $arguments = [])
 * @method \Http\Promise\Promise getUsersAsync($arguments = [])
 * @method \Dew\Acs\Result listAddableUsers(array $arguments = [])
 * @method \Http\Promise\Promise listAddableUsersAsync($arguments = [])
 * @method \Dew\Acs\Result listTenantMembers(array $arguments = [])
 * @method \Http\Promise\Promise listTenantMembersAsync($arguments = [])
 * @method \Dew\Acs\Result getUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise getUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listAddableRoles(array $arguments = [])
 * @method \Http\Promise\Promise listAddableRolesAsync($arguments = [])
 * @method \Dew\Acs\Result listUserGroups(array $arguments = [])
 * @method \Http\Promise\Promise listUserGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result getMyTenants(array $arguments = [])
 * @method \Http\Promise\Promise getMyTenantsAsync($arguments = [])
 * @method \Dew\Acs\Result getMyRoles(array $arguments = [])
 * @method \Http\Promise\Promise getMyRolesAsync($arguments = [])
 * @method \Dew\Acs\Result listUserGroupMembers(array $arguments = [])
 * @method \Http\Promise\Promise listUserGroupMembersAsync($arguments = [])
 * @method \Dew\Acs\Result getUserBySourceId(array $arguments = [])
 * @method \Http\Promise\Promise getUserBySourceIdAsync($arguments = [])
 * @method \Dew\Acs\Result grantResourcePermission(array $arguments = [])
 * @method \Http\Promise\Promise grantResourcePermissionAsync($arguments = [])
 * @method \Dew\Acs\Result revokeResourcePermission(array $arguments = [])
 * @method \Http\Promise\Promise revokeResourcePermissionAsync($arguments = [])
 * @method \Dew\Acs\Result checkResourcePermission(array $arguments = [])
 * @method \Http\Promise\Promise checkResourcePermissionAsync($arguments = [])
 * @method \Dew\Acs\Result removeTenantMember(array $arguments = [])
 * @method \Http\Promise\Promise removeTenantMemberAsync($arguments = [])
 * @method \Dew\Acs\Result removeUserGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise removeUserGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result createDirectory(array $arguments = [])
 * @method \Http\Promise\Promise createDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDirectory(array $arguments = [])
 * @method \Http\Promise\Promise deleteDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result updateFileName(array $arguments = [])
 * @method \Http\Promise\Promise updateFileNameAsync($arguments = [])
 * @method \Dew\Acs\Result updateFileDirectory(array $arguments = [])
 * @method \Http\Promise\Promise updateFileDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result getDirectoryTree(array $arguments = [])
 * @method \Http\Promise\Promise getDirectoryTreeAsync($arguments = [])
 * @method \Dew\Acs\Result listFiles(array $arguments = [])
 * @method \Http\Promise\Promise listFilesAsync($arguments = [])
 * @method \Dew\Acs\Result getBizEntityInfoByVersion(array $arguments = [])
 * @method \Http\Promise\Promise getBizEntityInfoByVersionAsync($arguments = [])
 * @method \Dew\Acs\Result getBizEntityInfo(array $arguments = [])
 * @method \Http\Promise\Promise getBizEntityInfoAsync($arguments = [])
 * @method \Dew\Acs\Result updateBizUnit(array $arguments = [])
 * @method \Http\Promise\Promise updateBizUnitAsync($arguments = [])
 * @method \Dew\Acs\Result listBizUnits(array $arguments = [])
 * @method \Http\Promise\Promise listBizUnitsAsync($arguments = [])
 * @method \Dew\Acs\Result getBizUnitInfo(array $arguments = [])
 * @method \Http\Promise\Promise getBizUnitInfoAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBizUnit(array $arguments = [])
 * @method \Http\Promise\Promise deleteBizUnitAsync($arguments = [])
 * @method \Dew\Acs\Result createBizUnit(array $arguments = [])
 * @method \Http\Promise\Promise createBizUnitAsync($arguments = [])
 * @method \Dew\Acs\Result updateBizEntity(array $arguments = [])
 * @method \Http\Promise\Promise updateBizEntityAsync($arguments = [])
 * @method \Dew\Acs\Result onlineBizEntity(array $arguments = [])
 * @method \Http\Promise\Promise onlineBizEntityAsync($arguments = [])
 * @method \Dew\Acs\Result offlineBizEntity(array $arguments = [])
 * @method \Http\Promise\Promise offlineBizEntityAsync($arguments = [])
 * @method \Dew\Acs\Result listBizEntities(array $arguments = [])
 * @method \Http\Promise\Promise listBizEntitiesAsync($arguments = [])
 * @method \Dew\Acs\Result createBizEntity(array $arguments = [])
 * @method \Http\Promise\Promise createBizEntityAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataDomain(array $arguments = [])
 * @method \Http\Promise\Promise updateDataDomainAsync($arguments = [])
 * @method \Dew\Acs\Result listDataDomains(array $arguments = [])
 * @method \Http\Promise\Promise listDataDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result getDataDomainInfo(array $arguments = [])
 * @method \Http\Promise\Promise getDataDomainInfoAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataDomain(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataDomainAsync($arguments = [])
 * @method \Dew\Acs\Result createDataDomain(array $arguments = [])
 * @method \Http\Promise\Promise createDataDomainAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBizEntity(array $arguments = [])
 * @method \Http\Promise\Promise deleteBizEntityAsync($arguments = [])
 * @method \Dew\Acs\Result createAdHocFile(array $arguments = [])
 * @method \Http\Promise\Promise createAdHocFileAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAdHocFile(array $arguments = [])
 * @method \Http\Promise\Promise deleteAdHocFileAsync($arguments = [])
 * @method \Dew\Acs\Result updateAdHocFile(array $arguments = [])
 * @method \Http\Promise\Promise updateAdHocFileAsync($arguments = [])
 * @method \Dew\Acs\Result getAdHocFile(array $arguments = [])
 * @method \Http\Promise\Promise getAdHocFileAsync($arguments = [])
 * @method \Dew\Acs\Result stopAdHocTask(array $arguments = [])
 * @method \Http\Promise\Promise stopAdHocTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getAdHocTaskResult(array $arguments = [])
 * @method \Http\Promise\Promise getAdHocTaskResultAsync($arguments = [])
 * @method \Dew\Acs\Result executeAdHocTask(array $arguments = [])
 * @method \Http\Promise\Promise executeAdHocTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getAdHocTaskLog(array $arguments = [])
 * @method \Http\Promise\Promise getAdHocTaskLogAsync($arguments = [])
 * @method \Dew\Acs\Result createPipelineNode(array $arguments = [])
 * @method \Http\Promise\Promise createPipelineNodeAsync($arguments = [])
 * @method \Dew\Acs\Result updateBatchTaskUdfLineages(array $arguments = [])
 * @method \Http\Promise\Promise updateBatchTaskUdfLineagesAsync($arguments = [])
 * @method \Dew\Acs\Result updateBatchTask(array $arguments = [])
 * @method \Http\Promise\Promise updateBatchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result submitBatchTask(array $arguments = [])
 * @method \Http\Promise\Promise submitBatchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result parseBatchTaskDependency(array $arguments = [])
 * @method \Http\Promise\Promise parseBatchTaskDependencyAsync($arguments = [])
 * @method \Dew\Acs\Result offlineBatchTask(array $arguments = [])
 * @method \Http\Promise\Promise offlineBatchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getBatchTaskUdfLineages(array $arguments = [])
 * @method \Http\Promise\Promise getBatchTaskUdfLineagesAsync($arguments = [])
 * @method \Dew\Acs\Result getBatchTaskVersions(array $arguments = [])
 * @method \Http\Promise\Promise getBatchTaskVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result getBatchTaskInfoByVersion(array $arguments = [])
 * @method \Http\Promise\Promise getBatchTaskInfoByVersionAsync($arguments = [])
 * @method \Dew\Acs\Result getBatchTaskInfo(array $arguments = [])
 * @method \Http\Promise\Promise getBatchTaskInfoAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBatchTask(array $arguments = [])
 * @method \Http\Promise\Promise deleteBatchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createBatchTask(array $arguments = [])
 * @method \Http\Promise\Promise createBatchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getQueueEngineVersionByEnv(array $arguments = [])
 * @method \Http\Promise\Promise getQueueEngineVersionByEnvAsync($arguments = [])
 * @method \Dew\Acs\Result getClusterQueueInfoByEnv(array $arguments = [])
 * @method \Http\Promise\Promise getClusterQueueInfoByEnvAsync($arguments = [])
 * @method \Dew\Acs\Result createStreamBatchJobMapping(array $arguments = [])
 * @method \Http\Promise\Promise createStreamBatchJobMappingAsync($arguments = [])
 * @method \Dew\Acs\Result listSubmitRecords(array $arguments = [])
 * @method \Http\Promise\Promise listSubmitRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result getLatestSubmitDetail(array $arguments = [])
 * @method \Http\Promise\Promise getLatestSubmitDetailAsync($arguments = [])
 * @method \Dew\Acs\Result publishObjectList(array $arguments = [])
 * @method \Http\Promise\Promise publishObjectListAsync($arguments = [])
 * @method \Dew\Acs\Result listPublishRecords(array $arguments = [])
 * @method \Http\Promise\Promise listPublishRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceUpDownStream(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceUpDownStreamAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceDownStream(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceDownStreamAsync($arguments = [])
 * @method \Dew\Acs\Result getSupplementDagrunInstance(array $arguments = [])
 * @method \Http\Promise\Promise getSupplementDagrunInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getPhysicalInstance(array $arguments = [])
 * @method \Http\Promise\Promise getPhysicalInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result listInstances(array $arguments = [])
 * @method \Http\Promise\Promise listInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result operateInstance(array $arguments = [])
 * @method \Http\Promise\Promise operateInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result fixData(array $arguments = [])
 * @method \Http\Promise\Promise fixDataAsync($arguments = [])
 * @method \Dew\Acs\Result createNodeSupplement(array $arguments = [])
 * @method \Http\Promise\Promise createNodeSupplementAsync($arguments = [])
 * @method \Dew\Acs\Result pausePhysicalNode(array $arguments = [])
 * @method \Http\Promise\Promise pausePhysicalNodeAsync($arguments = [])
 * @method \Dew\Acs\Result getOperationSubmitStatus(array $arguments = [])
 * @method \Http\Promise\Promise getOperationSubmitStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getPhysicalInstanceLog(array $arguments = [])
 * @method \Http\Promise\Promise getPhysicalInstanceLogAsync($arguments = [])
 * @method \Dew\Acs\Result getSupplementDagrun(array $arguments = [])
 * @method \Http\Promise\Promise getSupplementDagrunAsync($arguments = [])
 * @method \Dew\Acs\Result getPhysicalNode(array $arguments = [])
 * @method \Http\Promise\Promise getPhysicalNodeAsync($arguments = [])
 * @method \Dew\Acs\Result getPhysicalNodeContent(array $arguments = [])
 * @method \Http\Promise\Promise getPhysicalNodeContentAsync($arguments = [])
 * @method \Dew\Acs\Result getNodeUpDownStream(array $arguments = [])
 * @method \Http\Promise\Promise getNodeUpDownStreamAsync($arguments = [])
 * @method \Dew\Acs\Result listNodes(array $arguments = [])
 * @method \Http\Promise\Promise listNodesAsync($arguments = [])
 * @method \Dew\Acs\Result getPhysicalNodeOperationLog(array $arguments = [])
 * @method \Http\Promise\Promise getPhysicalNodeOperationLogAsync($arguments = [])
 * @method \Dew\Acs\Result listNodeDownStream(array $arguments = [])
 * @method \Http\Promise\Promise listNodeDownStreamAsync($arguments = [])
 * @method \Dew\Acs\Result getPhysicalNodeByOutputName(array $arguments = [])
 * @method \Http\Promise\Promise getPhysicalNodeByOutputNameAsync($arguments = [])
 * @method \Dew\Acs\Result getDevObjectDependency(array $arguments = [])
 * @method \Http\Promise\Promise getDevObjectDependencyAsync($arguments = [])
 * @method \Dew\Acs\Result resumePhysicalNode(array $arguments = [])
 * @method \Http\Promise\Promise resumePhysicalNodeAsync($arguments = [])
 * @method \Dew\Acs\Result executeManualNode(array $arguments = [])
 * @method \Http\Promise\Promise executeManualNodeAsync($arguments = [])
 * @method \Dew\Acs\Result listAlertNotifications(array $arguments = [])
 * @method \Http\Promise\Promise listAlertNotificationsAsync($arguments = [])
 * @method \Dew\Acs\Result listAlertEvents(array $arguments = [])
 * @method \Http\Promise\Promise listAlertEventsAsync($arguments = [])
 * @method \Dew\Acs\Result getAlertEvent(array $arguments = [])
 * @method \Http\Promise\Promise getAlertEventAsync($arguments = [])
 * @method \Dew\Acs\Result listAuthorizedDataServiceApiDetails(array $arguments = [])
 * @method \Http\Promise\Promise listAuthorizedDataServiceApiDetailsAsync($arguments = [])
 */
final class DataphinPublicClient extends AcsClient
{
    //
}
