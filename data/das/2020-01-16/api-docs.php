<?php return array (
  'version' => '1.0',
  'info' => 
  array (
    'style' => 'RPC',
    'product' => 'DAS',
    'version' => '2020-01-16',
  ),
  'directories' => 
  array (
    0 => 
    array (
      'id' => 163441,
      'title' => '实例接入',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'AddHDMInstance',
      ),
    ),
    1 => 
    array (
      'id' => 183911,
      'title' => '巡检评分',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetInstanceInspections',
      ),
    ),
    2 => 
    array (
      'id' => 163444,
      'title' => '事件通知',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'SetEventSubscription',
        1 => 'GetEventSubscription',
        2 => 'GetAutonomousNotifyEventContent',
        3 => 'GetAutonomousNotifyEventsInRange',
      ),
    ),
    3 => 
    array (
      'id' => 163437,
      'title' => '诊断报告',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateDiagnosticReport',
        1 => 'DescribeDiagnosticReportList',
        2 => 'GetDBInstanceConnectivityDiagnosis',
      ),
    ),
    4 => 
    array (
      'id' => 163447,
      'title' => '缓存分析',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateCacheAnalysisJob',
        1 => 'DescribeCacheAnalysisJob',
        2 => 'DescribeCacheAnalysisJobs',
      ),
    ),
    5 => 
    array (
      'id' => 163459,
      'title' => 'SQL限流',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'EnableSqlConcurrencyControl',
        1 => 'DisableSqlConcurrencyControl',
        2 => 'DisableAllSqlConcurrencyControlRules',
        3 => 'GetRunningSqlConcurrencyControlRules',
        4 => 'GetSqlConcurrencyControlRulesHistory',
        5 => 'GetSqlConcurrencyControlKeywordsFromSqlText',
      ),
    ),
    6 => 
    array (
      'id' => 163466,
      'title' => 'SQL诊断',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateRequestDiagnosis',
        1 => 'GetRequestDiagnosisResult',
        2 => 'GetRequestDiagnosisPage',
      ),
    ),
    7 => 
    array (
      'id' => 163470,
      'title' => '智能压测',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateCloudBenchTasks',
        1 => 'RunCloudBenchTask',
        2 => 'StopCloudBenchTask',
        3 => 'CreateAdamBenchTask',
        4 => 'DeleteCloudBenchTask',
        5 => 'DeleteStopGateway',
        6 => 'DescribeCloudbenchTaskConfig',
        7 => 'DescribeCloudbenchTask',
        8 => 'DescribeCloudBenchTasks',
      ),
    ),
    8 => 
    array (
      'id' => 163479,
      'title' => 'Key分析',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'DescribeHotBigKeys',
        1 => 'DescribeTopHotKeys',
        2 => 'DescribeTopBigKeys',
        3 => 'DescribeHotKeys',
      ),
    ),
    9 => 
    array (
      'id' => 163484,
      'title' => '查询治理',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateQueryOptimizeTag',
        1 => 'GetQueryOptimizeExecErrorStats',
        2 => 'GetQueryOptimizeExecErrorSample',
        3 => 'GetQueryOptimizeSolution',
        4 => 'GetQueryOptimizeRuleList',
        5 => 'GetQueryOptimizeDataTrend',
        6 => 'GetQueryOptimizeDataTop',
        7 => 'GetQueryOptimizeDataStats',
        8 => 'GetQueryOptimizeTag',
        9 => 'GetQueryOptimizeShareUrl',
      ),
    ),
    10 => 
    array (
      'id' => 163492,
      'title' => 'SQL洞察',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetErrorRequestSample',
        1 => 'GetAsyncErrorRequestStatResult',
        2 => 'GetAsyncErrorRequestListByCode',
        3 => 'GetAsyncErrorRequestStatByCode',
        4 => 'GetFullRequestOriginStatByInstanceId',
        5 => 'GetFullRequestStatResultByInstanceId',
        6 => 'GetFullRequestSampleByInstanceId',
      ),
    ),
    11 => 
    array (
      'id' => 163499,
      'title' => '企业版管理',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'EnableDasPro',
        1 => 'DisableDasPro',
        2 => 'ModifySqlLogConfig',
        3 => 'DescribeInstanceDasPro',
        4 => 'GetDasProServiceUsage',
        5 => 'DescribeSqlLogStatistic',
        6 => 'GetDasSQLLogHotData',
        7 => 'DescribeSqlLogConfig',
        8 => 'DescribeSqlLogTasks',
        9 => 'DescribeSqlLogTask',
      ),
    ),
    12 => 
    array (
      'id' => 169012,
      'title' => '实例会话',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetRedisAllSession',
        1 => 'GetMongoDBCurrentOp',
        2 => 'KillInstanceAllSession',
        3 => 'CreateKillInstanceSessionTask',
        4 => 'GetKillInstanceSessionTaskResult',
        5 => 'GetMySQLAllSessionAsync',
      ),
    ),
    13 => 
    array (
      'id' => 187925,
      'title' => '空间分析',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateStorageAnalysisTask',
        1 => 'GetStorageAnalysisResult',
        2 => 'GetAutoIncrementUsageStatistic',
      ),
    ),
    14 => 
    array (
      'id' => 187962,
      'title' => '锁优化',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetDeadLockDetailList',
        1 => 'GetBlockingDetailList',
      ),
    ),
    15 => 
    array (
      'id' => 187965,
      'title' => '索引诊断',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetInstanceMissingIndexList',
      ),
    ),
    16 => 
    array (
      'id' => 170304,
      'title' => '自动SQL限流',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'UpdateAutoThrottleRulesAsync',
        1 => 'DisableAutoThrottleRules',
        2 => 'GetAutoThrottleRules',
      ),
    ),
    17 => 
    array (
      'id' => 183935,
      'title' => '自动SQL优化',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'UpdateAutoSqlOptimizeStatus',
        1 => 'GetSqlOptimizeAdvice',
        2 => 'GetInstanceSqlOptimizeStatistic',
      ),
    ),
    18 => 
    array (
      'id' => 170308,
      'title' => '自动空间优化',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'UpdateAutoResourceOptimizeRulesAsync',
        1 => 'DisableAutoResourceOptimizeRules',
        2 => 'GetAutoResourceOptimizeRules',
      ),
    ),
    19 => 
    array (
      'id' => 178164,
      'title' => '自动弹性伸缩',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'ModifyAutoScalingConfig',
        1 => 'DescribeAutoScalingConfig',
        2 => 'DescribeAutoScalingHistory',
        3 => 'DisableInstanceDasConfig',
      ),
    ),
    20 => 
    array (
      'id' => 183941,
      'title' => '分区热力图',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetPartitionsHeatmap',
      ),
    ),
    21 => 
    array (
      'id' => 183943,
      'title' => '性能洞察（新版）',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetPfsSqlSample',
        1 => 'GetPfsMetricTrends',
        2 => 'GetPfsSqlSummaries',
      ),
    ),
    22 => 
    array (
      'id' => 183624,
      'title' => '其他',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetEndpointSwitchTask',
        1 => 'GetHDMAliyunResourceSyncResult',
        2 => 'GetHDMLastAliyunResourceSyncResult',
        3 => 'SyncHDMAliyunResource',
        4 => 'DescribeSqlLogRecords',
        5 => 'CreateSqlLogTask',
      ),
    ),
  ),
  'components' => 
  array (
    'schemas' => 
    array (
    ),
  ),
  'apis' => 
  array (
    'AddHDMInstance' => 
    array (
      'summary' => '调用AddHDMInstance接口，将数据库实例接入DAS。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => '__context',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceArea',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例所属的数据库产品，取值：

- **RDS**：云实例。
- **ECS**：ECS自建实例。
- **IDC**：非公有云自建实例。

> IDC为用户数据中心。',
            'type' => 'string',
            'required' => true,
            'example' => 'ECS',
          ),
        ),
        2 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        3 => 
        array (
          'name' => 'Ip',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待接入实例的内网连接地址。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-2ze1jdv45i7l6****.mysql.rds.aliyuncs.com',
          ),
        ),
        4 => 
        array (
          'name' => 'Port',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例的内网连接端口。',
            'type' => 'string',
            'required' => false,
            'example' => '3306',
          ),
        ),
        5 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**
- **PostgreSQL**
- **SQLServer**
- **PolarDBMySQL**
- **PolarDBPostgreSQL**
- **Redis**
- **MongoDB**
- **PolarDBOracle**
- **PolarDBX**',
            'type' => 'string',
            'required' => false,
            'example' => 'MySQL',
          ),
        ),
        6 => 
        array (
          'name' => 'Username',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户名。',
            'type' => 'string',
            'required' => false,
            'example' => 'test****',
          ),
        ),
        7 => 
        array (
          'name' => 'Password',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户名的密码。',
            'type' => 'string',
            'required' => false,
            'example' => '122****',
          ),
        ),
        8 => 
        array (
          'name' => 'InstanceAlias',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'yuecq--test****',
          ),
        ),
        9 => 
        array (
          'name' => 'NetworkType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例的网络类型。',
            'type' => 'string',
            'required' => false,
            'example' => 'VPC',
          ),
        ),
        10 => 
        array (
          'name' => 'VpcId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'VPC ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'vpc-m5e666n89m2bx8jar****',
          ),
        ),
        11 => 
        array (
          'name' => 'Region',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例所属的地域。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-hangzhou',
          ),
        ),
        12 => 
        array (
          'name' => 'FlushAccount',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Synchro' => 
              array (
                'description' => '备用参数。',
                'type' => 'string',
                'example' => 'None',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'object',
                'properties' => 
                array (
                  'VpcId' => 
                  array (
                    'description' => 'VPC ID。',
                    'type' => 'string',
                    'example' => 'vpc-m5e666n89m2bx8jar****',
                  ),
                  'Token' => 
                  array (
                    'description' => '客户端token（即自定义的唯一随机字符串）。',
                    'type' => 'string',
                    'example' => 'tokenID',
                  ),
                  'Ip' => 
                  array (
                    'description' => '实例的IP连接地址。',
                    'type' => 'string',
                    'example' => 'rm-de21209****.mysql.rds.aliyuncs.com',
                  ),
                  'CallerUid' => 
                  array (
                    'description' => '调用者用户ID。',
                    'type' => 'string',
                    'example' => '31063db679****',
                  ),
                  'InstanceId' => 
                  array (
                    'description' => '实例的ID。',
                    'type' => 'string',
                    'example' => 'rm-2ze1jdv45i7l6****',
                  ),
                  'Port' => 
                  array (
                    'description' => '目标实例的端口。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '3306',
                  ),
                  'OwnerId' => 
                  array (
                    'description' => '所有者ID。',
                    'type' => 'string',
                    'example' => '325352345',
                  ),
                  'Uuid' => 
                  array (
                    'description' => '实例的唯一标识符号。',
                    'type' => 'string',
                    'example' => 'hdm_3063db6792965c080a4bcb6e6304****',
                  ),
                  'Error' => 
                  array (
                    'description' => '错误消息。',
                    'type' => 'string',
                    'example' => 'InvalidRequestURL',
                  ),
                  'Code' => 
                  array (
                    'description' => '返回的状态码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '200',
                  ),
                  'Role' => 
                  array (
                    'description' => '角色信息。',
                    'type' => 'string',
                    'example' => 'master',
                  ),
                  'TenantId' => 
                  array (
                    'description' => '所属的租户ID。',
                    'type' => 'string',
                    'example' => 'L0EPfLS****=SCE00000*****',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Synchro\\": \\"None\\",\\n  \\"Data\\": {\\n    \\"VpcId\\": \\"vpc-m5e666n89m2bx8jar****\\",\\n    \\"Token\\": \\"tokenID\\",\\n    \\"Ip\\": \\"rm-de21209****.mysql.rds.aliyuncs.com\\",\\n    \\"CallerUid\\": \\"31063db679****\\",\\n    \\"InstanceId\\": \\"rm-2ze1jdv45i7l6****\\",\\n    \\"Port\\": 3306,\\n    \\"OwnerId\\": \\"325352345\\",\\n    \\"Uuid\\": \\"hdm_3063db6792965c080a4bcb6e6304****\\",\\n    \\"Error\\": \\"InvalidRequestURL\\",\\n    \\"Code\\": 200,\\n    \\"Role\\": \\"master\\",\\n    \\"TenantId\\": \\"L0EPfLS****=SCE00000*****\\"\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<AddHDMInstanceResponse>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Synchro>None</Synchro>\\n    <Data>\\n        <VpcId>vpc-m5e666n89m2bx8jar****</VpcId>\\n        <Token>tokenID</Token>\\n        <Ip>rm-de21209****.mysql.rds.aliyuncs.com</Ip>\\n        <CallerUid>31063db679****</CallerUid>\\n        <InstanceId>rm-2ze1jdv45i7l6****</InstanceId>\\n        <Port>3306</Port>\\n        <OwnerId>325352345</OwnerId>\\n        <Uuid>hdm_3063db6792965c080a4bcb6e6304****</Uuid>\\n        <Error>InvalidRequestURL</Error>\\n        <Code>200</Code>\\n        <Role>master</Role>\\n        <TenantId>L0EPfLS****=SCE00000*****</TenantId>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</AddHDMInstanceResponse>","errorExample":""}]',
      'title' => '接入数据库实例',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetInstanceInspections' => 
    array (
      'summary' => '调用GetInstanceInspections接口，获取数据库实例巡检评分的结果。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**
- **Redis**
- **PolarDBMySQL**
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'MySQL',
          ),
        ),
        1 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1655416825000',
          ),
        ),
        2 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务结束时间，格式为Unix时间戳，单位为毫秒。
>任务结束时间需晚于任务开始时间。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1655427625000',
          ),
        ),
        3 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页最大记录数，默认值为10。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '10',
          ),
        ),
        5 => 
        array (
          'name' => 'InstanceArea',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例所属的数据库产品，取值：

* **RDS**：云实例。
* **ECS**：ECS自建实例。
* **IDC**：非公有云自建实例。

> IDC为用户数据中心。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'RDS',
          ),
        ),
        6 => 
        array (
          'name' => 'SearchMap',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '过滤条件，可以按照如下条件进行过滤：

- 以单个实例ID为过滤条件时，输入格式为：{"InstanceId":"实例ID"}。
- 以多个实例ID为过滤条件时，输入格式为：{"InstanceIds":\\["实例ID1","实例ID2"\\]}，其中实例ID间以英文逗号（,）分隔。
- 以实例所在地域为过滤条件时，输入格式为：{"region":"实例所在地域"}。',
            'type' => 'string',
            'required' => false,
            'example' => '{"InstanceId":"rm-bp10usoc1erj7****"}',
          ),
        ),
        7 => 
        array (
          'name' => 'ResourceGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源组ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'rg-aek2eil6npi****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Data' => 
              array (
                'description' => '详细信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'List' => 
                  array (
                    'description' => '详细信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'EndTime' => 
                        array (
                          'description' => '任务结束时间，格式为Unix时间戳，单位为毫秒。
>任务结束时间需晚于任务开始时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1608888296001',
                        ),
                        'StartTime' => 
                        array (
                          'description' => '任务开始时间，格式为Unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1608888296000',
                        ),
                        'Data' => 
                        array (
                          'description' => '返回的数据。',
                          'type' => 'object',
                          'example' => '"data": { "hasDeadLock": false, "exceptionTableMap": {}, "bigTransactionCount": 0, "cpu": 4, "isRds": true, "rdsEnable": true, "enable": false, "activeSessions": [], "bigTransactionList": [], "bigSessionList": [ { "blockDuration": 0, "active": false, "Time": 0, "db": "" },',
                        ),
                        'Instance' => 
                        array (
                          'description' => '实例信息。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'VpcId' => 
                            array (
                              'description' => '实例的VPC ID。',
                              'type' => 'string',
                              'example' => 'vpc-bp1knt7m55z9exoo7****',
                            ),
                            'Uuid' => 
                            array (
                              'description' => '实例的唯一标识符号。',
                              'type' => 'string',
                              'example' => 'hdm_3063db6792965c080a4bcb6e6304****',
                            ),
                            'InstanceArea' => 
                            array (
                              'description' => '实例所属的数据库产品，取值：

- **RDS**：云实例。
- **ECS**：ECS自建实例。
- **IDC**：非公有云自建实例。
> IDC为用户数据中心。',
                              'type' => 'string',
                              'example' => 'RDS',
                            ),
                            'InstanceClass' => 
                            array (
                              'description' => '实例的规格。',
                              'type' => 'string',
                              'example' => 'rds.mysql.s2.xlarge',
                            ),
                            'Region' => 
                            array (
                              'description' => '实例所属的地域ID。',
                              'type' => 'string',
                              'example' => 'cn-hangzhou',
                            ),
                            'AccountId' => 
                            array (
                              'description' => '账号ID，您可在阿里云**账号管理**的**安全设置**页面获取登录账号的ID。',
                              'type' => 'string',
                              'example' => '108398049688****',
                            ),
                            'NetworkType' => 
                            array (
                              'description' => '实例的网络类型。',
                              'type' => 'string',
                              'example' => 'VPC',
                            ),
                            'Engine' => 
                            array (
                              'description' => '数据库引擎，取值：

- **MySQL**
- **Redis**
- **PolarDBMySQL**',
                              'type' => 'string',
                              'example' => 'MySQL',
                            ),
                            'InstanceId' => 
                            array (
                              'description' => '实例ID。',
                              'type' => 'string',
                              'example' => 'rm-bp10usoc1erj7****',
                            ),
                            'NodeId' => 
                            array (
                              'description' => '实例的节点ID。',
                              'type' => 'string',
                              'example' => 'rm-bp10usoc1erj7****',
                            ),
                            'EngineVersion' => 
                            array (
                              'description' => '数据库引擎的版本号。',
                              'type' => 'string',
                              'example' => '8.0',
                            ),
                            'InstanceAlias' => 
                            array (
                              'description' => '实例名称',
                              'type' => 'string',
                              'example' => 'test-01',
                            ),
                            'Cpu' => 
                            array (
                              'description' => 'CPU规格，例如返回8时代表CPU规格为8核。',
                              'type' => 'string',
                              'example' => '8',
                            ),
                            'Memory' => 
                            array (
                              'description' => '数据库内存，单位为MB。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '32768',
                            ),
                            'Storage' => 
                            array (
                              'description' => '存储空间，单位为GB。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '150',
                            ),
                            'Category' => 
                            array (
                              'description' => '实例的访问模式，取值：
- **standard**：标准访问模式。
- **safe**：数据库代理模式。',
                              'type' => 'string',
                              'example' => 'standard',
                            ),
                          ),
                        ),
                        'ScoreMap' => 
                        array (
                          'description' => '扣分详情。',
                          'type' => 'object',
                        ),
                        'GmtCreate' => 
                        array (
                          'description' => '任务的创建时间，格式为Unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1603247192000',
                        ),
                        'Score' => 
                        array (
                          'description' => '巡检得分。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '100',
                        ),
                        'AutoFunction' => 
                        array (
                          'description' => '自治功能开启情况。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'EventSubscription' => 
                            array (
                              'description' => '事件订阅：

- **0**：关闭。
- **1**：开启。
- **2**：不支持。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'AutoIndex' => 
                            array (
                              'description' => '自动索引创建和删除：

- **0**：关闭。
- **1**：开启。
- **2**：不支持。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '2',
                            ),
                            'AutoLimitedSql' => 
                            array (
                              'description' => '自动限流：

- **0**：关闭。
- **1**：开启。
- **2**：不支持。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '2',
                            ),
                            'AutoResourceOptimize' => 
                            array (
                              'description' => '空间碎片自动回收：

- **0**：关闭。
- **1**：开启。
- **2**：不支持。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'AutoScale' => 
                            array (
                              'description' => '自动弹性伸缩：

- **0**：关闭。
- **1**：开启。
- **2**：不支持。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                          ),
                        ),
                        'EnableDasPro' => 
                        array (
                          'description' => 'DAS企业版：

- **0**：关闭。
- **1**：开启。
- **2**：不支持。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'State' => 
                        array (
                          'description' => '巡检任务状态：

- **0**：等待执行。
- **1**：正在执行。
- **2**：巡检完成。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '2',
                        ),
                        'TaskType' => 
                        array (
                          'description' => '巡检任务发起类型：

- **0**：自动。
- **1**：手动。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                      ),
                    ),
                  ),
                  'PageNo' => 
                  array (
                    'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页最大记录数，默认值为10。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'Total' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '4',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Data\\": {\\n    \\"List\\": [\\n      {\\n        \\"EndTime\\": 1608888296001,\\n        \\"StartTime\\": 1608888296000,\\n        \\"Data\\": {\\n          \\"test\\": \\"test\\",\\n          \\"test2\\": 1\\n        },\\n        \\"Instance\\": {\\n          \\"VpcId\\": \\"vpc-bp1knt7m55z9exoo7****\\",\\n          \\"Uuid\\": \\"hdm_3063db6792965c080a4bcb6e6304****\\",\\n          \\"InstanceArea\\": \\"RDS\\",\\n          \\"InstanceClass\\": \\"rds.mysql.s2.xlarge\\",\\n          \\"Region\\": \\"cn-hangzhou\\",\\n          \\"AccountId\\": \\"108398049688****\\",\\n          \\"NetworkType\\": \\"VPC\\",\\n          \\"Engine\\": \\"MySQL\\",\\n          \\"InstanceId\\": \\"rm-bp10usoc1erj7****\\",\\n          \\"NodeId\\": \\"rm-bp10usoc1erj7****\\",\\n          \\"EngineVersion\\": \\"8.0\\",\\n          \\"InstanceAlias\\": \\"test-01\\",\\n          \\"Cpu\\": \\"8\\",\\n          \\"Memory\\": 32768,\\n          \\"Storage\\": 150,\\n          \\"Category\\": \\"standard\\"\\n        },\\n        \\"ScoreMap\\": {\\n          \\"test\\": \\"test\\",\\n          \\"test2\\": 1\\n        },\\n        \\"GmtCreate\\": 1603247192000,\\n        \\"Score\\": 100,\\n        \\"AutoFunction\\": {\\n          \\"EventSubscription\\": 0,\\n          \\"AutoIndex\\": 2,\\n          \\"AutoLimitedSql\\": 2,\\n          \\"AutoResourceOptimize\\": 0,\\n          \\"AutoScale\\": 0\\n        },\\n        \\"EnableDasPro\\": 0,\\n        \\"State\\": 2,\\n        \\"TaskType\\": 0\\n      }\\n    ],\\n    \\"PageNo\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"Total\\": 4\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetInstanceInspectionsResponse>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Data>\\n        <List>\\n            <EndTime>1608888296001</EndTime>\\n            <StartTime>1608888296000</StartTime>\\n            <Instance>\\n                <VpcId>vpc-bp1knt7m55z9exoo7****</VpcId>\\n                <Uuid>hdm_3063db6792965c080a4bcb6e6304****</Uuid>\\n                <InstanceArea>RDS</InstanceArea>\\n                <InstanceClass>rds.mysql.s2.xlarge</InstanceClass>\\n                <Region>cn-hangzhou</Region>\\n                <AccountId>108398049688****</AccountId>\\n                <NetworkType>VPC</NetworkType>\\n                <Engine>MySQL</Engine>\\n                <InstanceId>rm-bp10usoc1erj7****</InstanceId>\\n                <NodeId>rm-bp10usoc1erj7****</NodeId>\\n                <EngineVersion>8.0</EngineVersion>\\n                <InstanceAlias>test-01</InstanceAlias>\\n                <Cpu>8</Cpu>\\n                <Memory>32768</Memory>\\n                <Storage>150</Storage>\\n                <Category>standard</Category>\\n            </Instance>\\n            <GmtCreate>1603247192000</GmtCreate>\\n            <Score>100</Score>\\n            <AutoFunction>\\n                <EventSubscription>0</EventSubscription>\\n                <AutoIndex>2</AutoIndex>\\n                <AutoLimitedSql>2</AutoLimitedSql>\\n                <AutoResourceOptimize>0</AutoResourceOptimize>\\n                <AutoScale>0</AutoScale>\\n            </AutoFunction>\\n            <EnableDasPro>0</EnableDasPro>\\n            <State>2</State>\\n            <TaskType>0</TaskType>\\n        </List>\\n        <PageNo>1</PageNo>\\n        <PageSize>10</PageSize>\\n        <Total>4</Total>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetInstanceInspectionsResponse>","errorExample":""}]',
      'title' => '获取数据库实例巡检评分结果',
      'description' => 'DAS支持巡检评分功能，可以对目标实例进行定期巡检并给出健康评分，帮助您清楚地了解数据库运行情况，更多信息，请参见[巡检评分](~~205659~~)。

使用该接口需满足以下前提条件：

- 本接口只适用于RDS MySQL、ECS上的MySQL自建库、IDC MySQL自建库、云数据库Redis、PolarDB MySQL版。
- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于4.3.3，建议使用最新版本。
- 使用DAS的SDK的版本为1.0.3或以上。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'SetEventSubscription' => 
    array (
      'summary' => '调用SetEventSubscription接口，配置数据库实例的事件订阅设置。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '实例ID',
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'EventContext',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '事件场景',
            'description' => '支持的事件场景，当前仅支持**AllContext**，表示支持所有场景。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'AllContext',
          ),
        ),
        2 => 
        array (
          'name' => 'Lang',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '语言',
            'description' => '事件通知的语言，当前仅支持**zh-CN**，表示事件通知为中文。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'zh-CN',
          ),
        ),
        3 => 
        array (
          'name' => 'MinInterval',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '通知最小间隔',
            'description' => '通知最小间隔时间，单位为秒（s）。',
            'type' => 'string',
            'required' => false,
            'example' => '60',
          ),
        ),
        4 => 
        array (
          'name' => 'ContactName',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '告警订阅人',
            'description' => '告警事件订阅人名称，多个名称间以英文逗号分隔。',
            'type' => 'string',
            'required' => false,
            'example' => '默认联系人',
          ),
        ),
        5 => 
        array (
          'name' => 'ChannelType',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '通知方式',
            'description' => '通知方式。
- **hdm\\_alarm\\_sms**：手机短信。
- **dingtalk**：钉钉机器人。
- **hdm\\_alarm\\_sms\\_and\\_email**：手机短信+邮件。
- **hdm\\_alarm\\_sms,dingtalk**：手机短信+钉钉机器人。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'hdm_alarm_sms,dingtalk',
          ),
        ),
        6 => 
        array (
          'name' => 'ContactGroupName',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '告警订阅组',
            'description' => '告警事件订阅组名称，多个名称以英文逗号分隔。',
            'type' => 'string',
            'required' => false,
            'example' => '默认联系组',
          ),
        ),
        7 => 
        array (
          'name' => 'Level',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '事件风险级别',
            'description' => '需要进行通知的事件级别，取值：
- **Notice**：通知（包含**Notice**、**Optimization**、**Warn**和**Critical**级别的事件）。
- **Optimization**：优化（包含**Optimization**、**Warn**和**Critical**级别的事件）。
- **Warn**：警告（包含**Warn**和**Critical**级别的事件）。
- **Critical**：严重（仅包含**Critical**级别的事件）。

各个级别事件的含义如下：

- 通知：暂无建议的数据库异常事件。
- 优化：根据数据库运行情况给出优化建议的事件。
- 警告：需要关注的可能会影响数据库的事件。
- 严重：影响数据库运行的事件。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'Optimization',
          ),
        ),
        8 => 
        array (
          'name' => 'Active',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '是否启用',
            'description' => '是否启用事件订阅功能：
- **0**：关闭。
- **1**：开启。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => '1',
          ),
        ),
        9 => 
        array (
          'name' => 'Severity',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '按照事件类型设置事件的告警级别。

输入格式：`{"事件类型1":"告警级别", "事件类型2":"告警级别"}`。

事件类型：

- **AutoScale**：弹性伸缩事件。
- **SQLThrottle**：限流事件。
- **TimeSeriesAbnormal**：时序异常检测事件。
- **SQLOptimize**：SQL优化事件。
- **ResourceOptimize**：空间优化事件。

告警级别：
- **info**：一般。
- **noticed**：通知。
- **warning**：警告。
- **critical**：严重。',
            'type' => 'string',
            'required' => false,
            'example' => '{"AutoScale":"critical","SQLThrottle":"info","TimeSeriesAbnormal":"warning"}',
          ),
        ),
        10 => 
        array (
          'name' => 'DispatchRule',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '按照事件类型设置事件的消息通知规则，此参数为空时，以**MinInterval**和**ChannelType**设置为准。

输入格式：`{"silenced": {"事件类型1":是否打开自适应静默, "事件类型2":是否打开自适应静默},"min_interval":{"事件类型1":通知最小间隔, "事件类型2":通知最小间隔},"alert_type": {"事件类型1":"通知方式", "事件类型2":"通知方式"}}`。

- **silenced**：是否打开自适应静默。打开自适应静默后，事件中连续告警的发送间隔变为**min\\_interval**设置值和该事件持续时间1/3中的最大值。
    - 1：打开。
    - 2：关闭。
- **min\\_interval**：通知最小间隔时间，单位为秒（s）。
- **alert_type**：通知方式，取值：
    - **hdm\\_alarm\\_sms**：手机短信。
    - **dingtalk**：钉钉机器人。
    - **hdm\\_alarm\\_sms\\_and\\_email**：手机短信+邮件。
    - **hdm\\_alarm\\_sms,dingtalk**：手机短信+钉钉机器人。',
            'type' => 'string',
            'required' => false,
            'example' => '{"silenced": {"AutoScale":1, "SQLThrottle":0, "TimeSeriesAbnormal": 1}, "min_interval": {"AutoScale":300, "SQLThrottle":360, "TimeSeriesAbnormal": 120}, "alert_type": {"AutoScale":"hdm_alarm_sms", "SQLThrottle":"hdm_alarm_sms_and_email", "TimeSeriesAbnormal": "hdm_alarm_sms,dingtalk"}}',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'description' => '返回信息列表。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '097F0C56-B252-515A-B602-FC56EF93EF8A',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'userId' => 
                  array (
                    'title' => '用户ID ',
                    'description' => '用户ID。',
                    'type' => 'string',
                    'example' => '1088760496****',
                  ),
                  'instanceId' => 
                  array (
                    'title' => '实例ID',
                    'description' => '实例ID。',
                    'type' => 'string',
                    'example' => 'rm-2ze8g2am97624****',
                  ),
                  'eventContext' => 
                  array (
                    'title' => '事件场景',
                    'description' => '支持的事件场景，当前仅支持**AllContext**，表示支持所有场景。',
                    'type' => 'string',
                    'example' => 'AllContext',
                  ),
                  'lang' => 
                  array (
                    'title' => '语言',
                    'description' => '事件通知的语言，当前仅支持**zh-CN**，表示事件通知为中文。',
                    'type' => 'string',
                    'example' => 'zh_CN',
                  ),
                  'active' => 
                  array (
                    'title' => '是否启用',
                    'description' => '是否启用事件订阅：
- **0**：关闭。
- **1**：开启。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'minInterval' => 
                  array (
                    'title' => '通知最小间隔',
                    'description' => '通知最小间隔时间，单位秒（s）。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '60',
                  ),
                  'contactName' => 
                  array (
                    'title' => '告警订阅人',
                    'description' => '告警事件订阅人名称，多个名称间以英文逗号分隔。',
                    'type' => 'string',
                    'example' => '默认联系人',
                  ),
                  'contactGroupName' => 
                  array (
                    'title' => '告警订阅组',
                    'description' => '告警事件订阅组名称，多个名称间以英文逗号分隔。',
                    'type' => 'string',
                    'example' => '默认联系组',
                  ),
                  'channelType' => 
                  array (
                    'title' => '通知方式',
                    'description' => '通知方式：
- **hdm\\_alarm\\_sms**：手机短信。
- **dingtalk**：钉钉机器人。
- **hdm\\_alarm\\_sms\\_and\\_email**：手机短信+邮件。
- **hdm\\_alarm\\_sms,dingtalk**：手机短信+钉钉机器人。',
                    'type' => 'string',
                    'example' => 'hdm_alarm_sms,dingtalk',
                  ),
                  'level' => 
                  array (
                    'title' => '事件风险级别',
                    'description' => '事件风险级别：
- **Notice**：通知。
- **Optimization**：优化。
- **Warn**：警告。
- **Critical**：严重。
',
                    'type' => 'string',
                    'example' => 'Optimization',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"097F0C56-B252-515A-B602-FC56EF93EF8A\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"userId\\": \\"1088760496****\\",\\n    \\"instanceId\\": \\"rm-2ze8g2am97624****\\",\\n    \\"eventContext\\": \\"AllContext\\",\\n    \\"lang\\": \\"zh_CN\\",\\n    \\"active\\": 1,\\n    \\"minInterval\\": 60,\\n    \\"contactName\\": \\"默认联系人\\",\\n    \\"contactGroupName\\": \\"默认联系组\\",\\n    \\"channelType\\": \\"hdm_alarm_sms,dingtalk\\",\\n    \\"level\\": \\"Optimization\\"\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<SetEventSubscriptionResponse>\\n    <RequestId>097F0C56-B252-515A-B602-FC56EF93EF8A</RequestId>\\n    <Message>Successful</Message>\\n    <Data>\\n        <userId>1088760496****</userId>\\n        <instanceId>rm-2ze8g2am97624****</instanceId>\\n        <eventContext>AllContext</eventContext>\\n        <lang>zh_CN</lang>\\n        <active>1</active>\\n        <minInterval>60</minInterval>\\n        <contactName>默认联系人</contactName>\\n        <contactGroupName>默认联系组</contactGroupName>\\n        <channelType>hdm_alarm_sms,dingtalk</channelType>\\n        <level>Optimization</level>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</SetEventSubscriptionResponse>","errorExample":""}]',
      'title' => '配置事件订阅设置',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 数据库实例已接入DAS。

<props="china"> <note>事件订阅已集成至告警功能。如果在控制台配置了事件告警，通过该API接口配置的事件订阅设置将被事件告警覆盖。配置事件告警请参见[配置告警](~~87017~~)。</note></props>',
    ),
    'GetEventSubscription' => 
    array (
      'summary' => '调用GetEventSubscription接口，获取数据库实例的事件订阅设置。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '实例ID。',
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****
',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'userId' => 
                  array (
                    'title' => '用户ID。',
                    'description' => '用户ID。',
                    'type' => 'string',
                    'example' => '1088760496****',
                  ),
                  'instanceId' => 
                  array (
                    'title' => '实例ID。',
                    'description' => '实例ID。',
                    'type' => 'string',
                    'example' => 'rm-2ze8g2am97624****',
                  ),
                  'eventContext' => 
                  array (
                    'title' => '事件场景。',
                    'description' => '支持的事件场景，当前仅支持**AllContext**，表示支持所有场景。',
                    'type' => 'string',
                    'example' => 'AllContext',
                  ),
                  'lang' => 
                  array (
                    'title' => '语言',
                    'description' => '事件通知的语言，当前仅支持**zh-CN**，表示事件通知为中文。',
                    'type' => 'string',
                    'example' => 'zh_CN',
                  ),
                  'active' => 
                  array (
                    'title' => '是否开启。',
                    'description' => '是否启用事件订阅：

- **0**：关闭。
- **1**：开启。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'minInterval' => 
                  array (
                    'title' => '通知最小间隔。',
                    'description' => '通知最小间隔时间，单位秒（s）。',
                    'type' => 'string',
                    'example' => '60',
                  ),
                  'contactName' => 
                  array (
                    'title' => '告警订阅人。',
                    'description' => '告警事件订阅人名称，多个名称间以英文逗号分隔。',
                    'type' => 'string',
                    'example' => '默认联系人',
                  ),
                  'contactGroupName' => 
                  array (
                    'title' => '告警订阅组',
                    'description' => '告警事件订阅组名称，多个名称间以英文逗号分隔。',
                    'type' => 'string',
                    'example' => '默认联系组',
                  ),
                  'channelType' => 
                  array (
                    'title' => '通知方式。',
                    'description' => '通知方式：

- **hdm\\_alarm\\_sms**：手机短信。
- **dingtalk**：钉钉机器人。
- **hdm\\_alarm\\_sms\\_and\\_email**：手机短信+邮件。
- **hdm\\_alarm\\_sms,dingtalk**：手机短信+钉钉机器人。',
                    'type' => 'string',
                    'example' => 'hdm_alarm_sms,dingtalk',
                  ),
                  'level' => 
                  array (
                    'title' => '事件风险级别。',
                    'description' => '事件风险级别，即触发哪种级别的事件后需要通知您：

- **Notice**：通知。
- **Optimization**：优化。
- **Warn**：警告。
- **Critical**：严重。',
                    'type' => 'string',
                    'example' => 'Optimization',
                  ),
                  'contacts' => 
                  array (
                    'title' => '告警联系人信息。',
                    'description' => '告警联系人列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'name' => 
                        array (
                          'title' => '告警联系人名称。',
                          'description' => '告警联系人名称。',
                          'type' => 'string',
                          'example' => '张先生',
                        ),
                        'phone' => 
                        array (
                          'title' => '告警联系人电话',
                          'description' => '告警联系人电话。',
                          'type' => 'string',
                          'example' => '1390000****',
                        ),
                        'email' => 
                        array (
                          'title' => '告警联系人邮箱。',
                          'description' => '告警联系人邮箱。',
                          'type' => 'string',
                          'example' => 'a***@example.net',
                        ),
                        'dingtalkHook' => 
                        array (
                          'title' => '告警联系人钉钉机器人webhook。',
                          'description' => '钉钉机器人的Webhook地址。',
                          'type' => 'string',
                          'example' => 'https://oapi.dingtalk.com/robot/send?access_token=68fa29a9eaf3ba9994f54fxxxc1aa9879700308f90e9c23ebfb3663642c9****',
                        ),
                        'groups' => 
                        array (
                          'title' => '告警联系人所属联系组列表。',
                          'description' => '告警联系人所属的联系组列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '告警联系人名称。',
                            'type' => 'string',
                            'example' => '张先生',
                          ),
                        ),
                        'isCmsReduplicated' => 
                        array (
                          'title' => '是否和云监控上的联系人重名。',
                          'description' => '是否和云监控上的联系人姓名相同。

- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'userId' => 
                        array (
                          'title' => '用户ID。',
                          'description' => '用户ID。',
                          'type' => 'string',
                          'example' => '1088760496****',
                        ),
                      ),
                    ),
                  ),
                  'contactGroups' => 
                  array (
                    'description' => '告警联系组列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'name' => 
                        array (
                          'title' => '告警联系人组姓名。',
                          'description' => '告警联系组名称。',
                          'type' => 'string',
                          'example' => '张先生',
                        ),
                        'description' => 
                        array (
                          'title' => '告警联系人组描述。',
                          'description' => '告警联系组描述。',
                          'type' => 'string',
                          'example' => '默认联系人',
                        ),
                        'contacts' => 
                        array (
                          'title' => '告警联系人组内成员。',
                          'description' => '告警联系组成员列表。',
                          'type' => 'string',
                          'example' => '"[\\"张先生\\",\\"王女士\\",\\"李先生\\"]"',
                        ),
                        'userId' => 
                        array (
                          'title' => '用户ID。',
                          'description' => '用户ID。',
                          'type' => 'string',
                          'example' => '1088760496****',
                        ),
                      ),
                    ),
                  ),
                  'eventSendGroup' => 
                  array (
                    'title' => '对应事件订阅的场景。',
                    'description' => '支持发送的事件场景列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '支持发送的事件场景，当前仅支持**AllContext**，表示支持所有场景。',
                      'type' => 'string',
                      'example' => 'AllContext',
                    ),
                  ),
                  'id' => 
                  array (
                    'title' => '订阅关系序号。',
                    'description' => '数据库主键ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'gmtCreate' => 
                  array (
                    'title' => '创建时间。',
                    'description' => '开启事件订阅的时间，格式为Unix时间戳，单位为毫秒（ms）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1633071840000',
                  ),
                  'gmtModified' => 
                  array (
                    'title' => '最后修改时间。',
                    'description' => '最后修改事件订阅设置的时间，格式为Unix时间戳，单位为毫秒（ms）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1633071850000',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"userId\\": \\"1088760496****\\",\\n    \\"instanceId\\": \\"rm-2ze8g2am97624****\\",\\n    \\"eventContext\\": \\"AllContext\\",\\n    \\"lang\\": \\"zh_CN\\",\\n    \\"active\\": 1,\\n    \\"minInterval\\": \\"60\\",\\n    \\"contactName\\": \\"默认联系人\\",\\n    \\"contactGroupName\\": \\"默认联系组\\",\\n    \\"channelType\\": \\"hdm_alarm_sms,dingtalk\\",\\n    \\"level\\": \\"Optimization\\",\\n    \\"contacts\\": [\\n      {\\n        \\"name\\": \\"张先生\\",\\n        \\"phone\\": \\"1390000****\\",\\n        \\"email\\": \\"a***@example.net\\",\\n        \\"dingtalkHook\\": \\"https://oapi.dingtalk.com/robot/send?access_token=68fa29a9eaf3ba9994f54fxxxc1aa9879700308f90e9c23ebfb3663642c9****\\",\\n        \\"groups\\": [\\n          \\"张先生\\"\\n        ],\\n        \\"isCmsReduplicated\\": true,\\n        \\"userId\\": \\"1088760496****\\"\\n      }\\n    ],\\n    \\"contactGroups\\": [\\n      {\\n        \\"name\\": \\"张先生\\",\\n        \\"description\\": \\"默认联系人\\",\\n        \\"contacts\\": \\"\\\\\\"[\\\\\\\\\\\\\\"张先生\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"王女士\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"李先生\\\\\\\\\\\\\\"]\\\\\\"\\",\\n        \\"userId\\": \\"1088760496****\\"\\n      }\\n    ],\\n    \\"eventSendGroup\\": [\\n      \\"AllContext\\"\\n    ],\\n    \\"id\\": 1,\\n    \\"gmtCreate\\": 1633071840000,\\n    \\"gmtModified\\": 1633071850000\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetEventSubscriptionResponse>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Message>Successful</Message>\\n    <Data>\\n        <userId>1088760496****</userId>\\n        <instanceId>rm-2ze8g2am97624****</instanceId>\\n        <eventContext>AllContext</eventContext>\\n        <lang>zh_CN</lang>\\n        <active>1</active>\\n        <minInterval>60</minInterval>\\n        <contactName>默认联系人</contactName>\\n        <contactGroupName>默认联系组</contactGroupName>\\n        <channelType>hdm_alarm_sms,dingtalk</channelType>\\n        <level>Optimization</level>\\n        <contacts>\\n            <name>张先生</name>\\n            <phone>1390000****</phone>\\n            <email>a***@example.net</email>\\n            <dingtalkHook>https://oapi.dingtalk.com/robot/send?access_token=68fa29a9eaf3ba9994f54fxxxc1aa9879700308f90e9c23ebfb3663642c9****</dingtalkHook>\\n            <groups>张先生</groups>\\n            <isCmsReduplicated>true</isCmsReduplicated>\\n            <userId>1088760496****</userId>\\n        </contacts>\\n        <contactGroups>\\n            <name>张先生</name>\\n            <description>默认联系人</description>\\n            <contacts>\\"[\\\\\\"张先生\\\\\\",\\\\\\"王女士\\\\\\",\\\\\\"李先生\\\\\\"]\\"</contacts>\\n            <userId>1088760496****</userId>\\n        </contactGroups>\\n        <eventSendGroup>AllContext</eventSendGroup>\\n        <id>1</id>\\n        <gmtCreate>1633071840000</gmtCreate>\\n        <gmtModified>1633071850000</gmtModified>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetEventSubscriptionResponse>","errorExample":""}]',
      'title' => '获取事件订阅设置',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 数据库实例已接入DAS。',
    ),
    'GetAutonomousNotifyEventContent' => 
    array (
      'summary' => '调用GetAutonomousNotifyEventContent接口，获取指定数据库实例自治事件的内容。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => '__context',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-18ff4a195d****',
          ),
        ),
        2 => 
        array (
          'name' => 'SpanId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '事件的唯一标识，您可调用[GetAutonomousNotifyEventsInRange](~~288371~~)接口查看返回参数中的SpanId。',
            'type' => 'string',
            'required' => true,
            'example' => '7e7b2774-95b8-4fa3-bd9c-0ab47cb7****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'string',
                'example' => '{\\"taskId\\":\\"7e1ba595-0889-48ff-a6ff-010f54991d****\\",\\"taskType\\":\\"SQL_OPTIMIZE\\",\\"advisorId\\":\\"636dc5f34664dd56ff0****\\",\\"sqlId\\":\\"e2b1d6c1ee1bb29555a828b59f16****\\",\\"indexAdviceCount\\":1,\\"indexAdvices\\":[{\\"schemaName\\":\\"das\\",\\"tableName\\":\\"students\\",\\"indexName\\":\\"idx_name\\",\\"columns\\":[\\"name\\"],\\"unique\\":false,\\"ddlAddIndex\\":\\"ALTER TABLE `das`.`students` ADD INDEX `idx_name` (`name`)\\",\\"priority\\":0,\\"optimizeId\\":\\"96232794517277511\\"}],\\"tuningAdvices\\":[],\\"improvement\\":8127.25,\\"supportLevel\\":3,\\"priority\\":\\"HIGH\\"}',
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Data\\": \\"{\\\\\\\\\\\\\\"taskId\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"7e1ba595-0889-48ff-a6ff-010f54991d****\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"taskType\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"SQL_OPTIMIZE\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"advisorId\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"636dc5f34664dd56ff0****\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"sqlId\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"e2b1d6c1ee1bb29555a828b59f16****\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"indexAdviceCount\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\"indexAdvices\\\\\\\\\\\\\\":[{\\\\\\\\\\\\\\"schemaName\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"das\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"tableName\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"students\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"indexName\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"idx_name\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\":[\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\"],\\\\\\\\\\\\\\"unique\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\"ddlAddIndex\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"ALTER TABLE `das`.`students` ADD INDEX `idx_name` (`name`)\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"priority\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\"optimizeId\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"96232794517277511\\\\\\\\\\\\\\"}],\\\\\\\\\\\\\\"tuningAdvices\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\"improvement\\\\\\\\\\\\\\":8127.25,\\\\\\\\\\\\\\"supportLevel\\\\\\\\\\\\\\":3,\\\\\\\\\\\\\\"priority\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"HIGH\\\\\\\\\\\\\\"}\\",\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetAutonomousNotifyEventContentResponse>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Data>{\\"taskId\\":\\"7e1ba595-0889-48ff-a6ff-010f54991d****\\",\\"taskType\\":\\"SQL_OPTIMIZE\\",\\"advisorId\\":\\"636dc5f34664dd56ff0****\\",\\"sqlId\\":\\"e2b1d6c1ee1bb29555a828b59f16****\\",\\"indexAdviceCount\\":1,\\"indexAdvices\\":[{\\"schemaName\\":\\"das\\",\\"tableName\\":\\"students\\",\\"indexName\\":\\"idx_name\\",\\"columns\\":[\\"name\\"],\\"unique\\":false,\\"ddlAddIndex\\":\\"ALTER TABLE `das`.`students` ADD INDEX `idx_name` (`name`)\\",\\"priority\\":0,\\"optimizeId\\":\\"96232794517277511\\"}],\\"tuningAdvices\\":[],\\"improvement\\":8127.25,\\"supportLevel\\":3,\\"priority\\":\\"HIGH\\"}</Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetAutonomousNotifyEventContentResponse>","errorExample":""}]',
      'title' => '获取实例自治事件内容',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 当您的实例接入DAS之后，DAS异常检测发现数据库相关的监控指标发生变化，就会触发快照抓取等通知类事件。

 
>只有开启[自治中心](~~152139~~)才能获取通知事件的详情。',
    ),
    'GetAutonomousNotifyEventsInRange' => 
    array (
      'summary' => '调用GetAutonomousNotifyEventsInRange接口，获取指定类型或范围的通知事件。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => '__context',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-18ff4a195d****',
          ),
        ),
        2 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1568269711000',
          ),
        ),
        3 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务结束时间，格式为Unix时间戳，单位为毫秒。
>查询任务结束时间需晚于查询任务开始时间。',
            'type' => 'string',
            'required' => true,
            'example' => '1568265711221',
          ),
        ),
        4 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'PolarDB的节点ID，您可以通过调用[DescribeDBClusters](~~98094~~)接口查看返回参数的DBNodeId。
>仅支持PolarDB MySQL版实例。',
            'type' => 'string',
            'required' => false,
            'example' => 'r-x****-db-0',
          ),
        ),
        5 => 
        array (
          'name' => 'EventContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        6 => 
        array (
          'name' => 'Level',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定事件紧急程度，当该字段设置时，MinLevel参数将无效。取值：

- **Notice**：通知类事件。
- **Optimization**：优化类事件。
- **Warn**：警告类事件。
- **Critical**：危机类事件。',
            'type' => 'string',
            'required' => false,
            'example' => 'Warn',
          ),
        ),
        7 => 
        array (
          'name' => 'MinLevel',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '最小事件紧急程度。取值：

- **Notice**：通知类事件。
- **Optimization**：优化类事件。
- **Warn**：警告类事件。
- **Critical**：危机类事件。',
            'type' => 'string',
            'required' => false,
            'example' => 'Notice',
          ),
        ),
        8 => 
        array (
          'name' => 'PageOffset',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询，页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        9 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询，每页大小。',
            'type' => 'string',
            'required' => false,
            'example' => '30',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'object',
                'properties' => 
                array (
                  'List' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'T' => 
                      array (
                        'description' => '详细信息列表，包括信息总数、错误码等。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '详细信息列表。',
                          'type' => 'string',
                          'example' => '"T": []',
                        ),
                      ),
                    ),
                  ),
                  'PageNo' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页最大记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'Extra' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'Total' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '4',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Data\\": {\\n    \\"List\\": {\\n      \\"T\\": [\\n        \\"\\\\\\"T\\\\\\": []\\"\\n      ]\\n    },\\n    \\"PageNo\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"Extra\\": \\"None\\",\\n    \\"Total\\": 4\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetAutonomousNotifyEventsInRangeResponse>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Data>\\n        <List>\\n        </List>\\n        <PageNo>1</PageNo>\\n        <PageSize>10</PageSize>\\n        <Extra>None</Extra>\\n        <Total>4</Total>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetAutonomousNotifyEventsInRangeResponse>","errorExample":""}]',
      'title' => '获取指定类型或范围的通知事件',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 当您的实例接入DAS之后，DAS异常检测发现数据库相关的监控指标发生变化，就会触发快照抓取等通知类事件。

 
>只有开启[自治中心](~~152139~~)才能获取通知事件的详情。',
    ),
    'CreateDiagnosticReport' => 
    array (
      'summary' => '调用CreateDiagnosticReport接口，创建诊断报告。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DBInstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建任务开始时间，格式为Unix时间戳（UTC时间），单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1596177993000',
          ),
        ),
        2 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建任务结束时间，格式为Unix时间戳（UTC时间），单位为毫秒。
>创建任务结束时间需晚于创建任务开始时间。',
            'type' => 'string',
            'required' => true,
            'example' => '1596177993001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'ac544623-f6ad-45fd-9a74-9be3db65****',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'string',
                'example' => '70af71852fcdf2c5dc7b90596e2cf05b',
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"ac544623-f6ad-45fd-9a74-9be3db65****\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"70af71852fcdf2c5dc7b90596e2cf05b\\",\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateDiagnosticReportResponse>\\n    <RequestId>ac544623-f6ad-45fd-9a74-9be3db65****</RequestId>\\n    <Message>Successful</Message>\\n    <Data>70af71852fcdf2c5dc7b90596e2cf05b</Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</CreateDiagnosticReportResponse>","errorExample":""}]',
      'title' => '创建诊断报告',
      'description' => '使用该接口需满足以下前提条件：

- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于4.3.3，建议使用最新版本。
- 使用DAS的SDK的版本为1.0.3或以上。
- 在调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：

    - RDS MySQL
    - PolarDB MySQL版
    - Redis',
    ),
    'DescribeDiagnosticReportList' => 
    array (
      'summary' => '调用DescribeDiagnosticReportList接口，查询诊断报告。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DBInstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页最大记录数，默认值为10。',
            'type' => 'string',
            'required' => false,
            'example' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务开始时间，格式为Unix时间戳（UTC时间），单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1668398892000',
          ),
        ),
        4 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务结束时间，格式为Unix时间戳，单位为毫秒。
> 查询任务结束时间需晚于查询任务开始时间。',
            'type' => 'string',
            'required' => true,
            'example' => '1668420492000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'D00DB161-FEF6-5428-B37A-8D29A4C2****',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Synchro' => 
              array (
                'description' => '备用参数。',
                'type' => 'string',
                'example' => 'None',
              ),
              'Data' => 
              array (
                'description' => '返回的数据：

- **total**：数据量。
- **score**：诊断分数。
- **diagnosticTime**：诊断生成时间（UTC 时间）。
- **startTime**：查询开始时间（UTC 时间）。
- **endTime**：查询结束时间（UTC 时间）。',
                'type' => 'string',
                'example' => '{     "total": 1,     "list": [       {         "score": 100,         "diagnosticTime": "2022-11-14T08:17:00Z",         "startTime": "2022-11-14T07:16:59Z",         "endTime": "2022-11-14T08:16:59Z"       }     ]   }',
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"D00DB161-FEF6-5428-B37A-8D29A4C2****\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Synchro\\": \\"None\\",\\n  \\"Data\\": \\"{     \\\\\\"total\\\\\\": 1,     \\\\\\"list\\\\\\": [       {         \\\\\\"score\\\\\\": 100,         \\\\\\"diagnosticTime\\\\\\": \\\\\\"2022-11-14T08:17:00Z\\\\\\",         \\\\\\"startTime\\\\\\": \\\\\\"2022-11-14T07:16:59Z\\\\\\",         \\\\\\"endTime\\\\\\": \\\\\\"2022-11-14T08:16:59Z\\\\\\"       }     ]   }\\",\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeDiagnosticReportListResponse>\\n    <RequestId>D00DB161-FEF6-5428-B37A-8D29A4C2****</RequestId>\\n    <Message>Successful</Message>\\n    <Data>\\n        <total>1</total>\\n        <list>\\n            <score>100</score>\\n            <diagnosticTime>2022-11-14T08:17:00Z</diagnosticTime>\\n            <startTime>2022-11-14T07:16:59Z</startTime>\\n            <endTime>2022-11-14T08:16:59Z</endTime>\\n        </list>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</DescribeDiagnosticReportListResponse>","errorExample":""}]',
      'title' => '查询诊断报告',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：

    - RDS MySQL
    - PolarDB MySQL版
    - Redis',
    ),
    'GetDBInstanceConnectivityDiagnosis' => 
    array (
      'summary' => '获取用户输入IP地址到指定数据库实例的网络连通性诊断结果。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '实例ID',
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'SrcIp',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '源IP',
            'description' => '源IP地址。',
            'type' => 'string',
            'required' => true,
            'example' => '47.100.XX.XX',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回信息列表。',
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'instanceId' => 
                  array (
                    'title' => '实例ID',
                    'description' => '实例ID。',
                    'type' => 'string',
                    'example' => 'rm-2ze8g2am97624****',
                  ),
                  'success' => 
                  array (
                    'title' => '是否检测通过',
                    'description' => '是否检测通过：

- **true**：检测通过。
- **false**：检测不通过。',
                    'type' => 'boolean',
                    'enumValueTitles' => 
                    array (
                    ),
                    'example' => 'false',
                  ),
                  'failType' => 
                  array (
                    'title' => '异常类型',
                    'description' => '异常类型：

- **0**：用户可自助处理的。
- **1**：需要联系值班人员处理的。',
                    'type' => 'string',
                    'example' => '0',
                  ),
                  'connCheckErrorCode' => 
                  array (
                    'title' => '异常检测项',
                    'description' => '异常检测项：

- **SRC\\_IP\\_NOT\\_IN\\_USER\\_WHITELIST**：源IP地址没有配置在用户白名单中。
- **VIP\\_NOT\\_EXISTS**：VIP对应的ALB实例不存在。
- **RS\\_NOT\\_EXISTS**：RS不正常挂载。
- **VIP\\_TUNNEL\\_ID\\_NOT\\_CONSISTENT**：VPC类型VIP使用的TUNNEL ID与VPC对应的实际TUNNEL ID不一致。
- **VIP\\_VPC\\_CLOUD\\_INSTANCE\\_NOT\\_EXISTS**：VPC类型VIP不存在。
- **VIP\\_IS\\_NOT\\_NGLB**：VIP关闭了NGLB模式。
- **CUSTINS\\_NOT\\_ASSOCIATE\\_ECS\\_SECURITY\\_GROUP**：实例没有关联安全组。
- **SRC\\_IP\\_NOT\\_IN\\_USER\\_WHITELIST**：源IP地址没有配置在用户白名单中。
- **SRC\\_IP\\_NOT\\_IN\\_ADMIN\\_WHITELIST**：源IP地址没有配置在管理机白名单中。
- **SRC\\_IP\\_NOT\\_IN\\_ECS\\_SECURITY\\_GROUP**：源IP地址没有配置在实例关联的安全组中。
- **VPC\\_INSTANCE\\_IP\\_NOT\\_WORKING\\_STATUS**：VPC IP地址状态异常。',
                    'type' => 'string',
                    'example' => 'SRC_IP_NOT_IN_USER_WHITELIST',
                  ),
                  'connCheckErrorMessage' => 
                  array (
                    'title' => '异常检测详情信息',
                    'description' => '异常检测详情信息。',
                    'type' => 'string',
                    'example' => 'Src ip:47.100.XX.XX not in user whitelist',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：
* **true**：执行成功。
* **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"instanceId\\": \\"rm-2ze8g2am97624****\\",\\n    \\"success\\": false,\\n    \\"failType\\": \\"0\\",\\n    \\"connCheckErrorCode\\": \\"SRC_IP_NOT_IN_USER_WHITELIST\\",\\n    \\"connCheckErrorMessage\\": \\"Src ip:47.100.XX.XX not in user whitelist\\"\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","type":"json"}]',
      'title' => '获取数据库实例网络连通性诊断结果',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 数据库实例已接入DAS。',
    ),
    'CreateCacheAnalysisJob' => 
    array (
      'summary' => '调用CreateCacheAnalysisJob接口，创建缓存分析任务。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Redis实例ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'r-bp18ff4a195d****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例的数据节点ID，传入本参数可查询指定节点的监控信息。
>当您传入BackupSetId参数，系统会忽略此参数，您可调用[DescribeLogicInstanceTopology](~~94665~~)接口查询节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'r-x****-db-0',
          ),
        ),
        2 => 
        array (
          'name' => 'BackupSetId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备份文件ID，可以通过[DescribeBackups](~~61081~~)接口获取。

- 如需传入多个备份文件ID，请使用英文逗号（,）分隔，例如`12345,67890`。
- 如果不传入本参数，系统会自动执行备份并对该备份文件执行缓存分析。',
            'type' => 'string',
            'required' => false,
            'example' => '12345',
          ),
        ),
        3 => 
        array (
          'name' => 'Separators',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用于识别Key前缀的分隔符。当分隔符为默认的`:;,_-+@=|#`时，不需要输入。',
            'type' => 'string',
            'required' => false,
            'example' => '&',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'TaskState' => 
                  array (
                    'description' => '缓存分析任务的状态：

- **BACKUP**：备份中。
- **ANALYZING**：分析中。
- **FINISHED**：分析完成。
- **FAILED**：出现错误。',
                    'type' => 'string',
                    'example' => 'BACKUP',
                  ),
                  'JobId' => 
                  array (
                    'description' => '缓存分析任务ID。
>此参数可用于查询缓存分析任务使用，当您调用该API时，由于创建缓存分析任务需要一定的时间，不会立即返回分析结果，您需要通过此参数，结合[DescribeCacheAnalysisJob](~~180983~~)接口，查询具体的分析结果。',
                    'type' => 'string',
                    'example' => 'sf79-sd99-sa37-****',
                  ),
                  'Message' => 
                  array (
                    'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                    'type' => 'string',
                    'example' => 'Successful',
                  ),
                  'BigKeys' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'KeyInfo' => 
                      array (
                        'description' => '大Key详细信息，根据Key占用字节数降序排列。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Type' => 
                            array (
                              'description' => 'Redis数据结构类型。',
                              'type' => 'string',
                              'example' => 'hash',
                            ),
                            'Db' => 
                            array (
                              'description' => '数据库名称。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExpirationTimeMillis' => 
                            array (
                              'description' => 'Key过期时间，单位：毫秒（ms），0表示不过期。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1596256542547',
                            ),
                            'Key' => 
                            array (
                              'description' => 'Key的名称。',
                              'type' => 'string',
                              'example' => 'task_x****',
                            ),
                            'Encoding' => 
                            array (
                              'description' => 'Key内部数据类型。',
                              'type' => 'string',
                              'example' => 'hashtable',
                            ),
                            'Bytes' => 
                            array (
                              'description' => 'Key占用字节数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '12345',
                            ),
                            'NodeId' => 
                            array (
                              'description' => '实例的数据节点ID。',
                              'type' => 'string',
                              'example' => 'r-x****-db-0',
                            ),
                            'Count' => 
                            array (
                              'description' => 'Key的元素个数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '127',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'InstanceId' => 
                  array (
                    'description' => '实例ID。',
                    'type' => 'string',
                    'example' => 'r-bp18ff4a195d****',
                  ),
                  'NodeId' => 
                  array (
                    'description' => '实例的数据节点ID。',
                    'type' => 'string',
                    'example' => 'r-x****-db-0',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Data\\": {\\n    \\"TaskState\\": \\"BACKUP\\",\\n    \\"JobId\\": \\"sf79-sd99-sa37-****\\",\\n    \\"Message\\": \\"Successful\\",\\n    \\"BigKeys\\": {\\n      \\"KeyInfo\\": [\\n        {\\n          \\"Type\\": \\"hash\\",\\n          \\"Db\\": 0,\\n          \\"ExpirationTimeMillis\\": 1596256542547,\\n          \\"Key\\": \\"task_x****\\",\\n          \\"Encoding\\": \\"hashtable\\",\\n          \\"Bytes\\": 12345,\\n          \\"NodeId\\": \\"r-x****-db-0\\",\\n          \\"Count\\": 127\\n        }\\n      ]\\n    },\\n    \\"InstanceId\\": \\"r-bp18ff4a195d****\\",\\n    \\"NodeId\\": \\"r-x****-db-0\\"\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateCacheAnalysisJobResponse>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Data>\\n        <TaskState>BACKUP</TaskState>\\n        <JobId>sf79-sd99-sa37-****</JobId>\\n        <Message>Successful</Message>\\n        <BigKeys>\\n            <Type>hash</Type>\\n            <Db>0</Db>\\n            <ExpirationTimeMillis>1596256542547</ExpirationTimeMillis>\\n            <Key>task_x****</Key>\\n            <Encoding>hashtable</Encoding>\\n            <Bytes>12345</Bytes>\\n            <NodeId>r-x****-db-0</NodeId>\\n            <Count>127</Count>\\n        </BigKeys>\\n        <InstanceId>r-bp18ff4a195d****</InstanceId>\\n        <NodeId>r-x****-db-0</NodeId>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</CreateCacheAnalysisJobResponse>","errorExample":""}]',
      'title' => '创建缓存分析任务',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 只支持分析Redis数据结构和以下Tair自研数据结构：TairString、TairHash、TairGIS、TairBloom、TairDoc、TairCpc、TairZset，暂不支持分析其他Tair自研数据结构。
- 如果目标实例规格已发生变更，则不支持分析实例变更前的备份文件。
- 暂不支持Tair磁盘型实例。',
    ),
    'DescribeCacheAnalysisJob' => 
    array (
      'summary' => '调用DescribeCacheAnalysisJob接口，查询缓存分析任务详情。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '23813',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREhdmJC65CS',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'r-bp18ff4a195d****',
          ),
        ),
        1 => 
        array (
          'name' => 'JobId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '缓存分析任务ID，您可通过调用[CreateCacheAnalysisJob](~~180982~~)接口获取返回参数的JobId。',
            'type' => 'string',
            'required' => true,
            'example' => 'sf79-sd99-sa37-****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'TaskState' => 
                  array (
                    'description' => '缓存分析任务的状态：

- **BACKUP**：备份中。
- **ANALYZING**：分析中。
- **FINISHED**：分析完成。
- **FAILED**：出现错误。',
                    'type' => 'string',
                    'example' => 'BACKUP',
                  ),
                  'JobId' => 
                  array (
                    'description' => '缓存分析任务ID。',
                    'type' => 'string',
                    'example' => 'sf79-sd99-sa37-****',
                  ),
                  'Message' => 
                  array (
                    'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                    'type' => 'string',
                    'example' => 'Successful',
                  ),
                  'BigKeys' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'KeyInfo' => 
                      array (
                        'description' => '大Key详细信息，根据Key占用字节数降序排列。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Type' => 
                            array (
                              'description' => 'Redis数据结构类型。',
                              'type' => 'string',
                              'example' => 'hash',
                            ),
                            'Db' => 
                            array (
                              'description' => '数据库名称。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExpirationTimeMillis' => 
                            array (
                              'description' => 'Key过期时间，格式为 Unix 时间戳，单位为毫秒（ms），0表示不过期。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1596256542547',
                            ),
                            'Key' => 
                            array (
                              'description' => 'Key的名称。',
                              'type' => 'string',
                              'example' => 'task_x****',
                            ),
                            'Encoding' => 
                            array (
                              'description' => 'Key内部数据类型。',
                              'type' => 'string',
                              'example' => 'hashtable',
                            ),
                            'Bytes' => 
                            array (
                              'description' => 'Key占用字节数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '12345',
                            ),
                            'NodeId' => 
                            array (
                              'description' => '实例的数据节点ID。',
                              'type' => 'string',
                              'example' => 'r-x****-db-0',
                            ),
                            'Count' => 
                            array (
                              'description' => 'Key的元素个数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '127',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'KeyPrefixes' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Prefix' => 
                      array (
                        'description' => 'Key前缀列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'KeyNum' => 
                            array (
                              'description' => '该前缀Key的数量。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '123',
                            ),
                            'Type' => 
                            array (
                              'description' => 'Redis数据结构类型。',
                              'type' => 'string',
                              'example' => 'hash',
                            ),
                            'Bytes' => 
                            array (
                              'description' => 'Key占用字节数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '12345',
                            ),
                            'Prefix' => 
                            array (
                              'description' => 'Key的前缀。',
                              'type' => 'string',
                              'example' => 'task_',
                            ),
                            'Count' => 
                            array (
                              'description' => 'Key的元素个数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '127',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'BigKeysOfNum' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'KeyInfo' => 
                      array (
                        'description' => '大Key详细信息，根据Key数量降序排列。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Type' => 
                            array (
                              'description' => 'Redis数据结构类型。',
                              'type' => 'string',
                              'example' => 'hash',
                            ),
                            'Db' => 
                            array (
                              'description' => '数据库名称。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExpirationTimeMillis' => 
                            array (
                              'description' => 'Key过期时间，格式为 Unix 时间戳，单位为毫秒（ms），0表示不过期。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1596256542547',
                            ),
                            'Key' => 
                            array (
                              'description' => 'Key的名称。',
                              'type' => 'string',
                              'example' => 'task_x****',
                            ),
                            'Encoding' => 
                            array (
                              'description' => 'Key内部数据类型。',
                              'type' => 'string',
                              'example' => 'hashtable',
                            ),
                            'Bytes' => 
                            array (
                              'description' => 'Key占用字节数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '12345',
                            ),
                            'NodeId' => 
                            array (
                              'description' => '实例的数据节点ID。',
                              'type' => 'string',
                              'example' => 'r-x****-db-0',
                            ),
                            'Count' => 
                            array (
                              'description' => 'Key的元素个数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '127',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'UnexBigKeysOfBytes' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'KeyInfo' => 
                      array (
                        'description' => '永不过期Key的详细信息，根据Key占用字节数降序排列。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Type' => 
                            array (
                              'description' => 'Redis数据结构类型。',
                              'type' => 'string',
                              'example' => 'hash',
                            ),
                            'Db' => 
                            array (
                              'description' => '数据库名称。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExpirationTimeMillis' => 
                            array (
                              'description' => 'Key过期时间，格式为 Unix 时间戳，单位为毫秒（ms），0表示不过期。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1596256542547',
                            ),
                            'Key' => 
                            array (
                              'description' => 'Key的名称。',
                              'type' => 'string',
                              'example' => 'task_x****',
                            ),
                            'Encoding' => 
                            array (
                              'description' => 'Key内部数据类型。',
                              'type' => 'string',
                              'example' => 'hashtable',
                            ),
                            'Bytes' => 
                            array (
                              'description' => 'Key占用字节数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '12345',
                            ),
                            'NodeId' => 
                            array (
                              'description' => '实例的数据节点ID',
                              'type' => 'string',
                              'example' => 'r-x****-db-0',
                            ),
                            'Count' => 
                            array (
                              'description' => 'Key的元素个数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '127',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'UnexBigKeysOfNum' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'KeyInfo' => 
                      array (
                        'description' => '永不过期Key的详细信息，根据Key数量降序排列。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Type' => 
                            array (
                              'description' => 'Redis数据结构类型。',
                              'type' => 'string',
                              'example' => 'hash',
                            ),
                            'Db' => 
                            array (
                              'description' => '数据库名称。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExpirationTimeMillis' => 
                            array (
                              'description' => 'Key过期时间，格式为 Unix 时间戳，单位为毫秒（ms），0表示不过期。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1596256542547',
                            ),
                            'Key' => 
                            array (
                              'description' => 'Key的名称。',
                              'type' => 'string',
                              'example' => 'task_x****',
                            ),
                            'Encoding' => 
                            array (
                              'description' => 'Key内部数据类型。',
                              'type' => 'string',
                              'example' => 'hashtable',
                            ),
                            'Bytes' => 
                            array (
                              'description' => 'Key占用字节数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '12345',
                            ),
                            'NodeId' => 
                            array (
                              'description' => '实例的数据节点ID。',
                              'type' => 'string',
                              'example' => 'r-x****-db-0',
                            ),
                            'Count' => 
                            array (
                              'description' => 'Key的元素个数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '127',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'InstanceId' => 
                  array (
                    'description' => '实例ID。',
                    'type' => 'string',
                    'example' => 'r-bp18ff4a195d****',
                  ),
                  'NodeId' => 
                  array (
                    'description' => '实例的数据节点ID。',
                    'type' => 'string',
                    'example' => 'r-x****-db-0',
                  ),
                  'ExpiryKeysLevelCount' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'ExpiryLevel' => 
                      array (
                        'description' => '按过期时间分类的Key统计信息。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '按过期时间分类的Key统计信息。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'AnalysisTs' => 
                            array (
                              'description' => '分析完成的时间，格式为 Unix 时间戳，单位为毫秒（ms）。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1717469347000',
                            ),
                            'Level' => 
                            array (
                              'description' => '过期时间级别。取值：

- **0**：不过期。
- **1**：已过期。
- **2**：过期0~1小时。
- **3**：过期1~3小时。
- **4**：过期3~12小时。
- **5**：过期12~24小时。
- **6**：过期1~2天。
- **7**：过期3~7天。
- **8**：过期超过7天。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'TotalBytes' => 
                            array (
                              'description' => '按过期时间分类统计的Key占用的字节数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '8064',
                            ),
                            'TotalKeys' => 
                            array (
                              'description' => '按过期时间分类统计的Key总数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '62',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Data\\": {\\n    \\"TaskState\\": \\"BACKUP\\",\\n    \\"JobId\\": \\"sf79-sd99-sa37-****\\",\\n    \\"Message\\": \\"Successful\\",\\n    \\"BigKeys\\": {\\n      \\"KeyInfo\\": [\\n        {\\n          \\"Type\\": \\"hash\\",\\n          \\"Db\\": 0,\\n          \\"ExpirationTimeMillis\\": 1596256542547,\\n          \\"Key\\": \\"task_x****\\",\\n          \\"Encoding\\": \\"hashtable\\",\\n          \\"Bytes\\": 12345,\\n          \\"NodeId\\": \\"r-x****-db-0\\",\\n          \\"Count\\": 127\\n        }\\n      ]\\n    },\\n    \\"KeyPrefixes\\": {\\n      \\"Prefix\\": [\\n        {\\n          \\"KeyNum\\": 123,\\n          \\"Type\\": \\"hash\\",\\n          \\"Bytes\\": 12345,\\n          \\"Prefix\\": \\"task_\\",\\n          \\"Count\\": 127\\n        }\\n      ]\\n    },\\n    \\"BigKeysOfNum\\": {\\n      \\"KeyInfo\\": [\\n        {\\n          \\"Type\\": \\"hash\\",\\n          \\"Db\\": 0,\\n          \\"ExpirationTimeMillis\\": 1596256542547,\\n          \\"Key\\": \\"task_x****\\",\\n          \\"Encoding\\": \\"hashtable\\",\\n          \\"Bytes\\": 12345,\\n          \\"NodeId\\": \\"r-x****-db-0\\",\\n          \\"Count\\": 127\\n        }\\n      ]\\n    },\\n    \\"UnexBigKeysOfBytes\\": {\\n      \\"KeyInfo\\": [\\n        {\\n          \\"Type\\": \\"hash\\",\\n          \\"Db\\": 0,\\n          \\"ExpirationTimeMillis\\": 1596256542547,\\n          \\"Key\\": \\"task_x****\\",\\n          \\"Encoding\\": \\"hashtable\\",\\n          \\"Bytes\\": 12345,\\n          \\"NodeId\\": \\"r-x****-db-0\\",\\n          \\"Count\\": 127\\n        }\\n      ]\\n    },\\n    \\"UnexBigKeysOfNum\\": {\\n      \\"KeyInfo\\": [\\n        {\\n          \\"Type\\": \\"hash\\",\\n          \\"Db\\": 0,\\n          \\"ExpirationTimeMillis\\": 1596256542547,\\n          \\"Key\\": \\"task_x****\\",\\n          \\"Encoding\\": \\"hashtable\\",\\n          \\"Bytes\\": 12345,\\n          \\"NodeId\\": \\"r-x****-db-0\\",\\n          \\"Count\\": 127\\n        }\\n      ]\\n    },\\n    \\"InstanceId\\": \\"r-bp18ff4a195d****\\",\\n    \\"NodeId\\": \\"r-x****-db-0\\",\\n    \\"ExpiryKeysLevelCount\\": {\\n      \\"ExpiryLevel\\": [\\n        {\\n          \\"AnalysisTs\\": 1717469347000,\\n          \\"Level\\": 0,\\n          \\"TotalBytes\\": 8064,\\n          \\"TotalKeys\\": 62\\n        }\\n      ]\\n    }\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeCacheAnalysisJobResponse>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Data>\\n        <TaskState>BACKUP</TaskState>\\n        <JobId>sf79-sd99-sa37-****</JobId>\\n        <Message>Successful</Message>\\n        <BigKeys>\\n            <Type>hash</Type>\\n            <Db>0</Db>\\n            <ExpirationTimeMillis>1596256542547</ExpirationTimeMillis>\\n            <Key>task_x****</Key>\\n            <Encoding>hashtable</Encoding>\\n            <Bytes>12345</Bytes>\\n            <NodeId>r-x****-db-0</NodeId>\\n            <Count>127</Count>\\n        </BigKeys>\\n        <KeyPrefixes>\\n            <KeyNum>123</KeyNum>\\n            <Type>hash</Type>\\n            <Bytes>12345</Bytes>\\n            <Prefix>task_</Prefix>\\n            <Count>127</Count>\\n        </KeyPrefixes>\\n        <BigKeysOfNum>\\n            <Type>hash</Type>\\n            <Db>0</Db>\\n            <ExpirationTimeMillis>1596256542547</ExpirationTimeMillis>\\n            <Key>task_x****</Key>\\n            <Encoding>hashtable</Encoding>\\n            <Bytes>12345</Bytes>\\n            <NodeId>r-x****-db-0</NodeId>\\n            <Count>127</Count>\\n        </BigKeysOfNum>\\n        <UnexBigKeysOfBytes>\\n            <Type>hash</Type>\\n            <Db>0</Db>\\n            <ExpirationTimeMillis>1596256542547</ExpirationTimeMillis>\\n            <Key>task_x****</Key>\\n            <Encoding>hashtable</Encoding>\\n            <Bytes>12345</Bytes>\\n            <NodeId>r-x****-db-0</NodeId>\\n            <Count>127</Count>\\n        </UnexBigKeysOfBytes>\\n        <UnexBigKeysOfNum>\\n            <Type>hash</Type>\\n            <Db>0</Db>\\n            <ExpirationTimeMillis>1596256542547</ExpirationTimeMillis>\\n            <Key>task_x****</Key>\\n            <Encoding>hashtable</Encoding>\\n            <Bytes>12345</Bytes>\\n            <NodeId>r-x****-db-0</NodeId>\\n            <Count>127</Count>\\n        </UnexBigKeysOfNum>\\n        <InstanceId>r-bp18ff4a195d****</InstanceId>\\n        <NodeId>r-x****-db-0</NodeId>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</DescribeCacheAnalysisJobResponse>","errorExample":""}]',
      'title' => '查询缓存分析任务详情',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口只适用于Redis引擎。

> 调用本接口可查询实例缓存分析任务中排名前500的Key信息。',
    ),
    'DescribeCacheAnalysisJobs' => 
    array (
      'summary' => '调用DescribeCacheAnalysisJobs接口，查询缓存分析任务列表。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'r-bp18ff4a195d****',
          ),
        ),
        1 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1596177993000',
          ),
        ),
        2 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务结束时间，格式为Unix时间戳，单位为毫秒。
>查询任务结束时间需晚于查询任务开始时间。',
            'type' => 'string',
            'required' => true,
            'example' => '1596177993001',
          ),
        ),
        3 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页最大记录数，默认值为10。',
            'type' => 'string',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Data' => 
              array (
                'description' => '信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'List' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'CacheAnalysisJob' => 
                      array (
                        'description' => '信息详情。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'TaskState' => 
                            array (
                              'description' => '缓存分析任务的状态：

- **BACKUP**：备份中。
- **ANALYZING**：分析中。
- **FINISHED**：分析完成。
- **FAILED**：出现错误。',
                              'type' => 'string',
                              'example' => 'BACKUP',
                            ),
                            'JobId' => 
                            array (
                              'description' => '缓存分析任务ID。',
                              'type' => 'string',
                              'example' => 'sf79-sd99-sa37-****',
                            ),
                            'Message' => 
                            array (
                              'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                              'type' => 'string',
                              'example' => 'Successful',
                            ),
                            'BigKeys' => 
                            array (
                              'type' => 'object',
                              'properties' => 
                              array (
                                'KeyInfo' => 
                                array (
                                  'description' => '大Key详细信息。

>当前已不再返回该参数的子参数及其内容，请调用[DescribeCacheAnalysisJob](~~180983~~)接口查询缓存分析任务的详细信息。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'type' => 'object',
                                    'properties' => 
                                    array (
                                      'Type' => 
                                      array (
                                        'description' => 'Redis数据结构类型。',
                                        'type' => 'string',
                                        'example' => 'hash',
                                      ),
                                      'Db' => 
                                      array (
                                        'description' => '数据库名称。',
                                        'type' => 'integer',
                                        'format' => 'int32',
                                        'example' => '0',
                                      ),
                                      'ExpirationTimeMillis' => 
                                      array (
                                        'description' => 'Key过期时间，单位：毫秒（ms），0表示不过期。',
                                        'type' => 'integer',
                                        'format' => 'int64',
                                        'example' => '1596256542547',
                                      ),
                                      'Key' => 
                                      array (
                                        'description' => 'Key的名称。',
                                        'type' => 'string',
                                        'example' => 'task_*****',
                                      ),
                                      'Encoding' => 
                                      array (
                                        'description' => 'Key内部数据类型。',
                                        'type' => 'string',
                                        'example' => 'hashtable',
                                      ),
                                      'Bytes' => 
                                      array (
                                        'description' => 'Key占用字节数。',
                                        'type' => 'integer',
                                        'format' => 'int64',
                                        'example' => '12345',
                                      ),
                                      'NodeId' => 
                                      array (
                                        'description' => '实例的数据节点ID。',
                                        'type' => 'string',
                                        'example' => 'r-****-db-0',
                                      ),
                                      'Count' => 
                                      array (
                                        'description' => 'Key的元素个数。',
                                        'type' => 'integer',
                                        'format' => 'int64',
                                        'example' => '127',
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                            'InstanceId' => 
                            array (
                              'description' => '实例ID。',
                              'type' => 'string',
                              'example' => 'r-bp18ff4a195d****',
                            ),
                            'NodeId' => 
                            array (
                              'description' => '实例的数据节点ID。',
                              'type' => 'string',
                              'example' => 'r-x****-db-0',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'PageNo' => 
                  array (
                    'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页最大记录数，默认值为10。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'Extra' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'Total' => 
                  array (
                    'description' => '结果数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '4',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Data\\": {\\n    \\"List\\": {\\n      \\"CacheAnalysisJob\\": [\\n        {\\n          \\"TaskState\\": \\"BACKUP\\",\\n          \\"JobId\\": \\"sf79-sd99-sa37-****\\",\\n          \\"Message\\": \\"Successful\\",\\n          \\"BigKeys\\": {\\n            \\"KeyInfo\\": [\\n              {\\n                \\"Type\\": \\"hash\\",\\n                \\"Db\\": 0,\\n                \\"ExpirationTimeMillis\\": 1596256542547,\\n                \\"Key\\": \\"task_*****\\",\\n                \\"Encoding\\": \\"hashtable\\",\\n                \\"Bytes\\": 12345,\\n                \\"NodeId\\": \\"r-****-db-0\\",\\n                \\"Count\\": 127\\n              }\\n            ]\\n          },\\n          \\"InstanceId\\": \\"r-bp18ff4a195d****\\",\\n          \\"NodeId\\": \\"r-x****-db-0\\"\\n        }\\n      ]\\n    },\\n    \\"PageNo\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"Extra\\": \\"None\\",\\n    \\"Total\\": 4\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeCacheAnalysisJobsResponse>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Data>\\n        <List>\\n            <TaskState>BACKUP</TaskState>\\n            <JobId>sf79-sd99-sa37-****</JobId>\\n            <Message>Successful</Message>\\n            <BigKeys>\\n                <Type>hash</Type>\\n                <Db>0</Db>\\n                <ExpirationTimeMillis>1596256542547</ExpirationTimeMillis>\\n                <Key>task_*****</Key>\\n                <Encoding>hashtable</Encoding>\\n                <Bytes>12345</Bytes>\\n                <NodeId>r-****-db-0</NodeId>\\n                <Count>127</Count>\\n            </BigKeys>\\n            <InstanceId>r-bp18ff4a195d****</InstanceId>\\n            <NodeId>r-x****-db-0</NodeId>\\n        </List>\\n        <PageNo>1</PageNo>\\n        <PageSize>10</PageSize>\\n        <Extra>None</Extra>\\n        <Total>4</Total>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</DescribeCacheAnalysisJobsResponse>","errorExample":""}]',
      'title' => '查询缓存分析任务列表',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口只适用于Redis引擎。',
    ),
    'EnableSqlConcurrencyControl' => 
    array (
      'summary' => '调用EnableSqlConcurrencyControl接口，启用SQL限流来控制数据库请求访问量和SQL并发量。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。
>仅支持RDS MySQL和 PolarDB MySQL版实例。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        2 => 
        array (
          'name' => 'SqlType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '选择SQL的类型。取值：
- **SELECT**
- **UPDATE**
- **DELETE**',
            'type' => 'string',
            'required' => true,
            'example' => 'SELECT',
          ),
        ),
        3 => 
        array (
          'name' => 'MaxConcurrency',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL最大并发数，取值为大于或等于1的整数。
>当包含关键词的SQL达到最大并发数时会触发限流规则。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '3',
          ),
        ),
        4 => 
        array (
          'name' => 'SqlKeywords',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要限流的SQL关键词。
>多个关键词间用波浪线（~）分隔，SQL语句中需要同时包含这些关键词才会触发限流规则。',
            'type' => 'string',
            'required' => true,
            'example' => 'call~open~api~test~4~from~POP',
          ),
        ),
        5 => 
        array (
          'name' => 'ConcurrencyControlTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL限流的生效时长，单位为秒。
>限流规则仅在生效时间内开启。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '300',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'string',
                'example' => 'Null',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功
- **false**：执行失败',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"Null\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<EnableSqlConcurrencyControlResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\"Data\\": { \\"total\\": 1, \\"list\\":[...] }, \\"Code\\": 200, \\"Success\\": true }</Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</EnableSqlConcurrencyControlResponse>","errorExample":""}]',
      'title' => '启用SQL限流',
      'description' => '本接口适用的数据库引擎为：
- RDS MySQL
- PolarDB MySQL版',
    ),
    'DisableSqlConcurrencyControl' => 
    array (
      'summary' => '调用DisableSqlConcurrencyControl接口，关闭指定限流规则。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。
>仅支持RDS MySQL和PolarDB MySQL版实例。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        2 => 
        array (
          'name' => 'ItemId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前实例限流规则ID，可调用[GetRunningSqlConcurrencyControlRules](~~223538~~)接口获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'string',
                'example' => 'Null',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功
- **false**：执行失败',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"Null\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DisableSqlConcurrencyControlResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>Null</Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</DisableSqlConcurrencyControlResponse>","errorExample":""}]',
      'title' => '关闭指定限流规则',
      'description' => '本接口适用的数据库引擎为：
- RDS MySQL
- PolarDB MySQL版',
    ),
    'DisableAllSqlConcurrencyControlRules' => 
    array (
      'summary' => '调用DisableAllSqlConcurrencyControlRules接口，关闭全部正在执行的限流规则。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。
>仅支持RDS MySQL和 PolarDB MySQL版实例。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '备用参数。',
                'type' => 'string',
                'example' => 'None',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功
- **false**：执行失败',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"None\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DisableAllSqlConcurrencyControlRulesResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</DisableAllSqlConcurrencyControlRulesResponse>","errorExample":""}]',
      'title' => ' 关闭全部正在执行的限流规则',
      'description' => '本接口适用的数据库引擎为：
- RDS MySQL
- PolarDB MySQL版',
    ),
    'GetRunningSqlConcurrencyControlRules' => 
    array (
      'summary' => '调用GetRunningSqlConcurrencyControlRules接口，获取正在执行的限流规则。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。
>仅支持RDS MySQL和 PolarDB MySQL版实例。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页最大记录数，取值大于0且不超过Integer数据类型的最大值，默认值为10。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'object',
                'properties' => 
                array (
                  'Total' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '2',
                  ),
                  'List' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'runningRules' => 
                      array (
                        'description' => '返回信息列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ItemId' => 
                            array (
                              'description' => '当前实例的限流规则ID。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '16',
                            ),
                            'SqlType' => 
                            array (
                              'description' => '选择SQL的类型。取值：
- **SELECT**
- **UPDATE**
- **DELETE**',
                              'type' => 'string',
                              'example' => 'SELECT',
                            ),
                            'InstanceId' => 
                            array (
                              'description' => '实例ID。',
                              'type' => 'string',
                              'example' => 'rm-2ze1jdv45i7l6****',
                            ),
                            'SqlKeywords' => 
                            array (
                              'description' => '需要限流的SQL关键词。
>多个关键词间用波浪线（~）分隔，SQL语句中需要同时包含这些关键词才会触发限流规则。',
                              'type' => 'string',
                              'example' => 'call~open~api~test~4~from~POP',
                            ),
                            'StartTime' => 
                            array (
                              'description' => '获取正在执行的限流规则的开始时间，格式为Unix时间戳，单位为毫秒。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1608888296000',
                            ),
                            'KeywordsHash' => 
                            array (
                              'description' => '哈希值，根据输入的限流关键词计算出来的值。',
                              'type' => 'string',
                              'example' => 'b0b8aceeb43baea87b219c81767b****',
                            ),
                            'ConcurrencyControlTime' => 
                            array (
                              'description' => 'SQL限流的生效时长，单位为秒。
>限流规则仅在生效时间内开启。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '600',
                            ),
                            'UserId' => 
                            array (
                              'description' => '阿里云账号ID。',
                              'type' => 'string',
                              'example' => 'testxxx',
                            ),
                            'MaxConcurrency' => 
                            array (
                              'description' => 'SQL最大并发数，取值为大于或等于1的整数。
>当包含关键词的SQL达到最大并发数时会触发限流策略。',
                              'type' => 'string',
                              'example' => '2',
                            ),
                            'Status' => 
                            array (
                              'description' => '限流规则的生效状态，取值为**Open**：限流规则正在生效中。',
                              'type' => 'string',
                              'example' => 'Open',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功
- **false**：执行失败',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Total\\": 2,\\n    \\"List\\": {\\n      \\"runningRules\\": [\\n        {\\n          \\"ItemId\\": 16,\\n          \\"SqlType\\": \\"SELECT\\",\\n          \\"InstanceId\\": \\"rm-2ze1jdv45i7l6****\\",\\n          \\"SqlKeywords\\": \\"call~open~api~test~4~from~POP\\",\\n          \\"StartTime\\": 1608888296000,\\n          \\"KeywordsHash\\": \\"b0b8aceeb43baea87b219c81767b****\\",\\n          \\"ConcurrencyControlTime\\": 600,\\n          \\"UserId\\": \\"testxxx\\",\\n          \\"MaxConcurrency\\": \\"2\\",\\n          \\"Status\\": \\"Open\\"\\n        }\\n      ]\\n    }\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetRunningSqlConcurrencyControlRulesResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Total>2</Total>\\n        <List>\\n            <ItemId>16</ItemId>\\n            <SqlType>SELECT</SqlType>\\n            <InstanceId>rm-2ze1jdv45i7l6****</InstanceId>\\n            <SqlKeywords>call~open~api~test~4~from~POP</SqlKeywords>\\n            <StartTime>1608888296000</StartTime>\\n            <KeywordsHash>b0b8aceeb43baea87b219c81767b****</KeywordsHash>\\n            <ConcurrencyControlTime>600</ConcurrencyControlTime>\\n            <UserId>testxxx</UserId>\\n            <MaxConcurrency>2</MaxConcurrency>\\n            <Status>Open</Status>\\n        </List>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetRunningSqlConcurrencyControlRulesResponse>","errorExample":""}]',
      'title' => '获取正在执行的限流规则',
      'description' => '本接口适用的数据库引擎为：
- RDS MySQL
- PolarDB MySQL版',
    ),
    'GetSqlConcurrencyControlRulesHistory' => 
    array (
      'summary' => '调用GetSqlConcurrencyControlRulesHistory接口，获取正在执行或被触发过的限流规则。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。
>仅支持RDS MySQL和 PolarDB MySQL版实例。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页最大记录数，取值大于0且不超过Integer数据类型的最大值，默认值为10。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'object',
                'properties' => 
                array (
                  'Total' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '4',
                  ),
                  'List' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'rules' => 
                      array (
                        'description' => '详细信息列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ItemId' => 
                            array (
                              'description' => '当前实例的限流规则ID。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '16',
                            ),
                            'SqlType' => 
                            array (
                              'description' => '选择SQL的类型。取值：
- **SELECT**
- **UPDATE**
- **DELETE**',
                              'type' => 'string',
                              'example' => 'SELECT',
                            ),
                            'InstanceId' => 
                            array (
                              'description' => '实例ID。',
                              'type' => 'string',
                              'example' => 'rm-2ze1jdv45i7l6****',
                            ),
                            'SqlKeywords' => 
                            array (
                              'description' => '需要限流的SQL关键词。
>多个关键词间以波浪线（~）分隔，SQL语句中需要同时包含这些关键词才会触发限流规则。',
                              'type' => 'string',
                              'example' => 'call~open~api~test~4~from~POP',
                            ),
                            'StartTime' => 
                            array (
                              'description' => '获取限流规则历史的开始时间，格式为Unix时间戳，单位为毫秒。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1608888296000',
                            ),
                            'KeywordsHash' => 
                            array (
                              'description' => '哈希值，根据输入的限流关键词计算出来的值。',
                              'type' => 'string',
                              'example' => 'b0b8aceeb43baea87b219c81767b****',
                            ),
                            'ConcurrencyControlTime' => 
                            array (
                              'description' => 'SQL限流的生效时长，单位为秒。
>限流规则仅在生效时间内开启。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '600',
                            ),
                            'UserId' => 
                            array (
                              'description' => '用户ID。',
                              'type' => 'string',
                              'example' => 'testxxx',
                            ),
                            'MaxConcurrency' => 
                            array (
                              'description' => 'SQL最大并发数，取值为大于或等于1的整数。
>当包含关键词的SQL达到最大并发数时会触发限流策略。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '2',
                            ),
                            'Status' => 
                            array (
                              'description' => '限流规则的生效状态，取值：

- **Open**：限流规则正在生效中。
- **Closed**：限流规则已执行结束。',
                              'type' => 'string',
                              'example' => 'Open',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功
- **false**：执行失败',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Total\\": 4,\\n    \\"List\\": {\\n      \\"rules\\": [\\n        {\\n          \\"ItemId\\": 16,\\n          \\"SqlType\\": \\"SELECT\\",\\n          \\"InstanceId\\": \\"rm-2ze1jdv45i7l6****\\",\\n          \\"SqlKeywords\\": \\"call~open~api~test~4~from~POP\\",\\n          \\"StartTime\\": 1608888296000,\\n          \\"KeywordsHash\\": \\"b0b8aceeb43baea87b219c81767b****\\",\\n          \\"ConcurrencyControlTime\\": 600,\\n          \\"UserId\\": \\"testxxx\\",\\n          \\"MaxConcurrency\\": 2,\\n          \\"Status\\": \\"Open\\"\\n        }\\n      ]\\n    }\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetSqlConcurrencyControlRulesHistoryResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Total>4</Total>\\n        <List>\\n            <ItemId>16</ItemId>\\n            <SqlType>SELECT</SqlType>\\n            <InstanceId>rm-2ze1jdv45i7l6****</InstanceId>\\n            <SqlKeywords>call~open~api~test~4~from~POP</SqlKeywords>\\n            <StartTime>1608888296000</StartTime>\\n            <KeywordsHash>b0b8aceeb43baea87b219c81767b****</KeywordsHash>\\n            <ConcurrencyControlTime>600</ConcurrencyControlTime>\\n            <UserId>testxxx</UserId>\\n            <MaxConcurrency>2</MaxConcurrency>\\n            <Status>Open</Status>\\n        </List>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetSqlConcurrencyControlRulesHistoryResponse>","errorExample":""}]',
      'title' => '获取正在执行或被触发过的限流规则',
      'description' => '本接口适用的数据库引擎为：
- RDS MySQL
- PolarDB MySQL版',
    ),
    'GetSqlConcurrencyControlKeywordsFromSqlText' => 
    array (
      'summary' => '调用GetSqlConcurrencyControlKeywordsFromSqlText接口，根据原始SQL语句，生成限流关键词串。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze5hpn2b99d2****',
          ),
        ),
        2 => 
        array (
          'name' => 'SqlText',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待生成限流关键词的SQL文本。',
            'type' => 'string',
            'required' => true,
            'example' => 'SELECT * FROM test where name = \'das\'',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '根据模板化后的SQL生成的限流关键词串。',
                'type' => 'string',
                'example' => 'SELECT~FROM~test~where~name',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '30A643F5-D7A6-55F5-AB75-DF501427****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"SELECT~FROM~test~where~name\\",\\n  \\"RequestId\\": \\"30A643F5-D7A6-55F5-AB75-DF501427****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetSqlConcurrencyControlKeywordsFromSqlTextResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>SELECT~FROM~test~where~name</Data>\\n    <RequestId>30A643F5-D7A6-55F5-AB75-DF501427****</RequestId>\\n    <Success>true</Success>\\n</GetSqlConcurrencyControlKeywordsFromSqlTextResponse>","errorExample":""}]',
      'title' => '根据SQL语句生成限流关键词',
      'description' => '本接口适用的数据库引擎为：
- RDS MySQL
- PolarDB MySQL版',
      'responseParamsDescription' => '返回的限流关键词串，是根据模板化后的SQL生成的，如果需要限流某个特定值，则需要带上相应的参数。例如：原始SQL语句为`SELECT \\* FROM test where name = \'das\'`，返回的限流关键词串是`SELECT~FROM~test~where~name`，如果需要限流`name = \'das\'`，则需要在返回的限流关键词串中增加`~das`，即限流关键词串为`SELECT~FROM~test~where~name~das`。',
    ),
    'CreateRequestDiagnosis' => 
    array (
      'summary' => '调用CreateRequestDiagnosis接口，发起SQL诊断请求。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-0iwhhl8gx0ld6****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。
> 对于PolarDB MySQL版、PolarDB PostgreSQL版（兼容Oracle）和云数据库MongoDB等集群实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => '202****',
          ),
        ),
        2 => 
        array (
          'name' => 'Database',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库名。',
            'type' => 'string',
            'required' => true,
            'example' => 'das',
          ),
        ),
        3 => 
        array (
          'name' => 'Sql',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待诊断的SQL。',
            'type' => 'string',
            'required' => true,
            'example' => 'select * from test where name = \'mockUser\'',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回的消息。

> 请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '诊断ID，是诊断的唯一标识，后续用于查询诊断结果。',
                'type' => 'string',
                'example' => '61820b594664275c4429****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '800FBAF5-A539-5B97-A09E-C63AB2F7****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"61820b594664275c4429****\\",\\n  \\"RequestId\\": \\"800FBAF5-A539-5B97-A09E-C63AB2F7****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateRequestDiagnosisResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>61820b594664275c4429****</Data>\\n    <RequestId>800FBAF5-A539-5B97-A09E-C63AB2F7****</RequestId>\\n    <Success>true</Success>\\n</CreateRequestDiagnosisResponse>","errorExample":""}]',
      'title' => '发起SQL诊断请求',
      'description' => '使用该接口需满足以下前提条件：

- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：

    - RDS MySQL
    - RDS PostgreSQL
    - RDS SQL Server
    - PolarDB MySQL版
    - PolarDB PostgreSQL版（兼容Oracle）
    - 云数据库MongoDB版

> RDS PostgreSQL实例内核小版本为20221230及以上。查看和升级内核小版本，请参见[升级内核小版本](~~146895~~)。',
    ),
    'GetRequestDiagnosisResult' => 
    array (
      'summary' => '调用GetRequestDiagnosisResult接口，查询SQL诊断的结果。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-0iwhhl8gx0ld6****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于PolarDB MySQL版、PolarDB PostgreSQL版（兼容Oracle）和云数据库MongoDB等集群实例，需要提供节点ID。
',
            'type' => 'string',
            'required' => false,
            'example' => '202****',
          ),
        ),
        2 => 
        array (
          'name' => 'MessageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '诊断ID，[CreateRequestDiagnosis](~~341609~~)接口返回的诊断唯一标识。',
            'type' => 'string',
            'required' => true,
            'example' => '61820b594664275c4429****',
          ),
        ),
        3 => 
        array (
          'name' => 'SqlId',
          'in' => 'query',
          'schema' => 
          array (
            'title' => 'SQL模板ID',
            'description' => 'SQL模板ID。

> 此参数是DAS控制台调用API时使用，用户使用此API时无需传入。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        4 => 
        array (
          'name' => 'Source',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '诊断来源',
            'description' => '任务来源。

> 此参数是DAS控制台调用API时使用，用户使用此API时无需传入。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。

',
                'type' => 'string',
                'example' => '800FBAF5-A539-5B97-A09E-C63AB2F7****',
              ),
              'Data' => 
              array (
                'description' => '返回数据',
                'type' => 'object',
                'properties' => 
                array (
                  'messageId' => 
                  array (
                    'description' => '诊断ID，唯一标识。',
                    'type' => 'string',
                    'example' => '61820b594664275c4429****',
                  ),
                  'uuid' => 
                  array (
                    'description' => '诊断实例唯一标识。',
                    'type' => 'string',
                    'example' => 'hdm_51fe9bc19ec413f4d530431af87a****',
                  ),
                  'accountId' => 
                  array (
                    'description' => '用户ID。',
                    'type' => 'string',
                    'example' => '2093****',
                  ),
                  'sqlId' => 
                  array (
                    'description' => 'SQL模板ID。',
                    'type' => 'string',
                    'example' => '0c95dae3afef77be06572612df9b****',
                  ),
                  'engine' => 
                  array (
                    'description' => '数据库引擎，取值：

- **MySQL**
- **PostgreSQL**
- **SQLServer**
- **PolarDBMySQL**
- **PolarDBOracle**
- **MongoDB**










',
                    'type' => 'string',
                    'example' => 'MySQL',
                  ),
                  'dbSchema' => 
                  array (
                    'description' => '数据库名。',
                    'type' => 'string',
                    'example' => 'das',
                  ),
                  'param' => 
                  array (
                    'description' => '额外信息。',
                    'type' => 'string',
                    'example' => '{"":""}',
                  ),
                  'state' => 
                  array (
                    'description' => '诊断状态：

- **0**：诊断中。
- **1**：诊断错误。
- **2**：诊断完成。
- **3**：SQL错误。
- **4**：引擎错误。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '2',
                  ),
                  'result' => 
                  array (
                    'description' => 'SQL诊断结果。

- **endTime**：SQL诊断的结束时间。
- **errorCode**：错误码。
    - **0001**：诊断成功。
    - **0003**：诊断失败。
- **errorMessage**：错误信息。
- **estimateCost**：预估得消耗。
	- **cpu**：索引的CPU消耗预估值。
	- **io**：索引的IO消耗预估值。
	- **rows**：索引的返回列预估值。
- **improvement**：性能提升比。
- **indexAdvices**：索引建议。
	- **columns**：索引列。
	- **ddlAddIndex**：索引DDL语句。
	- **indexName**：索引名。
	- **schemaName**：数据库名。
	- **tableName**：表名。
	- **unique**：是否唯一索引。
- **ip**：实例的IP地址。
- **messageId**：诊断ID。
- **port**：实例的端口。
- **sqlTag**：SQL标签。
- **startTime**：SQL诊断的开始时间。
- **success**：请求是否执行成功。
- **support**：SQL语句是否支持诊断。
    - **true**：支持。
    - **false**：不支持。
- **tuningAdvices**：SQL改写建议。',
                    'type' => 'string',
                    'example' => '{ "endTime":1636354256000, "errorCode":"0001", "errorMessage":"TFX成功", "estimateCost":{ "cpu":1.7878745150389268, "io":9.948402604746128, "rows":8.889372575194633 }, "improvement":12933.97, "indexAdvices":[ { "columns":[ "work_no" ], "ddlAddIndex":"ALTER TABLE `test`.`work_order` ADD INDEX `idx_workno` (`work_no`)", "indexName":"idx_workno", "schemaName":"test", "tableName":"work_order", "unique":false } ], "ip":"****.mysql.rds.aliyuncs.com", "messageId":"6188c8cb2f1365b16aee****", "port":3306, "sqlTag":"{\\"PRED_EQUAL\\":\\"Y\\",\\"CNT_QB\\":\\"1\\",\\"CNT_TB\\":\\"1\\"}", "startTime":1636354252000, "success":true, "support":true, "tuningAdvices":[ ] }',
                  ),
                  'gmtCreate' => 
                  array (
                    'description' => 'SQL诊断创建时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'string',
                    'example' => '1633071840000',
                  ),
                  'gmtModified' => 
                  array (
                    'description' => 'SQL诊断修改时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'string',
                    'example' => '1633071850000',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"800FBAF5-A539-5B97-A09E-C63AB2F7****\\",\\n  \\"Data\\": {\\n    \\"messageId\\": \\"61820b594664275c4429****\\",\\n    \\"uuid\\": \\"hdm_51fe9bc19ec413f4d530431af87a****\\",\\n    \\"accountId\\": \\"2093****\\",\\n    \\"sqlId\\": \\"0c95dae3afef77be06572612df9b****\\",\\n    \\"engine\\": \\"MySQL\\",\\n    \\"dbSchema\\": \\"das\\",\\n    \\"param\\": \\"{\\\\\\"\\\\\\":\\\\\\"\\\\\\"}\\",\\n    \\"state\\": 2,\\n    \\"result\\": \\"{ \\\\\\"endTime\\\\\\":1636354256000, \\\\\\"errorCode\\\\\\":\\\\\\"0001\\\\\\", \\\\\\"errorMessage\\\\\\":\\\\\\"TFX成功\\\\\\", \\\\\\"estimateCost\\\\\\":{ \\\\\\"cpu\\\\\\":1.7878745150389268, \\\\\\"io\\\\\\":9.948402604746128, \\\\\\"rows\\\\\\":8.889372575194633 }, \\\\\\"improvement\\\\\\":12933.97, \\\\\\"indexAdvices\\\\\\":[ { \\\\\\"columns\\\\\\":[ \\\\\\"work_no\\\\\\" ], \\\\\\"ddlAddIndex\\\\\\":\\\\\\"ALTER TABLE `test`.`work_order` ADD INDEX `idx_workno` (`work_no`)\\\\\\", \\\\\\"indexName\\\\\\":\\\\\\"idx_workno\\\\\\", \\\\\\"schemaName\\\\\\":\\\\\\"test\\\\\\", \\\\\\"tableName\\\\\\":\\\\\\"work_order\\\\\\", \\\\\\"unique\\\\\\":false } ], \\\\\\"ip\\\\\\":\\\\\\"****.mysql.rds.aliyuncs.com\\\\\\", \\\\\\"messageId\\\\\\":\\\\\\"6188c8cb2f1365b16aee****\\\\\\", \\\\\\"port\\\\\\":3306, \\\\\\"sqlTag\\\\\\":\\\\\\"{\\\\\\\\\\\\\\"PRED_EQUAL\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"Y\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"CNT_QB\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"CNT_TB\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\"}\\\\\\", \\\\\\"startTime\\\\\\":1636354252000, \\\\\\"success\\\\\\":true, \\\\\\"support\\\\\\":true, \\\\\\"tuningAdvices\\\\\\":[ ] }\\",\\n    \\"gmtCreate\\": \\"1633071840000\\",\\n    \\"gmtModified\\": \\"1633071850000\\"\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetRequestDiagnosisResultResponse>\\n    <Message>Successful</Message>\\n    <RequestId>800FBAF5-A539-5B97-A09E-C63AB2F7****</RequestId>\\n    <Data>\\n        <messageId>61820b594664275c4429****</messageId>\\n        <uuid>hdm_51fe9bc19ec413f4d530431af87a****</uuid>\\n        <accountId>2093****</accountId>\\n        <sqlId>0c95dae3afef77be06572612df9b****</sqlId>\\n        <engine>MySQL</engine>\\n        <dbSchema>das</dbSchema>\\n        <param>{\\"\\":\\"\\"}</param>\\n        <state>2</state>\\n        <result>{ \\"endTime\\":1636354256000, \\"errorCode\\":\\"0001\\", \\"errorMessage\\":\\"TFX成功\\", \\"estimateCost\\":{ \\"cpu\\":1.7878745150389268, \\"io\\":9.948402604746128, \\"rows\\":8.889372575194633 }, \\"improvement\\":12933.97, \\"indexAdvices\\":[ { \\"columns\\":[ \\"work_no\\" ], \\"ddlAddIndex\\":\\"ALTER TABLE `test`.`work_order` ADD INDEX `idx_workno` (`work_no`)\\", \\"indexName\\":\\"idx_workno\\", \\"schemaName\\":\\"test\\", \\"tableName\\":\\"work_order\\", \\"unique\\":false } ], \\"ip\\":\\"****.mysql.rds.aliyuncs.com\\", \\"messageId\\":\\"6188c8cb2f1365b16aee****\\", \\"port\\":3306, \\"sqlTag\\":\\"{\\\\\\"PRED_EQUAL\\\\\\":\\\\\\"Y\\\\\\",\\\\\\"CNT_QB\\\\\\":\\\\\\"1\\\\\\",\\\\\\"CNT_TB\\\\\\":\\\\\\"1\\\\\\"}\\", \\"startTime\\":1636354252000, \\"success\\":true, \\"support\\":true, \\"tuningAdvices\\":[ ] }</result>\\n        <gmtCreate>1633071840000</gmtCreate>\\n        <gmtModified>1633071850000</gmtModified>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetRequestDiagnosisResultResponse>","errorExample":""}]',
      'title' => '查询SQL诊断的结果',
      'description' => '使用该接口需满足以下前提条件：

- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：

    - RDS MySQL
    - RDS PostgreSQL
    - RDS SQL Server
    - PolarDB MySQL版
    - PolarDB PostgreSQL版（兼容Oracle）
    - 云数据库MongoDB版

> RDS PostgreSQL实例内核小版本为20220130及以上。查看和升级内核小版本，请参见[升级内核小版本](~~146895~~)。
',
    ),
    'GetRequestDiagnosisPage' => 
    array (
      'summary' => '调用GetRequestDiagnosisPage接口，分页获取SQL诊断历史记录。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-0iwhhl8gx0ld6****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于PolarDB MySQL版、PolarDB PostgreSQL版（兼容Oracle）和云数据库MongoDB等集群实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => '202****',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页最大记录数，取值大于0且不超过Integer数据类型的最大值，默认值为10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务的开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1633071840000',
          ),
        ),
        5 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务的结束时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1634972640000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。',
                'type' => 'string',
                'example' => '800FBAF5-A539-5B97-A09E-C63AB2F7****',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'list' => 
                  array (
                    'description' => 'SQL诊断历史记录列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => 'SQL诊断历史记录列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'messageId' => 
                        array (
                          'description' => '诊断ID，唯一标识。',
                          'type' => 'string',
                          'example' => '61820b594664275c4429****',
                        ),
                        'uuid' => 
                        array (
                          'description' => '诊断实例的唯一标识。',
                          'type' => 'string',
                          'example' => 'hdm_51fe9bc19ec413f4d530431af87a****',
                        ),
                        'accountId' => 
                        array (
                          'description' => '用户ID。',
                          'type' => 'string',
                          'example' => '2093****',
                        ),
                        'sqlId' => 
                        array (
                          'description' => 'SQL模板ID。',
                          'type' => 'string',
                          'example' => '0c95dae3afef77be06572612df9b****',
                        ),
                        'engine' => 
                        array (
                          'description' => '数据库引擎：

- **MySQL**
- **PostgreSQL**
- **SQLServer**
- **PolarDBMySQL**
- **PolarDBOracle**
- **MongoDB**',
                          'type' => 'string',
                          'example' => 'MySQL',
                        ),
                        'dbSchema' => 
                        array (
                          'description' => '数据库名。',
                          'type' => 'string',
                          'example' => 'das',
                        ),
                        'param' => 
                        array (
                          'description' => '额外信息。',
                          'type' => 'string',
                          'example' => '{"":""}',
                        ),
                        'state' => 
                        array (
                          'description' => '诊断状态：

- **0**：诊断中。

- **1**：诊断错误。

- **2**：诊断完成。

- **3**：SQL错误。

- **4**：引擎错误。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '2',
                        ),
                        'result' => 
                        array (
                          'description' => 'SQL诊断结果：

- **endTime**：SQL诊断的结束时间。
- **errorCode**：错误码。
    - **0001**：诊断成功。
    - **0003**：诊断失败。
- **errorMessage**：错误信息。
- **estimateCost**：预估得消耗。
	- **cpu**：索引的CPU消耗预估值。
	- **io**：索引的IO消耗预估值。
	- **rows**：索引的返回列预估值。
- **improvement**：性能提升比。
- **indexAdvices**：索引建议。
	- **columns**：索引列。
	- **ddlAddIndex**：索引DDL语句。
	- **indexName**：索引名。
	- **schemaName**：数据库名。
	- **tableName**：表名。
	- **unique**：是否唯一索引。
- **ip**：实例的IP地址。
- **messageId**：诊断ID。
- **port**：实例的端口。
- **sqlTag**：SQL标签。
- **startTime**：SQL诊断的开始时间。
- **success**：请求是否执行成功。
- **support**：SQL语句是否支持诊断。
    - **true**：支持。
    - **false**：不支持。
- **tuningAdvices**：SQL改写建议。

',
                          'type' => 'string',
                          'example' => '{     "endTime":1636354256000,     "errorCode":"0001",     "errorMessage":"TFX成功",     "estimateCost":{         "cpu":1.7878745150389268,         "io":9.948402604746128,         "rows":8.889372575194633     },     "improvement":12933.97,     "indexAdvices":[         {             "columns":[                 "work_no"             ],             "ddlAddIndex":"ALTER TABLE `test`.`work_order` ADD INDEX `idx_workno` (`work_no`)",             "indexName":"idx_workno",             "schemaName":"test",             "tableName":"work_order",             "unique":false         }     ],     "ip":"****.mysql.rds.aliyuncs.com",     "messageId":"6188c8cb2f1365b16aee****",     "port":3306,     "sqlTag":"{\\"PRED_EQUAL\\":\\"Y\\",\\"CNT_QB\\":\\"1\\",\\"CNT_TB\\":\\"1\\"}",     "startTime":1636354252000,     "success":true,     "support":true,     "tuningAdvices":[      ] }',
                        ),
                        'gmtCreate' => 
                        array (
                          'description' => 'SQL诊断创建时间，格式为Unix时间戳，单位为毫秒。',
                          'type' => 'string',
                          'example' => '1633071840000',
                        ),
                        'gmtModified' => 
                        array (
                          'description' => 'SQL诊断修改时间，格式为Unix时间戳，单位为毫秒。',
                          'type' => 'string',
                          'example' => '1633071850000',
                        ),
                      ),
                    ),
                  ),
                  'pageNo' => 
                  array (
                    'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'pageSize' => 
                  array (
                    'description' => '每页最大记录数，取值大于0且不超过Integer数据类型的最大值，默认值为10。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'total' => 
                  array (
                    'description' => '查询到的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '100',
                  ),
                  'extra' => 
                  array (
                    'description' => '其他信息。',
                    'type' => 'string',
                    'example' => '{"":""}',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"800FBAF5-A539-5B97-A09E-C63AB2F7****\\",\\n  \\"Data\\": {\\n    \\"list\\": [\\n      {\\n        \\"messageId\\": \\"61820b594664275c4429****\\",\\n        \\"uuid\\": \\"hdm_51fe9bc19ec413f4d530431af87a****\\",\\n        \\"accountId\\": \\"2093****\\",\\n        \\"sqlId\\": \\"0c95dae3afef77be06572612df9b****\\",\\n        \\"engine\\": \\"MySQL\\",\\n        \\"dbSchema\\": \\"das\\",\\n        \\"param\\": \\"{\\\\\\"\\\\\\":\\\\\\"\\\\\\"}\\",\\n        \\"state\\": 2,\\n        \\"result\\": \\"{     \\\\\\"endTime\\\\\\":1636354256000,     \\\\\\"errorCode\\\\\\":\\\\\\"0001\\\\\\",     \\\\\\"errorMessage\\\\\\":\\\\\\"TFX成功\\\\\\",     \\\\\\"estimateCost\\\\\\":{         \\\\\\"cpu\\\\\\":1.7878745150389268,         \\\\\\"io\\\\\\":9.948402604746128,         \\\\\\"rows\\\\\\":8.889372575194633     },     \\\\\\"improvement\\\\\\":12933.97,     \\\\\\"indexAdvices\\\\\\":[         {             \\\\\\"columns\\\\\\":[                 \\\\\\"work_no\\\\\\"             ],             \\\\\\"ddlAddIndex\\\\\\":\\\\\\"ALTER TABLE `test`.`work_order` ADD INDEX `idx_workno` (`work_no`)\\\\\\",             \\\\\\"indexName\\\\\\":\\\\\\"idx_workno\\\\\\",             \\\\\\"schemaName\\\\\\":\\\\\\"test\\\\\\",             \\\\\\"tableName\\\\\\":\\\\\\"work_order\\\\\\",             \\\\\\"unique\\\\\\":false         }     ],     \\\\\\"ip\\\\\\":\\\\\\"****.mysql.rds.aliyuncs.com\\\\\\",     \\\\\\"messageId\\\\\\":\\\\\\"6188c8cb2f1365b16aee****\\\\\\",     \\\\\\"port\\\\\\":3306,     \\\\\\"sqlTag\\\\\\":\\\\\\"{\\\\\\\\\\\\\\"PRED_EQUAL\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"Y\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"CNT_QB\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"CNT_TB\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\"}\\\\\\",     \\\\\\"startTime\\\\\\":1636354252000,     \\\\\\"success\\\\\\":true,     \\\\\\"support\\\\\\":true,     \\\\\\"tuningAdvices\\\\\\":[      ] }\\",\\n        \\"gmtCreate\\": \\"1633071840000\\",\\n        \\"gmtModified\\": \\"1633071850000\\"\\n      }\\n    ],\\n    \\"pageNo\\": 1,\\n    \\"pageSize\\": 10,\\n    \\"total\\": 100,\\n    \\"extra\\": \\"{\\\\\\"\\\\\\":\\\\\\"\\\\\\"}\\"\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetRequestDiagnosisPageResponse>\\n    <Message>Successful</Message>\\n    <RequestId>800FBAF5-A539-5B97-A09E-C63AB2F7****</RequestId>\\n    <Data>\\n        <list>\\n            <messageId>61820b594664275c4429****</messageId>\\n            <uuid>hdm_51fe9bc19ec413f4d530431af87a****</uuid>\\n            <accountId>2093****</accountId>\\n            <sqlId>0c95dae3afef77be06572612df9b****</sqlId>\\n            <engine>MySQL</engine>\\n            <dbSchema>das</dbSchema>\\n            <param>{\\"\\":\\"\\"}</param>\\n            <state>2</state>\\n            <result>{     \\"endTime\\":1636354256000,     \\"errorCode\\":\\"0001\\",     \\"errorMessage\\":\\"TFX成功\\",     \\"estimateCost\\":{         \\"cpu\\":1.7878745150389268,         \\"io\\":9.948402604746128,         \\"rows\\":8.889372575194633     },     \\"improvement\\":12933.97,     \\"indexAdvices\\":[         {             \\"columns\\":[                 \\"work_no\\"             ],             \\"ddlAddIndex\\":\\"ALTER TABLE `test`.`work_order` ADD INDEX `idx_workno` (`work_no`)\\",             \\"indexName\\":\\"idx_workno\\",             \\"schemaName\\":\\"test\\",             \\"tableName\\":\\"work_order\\",             \\"unique\\":false         }     ],     \\"ip\\":\\"****.mysql.rds.aliyuncs.com\\",     \\"messageId\\":\\"6188c8cb2f1365b16aee****\\",     \\"port\\":3306,     \\"sqlTag\\":\\"{\\\\\\"PRED_EQUAL\\\\\\":\\\\\\"Y\\\\\\",\\\\\\"CNT_QB\\\\\\":\\\\\\"1\\\\\\",\\\\\\"CNT_TB\\\\\\":\\\\\\"1\\\\\\"}\\",     \\"startTime\\":1636354252000,     \\"success\\":true,     \\"support\\":true,     \\"tuningAdvices\\":[      ] }</result>\\n            <gmtCreate>1633071840000</gmtCreate>\\n            <gmtModified>1633071850000</gmtModified>\\n        </list>\\n        <pageNo>1</pageNo>\\n        <pageSize>10</pageSize>\\n        <total>100</total>\\n        <extra>{\\"\\":\\"\\"}</extra>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetRequestDiagnosisPageResponse>","errorExample":""}]',
      'title' => '分页获取SQL诊断历史记录',
      'description' => '使用该接口需满足以下前提条件：

- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：

    - RDS MySQL
    - RDS PostgreSQL
    - RDS SQL Server
    - PolarDB MySQL版
    - PolarDB PostgreSQL版（兼容Oracle）
    - 云数据库MongoDB版

> RDS PostgreSQL实例内核小版本为20220130及以上。查看和升级内核小版本，请参见[升级内核小版本](~~146895~~)。
',
    ),
    'CreateCloudBenchTasks' => 
    array (
      'summary' => '调用CreateCloudBenchTasks接口，创建压测任务。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '压测任务类型。取值：
- **pressure test**（默认）：智能压测，将从源实例上捕获的流量，按照目标实例规格支持的极限速度，在目标实例上进行回放。
- **smart pressure test**：生成压测，通过分析和学习短时间内在源实例上捕获的流量，生成和原始流量的业务模型和流量分布基本一致的流量进行持续压测，减少从源实例采集数据的时间，降低存储成本和性能开销。',
            'type' => 'string',
            'required' => true,
            'example' => 'pressure test',
          ),
        ),
        1 => 
        array (
          'name' => 'SrcInstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '源实例ID，仅支持RDS MySQL、PolarDB MySQL版实例，您可通过调用[GetInstanceInspections](~~202857~~)接口获取。
>当**DstType**为**Instance**时，本参数需要传入。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        2 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'allowEmptyValue' => false,
          'schema' => 
          array (
            'description' => '压测任务描述。',
            'type' => 'string',
            'required' => true,
            'example' => 'test-das-bench-0501',
          ),
        ),
        3 => 
        array (
          'name' => 'SrcPublicIp',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        4 => 
        array (
          'name' => 'DstInstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标实例ID，仅支持RDS MySQL、PolarDB MySQL版实例，您可通过调用[GetInstanceInspections](~~202857~~)接口获取。
>当**DstType**为**Instance**时，本参数需要传入。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        5 => 
        array (
          'name' => 'GatewayVpcId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库网关的专有网络ID。
>若**ClientType**取值为**ECS**，则此参数必传入。',
            'type' => 'string',
            'required' => false,
            'example' => 'vpc-t4nsnwvpbc1h76ja4****',
          ),
        ),
        6 => 
        array (
          'name' => 'GatewayVpcIp',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库网关的IP地址或域名。
>若**ClientType**取值为**ECS**，则此参数必传入。',
            'type' => 'string',
            'required' => false,
            'example' => '172.30.XX.XX',
          ),
        ),
        7 => 
        array (
          'name' => 'ClientType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '压测机器类型。取值：

- **ECS**：您需要自己准备[数据库网关](~~64905~~)。
- **DAS_ECS**：DAS自动购买和部署的ECS。',
            'type' => 'string',
            'required' => true,
            'example' => 'ECS',
          ),
        ),
        8 => 
        array (
          'name' => 'RequestStartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '压测任务的开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => false,
            'example' => '1608888296000',
          ),
        ),
        9 => 
        array (
          'name' => 'RequestEndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '压测任务的结束时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => false,
            'example' => '1608888296001',
          ),
        ),
        10 => 
        array (
          'name' => 'RequestDuration',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '压测任务的持续时间，单位为毫秒。',
            'type' => 'string',
            'required' => false,
            'example' => '86400000',
          ),
        ),
        11 => 
        array (
          'name' => 'Rate',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '源实例流量在目标实例上的回放速度，回放速度必须是正整数，取值：**1**~**30**，默认为**1**。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        12 => 
        array (
          'name' => 'SmartPressureTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '生成压测的持续时间，单位为毫秒。
>当**TaskType**为**smart pressure test**时本参数需要传入。',
            'type' => 'string',
            'required' => false,
            'example' => '86400000',
          ),
        ),
        13 => 
        array (
          'name' => 'DtsJobClass',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DTS迁移任务规格，您可以通过调用[DescribeCloudbenchTask](~~230669~~)接口获取。
>压测任务需要先将源实例基准数据迁移至目标实例，当您新建DTS任务时需要传入本参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'medium',
          ),
        ),
        14 => 
        array (
          'name' => 'DtsJobId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DTS迁移任务ID，您可调用[ConfigureDtsJob](~~208399~~)接口获取。
>已在DTS控制台创建完DTS任务时本参数必传入。',
            'type' => 'string',
            'required' => false,
            'example' => '23127',
          ),
        ),
        15 => 
        array (
          'name' => 'SrcSuperAccount',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '源端实例高权限账号。取值：**admin**。
>当**DstType**为**Instance**时，本参数需要传入。',
            'type' => 'string',
            'required' => false,
            'example' => 'admin',
          ),
        ),
        16 => 
        array (
          'name' => 'SrcSuperPassword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '源端实例高权限账号的密码。
>当**DstType**为**Instance**时，本参数需要传入。',
            'type' => 'string',
            'required' => false,
            'example' => 'test123',
          ),
        ),
        17 => 
        array (
          'name' => 'DstSuperAccount',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标实例的高权限账号。',
            'type' => 'string',
            'required' => false,
            'example' => 'root',
          ),
        ),
        18 => 
        array (
          'name' => 'DstSuperPassword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标实例高权限账号的密码。',
            'type' => 'string',
            'required' => false,
            'example' => 'test123',
          ),
        ),
        19 => 
        array (
          'name' => 'DstType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标实例的类型。取值：
- **Instance**（默认）：实例ID。
- **ConnectionString**：实例的连接地址。',
            'type' => 'string',
            'required' => false,
            'example' => 'Instance',
          ),
        ),
        20 => 
        array (
          'name' => 'DstConnectionString',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标实例的连接地址，仅支持RDS MySQL、PolarDB MySQL版实例。
>**DstType**为**ConnectionString**本参数有效。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-de21209****.mysql.rds.aliyuncs.com',
          ),
        ),
        21 => 
        array (
          'name' => 'DstPort',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标实例的端口。
>**DstType**为**ConnectionString**本参数有效。',
            'type' => 'string',
            'required' => false,
            'example' => '3306',
          ),
        ),
        22 => 
        array (
          'name' => 'WorkDir',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '压测生成的临时目录。',
            'type' => 'string',
            'required' => false,
            'example' => '/tmp/bench/',
          ),
        ),
        23 => 
        array (
          'name' => 'BackupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备份集ID，可通过查询备份列表接口[DescribeBackups](~~26273~~)获取。',
            'type' => 'string',
            'required' => false,
            'example' => '229132',
          ),
        ),
        24 => 
        array (
          'name' => 'BackupTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备份的时间。格式为：yyyy-MM-ddTHH:mm:ssZ（UTC时间）。',
            'type' => 'string',
            'required' => false,
            'example' => '2021-04-23T13:22:14Z',
          ),
        ),
        25 => 
        array (
          'name' => 'Amount',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建压测任务的总个数，取值：**0**~**30**，默认为**1**。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        26 => 
        array (
          'name' => 'EndState',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '压测任务结束后的状态。取值：

- **WAIT_TARGET**：准备压测的目标实例。
- **WAIT_DBGATEWAY**：准备压测部署。
- **WAIT_SQL**：准备全量SQL。
- **WAIT_LOGIC**：准备开始回放流量。

>当压测任务执行完EndState设置的状态之后，任务将直接到达完成状态。',
            'type' => 'string',
            'required' => false,
            'example' => 'WAIT_TARGET',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'taskIds' => 
                  array (
                    'description' => '详细信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '详细信息列表，包括信息总数、错误码等。',
                      'type' => 'string',
                      'example' => '"Data": { "total": 1, "list":[...] }, "Code": 200, "Success": true }',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"taskIds\\": [\\n      \\"\\\\\\"Data\\\\\\": { \\\\\\"total\\\\\\": 1, \\\\\\"list\\\\\\":[...] }, \\\\\\"Code\\\\\\": 200, \\\\\\"Success\\\\\\": true }\\"\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<CreateCloudBenchTasksResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n    <Data>\\"Data\\": { \\"total\\": 1, \\"list\\":[...] }, \\"Code\\": 200, \\"Success\\": true }</Data>\\n</CreateCloudBenchTasksResponse>","errorExample":""}]',
      'title' => '创建压测任务',
      'description' => '数据库自治服务DAS提供智能压测功能，帮助您验证您的实例规格是否需要扩容，有效应对业务流量高峰。更多信息，请参见[智能压测](~~155068~~)。数据库需满足如下前提条件：

   - 源数据库仅支持RDS MySQL高可用系列或三节点企业系列、PolarDB MySQL版的集群版或高压缩引擎（X-Engine）。
   - 目标数据库实例为RDS MySQL、PolarDB MySQL版。
   - 实例已接入DAS，详情请参见[接入阿里云数据库实例](~~65405~~)。
   - 需开启DAS企业版，详情请参见[DAS企业版](~~190912~~)。',
    ),
    'RunCloudBenchTask' => 
    array (
      'summary' => '调用RunCloudBenchTask接口，执行压测任务。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务ID，您可通过[DescribeCloudBenchTasks](~~230670~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'e5cec704-0518-430f-8263-76f4dcds****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'PreCheckItem' => 
                  array (
                    'description' => '详细信息列表，包括信息总数、错误码等。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '任务的运行状态。取值：

- **SUCCESS**：成功。
- **IGNORED**：忽略。
- **RUNNING**：运行中。
- **EXCEPTION**：异常。',
                          'type' => 'string',
                          'example' => 'SUCCESS',
                        ),
                        'Order' => 
                        array (
                          'description' => '检查项的顺序，取值范围：**0**~**10**。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'Code' => 
                        array (
                          'description' => '返回的状态码。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '200',
                        ),
                        'Message' => 
                        array (
                          'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                          'type' => 'string',
                          'example' => 'Successful',
                        ),
                        'Name' => 
                        array (
                          'description' => '检查项。取值：

- **SqlArchiveStatusChecker**：检查SQL洞察数据是否可用。
- **BenchClientEnvChecker**：检查压测机上程序运行环境是否可用。
- **SpecChecker**：检查压测目标规格和压测机规格是否可用。
- **SourceInstanceChecker**：检查压测源实例账号和网络是否可用。
- **BenchTargetChecker**：检查压测目标实例账号和网络是否可用。',
                          'type' => 'string',
                          'example' => 'BenchTargetChecker',
                        ),
                        'Details' => 
                        array (
                          'description' => '检查项的详细信息。',
                          'type' => 'string',
                          'example' => '"Data": { "total": 1, "list":[...] }, "Code": 200, "Success": true }',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"PreCheckItem\\": [\\n      {\\n        \\"Status\\": \\"SUCCESS\\",\\n        \\"Order\\": 0,\\n        \\"Code\\": 200,\\n        \\"Message\\": \\"Successful\\",\\n        \\"Name\\": \\"BenchTargetChecker\\",\\n        \\"Details\\": \\"\\\\\\"Data\\\\\\": { \\\\\\"total\\\\\\": 1, \\\\\\"list\\\\\\":[...] }, \\\\\\"Code\\\\\\": 200, \\\\\\"Success\\\\\\": true }\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RunCloudBenchTaskResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <Status>SUCCESS</Status>\\n        <Order>0</Order>\\n        <Code>200</Code>\\n        <Message>Successful</Message>\\n        <Name>BenchTarget</Name>\\n        <Details>\\"Data\\": { \\"total\\": 1, \\"list\\":[...] }, \\"Code\\": 200, \\"Success\\": true }</Details>\\n    </Data>\\n</RunCloudBenchTaskResponse>","errorExample":""}]',
      'title' => '执行压测任务',
      'description' => '数据库自治服务DAS提供智能压测功能，帮助您验证您的实例规格是否需要扩容，有效应对业务流量高峰。更多信息，请参见[智能压测](~~155068~~)。',
    ),
    'StopCloudBenchTask' => 
    array (
      'summary' => '调用StopCloudBenchTask接口，停止压测任务。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务ID，您可通过[DescribeCloudBenchTasks](~~230670~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'e5cec704-0518-430f-8263-76f4dcds****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '备用参数。',
                'type' => 'string',
                'example' => 'None',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"None\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<StopCloudBenchTaskResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</StopCloudBenchTaskResponse>","errorExample":""}]',
      'title' => '停止压测任务',
      'description' => '数据库自治服务DAS提供智能压测功能，帮助您验证您的实例规格是否需要扩容，有效应对业务流量高峰。更多信息，请参见[智能压测](~~155068~~)。',
    ),
    'CreateAdamBenchTask' => 
    array (
      'summary' => '通过CreateAdamBenchTask接口，在ADAM上创建压测任务。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '压测任务描述。',
            'type' => 'string',
            'required' => true,
            'example' => 'test-das-bench-0501',
          ),
        ),
        1 => 
        array (
          'name' => 'SrcSqlOssAddr',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '源端数据库全量SQL归档文件的OSS网址，您可在OSS上传文件后获取具体的网址。',
            'type' => 'string',
            'required' => true,
            'example' => 'http://rdslog-hz-v3.oss-cn-hangzhou.aliyuncs.com/custins4131****',
          ),
        ),
        2 => 
        array (
          'name' => 'SrcEngine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '源端数据库引擎。',
            'type' => 'string',
            'required' => false,
            'example' => 'MySQL',
          ),
        ),
        3 => 
        array (
          'name' => 'SrcEngineVersion',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '源端数据库引擎的版本。',
            'type' => 'string',
            'required' => false,
            'example' => '9i',
          ),
        ),
        4 => 
        array (
          'name' => 'SrcMaxQps',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '流量抓取时间段的最大QPS，精确到小数点后两位。',
            'type' => 'number',
            'format' => 'double',
            'required' => true,
            'example' => '2013.22',
          ),
        ),
        5 => 
        array (
          'name' => 'SrcMeanQps',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '流量抓取时间段的平均QPS，精确到小数点后两位。',
            'type' => 'number',
            'format' => 'double',
            'required' => true,
            'example' => '312.22',
          ),
        ),
        6 => 
        array (
          'name' => 'RequestStartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '压测任务的开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1588819800000',
          ),
        ),
        7 => 
        array (
          'name' => 'RequestDuration',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '压测任务的持续时间，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '86400000',
          ),
        ),
        8 => 
        array (
          'name' => 'Rate',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '流量回放的频率，取值1~30，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        9 => 
        array (
          'name' => 'DstInstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标实例ID，仅支持RDS MySQL、PolarDB MySQL版实例，您可通过调用[GetInstanceInspections](~~202857~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        10 => 
        array (
          'name' => 'DstSuperAccount',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标实例的高权限账号。',
            'type' => 'string',
            'required' => true,
            'example' => 'root***',
          ),
        ),
        11 => 
        array (
          'name' => 'DstSuperPassword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标实例的高权限账号的密码。',
            'type' => 'string',
            'required' => true,
            'example' => 'root***1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>  请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'string',
                'example' => '"Data": { "total": 1, "list":[...] }, "Code": 200, "Success": true }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"\\\\\\"Data\\\\\\": { \\\\\\"total\\\\\\": 1, \\\\\\"list\\\\\\":[...] }, \\\\\\"Code\\\\\\": 200, \\\\\\"Success\\\\\\": true }\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateAdamBenchTaskResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\"Data\\": { \\"total\\": 1, \\"list\\":[...] }, \\"Code\\": 200, \\"Success\\": true }</Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</CreateAdamBenchTaskResponse>","errorExample":""}]',
      'title' => '在ADAM上创建压测任务',
      'description' => '数据库自治服务DAS提供智能压测功能，帮助您在ADAM上创建压测任务进行智能压测，以验证您的实例规格是否需要扩容，有效应对业务流量高峰，关于智能压测的更多信息，请参见[智能压测](~~155068~~)。

数据库需满足如下条件：

- 源数据库仅支持RDS MySQL高可用系列或三节点企业系列、PolarDB MySQL版的集群版或高压缩引擎（X-Engine）。
- 目标数据库实例为RDS MySQL、PolarDB MySQL版。
- 实例已接入DAS，详情请参见[接入阿里云数据库实例](~~65405~~)。
- 需开启DAS企业版，详情请参见[DAS企业版使用说明](~~190912~~)。',
    ),
    'DeleteCloudBenchTask' => 
    array (
      'summary' => '调用DeleteCloudBenchTask接口，删除压测任务。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务ID，您可通过[DescribeCloudBenchTasks](~~230670~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'e5cec704-0518-430f-8263-76f4dcds****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '备用参数。',
                'type' => 'string',
                'example' => 'None',
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"None\\",\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteCloudBenchTaskResponse>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Message>Successful</Message>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</DeleteCloudBenchTaskResponse>","errorExample":""}]',
      'title' => '删除压测任务',
      'description' => '数据库自治服务DAS提供智能压测功能，帮助您验证您的实例规格是否需要扩容，有效应对业务流量高峰。更多信息，请参见[智能压测](~~155068~~)。',
    ),
    'DeleteStopGateway' => 
    array (
      'summary' => '调用DeleteStopGateway接口，删除已停止的DBGateway元数据。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'GatewayId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DBGateway的ID，是DBGateway的唯一标识。可通过[DescribeCloudbenchTask](~~230669~~)接口获取，返回的**ClientGatewayId**字段值即为DBGateway的ID。',
            'type' => 'string',
            'required' => true,
            'example' => '22938c83fcfbced4b4869b9695e3****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => 'DBGateway元数据删除结果：

- **0**：执行成功。
- **-1**：系统错误。
- **-2**：DBGateway不存在。
- **-3**：DBGateway未停止，无法删除元数据。
- **-4**：删除元数据信息失败。
',
                'type' => 'string',
                'example' => '0',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'FC6C0929-29E1-59FD-8DFE-70D9D41E****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"0\\",\\n  \\"RequestId\\": \\"FC6C0929-29E1-59FD-8DFE-70D9D41E****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteStopGatewayResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>0</Data>\\n    <RequestId>FC6C0929-29E1-59FD-8DFE-70D9D41E****</RequestId>\\n    <Success>true</Success>\\n</DeleteStopGatewayResponse>","errorExample":""}]',
      'title' => '删除已停止的DBGateway元数据',
      'description' => '- 本接口用于删除[CreateCloudBenchTasks](~~230665~~)接口创建的智能压测任务中已释放的DBgateway元数据。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。

> 当DBGateway与接入点超过20秒无心跳时，此DBGateway为停止状态。',
    ),
    'DescribeCloudbenchTaskConfig' => 
    array (
      'summary' => '调用DescribeCloudbenchTaskConfig接口，查询压测任务配置信息。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务ID，您可通过[DescribeCloudBenchTasks](~~230670~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'e5cec704-0518-430f-8263-76f4dcds****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>  请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'object',
                'properties' => 
                array (
                  'WorkDir' => 
                  array (
                    'description' => '压测生成的临时目录。',
                    'type' => 'string',
                    'example' => '/tmp/bench/',
                  ),
                  'ArchiveFolder' => 
                  array (
                    'description' => '归档文件路径。',
                    'type' => 'string',
                    'example' => '/tmp/das/cloudbench/archive-sqls/',
                  ),
                  'MetaFilePath' => 
                  array (
                    'description' => '元文件路径。',
                    'type' => 'string',
                    'example' => '/tmp/das/cloudbench/cl-1621353601000-360****.meta',
                  ),
                  'MetaFileName' => 
                  array (
                    'description' => '元文件名。',
                    'type' => 'string',
                    'example' => 'cl-1621353601000-360****.meta',
                  ),
                  'MetaFileOnOss' => 
                  array (
                    'description' => '元文件在OSS的名称。',
                    'type' => 'string',
                    'example' => '"https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.meta?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=Qsehg3tzeA57M%2BIixAbWPWAtvl****',
                  ),
                  'UserId' => 
                  array (
                    'description' => '阿里云账号ID。',
                    'type' => 'string',
                    'example' => '1091411816252****',
                  ),
                  'BenchCmd' => 
                  array (
                    'description' => '压测的命令。',
                    'type' => 'string',
                    'example' => 'java -jar /tmp/das/cloudbench/CloudBenchClient.jar --bench --rocksdb /tmp/das/cloudbench/rocksdb --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-a836-49e6-9f70-1c3822fc9239 --result_file /tmp/das/cloudbench/null.result --user cloudb**** --pwd \\"cloudbench@****\\" --host rm-bp1j5f8s5x26kq79216****.mysql.rds.aliyuncs.com --port 3306 --charset utf8mb4 --interval 1 --bench_time 3600 --rate_factor 1.0 --start_time 1621353601 --rt > /tmp/das/cloudbench/null.log',
                  ),
                  'SqlFileOnOss' => 
                  array (
                    'description' => '全量SQL文件在OSS的名称。',
                    'type' => 'string',
                    'example' => 'https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.sc?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=LYMADwo%2BRrJeqR3e4d8OlIkVmw****',
                  ),
                  'LoadCmd' => 
                  array (
                    'description' => 'SQL文件预加载的命令。',
                    'type' => 'string',
                    'example' => 'java -jar /tmp/das/cloudbench/CloudBenchClient.jar --load --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-****-49e6-9f70-1c3822fc**** --rocksdb /tmp/das/cloudbench/rocksdb',
                  ),
                  'RocksDbPath' => 
                  array (
                    'description' => 'RocksDB存储系统在压测机中的位置。',
                    'type' => 'string',
                    'example' => '/tmp/das/cloudbench/rocksdb',
                  ),
                  'ParseCmd' => 
                  array (
                    'description' => 'SQL文件解析的命令。',
                    'type' => 'string',
                    'example' => 'cd /tmp/das/cloudbench && java -jar CloudBenchClient.jar --parse --threads 32 --file /tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc9239.archiveSql --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --parent_patmp/das/cloudbench --source RDS --h /thost rm-bp1j5f8s5x266****.mysql.rds.aliyuncs.com --port 3306 --user cloudb**** --pwd \\"cloudbench@****\\" --cutSqlLen 8192 --db_black_list=information_schema,test,unknow,null',
                  ),
                  'SqlFileName' => 
                  array (
                    'description' => '全量SQL文件名。',
                    'type' => 'string',
                    'example' => 'cl-1621353601000-360****.sc',
                  ),
                  'ClientJarPath' => 
                  array (
                    'description' => '压测Jar包路径。',
                    'type' => 'string',
                    'example' => '/tmp/das/cloudbench/CloudBenchClient.jar',
                  ),
                  'SqlFilePath' => 
                  array (
                    'description' => 'SQL文件路径。',
                    'type' => 'string',
                    'example' => '/tmp/das/cloudbench/cl-1621353601000-360****.sc',
                  ),
                  'ParseFilePath' => 
                  array (
                    'description' => '解析后的SQL文件路径。',
                    'type' => 'string',
                    'example' => '/tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc****.archiveSql',
                  ),
                  'JarOnOss' => 
                  array (
                    'description' => '压测Jar包在OSS的路径。',
                    'type' => 'string',
                    'example' => 'https://cloudbench-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/CloudBenchClient.jar?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=28p%2BCe4tNHpr9VPOcHc3Si9iOb****',
                  ),
                  'TaskId' => 
                  array (
                    'description' => '任务ID。',
                    'type' => 'string',
                    'example' => 'e5cec704-0518-430f-8263-76f4dcds****',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"WorkDir\\": \\"/tmp/bench/\\",\\n    \\"ArchiveFolder\\": \\"/tmp/das/cloudbench/archive-sqls/\\",\\n    \\"MetaFilePath\\": \\"/tmp/das/cloudbench/cl-1621353601000-360****.meta\\",\\n    \\"MetaFileName\\": \\"cl-1621353601000-360****.meta\\",\\n    \\"MetaFileOnOss\\": \\"\\\\\\"https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.meta?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=Qsehg3tzeA57M%2BIixAbWPWAtvl****\\",\\n    \\"UserId\\": \\"1091411816252****\\",\\n    \\"BenchCmd\\": \\"java -jar /tmp/das/cloudbench/CloudBenchClient.jar --bench --rocksdb /tmp/das/cloudbench/rocksdb --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-a836-49e6-9f70-1c3822fc9239 --result_file /tmp/das/cloudbench/null.result --user cloudb**** --pwd \\\\\\\\\\\\\\"cloudbench@****\\\\\\\\\\\\\\" --host rm-bp1j5f8s5x26kq79216****.mysql.rds.aliyuncs.com --port 3306 --charset utf8mb4 --interval 1 --bench_time 3600 --rate_factor 1.0 --start_time 1621353601 --rt > /tmp/das/cloudbench/null.log\\",\\n    \\"SqlFileOnOss\\": \\"https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.sc?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=LYMADwo%2BRrJeqR3e4d8OlIkVmw****\\",\\n    \\"LoadCmd\\": \\"java -jar /tmp/das/cloudbench/CloudBenchClient.jar --load --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-****-49e6-9f70-1c3822fc**** --rocksdb /tmp/das/cloudbench/rocksdb\\",\\n    \\"RocksDbPath\\": \\"/tmp/das/cloudbench/rocksdb\\",\\n    \\"ParseCmd\\": \\"cd /tmp/das/cloudbench && java -jar CloudBenchClient.jar --parse --threads 32 --file /tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc9239.archiveSql --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --parent_patmp/das/cloudbench --source RDS --h /thost rm-bp1j5f8s5x266****.mysql.rds.aliyuncs.com --port 3306 --user cloudb**** --pwd \\\\\\\\\\\\\\"cloudbench@****\\\\\\\\\\\\\\" --cutSqlLen 8192 --db_black_list=information_schema,test,unknow,null\\",\\n    \\"SqlFileName\\": \\"cl-1621353601000-360****.sc\\",\\n    \\"ClientJarPath\\": \\"/tmp/das/cloudbench/CloudBenchClient.jar\\",\\n    \\"SqlFilePath\\": \\"/tmp/das/cloudbench/cl-1621353601000-360****.sc\\",\\n    \\"ParseFilePath\\": \\"/tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc****.archiveSql\\",\\n    \\"JarOnOss\\": \\"https://cloudbench-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/CloudBenchClient.jar?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&Expires=1622441372&Signature=28p%2BCe4tNHpr9VPOcHc3Si9iOb****\\",\\n    \\"TaskId\\": \\"e5cec704-0518-430f-8263-76f4dcds****\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeCloudbenchTaskConfigResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <WorkDir>/tmp/bench/</WorkDir>\\n        <ArchiveFolder>/tmp/das/cloudbench/archive-sqls/</ArchiveFolder>\\n        <MetaFilePath>/tmp/das/cloudbench/cl-1621353601000-360****.meta</MetaFilePath>\\n        <MetaFileName>cl-1621353601000-360****.meta</MetaFileName>\\n        <MetaFileOnOss>\\"https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.meta?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&amp;Expires=1622441372&amp;Signature=Qsehg3tzeA57M%2BIixAbWPWAtvl****</MetaFileOnOss>\\n        <UserId>1091411816252****</UserId>\\n        <BenchCmd>java -jar /tmp/das/cloudbench/CloudBenchClient.jar --bench --rocksdb /tmp/das/cloudbench/rocksdb --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-a836-49e6-9f70-1c3822fc9239 --result_file /tmp/das/cloudbench/null.result --user cloudb**** --pwd \\\\\\"cloudbench@****\\\\\\" --host rm-bp1j5f8s5x26kq79216****.mysql.rds.aliyuncs.com --port 3306 --charset utf8mb4 --interval 1 --bench_time 3600 --rate_factor 1.0 --start_time 1621353601 --rt &gt; /tmp/das/cloudbench/null.log</BenchCmd>\\n        <SqlFileOnOss>https://cb-rm-bp1w9g06h560l****.oss-cn-hangzhou.aliyuncs.com/cl-1621353601000-360****.sc?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&amp;Expires=1622441372&amp;Signature=LYMADwo%2BRrJeqR3e4d8OlIkVmw****</SqlFileOnOss>\\n        <LoadCmd>java -jar /tmp/das/cloudbench/CloudBenchClient.jar --load --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --task_name 2777bba9-****-49e6-9f70-1c3822fc**** --rocksdb /tmp/das/cloudbench/rocksdb</LoadCmd>\\n        <RocksDbPath>/tmp/das/cloudbench/rocksdb</RocksDbPath>\\n        <ParseCmd>cd /tmp/das/cloudbench &amp;&amp; java -jar CloudBenchClient.jar --parse --threads 32 --file /tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc9239.archiveSql --meta /tmp/das/cloudbench/cl-1621353601000-360****.meta --out /tmp/das/cloudbench/cl-1621353601000-360****.sc --parent_patmp/das/cloudbench --source RDS --h /thost rm-bp1j5f8s5x266****.mysql.rds.aliyuncs.com --port 3306 --user cloudb**** --pwd \\\\\\"cloudbench@****\\\\\\" --cutSqlLen 8192 --db_black_list=information_schema,test,unknow,null</ParseCmd>\\n        <SqlFileName>cl-1621353601000-360****.sc</SqlFileName>\\n        <ClientJarPath>/tmp/das/cloudbench/CloudBenchClient.jar</ClientJarPath>\\n        <SqlFilePath>/tmp/das/cloudbench/cl-1621353601000-360****.sc</SqlFilePath>\\n        <ParseFilePath>/tmp/das/cloudbench/2777bba9-a836-49e6-9f70-1c3822fc****.archiveSql</ParseFilePath>\\n        <JarOnOss>https://cloudbench-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/CloudBenchClient.jar?OSSAccessKeyId=LTAI5tKj8B4wikkVtupK****&amp;Expires=1622441372&amp;Signature=28p%2BCe4tNHpr9VPOcHc3Si9iOb****</JarOnOss>\\n        <TaskId>e5cec704-0518-430f-8263-76f4dcds****</TaskId>\\n    </Data>\\n</DescribeCloudbenchTaskConfigResponse>","errorExample":""}]',
      'title' => '查询压测任务配置',
      'description' => '数据库自治服务DAS提供智能压测功能，帮助您验证您的实例规格是否需要扩容，有效应对业务流量高峰。更多信息，请参见[智能压测](~~155068~~)。',
    ),
    'DescribeCloudbenchTask' => 
    array (
      'summary' => '调用DescribeCloudbenchTask接口，查询压测任务。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务ID，您可通过[DescribeCloudBenchTasks](~~230670~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'e5cec704-0518-430f-8263-76f4dcds****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'object',
                'properties' => 
                array (
                  'DtsJobName' => 
                  array (
                    'description' => 'DTS的任务名称。',
                    'type' => 'string',
                    'example' => 'RDS间迁移',
                  ),
                  'ErrorMessage' => 
                  array (
                    'description' => '任务失败的错误提示。',
                    'type' => 'string',
                    'example' => 'DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].',
                  ),
                  'External' => 
                  array (
                    'description' => '其他信息。',
                    'type' => 'string',
                    'example' => 'Null',
                  ),
                  'BackupType' => 
                  array (
                    'description' => '备份类型。取值：

- **TIMESTAMP**：按备份时间。
- **BACKUPID**：按备份集ID。',
                    'type' => 'string',
                    'example' => 'TIMESTAMP',
                  ),
                  'UserId' => 
                  array (
                    'description' => '阿里云账号ID。',
                    'type' => 'string',
                    'example' => '109141182625****',
                  ),
                  'DstType' => 
                  array (
                    'description' => '目标实例的类型。取值：
- **Instance**（默认）：实例ID。
- **ConnectionString**：实例的连接地址。',
                    'type' => 'string',
                    'example' => 'Instance',
                  ),
                  'EcsInstanceId' => 
                  array (
                    'description' => 'ECS的实例ID。',
                    'type' => 'string',
                    'example' => 'i-bp1ecr5go2go1****',
                  ),
                  'DstInstanceUuid' => 
                  array (
                    'description' => '目标实例的唯一标识符号。',
                    'type' => 'string',
                    'example' => 'hdm_d887b5ccf99fa0dc9a1e5aaac368****',
                  ),
                  'TaskType' => 
                  array (
                    'description' => '压测任务类型。取值：
- **pressure test**（默认）：智能压测，将从源实例上捕获的流量，按照目标实例规格支持的极限速度，在目标实例上进行回放。
- **smart pressure test**：生成压测，通过分析和学习短时间内在源实例上捕获的流量，生成和原始流量的业务模型和流量分布基本一致的流量进行持续压测，减少从源实例采集数据的时间，降低存储成本和性能开销。',
                    'type' => 'string',
                    'example' => 'pressure test',
                  ),
                  'BenchStep' => 
                  array (
                    'description' => '压测的子步骤。取值：

- **NEW**：任务初始化。
- **WAIT_BUY_ECS**：新购ECS实例。
- **WAIT_START_ECS**：ECS实例启动。
- **WAIT_INSTALL_JDK**：安装JDK。
- **WAIT_INSTALL_DBGATEWAY**：安装DBGateway。
- **ADD_SECURITY_IPS_STEP**：配置安全组白名单。
- **ARCHIVE**：全量SQL归档。
- **DOWNLOAD**：下载全量SQL文件。
- **PROCEED**：预处理全量SQL文件。
- **PRE_LOAD**：预加载全量SQL文件。
- **VALIDATE**：功能验证。
- **PRESSURE**：性能压测。',
                    'type' => 'string',
                    'example' => 'PROCEED',
                  ),
                  'Version' => 
                  array (
                    'description' => '压测任务版本。取值：

- **V2.0**
- **V3.0**',
                    'type' => 'string',
                    'example' => 'V3.0',
                  ),
                  'EndState' => 
                  array (
                    'description' => '压测任务结束后的状态。取值：

- **WAIT_TARGET**：准备压测的目标实例。
- **WAIT_DBGATEWAY**：准备压测部署。
- **WAIT_SQL**：准备全量SQL。
- **WAIT_LOGIC**：准备开始回放流量。

>当压测任务执行完EndState设置的状态之后，任务将直接到达完成状态。',
                    'type' => 'string',
                    'example' => 'WAIT_LOGIC',
                  ),
                  'SrcInstanceUuid' => 
                  array (
                    'description' => '源实例的唯一标识符号。',
                    'type' => 'string',
                    'example' => 'a364e414-e68b-4e5c-9166-65b3a153****',
                  ),
                  'ClientType' => 
                  array (
                    'description' => '压测机器类型。取值：

- **ECS**：您需要自己准备[数据库网关](~~64905~~)。
- **DAS_ECS**：DAS自动购买和部署的ECS。',
                    'type' => 'string',
                    'example' => 'ECS',
                  ),
                  'State' => 
                  array (
                    'description' => '目前压测任务的状态。取值：

- **WAIT_TARGET**：准备压测的目标实例。
- **WAIT_DBGATEWAY**：准备压测部署。
- **WAIT_SQL**：准备全量SQL。
- **WAIT_LOGIC**：准备开始回放流量。',
                    'type' => 'string',
                    'example' => 'WAIT_TARGET',
                  ),
                  'DstIp' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'SrcPublicIp' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'BackupId' => 
                  array (
                    'description' => '备份集ID，可通过查询备份列表接口[DescribeBackups](~~26273~~)获取。',
                    'type' => 'string',
                    'example' => '229132',
                  ),
                  'SqlCompleteReuse' => 
                  array (
                    'description' => '全量SQL的复用信息。',
                    'type' => 'string',
                    'example' => '{"sqlUuid":"task_a37d2f07-45cb-****-a2a6-c66c62****","metaUuid":"task_211e2561-5c0c-486b-864c-56b511****","sqlFile":"cl-1620057600000-1800626.sc","metaFile":"cl-1620057600000-180****.meta"}',
                  ),
                  'SmartPressureTime' => 
                  array (
                    'description' => '生成压测时间，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '86400000',
                  ),
                  'ArchiveState' => 
                  array (
                    'description' => 'SQL归档状态，取值：

- **0**：未开始。
- **1**：完成。
- **2**：错误。
- **3**：运行中。
- **4**：无需下载。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'Status' => 
                  array (
                    'description' => '压测任务的运行状态。取值：

- **SUCCESS**：成功。
- **IGNORED**：忽略。
- **RUNNING**：运行中。
- **EXCEPTION**：异常。',
                    'type' => 'string',
                    'example' => 'RUNNING',
                  ),
                  'WorkDir' => 
                  array (
                    'description' => '压测生成的临时目录。',
                    'type' => 'string',
                    'example' => '/tmp/bench/',
                  ),
                  'ArchiveOssTableName' => 
                  array (
                    'description' => '归档的OSS表名。',
                    'type' => 'string',
                    'example' => 'custins15546355_161604665****',
                  ),
                  'DtsJobId' => 
                  array (
                    'description' => 'DTS迁移任务ID。',
                    'type' => 'string',
                    'example' => 'i03e3zty16i****',
                  ),
                  'DtsJobState' => 
                  array (
                    'description' => 'DTS任务状态，取值：

- **NOT_STARTED**：未启动。
- **PRE_CHECKING**：预检查中。
- **PRE_CHECK_FAILED**：预检查失败。
- **CHECKING**：检查中。
- **MIGRATING**：迁移中。
- **CATCHED**：已经追平。
- **SUSPENDING**：暂停中。
- **MIGRATION_FAILED**：迁移失败。
- **FINISHED**：完成。
- **INITIALIZING**：同步初始化。
- **INITIALIZE_FAILED**：同步初始化失败。
- **SYNCHRONIZING**：同步中。
- **MODIFYING**：同步对象变更中。
- **SWITCHING**：切换中。
- **FAILED**：失败。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'CHECKING',
                  ),
                  'DstPort' => 
                  array (
                    'description' => '目标实例的端口。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '3306',
                  ),
                  'DtsJobClass' => 
                  array (
                    'description' => 'DTS任务规格。',
                    'type' => 'string',
                    'example' => 'medium',
                  ),
                  'ClientGatewayId' => 
                  array (
                    'description' => '压测机的数据库网关ID。',
                    'type' => 'string',
                    'example' => '58598b2af48a0193dfc16fc6964ef****',
                  ),
                  'Description' => 
                  array (
                    'description' => '压测任务描述。',
                    'type' => 'string',
                    'example' => 'test-das-bench-0501',
                  ),
                  'ErrorCode' => 
                  array (
                    'description' => '压测内部任务返回的错误码。',
                    'type' => 'string',
                    'example' => '10910',
                  ),
                  'TableSchema' => 
                  array (
                    'description' => '压测中涉及的表名。',
                    'type' => 'string',
                    'example' => '[{"TABLE_NAME":"customer1","TABLE_SCHEMA":"tpcc"}]',
                  ),
                  'DtsJobStatus' => 
                  array (
                    'description' => 'DTS任务状态，取值：

- **NOT_STARTED**：未启动。
- **PRE_CHECKING**：预检查中。
- **PRE_CHECK_FAILED**：预检查失败。
- **CHECKING**：检查中。
- **MIGRATING**：迁移中。
- **CATCHED**：已经追平。
- **SUSPENDING**：暂停中。
- **MIGRATION_FAILED**：迁移失败。
- **FINISHED**：完成。
- **INITIALIZING**：同步初始化。
- **INITIALIZE_FAILED**：同步初始化失败。
- **SYNCHRONIZING**：同步中。
- **MODIFYING**：同步对象变更中。
- **SWITCHING**：切换中。
- **FAILED**：失败。
',
                    'type' => 'string',
                    'example' => 'PRE_CHECKING',
                  ),
                  'SrcInstanceArea' => 
                  array (
                    'description' => '源实例的数据库类型。',
                    'type' => 'string',
                    'example' => 'RDS',
                  ),
                  'BenchStepStatus' => 
                  array (
                    'description' => '压测子步骤状态。取值：

- **NEW**：任务初始化。
- **RUNNING**：正在执行。
- **FAILED**：失败。
- **FINISHED**：已完成。
- **Terminated**：已终止。
- **Deleted**：已删除。

',
                    'type' => 'string',
                    'example' => 'FINISHED',
                  ),
                  'Source' => 
                  array (
                    'description' => '任务来源。取值：

- **DAS**。
- **OPEN_API**。',
                    'type' => 'string',
                    'example' => 'DAS',
                  ),
                  'ArchiveJobId' => 
                  array (
                    'description' => '归档任务ID。',
                    'type' => 'string',
                    'example' => '\'202105211430070112231480820340758****',
                  ),
                  'Topic' => 
                  array (
                    'description' => 'kafka的消费Topic。',
                    'type' => 'string',
                    'example' => 'das',
                  ),
                  'RequestDuration' => 
                  array (
                    'description' => '压测任务的持续时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '864000',
                  ),
                  'TaskId' => 
                  array (
                    'description' => '任务ID。',
                    'type' => 'string',
                    'example' => 'e5cec704-0518-430f-8263-76f4dcds****',
                  ),
                  'Rate' => 
                  array (
                    'description' => '压测倍率。回放倍率必须是正整数，取值范围为：**0**~**30**，默认为**1**。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"DtsJobName\\": \\"RDS间迁移\\",\\n    \\"ErrorMessage\\": \\"DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\\\\\\\n\\\\\\\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].\\",\\n    \\"External\\": \\"Null\\",\\n    \\"BackupType\\": \\"TIMESTAMP\\",\\n    \\"UserId\\": \\"109141182625****\\",\\n    \\"DstType\\": \\"Instance\\",\\n    \\"EcsInstanceId\\": \\"i-bp1ecr5go2go1****\\",\\n    \\"DstInstanceUuid\\": \\"hdm_d887b5ccf99fa0dc9a1e5aaac368****\\",\\n    \\"TaskType\\": \\"pressure test\\",\\n    \\"BenchStep\\": \\"PROCEED\\",\\n    \\"Version\\": \\"V3.0\\",\\n    \\"EndState\\": \\"WAIT_LOGIC\\",\\n    \\"SrcInstanceUuid\\": \\"a364e414-e68b-4e5c-9166-65b3a153****\\",\\n    \\"ClientType\\": \\"ECS\\",\\n    \\"State\\": \\"WAIT_TARGET\\",\\n    \\"DstIp\\": \\"None\\",\\n    \\"SrcPublicIp\\": \\"None\\",\\n    \\"BackupId\\": \\"229132\\",\\n    \\"SqlCompleteReuse\\": \\"{\\\\\\"sqlUuid\\\\\\":\\\\\\"task_a37d2f07-45cb-****-a2a6-c66c62****\\\\\\",\\\\\\"metaUuid\\\\\\":\\\\\\"task_211e2561-5c0c-486b-864c-56b511****\\\\\\",\\\\\\"sqlFile\\\\\\":\\\\\\"cl-1620057600000-1800626.sc\\\\\\",\\\\\\"metaFile\\\\\\":\\\\\\"cl-1620057600000-180****.meta\\\\\\"}\\",\\n    \\"SmartPressureTime\\": 86400000,\\n    \\"ArchiveState\\": 1,\\n    \\"Status\\": \\"RUNNING\\",\\n    \\"WorkDir\\": \\"/tmp/bench/\\",\\n    \\"ArchiveOssTableName\\": \\"custins15546355_161604665****\\",\\n    \\"DtsJobId\\": \\"i03e3zty16i****\\",\\n    \\"DtsJobState\\": 0,\\n    \\"DstPort\\": 3306,\\n    \\"DtsJobClass\\": \\"medium\\",\\n    \\"ClientGatewayId\\": \\"58598b2af48a0193dfc16fc6964ef****\\",\\n    \\"Description\\": \\"test-das-bench-0501\\",\\n    \\"ErrorCode\\": \\"10910\\",\\n    \\"TableSchema\\": \\"[{\\\\\\"TABLE_NAME\\\\\\":\\\\\\"customer1\\\\\\",\\\\\\"TABLE_SCHEMA\\\\\\":\\\\\\"tpcc\\\\\\"}]\\",\\n    \\"DtsJobStatus\\": \\"PRE_CHECKING\\",\\n    \\"SrcInstanceArea\\": \\"RDS\\",\\n    \\"BenchStepStatus\\": \\"FINISHED\\",\\n    \\"Source\\": \\"DAS\\",\\n    \\"ArchiveJobId\\": \\"\'202105211430070112231480820340758****\\",\\n    \\"Topic\\": \\"das\\",\\n    \\"RequestDuration\\": 864000,\\n    \\"TaskId\\": \\"e5cec704-0518-430f-8263-76f4dcds****\\",\\n    \\"Rate\\": 1\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeCloudbenchTaskResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <DtsJobName>RDS间迁移</DtsJobName>\\n        <ErrorMessage>DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\\\n\\\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].</ErrorMessage>\\n        <External>Null</External>\\n        <BackupType>TIMESTAMP</BackupType>\\n        <UserId>109141182625****</UserId>\\n        <DstType>Instance</DstType>\\n        <EcsInstanceId>i-bp1ecr5go2go1****</EcsInstanceId>\\n        <DstInstanceUuid>hdm_d887b5ccf99fa0dc9a1e5aaac368****</DstInstanceUuid>\\n        <TaskType>pressure test</TaskType>\\n        <BenchStep>PROCEED</BenchStep>\\n        <Version>V3.0</Version>\\n        <EndState>WAIT_LOGIC</EndState>\\n        <SrcInstanceUuid>a364e414-e68b-4e5c-9166-65b3a153****</SrcInstanceUuid>\\n        <ClientType>ECS</ClientType>\\n        <State>WAIT_TARGET</State>\\n        <DstIp>None</DstIp>\\n        <SrcPublicIp>None</SrcPublicIp>\\n        <BackupId>229132</BackupId>\\n        <SqlCompleteReuse>{\\"sqlUuid\\":\\"task_a37d2f07-45cb-****-a2a6-c66c62****\\",\\"metaUuid\\":\\"task_211e2561-5c0c-486b-864c-56b511****\\",\\"sqlFile\\":\\"cl-1620057600000-1800626.sc\\",\\"metaFile\\":\\"cl-1620057600000-180****.meta\\"}</SqlCompleteReuse>\\n        <SmartPressureTime>86400000</SmartPressureTime>\\n        <ArchiveState>1</ArchiveState>\\n        <Status>RUNNING</Status>\\n        <WorkDir>/tmp/bench/</WorkDir>\\n        <ArchiveOssTableName>custins15546355_161604665****</ArchiveOssTableName>\\n        <DtsJobId>i03e3zty16i****</DtsJobId>\\n        <DstPort>3306</DstPort>\\n        <DtsJobClass>medium</DtsJobClass>\\n        <ClientGatewayId>58598b2af48a0193dfc16fc6964ef****</ClientGatewayId>\\n        <Description>test-das-bench-0501</Description>\\n        <ErrorCode>10910</ErrorCode>\\n        <TableSchema>[{\\"TABLE_NAME\\":\\"customer1\\",\\"TABLE_SCHEMA\\":\\"tpcc\\"}]</TableSchema>\\n        <DtsJobStatus>PRE_CHECKING</DtsJobStatus>\\n        <SrcInstanceArea>RDS</SrcInstanceArea>\\n        <BenchStepStatus>FINISHED</BenchStepStatus>\\n        <Source>DAS</Source>\\n        <ArchiveJobId>\'202105211430070112231480820340758****</ArchiveJobId>\\n        <Topic>das</Topic>\\n        <RequestDuration>864000</RequestDuration>\\n        <TaskId>e5cec704-0518-430f-8263-76f4dcds****</TaskId>\\n        <Rate>1</Rate>\\n    </Data>\\n</DescribeCloudbenchTaskResponse>","errorExample":""}]',
      'title' => '查询压测任务',
      'description' => '数据库自治服务DAS提供智能压测功能，帮助您验证您的实例规格是否需要扩容，有效应对业务流量高峰。更多信息，请参见[智能压测](~~155068~~)。',
    ),
    'DescribeCloudBenchTasks' => 
    array (
      'summary' => '调用DescribeCloudBenchTasks接口，查询压测任务列表。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Status',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务的运行状态。取值：

- **SUCCESS**：成功。
- **IGNORED**：忽略。
- **RUNNING**：运行中。
- **EXCEPTION**：异常。',
            'type' => 'string',
            'required' => false,
            'example' => 'SUCCESS',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '压测任务类型。取值：
- **pressure test**（默认）：智能压测，将从源实例上捕获的流量，按照目标实例规格支持的极限速度，在目标实例上进行回放。
- **smart pressure test**：生成压测，通过分析和学习短时间内在源实例上捕获的流量，生成和原始流量的业务模型和流量分布基本一致的流量进行持续压测，减少从源实例采集数据的时间，降低存储成本和性能开销。',
            'type' => 'string',
            'required' => false,
            'example' => 'pressure test',
          ),
        ),
        2 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => false,
            'example' => '1596177993000',
          ),
        ),
        3 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务结束时间，格式为Unix时间戳，单位为毫秒。
>查询任务结束时间需晚于查询任务开始时间。',
            'type' => 'string',
            'required' => false,
            'example' => '1596177993001',
          ),
        ),
        4 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        5 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页最大记录数，取值大于0且不超过Integer数据类型的最大值，默认值为10。',
            'type' => 'string',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNo' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页最大记录数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'Extra' => 
                  array (
                    'description' => '	备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'Total' => 
                  array (
                    'description' => '结果的数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '2',
                  ),
                  'List' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'cloudbenchTasks' => 
                      array (
                        'description' => '压测任务的详细信息列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'DtsJobName' => 
                            array (
                              'description' => 'DTS的任务名称。',
                              'type' => 'string',
                              'example' => 'RDS间迁移',
                            ),
                            'ErrorMessage' => 
                            array (
                              'description' => '任务失败的错误提示。',
                              'type' => 'string',
                              'example' => 'DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\n\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].',
                            ),
                            'External' => 
                            array (
                              'description' => '其他信息。',
                              'type' => 'string',
                              'example' => 'Null',
                            ),
                            'BackupType' => 
                            array (
                              'description' => '备份类型。取值：

- **TIMESTAMP**：按备份时间。
- **BACKUPID**：按备份集ID。',
                              'type' => 'string',
                              'example' => 'TIMESTAMP',
                            ),
                            'UserId' => 
                            array (
                              'description' => '阿里云账号ID。',
                              'type' => 'string',
                              'example' => '1091411816252****',
                            ),
                            'DstType' => 
                            array (
                              'description' => '目标实例的类型。取值：
- **Instance**（默认）：实例ID。
- **ConnectionString**：实例的连接地址。',
                              'type' => 'string',
                              'example' => 'Instance',
                            ),
                            'EcsInstanceId' => 
                            array (
                              'description' => 'ECS的实例ID。',
                              'type' => 'string',
                              'example' => 'i-bp1ecr5go2go1****',
                            ),
                            'DstInstanceUuid' => 
                            array (
                              'description' => '目标实例的唯一标识符号。',
                              'type' => 'string',
                              'example' => 'hdm_d887b5ccf99fa0dc9a1e5aaac368****',
                            ),
                            'TaskType' => 
                            array (
                              'description' => '压测任务类型。取值：
- **pressure test**（默认）：智能压测，将从源实例上捕获的流量，按照目标实例规格支持的极限速度，在目标实例上进行回放。
- **smart pressure test**：生成压测，通过分析和学习短时间内在源实例上捕获的流量，生成和原始流量的业务模型和流量分布基本一致的流量进行持续压测，减少从源实例采集数据的时间，降低存储成本和性能开销。',
                              'type' => 'string',
                              'example' => 'pressure test',
                            ),
                            'BenchStep' => 
                            array (
                              'description' => '压测的子步骤。取值：

- **NEW**：任务初始化。
- **WAIT_BUY_ECS**：新购ECS实例。
- **WAIT_START_ECS**：ECS实例启动。
- **WAIT_INSTALL_JDK**：安装JDK。
- **WAIT_INSTALL_DBGATEWAY**：安装DBGateway。
- **ADD_SECURITY_IPS_STEP**：配置安全组白名单。
- **ARCHIVE**：全量SQL归档。
- **DOWNLOAD**：下载全量SQL文件。
- **PROCEED**：预处理全量SQL文件。
- **PRE_LOAD**：预加载全量SQL文件。
- **VALIDATE**：功能验证。
- **PRESSURE**：性能压测。',
                              'type' => 'string',
                              'example' => 'PROCEED',
                            ),
                            'Version' => 
                            array (
                              'description' => '压测任务版本。取值：

- **V2.0**。
- **V3.0**。',
                              'type' => 'string',
                              'example' => 'V3.0',
                            ),
                            'EndState' => 
                            array (
                              'description' => '压测任务结束后的状态。取值：

- **WAIT_TARGET**：准备压测的目标实例。
- **WAIT_DBGATEWAY**：准备压测部署。
- **WAIT_SQL**：准备全量SQL。
- **WAIT_LOGIC**：准备开始回放流量。

>当压测任务执行完EndState设置的状态之后，任务将直接到达完成状态。',
                              'type' => 'string',
                              'example' => 'WAIT_TARGET',
                            ),
                            'SrcInstanceUuid' => 
                            array (
                              'description' => '源实例的唯一标识符号。',
                              'type' => 'string',
                              'example' => 'hdm_3063db6792965c080a4bcb6e6304****',
                            ),
                            'ClientType' => 
                            array (
                              'description' => '压测机器类型。取值：

- **ECS**：您需要自己准备[数据库网关](~~64905~~)。
- **DAS_ECS**：DAS自动购买和部署的ECS。',
                              'type' => 'string',
                              'example' => 'ECS',
                            ),
                            'State' => 
                            array (
                              'description' => '目前压测任务的状态。取值：

- **WAIT_TARGET**：准备压测的目标实例。
- **WAIT_DBGATEWAY**：准备压测部署。
- **WAIT_SQL**：准备全量SQL。
- **WAIT_LOGIC**：准备开始回放流量。',
                              'type' => 'string',
                              'example' => 'WAIT_TARGET',
                            ),
                            'DstIp' => 
                            array (
                              'description' => '备用参数。',
                              'type' => 'string',
                              'example' => 'None',
                            ),
                            'SrcPublicIp' => 
                            array (
                              'description' => '备用参数。',
                              'type' => 'string',
                              'example' => 'None',
                            ),
                            'BackupId' => 
                            array (
                              'description' => '备份集ID，可通过查询备份列表接口[DescribeBackups](~~26273~~)获取。',
                              'type' => 'string',
                              'example' => '229132',
                            ),
                            'SqlCompleteReuse' => 
                            array (
                              'description' => '全量SQL的复用信息。',
                              'type' => 'string',
                              'example' => '{"sqlUuid":"task_a37d2f07-45cb-4413-a2a6-c66c68****","metaUuid":"task_211e2561-5c0c-486b-864c-56b511****","sqlFile":"cl-1620057600000-1800626.sc","metaFile":"cl-1620057600000-1800626.meta"}',
                            ),
                            'SmartPressureTime' => 
                            array (
                              'description' => '生成压测的时间，单位为毫秒。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '86400000',
                            ),
                            'ArchiveState' => 
                            array (
                              'description' => 'SQL归档状态，取值：

- **0**：未开始。
- **1**：完成。
- **2**：错误。
- **3**：运行中。
- **4**：无需下载。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                            'Status' => 
                            array (
                              'description' => '压测任务的运行状态。取值：

- **SUCCESS**：成功。
- **IGNORED**：忽略。
- **RUNNING**：运行中。
- **EXCEPTION**：异常。',
                              'type' => 'string',
                              'example' => 'RUNNING',
                            ),
                            'WorkDir' => 
                            array (
                              'description' => '压测生成的临时目录。',
                              'type' => 'string',
                              'example' => '/tmp/bench/',
                            ),
                            'ArchiveOssTableName' => 
                            array (
                              'description' => '归档至OSS的表名。',
                              'type' => 'string',
                              'example' => 'custins15546355_161604665****',
                            ),
                            'DtsJobId' => 
                            array (
                              'description' => 'DTS迁移的任务ID。',
                              'type' => 'string',
                              'example' => 'i03e3zty16i****',
                            ),
                            'DtsJobState' => 
                            array (
                              'description' => 'DTS任务状态，取值：

- **NOT_STARTED**：未启动。
- **PRE_CHECKING**：预检查中。
- **PRE_CHECK_FAILED**：预检查失败。
- **CHECKING**：检查中。
- **MIGRATING**：迁移中。
- **CATCHED**：已经追平。
- **SUSPENDING**：暂停中。
- **MIGRATION_FAILED**：迁移失败。
- **FINISHED**：完成。
- **INITIALIZING**：同步初始化。
- **INITIALIZE_FAILED**：同步初始化失败。
- **SYNCHRONIZING**：同步中。
- **MODIFYING**：同步对象变更中。
- **SWITCHING**：切换中。
- **FAILED**：失败。
',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => 'CHECKING',
                            ),
                            'DstPort' => 
                            array (
                              'description' => '目标实例的端口。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '3306',
                            ),
                            'DtsJobClass' => 
                            array (
                              'description' => 'DTS链路规格。
>关于各链路规格的说明及性能测试情况请参见[数据迁移链路规格说明](~~26606~~)。',
                              'type' => 'string',
                              'example' => 'medium',
                            ),
                            'ClientGatewayId' => 
                            array (
                              'description' => '压测机的数据库网关ID。',
                              'type' => 'string',
                              'example' => '58598b2af48a0193dfc16fc6964ef****',
                            ),
                            'Description' => 
                            array (
                              'description' => '压测任务描述。',
                              'type' => 'string',
                              'example' => 'test-das-bench-0501',
                            ),
                            'ErrorCode' => 
                            array (
                              'description' => '压测内部任务返回的错误码。',
                              'type' => 'string',
                              'example' => '10109',
                            ),
                            'TableSchema' => 
                            array (
                              'description' => '压测中涉及的表名。',
                              'type' => 'string',
                              'example' => '[{"TABLE_NAME":"customer1","TABLE_SCHEMA":"tpcc"}]',
                            ),
                            'DtsJobStatus' => 
                            array (
                              'description' => 'DTS任务状态，取值：

- **NOT_STARTED**：未启动。
- **PRE_CHECKING**：预检查中。
- **PRE_CHECK_FAILED**：预检查失败。
- **CHECKING**：检查中。
- **MIGRATING**：迁移中。
- **CATCHED**：已经追平。
- **SUSPENDING**：暂停中。
- **MIGRATION_FAILED**：迁移失败。
- **FINISHED**：完成。
- **INITIALIZING**：同步初始化。
- **INITIALIZE_FAILED**：同步初始化失败。
- **SYNCHRONIZING**：同步中。
- **MODIFYING**：同步对象变更中。
- **SWITCHING**：切换中。
- **FAILED**：失败。
',
                              'type' => 'string',
                              'example' => 'PRE_CHECK_FAILED',
                            ),
                            'SrcInstanceArea' => 
                            array (
                              'description' => '源实例的数据库类型。',
                              'type' => 'string',
                              'example' => 'RDS',
                            ),
                            'BenchStepStatus' => 
                            array (
                              'description' => '压测子步骤状态。取值：

- **NEW**：任务初始化。
- **RUNNING**：正在执行。
- **FAILED**：失败。
- **FINISHED**：完成。
- **Terminated**：已终止。
- **Deleted**：已删除。
',
                              'type' => 'string',
                              'example' => 'FINISHED',
                            ),
                            'Source' => 
                            array (
                              'description' => '任务来源。取值：

- **DAS**。
- **OPEN_API**。',
                              'type' => 'string',
                              'example' => 'DAS',
                            ),
                            'ArchiveJobId' => 
                            array (
                              'description' => '归档任务ID。',
                              'type' => 'string',
                              'example' => '\'202105211430070112231480820340758****',
                            ),
                            'Topic' => 
                            array (
                              'description' => 'kafka的消费Topic。',
                              'type' => 'string',
                              'example' => 'das',
                            ),
                            'RequestDuration' => 
                            array (
                              'description' => '压测任务持续时间，单位为毫秒。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '86400000',
                            ),
                            'TaskId' => 
                            array (
                              'description' => '任务ID。',
                              'type' => 'string',
                              'example' => 'e5cec704-0518-430f-8263-76f4dcds****',
                            ),
                            'Rate' => 
                            array (
                              'description' => '源实例流量在目标实例上的回放速度，回放速度必须是正整数，取值：**0**~**30**，默认为**1**。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"PageNo\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"Extra\\": \\"None\\",\\n    \\"Total\\": 2,\\n    \\"List\\": {\\n      \\"cloudbenchTasks\\": [\\n        {\\n          \\"DtsJobName\\": \\"RDS间迁移\\",\\n          \\"ErrorMessage\\": \\"DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\\\\\\\n\\\\\\\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].\\",\\n          \\"External\\": \\"Null\\",\\n          \\"BackupType\\": \\"TIMESTAMP\\",\\n          \\"UserId\\": \\"1091411816252****\\",\\n          \\"DstType\\": \\"Instance\\",\\n          \\"EcsInstanceId\\": \\"i-bp1ecr5go2go1****\\",\\n          \\"DstInstanceUuid\\": \\"hdm_d887b5ccf99fa0dc9a1e5aaac368****\\",\\n          \\"TaskType\\": \\"pressure test\\",\\n          \\"BenchStep\\": \\"PROCEED\\",\\n          \\"Version\\": \\"V3.0\\",\\n          \\"EndState\\": \\"WAIT_TARGET\\",\\n          \\"SrcInstanceUuid\\": \\"hdm_3063db6792965c080a4bcb6e6304****\\",\\n          \\"ClientType\\": \\"ECS\\",\\n          \\"State\\": \\"WAIT_TARGET\\",\\n          \\"DstIp\\": \\"None\\",\\n          \\"SrcPublicIp\\": \\"None\\",\\n          \\"BackupId\\": \\"229132\\",\\n          \\"SqlCompleteReuse\\": \\"{\\\\\\"sqlUuid\\\\\\":\\\\\\"task_a37d2f07-45cb-4413-a2a6-c66c68****\\\\\\",\\\\\\"metaUuid\\\\\\":\\\\\\"task_211e2561-5c0c-486b-864c-56b511****\\\\\\",\\\\\\"sqlFile\\\\\\":\\\\\\"cl-1620057600000-1800626.sc\\\\\\",\\\\\\"metaFile\\\\\\":\\\\\\"cl-1620057600000-1800626.meta\\\\\\"}\\",\\n          \\"SmartPressureTime\\": 86400000,\\n          \\"ArchiveState\\": 1,\\n          \\"Status\\": \\"RUNNING\\",\\n          \\"WorkDir\\": \\"/tmp/bench/\\",\\n          \\"ArchiveOssTableName\\": \\"custins15546355_161604665****\\",\\n          \\"DtsJobId\\": \\"i03e3zty16i****\\",\\n          \\"DtsJobState\\": 0,\\n          \\"DstPort\\": 3306,\\n          \\"DtsJobClass\\": \\"medium\\",\\n          \\"ClientGatewayId\\": \\"58598b2af48a0193dfc16fc6964ef****\\",\\n          \\"Description\\": \\"test-das-bench-0501\\",\\n          \\"ErrorCode\\": \\"10109\\",\\n          \\"TableSchema\\": \\"[{\\\\\\"TABLE_NAME\\\\\\":\\\\\\"customer1\\\\\\",\\\\\\"TABLE_SCHEMA\\\\\\":\\\\\\"tpcc\\\\\\"}]\\",\\n          \\"DtsJobStatus\\": \\"PRE_CHECK_FAILED\\",\\n          \\"SrcInstanceArea\\": \\"RDS\\",\\n          \\"BenchStepStatus\\": \\"FINISHED\\",\\n          \\"Source\\": \\"DAS\\",\\n          \\"ArchiveJobId\\": \\"\'202105211430070112231480820340758****\\",\\n          \\"Topic\\": \\"das\\",\\n          \\"RequestDuration\\": 86400000,\\n          \\"TaskId\\": \\"e5cec704-0518-430f-8263-76f4dcds****\\",\\n          \\"Rate\\": 1\\n        }\\n      ]\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeCloudBenchTasksResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <PageNo>1</PageNo>\\n        <PageSize>10</PageSize>\\n        <Extra>None</Extra>\\n        <Total>2</Total>\\n        <List>\\n            <DtsJobName>RDS间迁移</DtsJobName>\\n            <ErrorMessage>DTS-070211: Connect Source DB failed. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException:Could not create connection to database server. Attempted reconnect 3 times. Giving up.][com.mysql.jdbc.exceptions.jdbc4.CommunicationsException:Communications link failure\\\\n\\\\nThe last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.][java.net.ConnectException:Connection timed out (Connection timed out)] About more information in [https://yq.aliyun.com/articles/499178].</ErrorMessage>\\n            <External>Null</External>\\n            <BackupType>TIMESTAMP</BackupType>\\n            <UserId>1091411816252****</UserId>\\n            <DstType>Instance</DstType>\\n            <EcsInstanceId>i-bp1ecr5go2go1****</EcsInstanceId>\\n            <DstInstanceUuid>hdm_d887b5ccf99fa0dc9a1e5aaac368****</DstInstanceUuid>\\n            <TaskType>pressure test</TaskType>\\n            <BenchStep>PROCEED</BenchStep>\\n            <Version>V3.0</Version>\\n            <EndState>WAIT_TARGET</EndState>\\n            <SrcInstanceUuid>hdm_3063db6792965c080a4bcb6e6304****</SrcInstanceUuid>\\n            <ClientType>ECS</ClientType>\\n            <State>WAIT_TARGET</State>\\n            <DstIp>None</DstIp>\\n            <SrcPublicIp>None</SrcPublicIp>\\n            <BackupId>229132</BackupId>\\n            <SqlCompleteReuse>{\\"sqlUuid\\":\\"task_a37d2f07-45cb-4413-a2a6-c66c68****\\",\\"metaUuid\\":\\"task_211e2561-5c0c-486b-864c-56b511****\\",\\"sqlFile\\":\\"cl-1620057600000-1800626.sc\\",\\"metaFile\\":\\"cl-1620057600000-1800626.meta\\"}</SqlCompleteReuse>\\n            <SmartPressureTime>86400000</SmartPressureTime>\\n            <ArchiveState>1</ArchiveState>\\n            <Status>RUNNING</Status>\\n            <WorkDir>/tmp/bench/</WorkDir>\\n            <ArchiveOssTableName>custins15546355_161604665****</ArchiveOssTableName>\\n            <DtsJobId>i03e3zty16i****</DtsJobId>\\n            <DstPort>3306</DstPort>\\n            <DtsJobClass>medium</DtsJobClass>\\n            <ClientGatewayId>58598b2af48a0193dfc16fc6964ef****</ClientGatewayId>\\n            <Description>test-das-bench-0501</Description>\\n            <ErrorCode>10109</ErrorCode>\\n            <TableSchema>[{\\"TABLE_NAME\\":\\"customer1\\",\\"TABLE_SCHEMA\\":\\"tpcc\\"}]</TableSchema>\\n            <DtsJobStatus>PRE_CHECK_FAILED</DtsJobStatus>\\n            <SrcInstanceArea>RDS</SrcInstanceArea>\\n            <BenchStepStatus>FINISHED</BenchStepStatus>\\n            <Source>DAS</Source>\\n            <ArchiveJobId>\'202105211430070112231480820340758****</ArchiveJobId>\\n            <Topic>das</Topic>\\n            <RequestDuration>86400000</RequestDuration>\\n            <TaskId>e5cec704-0518-430f-8263-76f4dcds****</TaskId>\\n            <Rate>1</Rate>\\n        </List>\\n    </Data>\\n</DescribeCloudBenchTasksResponse>","errorExample":""}]',
      'title' => '查询压测任务列表',
      'description' => '数据库自治服务DAS提供智能压测功能，帮助您验证您的实例规格是否需要扩容，有效应对业务流量高峰。更多信息，请参见[智能压测](~~155068~~)。',
    ),
    'DescribeHotBigKeys' => 
    array (
      'summary' => '调用DescribeHotBigKeys接口，实时获取当前内存中的热Key和大Key。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Redis实例ID，您可以调用[DescribeInstances](~~60933~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'r-bp18ff4a195d****',
          ),
        ),
        2 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Redis实例的数据分片ID，您可以调用[DescribeRoleZoneInfo](~~190794~~)接口获取。',
            'type' => 'string',
            'required' => false,
            'example' => 'r-****-db-0',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Data' => 
              array (
                'description' => '详情信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'HotKeys' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'HotKey' => 
                      array (
                        'description' => '热键详细列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Key' => 
                            array (
                              'description' => '具体的Key。',
                              'type' => 'string',
                              'example' => 'abc:def:eng',
                            ),
                            'Db' => 
                            array (
                              'description' => 'Key所在的DB。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Hot' => 
                            array (
                              'description' => 'Key的访问频次，即Key的每秒访问数。',
                              'type' => 'string',
                              'example' => '5500~6000',
                            ),
                            'KeyType' => 
                            array (
                              'description' => 'Key的类型。',
                              'type' => 'string',
                              'example' => 'zset',
                            ),
                            'Lfu' => 
                            array (
                              'description' => 'LFU算法的统计值。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '253',
                            ),
                            'NodeId' => 
                            array (
                              'description' => 'Redis实例的数据分片ID。',
                              'type' => 'string',
                              'example' => 'r-x****-db-0',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'BigKeys' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'BigKey' => 
                      array (
                        'description' => '大Key的详细列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Db' => 
                            array (
                              'description' => 'Key所在的DB。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Key' => 
                            array (
                              'description' => '具体的Key。',
                              'type' => 'string',
                              'example' => 'abc:def:eng',
                            ),
                            'KeyType' => 
                            array (
                              'description' => 'Key类型。',
                              'type' => 'string',
                              'example' => 'zset',
                            ),
                            'Size' => 
                            array (
                              'description' => '元素的个数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '2',
                            ),
                            'NodeId' => 
                            array (
                              'description' => 'Redis实例的数据分片ID。',
                              'type' => 'string',
                              'example' => 'r-x****-db-0',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'HotKeyMsg' => 
                  array (
                    'description' => '获取热Key失败的原因。',
                    'type' => 'string',
                    'example' => 'current version doesn\'t support',
                  ),
                  'BigKeyMsg' => 
                  array (
                    'description' => '获取大Key失败的原因。',
                    'type' => 'string',
                    'example' => 'current version doesn\'t support',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Data\\": {\\n    \\"HotKeys\\": {\\n      \\"HotKey\\": [\\n        {\\n          \\"Key\\": \\"abc:def:eng\\",\\n          \\"Db\\": 0,\\n          \\"Hot\\": \\"5500~6000\\",\\n          \\"KeyType\\": \\"zset\\",\\n          \\"Lfu\\": 253,\\n          \\"NodeId\\": \\"r-x****-db-0\\"\\n        }\\n      ]\\n    },\\n    \\"BigKeys\\": {\\n      \\"BigKey\\": [\\n        {\\n          \\"Db\\": 0,\\n          \\"Key\\": \\"abc:def:eng\\",\\n          \\"KeyType\\": \\"zset\\",\\n          \\"Size\\": 2,\\n          \\"NodeId\\": \\"r-x****-db-0\\"\\n        }\\n      ]\\n    },\\n    \\"HotKeyMsg\\": \\"current version doesn\'t support\\",\\n    \\"BigKeyMsg\\": \\"current version doesn\'t support\\"\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeHotBigKeysResponse>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Data>\\n        <HotKeys>\\n            <Key>abc:def:eng</Key>\\n            <Db>0</Db>\\n            <Hot>5500~6000</Hot>\\n            <KeyType>zset</KeyType>\\n            <Lfu>253</Lfu>\\n            <NodeId>r-x****-db-0</NodeId>\\n        </HotKeys>\\n        <BigKeys>\\n            <Db>0</Db>\\n            <Key>abc:def:eng</Key>\\n            <KeyType>zset</KeyType>\\n            <Size>2</Size>\\n            <NodeId>r-x****-db-0</NodeId>\\n        </BigKeys>\\n        <HotKeyMsg>current version doesn\'t support</HotKeyMsg>\\n        <BigKeyMsg>current version doesn\'t support</BigKeyMsg>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</DescribeHotBigKeysResponse>","errorExample":""}]',
      'title' => '实时获取当前热Key和大Key',
      'description' => '对数据结构为List、Hash、Set、Zset的Key，按照Key中元素的数量排序并展示排名前3的Key，记录为大Key；当某个Key的QPS大于3,000时会被记录为热点Key。

- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于4.3.3，建议使用最新版本。
- 使用DAS的SDK的版本为1.0.2或以上。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口只适用于如下Redis实例：
    - 实例为社区版（5.0及以上版本）或企业版（性能增强型）。
    - 实例的小版本为最新。

>关于如何查询小版本、升级小版本，详情请参见[ModifyInstanceMinorVersion](~~129381~~)、[DescribeEngineVersion](~~95268~~)。',
    ),
    'DescribeTopHotKeys' => 
    array (
      'summary' => '调用DescribeTopHotKeys接口，获取一段时间内排名前100的热Key。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Redis实例ID，您可以调用[DescribeInstances](~~60933~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'r-bp18ff4a195d****',
          ),
        ),
        2 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Redis实例的数据分片ID，您可以调用[DescribeRoleZoneInfo](~~190794~~)接口获取。',
            'type' => 'string',
            'required' => false,
            'example' => 'r-****-db-0',
          ),
        ),
        3 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1596177993000',
          ),
        ),
        4 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务结束时间，格式为Unix时间戳，单位为毫秒。
> - 查询任务结束时间需晚于查询任务开始时间。
> - 仅支持最大查询时间范围为4天内的数据。
> - **StartTime**和**EndTime**最大查询间隔为3小时内。',
            'type' => 'string',
            'required' => true,
            'example' => '1596177993001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Data' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'HotKey' => 
                  array (
                    'description' => '热Key详细信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Db' => 
                        array (
                          'description' => 'Key所在的DB。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'Key' => 
                        array (
                          'description' => '具体的Key。',
                          'type' => 'string',
                          'example' => 'abc:def:eng',
                        ),
                        'Hot' => 
                        array (
                          'description' => 'Key的访问频次，即Key的每秒访问数。',
                          'type' => 'string',
                          'example' => '5500~6000',
                        ),
                        'KeyType' => 
                        array (
                          'description' => 'Key类型。',
                          'type' => 'string',
                          'example' => 'zset',
                        ),
                        'Lfu' => 
                        array (
                          'description' => 'LFU算法的统计值。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '253',
                        ),
                        'NodeId' => 
                        array (
                          'description' => 'Redis实例的数据分片ID。',
                          'type' => 'string',
                          'example' => 'r-x****-db-0',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Data\\": {\\n    \\"HotKey\\": [\\n      {\\n        \\"Db\\": 0,\\n        \\"Key\\": \\"abc:def:eng\\",\\n        \\"Hot\\": \\"5500~6000\\",\\n        \\"KeyType\\": \\"zset\\",\\n        \\"Lfu\\": 253,\\n        \\"NodeId\\": \\"r-x****-db-0\\"\\n      }\\n    ]\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeTopHotKeysResponse>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Data>\\n        <Db>0</Db>\\n        <Key>abc:def:eng</Key>\\n        <Hot>5500~6000</Hot>\\n        <KeyType>zset</KeyType>\\n        <Lfu>253</Lfu>\\n        <NodeId>r-x****-db-0</NodeId>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</DescribeTopHotKeysResponse>","errorExample":""}]',
      'title' => '获取排名前100的热Key',
      'description' => '当某个Key的QPS大于3,000时会被记录为热点Key。

- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于4.3.3，建议使用最新版本。
- 使用DAS的SDK的版本为1.0.2或以上。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口只适用于如下Redis实例：
    - 实例为社区版（4.0及以上版本）或企业版（性能增强型）。
    - 实例的小版本为最新。

>关于如何查询小版本、升级小版本，详情请参见[DescribeEngineVersion](~~95268~~)、[ModifyInstanceMinorVersion](~~129381~~)。',
    ),
    'DescribeTopBigKeys' => 
    array (
      'summary' => '调用DescribeTopBigKeys接口，获取一段时间内排名前100的大Key。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Redis实例ID，您可以调用[DescribeInstances](~~60933~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'r-bp18ff4a195d****',
          ),
        ),
        2 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Redis实例的数据分片ID，您可以调用[DescribeRoleZoneInfo](~~190794~~)接口获取。',
            'type' => 'string',
            'required' => false,
            'example' => 'r-x****-db-0',
          ),
        ),
        3 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1596177993000',
          ),
        ),
        4 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务结束时间，格式为Unix时间戳，单位为毫秒。
> - 查询任务结束时间需晚于查询任务开始时间。
> - 仅支持最大查询时间范围为4天内的数据。
> - **StartTime**和**EndTime**最大查询间隔为3小时内。',
            'type' => 'string',
            'required' => true,
            'example' => '1596177993001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Data' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'BigKey' => 
                  array (
                    'description' => '大Key详细信息列表。

> 查询时间段内没有大Key时，返回为空。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Key' => 
                        array (
                          'description' => '具体的Key。',
                          'type' => 'string',
                          'example' => 'abc:def:eng',
                        ),
                        'Db' => 
                        array (
                          'description' => 'Key所在的DB。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'KeyType' => 
                        array (
                          'description' => 'Key的类型。',
                          'type' => 'string',
                          'example' => 'zset',
                        ),
                        'Size' => 
                        array (
                          'description' => '元素的个数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '2',
                        ),
                        'NodeId' => 
                        array (
                          'description' => 'Redis实例的数据分片ID。',
                          'type' => 'string',
                          'example' => 'r-x****-db-0',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Data\\": {\\n    \\"BigKey\\": [\\n      {\\n        \\"Key\\": \\"abc:def:eng\\",\\n        \\"Db\\": 0,\\n        \\"KeyType\\": \\"zset\\",\\n        \\"Size\\": 2,\\n        \\"NodeId\\": \\"r-x****-db-0\\"\\n      }\\n    ]\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeTopBigKeysResponse>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Data>\\n        <Key>abc:def:eng</Key>\\n        <Db>0</Db>\\n        <KeyType>zset</KeyType>\\n        <Size>2</Size>\\n        <NodeId>r-x****-db-0</NodeId>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</DescribeTopBigKeysResponse>","errorExample":""}]',
      'title' => '	获取排名前100的大Key',
      'description' => '对数据结构为List、Hash、Set、Zset的Key，按照Key中元素的数量排序并展示排名前3的Key，记录为大Key。

- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于4.3.3，建议使用最新版本。
- 使用DAS的SDK的版本为1.0.2或以上。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口只适用于如下Redis实例：
    - 实例为社区版（5.0及以上版本）或企业版（性能增强型）。
    - 实例的小版本为最新。

>关于如何查询小版本、升级小版本，详情请参见[ModifyInstanceMinorVersion](~~129381~~)、[DescribeEngineVersion](~~95268~~)。',
    ),
    'DescribeHotKeys' => 
    array (
      'summary' => '调用DescribeHotKeys接口，查询Redis实例的热Key。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Redis实例ID，您可以调用[DescribeInstances](~~60933~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'r-bp18ff4a195d****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Redis实例的数据分片ID，您可以调用[DescribeRoleZoneInfo](~~190794~~)接口获取。',
            'type' => 'string',
            'required' => false,
            'example' => 'r-x****-db-0',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Data' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'HotKey' => 
                  array (
                    'description' => '详细信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Key' => 
                        array (
                          'description' => '具体的Key。',
                          'type' => 'string',
                          'example' => 'abc:def:eng',
                        ),
                        'Db' => 
                        array (
                          'description' => 'Key所在的DB。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'Hot' => 
                        array (
                          'description' => 'Key的访问频次，即Key的每秒访问数。',
                          'type' => 'string',
                          'example' => '5500~6000',
                        ),
                        'KeyType' => 
                        array (
                          'description' => 'Key的类型。',
                          'type' => 'string',
                          'example' => 'zset',
                        ),
                        'Size' => 
                        array (
                          'description' => '元素的个数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '2',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Data\\": {\\n    \\"HotKey\\": [\\n      {\\n        \\"Key\\": \\"abc:def:eng\\",\\n        \\"Db\\": 0,\\n        \\"Hot\\": \\"5500~6000\\",\\n        \\"KeyType\\": \\"zset\\",\\n        \\"Size\\": 2\\n      }\\n    ]\\n  },\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeHotKeysResponse>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Data>\\n        <Key>abc:def:eng</Key>\\n        <Db>0</Db>\\n        <Hot>5500~6000</Hot>\\n        <KeyType>zset</KeyType>\\n        <Size>2</Size>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</DescribeHotKeysResponse>","errorExample":""}]',
      'title' => '查询实例当前的热Key',
      'description' => '使用该接口需满足以下前提条件：

- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于4.3.3，建议使用最新版本。
- 使用DAS的SDK的版本为1.0.2或以上。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口只适用于如下Redis实例：
    - 实例为社区版（4.0及以上版本）或企业版（性能增强型）。
    - 实例的小版本为最新。

>关于如何查询小版本、升级小版本，详情请参见[ModifyInstanceMinorVersion](~~129381~~)、[DescribeEngineVersion](~~95268~~)。',
    ),
    'CreateQueryOptimizeTag' => 
    array (
      'summary' => '调用CreateQueryOptimizeTag接口，对目标SQL进行打标。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
        1 => 'http',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**：RDS MySQL
- **PolarDBMySQL**：PolarDB MySQL版
- **PostgreSQL**：RDS PostgreSQL',
            'type' => 'string',
            'required' => true,
            'example' => 'MySQL',
          ),
        ),
        1 => 
        array (
          'name' => 'SqlIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL模板ID，您可以调用[GetQueryOptimizeDataStats](~~405261~~)接口查询SQL模板ID。支持英文逗号（,）分隔传入多个模板ID，进行批量打标。',
            'type' => 'string',
            'required' => true,
            'example' => '6068ce044e3dc9b903979672fb0b69df,d12515c015fc9f41a0778a9e1de0****',
          ),
        ),
        2 => 
        array (
          'name' => 'Tags',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL标签。支持英文逗号（,）分隔传入多个值。

- **DAS\\_IMPORTANT**：重要SQL。
- **DAS\\_NOT\\_IMPORTANT**：不重要SQL。
- **USER\\_IGNORE**：无需优化。
- **DAS\\_IN\\_PLAN**：排期优化。',
            'type' => 'string',
            'required' => true,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'DAS_IN_PLAN,DAS_NOT_IMPORTANT',
          ),
        ),
        3 => 
        array (
          'name' => 'Status',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '设置请求参数**Tags**的状态：

- **0**：清空请求参数**SqlIds**对应的全部标签，忽略请求参数**Tags**设置。
- **1**：设置请求参数**SqlIds**对应的标签为请求参数**Tags**的值。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'Comments',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备注。

长度为1~300个字符。',
            'type' => 'string',
            'required' => false,
            'example' => '离线同步类慢SQL，无需优化。',
          ),
        ),
        5 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '阿里云为该请求生成的唯一标识符。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'title' => 'Boolean',
                'description' => '打标操作是否执行成功：

- **true**：打标成功。
- **false**：打标失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": true\\n}","errorExample":""},{"type":"xml","example":"<CreateQueryOptimizeTagResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n    <Data>true</Data>\\n</CreateQueryOptimizeTagResponse>","errorExample":""}]',
      'title' => '对目标SQL进行打标',
      'description' => '- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：
    - RDS MySQL
    - PolarDB MySQL版
    - RDS PostgreSQL',
    ),
    'GetQueryOptimizeExecErrorStats' => 
    array (
      'summary' => '调用GetQueryOptimizeExecErrorStats接口，获取执行失败的模板数据。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**
- **PolarDBMySQL**
- **PostgreSQL**',
            'type' => 'string',
            'required' => true,
            'example' => 'MySQL',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID，多个实例ID间用逗号分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        2 => 
        array (
          'name' => 'Keywords',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL文本关键词，多个关键词以空格分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'select update',
          ),
        ),
        3 => 
        array (
          'name' => 'LogicalOperator',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '多个SQL文本关键词逻辑关系，当前支持：

- **or**：或。
- **and**：与。',
            'type' => 'string',
            'required' => false,
            'example' => 'or',
          ),
        ),
        4 => 
        array (
          'name' => 'DbNames',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要查询的数据库名。',
            'type' => 'string',
            'required' => false,
            'example' => 'testdb01',
          ),
        ),
        5 => 
        array (
          'name' => 'Time',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询数据的日期，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1642953600000',
          ),
        ),
        6 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询每页数据量，默认为10。',
            'type' => 'string',
            'required' => true,
            'example' => '10',
          ),
        ),
        7 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询的页码，从1开始，默认为1。',
            'type' => 'string',
            'required' => true,
            'example' => '1',
          ),
        ),
        8 => 
        array (
          'name' => 'OrderBy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '排序字段，当前仅支持error_count（SQL执行错误次数）。',
            'type' => 'string',
            'required' => false,
            'example' => 'error_count',
          ),
        ),
        9 => 
        array (
          'name' => 'Asc',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否升序排序，默认为**true**。

- **true**：是。
- **false**：否。',
            'type' => 'string',
            'required' => false,
            'example' => 'true',
          ),
        ),
        10 => 
        array (
          'name' => 'Region',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例所属地域，取值：

- **cn-china**：中国内地。
- **cn-hongkong**：中国香港。
- **ap-southeast-1**：新加坡。

此参数只有在请求参数**InstanceIds**为空时有效。如果请求参数**InstanceIds**为空时，按照**Region**参数设置的地域获取数据，系统默认实例所属地域为**cn-china**；如果请求参数**InstanceIds**不为空时，即使设置了**Region**参数，也以**InstanceIds**所传入的第一个实例所在地域为准获取数据。

> 在中国内地各地域创建的实例，传入此参数时，都为**cn-china**。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-china',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'object',
                'properties' => 
                array (
                  'Total' => 
                  array (
                    'description' => '总数据量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '19',
                  ),
                  'PageNo' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页数量。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'Extra' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'List' => 
                  array (
                    'description' => '执行失败的模板数据列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '执行失败的模板数据列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'InstanceId' => 
                        array (
                          'description' => '实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze8g2am97624****',
                        ),
                        'InstanceName' => 
                        array (
                          'description' => '实例别名。',
                          'type' => 'string',
                          'example' => 'test01',
                        ),
                        'Dbname' => 
                        array (
                          'description' => '数据库名。',
                          'type' => 'string',
                          'example' => 'testdb01',
                        ),
                        'SqlId' => 
                        array (
                          'description' => 'SQL模板ID。',
                          'type' => 'string',
                          'example' => '2e8147b5ca2dfc640dfd5e43d96a****',
                        ),
                        'SqlText' => 
                        array (
                          'description' => '执行错误的SQL文本。',
                          'type' => 'string',
                          'example' => 'select * from test1',
                        ),
                        'ErrorCode' => 
                        array (
                          'description' => '错误码。',
                          'type' => 'string',
                          'example' => '1146',
                        ),
                        'ErrorCount' => 
                        array (
                          'description' => '错误次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Total\\": 19,\\n    \\"PageNo\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"Extra\\": \\"None\\",\\n    \\"List\\": [\\n      {\\n        \\"InstanceId\\": \\"rm-2ze8g2am97624****\\",\\n        \\"InstanceName\\": \\"test01\\",\\n        \\"Dbname\\": \\"testdb01\\",\\n        \\"SqlId\\": \\"2e8147b5ca2dfc640dfd5e43d96a****\\",\\n        \\"SqlText\\": \\"select * from test1\\",\\n        \\"ErrorCode\\": \\"1146\\",\\n        \\"ErrorCount\\": 10\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetQueryOptimizeExecErrorStatsResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Total>19</Total>\\n        <PageNo>1</PageNo>\\n        <PageSize>10</PageSize>\\n        <Extra>None</Extra>\\n        <List>\\n            <InstanceId>rm-2ze8g2am97624****</InstanceId>\\n            <InstanceName>test01</InstanceName>\\n            <Dbname>testdb01</Dbname>\\n            <SqlId>2e8147b5ca2dfc640dfd5e43d96a****</SqlId>\\n            <SqlText>select * from test1</SqlText>\\n            <ErrorCode>1146</ErrorCode>\\n            <ErrorCount>10</ErrorCount>\\n        </List>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetQueryOptimizeExecErrorStatsResponse>","errorExample":""}]',
      'title' => '获取执行失败的模板数据',
      'description' => '- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：
    - RDS MySQL
    - PolarDB MySQL版
    - RDS PostgreSQL',
    ),
    'GetQueryOptimizeExecErrorSample' => 
    array (
      'summary' => '调用GetQueryOptimizeExecErrorSample接口，获取执行失败的样本数据。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**
- **PolarDBMySQL**
- **PostgreSQL**',
            'type' => 'string',
            'required' => true,
            'example' => 'MySQL',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        2 => 
        array (
          'name' => 'SqlId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL模板ID，您可调用[GetQueryOptimizeExecErrorStats](~~405235~~)接口查询SQL模板ID。',
            'type' => 'string',
            'required' => true,
            'example' => '2e8147b5ca2dfc640dfd5e43d96a****',
          ),
        ),
        3 => 
        array (
          'name' => 'Time',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询数据的日期，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1642953600000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'Total' => 
                  array (
                    'description' => '总数据量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '2',
                  ),
                  'PageNo' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'Extra' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'List' => 
                  array (
                    'description' => '返回信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'OrigHost' => 
                        array (
                          'description' => '执行SQL的客户端IP地址。',
                          'type' => 'string',
                          'example' => '100.104.XX.XX',
                        ),
                        'User' => 
                        array (
                          'description' => '执行SQL的客户端用户名。',
                          'type' => 'string',
                          'example' => 'test01',
                        ),
                        'Dbname' => 
                        array (
                          'description' => '数据库名。',
                          'type' => 'string',
                          'example' => 'testdb01',
                        ),
                        'SqlId' => 
                        array (
                          'description' => 'SQL模板ID。',
                          'type' => 'string',
                          'example' => '2e8147b5ca2dfc640dfd5e43d96a****',
                        ),
                        'SqlText' => 
                        array (
                          'description' => '执行错误的SQL文本。',
                          'type' => 'string',
                          'example' => 'select * from test1',
                        ),
                        'ErrorCode' => 
                        array (
                          'description' => '错误码。',
                          'type' => 'string',
                          'example' => '1146',
                        ),
                        'Timestamp' => 
                        array (
                          'description' => '错误SQL执行的时间，格式为Unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1643020306739',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Total\\": 2,\\n    \\"PageNo\\": 0,\\n    \\"PageSize\\": 0,\\n    \\"Extra\\": \\"None\\",\\n    \\"List\\": [\\n      {\\n        \\"OrigHost\\": \\"100.104.XX.XX\\",\\n        \\"User\\": \\"test01\\",\\n        \\"Dbname\\": \\"testdb01\\",\\n        \\"SqlId\\": \\"2e8147b5ca2dfc640dfd5e43d96a****\\",\\n        \\"SqlText\\": \\"select * from test1\\",\\n        \\"ErrorCode\\": \\"1146\\",\\n        \\"Timestamp\\": 1643020306739\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetQueryOptimizeExecErrorSampleResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Total>2</Total>\\n        <Extra>None</Extra>\\n        <List>\\n            <OrigHost>100.104.XX.XX</OrigHost>\\n            <User>test01</User>\\n            <Dbname>testdb01</Dbname>\\n            <SqlId>2e8147b5ca2dfc640dfd5e43d96a****</SqlId>\\n            <SqlText>select * from test1</SqlText>\\n            <ErrorCode>1146</ErrorCode>\\n            <Timestamp>1643020306739</Timestamp>\\n        </List>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetQueryOptimizeExecErrorSampleResponse>","errorExample":""}]',
      'title' => '获取执行失败的样本数据',
      'description' => '- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于2.1.8，建议使用最新版本。
- 使用DAS的SDK的版本为2.1.8或以上。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：
    - RDS MySQL
    - PolarDB MySQL版
    - RDS PostgreSQL',
    ),
    'GetQueryOptimizeSolution' => 
    array (
      'summary' => '调用GetQueryOptimizeSolution接口，获取治理建议。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**
- **PolarDBMySQL**
- **PostgreSQL**',
            'type' => 'string',
            'required' => true,
            'example' => 'MySQL',
          ),
        ),
        1 => 
        array (
          'name' => 'SqlId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL模板ID。
您可调用[GetQueryOptimizeDataStats](~~405261~~)接口查询SQL模板ID。',
            'type' => 'string',
            'required' => true,
            'example' => '05fecf7e7b3efd123c4d5197035f****',
          ),
        ),
        2 => 
        array (
          'name' => 'RuleIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '规则ID，具体信息请参见[查询治理](~~290038~~)。',
            'type' => 'string',
            'required' => true,
            'example' => 'LARGE_ROWS_EXAMINED',
          ),
        ),
        3 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。
您可调用[GetQueryOptimizeDataStats](~~405261~~)接口查询实例ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-bp1o3z6beqpej****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'Total' => 
                  array (
                    'description' => '总数据量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageNo' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'Extra' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'List' => 
                  array (
                    'description' => '治理建议列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '治理建议列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Level' => 
                        array (
                          'description' => '建议级别：

- **INFO**：提示。
- **WARN**：警告。',
                          'type' => 'string',
                          'example' => 'INFO',
                        ),
                        'RuleId' => 
                        array (
                          'description' => '规则ID，具体信息请参见[查询治理](~~290038~~)。',
                          'type' => 'string',
                          'example' => 'LARGE_ROWS_EXAMINED',
                        ),
                        'Solution' => 
                        array (
                          'description' => '解决方案，具体信息请参见[查询治理](~~290038~~)。',
                          'type' => 'string',
                          'example' => 'LARGE_ROWS_EXAMINED_SOLUTION',
                        ),
                        'SolutionExt' => 
                        array (
                          'description' => '备用参数。',
                          'type' => 'string',
                          'example' => 'None',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '30FF4E40-17F3-5A51-AB23-43F30D9B****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Total\\": 1,\\n    \\"PageNo\\": 0,\\n    \\"PageSize\\": 0,\\n    \\"Extra\\": \\"None\\",\\n    \\"List\\": [\\n      {\\n        \\"Level\\": \\"INFO\\",\\n        \\"RuleId\\": \\"LARGE_ROWS_EXAMINED\\",\\n        \\"Solution\\": \\"LARGE_ROWS_EXAMINED_SOLUTION\\",\\n        \\"SolutionExt\\": \\"None\\"\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"30FF4E40-17F3-5A51-AB23-43F30D9B****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetQueryOptimizeSolutionResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Total>1</Total>\\n        <Extra>None</Extra>\\n        <List>\\n            <Level>INFO</Level>\\n            <RuleId>LARGE_ROWS_EXAMINED</RuleId>\\n            <Solution>LARGE_ROWS_EXAMINED_SOLUTION</Solution>\\n            <SolutionExt>None</SolutionExt>\\n        </List>\\n    </Data>\\n    <RequestId>30FF4E40-17F3-5A51-AB23-43F30D9B****</RequestId>\\n    <Success>true</Success>\\n</GetQueryOptimizeSolutionResponse>","errorExample":""}]',
      'title' => '获取治理建议',
      'description' => '- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：
    - RDS MySQL
    - PolarDB MySQL版
    - RDS PostgreSQL',
    ),
    'GetQueryOptimizeRuleList' => 
    array (
      'summary' => '调用GetQueryOptimizeRuleList接口，获取规则列表。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**
- **PolarDBMySQL**
- **PostgreSQL**',
            'type' => 'string',
            'required' => true,
            'example' => 'MySQL',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID，多个实例ID用逗号分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        2 => 
        array (
          'name' => 'TagNames',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '',
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        3 => 
        array (
          'name' => 'Region',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例所属地域，取值：

- **cn-china**：中国内地。
- **cn-hongkong**：中国香港。
- **ap-southeast-1**：新加坡。

此参数只有在请求参数**InstanceIds**为空时有效。如果请求参数**InstanceIds**为空时，按照**Region**参数设置的地域获取数据，系统默认实例所属地域为**cn-china**；如果请求参数**InstanceIds**不为空时，即使设置了**Region**参数，也以**InstanceIds**所传入的第一个实例所在地域为准获取数据。

> 在中国内地各地域创建的实例，传入此参数时，都为**cn-china**。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-china',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'Total' => 
                  array (
                    'description' => '总数据量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageNo' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'Extra' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'List' => 
                  array (
                    'description' => '规则数据列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '规则数据列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Type' => 
                        array (
                          'description' => '规则类型，当前只支持 **Predefined**（系统预定义）。',
                          'type' => 'string',
                          'example' => 'Predefined',
                        ),
                        'Name' => 
                        array (
                          'description' => '规则名，具体信息请参见[查询治理](~~290038~~)。',
                          'type' => 'string',
                          'example' => 'LARGE_ROWS_EXAMINED',
                        ),
                        'RuleId' => 
                        array (
                          'description' => '备用参数。',
                          'type' => 'string',
                          'example' => 'None',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Total\\": 1,\\n    \\"PageNo\\": 0,\\n    \\"PageSize\\": 0,\\n    \\"Extra\\": \\"None\\",\\n    \\"List\\": [\\n      {\\n        \\"Type\\": \\"Predefined\\",\\n        \\"Name\\": \\"LARGE_ROWS_EXAMINED\\",\\n        \\"RuleId\\": \\"None\\"\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetQueryOptimizeRuleListResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Total>1</Total>\\n        <Extra>None</Extra>\\n        <List>\\n            <Type>Predefined</Type>\\n            <Name>LARGE_ROWS_EXAMINED</Name>\\n            <RuleId>None</RuleId>\\n        </List>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetQueryOptimizeRuleListResponse>","errorExample":""}]',
      'title' => '获取规则列表',
      'description' => '- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于2.1.8，建议使用最新版本。
- 使用DAS的SDK的版本为2.1.8或以上。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：
    - RDS MySQL
    - PolarDB MySQL版
    - RDS PostgreSQL',
    ),
    'GetQueryOptimizeDataTrend' => 
    array (
      'summary' => '调用GetQueryOptimizeDataTrend接口，获取查询治理趋势数据。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**
- **PolarDBMySQL**
- **PostgreSQL**',
            'type' => 'string',
            'required' => true,
            'example' => 'MySQL',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID，多个实例ID用逗号分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        2 => 
        array (
          'name' => 'TagNames',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        3 => 
        array (
          'name' => 'Start',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询数据的起始日期，格式为Unix时间戳，单位为毫秒。

> 查询开始时间最大不能早于当前时间2个月。',
            'type' => 'string',
            'required' => true,
            'example' => '1642435200000',
          ),
        ),
        4 => 
        array (
          'name' => 'End',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询数据的终止日期，格式为Unix时间戳，单位为毫秒。

> 查询结束时间需晚于查询开始时间，最晚只能查询到当天凌晨0点的数据。',
            'type' => 'string',
            'required' => true,
            'example' => '1643040000000',
          ),
        ),
        5 => 
        array (
          'name' => 'Region',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例所属地域，取值：

- **cn-china**：中国内地。
- **cn-hongkong**：中国香港。
- **ap-southeast-1**：新加坡。

此参数只有在请求参数**InstanceIds**为空时有效。如果请求参数**InstanceIds**为空时，按照**Region**参数设置的地域获取数据，系统默认实例所属地域为**cn-china**；如果请求参数**InstanceIds**不为空时，即使设置了**Region**参数，也以**InstanceIds**所传入的第一个实例所在地域为准获取数据。

> 在中国内地各地域创建的实例，传入此参数时，都为**cn-china**。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-china',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'Total' => 
                  array (
                    'description' => '总数据量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'PageNo' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'Extra' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'List' => 
                  array (
                    'description' => '趋势数据列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '趋势数据列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Kpi' => 
                        array (
                          'description' => '指标名，指标名及其含义如下：

- **sqlExecuteCount**：慢SQL执行次数。
- **sqlExecuteCountDiff**：慢SQL执行次数相较于前一天的差值。
- **sqlCount**：慢SQL模板数据。
- **sqlCountDiff**：慢SQL模板数相较于前一天的差值。
- **optimizedSqlExecuteCount**：推荐优化的慢SQL执行次。
- **optimizedSqlExecuteCountDiff**：推荐优化的慢SQL执行次数相较于前一天的差值。
- **optimizedSqlCount**：推荐优化的慢SQL数。
- **optimizedSqlCountDiff**：推荐优化的慢SQL数相较于前一天的差值。',
                          'type' => 'string',
                          'example' => 'sqlExecuteCount',
                        ),
                        'Timestamp' => 
                        array (
                          'description' => '数据日期，格式为Unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1643040000000',
                        ),
                        'Value' => 
                        array (
                          'description' => '指标数据的值。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '1000',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Total\\": 10,\\n    \\"PageNo\\": 0,\\n    \\"PageSize\\": 0,\\n    \\"Extra\\": \\"None\\",\\n    \\"List\\": [\\n      {\\n        \\"Kpi\\": \\"sqlExecuteCount\\",\\n        \\"Timestamp\\": 1643040000000,\\n        \\"Value\\": 1000\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetQueryOptimizeDataTrendResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Total>10</Total>\\n        <Extra>None</Extra>\\n        <List>\\n            <Kpi>sqlExecuteCount</Kpi>\\n            <Timestamp>1643040000000</Timestamp>\\n            <Value>1000</Value>\\n        </List>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetQueryOptimizeDataTrendResponse>","errorExample":""}]',
      'title' => '获取查询治理趋势数据',
      'description' => '- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于2.1.8，建议使用最新版本。
- 使用DAS的SDK的版本为2.1.8或以上。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：
    - RDS MySQL
    - PolarDB MySQL版
    - RDS PostgreSQL',
    ),
    'GetQueryOptimizeDataTop' => 
    array (
      'summary' => '调用GetQueryOptimizeDataTop接口，获取查询治理实例红榜和实例黑榜的数据。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**
- **PolarDBMySQL**
- **PostgreSQL**',
            'type' => 'string',
            'required' => true,
            'example' => 'MySQL',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID，多个实例ID用逗号分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        2 => 
        array (
          'name' => 'TagNames',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        3 => 
        array (
          'name' => 'Time',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询数据的日期，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1642953600000',
          ),
        ),
        4 => 
        array (
          'name' => 'Type',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要查询的榜单类型：

- **RED**：实例红榜。
- **BLACK**：实例黑榜。',
            'type' => 'string',
            'required' => true,
            'example' => 'RED',
          ),
        ),
        5 => 
        array (
          'name' => 'Region',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例所属地域，取值：

- **cn-china**：中国内地。
- **cn-hongkong**：中国香港。
- **ap-southeast-1**：新加坡。

此参数只有在请求参数**InstanceIds**为空时有效。如果请求参数**InstanceIds**为空时，按照**Region**参数设置的地域获取数据，系统默认实例所属地域为**cn-china**；如果请求参数**InstanceIds**不为空时，即使设置了**Region**参数，也以**InstanceIds**所传入的第一个实例所在地域为准获取数据。

> 在中国内地各地域创建的实例，传入此参数时，都为**cn-china**。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-china',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'Total' => 
                  array (
                    'description' => '总数据量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'PageNo' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'Extra' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'List' => 
                  array (
                    'description' => '榜单信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'InstanceId' => 
                        array (
                          'description' => '实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze8g2am97624****',
                        ),
                        'Type' => 
                        array (
                          'description' => '指标名：

- **sqlExecuteCount**：慢SQL执行次数。
- **optimizedSqlExecuteCount**：推荐优化的慢SQL执行次数。',
                          'type' => 'string',
                          'example' => 'sqlExecuteCount',
                        ),
                        'Value' => 
                        array (
                          'description' => '指标的数值。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '100',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Total\\": 10,\\n    \\"PageNo\\": 0,\\n    \\"PageSize\\": 0,\\n    \\"Extra\\": \\"None\\",\\n    \\"List\\": [\\n      {\\n        \\"InstanceId\\": \\"rm-2ze8g2am97624****\\",\\n        \\"Type\\": \\"sqlExecuteCount\\",\\n        \\"Value\\": 100\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetQueryOptimizeDataTopResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Total>10</Total>\\n        <Extra>None</Extra>\\n        <List>\\n            <InstanceId>rm-2ze8g2am97624****</InstanceId>\\n            <Type>sqlExecuteCount</Type>\\n            <Value>100</Value>\\n        </List>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetQueryOptimizeDataTopResponse>","errorExample":""}]',
      'title' => '获取查询治理实例红榜和实例黑榜的数据',
      'description' => '- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于2.1.8，建议使用最新版本。
- 使用DAS的SDK的版本为2.1.8或以上。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：
    - RDS MySQL
    - PolarDB MySQL版
    - RDS PostgreSQL',
    ),
    'GetQueryOptimizeDataStats' => 
    array (
      'summary' => '调用GetQueryOptimizeDataStats接口，获取查询治理模板数据。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**
- **PolarDBMySQL**
- **PostgreSQL**',
            'type' => 'string',
            'required' => true,
            'example' => 'MySQL',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID，多个实例ID用逗号分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        2 => 
        array (
          'name' => 'TagNames',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        3 => 
        array (
          'name' => 'Keywords',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL文本关键词，多个关键词以空格分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'select update',
          ),
        ),
        4 => 
        array (
          'name' => 'LogicalOperator',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '多个SQL文本关键词的逻辑关系。

- **or**：或。
- **and**：与。',
            'type' => 'string',
            'required' => false,
            'example' => 'or',
          ),
        ),
        5 => 
        array (
          'name' => 'Rules',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要过滤的规则，多个规则以逗号分隔。具体信息请参见[查询治理](~~290038~~)。',
            'type' => 'string',
            'required' => false,
            'example' => 'DAS_NOT_IMPORTANT',
          ),
        ),
        6 => 
        array (
          'name' => 'DbNames',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要查询的数据库名。',
            'type' => 'string',
            'required' => false,
            'example' => 'testdb01',
          ),
        ),
        7 => 
        array (
          'name' => 'Time',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询数据的日期，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1642953600000',
          ),
        ),
        8 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询每页最大记录数，默认为10。',
            'type' => 'string',
            'required' => false,
            'example' => '10',
          ),
        ),
        9 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询的页码，从1开始，默认为1。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        10 => 
        array (
          'name' => 'OrderBy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '排序字段，默认为**count**。

- **count**：执行次数。
- **maxQueryTime**：最大执行时间。
- **avgQueryTime**：平均执行时间。
- **maxLockTime**：最大锁等待时间。
- **avgLockTime**：平均锁等待时间。
- **maxRowsExamined**：最大扫描行数。
- **avgRowsExamined**：平均扫描行数。
- **maxRowsSent**：最大返回行数。
- **avgRowsSent**：平均返回行数。',
            'type' => 'string',
            'required' => false,
            'example' => 'count',
          ),
        ),
        11 => 
        array (
          'name' => 'Asc',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否升序排序，默认为**true**。

- **true**：是。
- **false**：否。',
            'type' => 'string',
            'required' => false,
            'example' => 'true',
          ),
        ),
        12 => 
        array (
          'name' => 'OnlyOptimizedSql',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否只查询待优化的SQL，默认为**false**。

- **true**：是。
- **false**：否。',
            'type' => 'string',
            'required' => false,
            'example' => 'false',
          ),
        ),
        13 => 
        array (
          'name' => 'SqlIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL模板ID，您可调用[GetQueryOptimizeExecErrorStats](~~405235~~)接口查询SQL模板ID。',
            'type' => 'string',
            'required' => false,
            'example' => '2e8147b5ca2dfc640dfd5e43d96a****',
          ),
        ),
        14 => 
        array (
          'name' => 'Region',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例所属地域，取值：

- **cn-china**：中国内地。
- **cn-hongkong**：中国香港。
- **ap-southeast-1**：新加坡。

此参数只有在请求参数**InstanceIds**为空时有效。如果请求参数**InstanceIds**为空时，按照**Region**参数设置的地域获取数据，系统默认实例所属地域为**cn-china**；如果请求参数**InstanceIds**不为空时，即使设置了**Region**参数，也以**InstanceIds**所传入的第一个实例所在地域为准获取数据。

> 在中国内地各地域创建的实例，传入此参数时，都为**cn-china**。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-china',
          ),
        ),
        15 => 
        array (
          'name' => 'User',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要查询的数据库账号。',
            'type' => 'string',
            'required' => false,
            'example' => 'testUser',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'Total' => 
                  array (
                    'description' => '总数据量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'PageNo' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'None',
                  ),
                  'Extra' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                  'List' => 
                  array (
                    'description' => '模板数据列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '模板数据列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'InstanceId' => 
                        array (
                          'description' => '实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze8g2am97624****',
                        ),
                        'Dbname' => 
                        array (
                          'description' => 'SQL所属数据库名。',
                          'type' => 'string',
                          'example' => 'testdb01',
                        ),
                        'SqlId' => 
                        array (
                          'description' => 'SQL模板ID。',
                          'type' => 'string',
                          'example' => '2e8147b5ca2dfc640dfd5e43d96a****',
                        ),
                        'SqlType' => 
                        array (
                          'description' => 'SQL类别。',
                          'type' => 'string',
                          'example' => 'INSERT',
                        ),
                        'Psql' => 
                        array (
                          'description' => 'SQL模板。',
                          'type' => 'string',
                          'example' => 'select 1',
                        ),
                        'SqlSample' => 
                        array (
                          'description' => 'SQL模板下执行最慢的SQL样本。',
                          'type' => 'string',
                          'example' => 'select 2',
                        ),
                        'Count' => 
                        array (
                          'description' => 'SQL执行次数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '100',
                        ),
                        'MaxQueryTime' => 
                        array (
                          'description' => '最大查询时间，单位为秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '1.1',
                        ),
                        'AvgQueryTime' => 
                        array (
                          'description' => '平均查询时间，单位为秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '1.1',
                        ),
                        'MaxLockTime' => 
                        array (
                          'description' => '最大锁等待时间，单位为秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.1',
                        ),
                        'AvgLockTime' => 
                        array (
                          'description' => '平均锁等待时间，单位为秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.1',
                        ),
                        'MaxRowsExamined' => 
                        array (
                          'description' => '最大扫描行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '100000',
                        ),
                        'AvgRowsExamined' => 
                        array (
                          'description' => '平均扫描行数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '100.1',
                        ),
                        'MaxRowsSent' => 
                        array (
                          'description' => '最大返回行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                        'AvgRowsSent' => 
                        array (
                          'description' => '平均返回行数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '100.1',
                        ),
                        'MaxRowsAffected' => 
                        array (
                          'description' => '最大影响行数。

> 取值为-1说明暂未采集到该字段。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                        'AvgRowsAffected' => 
                        array (
                          'description' => '平均影响行数。

> 取值为-1说明暂未采集到该字段。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '100.1',
                        ),
                        'RuleList' => 
                        array (
                          'description' => '规则列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'type' => 'object',
                            'properties' => 
                            array (
                              'Name' => 
                              array (
                                'description' => '规则名，具体信息请参见[查询治理](~~290038~~)。',
                                'type' => 'string',
                                'example' => 'DAS_NOT_IMPORTANT',
                              ),
                              'Type' => 
                              array (
                                'description' => '规则类别：

- **Predefined**：系统预定义。
- **UserDefined**：用户自定义。',
                                'type' => 'string',
                                'example' => 'Predefined',
                              ),
                            ),
                          ),
                        ),
                        'User' => 
                        array (
                          'description' => '数据库账号。',
                          'type' => 'string',
                          'example' => 'testUser',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Total\\": 10,\\n    \\"PageNo\\": 0,\\n    \\"PageSize\\": 0,\\n    \\"Extra\\": \\"None\\",\\n    \\"List\\": [\\n      {\\n        \\"InstanceId\\": \\"rm-2ze8g2am97624****\\",\\n        \\"Dbname\\": \\"testdb01\\",\\n        \\"SqlId\\": \\"2e8147b5ca2dfc640dfd5e43d96a****\\",\\n        \\"SqlType\\": \\"INSERT\\",\\n        \\"Psql\\": \\"select 1\\",\\n        \\"SqlSample\\": \\"select 2\\",\\n        \\"Count\\": 100,\\n        \\"MaxQueryTime\\": 1.1,\\n        \\"AvgQueryTime\\": 1.1,\\n        \\"MaxLockTime\\": 0.1,\\n        \\"AvgLockTime\\": 0.1,\\n        \\"MaxRowsExamined\\": 100000,\\n        \\"AvgRowsExamined\\": 100.1,\\n        \\"MaxRowsSent\\": 10000,\\n        \\"AvgRowsSent\\": 100.1,\\n        \\"MaxRowsAffected\\": 10000,\\n        \\"AvgRowsAffected\\": 100.1,\\n        \\"RuleList\\": [\\n          {\\n            \\"Name\\": \\"DAS_NOT_IMPORTANT\\",\\n            \\"Type\\": \\"Predefined\\"\\n          }\\n        ],\\n        \\"User\\": \\"testUser\\"\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetQueryOptimizeDataStatsResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Total>10</Total>\\n        <Extra>None</Extra>\\n        <List>\\n            <InstanceId>rm-2ze8g2am97624****</InstanceId>\\n            <Dbname>testdb01</Dbname>\\n            <SqlId>2e8147b5ca2dfc640dfd5e43d96a****</SqlId>\\n            <SqlType>INSERT</SqlType>\\n            <Psql>select 1</Psql>\\n            <SqlSample>select 2</SqlSample>\\n            <Count>100</Count>\\n            <MaxQueryTime>1.1</MaxQueryTime>\\n            <AvgQueryTime>1.1</AvgQueryTime>\\n            <MaxLockTime>0.1</MaxLockTime>\\n            <AvgLockTime>0.1</AvgLockTime>\\n            <MaxRowsExamined>100000</MaxRowsExamined>\\n            <AvgRowsExamined>100.1</AvgRowsExamined>\\n            <MaxRowsSent>10000</MaxRowsSent>\\n            <AvgRowsSent>100.1</AvgRowsSent>\\n            <MaxRowsAffected>10000</MaxRowsAffected>\\n            <AvgRowsAffected>100.1</AvgRowsAffected>\\n            <RuleList>\\n                <Name>DAS_NOT_IMPORTANT</Name>\\n                <Type>Predefined</Type>\\n            </RuleList>\\n        </List>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetQueryOptimizeDataStatsResponse>","errorExample":""}]',
      'title' => '获取查询治理模板数据',
      'description' => '- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于2.1.8，建议使用最新版本。
- 使用DAS的SDK的版本为2.1.8或以上。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：
    - RDS MySQL
    - PolarDB MySQL版
    - RDS PostgreSQL',
    ),
    'GetQueryOptimizeTag' => 
    array (
      'summary' => '调用GetQueryOptimizeTag接口，获取指定SQL的标签。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
        1 => 'http',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**：RDS MySQL
- **PolarDBMySQL**：PolarDB MySQL版
- **PostgreSQL**：RDS PostgreSQL',
            'type' => 'string',
            'required' => true,
            'example' => 'MySQL',
          ),
        ),
        1 => 
        array (
          'name' => 'SqlId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL模板ID。
您可调用[GetQueryOptimizeDataStats](~~405261~~)接口查询SQL模板ID。',
            'type' => 'string',
            'required' => true,
            'example' => '29d9fef63e347d39c3436658a5fe****',
          ),
        ),
        2 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '阿里云为该请求生成的唯一标识符。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'title' => 'SqlTag',
                'description' => '返回的SQL标签数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'SqlId' => 
                  array (
                    'description' => 'SQL模板ID',
                    'type' => 'string',
                    'example' => '29d9fef63e347d39c3436658a5fe****',
                  ),
                  'Tags' => 
                  array (
                    'title' => '逗号分隔的多个tag',
                    'description' => 'SQL标签，多个标签间使用英文逗号（,）分隔。',
                    'type' => 'string',
                    'example' => 'DAS_IN_PLAN,DAS_NOT_IMPORTANT',
                  ),
                  'Comments' => 
                  array (
                    'description' => '备注信息。',
                    'type' => 'string',
                    'example' => '离线同步类慢SQL，无需优化。',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"SqlId\\": \\"29d9fef63e347d39c3436658a5fe****\\",\\n    \\"Tags\\": \\"DAS_IN_PLAN,DAS_NOT_IMPORTANT\\",\\n    \\"Comments\\": \\"离线同步类慢SQL，无需优化。\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetQueryOptimizeTagResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <SqlId>29d9fef63e347d39c3436658a5fe****</SqlId>\\n        <Tags>DAS_IN_PLAN,DAS_NOT_IMPORTANT</Tags>\\n        <Comments>离线同步类慢SQL，无需优化。</Comments>\\n    </Data>\\n</GetQueryOptimizeTagResponse>","errorExample":""}]',
      'title' => '获取SQL标签',
      'description' => '- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：
    - RDS MySQL
    - PolarDB MySQL版
    - RDS PostgreSQL',
    ),
    'GetQueryOptimizeShareUrl' => 
    array (
      'summary' => '调用GetQueryOptimizeShareUrl接口，获取查询治理的分享链接。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
        1 => 'http',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**：RDS MySQL
- **PolarDBMySQL**：PolarDB MySQL版
- **PostgreSQL**：RDS PostgreSQL',
            'type' => 'string',
            'required' => true,
            'example' => 'MySQL',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID，多个实例ID间用逗号分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        2 => 
        array (
          'name' => 'TagNames',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        3 => 
        array (
          'name' => 'Keywords',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL文本关键词，多个关键词以空格分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'select update',
          ),
        ),
        4 => 
        array (
          'name' => 'LogicalOperator',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '多个SQL文本关键词的逻辑关系。

- **or**：或。
- **and**：与。',
            'type' => 'string',
            'required' => false,
            'example' => 'or',
          ),
        ),
        5 => 
        array (
          'name' => 'Rules',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要过滤的规则，多个规则以逗号分隔。具体信息请参见[查询治理](~~290038~~)。',
            'type' => 'string',
            'required' => false,
            'example' => 'DAS_NOT_IMPORTANT',
          ),
        ),
        6 => 
        array (
          'name' => 'DbNames',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要查询的数据库名。',
            'type' => 'string',
            'required' => false,
            'example' => 'testdb01',
          ),
        ),
        7 => 
        array (
          'name' => 'Time',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询数据的日期，格式为Unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1642953600000',
          ),
        ),
        8 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询每页最大记录数，默认为10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        9 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询的页码，从1开始，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        10 => 
        array (
          'name' => 'OrderBy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '排序字段，默认为**count**。

- **count**：执行次数。
- **maxQueryTime**：最大执行时间。
- **avgQueryTime**：平均执行时间。
- **maxLockTime**：最大锁等待时间。
- **avgLockTime**：平均锁等待时间。
- **maxRowsExamined**：最大扫描行数。
- **avgRowsExamined**：平均扫描行数。
- **maxRowsSent**：最大返回行数。
- **avgRowsSent**：平均返回行数。',
            'type' => 'string',
            'required' => false,
            'example' => 'count',
          ),
        ),
        11 => 
        array (
          'name' => 'Asc',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否升序排序，默认为**true**。

- **true**：是。
- **false**：否。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        12 => 
        array (
          'name' => 'OnlyOptimizedSql',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否只查询待优化的SQL，默认为**false**。

- **true**：是。
- **false**：否。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        13 => 
        array (
          'name' => 'SqlIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL模板ID，您可调用[GetQueryOptimizeDataStats](~~405261~~)接口查询SQL模板ID。',
            'type' => 'string',
            'required' => false,
            'example' => '6068ce044e3dc9b903979672fb0b69df,d12515c015fc9f41a0778a9e1de0****',
          ),
        ),
        14 => 
        array (
          'name' => 'Region',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例所属地域，取值：

- **cn-china**：中国内地。
- **cn-hongkong**：中国香港。
- **ap-southeast-1**：新加坡。

此参数只有在请求参数**InstanceIds**为空时有效。如果请求参数**InstanceIds**为空时，按照**Region**参数设置的地域获取数据，系统默认实例所属地域为**cn-china**；如果请求参数**InstanceIds**不为空时，即使设置了**Region**参数，也以**InstanceIds**所传入的第一个实例所在地域为准获取数据。

> 在中国内地各地域创建的实例，传入此参数时，都为**cn-china**。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-china',
          ),
        ),
        15 => 
        array (
          'name' => 'User',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要查询的数据库账号。',
            'type' => 'string',
            'required' => false,
            'example' => 'testUser',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '阿里云为该请求生成的唯一标识符。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'title' => 'String',
                'description' => '分享链接',
                'type' => 'string',
                'example' => 'https://hdm.console.aliyun.com/#/queryOptimize****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": \\"https://hdm.console.aliyun.com/#/queryOptimize****\\"\\n}","errorExample":""},{"type":"xml","example":"<GetQueryOptimizeShareUrlResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n    <Data>https://hdm.console.aliyun.com/#/queryOptimize****</Data>\\n</GetQueryOptimizeShareUrlResponse>","errorExample":""}]',
      'title' => '获取查询治理的分享链接',
      'description' => '- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口适用的数据库引擎为：
    - RDS MySQL
    - PolarDB MySQL版
    - RDS PostgreSQL',
    ),
    'GetErrorRequestSample' => 
    array (
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。
> 对于PolarDB MySQL版实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-bp179lg03445l****',
          ),
        ),
        2 => 
        array (
          'name' => 'SqlId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL ID，您可以调用[GetAsyncErrorRequestListByCode](~~410746~~)接口查询实例中产生MySQL错误码的SQL ID。',
            'type' => 'string',
            'required' => false,
            'example' => '2cd4432556c3dab9d825ba363637****',
          ),
        ),
        3 => 
        array (
          'name' => 'Start',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为Unix时间戳，单位为毫秒。

> 查询开始时间需在数据库实例SQL洞察存储时长范围内，最大不能早于当前时间90天。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1642556990714',
          ),
        ),
        4 => 
        array (
          'name' => 'End',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为Unix时间戳，单位为毫秒。

> 查询结束时间需晚于查询开始时间，且查询开始时间和查询结束时间的间隔不能超过1天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1642566830000',
          ),
        ),
        5 => 
        array (
          'name' => 'DbName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'testdb01',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'sqlId' => 
                    array (
                      'description' => 'SQL ID。',
                      'type' => 'string',
                      'example' => '2cd4432556c3dab9d825ba363637****',
                    ),
                    'database' => 
                    array (
                      'description' => '数据库名。',
                      'type' => 'string',
                      'example' => 'dbgateway',
                    ),
                    'originHost' => 
                    array (
                      'description' => '执行SQL的客户端IP地址。',
                      'type' => 'string',
                      'example' => '172.16.1****',
                    ),
                    'tables' => 
                    array (
                      'description' => '表数据。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'description' => '表名。',
                        'type' => 'string',
                        'example' => 'meter_****',
                      ),
                    ),
                    'instanceId' => 
                    array (
                      'description' => '实例ID。',
                      'type' => 'string',
                      'example' => 'rm-2ze8g2am97624****',
                    ),
                    'errorCode' => 
                    array (
                      'description' => '错误码。',
                      'type' => 'string',
                      'example' => '1062',
                    ),
                    'user' => 
                    array (
                      'description' => '数据库用户名。',
                      'type' => 'string',
                      'example' => 'dbgat****',
                    ),
                    'sql' => 
                    array (
                      'description' => 'SQL语句。',
                      'type' => 'string',
                      'example' => 'insert into meter_****',
                    ),
                    'timestamp' => 
                    array (
                      'description' => '执行时间，格式为Unix时间戳，单位为毫秒。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1644476100435',
                    ),
                  ),
                ),
                'example' => '[         {             "sqlId": "2cd4432556c3dab9d825ba363637****",             "database": "dbgateway",             "originHost": "172.16.1****",             "tables": [                 "meter_****"             ],             "instanceId": "rm-2ze8g2am97624****",             "errorCode": "1062",             "user": "dbgat****",             "sql": "insert into meter_****\\n        ( \\n        ****\\n     )\\n        values (now(), now(), \'bbbc8624-5e19-455a-9714-8466f688****\', \'2022-02-10 14:00:00\', \'{\\"endTime\\":\\"2022-02-10 14:00:00\\",\\"endTimestamp\\":1644472800,\\"startTime\\":\\"2022-02-10 13:00:00\\",\\"startTimestamp\\":1644469200}\', null, null)",             "timestamp": 1644476100435         }]',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。',
                'type' => 'string',
                'example' => '7172BECE-588A-5961-8126-C216E16B****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": [\\n    {\\n      \\"sqlId\\": \\"2cd4432556c3dab9d825ba363637****\\",\\n      \\"database\\": \\"dbgateway\\",\\n      \\"originHost\\": \\"172.16.1****\\",\\n      \\"tables\\": [\\n        \\"meter_****\\"\\n      ],\\n      \\"instanceId\\": \\"rm-2ze8g2am97624****\\",\\n      \\"errorCode\\": \\"1062\\",\\n      \\"user\\": \\"dbgat****\\",\\n      \\"sql\\": \\"insert into meter_****\\",\\n      \\"timestamp\\": 1644476100435\\n    }\\n  ],\\n  \\"RequestId\\": \\"7172BECE-588A-5961-8126-C216E16B****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetErrorRequestSampleResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <sqlId>2cd4432556c3dab9d825ba363637****</sqlId>\\n        <database>dbgateway</database>\\n        <originHost>172.16.1****</originHost>\\n        <tables>meter_****</tables>\\n        <instanceId>rm-2ze8g2am97624****</instanceId>\\n        <errorCode>1062</errorCode>\\n        <user>dbgat****</user>\\n        <sql>insert into meter_****</sql>\\n        <timestamp>1644476100435</timestamp>\\n    </Data>\\n    <RequestId>7172BECE-588A-5961-8126-C216E16B****</RequestId>\\n    <Success>true</Success>\\n</GetErrorRequestSampleResponse>","errorExample":""}]',
      'title' => '查询执行错误的SQL样本数据',
      'summary' => '调用GetErrorRequestSample接口，异步查询数据库实例SQL洞察结果中执行错误的SQL样本数据，最多返回指定时间范围内20条数据。',
      'description' => '> 异步调用后不会立即返回完整结果，当返回数据中**isFinish**取值为**false**时，请等待1s后重新发起调用，直到**isFinish**取值为**true**时，返回完整结果。


- 目前仅支持RDS MySQL和PolarDB MySQL版实例，请确保在使用该接口前，该实例已经开启DAS企业版，具体请参见[购买DAS企业版](~~163298~~)。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetAsyncErrorRequestStatResult' => 
    array (
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于PolarDB MySQL版实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-bp179lg03445l****',
          ),
        ),
        2 => 
        array (
          'name' => 'SqlIdList',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL ID，多个SQL ID请使用英文逗号分隔。您可以调用[GetAsyncErrorRequestListByCode](~~410746~~)接口查询实例中产生MySQL错误码的SQL ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'ad78a4e7d3ce81590c9dc2d5f4bc****,0f92feacd92c048b06a16617a633****',
          ),
        ),
        3 => 
        array (
          'name' => 'Start',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为Unix时间戳，单位为毫秒。

> 查询开始时间需在数据库实例SQL洞察存储时长范围内，最大不能早于当前时间90天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1642556990714',
          ),
        ),
        4 => 
        array (
          'name' => 'End',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为Unix时间戳，单位为毫秒。

> 查询结束时间需晚于查询开始时间，且查询开始时间和查询结束时间的间隔不能超过1天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1642566830000',
          ),
        ),
        5 => 
        array (
          'name' => 'DbName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'testdb01',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据列表。',
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'fail' => 
                  array (
                    'description' => '请求是否失败：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'isFinish' => 
                  array (
                    'description' => '异步请求是否执行完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'resultId' => 
                  array (
                    'description' => '异步请求ID。',
                    'type' => 'string',
                    'example' => 'async__61f45ee381b2fa4e8a6545e3bee9****',
                  ),
                  'state' => 
                  array (
                    'description' => '异步请求的执行状态：

- **RUNNING**：正在运行。

- **SUCCESS**：成功。

- **FAIL**：失败。',
                    'type' => 'string',
                    'example' => 'SUCCESS',
                  ),
                  'timestamp' => 
                  array (
                    'description' => '执行时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1644558576717',
                  ),
                  'complete' => 
                  array (
                    'description' => '异步请求是否完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'result' => 
                  array (
                    'description' => '异步请求的返回数据列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '数据列表。',
                      'type' => 'object',
                      'additionalProperties' => 
                      array (
                        'type' => 'object',
                        'properties' => 
                        array (
                          'sqlId' => 
                          array (
                            'type' => 'string',
                            'example' => 'ad78a4e7d3ce81590c9dc2d5f4bc****',
                            'description' => 'SQL ID。',
                          ),
                          'instanceId' => 
                          array (
                            'type' => 'string',
                            'example' => 'rm-2ze8g2am97624****',
                            'description' => '实例ID。',
                          ),
                          'count' => 
                          array (
                            'type' => 'integer',
                            'format' => 'int32',
                            'description' => '执行错误的次数。',
                            'example' => '1',
                          ),
                        ),
                        'description' => '异步请求的返回数据。',
                      ),
                    ),
                  ),
                ),
                'example' => '{         "fail": false,         "data": {             "ad78a4e7d3ce81590c9dc2d5f4bc****": {                 "sqlId": "ad78a4e7d3ce81590c9dc2d5f4bc****",                 "instanceId": "rm-2ze8g2am97624****",                 "count": 1             },             "0f92feacd92c048b06a16617a633****": {                 "sqlId": "0f92feacd92c048b06a16617a633****",                 "instanceId": "rm-2ze8g2am97624****",                 "count": 2             }         },         "resultId": "async__61f45ee381b2fa4e8a6545e3bee9****",         "isFinish": true,         "state": "SUCCESS",         "complete": true,         "timestamp": 1644558576717     }',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。',
                'type' => 'string',
                'example' => '3FC3F8EB-3564-5D1A-B187-3B03E5B0****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"fail\\": false,\\n    \\"isFinish\\": true,\\n    \\"resultId\\": \\"async__61f45ee381b2fa4e8a6545e3bee9****\\",\\n    \\"state\\": \\"SUCCESS\\",\\n    \\"timestamp\\": 1644558576717,\\n    \\"complete\\": true,\\n    \\"result\\": [\\n      {\\n        \\"key\\": {\\n          \\"sqlId\\": \\"ad78a4e7d3ce81590c9dc2d5f4bc****\\",\\n          \\"instanceId\\": \\"rm-2ze8g2am97624****\\",\\n          \\"count\\": 1\\n        }\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"3FC3F8EB-3564-5D1A-B187-3B03E5B0****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetAsyncErrorRequestStatResultResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <fail>false</fail>\\n        <isFinish>true</isFinish>\\n        <resultId>async__61f45ee381b2fa4e8a6545e3bee9****</resultId>\\n        <state>SUCCESS</state>\\n        <timestamp>1644558576717</timestamp>\\n        <complete>true</complete>\\n        <result>\\n            <key>\\n                <sqlId>ad78a4e7d3ce81590c9dc2d5f4bc****</sqlId>\\n                <instanceId>rm-2ze8g2am97624****</instanceId>\\n                <count>1</count>\\n            </key>\\n        </result>\\n    </Data>\\n    <RequestId>3FC3F8EB-3564-5D1A-B187-3B03E5B0****</RequestId>\\n    <Success>true</Success>\\n</GetAsyncErrorRequestStatResultResponse>","errorExample":""}]',
      'title' => '获取指定SQL的执行错误次数',
      'summary' => '调用GetAsyncErrorRequestStatResult接口，异步获取数据库实例SQL洞察结果中指定SQL的执行错误次数。',
      'description' => '> 异步调用后不会立即返回完整结果，当返回数据中**isFinish**取值为**false**时，请等待1s后重新发起调用，直到**isFinish**取值为**true**时，返回完整结果。


- 目前仅支持RDS MySQL和PolarDB MySQL版实例，请确保在使用该接口前，该实例已经开启DAS企业版，具体请参见[购买DAS企业版](~~163298~~)。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetAsyncErrorRequestListByCode' => 
    array (
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。
> 对于PolarDB MySQL版实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-wz9s658475e58****',
          ),
        ),
        2 => 
        array (
          'name' => 'Start',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为Unix时间戳，单位为毫秒。

> 查询开始时间需要在数据库实例SQL洞察存储时长范围内，最大不能早于当前时间90天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1642556990714',
          ),
        ),
        3 => 
        array (
          'name' => 'End',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为Unix时间戳，单位为毫秒。

> 查询结束时间需晚于查询开始时间，且查询开始时间和查询结束时间的间隔不能超过1天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1642566830000',
          ),
        ),
        4 => 
        array (
          'name' => 'ErrorCode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '错误码，您可调用[GetAsyncErrorRequestStatByCode](~~409804~~)接口查询实例的MySQL错误码。',
            'type' => 'string',
            'required' => false,
            'example' => '1064',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'fail' => 
                  array (
                    'description' => '请求是否失败：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'result' => 
                  array (
                    'description' => '产生指定MySQL错误码的SQL ID列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '产生指定MySQL错误码的SQL ID列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'sqlId' => 
                        array (
                          'description' => 'SQL ID。',
                          'type' => 'string',
                          'example' => 'ad78a4e7d3ce81590c9dc2d5f4bc****',
                        ),
                        'instanceId' => 
                        array (
                          'description' => '实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze8g2am97624****',
                        ),
                      ),
                    ),
                  ),
                  'resultId' => 
                  array (
                    'description' => '异步请求ID。',
                    'type' => 'string',
                    'example' => 'async__c39d43ece52d35267cc4b92a0c26****',
                  ),
                  'isFinish' => 
                  array (
                    'description' => '异步请求是否执行完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'state' => 
                  array (
                    'description' => '异步请求的执行状态：

- **RUNNING**：正在运行。

- **SUCCESS**：成功。

- **FAIL**：失败。',
                    'type' => 'string',
                    'example' => 'SUCCESS',
                  ),
                  'complete' => 
                  array (
                    'description' => '异步请求是否完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'timestamp' => 
                  array (
                    'description' => '执行时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1644559407740',
                  ),
                ),
                'example' => '{         "fail": false,         "data": [             {                 "sqlId": "ad78a4e7d3ce81590c9dc2d5f4bc****",                 "instanceId": "rm-2ze8g2am97624****"             },             {                 "sqlId": "0f92feacd92c048b06a16617a633****",                 "instanceId": "rm-2ze8g2am97624****"             }         ],         "resultId": "async__c39d43ece52d35267cc4b92a0c26****",         "isFinish": true,         "state": "SUCCESS",         "complete": true,         "timestamp": 1644559407740     }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '9CB97BC4-6479-55D0-B9D0-EA925AFE****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"fail\\": false,\\n    \\"result\\": [\\n      {\\n        \\"sqlId\\": \\"ad78a4e7d3ce81590c9dc2d5f4bc****\\",\\n        \\"instanceId\\": \\"rm-2ze8g2am97624****\\"\\n      }\\n    ],\\n    \\"resultId\\": \\"async__c39d43ece52d35267cc4b92a0c26****\\",\\n    \\"isFinish\\": true,\\n    \\"state\\": \\"SUCCESS\\",\\n    \\"complete\\": true,\\n    \\"timestamp\\": 1644559407740\\n  },\\n  \\"RequestId\\": \\"9CB97BC4-6479-55D0-B9D0-EA925AFE****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetAsyncErrorRequestListByCodeResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <fail>false</fail>\\n        <result>\\n            <sqlId>ad78a4e7d3ce81590c9dc2d5f4bc****</sqlId>\\n            <instanceId>rm-2ze8g2am97624****</instanceId>\\n        </result>\\n        <resultId>async__c39d43ece52d35267cc4b92a0c26****</resultId>\\n        <isFinish>true</isFinish>\\n        <state>SUCCESS</state>\\n        <complete>true</complete>\\n        <timestamp>1644559407740</timestamp>\\n    </Data>\\n    <RequestId>9CB97BC4-6479-55D0-B9D0-EA925AFE****</RequestId>\\n    <Success>true</Success>\\n</GetAsyncErrorRequestListByCodeResponse>","errorExample":""}]',
      'title' => '查询产生指定MySQL错误码的SQL ID',
      'summary' => '调用GetAsyncErrorRequestListByCode接口，异步查询数据库实例SQL洞察结果中产生指定MySQL错误码的SQL ID。',
      'description' => '> 异步调用后不会立即返回完整结果，当返回数据中**isFinish**取值为**false**时，请等待1s后重新发起调用，直到**isFinish**取值为**true**时，返回完整结果。


- 目前仅支持RDS MySQL和PolarDB MySQL版实例，请确保在使用该接口前，该实例已经开启DAS企业版，具体请参见[购买DAS企业版](~~163298~~)。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetAsyncErrorRequestStatByCode' => 
    array (
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。
> 对于PolarDB MySQL版实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-wz9s658475e58****',
          ),
        ),
        2 => 
        array (
          'name' => 'Start',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为Unix时间戳，单位为毫秒。

> 查询开始时间需在数据库实例SQL洞察存储时长范围内，最大不能早于当前时间90天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1642556990714',
          ),
        ),
        3 => 
        array (
          'name' => 'End',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询的结束时间，格式为Unix时间戳，单位为毫秒。

> 查询结束时间需晚于查询开始时间，且查询开始时间和查询结束时间的间隔不能超过1天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1642566830000',
          ),
        ),
        4 => 
        array (
          'name' => 'DbName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'testdb01',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。

',
                'type' => 'object',
                'properties' => 
                array (
                  'fail' => 
                  array (
                    'description' => '请求是否失败：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'isFinish' => 
                  array (
                    'description' => '异步请求是否执行完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'resultId' => 
                  array (
                    'description' => '异步请求ID。',
                    'type' => 'string',
                    'example' => 'async__fcd7c35788e62324622c3b4a03de****',
                  ),
                  'state' => 
                  array (
                    'description' => '异步请求的执行状态：

- **RUNNING**：正在运行。

- **SUCCESS**：成功。

- **FAIL**：失败。',
                    'type' => 'string',
                    'example' => 'SUCCESS',
                  ),
                  'timestamp' => 
                  array (
                    'description' => '执行时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1644560866961',
                  ),
                  'complete' => 
                  array (
                    'description' => '异步请求是否完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'result' => 
                  array (
                    'description' => '返回的错误码以及每个错误码对应的SQL数量列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回的错误码以及每个错误码对应的SQL数量列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'instanceId' => 
                        array (
                          'description' => '实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze8g2am97624****',
                        ),
                        'errorCode' => 
                        array (
                          'description' => '错误码。',
                          'type' => 'string',
                          'example' => '1062',
                        ),
                        'count' => 
                        array (
                          'description' => '错误码对应SQL的数量。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                      ),
                    ),
                  ),
                ),
                'example' => '{     "fail": false,     "data": [       {         "instanceId": "rm-2ze8g2am97624****",         "count": 1,         "errorCode": "1062"       },       {         "instanceId": "rm-2ze8g2am97624****",         "count": 2,         "errorCode": "1064"      }     ],     "resultId": "async__fcd7c35788e62324622c3b4a03de****",     "isFinish": true,     "state": "SUCCESS",     "complete": true,     "timestamp": 1644560866961   }',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。',
                'type' => 'string',
                'example' => '840F51F7-9C01-538D-94F6-AE712905****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"fail\\": false,\\n    \\"isFinish\\": true,\\n    \\"resultId\\": \\"async__fcd7c35788e62324622c3b4a03de****\\",\\n    \\"state\\": \\"SUCCESS\\",\\n    \\"timestamp\\": 1644560866961,\\n    \\"complete\\": true,\\n    \\"result\\": [\\n      {\\n        \\"instanceId\\": \\"rm-2ze8g2am97624****\\",\\n        \\"errorCode\\": \\"1062\\",\\n        \\"count\\": 1\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"840F51F7-9C01-538D-94F6-AE712905****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetAsyncErrorRequestStatByCodeResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <fail>false</fail>\\n        <isFinish>true</isFinish>\\n        <resultId>async__fcd7c35788e62324622c3b4a03de****</resultId>\\n        <state>SUCCESS</state>\\n        <timestamp>1644560866961</timestamp>\\n        <complete>true</complete>\\n        <result>\\n            <instanceId>rm-2ze8g2am97624****</instanceId>\\n            <errorCode>1062</errorCode>\\n            <count>1</count>\\n        </result>\\n    </Data>\\n    <RequestId>840F51F7-9C01-538D-94F6-AE712905****</RequestId>\\n    <Success>true</Success>\\n</GetAsyncErrorRequestStatByCodeResponse>","errorExample":""}]',
      'title' => '查询MySQL错误码以及每个错误码对应的SQL数量',
      'summary' => '调用GetAsyncErrorRequestStatByCode接口，异步查询数据库实例SQL洞察结果中的MySQL错误码以及每个错误码对应的SQL数量。',
      'description' => '> 异步调用后不会立即返回完整结果，当返回数据中**isFinish**取值为**false**时，请等待1s后重新发起调用，直到**isFinish**取值为**true**时，返回完整结果。

- 目前仅支持RDS MySQL和PolarDB MySQL版实例，请确保在使用该接口前，该实例已经开启DAS企业版，具体请参见[购买DAS企业版](~~163298~~)。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetFullRequestOriginStatByInstanceId' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
        1 => 'http',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户ID，即创建数据库实例的阿里云主账号ID。

> 非必填，输入目标数据库实例ID后，在调用API接口时，系统会自动获取用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '196278346919****',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        2 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于PolarDB MySQL版实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-bp12v7243x012****',
          ),
        ),
        3 => 
        array (
          'name' => 'Start',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为Unix时间戳，单位为毫秒。

>  查询开始时间需在数据库实例SQL洞察存储时长范围内，最大不能早于当前时间90天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1644716649000',
          ),
        ),
        4 => 
        array (
          'name' => 'End',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为Unix时间戳，单位为毫秒。
 
> 查询结束时间需晚于查询开始时间，且查询开始时间和查询结束时间的间隔不能超过1天。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1644803409000',
          ),
        ),
        5 => 
        array (
          'name' => 'OrderBy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '排序字段，默认为**count**。

- **count**：执行次数。

- **avgRt**：平均执行时间。

- **rtRate**：耗时比例。

- **rowsExamined**：总扫描行数。

- **avgRowsExamined**：平均扫描行数。

- **avgRowsReturned**：平均返回行数。',
            'type' => 'string',
            'required' => false,
            'example' => 'count',
          ),
        ),
        6 => 
        array (
          'name' => 'Asc',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '升序排序开关，默认关闭。',
            'type' => 'boolean',
            'required' => false,
            'example' => '关闭',
          ),
        ),
        7 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询的页码，从1开始，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '1',
          ),
        ),
        8 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询每页最大记录数，默认为20。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '20',
          ),
        ),
        9 => 
        array (
          'name' => 'SqlType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL语句的类型，取值包括：**SELECT**、**INSERT**、**UPDATE**、**DELETE**、**LOGIN**、**LOGOUT**、**MERGE**、**ALTER**、**CREATEINDEX**、**DROPINDEX**、**CREATE**、**DROP**、**SET**、**DESC**、**REPLACE**、**CALL**、**BEGIN**、**DESCRIBE**、**ROLLBACK**、**FLUSH**、**USE**、**SHOW**、**START**、**COMMIT**和**RENAME**。

> 当数据库实例为RDS MySQL、PolarDB MySQL版、PolarDB-X 2.0时，可以通过SQL语句类型进行统计。',
            'type' => 'string',
            'required' => false,
            'example' => 'SELECT',
          ),
        ),
        10 => 
        array (
          'name' => 'Role',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'PolarDB-X 2.0数据库实例节点（角色）信息。

- **polarx_cn**：计算节点。

- **polarx_en**：数据节点。
',
            'type' => 'string',
            'required' => false,
            'example' => 'polarx_cn',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回信息的详细列表。',
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '7172BECE-588A-5961-8126-C216E16B****',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'List' => 
                  array (
                    'description' => '全量请求数据列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '全量请求数据列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Key' => 
                        array (
                          'description' => '执行SQL的客户端IP地址。',
                          'type' => 'string',
                          'example' => '172.26.6****',
                        ),
                        'AvgFetchRows' => 
                        array (
                          'description' => 'PolarDB-X 2.0数据库实例计算节点平均拉取数据节点的行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'AvgLockWaitTime' => 
                        array (
                          'description' => '平均锁等待时长，单位为秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.00009589874265269765',
                        ),
                        'AvgLogicalRead' => 
                        array (
                          'description' => '平均逻辑读。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '654.4470327860251',
                        ),
                        'AvgPhysicalAsyncRead' => 
                        array (
                          'description' => '平均物理异步读取。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'AvgPhysicalSyncRead' => 
                        array (
                          'description' => '平均物理同步读取。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'AvgRows' => 
                        array (
                          'description' => '平均行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'AvgExaminedRows' => 
                        array (
                          'description' => '平均扫描行数。

> 目前支持该字段的数据库：RDS MySQL、RDS PostgreSQL、PolarDB MySQL版。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '10000',
                        ),
                        'AvgReturnedRows' => 
                        array (
                          'description' => '平均返回行数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '10000',
                        ),
                        'AvgUpdatedRows' => 
                        array (
                          'description' => '平均修改行数。

> 目前支持该字段的数据库：RDS MySQL、PolarDB-X 2.0。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '10000',
                        ),
                        'AvgRt' => 
                        array (
                          'description' => '平均执行耗时。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '2.499',
                        ),
                        'AvgSqlCount' => 
                        array (
                          'description' => '平均SQL数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                        'Count' => 
                        array (
                          'description' => '总执行次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '100000',
                        ),
                        'CountRate' => 
                        array (
                          'description' => '执行次数比例。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.0586',
                        ),
                        'Database' => 
                        array (
                          'description' => '数据库名。',
                          'type' => 'string',
                          'example' => 'dbtest01',
                        ),
                        'ErrorCount' => 
                        array (
                          'description' => '执行错误次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1',
                        ),
                        'FetchRows' => 
                        array (
                          'description' => 'PolarDB-X 2.0数据库实例计算节点拉取数据节点的行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '200',
                        ),
                        'Ip' => 
                        array (
                          'description' => '实例的网络地址。',
                          'type' => 'string',
                          'example' => 'rm-uf6dyi58dm6****.mysql.rds.aliy****.com',
                        ),
                        'LockWaitTime' => 
                        array (
                          'description' => '锁等待时长，单位为秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '1089.4177720290281',
                        ),
                        'LogicalRead' => 
                        array (
                          'description' => '逻辑读。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '7.434573266E9',
                        ),
                        'OriginHost' => 
                        array (
                          'description' => '执行SQL的客户端IP地址。',
                          'type' => 'string',
                          'example' => '172.26.6****',
                        ),
                        'PhysicalAsyncRead' => 
                        array (
                          'description' => '物理异步读取。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'PhysicalSyncRead' => 
                        array (
                          'description' => '物理同步读取。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'Port' => 
                        array (
                          'description' => '端口号。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '3306',
                        ),
                        'Rows' => 
                        array (
                          'description' => 'PolarDB-X 2.0数据库实例计算节点总更新或返回的行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'ExaminedRows' => 
                        array (
                          'description' => '总扫描行数。

> 目前支持该字段的数据库：RDS MySQL、RDS PostgreSQL、PolarDB MySQL版。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                        'RtGreaterThanOneSecondCount' => 
                        array (
                          'description' => '执行时长大于1秒的SQL数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '2',
                        ),
                        'RtRate' => 
                        array (
                          'description' => '耗时比例。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.1384',
                        ),
                        'SqlCount' => 
                        array (
                          'description' => 'SQL的数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '200',
                        ),
                        'SumUpdatedRows' => 
                        array (
                          'description' => '总变更行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '200',
                        ),
                        'Version' => 
                        array (
                          'description' => '版本。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1',
                        ),
                        'VpcId' => 
                        array (
                          'description' => 'VPC ID。',
                          'type' => 'string',
                          'example' => 'vpc-2zentqj1sk4qmolci****',
                        ),
                      ),
                    ),
                  ),
                  'Total' => 
                  array (
                    'description' => '总数据量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"7172BECE-588A-5961-8126-C216E16B****\\",\\n  \\"Data\\": {\\n    \\"List\\": [\\n      {\\n        \\"Key\\": \\"172.26.6****\\",\\n        \\"AvgFetchRows\\": 0,\\n        \\"AvgLockWaitTime\\": 0.00009589874265269765,\\n        \\"AvgLogicalRead\\": 654.4470327860251,\\n        \\"AvgPhysicalAsyncRead\\": 0,\\n        \\"AvgPhysicalSyncRead\\": 0,\\n        \\"AvgRows\\": 0,\\n        \\"AvgExaminedRows\\": 10000,\\n        \\"AvgReturnedRows\\": 10000,\\n        \\"AvgUpdatedRows\\": 10000,\\n        \\"AvgRt\\": 2.499,\\n        \\"AvgSqlCount\\": 10000,\\n        \\"Count\\": 100000,\\n        \\"CountRate\\": 0.0586,\\n        \\"Database\\": \\"dbtest01\\",\\n        \\"ErrorCount\\": 1,\\n        \\"FetchRows\\": 200,\\n        \\"Ip\\": \\"rm-uf6dyi58dm6****.mysql.rds.aliy****.com\\",\\n        \\"LockWaitTime\\": 1089.4177720290281,\\n        \\"LogicalRead\\": 7434573266,\\n        \\"OriginHost\\": \\"172.26.6****\\",\\n        \\"PhysicalAsyncRead\\": 0,\\n        \\"PhysicalSyncRead\\": 0,\\n        \\"Port\\": 3306,\\n        \\"Rows\\": 0,\\n        \\"ExaminedRows\\": 10000,\\n        \\"RtGreaterThanOneSecondCount\\": 2,\\n        \\"RtRate\\": 0.1384,\\n        \\"SqlCount\\": 200,\\n        \\"SumUpdatedRows\\": 200,\\n        \\"Version\\": 1,\\n        \\"VpcId\\": \\"vpc-2zentqj1sk4qmolci****\\"\\n      }\\n    ],\\n    \\"Total\\": 1\\n  },\\n  \\"Code\\": 200,\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetFullRequestOriginStatByInstanceIdResponse>\\n    <Message>Successful</Message>\\n    <RequestId>7172BECE-588A-5961-8126-C216E16B****</RequestId>\\n    <Data>\\n        <List>\\n            <Key>172.26.6****</Key>\\n            <AvgFetchRows>0</AvgFetchRows>\\n            <AvgLockWaitTime>0.00009589874265269765</AvgLockWaitTime>\\n            <AvgLogicalRead>654.4470327860251</AvgLogicalRead>\\n            <AvgPhysicalAsyncRead>0</AvgPhysicalAsyncRead>\\n            <AvgPhysicalSyncRead>0</AvgPhysicalSyncRead>\\n            <AvgRows>0</AvgRows>\\n            <AvgExaminedRows>10000</AvgExaminedRows>\\n            <AvgReturnedRows>10000</AvgReturnedRows>\\n            <AvgUpdatedRows>10000</AvgUpdatedRows>\\n            <AvgRt>2.499</AvgRt>\\n            <AvgSqlCount>10000</AvgSqlCount>\\n            <Count>100000</Count>\\n            <CountRate>0.0586</CountRate>\\n            <Database>dbtest01</Database>\\n            <ErrorCount>1</ErrorCount>\\n            <FetchRows>200</FetchRows>\\n            <Ip>rm-uf6dyi58dm6****.mysql.rds.aliy****.com</Ip>\\n            <LockWaitTime>1089.4177720290281</LockWaitTime>\\n            <OriginHost>172.26.6****</OriginHost>\\n            <PhysicalAsyncRead>0</PhysicalAsyncRead>\\n            <PhysicalSyncRead>0</PhysicalSyncRead>\\n            <Port>3306</Port>\\n            <Rows>0</Rows>\\n            <ExaminedRows>10000</ExaminedRows>\\n            <RtGreaterThanOneSecondCount>2</RtGreaterThanOneSecondCount>\\n            <RtRate>0.1384</RtRate>\\n            <SqlCount>200</SqlCount>\\n            <SumUpdatedRows>200</SumUpdatedRows>\\n            <Version>1</Version>\\n            <VpcId>vpc-2zentqj1sk4qmolci****</VpcId>\\n        </List>\\n        <Total>1</Total>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetFullRequestOriginStatByInstanceIdResponse>","errorExample":""}]',
      'title' => '按照访问来源统计全量请求数据',
      'summary' => '调用GetFullRequestOriginStatByInstanceId接口，按照访问来源统计数据库实例SQL洞察结果中的全量请求数据。',
      'description' => 'SQL洞察功能可对SQL进行健康情况诊断、性能问题排查，详情请参见[SQL洞察](~~204096~~)。

- 目前支持的数据库实例请参见[DAS企业版使用说明](~~190912~~)。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetFullRequestStatResultByInstanceId' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
        1 => 'http',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户ID，即创建数据库实例的阿里云主账号ID。

> 非必填，输入目标数据库实例ID后，在调用API接口时，系统会自动获取用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '196278346919****',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        2 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于PolarDB MySQL版实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-bp12v7243x012****',
          ),
        ),
        3 => 
        array (
          'name' => 'SqlId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL ID。

> 填写SQL ID时，统计目标SQL ID的全量请求数据；为空时，统计整个数据库实例的全量请求数据。',
            'type' => 'string',
            'required' => false,
            'example' => 'd71f82be1eef72bd105128204d2e****',
          ),
        ),
        4 => 
        array (
          'name' => 'OriginHost',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行SQL的客户端IP地址。

> 非必填，输入目标客户端IP地址后，统计目标客户端IP地址的全量请求数据；为空时，统计整个数据库实例的全量请求数据。',
            'type' => 'string',
            'required' => false,
            'example' => '172.26.XX.XXX',
          ),
        ),
        5 => 
        array (
          'name' => 'Keyword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询关键词。',
            'type' => 'string',
            'required' => false,
            'example' => 'dbtest01',
          ),
        ),
        6 => 
        array (
          'name' => 'Start',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为Unix时间戳，单位为毫秒。

> 查询开始时间需要在数据库实例SQL洞察存储时长范围内，最大不能早于当前时间90天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1645581813000',
          ),
        ),
        7 => 
        array (
          'name' => 'End',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为Unix时间戳，单位为毫秒。

> 查询结束时间需晚于查询开始时间，且查询开始时间和查询结束时间的间隔不能超过1天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1645668213000',
          ),
        ),
        8 => 
        array (
          'name' => 'OrderBy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '排序字段，默认为**count**。

- **count**：执行次数。

- **avgRt**：平均执行时间。

- **rtRate**：耗时比例。

- **rowsExamined**：总扫描行数。

- **avgRowsExamined**：平均扫描行数。

- **avgRowsReturned**：平均返回行数。

',
            'type' => 'string',
            'required' => false,
            'example' => 'count',
          ),
        ),
        9 => 
        array (
          'name' => 'Asc',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '升序排序开关，默认关闭。',
            'type' => 'boolean',
            'required' => false,
            'example' => '关闭',
          ),
        ),
        10 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询的页码，从1开始，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '1',
          ),
        ),
        11 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询每页数据量，默认为20。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '20',
          ),
        ),
        12 => 
        array (
          'name' => 'SqlType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL语句的类型，取值包括：**SELECT**、**INSERT**、**UPDATE**、**DELETE**、**LOGIN**、**LOGOUT**、**MERGE**、**ALTER**、**CREATEINDEX**、**DROPINDEX**、**CREATE**、**DROP**、**SET**、**DESC**、**REPLACE**、**CALL**、**BEGIN**、**DESCRIBE**、**ROLLBACK**、**FLUSH**、**USE**、**SHOW**、**START**、**COMMIT**和**RENAME**。

> 当数据库实例为RDS MySQL、PolarDB MySQL版、PolarDB-X 2.0时，可以通过SQL语句类型进行统计。',
            'type' => 'string',
            'required' => false,
            'example' => 'SELECT',
          ),
        ),
        13 => 
        array (
          'name' => 'DbName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库名。',
            'type' => 'string',
            'required' => false,
            'example' => 'dbtest01',
          ),
        ),
        14 => 
        array (
          'name' => 'Role',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'PolarDB-X 2.0数据库实例节点信息。

- **polarx_cn**：计算节点。

- **polarx_dn**：数据节点。',
            'type' => 'string',
            'required' => false,
            'example' => 'polarx_cn',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回信息的详细列表。',
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '7172BECE-588A-5961-8126-C216E16B****',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Result' => 
                  array (
                    'description' => '返回的全量请求数据。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'List' => 
                      array (
                        'description' => '全量请求数据列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '全量请求数据列表。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'SqlId' => 
                            array (
                              'description' => 'SQL ID。',
                              'type' => 'string',
                              'example' => 'd71f82be1eef72bd105128204d2e****',
                            ),
                            'AvgFetchRows' => 
                            array (
                              'description' => 'PolarDB-X 2.0数据库实例计算节点平均拉取数据节点的行数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'AvgLockWaitTime' => 
                            array (
                              'description' => '平均锁等待时长，单位为秒。',
                              'type' => 'number',
                              'format' => 'double',
                              'example' => '0.00009589874265269765',
                            ),
                            'AvgLogicalRead' => 
                            array (
                              'description' => '平均逻辑读。',
                              'type' => 'number',
                              'format' => 'double',
                              'example' => '654.4470327860251',
                            ),
                            'AvgPhysicalAsyncRead' => 
                            array (
                              'description' => '平均物理异步读取。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'AvgPhysicalSyncRead' => 
                            array (
                              'description' => '平均物理同步读取。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'AvgExaminedRows' => 
                            array (
                              'description' => '平均扫描行数。

> 目前支持该字段的数据库：RDS MySQL、RDS PostgreSQL、PolarDB MySQL版。',
                              'type' => 'number',
                              'format' => 'double',
                              'example' => '10000',
                            ),
                            'AvgReturnedRows' => 
                            array (
                              'description' => '平均返回行数。',
                              'type' => 'number',
                              'format' => 'double',
                              'example' => '10000',
                            ),
                            'AvgUpdatedRows' => 
                            array (
                              'description' => '平均修改行数。

> 目前支持该字段的数据库：RDS MySQL、PolarDB-X 2.0。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '10000',
                            ),
                            'AvgRt' => 
                            array (
                              'description' => '平均执行耗时。',
                              'type' => 'number',
                              'format' => 'double',
                              'example' => '2.499',
                            ),
                            'AvgSqlCount' => 
                            array (
                              'description' => '平均SQL计数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '10000',
                            ),
                            'Count' => 
                            array (
                              'description' => '总执行次数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '100000',
                            ),
                            'CountRate' => 
                            array (
                              'description' => '执行次数比例。',
                              'type' => 'number',
                              'format' => 'double',
                              'example' => '0.0586',
                            ),
                            'Database' => 
                            array (
                              'description' => '数据库名。',
                              'type' => 'string',
                              'example' => 'dbtest01',
                            ),
                            'ErrorCount' => 
                            array (
                              'description' => '执行错误次数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1',
                            ),
                            'FetchRows' => 
                            array (
                              'description' => 'PolarDB-X 2.0数据库实例计算节点拉取数据节点的行数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'Ip' => 
                            array (
                              'description' => '实例的网络地址。',
                              'type' => 'string',
                              'example' => 'rm-uf6dyi58dm6****.mysql.rds.aliy****.com',
                            ),
                            'LockWaitTime' => 
                            array (
                              'description' => '锁等待时长，单位为秒。',
                              'type' => 'number',
                              'format' => 'double',
                              'example' => '1089.4177720290281',
                            ),
                            'LogicalRead' => 
                            array (
                              'description' => '逻辑读。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '7.434573266E9',
                            ),
                            'PhysicalAsyncRead' => 
                            array (
                              'description' => '物理异步读取。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'PhysicalSyncRead' => 
                            array (
                              'description' => '物理同步读取。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'Port' => 
                            array (
                              'description' => '端口号。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '3306',
                            ),
                            'Psql' => 
                            array (
                              'description' => 'SQL模板。',
                              'type' => 'string',
                              'example' => 'select * from dbtest01 where ****',
                            ),
                            'Rows' => 
                            array (
                              'description' => 'PolarDB-X 2.0数据库实例计算节点总更新或返回的行数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'ExaminedRows' => 
                            array (
                              'description' => '总扫描行数。

> 目前支持该字段的数据库：RDS MySQL、RDS PostgreSQL、PolarDB MySQL版。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '10000',
                            ),
                            'RtGreaterThanOneSecondCount' => 
                            array (
                              'description' => '执行时长大于1秒的SQL数量。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '20',
                            ),
                            'RtRate' => 
                            array (
                              'description' => '耗时比例。',
                              'type' => 'number',
                              'format' => 'double',
                              'example' => '2.499',
                            ),
                            'SqlCount' => 
                            array (
                              'description' => 'SQL的数量。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '200',
                            ),
                            'SumUpdatedRows' => 
                            array (
                              'description' => '总变更行数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '100',
                            ),
                            'Tables' => 
                            array (
                              'description' => '数据库表名。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '数据库表名。
',
                                'type' => 'string',
                                'example' => 'tabletest01,tabletest02',
                              ),
                            ),
                            'Version' => 
                            array (
                              'description' => '版本。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1',
                            ),
                            'VpcId' => 
                            array (
                              'description' => 'VPC ID。',
                              'type' => 'string',
                              'example' => 'vpc-2zentqj1sk4qmolci****',
                            ),
                          ),
                        ),
                      ),
                      'Total' => 
                      array (
                        'description' => '总数据量。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1',
                      ),
                    ),
                  ),
                  'Fail' => 
                  array (
                    'description' => '请求是否失败。

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'IsFinish' => 
                  array (
                    'description' => '异步请求是否执行完成。

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'ResultId' => 
                  array (
                    'description' => '请求的ID。',
                    'type' => 'string',
                    'example' => '9CB97BC4-6479-55D0-B9D0-EA925AFE****',
                  ),
                  'State' => 
                  array (
                    'description' => '异步请求的执行状态。

- **RUNNING**：正在运行。

- **SUCCESS**：成功。

- **FAIL**：失败。',
                    'type' => 'string',
                    'example' => 'SUCCESS',
                  ),
                  'Timestamp' => 
                  array (
                    'description' => '执行时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1645668213000',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"7172BECE-588A-5961-8126-C216E16B****\\",\\n  \\"Data\\": {\\n    \\"Result\\": {\\n      \\"List\\": [\\n        {\\n          \\"SqlId\\": \\"d71f82be1eef72bd105128204d2e****\\",\\n          \\"AvgFetchRows\\": 0,\\n          \\"AvgLockWaitTime\\": 0.00009589874265269765,\\n          \\"AvgLogicalRead\\": 654.4470327860251,\\n          \\"AvgPhysicalAsyncRead\\": 0,\\n          \\"AvgPhysicalSyncRead\\": 0,\\n          \\"AvgExaminedRows\\": 10000,\\n          \\"AvgReturnedRows\\": 10000,\\n          \\"AvgUpdatedRows\\": 10000,\\n          \\"AvgRt\\": 2.499,\\n          \\"AvgSqlCount\\": 10000,\\n          \\"Count\\": 100000,\\n          \\"CountRate\\": 0.0586,\\n          \\"Database\\": \\"dbtest01\\",\\n          \\"ErrorCount\\": 1,\\n          \\"FetchRows\\": 0,\\n          \\"Ip\\": \\"rm-uf6dyi58dm6****.mysql.rds.aliy****.com\\",\\n          \\"LockWaitTime\\": 1089.4177720290281,\\n          \\"LogicalRead\\": 7434573266,\\n          \\"PhysicalAsyncRead\\": 0,\\n          \\"PhysicalSyncRead\\": 0,\\n          \\"Port\\": 3306,\\n          \\"Psql\\": \\"select * from dbtest01 where ****\\",\\n          \\"Rows\\": 0,\\n          \\"ExaminedRows\\": 10000,\\n          \\"RtGreaterThanOneSecondCount\\": 20,\\n          \\"RtRate\\": 2.499,\\n          \\"SqlCount\\": 200,\\n          \\"SumUpdatedRows\\": 100,\\n          \\"Tables\\": [\\n            \\"tabletest01,tabletest02\\"\\n          ],\\n          \\"Version\\": 1,\\n          \\"VpcId\\": \\"vpc-2zentqj1sk4qmolci****\\"\\n        }\\n      ],\\n      \\"Total\\": 1\\n    },\\n    \\"Fail\\": false,\\n    \\"IsFinish\\": true,\\n    \\"ResultId\\": \\"9CB97BC4-6479-55D0-B9D0-EA925AFE****\\",\\n    \\"State\\": \\"SUCCESS\\",\\n    \\"Timestamp\\": 1645668213000\\n  },\\n  \\"Code\\": 200,\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetFullRequestStatResultByInstanceIdResponse>\\n    <Message>Successful</Message>\\n    <RequestId>7172BECE-588A-5961-8126-C216E16B****</RequestId>\\n    <Data>\\n        <Result>\\n            <List>\\n                <SqlId>d71f82be1eef72bd105128204d2e****</SqlId>\\n                <AvgFetchRows>0</AvgFetchRows>\\n                <AvgLockWaitTime>0.00009589874265269765</AvgLockWaitTime>\\n                <AvgLogicalRead>654.4470327860251</AvgLogicalRead>\\n                <AvgPhysicalAsyncRead>0</AvgPhysicalAsyncRead>\\n                <AvgPhysicalSyncRead>0</AvgPhysicalSyncRead>\\n                <AvgExaminedRows>10000</AvgExaminedRows>\\n                <AvgReturnedRows>10000</AvgReturnedRows>\\n                <AvgUpdatedRows>10000</AvgUpdatedRows>\\n                <AvgRt>2.499</AvgRt>\\n                <AvgSqlCount>10000</AvgSqlCount>\\n                <Count>100000</Count>\\n                <CountRate>0.0586</CountRate>\\n                <Database>dbtest01</Database>\\n                <ErrorCount>1</ErrorCount>\\n                <FetchRows>0</FetchRows>\\n                <Ip>rm-uf6dyi58dm6****.mysql.rds.aliy****.com</Ip>\\n                <LockWaitTime>1089.4177720290281</LockWaitTime>\\n                <PhysicalAsyncRead>0</PhysicalAsyncRead>\\n                <PhysicalSyncRead>0</PhysicalSyncRead>\\n                <Port>3306</Port>\\n                <Psql>select * from dbtest01 where ****</Psql>\\n                <Rows>0</Rows>\\n                <ExaminedRows>10000</ExaminedRows>\\n                <RtGreaterThanOneSecondCount>20</RtGreaterThanOneSecondCount>\\n                <RtRate>2.499</RtRate>\\n                <SqlCount>200</SqlCount>\\n                <SumUpdatedRows>100</SumUpdatedRows>\\n                <Tables>tabletest01,tabletest02</Tables>\\n                <Version>1</Version>\\n                <VpcId>vpc-2zentqj1sk4qmolci****</VpcId>\\n            </List>\\n            <Total>1</Total>\\n        </Result>\\n        <Fail>false</Fail>\\n        <IsFinish>true</IsFinish>\\n        <ResultId>9CB97BC4-6479-55D0-B9D0-EA925AFE****</ResultId>\\n        <State>SUCCESS</State>\\n        <Timestamp>1645668213000</Timestamp>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetFullRequestStatResultByInstanceIdResponse>","errorExample":""}]',
      'title' => '按照SQL ID异步统计全量请求数据',
      'summary' => '调用GetFullRequestStatResultByInstanceId接口，按照SQL ID异步统计数据库实例SQL洞察结果中的全量请求数据。',
      'description' => '> 异步调用后不会立即返回完整结果，当返回数据中isFinish取值为**false**时，请等待1s后重新发起调用，直到isFinish取值为**true**时，返回完整结果。

SQL洞察功能可对SQL进行健康情况诊断、性能问题排查，详情请参见[SQL洞察](~~204096~~)。

- 目前支持的数据库实例请参见[DAS企业版使用说明](~~190912~~)。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetFullRequestSampleByInstanceId' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
        1 => 'http',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'UserId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '用户ID，即创建数据库实例的阿里云主账号ID。

> 非必填，输入目标数据库实例ID后，在调用API接口时，系统会自动获取用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '196278346919****',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例ID。

',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        2 => 
        array (
          'name' => 'SqlId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'SQL ID。',
            'type' => 'string',
            'required' => true,
            'example' => '651b56fe9418d48edb8fdf0980ec****',
          ),
        ),
        3 => 
        array (
          'name' => 'Start',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为Unix时间戳，单位为毫秒。

> 查询开始时间需要在数据库实例SQL洞察存储时长范围内，最大不能早于当前时间90天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1660097421000',
          ),
        ),
        4 => 
        array (
          'name' => 'End',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为Unix时间戳，单位为毫秒。

> 查询结束时间需晚于查询开始时间，且查询开始时间和查询结束时间的间隔不能小于1小时。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1660104621000',
          ),
        ),
        5 => 
        array (
          'name' => 'Role',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'PolarDB-X 2.0数据库实例节点信息。

- **polarx_cn**：计算节点。
- **polarx_en**：数据节点。',
            'type' => 'string',
            'required' => false,
            'example' => 'polarx_cn',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。

',
                'type' => 'string',
                'example' => '0A74B755-98B7-59DB-8724-1321B394****',
              ),
              'Data' => 
              array (
                'description' => '返回数据',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Timestamp' => 
                    array (
                      'description' => '执行SQL的时间，格式为Unix时间戳，单位为毫秒。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1660100753556',
                    ),
                    'SqlId' => 
                    array (
                      'description' => 'SQL ID。',
                      'type' => 'string',
                      'example' => '651b56fe9418d48edb8fdf0980ec****',
                    ),
                    'Sql' => 
                    array (
                      'description' => 'SQL样本。',
                      'type' => 'string',
                      'example' => 'select * from testdb01 where ****',
                    ),
                    'Database' => 
                    array (
                      'description' => '数据库名。',
                      'type' => 'string',
                      'example' => 'dbtest',
                    ),
                    'Rt' => 
                    array (
                      'description' => '执行耗时，单位为秒。',
                      'type' => 'number',
                      'format' => 'double',
                      'example' => '0.409789',
                    ),
                    'User' => 
                    array (
                      'description' => '执行SQL的用户名称。',
                      'type' => 'string',
                      'example' => 'testuser',
                    ),
                    'LockWaitTime' => 
                    array (
                      'description' => '锁等待时长，单位为秒。',
                      'type' => 'number',
                      'format' => 'double',
                      'example' => '0.0137',
                    ),
                    'LogicalRead' => 
                    array (
                      'description' => '逻辑读。',
                      'type' => 'number',
                      'format' => 'double',
                      'example' => '165848',
                    ),
                    'PhysicalSyncRead' => 
                    array (
                      'description' => '物理同步读取。',
                      'type' => 'number',
                      'format' => 'double',
                      'example' => '0',
                    ),
                    'PhysicalAsyncRead' => 
                    array (
                      'description' => '物理异步读取。',
                      'type' => 'number',
                      'format' => 'double',
                      'example' => '0',
                    ),
                    'RowsExamined' => 
                    array (
                      'title' => '扫描行数',
                      'description' => '总扫描行数。
> 目前支持该字段的数据库：RDS MySQL、RDS PostgreSQL、PolarDB MySQL版。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '2048576',
                    ),
                    'RowsReturned' => 
                    array (
                      'description' => '返回行数。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '14',
                    ),
                    'OriginHost' => 
                    array (
                      'description' => '访问来源。',
                      'type' => 'string',
                      'example' => '172.17.XX.XX',
                    ),
                    'ScanRows' => 
                    array (
                      'title' => '扫描行数, RDS MySQL DescribeTemplateSqlDetail',
                      'description' => '扫描行数。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '0',
                    ),
                    'UpdateRows' => 
                    array (
                      'title' => '更新行数, RDS MySQL DescribeTemplateSqlDetail',
                      'description' => '更新行数。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '0',
                    ),
                    'SqlType' => 
                    array (
                      'description' => 'SQL语句的类型，取值包括：**SELECT**、**INSERT**、**UPDATE**、**DELETE**、**LOGIN**、**LOGOUT**、**MERGE**、**ALTER**、**CREATEINDEX**、**DROPINDEX**、**CREATE**、**DROP**、**SET**、**DESC**、**REPLACE**、**CALL**、**BEGIN**、**DESCRIBE**、**ROLLBACK**、**FLUSH**、**USE**、**SHOW**、**START**、**COMMIT**和**RENAME**。',
                      'type' => 'string',
                      'example' => 'SELECT',
                    ),
                    'Scnt' => 
                    array (
                      'title' => 'polarx cn节点，dn请求总数',
                      'description' => 'PolarDB-X 2.0计算节点（CN）的DN请求数。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '0',
                    ),
                    'Rows' => 
                    array (
                      'title' => 'polarx cn节点,总更新/返回行数',
                      'description' => 'PolarDB-X 2.0计算节点（CN）的更新/返回行数。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '0',
                    ),
                    'Frows' => 
                    array (
                      'title' => 'polarx cn节点,拉取行数',
                      'description' => 'PolarDB-X 2.0计算节点（CN）的拉取行数。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '0',
                    ),
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。
',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"0A74B755-98B7-59DB-8724-1321B394****\\",\\n  \\"Data\\": [\\n    {\\n      \\"Timestamp\\": 1660100753556,\\n      \\"SqlId\\": \\"651b56fe9418d48edb8fdf0980ec****\\",\\n      \\"Sql\\": \\"select * from testdb01 where ****\\",\\n      \\"Database\\": \\"dbtest\\",\\n      \\"Rt\\": 0.409789,\\n      \\"User\\": \\"testuser\\",\\n      \\"LockWaitTime\\": 0.0137,\\n      \\"LogicalRead\\": 165848,\\n      \\"PhysicalSyncRead\\": 0,\\n      \\"PhysicalAsyncRead\\": 0,\\n      \\"RowsExamined\\": 2048576,\\n      \\"RowsReturned\\": 14,\\n      \\"OriginHost\\": \\"172.17.XX.XX\\",\\n      \\"ScanRows\\": 0,\\n      \\"UpdateRows\\": 0,\\n      \\"SqlType\\": \\"SELECT\\",\\n      \\"Scnt\\": 0,\\n      \\"Rows\\": 0,\\n      \\"Frows\\": 0\\n    }\\n  ],\\n  \\"Code\\": 200,\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetFullRequestSampleByInstanceIdResponse>\\n    <Message>Successful</Message>\\n    <RequestId>0A74B755-98B7-59DB-8724-1321B394****</RequestId>\\n    <Data>\\n        <Timestamp>1660100753556</Timestamp>\\n        <SqlId>651b56fe9418d48edb8fdf0980ec****</SqlId>\\n        <Sql>select * from testdb01 where ****</Sql>\\n        <Database>dbtest</Database>\\n        <Rt>0.409789</Rt>\\n        <User>testuser</User>\\n        <LockWaitTime>0.0137</LockWaitTime>\\n        <LogicalRead>165848</LogicalRead>\\n        <PhysicalSyncRead>0</PhysicalSyncRead>\\n        <PhysicalAsyncRead>0</PhysicalAsyncRead>\\n        <RowsExamined>2048576</RowsExamined>\\n        <RowsReturned>14</RowsReturned>\\n        <OriginHost>172.17.XX.XX</OriginHost>\\n        <ScanRows>0</ScanRows>\\n        <UpdateRows>0</UpdateRows>\\n        <SqlType>SELECT</SqlType>\\n        <Scnt>0</Scnt>\\n        <Rows>0</Rows>\\n        <Frows>0</Frows>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetFullRequestSampleByInstanceIdResponse>","errorExample":""}]',
      'title' => '按照SQL ID查询SQL样本数据',
      'summary' => '调用GetFullRequestSampleByInstanceId接口，按照SQL ID查询数据库实例SQL洞察结果中的SQL样本数据，最大返回20条样本数据。',
      'description' => 'SQL洞察功能可对SQL进行健康情况诊断、性能问题排查，详情请参见[SQL洞察](~~204096~~)。

- 支持的数据库引擎请参见[SQL洞察](~~204096~~)。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'EnableDasPro' => 
    array (
      'summary' => '调用EnableDasPro接口，为指定数据库实例开启DAS企业版 V1。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户ID，即创建数据库实例的阿里云主账号ID。

> 非必填，输入目标数据库实例ID后，在调用API接口时，系统会自动获取用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '196278346919****',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        2 => 
        array (
          'name' => 'SqlRetention',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL洞察数据存储时长，单位为天，默认为**30**。

- **30**
- **180**
- **365**
- **1095**
- **1825**',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '30',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '7172BECE-588A-5961-8126-C216E16B****',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Synchro' => 
              array (
                'description' => '备用参数。',
                'type' => 'string',
                'example' => 'None',
              ),
              'Data' => 
              array (
                'description' => '备用参数。',
                'type' => 'string',
                'example' => 'None',
              ),
              'Code' => 
              array (
                'description' => '状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"7172BECE-588A-5961-8126-C216E16B****\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Synchro\\": \\"None\\",\\n  \\"Data\\": \\"None\\",\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<EnableDasProResponse>\\n    <RequestId>7172BECE-588A-5961-8126-C216E16B****</RequestId>\\n    <Message>Successful</Message>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</EnableDasProResponse>","errorExample":""}]',
      'title' => '开启DAS企业版 V1',
      'description' => '- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 该接口仅适用于DAS企业版 V1。

>如果您的数据库实例支持开启DAS企业版 V3，将无法使用此接口开启DAS企业版 V1，请使用[ModifySqlLogConfig](~~2778835~~)接口，为实例开启DAS企业版 V3。DAS企业版各个版本支持的数据库和地域请参见[DAS产品系列及支持的功能](~~156204~~)。',
    ),
    'DisableDasPro' => 
    array (
      'summary' => '调用DisableDasPro接口，关闭指定数据库实例的DAS企业版 V1。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户ID，即创建数据库实例的阿里云主账号ID。

> 非必填，输入目标数据库实例ID后，在调用API接口时，系统会自动获取用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '196278346919****',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '7172BECE-588A-5961-8126-C216E16B****',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Synchro' => 
              array (
                'description' => '备用参数。',
                'type' => 'string',
                'example' => 'None',
              ),
              'Data' => 
              array (
                'description' => '备用参数。',
                'type' => 'string',
                'example' => 'None',
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
          1 => 
          array (
            'errorCode' => '-1020004',
            'errorMessage' => 'the dbconfig is applying',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"7172BECE-588A-5961-8126-C216E16B****\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Synchro\\": \\"None\\",\\n  \\"Data\\": \\"None\\",\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DisableDasProResponse>\\n    <RequestId>7172BECE-588A-5961-8126-C216E16B****</RequestId>\\n    <Message>Successful</Message>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</DisableDasProResponse>","errorExample":""}]',
      'title' => '关闭DAS企业版 V1',
      'description' => '- 目前支持的数据库实例请参见[DAS企业版使用说明](~~190912~~)。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 该接口仅适用于DAS企业版 V1。',
    ),
    'ModifySqlLogConfig' => 
    array (
      'summary' => '调用ModifySqlLogConfig接口，为数据库实例开启或配置DAS企业版。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '198880',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREhdmFT57I0',
          1 => 'FEATUREhdmPGXCEW',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rr-2ze770smbq3tp****',
          ),
        ),
        1 => 
        array (
          'name' => 'Enable',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否开启DAS企业版：

- **true**：是。
- **false**：否。
> 开通企业版时必须配置，默认开启当前支持的最新版本。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        2 => 
        array (
          'name' => 'RequestEnable',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否开启SQL洞察。
- **true**：是。
- **false**：否。

> 仅支持开通企业版 V3时，需要配置该参数。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        3 => 
        array (
          'name' => 'Retention',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据总存储时长，单位为天，取值为：

-  7
- 30
- 180
- 365

> 开通DAS企业版 V3时，该参数取值必须大于等于30。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '30',
          ),
        ),
        4 => 
        array (
          'name' => 'HotRetention',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据热存储时长，单位为天，取值为[1, 7]范围内的整数。

> 仅支持开通企业版 V3时，需要配置该参数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        5 => 
        array (
          'name' => 'Filters',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '预留参数。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '预留参数。',
              'type' => 'object',
              'properties' => 
              array (
                'Key' => 
                array (
                  'description' => '预留参数。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'None',
                ),
                'Value' => 
                array (
                  'description' => '预留参数。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'None',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>  请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '03C88D8E-1541-518E-8BFF-BEC6589B6334',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功
- **false**：执行失败',
                'type' => 'string',
                'example' => 'false',
              ),
              'Data' => 
              array (
                'title' => 'SqlLogConfig',
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'SqlLogVisibleTime' => 
                  array (
                    'description' => 'DAS企业版开启的时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1683712800000',
                  ),
                  'RequestStopTime' => 
                  array (
                    'description' => 'DAS企业版V1到期时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1715335200000',
                  ),
                  'CollectorVersion' => 
                  array (
                    'description' => '采集器版本。
- **MYSQL_V0**：MySQL V0版。
- **MYSQL_V1**：MySQL V1版。
- **MYSQL_V2**：MySQL V2版。
- **MYSQL_V3**：MySQL V3版。
- **PG_V1**：PostgreSQL V1版。
- **rdspg_v1**：RDS PostgreSQL V1版。
- **polarpg_v1**：PolarDB PostgreSQL版 V1版。',
                    'type' => 'string',
                    'example' => 'MYSQL_V3',
                  ),
                  'SupportVersion' => 
                  array (
                    'title' => '当前实例支持的数据库版本(不落库)',
                    'description' => '当前支持的最新DAS企业版版本。

- **SQL_LOG_V0**：企业版 V0。
- **SQL_LOG_V1**：企业版 V1。
- **SQL_LOG_V2**：企业版 V2。
- **SQL_LOG_V3**：企业版 V3。
- **SQL_LOG_NOT_ENABLE**：未开启企业版。
- **SQL_LOG_NOT_SUPPORT**： 不支持企业版。',
                    'type' => 'string',
                    'example' => 'SQL_LOG_V3',
                  ),
                  'ColdRetention' => 
                  array (
                    'title' => '冷数据存储周期(不落库),通过 retention - hotRetention 计算',
                    'description' => '数据冷存储时长，单位为天，由` Retention - HotRetention` 计算获得。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '23',
                  ),
                  'SqlLogEnable' => 
                  array (
                    'description' => '是否开启了DAS企业版。
- **true**：是。
- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'Retention' => 
                  array (
                    'description' => '数据总存储时长，单位为天。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '30',
                  ),
                  'HotRetention' => 
                  array (
                    'description' => '数据热存储时长，单位为天。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '7',
                  ),
                  'RequestEnable' => 
                  array (
                    'description' => '是否开启SQL洞察。
- **true**：是。
- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'Version' => 
                  array (
                    'title' => '当前审计日志的版本',
                    'description' => '当前开启的DAS企业版版本。

- **SQL_LOG_V0**：企业版 V0。
- **SQL_LOG_V1**：企业版 V1。
- **SQL_LOG_V2**：企业版 V2。
- **SQL_LOG_V3**：企业版 V3。
- **SQL_LOG_NOT_ENABLE**：未开启企业版。
- **SQL_LOG_NOT_SUPPORT**： 不支持企业版。',
                    'type' => 'string',
                    'example' => 'SQL_LOG_V3',
                  ),
                  'RequestStartTime' => 
                  array (
                    'description' => 'SQL洞察开启时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1683712800000',
                  ),
                  'HotEnable' => 
                  array (
                    'description' => '是否开启数据热存储。
- **true**：是。
- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'HotStartTime' => 
                  array (
                    'description' => '数据热存储开始时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1683712800000',
                  ),
                  'ColdEnable' => 
                  array (
                    'description' => '是否开启数据冷存储。
- **true**：是。
- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'ColdStartTime' => 
                  array (
                    'description' => '数据冷存储开始时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1683712800000',
                  ),
                  'SqlLogState' => 
                  array (
                    'description' => '数据迁移状态。

- **FINISH**： 历史数据迁移完成。
- **RUNNING**： 历史数据迁移中。
- **FAILURE**： 历史数据迁移失败。',
                    'type' => 'string',
                    'example' => 'FINISH',
                  ),
                  'LogFilter' => 
                  array (
                    'description' => '预留参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"03C88D8E-1541-518E-8BFF-BEC6589B6334\\",\\n  \\"Success\\": \\"false\\",\\n  \\"Data\\": {\\n    \\"SqlLogVisibleTime\\": 1683712800000,\\n    \\"RequestStopTime\\": 1715335200000,\\n    \\"CollectorVersion\\": \\"MYSQL_V3\\",\\n    \\"SupportVersion\\": \\"SQL_LOG_V3\\",\\n    \\"ColdRetention\\": 23,\\n    \\"SqlLogEnable\\": true,\\n    \\"Retention\\": 30,\\n    \\"HotRetention\\": 7,\\n    \\"RequestEnable\\": false,\\n    \\"Version\\": \\"SQL_LOG_V3\\",\\n    \\"RequestStartTime\\": 1683712800000,\\n    \\"HotEnable\\": true,\\n    \\"HotStartTime\\": 1683712800000,\\n    \\"ColdEnable\\": true,\\n    \\"ColdStartTime\\": 1683712800000,\\n    \\"SqlLogState\\": \\"FINISH\\",\\n    \\"LogFilter\\": \\"None\\"\\n  }\\n}","type":"json"}]',
      'title' => '开启或配置DAS企业版',
      'description' => '使用该接口需满足以下前提条件：
- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 使用该接口默认开启当前支持的最新版本。DAS企业版各个版本支持的数据库和地域请参见[DAS产品系列及支持的功能](~~156204~~)。',
      'requestParamsDescription' => 'DAS企业版当前存在V0、V1、V2、V3四个版本，默认开通当前支持的最新版本。

- 对于仅支持开启企业版 V0的数控实例，仅需传入参数**Enable**和**Retention**。
- 对于支持开启企业版 V1的数据库实例，仅需传入参数**Enable**和**Retention**，系统自动开启SQL洞察功能（即**RequestEnable**默认配置为**true**）。
- 对于支持开启企业版 V2的数据库实例，仅需传入参数**Enable**和**Retention**，系统自动开启SQL洞察功能（即**RequestEnable**默认配置为**true**），且数据热存储时长（**HotRetention**）固定为7天，数据冷存储时长为`Retention - 7`天。',
    ),
    'DescribeInstanceDasPro' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
        1 => 'http',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '9CB97BC4-6479-55D0-B9D0-EA925AFE****',
              ),
              'Data' => 
              array (
                'description' => '数据库实例是否开启了DAS企业版：

- **true**：是。

- **false**：否。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"9CB97BC4-6479-55D0-B9D0-EA925AFE****\\",\\n  \\"Data\\": true,\\n  \\"Code\\": \\"200\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeInstanceDasProResponse>\\n    <Message>Successful</Message>\\n    <RequestId>9CB97BC4-6479-55D0-B9D0-EA925AFE****</RequestId>\\n    <Data>true</Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</DescribeInstanceDasProResponse>","errorExample":""}]',
      'title' => '查询是否开启了DAS企业版 V1或V2',
      'summary' => '调用DescribeInstanceDasPro接口，查询指定数据库实例是否开启了DAS企业版 V1或企业版 V2。',
      'description' => '- 目前支持的数据库实例请参见[DAS企业版使用说明](~~190912~~)。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 该接口仅适用于DAS企业版 V1、V2。',
    ),
    'GetDasProServiceUsage' => 
    array (
      'summary' => '调用GetDasProServiceUsage接口，查询数据库实例DAS企业版 V1或企业版 V2存储空间的使用情况。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户ID，即创建数据库实例的阿里云主账号ID。

> 非必填，输入目标数据库实例ID后，在调用API接口时，系统会自动获取用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '196278346919****',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '7172BECE-588A-5961-8126-C216E16B****',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'storageFreeQuotaInMB' => 
                  array (
                    'description' => '赠送的SQL洞察数据存储空间，单位为MB。',
                    'type' => 'number',
                    'format' => 'double',
                    'example' => '5120',
                  ),
                  'ip' => 
                  array (
                    'description' => '数据库实例的地址。',
                    'type' => 'string',
                    'example' => 'rm-2ze8g2am97624****.mysql.****.com',
                  ),
                  'userId' => 
                  array (
                    'description' => '用户ID，即创建数据库实例的阿里云主账号ID。',
                    'type' => 'string',
                    'example' => '196278346919****',
                  ),
                  'expireTime' => 
                  array (
                    'description' => '数据库实例企业版到期时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1648742400000',
                  ),
                  'instanceId' => 
                  array (
                    'description' => '数据库实例ID。',
                    'type' => 'string',
                    'example' => 'rm-2ze8g2am97624****',
                  ),
                  'storageUsed' => 
                  array (
                    'description' => '数据库实例已使用的SQL洞察数据存储空间，单位为Byte。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '35903498',
                  ),
                  'engine' => 
                  array (
                    'description' => '数据库引擎。',
                    'type' => 'string',
                    'example' => 'MySQL',
                  ),
                  'instanceAlias' => 
                  array (
                    'description' => '数据库实例名称。',
                    'type' => 'string',
                    'example' => 'TESTDB01',
                  ),
                  'port' => 
                  array (
                    'description' => '端口号。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '3306',
                  ),
                  'vpcId' => 
                  array (
                    'description' => 'VPC ID。',
                    'type' => 'string',
                    'example' => 'vpc-2zentqj1sk4qmolci****',
                  ),
                  'commodityInstanceId' => 
                  array (
                    'description' => 'DAS企业版ID。',
                    'type' => 'string',
                    'example' => 'daspro-cn-v0h1l6i****',
                  ),
                  'startTime' => 
                  array (
                    'description' => '开启企业版的时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1646100892000',
                  ),
                  'isSpare' => 
                  array (
                    'description' => '数据库实例的企业版是否过期：

- **true**：过期。
- **false**：未过期。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'region' => 
                  array (
                    'description' => '数据库实例所属的地域。',
                    'type' => 'string',
                    'example' => 'cn-shanghai',
                  ),
                  'serviceUnitId' => 
                  array (
                    'description' => '服务单元ID。',
                    'type' => 'string',
                    'example' => '4',
                  ),
                  'sqlRetention' => 
                  array (
                    'description' => 'SQL洞察数据存储时长，单位为天。',
                    'type' => 'string',
                    'example' => '180',
                  ),
                  'migrationPredictRemainingTime' => 
                  array (
                    'description' => '旧版SQL洞察和审计迁移到新版的预计剩余时间，单位为毫秒。
><notice>仅当进行旧版SQL洞察和审计迁移到新版操作时，返回此参数。
></notice>',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '60000',
                  ),
                ),
                'example' => '{         "storageFreeQuotaInMB": 5120,         "ip": "rm-2ze8g2am97624****.mysql.****.com",         "custinsId": 12448331,         "userId": "196278346919****",         "uuid": "hdm_b0ae36343407609bf3e8df8709d8****",         "expireTime": 1924963200000,         "instanceId": "rm-2ze8g2am97624****",         "storageUsed": 10773752667393,         "engine": "MySQL",         "instanceAlias": "TESTDB01_PROD",         "port": 3310,         "vpcId": "hdm_****",         "commodityInstanceId": "daspro-****",         "startTime": 1606381940000,         "isSpare": false,         "region": "cn-shanghai",         "serviceUnitId": "5",         "sqlRetention": 30     }',
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"7172BECE-588A-5961-8126-C216E16B****\\",\\n  \\"Data\\": {\\n    \\"storageFreeQuotaInMB\\": 5120,\\n    \\"ip\\": \\"rm-2ze8g2am97624****.mysql.****.com\\",\\n    \\"userId\\": \\"196278346919****\\",\\n    \\"expireTime\\": 1648742400000,\\n    \\"instanceId\\": \\"rm-2ze8g2am97624****\\",\\n    \\"storageUsed\\": 35903498,\\n    \\"engine\\": \\"MySQL\\",\\n    \\"instanceAlias\\": \\"TESTDB01\\",\\n    \\"port\\": 3306,\\n    \\"vpcId\\": \\"vpc-2zentqj1sk4qmolci****\\",\\n    \\"commodityInstanceId\\": \\"daspro-cn-v0h1l6i****\\",\\n    \\"startTime\\": 1646100892000,\\n    \\"isSpare\\": false,\\n    \\"region\\": \\"cn-shanghai\\",\\n    \\"serviceUnitId\\": \\"4\\",\\n    \\"sqlRetention\\": \\"180\\",\\n    \\"migrationPredictRemainingTime\\": 60000\\n  },\\n  \\"Code\\": 200,\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetDasProServiceUsageResponse>\\n    <Message>Successful</Message>\\n    <RequestId>7172BECE-588A-5961-8126-C216E16B****</RequestId>\\n    <Data>\\n        <storageFreeQuotaInMB>5120</storageFreeQuotaInMB>\\n        <ip>rm-2ze8g2am97624****.mysql.****.com</ip>\\n        <userId>196278346919****</userId>\\n        <expireTime>1648742400000</expireTime>\\n        <instanceId>rm-2ze8g2am97624****</instanceId>\\n        <storageUsed>35903498</storageUsed>\\n        <engine>MySQL</engine>\\n        <instanceAlias>TESTDB01</instanceAlias>\\n        <port>3306</port>\\n        <vpcId>vpc-2zentqj1sk4qmolci****</vpcId>\\n        <commodityInstanceId>daspro-cn-v0h1l6i****</commodityInstanceId>\\n        <startTime>1646100892000</startTime>\\n        <isSpare>false</isSpare>\\n        <region>cn-shanghai</region>\\n        <serviceUnitId>4</serviceUnitId>\\n        <sqlRetention>180</sqlRetention>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetDasProServiceUsageResponse>","errorExample":""}]',
      'title' => '查询DAS企业版（V1或V2）存储空间使用情况',
      'description' => '- 当前支持的数据库请参见[DAS企业版使用说明](~~190912~~)。
- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 该接口仅适用于DAS企业版 V1、V2。',
    ),
    'DescribeSqlLogStatistic' => 
    array (
      'summary' => '调用DescribeSqlLogStatistic接口，查询DAS企业版的数据统计信息。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '198879',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREhdmFT57I0',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：
* true：执行成功
* false：执行失败
',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'title' => 'SqlLogStatistic',
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Timestamp' => 
                  array (
                    'title' => '时间戳',
                    'description' => '时间戳，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1712568564928',
                  ),
                  'HotSqlSize' => 
                  array (
                    'title' => '热数据量',
                    'description' => '总的热存储数据，单位字节（Byte）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'enumValueTitles' => 
                    array (
                    ),
                    'example' => '1118042',
                  ),
                  'ColdSqlSize' => 
                  array (
                    'title' => '冷数据量',
                    'description' => '总的冷存储数据，单位字节（Byte）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '8585901',
                  ),
                  'ImportSqlSize' => 
                  array (
                    'title' => '引入量',
                    'description' => '最近一天该的数据引入量，单位字节（Byte）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '297245',
                  ),
                  'FreeHotSqlSize' => 
                  array (
                    'description' => '免费的热存储数据，单位字节（Byte）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '297245',
                  ),
                  'FreeColdSqlSize' => 
                  array (
                    'description' => '免费的冷存储数据，单位字节（Byte）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '5041450',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"Timestamp\\": 1712568564928,\\n    \\"HotSqlSize\\": 1118042,\\n    \\"ColdSqlSize\\": 8585901,\\n    \\"ImportSqlSize\\": 297245,\\n    \\"FreeHotSqlSize\\": 297245,\\n    \\"FreeColdSqlSize\\": 5041450\\n  }\\n}","type":"json"}]',
      'title' => '查询DAS企业版数据统计信息',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetDasSQLLogHotData' => 
    array (
      'summary' => '调用GetDasSQLLogHotDat接口，查询数据库实例7天内DAS企业版 V2或企业版 V3的热存储数据明细。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '178715',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREhdmFT57I0',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        1 => 
        array (
          'name' => 'Start',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为Unix时间戳，单位为毫秒。

> 只能查询开启DAS企业版 V2或企业版 V3后的数据，查询开始时间最大不能早于当前时间7天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1684734297000',
          ),
        ),
        2 => 
        array (
          'name' => 'End',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为Unix时间戳，单位为毫秒。

> 查询结束时间需晚于查询开始时间，且查询开始时间和查询结束时间的间隔不能超过1天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1684820697000',
          ),
        ),
        3 => 
        array (
          'name' => 'QueryKeyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '关键字。

> 查询的关键字至少包含4个字符，不支持模糊查询；支持多个关键字组合查询，关键字间以空格分隔。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'test',
          ),
        ),
        4 => 
        array (
          'name' => 'AccountName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据库账号。

> 支持多个数据库账号组合查询，数据库账号间以空格分隔，例如：`user1 user2 user3`。',
            'type' => 'string',
            'required' => false,
            'example' => 'testuser',
          ),
        ),
        5 => 
        array (
          'name' => 'DBName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据库名。

> 支持多个数据库名组合查询，数据库名间以空格分隔，例如：`DB1 DB2 DB3`。',
            'type' => 'string',
            'required' => false,
            'example' => 'testDB',
          ),
        ),
        6 => 
        array (
          'name' => 'HostAddress',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '客户端IP地址。

> 支持多个客户端IP地址组合查询，客户端IP地址间以空格分隔，例如：`IP1 IP2 IP3`。',
            'type' => 'string',
            'required' => false,
            'example' => '47.100.XX.XX',
          ),
        ),
        7 => 
        array (
          'name' => 'LogicalOperator',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '多个关键字的逻辑关系。

- **or**：或。
- **and**：与。',
            'type' => 'string',
            'required' => false,
            'example' => 'or',
          ),
        ),
        8 => 
        array (
          'name' => 'MaxLatancy',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '最大执行耗时 ，单位为微秒。查询执行耗时小于该参数值的SQL语句。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '100',
          ),
        ),
        9 => 
        array (
          'name' => 'MaxScanRows',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '最大扫描行数 ，查询扫描行数小于该参数值的SQL语句。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10000',
          ),
        ),
        10 => 
        array (
          'name' => 'MinLatancy',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '最小执行耗时 ，单位为微秒。查询执行耗时大于等于该参数值的SQL语句。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10',
          ),
        ),
        11 => 
        array (
          'name' => 'MinScanRows',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '最小扫描行数 ，查询扫描行数大于等于该参数值的SQL语句。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10',
          ),
        ),
        12 => 
        array (
          'name' => 'SqlType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'SQL语句的类型。取值：
- **SELECT**
- **UPDATE**
- **DELETE**',
            'type' => 'string',
            'required' => false,
            'example' => 'SELECT',
          ),
        ),
        13 => 
        array (
          'name' => 'State',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '执行结果，输入**0**时表示查询执行成功的SQL，您也可以输入具体的错误码，查询对应的SQL。',
            'type' => 'string',
            'required' => false,
            'example' => '0',
          ),
        ),
        14 => 
        array (
          'name' => 'ThreadID',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '线程ID。

> 支持多个线程ID组合查询，线程ID间以空格分隔，例如：`线程ID1 线程ID2 线程ID3`。',
            'type' => 'string',
            'required' => false,
            'example' => '657',
          ),
        ),
        15 => 
        array (
          'name' => 'PageNumbers',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页查询的页码，从1开始，默认为1。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '2',
          ),
        ),
        16 => 
        array (
          'name' => 'MaxRecordsPerPage',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页查询每页最大记录数。取值范围：5～100。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10',
          ),
        ),
        17 => 
        array (
          'name' => 'SortKey',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '排序依据。

- **SCAN\\_ROWS**：扫描行数。
- **UPDATE\\_ROWS**：更新行数。
- **CONSUME**：耗时。
- **ORIGIN\\_TIME**：执行时间。',
            'type' => 'string',
            'required' => false,
            'example' => 'SCAN_ROWS',
          ),
        ),
        18 => 
        array (
          'name' => 'SortMethod',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '排序方式。
- **ase**：正序。
- **desc**：倒序。',
            'type' => 'string',
            'required' => false,
            'example' => 'ase',
          ),
        ),
        19 => 
        array (
          'name' => 'ChildDBInstanceIDs',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于PolarDB MySQL版实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-bp179lg03445l****',
          ),
        ),
        20 => 
        array (
          'name' => 'Role',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '预留参数，暂不支持。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        21 => 
        array (
          'name' => 'TraceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '预留参数，暂不支持。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        22 => 
        array (
          'name' => 'MinRows',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '预留参数，暂不支持。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => 'None',
          ),
        ),
        23 => 
        array (
          'name' => 'MaxRows',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '预留参数，暂不支持。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => 'None',
          ),
        ),
        24 => 
        array (
          'name' => 'MinSpillCnt',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '预留参数，暂不支持。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => 'None',
          ),
        ),
        25 => 
        array (
          'name' => 'MaxSpillCnt',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '预留参数，暂不支持。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => 'None',
          ),
        ),
        26 => 
        array (
          'name' => 'TransactionId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '事务ID。',
            'type' => 'string',
            'required' => false,
            'example' => '0',
          ),
        ),
        27 => 
        array (
          'name' => 'Fail',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'SQL执行错误码，您可以调用[GetAsyncErrorRequestStatByCode](~~409804~~)获取错误码。',
            'type' => 'string',
            'required' => false,
            'example' => '1064',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，阿里云为该请求生成的标识符。',
                'type' => 'string',
                'example' => '0A74B755-98B7-59DB-8724-1321B394****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'title' => 'ListResult<Map<String, Object>>',
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'List' => 
                  array (
                    'description' => '返回信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回SQL洞察和审计数据。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Latancy' => 
                        array (
                          'description' => '执行耗时，单位微秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                        'Ext' => 
                        array (
                          'description' => '扩展信息字段，备用参数。',
                          'type' => 'string',
                          'example' => 'None',
                        ),
                        'ExecuteTime' => 
                        array (
                          'description' => '执行时间，格式为UTC时间：`yyyy-MM-ddTHH:mm:ssZ`。',
                          'type' => 'string',
                          'example' => '2023-05-23 T12:11:20Z',
                        ),
                        'OriginTime' => 
                        array (
                          'description' => '执行时间，格式为UTC时间：`yyyy-MM-ddTHH:mm:ss.SSSZ`。',
                          'type' => 'string',
                          'example' => '2023-05-23 T12:11:20.999Z',
                        ),
                        'HostAddress' => 
                        array (
                          'description' => '客户端IP地址。',
                          'type' => 'string',
                          'example' => '47.100.XX.XX',
                        ),
                        'UpdateRows' => 
                        array (
                          'description' => '更新行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '30',
                        ),
                        'LogicRead' => 
                        array (
                          'description' => '逻辑读。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '12',
                        ),
                        'SQLText' => 
                        array (
                          'description' => 'SQL语句详情。',
                          'type' => 'string',
                          'example' => 'select 1',
                        ),
                        'LockTime' => 
                        array (
                          'description' => '锁等待时间，单位微秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1',
                        ),
                        'ScanRows' => 
                        array (
                          'description' => '扫描行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '29',
                        ),
                        'ThreadID' => 
                        array (
                          'description' => '线程ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '657',
                        ),
                        'State' => 
                        array (
                          'description' => '状态。返回**0**时表示执行成功，否则返回错误码。',
                          'type' => 'string',
                          'example' => '0',
                        ),
                        'DBName' => 
                        array (
                          'description' => '数据库名称。',
                          'type' => 'string',
                          'example' => 'testDB',
                        ),
                        'SqlType' => 
                        array (
                          'description' => 'SQL的类型。取值：
- **SELECT**
- **UPDATE**
- **DELETE**',
                          'type' => 'string',
                          'example' => 'SELECT',
                        ),
                        'AccountName' => 
                        array (
                          'description' => '数据库账号。',
                          'type' => 'string',
                          'example' => 'testuser',
                        ),
                        'PhysicSyncRead' => 
                        array (
                          'description' => '物理同步读。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'PhysicAsyncRead' => 
                        array (
                          'description' => '物理异步读。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'TransactionId' => 
                        array (
                          'description' => '开启的事务ID。',
                          'type' => 'string',
                          'example' => '0',
                        ),
                        'ReturnRows' => 
                        array (
                          'description' => '返回行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1',
                        ),
                      ),
                    ),
                  ),
                  'Total' => 
                  array (
                    'description' => '返回总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '20',
                  ),
                  'PageNo' => 
                  array (
                    'description' => '分页页码。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '2',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'Extra' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'any',
                    'example' => 'None',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"0A74B755-98B7-59DB-8724-1321B394****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"List\\": [\\n      {\\n        \\"Latancy\\": 10000,\\n        \\"Ext\\": \\"None\\",\\n        \\"ExecuteTime\\": \\"2023-05-23 T12:11:20Z\\",\\n        \\"OriginTime\\": \\"2023-05-23 T12:11:20.999Z\\",\\n        \\"HostAddress\\": \\"47.100.XX.XX\\",\\n        \\"UpdateRows\\": 30,\\n        \\"LogicRead\\": 12,\\n        \\"SQLText\\": \\"select 1\\",\\n        \\"LockTime\\": 1,\\n        \\"ScanRows\\": 29,\\n        \\"ThreadID\\": 657,\\n        \\"State\\": \\"0\\",\\n        \\"DBName\\": \\"testDB\\",\\n        \\"SqlType\\": \\"SELECT\\",\\n        \\"AccountName\\": \\"testuser\\",\\n        \\"PhysicSyncRead\\": 0,\\n        \\"PhysicAsyncRead\\": 0,\\n        \\"TransactionId\\": \\"0\\",\\n        \\"ReturnRows\\": 1\\n      }\\n    ],\\n    \\"Total\\": 20,\\n    \\"PageNo\\": 2,\\n    \\"PageSize\\": 10,\\n    \\"Extra\\": \\"None\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDasSQLLogHotDataResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>0A74B755-98B7-59DB-8724-1321B394****</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <List>\\n            <Latancy>10000</Latancy>\\n            <Ext>None</Ext>\\n            <ExecuteTime>2023-05-23 T12:11:20Z</ExecuteTime>\\n            <OriginTime>2023-05-23 T12:11:20.999Z</OriginTime>\\n            <HostAddress>47.100.XX.XX</HostAddress>\\n            <UpdateRows>30</UpdateRows>\\n            <LogicRead>12</LogicRead>\\n            <SQLText>select 1</SQLText>\\n            <LockTime>1</LockTime>\\n            <ScanRows>29</ScanRows>\\n            <ThreadID>657</ThreadID>\\n            <State>0</State>\\n            <DBName>testDB</DBName>\\n            <SqlType>SELECT</SqlType>\\n            <AccountName>testuser</AccountName>\\n            <PhysicSyncRead>0</PhysicSyncRead>\\n            <PhysicAsyncRead>0</PhysicAsyncRead>\\n            <TransactionId>0</TransactionId>\\n            <ReturnRows>1</ReturnRows>\\n        </List>\\n        <Total>20</Total>\\n        <PageNo>2</PageNo>\\n        <PageSize>10</PageSize>\\n        <Extra>None</Extra>\\n    </Data>\\n</GetDasSQLLogHotDataResponse>","errorExample":""}]',
      'title' => '查询DAS企业版（V2或V3）热存储数据明细',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 目标数据库实例为上海地域的RDS MySQL或PolarDB MySQL版。

> 只能查询开启DAS企业版 V2或企业版 V3后的数据，查询开始时间最大不能早于当前时间7天，且查询开始时间和查询结束时间的间隔不能超过1天。',
    ),
    'DescribeSqlLogConfig' => 
    array (
      'summary' => '调用DescribeSqlLogConfig接口，查询数据库实例的DAS企业版配置信息。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '198881',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREhdmPGXCEW',
          1 => 'FEATUREhdmFT57I0',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0A74B755-98B7-59DB-8724-1321B394****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：
* **true**：执行成功
* **false**：执行失败',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'title' => 'SqlLogConfig',
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'SqlLogVisibleTime' => 
                  array (
                    'description' => 'DAS企业版开启的时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1683712800000',
                  ),
                  'CollectorVersion' => 
                  array (
                    'description' => '采集器版本。

- **MYSQL_V0**：MySQL V0版。
- **MYSQL_V1**：MySQL V1版。
- **MYSQL_V2**：MySQL V2版。
- **MYSQL_V3**：MySQL V3版。
- **PG_V1**：PostgreSQL V1版。
- **rdspg_v1**：RDS PostgreSQL V1版。
- **polarpg_v1**：PolarDB PostgreSQL版 V1版。',
                    'type' => 'string',
                    'example' => 'MYSQL_V3',
                  ),
                  'SupportVersion' => 
                  array (
                    'title' => '当前实例支持的数据库版本(不落库)',
                    'description' => '当前支持的最新DAS企业版版本。
- **SQL_LOG_V0**：企业版 V0。
- **SQL_LOG_V1**：企业版 V1。
- **SQL_LOG_V2**：企业版 V2。
- **SQL_LOG_V3**：企业版 V3。
- **SQL_LOG_NOT_ENABLE**：未开启企业版。
- **SQL_LOG_NOT_SUPPORT**： 不支持企业版。',
                    'type' => 'string',
                    'example' => 'SQL_LOG_V3',
                  ),
                  'ColdRetention' => 
                  array (
                    'title' => '冷数据存储周期(不落库),通过 retention - hotRetention 计算',
                    'description' => '数据冷存储时长，单位为天。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '23',
                  ),
                  'SqlLogEnable' => 
                  array (
                    'description' => '是否开启了DAS企业版。
- **true**：是。
- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'Retention' => 
                  array (
                    'description' => '数据总存储时长，**HotRetention**与**ColdRetention**之和，单位为天。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '30',
                  ),
                  'HotRetention' => 
                  array (
                    'description' => '数据热存储时长，单位为天。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '7',
                  ),
                  'RequestEnable' => 
                  array (
                    'description' => '是否开启SQL洞察。
- **true**：是。
- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'Version' => 
                  array (
                    'title' => '当前审计日志的版本',
                    'description' => '当前开启的DAS企业版版本。
- **SQL_LOG_V0**：企业版 V0。
- **SQL_LOG_V1**：企业版 V1。
- **SQL_LOG_V2**：企业版 V2。
- **SQL_LOG_V3**：企业版 V3。
- **SQL_LOG_NOT_ENABLE**：未开启企业版。
- **SQL_LOG_NOT_SUPPORT**： 不支持企业版。',
                    'type' => 'string',
                    'example' => 'SQL_LOG_V3',
                  ),
                  'RequestStartTime' => 
                  array (
                    'description' => 'SQL洞察开启时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1683712800000',
                  ),
                  'HotEnable' => 
                  array (
                    'description' => '是否开启数据热存储。
- **true**：是。
- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'HotStartTime' => 
                  array (
                    'description' => '数据热存储开始时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1683712800000',
                  ),
                  'ColdEnable' => 
                  array (
                    'description' => '是否开启数据冷存储。
- **true**：是。
- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'ColdStartTime' => 
                  array (
                    'description' => '数据冷存储开始时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1683712800000',
                  ),
                  'SqlLogState' => 
                  array (
                    'description' => '数据迁移状态。

- **FINISH**： 历史数据迁移完成。
- **RUNNING**： 历史数据迁移中。
- **FAILURE**： 历史数据迁移失败。',
                    'type' => 'string',
                    'example' => 'FINISH',
                  ),
                  'RequestStopTime' => 
                  array (
                    'description' => 'DAS企业版V1到期时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1715335200000',
                  ),
                  'LogFilter' => 
                  array (
                    'description' => '预留参数。',
                    'type' => 'string',
                    'example' => 'None',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"0A74B755-98B7-59DB-8724-1321B394****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"SqlLogVisibleTime\\": 1683712800000,\\n    \\"CollectorVersion\\": \\"MYSQL_V3\\",\\n    \\"SupportVersion\\": \\"SQL_LOG_V3\\",\\n    \\"ColdRetention\\": 23,\\n    \\"SqlLogEnable\\": true,\\n    \\"Retention\\": 30,\\n    \\"HotRetention\\": 7,\\n    \\"RequestEnable\\": true,\\n    \\"Version\\": \\"SQL_LOG_V3\\",\\n    \\"RequestStartTime\\": 1683712800000,\\n    \\"HotEnable\\": true,\\n    \\"HotStartTime\\": 1683712800000,\\n    \\"ColdEnable\\": true,\\n    \\"ColdStartTime\\": 1683712800000,\\n    \\"SqlLogState\\": \\"FINISH\\",\\n    \\"RequestStopTime\\": 1715335200000,\\n    \\"LogFilter\\": \\"None\\"\\n  }\\n}","type":"json"}]',
      'title' => '查询DAS企业版配置信息',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
      'responseParamsDescription' => '对于**SQL_LOG_V0**（企业版 V0）和**SQL_LOG_V1**（企业版 V1） ，其数据存储在CStore中，视为热存储。开通该版本的数据库实例，查询返回结果中`SqlLogEnable = HotEnable = true, Retention = HotRetention， ColdEnable = false， ColdRetention = 0`。',
    ),
    'DescribeSqlLogTasks' => 
    array (
      'summary' => '调用DescribeSqlLogTasks接口，查询数据库实例DAS企业版的离线任务。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '199696',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREhdmFT57I0',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'r-bp1nti25tc7bq5****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点ID。
>该参数仅适用于集群版实例，可以选择查询指定节点离线任务。若不传该参数，默认返回主节点离线任务。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-bp1o58x3ib7e6****',
          ),
        ),
        2 => 
        array (
          'name' => 'Filters',
          'in' => 'formData',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '查询筛选条件列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '查询筛选条件。',
              'type' => 'object',
              'properties' => 
              array (
                'Key' => 
                array (
                  'title' => '过滤参数',
                  'description' => '过滤参数。

> 支持的过滤参数及其取值请参考**请求参数补充说明**。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'keyWords',
                ),
                'Value' => 
                array (
                  'description' => '过滤参数的值。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'select
',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
        3 => 
        array (
          'name' => 'StartTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1596177993000',
          ),
        ),
        4 => 
        array (
          'name' => 'EndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1608888296000',
          ),
        ),
        5 => 
        array (
          'name' => 'PageNo',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页查询的页码，从1开始，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        6 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页最大记录数，默认值为10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'title' => 'ListResult<SqlLogTask>',
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'List' => 
                  array (
                    'description' => '返回信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回信息列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TaskId' => 
                        array (
                          'description' => '任务ID。',
                          'type' => 'string',
                          'example' => '9a4f5c4494dbd6713185d87a97aa53e8',
                        ),
                        'InstanceId' => 
                        array (
                          'title' => '实例标识',
                          'description' => '数据库实例ID。',
                          'type' => 'string',
                          'example' => 'r-bp1nti25tc7bq5****
',
                        ),
                        'Name' => 
                        array (
                          'title' => '任务别名',
                          'description' => '任务名称。',
                          'type' => 'string',
                          'example' => 'SQL审计导出1',
                        ),
                        'Start' => 
                        array (
                          'title' => '查询开始时间',
                          'description' => '任务开始时间，格式为unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1683859555482',
                        ),
                        'End' => 
                        array (
                          'title' => '查询结束时间',
                          'description' => '任务结束时间，格式为unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1705975320000',
                        ),
                        'Status' => 
                        array (
                          'title' => '任务状态',
                          'description' => '任务状态。

- **INIT**：待调度 。
- **RUNNING**：运行中。
- **FAILED**：失败。
- **CANCELED**：已取消。
- **COMPLETED**：完成。

> 当任务处于**COMPLETED**时，可以查看离线任务的结果。',
                          'type' => 'string',
                          'example' => 'RUNNING',
                        ),
                        'LogCount' => 
                        array (
                          'title' => '日志总数',
                          'description' => '日志总数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '99999',
                        ),
                        'Progress' => 
                        array (
                          'title' => '任务进度',
                          'description' => '任务进度。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '100',
                        ),
                        'ScanFileSize' => 
                        array (
                          'title' => '扫描的文件量',
                          'description' => '扫描的文件数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '3000',
                        ),
                        'Expire' => 
                        array (
                          'title' => '任务是否过期',
                          'description' => '任务是否过期。

- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'CreateTime' => 
                        array (
                          'title' => '任务创建时间',
                          'description' => '任务创建时间，格式为unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1681363254423',
                        ),
                        'AnalysisTaskFinishTime' => 
                        array (
                          'title' => '分析任务完成时间',
                          'description' => '分析任务完成时间，格式为unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1712751923000',
                        ),
                        'AnalysisTaskStatus' => 
                        array (
                          'description' => '分析任务状态。

> 系统内部参数，用户无需关注。',
                          'type' => 'string',
                          'example' => 'SCAN_ANALYZE_COMPLETED',
                        ),
                        'Result' => 
                        array (
                          'title' => 'oss链接或其他信息',
                          'description' => '任务类型为**Export**时的链接地址。',
                          'type' => 'string',
                          'example' => 'https://das-sqllog-download-cn-shanghai.oss-cn-shanghai.aliyuncs.com/la',
                        ),
                        'TaskType' => 
                        array (
                          'description' => '任务类型。

- **Export**：导出任务。
- **Query**：查询任务。',
                          'type' => 'string',
                          'example' => 'Export',
                        ),
                        'Filters' => 
                        array (
                          'description' => '查询筛选条件列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '查询筛选条件。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'Key' => 
                              array (
                                'description' => '过滤参数。

> 支持的过滤参数及其取值请参考**请求参数补充说明**。',
                                'type' => 'string',
                                'example' => 'keyWords
',
                              ),
                              'Value' => 
                              array (
                                'description' => '过滤参数的值。',
                                'type' => 'string',
                                'example' => 'select
',
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'Total' => 
                  array (
                    'description' => '任务数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '40',
                  ),
                  'PageNo' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"List\\": [\\n      {\\n        \\"TaskId\\": \\"9a4f5c4494dbd6713185d87a97aa53e8\\",\\n        \\"InstanceId\\": \\"r-bp1nti25tc7bq5****\\\\n\\",\\n        \\"Name\\": \\"SQL审计导出1\\",\\n        \\"Start\\": 1683859555482,\\n        \\"End\\": 1705975320000,\\n        \\"Status\\": \\"RUNNING\\",\\n        \\"LogCount\\": 99999,\\n        \\"Progress\\": 100,\\n        \\"ScanFileSize\\": 3000,\\n        \\"Expire\\": false,\\n        \\"CreateTime\\": 1681363254423,\\n        \\"AnalysisTaskFinishTime\\": 1712751923000,\\n        \\"AnalysisTaskStatus\\": \\"SCAN_ANALYZE_COMPLETED\\",\\n        \\"Result\\": \\"https://das-sqllog-download-cn-shanghai.oss-cn-shanghai.aliyuncs.com/la\\",\\n        \\"TaskType\\": \\"Export\\",\\n        \\"Filters\\": [\\n          {\\n            \\"Key\\": \\"keyWords\\\\n\\",\\n            \\"Value\\": \\"select\\\\n\\"\\n          }\\n        ]\\n      }\\n    ],\\n    \\"Total\\": 40,\\n    \\"PageNo\\": 1,\\n    \\"PageSize\\": 10\\n  }\\n}","type":"json"}]',
      'title' => '查询DAS企业版离线任务',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
      'requestParamsDescription' => '**Key**支持的参数和取值：

- **KeyWords**：关键字，多个关键字间使用空格隔开。
- **LogicalOperator**：关键字间的逻辑操作，取值为and或or。
- **AccountName**：用户名。
- **dbName**：数据库名称。
- **HostAddress**：客户端IP地址。
- **MaxConsume**：最大耗时，单位毫秒。
- **MinConsume**：最小耗时，单位毫秒。
- **MaxScanRows**：最大扫描行。
- **MinScanRows**：最小扫描行。
- **SqlType**：SQL类型，取值select、update、insert或delete。
- **State**：执行结果，取值0（成功）或1（失败）。
- **ThreadId**：线程ID。
- **SortKey**：排序列名称，取值ScanRows（扫描行数）、UpdateRows（更新行数）、Consume（耗时）、ExecuteTime（执行时间）、ReturnRows（返回行数）、LockTime（锁等待时间）、Frows（PolarDB-X 2.0计算节点的拉取行数）、Scnt（PolarDB-X 2.0计算节点的DN请求数）、CpuTime（CPU执行时间）、PhysicalRead（物理读）。
- **SortMethod**：排序方式，取值DESC（降序）、ASC（升序）。默认为DESC。
- **TraceId**：PolarDB-X 2.0实例的跟踪ID。
- **MinRows**：最小更新行数。
- **MaxRows**：最大更新行数。
- **MinScnt**：PolarDB-X 2.0计算节点（CN）的DN最小请求数。
- **MaxScnt**：PolarDB-X 2.0计算节点（CN）的DN最大请求数。
- **TrxId**：事务ID。
- **Fail**：错误码。
- **SqlId**：SQL ID。
- **JobId**：对于开通企业版V0和V1的数据库实例，需要通过异步任务ID进一步查询返回结果。',
    ),
    'DescribeSqlLogTask' => 
    array (
      'summary' => '调用DescribeSqlLogTask接口，查询DAS企业版离线任务详情。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '213185',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREhdmFT57I0',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'r-bp1nti25tc7bq5****
',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'a4f5c4494dbd6713185d87a97aa53e8
',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNo',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页查询的页码，从1开始，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页查询每页最大记录数，默认为10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。

',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'title' => 'SqlLogTaskDetail',
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Name' => 
                  array (
                    'title' => '任务名',
                    'description' => '任务名称。',
                    'type' => 'string',
                    'example' => 'SQL审计导出1
',
                  ),
                  'TaskId' => 
                  array (
                    'title' => '任务ID',
                    'description' => '任务ID。',
                    'type' => 'string',
                    'example' => '9a4f5c4494dbd6713185d87a97aa53e8
',
                  ),
                  'TaskType' => 
                  array (
                    'title' => '任务类型',
                    'description' => '任务类型。

- **Export**：导出任务。
- **Query**：查询任务。',
                    'type' => 'string',
                    'example' => 'Query',
                  ),
                  'CreateTime' => 
                  array (
                    'title' => '任务创建时间',
                    'description' => '任务创建时间，格式为unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1681363254423
',
                  ),
                  'Status' => 
                  array (
                    'title' => '任务状态',
                    'description' => '任务状态。
- **INIT**：待调度 。
- **RUNNING**：运行中。
- **FAILED**：失败。
- **CANCELED**：已取消。
- **COMPLETED**：完成。
> 当任务处于**COMPLETED**时，可以查看离线任务的结果。',
                    'type' => 'string',
                    'example' => 'COMPLETED',
                  ),
                  'Expire' => 
                  array (
                    'description' => '任务是否过期。

- **true**：是。
- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'false
',
                  ),
                  'Start' => 
                  array (
                    'title' => '查询开始时间',
                    'description' => '查询开始时间，格式为unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1596177993000
',
                  ),
                  'End' => 
                  array (
                    'title' => '查询结束时间',
                    'description' => '查询结束时间，格式为unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1608888296000
',
                  ),
                  'Filters' => 
                  array (
                    'title' => '过滤条件',
                    'description' => '过滤条件。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '查询筛选条件。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Key' => 
                        array (
                          'title' => '过滤参数',
                          'description' => '过滤参数的名称。
>支持的过滤参数及其取值请参考**返回参数补充说明**。',
                          'type' => 'string',
                          'example' => 'keyWords
',
                        ),
                        'Value' => 
                        array (
                          'title' => '过滤值',
                          'description' => '过滤参数的值。',
                          'type' => 'any',
                          'example' => 'select',
                        ),
                      ),
                    ),
                  ),
                  'Total' => 
                  array (
                    'title' => '总条数',
                    'description' => '任务总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'Queries' => 
                  array (
                    'title' => '明细列表',
                    'description' => '离线查询任务结果。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '离线查询任务结果。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Vip' => 
                        array (
                          'description' => '查询链接的endpoint解析地址。',
                          'type' => 'string',
                          'example' => '10.146.XX.XX',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '子节点ID。',
                          'type' => 'string',
                          'example' => 'pi-bp1o58x3ib7e6****
',
                        ),
                        'SqlText' => 
                        array (
                          'description' => 'SQL语句详情。',
                          'type' => 'string',
                          'example' => 'SELECT @@session.transaction_read_only',
                        ),
                        'SqlType' => 
                        array (
                          'description' => '选择SQL的类型。取值：
- **SELECT**
- **UPDATE**
- **DELETE**',
                          'type' => 'string',
                          'example' => 'SELECT',
                        ),
                        'State' => 
                        array (
                          'description' => '执行结果。

- **0**：执行成功。
- **1**：执行失败。',
                          'type' => 'string',
                          'example' => '0',
                        ),
                        'DBName' => 
                        array (
                          'description' => '数据库名称。',
                          'type' => 'string',
                          'example' => 'testdb01',
                        ),
                        'SqlId' => 
                        array (
                          'description' => 'SQL ID。',
                          'type' => 'string',
                          'example' => 'a4111670e80596c5bf42cf5154438a91',
                        ),
                        'ExecuteTime' => 
                        array (
                          'title' => 'yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'',
                          'description' => '执行时间，格式为UTC时间：`yyyy-MM-ddTHH:mm:ssZ`。',
                          'type' => 'string',
                          'example' => '2023-12-07T02:15:32Z',
                        ),
                        'OriginTime' => 
                        array (
                          'title' => 'ts unix',
                          'description' => '执行时间戳，格式为Unix时间，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1701886532000
',
                        ),
                        'AccountName' => 
                        array (
                          'description' => '数据库账号。',
                          'type' => 'string',
                          'example' => 'testname
',
                        ),
                        'HostAddress' => 
                        array (
                          'description' => '客户端IP地址。',
                          'type' => 'string',
                          'example' => '11.197.XX.XX
',
                        ),
                        'Consume' => 
                        array (
                          'description' => '执行耗时，单位毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '58',
                        ),
                        'LockTime' => 
                        array (
                          'description' => '锁等待时间，单位毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'UpdateRows' => 
                        array (
                          'description' => '更新行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'ScanRows' => 
                        array (
                          'description' => '扫描行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'ReturnRows' => 
                        array (
                          'description' => '返回行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'LogicRead' => 
                        array (
                          'description' => '逻辑读。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'PhysicSyncRead' => 
                        array (
                          'description' => '物理同步读。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'PhysicAsyncRead' => 
                        array (
                          'description' => '物理异步读。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'ThreadId' => 
                        array (
                          'description' => '线程ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => 'None',
                        ),
                        'TrxId' => 
                        array (
                          'description' => '事务ID。',
                          'type' => 'string',
                          'example' => '200000
',
                        ),
                        'Ext' => 
                        array (
                          'description' => '扩展信息字段，备用参数。',
                          'type' => 'string',
                          'example' => 'None',
                        ),
                        'Scnt' => 
                        array (
                          'title' => 'polarx cn节点，dn请求总数',
                          'description' => 'PolarDB-X 2.0计算节点（CN）的DN请求数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10
',
                        ),
                        'Rows' => 
                        array (
                          'title' => 'polarx cn节点,总更新/返回行数',
                          'description' => 'PolarDB-X 2.0数据库实例计算节点总更新或返回的行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10',
                        ),
                        'Frows' => 
                        array (
                          'title' => 'polarx cn节点,拉取行数',
                          'description' => 'PolarDB-X 2.0计算节点（CN）的拉取行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10',
                        ),
                        'TraceId' => 
                        array (
                          'description' => 'PolarDB-X 2.0的跟踪ID，即SQL在数据节点的执行ID。',
                          'type' => 'string',
                          'example' => '14c93b7c7bf00000 ',
                        ),
                        'UseImciEngine' => 
                        array (
                          'description' => 'PolarDB MySQL版实例是否使用列存索引。

- **true**：是。
- **false**：否。',
                          'type' => 'string',
                          'example' => 'true
',
                        ),
                        'ParallelDegree' => 
                        array (
                          'description' => 'PolarDB MySQL版实例的并行排队时间，单位为毫秒。',
                          'type' => 'string',
                          'example' => '10
',
                        ),
                        'ParallelQueueTime' => 
                        array (
                          'description' => 'PolarDB MySQL版实例的并行度。',
                          'type' => 'string',
                          'example' => '2',
                        ),
                        'PhysicRead' => 
                        array (
                          'description' => '物理读。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'CpuTime' => 
                        array (
                          'description' => 'CPU执行时间，单位为微秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '100
',
                        ),
                        'Writes' => 
                        array (
                          'description' => 'RDS SQL Server引擎的写入数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                  'Export' => 
                  array (
                    'title' => '导出地址',
                    'description' => '导出任务的下载地址。',
                    'type' => 'string',
                    'example' => '"https://das-sqllog-download-cn-hongkong.oss-cn-hongkong.aliyuncs.com/****"',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"Name\\": \\"SQL审计导出1\\\\n\\",\\n    \\"TaskId\\": \\"9a4f5c4494dbd6713185d87a97aa53e8\\\\n\\",\\n    \\"TaskType\\": \\"Query\\",\\n    \\"CreateTime\\": 1681363254423,\\n    \\"Status\\": \\"COMPLETED\\",\\n    \\"Expire\\": true,\\n    \\"Start\\": 1596177993000,\\n    \\"End\\": 1608888296000,\\n    \\"Filters\\": [\\n      {\\n        \\"Key\\": \\"keyWords\\\\n\\",\\n        \\"Value\\": \\"select\\"\\n      }\\n    ],\\n    \\"Total\\": 1,\\n    \\"Queries\\": [\\n      {\\n        \\"Vip\\": \\"10.146.XX.XX\\",\\n        \\"NodeId\\": \\"pi-bp1o58x3ib7e6****\\\\n\\",\\n        \\"SqlText\\": \\"SELECT @@session.transaction_read_only\\",\\n        \\"SqlType\\": \\"SELECT\\",\\n        \\"State\\": \\"0\\",\\n        \\"DBName\\": \\"testdb01\\",\\n        \\"SqlId\\": \\"a4111670e80596c5bf42cf5154438a91\\",\\n        \\"ExecuteTime\\": \\"2023-12-07T02:15:32Z\\",\\n        \\"OriginTime\\": 1701886532000,\\n        \\"AccountName\\": \\"testname\\\\n\\",\\n        \\"HostAddress\\": \\"11.197.XX.XX\\\\n\\",\\n        \\"Consume\\": 58,\\n        \\"LockTime\\": 0,\\n        \\"UpdateRows\\": 0,\\n        \\"ScanRows\\": 0,\\n        \\"ReturnRows\\": 0,\\n        \\"LogicRead\\": 0,\\n        \\"PhysicSyncRead\\": 0,\\n        \\"PhysicAsyncRead\\": 0,\\n        \\"ThreadId\\": 0,\\n        \\"TrxId\\": \\"200000\\\\n\\",\\n        \\"Ext\\": \\"None\\",\\n        \\"Scnt\\": 10,\\n        \\"Rows\\": 10,\\n        \\"Frows\\": 10,\\n        \\"TraceId\\": \\"14c93b7c7bf00000 \\",\\n        \\"UseImciEngine\\": \\"true\\\\n\\",\\n        \\"ParallelDegree\\": \\"10\\\\n\\",\\n        \\"ParallelQueueTime\\": \\"2\\",\\n        \\"PhysicRead\\": 0,\\n        \\"CpuTime\\": 100,\\n        \\"Writes\\": 10\\n      }\\n    ],\\n    \\"Export\\": \\"\\\\\\"https://das-sqllog-download-cn-hongkong.oss-cn-hongkong.aliyuncs.com/****\\\\\\"\\"\\n  }\\n}","type":"json"}]',
      'title' => '查询DAS企业版离线任务详情',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
      'responseParamsDescription' => '**Key**支持的参数和取值：

- **KeyWords**：关键字，多个关键字间使用空格隔开。
- **LogicalOperator**：关键字间的逻辑操作，取值为and或or。
- **AccountName**：用户名。
- **dbName**：数据库名称。
- **HostAddress**：客户端IP地址。
- **MaxConsume**：最大耗时，单位毫秒。
- **MinConsume**：最小耗时，单位毫秒。
- **MaxScanRows**：最大扫描行。
- **MinScanRows**：最小扫描行。
- **SqlType**：SQL类型，取值select、update、insert或delete。
- **State**：执行结果，取值0（成功）或1（失败）。
- **ThreadId**：线程ID。
- **SortKey**：排序列名称，取值ScanRows（扫描行数）、UpdateRows（更新行数）、Consume（耗时）、ExecuteTime（执行时间）、ReturnRows（返回行数）、LockTime（锁等待时间）、Frows（PolarDB-X 2.0计算节点的拉取行数）、Scnt（PolarDB-X 2.0计算节点的DN请求数）、CpuTime（CPU执行时间）、PhysicalRead（物理读）。
- **SortMethod**：排序方式，取值DESC（降序）、ASC（升序）。默认为DESC。
- **TraceId**：PolarDB-X 2.0实例的跟踪ID。
- **MinRows**：最小更新行数。
- **MaxRows**：最大更新行数。
- **MinScnt**：PolarDB-X 2.0计算节点（CN）的DN最小请求数。
- **MaxScnt**：PolarDB-X 2.0计算节点（CN）的DN最大请求数。
- **TrxId**：事务ID。
- **Fail**：错误码。
- **SqlId**：SQL ID。
- **JobId**：对于开通企业版V0和V1的数据库实例，需要通过异步任务ID进一步查询返回结果。',
    ),
    'GetRedisAllSession' => 
    array (
      'summary' => '调用GetRedisAllSession接口，获取Redis实例当前会话数据。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。

',
            'type' => 'string',
            'required' => true,
            'example' => 'r-2zemyfd1sh1u2i****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回的消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '会话数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Timestamp' => 
                  array (
                    'description' => '获取数据库会话数据的时间，格式为Unix时间戳，单位为毫秒（ms）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1660100753556',
                  ),
                  'Total' => 
                  array (
                    'description' => '会话总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '2',
                  ),
                  'Sessions' => 
                  array (
                    'description' => '会话信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Sub' => 
                        array (
                          'description' => '频道订阅数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'Psub' => 
                        array (
                          'description' => '模式匹配的订阅数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'Idle' => 
                        array (
                          'description' => '空闲时长，单位为秒（s）。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '8',
                        ),
                        'Flags' => 
                        array (
                          'description' => '客户端标志，取值如下：

- **A**：尽快关闭连接。
- **b**：客户端正在等待阻塞事件。
- **c**：写入全部回复后将关闭连接。
- **d**：受监视的键已被修改，`EXEC`命令将失败。
- **i**：客户端正在等待虚拟机I/O操作（已废弃）。
- **M**：客户端是主节点。
- **N**：未设置特点标志。
- **O**：处于监视模式的客户端。
- **r**：客户端是只读模式的集群节点。
- **S**：客户端是一般模式下的从节点。
- **u**：客户端未被阻塞。
- **U**：通过Unix域套接字连接的客户端。
- **x**：客户端正在执行事务。








',
                          'type' => 'string',
                          'example' => 'N',
                        ),
                        'Oll' => 
                        array (
                          'description' => '输出列表包含的对象数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'QbufFree' => 
                        array (
                          'description' => '输入缓冲区剩余大小，单位为字节（Byte）。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'Multi' => 
                        array (
                          'description' => '`MULTI`/`EXEC`上下文中的命令数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '-1',
                        ),
                        'Omem' => 
                        array (
                          'description' => '输出缓冲区大小，单位为字节（Byte）。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'Qbuf' => 
                        array (
                          'description' => '输入缓冲区大小，单位为字节（Byte）。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'Name' => 
                        array (
                          'description' => '客户端名称。',
                          'type' => 'string',
                          'example' => 'test',
                        ),
                        'Obl' => 
                        array (
                          'description' => '输出固定缓冲区大小，单位为字节（Byte）。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'Client' => 
                        array (
                          'description' => '客户端的地址。',
                          'type' => 'string',
                          'example' => '172.16.XX.XX',
                        ),
                        'Cmd' => 
                        array (
                          'description' => '最近一次执行的命令。',
                          'type' => 'string',
                          'example' => 'PING',
                        ),
                        'Id' => 
                        array (
                          'description' => '客户端ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '9080586',
                        ),
                        'Addr' => 
                        array (
                          'description' => '客户端的地址和端口。',
                          'type' => 'string',
                          'example' => '172.16.XX.XX:53458',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点ID。',
                          'type' => 'string',
                          'example' => 'r-2zemyfd1sh1u2i****-proxy-14#1679****',
                        ),
                        'Age' => 
                        array (
                          'description' => '已连接时长，单位为秒（s）。',
                          'type' => 'string',
                          'example' => '12',
                        ),
                        'Db' => 
                        array (
                          'description' => '该客户端正在使用的数据库ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'Events' => 
                        array (
                          'description' => '文件描述符事件，取值为：

- **r**：客户端套接字在事件Loop中可读。
- **w**：客户端套接字在事件Loop中可写。',
                          'type' => 'string',
                          'example' => 'r',
                        ),
                        'Fd' => 
                        array (
                          'description' => '套接字所使用的文件描述符。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '73',
                        ),
                        'ClientDesc' => 
                        array (
                          'description' => '客户端别名。',
                          'type' => 'string',
                          'example' => 'prod ip',
                        ),
                      ),
                    ),
                  ),
                  'SourceStats' => 
                  array (
                    'description' => '访问来源统计数据。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Key' => 
                        array (
                          'description' => '访问来源。',
                          'type' => 'string',
                          'example' => '172.16.XX.XX',
                        ),
                        'Count' => 
                        array (
                          'description' => '该访问来源的会话总数。',
                          'type' => 'string',
                          'example' => '1',
                        ),
                        'Ids' => 
                        array (
                          'description' => '客户端ID数据。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '客户端ID。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '9080586',
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '40C6E9AF-6C23-5614-AA83-34344CC6****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Timestamp\\": 1660100753556,\\n    \\"Total\\": 2,\\n    \\"Sessions\\": [\\n      {\\n        \\"Sub\\": 0,\\n        \\"Psub\\": 0,\\n        \\"Idle\\": 8,\\n        \\"Flags\\": \\"N\\",\\n        \\"Oll\\": 0,\\n        \\"QbufFree\\": 0,\\n        \\"Multi\\": -1,\\n        \\"Omem\\": 0,\\n        \\"Qbuf\\": 0,\\n        \\"Name\\": \\"test\\",\\n        \\"Obl\\": 0,\\n        \\"Client\\": \\"172.16.XX.XX\\",\\n        \\"Cmd\\": \\"PING\\",\\n        \\"Id\\": 9080586,\\n        \\"Addr\\": \\"172.16.XX.XX:53458\\",\\n        \\"NodeId\\": \\"r-2zemyfd1sh1u2i****-proxy-14#1679****\\",\\n        \\"Age\\": \\"12\\",\\n        \\"Db\\": 0,\\n        \\"Events\\": \\"r\\",\\n        \\"Fd\\": 73,\\n        \\"ClientDesc\\": \\"prod ip\\"\\n      }\\n    ],\\n    \\"SourceStats\\": [\\n      {\\n        \\"Key\\": \\"172.16.XX.XX\\",\\n        \\"Count\\": \\"1\\",\\n        \\"Ids\\": [\\n          9080586\\n        ]\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"40C6E9AF-6C23-5614-AA83-34344CC6****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetRedisAllSessionResponse>\\n    <Message>Successful</Message>\\n    <RequestId>40C6E9AF-6C23-5614-AA83-34344CC6****</RequestId>\\n    <Data>\\n        <SourceStats>\\n            <Ids>5</Ids>\\n            <Count>1</Count>\\n            <Key>11.200.XX.XX</Key>\\n        </SourceStats>\\n        <SourceStats>\\n            <Ids>106909499</Ids>\\n            <Count>1</Count>\\n            <Key>127.0.XX.XX</Key>\\n        </SourceStats>\\n        <Total>2</Total>\\n        <Sessions>\\n            <Sub>0</Sub>\\n            <Omem>0</Omem>\\n            <Qbuf>0</Qbuf>\\n            <Multi>-1</Multi>\\n            <Flags>N</Flags>\\n            <Oll>0</Oll>\\n            <Addr>127.0.XX.XX:44019</Addr>\\n            <Name/>\\n            <Events>r</Events>\\n            <Psub>0</Psub>\\n            <Idle>1</Idle>\\n            <Obl>0</Obl>\\n            <Cmd>config</Cmd>\\n            <Id>106909499</Id>\\n            <Client>127.0.XX.XX</Client>\\n            <Age>6101538</Age>\\n            <Db>0</Db>\\n            <Fd>6</Fd>\\n        </Sessions>\\n        <Sessions>\\n            <Sub>0</Sub>\\n            <Omem>0</Omem>\\n            <Qbuf>0</Qbuf>\\n            <Multi>-1</Multi>\\n            <Flags>S</Flags>\\n            <Oll>0</Oll>\\n            <Addr>127.0.XX.XX:44019</Addr>\\n            <Name/>\\n            <Events>r</Events>\\n            <Psub>0</Psub>\\n            <Idle>1</Idle>\\n            <Obl>0</Obl>\\n            <Cmd>replconf</Cmd>\\n            <Id>5</Id>\\n            <Client>11.200.XX.XX</Client>\\n            <Age>67387263</Age>\\n            <Db>0</Db>\\n            <Fd>10</Fd>\\n        </Sessions>\\n        <Timestamp>1663912392217</Timestamp>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetRedisAllSessionResponse>","errorExample":""}]',
      'title' => '获取Redis实例当前会话',
      'description' => '
- 本接口只适用于Redis引擎。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。

> 对于Redis集群版数据库实例，无法获取使用直连模式产生的会话。',
    ),
    'GetMongoDBCurrentOp' => 
    array (
      'summary' => '调用GetMongoDBCurrentOp接口，获取MongoDB实例当前会话。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'dds-uf6079bda570****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。

> 不提供节点ID时，默认获取Primary节点会话。',
            'type' => 'string',
            'required' => false,
            'example' => '23302531',
          ),
        ),
        2 => 
        array (
          'name' => 'Role',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '预留参数，可不传递。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        3 => 
        array (
          'name' => 'FilterDoc',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '采用`db.currentOp()`命令在获取会话时进行过滤，命令详情请参考MongoDB的[db.currentOp()](https://docs.mongodb.com/manual/reference/method/db.currentOp/)命令。',
            'type' => 'string',
            'required' => false,
            'example' => '{ "active" : true }',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Timestamp' => 
                  array (
                    'description' => '获取数据库会话数据的时间，格式为Unix时间戳，单位为毫秒（ms）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1692029584428',
                  ),
                  'SessionList' => 
                  array (
                    'description' => '会话列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '会话。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'OpId' => 
                        array (
                          'description' => '操作ID。',
                          'type' => 'string',
                          'example' => '14508',
                        ),
                        'Active' => 
                        array (
                          'description' => '是否是活跃的操作：

- **true**：是。

- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'Command' => 
                        array (
                          'description' => '包含与此操作关联的完整命令对象的文档。',
                          'type' => 'string',
                          'example' => '"command" : {
  "find" : "items",
  "filter" : {
    "sku" : 1403978
  },
  ...
  "$db" : "test"
}',
                        ),
                        'Op' => 
                        array (
                          'description' => '操作类型。',
                          'type' => 'string',
                          'example' => 'update',
                        ),
                        'SecsRunning' => 
                        array (
                          'description' => '操作持续时间，单位为秒（s）。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '5',
                        ),
                        'PlanSummary' => 
                        array (
                          'description' => '执行计划描述。',
                          'type' => 'string',
                          'example' => 'None',
                        ),
                        'Host' => 
                        array (
                          'description' => '主机。',
                          'type' => 'string',
                          'example' => 'a79****.cloud.et15:3328',
                        ),
                        'Client' => 
                        array (
                          'description' => '客户端的地址。',
                          'type' => 'string',
                          'example' => '219.143.XX.XX:52324',
                        ),
                        'Desc' => 
                        array (
                          'description' => '连接描述。',
                          'type' => 'string',
                          'example' => 'conn1013858',
                        ),
                        'Ns' => 
                        array (
                          'description' => '命名空间。',
                          'type' => 'string',
                          'example' => 'admin.cmd',
                        ),
                        'ConnectionId' => 
                        array (
                          'description' => '连接ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '66378736',
                        ),
                        'Driver' => 
                        array (
                          'description' => 'MongoDB驱动。',
                          'type' => 'string',
                          'example' => 'mongo-java-driver|legacy@3.11.2',
                        ),
                        'OsType' => 
                        array (
                          'description' => '系统类型。',
                          'type' => 'string',
                          'example' => 'Linux',
                        ),
                        'OsName' => 
                        array (
                          'description' => '系统名。',
                          'type' => 'string',
                          'example' => 'Linux',
                        ),
                        'OsArch' => 
                        array (
                          'description' => '系统架构。',
                          'type' => 'string',
                          'example' => 'AMD64',
                        ),
                        'Platform' => 
                        array (
                          'description' => '平台。',
                          'type' => 'string',
                          'example' => 'Java/Alibaba/1.8.0_152-b5',
                        ),
                        'KillPending' => 
                        array (
                          'description' => '该操作是否被标记为终止：

- **true**：是。

- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'Shard' => 
                        array (
                          'description' => '分片节点ID。

> 分片集群实例时返回该参数。',
                          'type' => 'string',
                          'example' => 'd-bp1689995b78****',
                        ),
                      ),
                    ),
                  ),
                  'SessionStat' => 
                  array (
                    'description' => '会话统计数据。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'ActiveCount' => 
                      array (
                        'description' => '活跃会话数。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '0',
                      ),
                      'TotalCount' => 
                      array (
                        'description' => '会话总数。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '11',
                      ),
                      'LongestSecsRunning' => 
                      array (
                        'description' => '会话执行最长耗时，单位为秒（s）。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '0',
                      ),
                      'ClientStats' => 
                      array (
                        'description' => '客户端地址的统计数据。',
                        'type' => 'object',
                        'additionalProperties' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ActiveCount' => 
                            array (
                              'type' => 'integer',
                              'format' => 'int64',
                              'description' => '活跃数。',
                              'example' => '0',
                            ),
                            'TotalCount' => 
                            array (
                              'type' => 'integer',
                              'format' => 'int64',
                              'description' => '总数。',
                              'example' => '11',
                            ),
                          ),
                          'description' => '客户端地址维度。',
                        ),
                      ),
                      'DbStats' => 
                      array (
                        'description' => '命名空间统计数据。',
                        'type' => 'object',
                        'additionalProperties' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ActiveCount' => 
                            array (
                              'type' => 'integer',
                              'format' => 'int64',
                              'description' => '活跃数。',
                              'example' => '0',
                            ),
                            'TotalCount' => 
                            array (
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '11',
                              'description' => '总数。',
                            ),
                          ),
                          'description' => '命名空间维度。',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'FC6C0929-29E1-59FD-8DFE-70D9D41E****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Timestamp\\": 1692029584428,\\n    \\"SessionList\\": [\\n      {\\n        \\"OpId\\": \\"14508\\",\\n        \\"Active\\": true,\\n        \\"Command\\": \\"\\\\\\"command\\\\\\" : {\\\\n  \\\\\\"find\\\\\\" : \\\\\\"items\\\\\\",\\\\n  \\\\\\"filter\\\\\\" : {\\\\n    \\\\\\"sku\\\\\\" : 1403978\\\\n  },\\\\n  ...\\\\n  \\\\\\"$db\\\\\\" : \\\\\\"test\\\\\\"\\\\n}\\",\\n        \\"Op\\": \\"update\\",\\n        \\"SecsRunning\\": 5,\\n        \\"PlanSummary\\": \\"None\\",\\n        \\"Host\\": \\"a79****.cloud.et15:3328\\",\\n        \\"Client\\": \\"219.143.XX.XX:52324\\",\\n        \\"Desc\\": \\"conn1013858\\",\\n        \\"Ns\\": \\"admin.cmd\\",\\n        \\"ConnectionId\\": 66378736,\\n        \\"Driver\\": \\"mongo-java-driver|legacy@3.11.2\\",\\n        \\"OsType\\": \\"Linux\\",\\n        \\"OsName\\": \\"Linux\\",\\n        \\"OsArch\\": \\"AMD64\\",\\n        \\"Platform\\": \\"Java/Alibaba/1.8.0_152-b5\\",\\n        \\"KillPending\\": true,\\n        \\"Shard\\": \\"d-bp1689995b78****\\"\\n      }\\n    ],\\n    \\"SessionStat\\": {\\n      \\"ActiveCount\\": 0,\\n      \\"TotalCount\\": 11,\\n      \\"LongestSecsRunning\\": 0,\\n      \\"ClientStats\\": {\\n        \\"key\\": {\\n          \\"ActiveCount\\": 0,\\n          \\"TotalCount\\": 11\\n        }\\n      },\\n      \\"DbStats\\": {\\n        \\"key\\": {\\n          \\"ActiveCount\\": 0,\\n          \\"TotalCount\\": 11\\n        }\\n      }\\n    }\\n  },\\n  \\"RequestId\\": \\"FC6C0929-29E1-59FD-8DFE-70D9D41E****\\",\\n  \\"Success\\": true\\n}","type":"json"}]',
      'title' => '获取MongoDB实例当前会话',
      'description' => '- 本接口只适用于MongoDB实例。
- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
      'responseParamsDescription' => '可参考MongoDB命令currentOp返回数据。',
    ),
    'KillInstanceAllSession' => 
    array (
      'summary' => '调用KillInstanceAllSession接口，结束指定实例上的全部会话。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'r-8vbcyr4sw0c4yc****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '备用参数。',
                'type' => 'string',
                'example' => 'None',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"None\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<KillInstanceAllSessionResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</KillInstanceAllSessionResponse>","errorExample":""}]',
      'title' => '结束全部会话',
      'description' => '- 本接口只适用于Redis引擎。
- 在使用阿里云SDK时，需要保证aliyun-sdk-core的版本大于4.3.3，建议使用最新版本。
- 使用DAS的SDK的版本为1.0.2或以上。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'CreateKillInstanceSessionTask' => 
    array (
      'summary' => '调用CreateKillInstanceSessionTask接口，创建结束会话的任务。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于PolarDB MySQL版实例，需要提供节点ID。如果没有提供节点ID，并且请求参数**KillAllSessions**配置为**true**（即结束全部会话），将会遍历PolarDB MySQL版实例所有节点，并结束每个节点上正在进行的会话。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-bp1v203xzzh0a****',
          ),
        ),
        2 => 
        array (
          'name' => 'DbUser',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '具有结束会话权限的数据库账号。',
            'type' => 'string',
            'required' => true,
            'example' => 'testUser',
          ),
        ),
        3 => 
        array (
          'name' => 'DbUserPassword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库账号密码。',
            'type' => 'string',
            'required' => true,
            'example' => 'testPassword',
          ),
        ),
        4 => 
        array (
          'name' => 'IgnoredUsers',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '忽略账号列表，该列表中账号的会话不会被结束。

> 数据格式为JSONArray字符串，例如\\[\'数据库账号1\',\'数据库账号2\'\\]，数据库账号间用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => '[\'db_user1\',\'db_user2\']',
          ),
        ),
        5 => 
        array (
          'name' => 'KillAllSessions',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否结束全部会话。

- **true**：是。

- **false**：否。

> 该参数取值为**true**时，请求参数**IgnoredUsers**中账号的会话、阿里云内部运维账号的会话和**Binlog Dump**会话都不会被结束。',
            'type' => 'boolean',
            'required' => true,
            'example' => 'true',
          ),
        ),
        6 => 
        array (
          'name' => 'SessionIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要被结束的会话ID列表。

> 数据格式为JSONArray，例如\\[会话ID1,会话ID2\\]，会话ID间用英文逗号（,）分隔。如果请求参数**KillAllSessions**取值为**true**（即结束全部会话），该列表会被忽略。',
            'type' => 'string',
            'required' => false,
            'example' => '[10805639,10805623,10805645,10805553,10805566,10805616]',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '结束会话的任务ID。

> PolarDB MySQL版实例调用该API接口，请求参数**NodeId**为空（即未指定节点ID），并且请求参数**KillAllSessions**配置为**true**（即结束全部会话）时，会按照节点数量返回任务ID列表，例如\\["f77d535b45405bd462b21caa3ee8\\*\\*\\*\\*", "e93ab549abb081eb5dcd5396a29b\\*\\*\\*\\*"\\]',
                'type' => 'string',
                'example' => 'f77d535b45405bd462b21caa3ee8****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"f77d535b45405bd462b21caa3ee8****\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<CreateKillInstanceSessionTaskResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>f77d535b45405bd462b21caa3ee8****</Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</CreateKillInstanceSessionTaskResponse>","errorExample":""}]',
      'title' => '创建结束会话的任务',
      'description' => '- 本接口只适用于RDS MySQL和PolarDB MySQL版实例。

- 使用阿里云或DAS的SDK时，建议使用最新版本。

- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetKillInstanceSessionTaskResult' => 
    array (
      'summary' => '调用GetKillInstanceSessionTaskResult接口，获取结束会话任务的结果。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于PolarDB MySQL版实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-8vbkfj5a756um****',
          ),
        ),
        2 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '<props="china">任务ID，调用[CreateKillInstanceSessionTask](~~609246~~)接口时返回的任务ID。</props>

<props="intl">任务ID，调用[CreateKillInstanceSessionTask](~~609246~~)接口时返回的任务ID。</props>
',
            'type' => 'string',
            'required' => true,
            'example' => 'f77d535b45405bd462b21caa3ee8****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'TaskId' => 
                  array (
                    'description' => '任务ID。',
                    'type' => 'string',
                    'example' => 'f77d535b45405bd462b21caa3ee8****',
                  ),
                  'UserId' => 
                  array (
                    'description' => '阿里云主账号ID。',
                    'type' => 'string',
                    'example' => '164882191396****',
                  ),
                  'InstanceId' => 
                  array (
                    'description' => '实例ID。',
                    'type' => 'string',
                    'example' => 'rm-2ze1jdv45i7l6****',
                  ),
                  'NodeId' => 
                  array (
                    'description' => '节点ID。

> PolarDB MySQL版实例的结束会话任务才会返回该数据。',
                    'type' => 'string',
                    'example' => 'pi-bp1h12rv501cv****',
                  ),
                  'TaskState' => 
                  array (
                    'description' => '结束会话任务的状态：

- **RUNNING**：正在运行。
- **SUCCESS**：成功。
- **FAILURE**：失败。
- **ERROR**：其他错误。',
                    'type' => 'string',
                    'example' => 'SUCCESS',
                  ),
                  'Sessions' => 
                  array (
                    'description' => '需要结束的会话ID列表。

> 结束全部会话时，实例或节点上的所有会话ID列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '会话ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '[
152,
112,
106,
146,
8357323,
5697053,
8357518,
8357519,
14964383
]',
                    ),
                  ),
                  'KillSuccessCount' => 
                  array (
                    'description' => '结束成功的会话数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '100',
                  ),
                  'KillFailCount' => 
                  array (
                    'description' => '结束失败的会话数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '0',
                  ),
                  'IgnoredUserSessionCount' => 
                  array (
                    'description' => '指定的不会被结束的会话数量，包含忽略列表中账号的会话、阿里云内部运维账号的会话和**Binlog Dump**会话。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '9',
                  ),
                  'Result' => 
                  array (
                    'description' => '结束会话的详情列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '结束会话的详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Id' => 
                        array (
                          'description' => '会话ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '8357518',
                        ),
                        'User' => 
                        array (
                          'description' => '数据库账号。',
                          'type' => 'string',
                          'example' => 'testUser',
                        ),
                        'Host' => 
                        array (
                          'description' => '发起该会话主机的IP地址和端口。',
                          'type' => 'string',
                          'example' => '100.104.XX.XX:23428',
                        ),
                        'Db' => 
                        array (
                          'description' => '数据库名。',
                          'type' => 'string',
                          'example' => 'dbTest',
                        ),
                        'Command' => 
                        array (
                          'description' => '会话执行的命令类型。',
                          'type' => 'string',
                          'example' => 'Sleep',
                        ),
                        'Time' => 
                        array (
                          'description' => '执行时间，单位为秒（s）。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1',
                        ),
                        'State' => 
                        array (
                          'description' => '会话状态。',
                          'type' => 'string',
                          'example' => 'Sending data',
                        ),
                        'Info' => 
                        array (
                          'description' => '会话执行的SQL语句。',
                          'type' => 'string',
                          'example' => 'SELECT sleep(60)',
                        ),
                        'Active' => 
                        array (
                          'description' => '是否是活跃会话。

> 活跃会话判断逻辑： 命令是Query或者Execute，以及未结束事务中的会话。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'TaskId' => 
                        array (
                          'description' => '结束该会话的子任务ID。',
                          'type' => 'string',
                          'example' => 'task_d9e94107-6116-4ac3-b874-81466aff****',
                        ),
                        'Reason' => 
                        array (
                          'description' => '结束该会话时的结果描述。
- **SESSION_KILLED**：结束会话成功。
- **SESSION_EXPIRED**：会话已过期。
- **SESSION\\_NO\\_PERMISSION**：用于结束会话的账号权限不足。
- **SESSION\\_ACCOUNT\\_ERROR**：用于结束会话的账号或密码错误。
- **SESSION\\_IGNORED\\_USER**：不需要结束的账号的会话。
- **SESSION\\_INTERNAL\\_USER\\_OR\\_COMMAND**：阿里云运维账号的会话或者命令。
- **SESSION\\_KILL\\_TASK\\_TIMEOUT**：结束会话超时。
- **SESSION\\_OTHER\\_ERROR**：其他错误。',
                          'type' => 'string',
                          'example' => 'SESSION_KILLED',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"TaskId\\": \\"f77d535b45405bd462b21caa3ee8****\\",\\n    \\"UserId\\": \\"164882191396****\\",\\n    \\"InstanceId\\": \\"rm-2ze1jdv45i7l6****\\",\\n    \\"NodeId\\": \\"pi-bp1h12rv501cv****\\",\\n    \\"TaskState\\": \\"SUCCESS\\",\\n    \\"Sessions\\": [\\n      0\\n    ],\\n    \\"KillSuccessCount\\": 100,\\n    \\"KillFailCount\\": 0,\\n    \\"IgnoredUserSessionCount\\": 9,\\n    \\"Result\\": [\\n      {\\n        \\"Id\\": 8357518,\\n        \\"User\\": \\"testUser\\",\\n        \\"Host\\": \\"100.104.XX.XX:23428\\",\\n        \\"Db\\": \\"dbTest\\",\\n        \\"Command\\": \\"Sleep\\",\\n        \\"Time\\": 1,\\n        \\"State\\": \\"Sending data\\",\\n        \\"Info\\": \\"SELECT sleep(60)\\",\\n        \\"Active\\": true,\\n        \\"TaskId\\": \\"task_d9e94107-6116-4ac3-b874-81466aff****\\",\\n        \\"Reason\\": \\"SESSION_KILLED\\"\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetKillInstanceSessionTaskResultResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <TaskId>f77d535b45405bd462b21caa3ee8****</TaskId>\\n        <UserId>164882191396****</UserId>\\n        <InstanceId>rm-2ze1jdv45i7l6****</InstanceId>\\n        <TaskState>SUCCESS</TaskState>\\n        <KillSuccessCount>100</KillSuccessCount>\\n        <KillFailCount>0</KillFailCount>\\n        <IgnoredUserSessionCount>9</IgnoredUserSessionCount>\\n        <Result>\\n            <Id>8357518</Id>\\n            <User>testUser</User>\\n            <Host>100.104.XX.XX:23428</Host>\\n            <Db>dbTest</Db>\\n            <Command>Sleep</Command>\\n            <Time>1</Time>\\n            <State>Sending data</State>\\n            <Info>SELECT sleep(60)</Info>\\n            <Active>true</Active>\\n            <TaskId>task_d9e94107-6116-4ac3-b874-81466aff****</TaskId>\\n            <Reason>SESSION_KILLED</Reason>\\n        </Result>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetKillInstanceSessionTaskResultResponse>","errorExample":""}]',
      'title' => '获取结束会话任务的结果',
      'description' => '- 本接口只适用于RDS MySQL和PolarDB MySQL版实例。

- 使用阿里云或DAS的SDK时，建议使用最新版本。

- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetMySQLAllSessionAsync' => 
    array (
      'summary' => '调用GetMySQLAllSessionAsync接口，采用异步方式获取实例当前会话数据，并按照不同维度统计会话信息。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。
>仅支持RDS MySQL、PolarDB MySQL版和PolarDB-X 2.0实例。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****
',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于PolarDB MySQL版实例，需要提供节点ID。不指定节点ID时，默认返回主节点的会话数据。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-wz954ryd8f893****',
          ),
        ),
        2 => 
        array (
          'name' => 'ResultId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '异步请求的ID。
> 异步调用方式不会立即返回完整结果，首先需要调用该接口获取**ResultId**，然后使用返回数据的**ResultId**，重新发起调用，直到**isFinish**取值为**true**时，返回完整结果。即获取一次完整数据，至少需要调用该接口两次。',
            'type' => 'string',
            'required' => false,
            'example' => 'async__507044db6c4eadfa2dab9b084e80****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Fail' => 
                  array (
                    'description' => '请求是否失败：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'SessionData' => 
                  array (
                    'description' => '会话数据。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'TotalSessionCount' => 
                      array (
                        'description' => '会话总数。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '988',
                      ),
                      'ActiveSessionCount' => 
                      array (
                        'description' => '运行中会话总数。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '10',
                      ),
                      'MaxActiveTime' => 
                      array (
                        'description' => '运行中会话执行的最长时间，单位为秒（s）。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '6',
                      ),
                      'SessionList' => 
                      array (
                        'description' => '会话列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '会话。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'SessionId' => 
                            array (
                              'description' => '会话ID。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '14521783',
                            ),
                            'User' => 
                            array (
                              'description' => '数据库用户名。',
                              'type' => 'string',
                              'example' => 'testUser',
                            ),
                            'Client' => 
                            array (
                              'description' => '客户端IP地址。',
                              'type' => 'string',
                              'example' => '47.100.XX.XX',
                            ),
                            'DbName' => 
                            array (
                              'description' => '数据库名。',
                              'type' => 'string',
                              'example' => 'dbTest',
                            ),
                            'Command' => 
                            array (
                              'description' => '会话执行的命令类型。',
                              'type' => 'string',
                              'example' => 'Query',
                            ),
                            'Time' => 
                            array (
                              'description' => '会话执行时间，单位为秒（s）。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '6',
                            ),
                            'State' => 
                            array (
                              'description' => '会话状态。',
                              'type' => 'string',
                              'example' => 'starting',
                            ),
                            'SqlText' => 
                            array (
                              'description' => '会话执行的SQL语句。',
                              'type' => 'string',
                              'example' => 'INSERT INTO ...',
                            ),
                            'UserClientAlias' => 
                            array (
                              'description' => '客户端IP别名。',
                              'type' => 'string',
                              'example' => 'master-shanghai',
                            ),
                            'TrxId' => 
                            array (
                              'description' => '会话所在事务ID。',
                              'type' => 'string',
                              'example' => '754300775132',
                            ),
                            'TrxDuration' => 
                            array (
                              'description' => '事务持续时间，单位为秒（s）。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '6',
                            ),
                            'SqlTemplateId' => 
                            array (
                              'description' => 'SQL模板ID。

> 仅PolarDB-X 2.0实例返回该字段。',
                              'type' => 'string',
                              'example' => 'a7cac1a9',
                            ),
                          ),
                        ),
                      ),
                      'UserStats' => 
                      array (
                        'description' => '按数据库账号统计会话。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Key' => 
                            array (
                              'description' => '数据库账号名。',
                              'type' => 'string',
                              'example' => 'testUser',
                            ),
                            'TotalCount' => 
                            array (
                              'description' => '该账号会话总数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '2',
                            ),
                            'ActiveCount' => 
                            array (
                              'description' => '该账号活跃会话数。

> 活跃会话判断逻辑： 命令是Query或者Execute，以及未结束事务中的会话。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1',
                            ),
                            'ThreadIdList' => 
                            array (
                              'description' => '该账号对应的会话ID列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '会话ID列表。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '[14525727,14526269]',
                              ),
                            ),
                            'UserList' => 
                            array (
                              'description' => '会话对应的账号列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '数据库账号。',
                                'type' => 'string',
                                'example' => '[\'testUser\']',
                              ),
                            ),
                          ),
                        ),
                      ),
                      'ClientStats' => 
                      array (
                        'description' => '按客户端IP统计会话。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Key' => 
                            array (
                              'description' => '客户端IP地址。',
                              'type' => 'string',
                              'example' => '47.100.XX.XX',
                            ),
                            'TotalCount' => 
                            array (
                              'description' => '该客户端IP地址下的会话总数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '2',
                            ),
                            'ActiveCount' => 
                            array (
                              'description' => '该客户端IP地址下的活跃会话数。

> 活跃会话判断逻辑： 命令是Query或者Execute，以及未结束事务中的会话。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1',
                            ),
                            'ThreadIdList' => 
                            array (
                              'description' => '该客户端IP对应的会话ID列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '会话ID列表。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '[14526018,14525956]',
                              ),
                            ),
                            'UserList' => 
                            array (
                              'description' => '会话对应的账号列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '数据库账号。',
                                'type' => 'string',
                                'example' => '[\'testUser\']',
                              ),
                            ),
                          ),
                        ),
                      ),
                      'DbStats' => 
                      array (
                        'description' => '按数据库统计会话。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Key' => 
                            array (
                              'description' => '数据库名。',
                              'type' => 'string',
                              'example' => 'dbTest',
                            ),
                            'TotalCount' => 
                            array (
                              'description' => '该数据库会话总数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '2',
                            ),
                            'ActiveCount' => 
                            array (
                              'description' => '该数据库活跃会话数。

> 活跃会话判断逻辑： 命令是Query或者Execute，以及未结束事务中的会话。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1',
                            ),
                            'ThreadIdList' => 
                            array (
                              'description' => '该数据库名对应的会话ID列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '会话ID列表。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '[14525727,14526269]',
                              ),
                            ),
                            'UserList' => 
                            array (
                              'description' => '会话对应的账号列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '数据库账号。',
                                'type' => 'string',
                                'example' => '[\'testUser\']',
                              ),
                            ),
                          ),
                        ),
                      ),
                      'TimeStamp' => 
                      array (
                        'description' => '获取会话的时间，格式为Unix时间戳，单位为毫秒。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1659581514000020',
                      ),
                    ),
                  ),
                  'ResultId' => 
                  array (
                    'description' => '异步请求ID。',
                    'type' => 'string',
                    'example' => 'async__507044db6c4eadfa2dab9b084e80****',
                  ),
                  'IsFinish' => 
                  array (
                    'description' => '异步请求是否执行完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'State' => 
                  array (
                    'description' => '异步请求的执行状态：

- **RUNNING**：正在运行。

- **SUCCESS**：成功。

- **FAIL**：失败。',
                    'type' => 'string',
                    'example' => 'SUCCESS',
                  ),
                  'Complete' => 
                  array (
                    'description' => '异步请求是否执行完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'Timestamp' => 
                  array (
                    'description' => '执行时间，格式为Unix时间戳，单位为毫秒（ms）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1660100753556',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Fail\\": false,\\n    \\"SessionData\\": {\\n      \\"TotalSessionCount\\": 988,\\n      \\"ActiveSessionCount\\": 10,\\n      \\"MaxActiveTime\\": 6,\\n      \\"SessionList\\": [\\n        {\\n          \\"SessionId\\": 14521783,\\n          \\"User\\": \\"testUser\\",\\n          \\"Client\\": \\"47.100.XX.XX\\",\\n          \\"DbName\\": \\"dbTest\\",\\n          \\"Command\\": \\"Query\\",\\n          \\"Time\\": 6,\\n          \\"State\\": \\"starting\\",\\n          \\"SqlText\\": \\"INSERT INTO ...\\",\\n          \\"UserClientAlias\\": \\"master-shanghai\\",\\n          \\"TrxId\\": \\"754300775132\\",\\n          \\"TrxDuration\\": 6,\\n          \\"SqlTemplateId\\": \\"a7cac1a9\\"\\n        }\\n      ],\\n      \\"UserStats\\": [\\n        {\\n          \\"Key\\": \\"testUser\\",\\n          \\"TotalCount\\": 2,\\n          \\"ActiveCount\\": 1,\\n          \\"ThreadIdList\\": [\\n            0\\n          ],\\n          \\"UserList\\": [\\n            \\"[\'testUser\']\\"\\n          ]\\n        }\\n      ],\\n      \\"ClientStats\\": [\\n        {\\n          \\"Key\\": \\"47.100.XX.XX\\",\\n          \\"TotalCount\\": 2,\\n          \\"ActiveCount\\": 1,\\n          \\"ThreadIdList\\": [\\n            0\\n          ],\\n          \\"UserList\\": [\\n            \\"[\'testUser\']\\"\\n          ]\\n        }\\n      ],\\n      \\"DbStats\\": [\\n        {\\n          \\"Key\\": \\"dbTest\\",\\n          \\"TotalCount\\": 2,\\n          \\"ActiveCount\\": 1,\\n          \\"ThreadIdList\\": [\\n            0\\n          ],\\n          \\"UserList\\": [\\n            \\"[\'testUser\']\\"\\n          ]\\n        }\\n      ],\\n      \\"TimeStamp\\": 1659581514000020\\n    },\\n    \\"ResultId\\": \\"async__507044db6c4eadfa2dab9b084e80****\\",\\n    \\"IsFinish\\": true,\\n    \\"State\\": \\"SUCCESS\\",\\n    \\"Complete\\": true,\\n    \\"Timestamp\\": 1660100753556\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetMySQLAllSessionAsyncResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Fail>false</Fail>\\n        <SessionData>\\n            <TotalSessionCount>988</TotalSessionCount>\\n            <ActiveSessionCount>10</ActiveSessionCount>\\n            <MaxActiveTime>6</MaxActiveTime>\\n            <SessionList>\\n                <SessionId>14521783</SessionId>\\n                <User>testUser</User>\\n                <Client>47.100.XX.XX</Client>\\n                <DbName>dbTest</DbName>\\n                <Command>Query</Command>\\n                <Time>6</Time>\\n                <State>starting</State>\\n                <SqlText>INSERT INTO ...</SqlText>\\n                <UserClientAlias>master-shanghai</UserClientAlias>\\n                <TrxId>754300775132</TrxId>\\n                <TrxDuration>6</TrxDuration>\\n            </SessionList>\\n            <UserStats>\\n                <Key>testUser</Key>\\n                <TotalCount>984</TotalCount>\\n                <ActiveCount>11</ActiveCount>\\n                <UserList>[\'testUser\']</UserList>\\n            </UserStats>\\n            <ClientStats>\\n                <Key>47.100.XX.XX</Key>\\n                <TotalCount>50</TotalCount>\\n                <ActiveCount>3</ActiveCount>\\n                <UserList>[\'testUser\']</UserList>\\n            </ClientStats>\\n            <DbStats>\\n                <Key>dbTest</Key>\\n                <TotalCount>60</TotalCount>\\n                <ActiveCount>5</ActiveCount>\\n                <UserList>[\'testUser\']</UserList>\\n            </DbStats>\\n            <TimeStamp>1659581514000020</TimeStamp>\\n        </SessionData>\\n        <ResultId>async__507044db6c4eadfa2dab9b084e80****</ResultId>\\n        <IsFinish>true</IsFinish>\\n        <State>SUCCESS</State>\\n        <Complete>true</Complete>\\n        <Timestamp>1660100753556</Timestamp>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetMySQLAllSessionAsyncResponse>","errorExample":""}]',
      'title' => '获取实例当前会话',
      'description' => '> 异步调用方式不会立即返回完整结果，首先需要调用该接口获取ResultId，然后使用返回数据的ResultId，重新发起调用，直到**isFinish**取值为**true**时，返回完整结果。即获取一次完整数据，至少需要调用该接口两次。

- 本接口只适用于RDS MySQL，PolarDB MySQL版和PolarDB-X 2.0实例。

- 使用阿里云或DAS的SDK时，建议使用最新版本。

- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'CreateStorageAnalysisTask' => 
    array (
      'summary' => '调用CreateStorageAnalysisTask接口，创建空间分析任务，获取数据库及表的空间使用数据。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'none',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。
对于MongoDB实例，通过该参数指定节点进行空间分析。调用[DescribeRoleZoneInfo](~~123802~~)接口，可以查询MongoDB实例各个节点的详细信息。

- 当传入目标节点的**InsName**（节点ID）时，例如`d-bp1872fa24d5****`，调用该接口分析其对应的Hidden节点。
- 当传入目标节点的`InsName#RoleId`时，例如`d-bp1872fa24d5****#299****5`，调用该接口分析指定的节点。

><notice>对于MongoDB副本集实例，不传入此参数时，调用该接口会默认分析唯一的Hidden节点。对于MongoDB分片集群实例，推荐传入此参数，指定目标节点。</notice>',
            'type' => 'string',
            'required' => false,
            'example' => 'd-bp1872fa24d5****',
          ),
        ),
        2 => 
        array (
          'name' => 'DbName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库名。传入该参数时，分析指定数据库的空间使用情况。',
            'type' => 'string',
            'required' => false,
            'example' => 'testdb01',
          ),
        ),
        3 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表名。传入该参数时，分析指定数据库中指定表的空间使用情况。传入该参数时，必须同时传入**DbName**，指定该表所属的数据库。',
            'type' => 'string',
            'required' => false,
            'example' => 'test_table',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'TaskId' => 
                  array (
                    'description' => '任务ID。',
                    'type' => 'string',
                    'example' => '910f83f4b96df0524ddc5749f61539f8',
                  ),
                  'CreateTaskSuccess' => 
                  array (
                    'description' => '创建任务是否成功：

- **true**：执行成功。
- **false**：执行失败。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'ErrorMessage' => 
                  array (
                    'description' => '创建任务失败时的错误提示。',
                    'type' => 'string',
                    'example' => 'unknown error',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"TaskId\\": \\"910f83f4b96df0524ddc5749f61539f8\\",\\n    \\"CreateTaskSuccess\\": false,\\n    \\"ErrorMessage\\": \\"unknown error\\"\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": true\\n}","type":"json"}]',
      'title' => '创建空间分析任务',
      'description' => '- 本接口仅适用于RDS MySQL、PolarDB MySQL版和MongoDB实例。
- 对于RDS MySQL和PolarDB MySQL版实例，本接口对应于旧版空间分析功能，该接口生成的任务无法在DAS控制台新版空间分析页面查看。如有需要查看任务及结果，请调用接口获取数据后自行保存。
- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetStorageAnalysisResult' => 
    array (
      'summary' => '调用GetStorageAnalysisResult接口，查询空间分析任务状态和分析结果。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'none',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '204031',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREhdm3TU4OK',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点ID。

> 预留参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        2 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务ID，调用[CreateStorageAnalysisTask](~~2639140~~)接口返回的任务ID。',
            'type' => 'string',
            'required' => true,
            'example' => '910f83f4b96df0524ddc5749f615****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'TaskId' => 
                  array (
                    'description' => '任务ID。',
                    'type' => 'string',
                    'example' => '910f83f4b96df0524ddc5749f615****',
                  ),
                  'TaskFinish' => 
                  array (
                    'description' => '任务是否结束：

- **true**：任务结束。
- **false**：任务未结束。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'TaskSuccess' => 
                  array (
                    'description' => '任务是否成功：
- **true**：执行成功。
- **false**：执行失败。

> 当任务结束时才返回该字段。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'TaskState' => 
                  array (
                    'description' => '空间分析任务的状态：

- **INIT**：初始化。
- **PENDING**：等待执行。
- **RECEIVED**：任务已选择。
- **RUNNING**：任务执行中。
- **RETRY**：重试任务。
- **SUCCESS**：任务成功。
- **FAILURE**：任务失败。',
                    'type' => 'string',
                    'example' => 'SUCCESS',
                  ),
                  'TaskProgress' => 
                  array (
                    'description' => '任务进度，取值为0~100的整数。

> 例如取值为100时，表示任务进度100%。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '100',
                  ),
                  'TotalDbCount' => 
                  array (
                    'description' => '空间分析任务需要分析的数据库数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '32',
                  ),
                  'AnalyzedDbCount' => 
                  array (
                    'description' => '已分析结束的数据库数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '2',
                  ),
                  'StorageAnalysisResult' => 
                  array (
                    'description' => '空间分析详情。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'TotalStorageSize' => 
                      array (
                        'description' => '实例总空间大小，单位为Byte。

> 当前仅支持RDS MySQL。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '214748364800',
                      ),
                      'TotalUsedStorageSize' => 
                      array (
                        'description' => '已使用的空间，单位为Byte。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '68345135104',
                      ),
                      'TotalFreeStorageSize' => 
                      array (
                        'description' => '剩余可用空间，单位为Byte。

> 当前仅支持RDS MySQL。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '146403229696',
                      ),
                      'DailyIncrement' => 
                      array (
                        'description' => '近一周空间日均增长量估算值，单位为Byte。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '0',
                      ),
                      'EstimateAvailableDays' => 
                      array (
                        'description' => '剩余空间可使用天数估算值。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '99',
                      ),
                      'AnalysisSuccess' => 
                      array (
                        'description' => '数据库和表空间分析是否成功。

- **true**：成功。
- **false**：失败。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'AnalysisErrorType' => 
                      array (
                        'description' => '数据库和表空间分析任务失败类型：
- **DB_OR_TABLE_NOT_EXIST**：指定的数据库或表不存在。
- **DB_NOT_EXIST**：指定的数据库不存在。',
                        'type' => 'string',
                        'example' => 'DB_NOT_EXIST',
                      ),
                      'NeedOptimizeItemList' => 
                      array (
                        'description' => '根据DAS默认规则生成的待优化项列表。用户也可根据自身业务情况忽略该列表中的内容，然后根据接口返回的其他基础数据自定义规则生成待优化项列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'DbName' => 
                            array (
                              'description' => '数据库名。',
                              'type' => 'string',
                              'example' => 'testdb01',
                            ),
                            'TableName' => 
                            array (
                              'description' => '表名。',
                              'type' => 'string',
                              'example' => 'test_table',
                            ),
                            'OptimizeItemName' => 
                            array (
                              'description' => '待优化项：
- **NEED_ANALYZE_TABLE**：`information_schema.tables`中该表空间统计数据和物理文件大小差值超过50 GB。仅适用于RDS MySQL和PolarDB MySQL版。
- **NEED_OPTIMIZE_TABLE**：表的碎片空间大于6 GB，并且碎片率大于30%。表的碎片率计算方式：
  - RDS MySQL和PolarDB MySQL版为：`DataFree/(DataSize+IndexSize+DataFree)`，本接口中即`DataFree/PhyTotalSize`。
  -  MongoDB为：`FragmentSize/PhyTotalSize`。
- **TABLE_ENGINE**：表使用的存储引擎不是InnoDB或者XEngine。仅适用于RDS MySQL和PolarDB MySQL版。
- **AUTO_INCREMENT_ID_BE_TO_RUN_OUT**：表自增ID使用率超过80%。仅适用于RDS MySQL和PolarDB MySQL版。
- **DUPLICATE_INDEX**：索引冗余或者重复。仅适用于RDS MySQL和PolarDB MySQL版。
- **TABLE_SIZE**：单表空间大于50 GB。仅适用于RDS MySQL和PolarDB MySQL版。
- **TABLE_ROWS_AND_AVG_ROW_LENGTH**：单表行数大于500万，且平均行长大于10 KB。仅适用于RDS MySQL和PolarDB MySQL版。
- **TOTAL_DATA_FREE**：实例可回收空间大于60 GB，且总碎片率大于5%。
- **STORAGE_USED_PERCENT**：实例空间使用率大于90%。',
                              'type' => 'string',
                              'example' => 'NEED_OPTIMIZE_TABLE',
                            ),
                            'OptimizeAdvice' => 
                            array (
                              'description' => '优化建议：
- **NEED_ANALYZE_TABLE**：如有需要可在业务低峰时期对相关的表执行`ANALYZE TABLE`。仅适用于RDS MySQL和PolarDB MySQL版。
- **NEED_OPTIMIZE_TABLE**：如有需要可在业务低峰时期进行表空间碎片回收。
- **CHANGE_TABLE_ENGINE_IF_NECESSARY**：如果有需要可以在评估风险后更改表的存储引擎类型。仅适用于RDS MySQL和PolarDB MySQL版。
- **AUTO_INCREMENT_ID_BE_TO_RUN_OUT**：注意自增ID使用情况。仅适用于RDS MySQL和PolarDB MySQL版。
- **DUPLICATE_INDEX**：建议优化精简表上的索引。仅适用于RDS MySQL和PolarDB MySQL版。
- **TABLE_SIZE**：注意表大小。仅适用于RDS MySQL和PolarDB MySQL版。
- **TABLE_ROWS_AND_AVG_ROW_LENGTH**：注意表行数以及平均行长。仅适用于RDS MySQL和PolarDB MySQL版。
- **STORAGE_USED_PERCENT**：注意空间使用情况，避免实例写满后锁定。',
                              'type' => 'string',
                              'example' => 'NEED_OPTIMIZE_TABLE',
                            ),
                            'AssociatedData' => 
                            array (
                              'description' => '待优化项关联数据，以JSON格式返回。',
                              'type' => 'string',
                              'example' => '{
    "autoIncrementCurrentValue": 2147483647,
    "autoIncrementRatio": 1,
    "dbName": "testdb01",
    "maximumValue": 2147483647,
    "columnName": "id",
    "tableName": "test_table"
}',
                            ),
                          ),
                        ),
                      ),
                      'TableStats' => 
                      array (
                        'description' => '表空间数据列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'DbName' => 
                            array (
                              'description' => '数据库名。',
                              'type' => 'string',
                              'example' => 'testdb01',
                            ),
                            'TableName' => 
                            array (
                              'description' => '表名。',
                              'type' => 'string',
                              'example' => 'test_table',
                            ),
                            'TableType' => 
                            array (
                              'description' => '表类型。

> 该参数适用于RDS MySQL和PolarDB MySQL版。',
                              'type' => 'string',
                              'example' => 'BASE TABLE',
                            ),
                            'Engine' => 
                            array (
                              'description' => '表使用的存储引擎类型。

> 该参数适用于RDS MySQL和PolarDB MySQL版。',
                              'type' => 'string',
                              'example' => 'InnoDB',
                            ),
                            'PhysicalFileSize' => 
                            array (
                              'description' => '表物理文件大小，单位为Byte。
> 该参数适用于RDS MySQL和PolarDB MySQL版。部分实例因部署形态的原因不支持获取该数据。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '3057655808',
                            ),
                            'PhyTotalSize' => 
                            array (
                              'description' => '表空间大小，单位为Byte。
> 对于RDS MySQL和PolarDB MySQL版，取值为**DataSize**、**IndexSize**、**DataFree**之和；对于MongoDB，取值为**DataSize**、**IndexSize**之和。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '3012493312',
                            ),
                            'TotalSize' => 
                            array (
                              'description' => '- 对于RDS MySQL和PolarDB MySQL版，该参数是表数据和索引占用空间大小，单位为Byte。取值为**DataSize**、**IndexSize**之和。

- 对于MongoDB，该参数是Block Manager实际分配的空间大小，单位为Byte。MongoDB实例压缩率计算方式为：`TotalSize/DataSize`。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '3005153280',
                            ),
                            'IndexSize' => 
                            array (
                              'description' => '索引占用的空间大小，单位为Byte。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1022296064',
                            ),
                            'DataSize' => 
                            array (
                              'description' => '- 对于RDS MySQL和PolarDB MySQL版，该参数是数据占用的空间大小，单位为Byte。
- 对于MongoDB，该参数是未压缩数据的大小，即数据量，单位为Byte。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1982857216',
                            ),
                            'DataFree' => 
                            array (
                              'description' => '碎片空间大小，单位为Byte。

> 该参数适用于RDS MySQL和PolarDB MySQL版。表碎片率计算方式一般为：`DataFree/(DataSize+IndexSize+DataFree)`，本接口中即`DataFree/PhyTotalSize`。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '7340032',
                            ),
                            'TableRows' => 
                            array (
                              'description' => '表行数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '12794732',
                            ),
                            'AvgRowLength' => 
                            array (
                              'description' => '平均行长，单位为Byte。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '154',
                            ),
                            'FragmentSize' => 
                            array (
                              'description' => '可回收空间大小（碎片空间大小），单位为Byte。

> 该参数仅适用于MongoDB实例。表碎片率计算方式为：`FragmentSize/PhyTotalSize`。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '362221568',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"TaskId\\": \\"910f83f4b96df0524ddc5749f615****\\",\\n    \\"TaskFinish\\": true,\\n    \\"TaskSuccess\\": true,\\n    \\"TaskState\\": \\"SUCCESS\\",\\n    \\"TaskProgress\\": 100,\\n    \\"TotalDbCount\\": 32,\\n    \\"AnalyzedDbCount\\": 2,\\n    \\"StorageAnalysisResult\\": {\\n      \\"TotalStorageSize\\": 214748364800,\\n      \\"TotalUsedStorageSize\\": 68345135104,\\n      \\"TotalFreeStorageSize\\": 146403229696,\\n      \\"DailyIncrement\\": 0,\\n      \\"EstimateAvailableDays\\": 99,\\n      \\"AnalysisSuccess\\": true,\\n      \\"AnalysisErrorType\\": \\"DB_NOT_EXIST\\",\\n      \\"NeedOptimizeItemList\\": [\\n        {\\n          \\"DbName\\": \\"testdb01\\",\\n          \\"TableName\\": \\"test_table\\",\\n          \\"OptimizeItemName\\": \\"NEED_OPTIMIZE_TABLE\\",\\n          \\"OptimizeAdvice\\": \\"NEED_OPTIMIZE_TABLE\\",\\n          \\"AssociatedData\\": \\"{\\\\n    \\\\\\"autoIncrementCurrentValue\\\\\\": 2147483647,\\\\n    \\\\\\"autoIncrementRatio\\\\\\": 1,\\\\n    \\\\\\"dbName\\\\\\": \\\\\\"testdb01\\\\\\",\\\\n    \\\\\\"maximumValue\\\\\\": 2147483647,\\\\n    \\\\\\"columnName\\\\\\": \\\\\\"id\\\\\\",\\\\n    \\\\\\"tableName\\\\\\": \\\\\\"test_table\\\\\\"\\\\n}\\"\\n        }\\n      ],\\n      \\"TableStats\\": [\\n        {\\n          \\"DbName\\": \\"testdb01\\",\\n          \\"TableName\\": \\"test_table\\",\\n          \\"TableType\\": \\"BASE TABLE\\",\\n          \\"Engine\\": \\"InnoDB\\",\\n          \\"PhysicalFileSize\\": 3057655808,\\n          \\"PhyTotalSize\\": 3012493312,\\n          \\"TotalSize\\": 3005153280,\\n          \\"IndexSize\\": 1022296064,\\n          \\"DataSize\\": 1982857216,\\n          \\"DataFree\\": 7340032,\\n          \\"TableRows\\": 12794732,\\n          \\"AvgRowLength\\": 154,\\n          \\"FragmentSize\\": 362221568\\n        }\\n      ]\\n    }\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": true\\n}","type":"json"}]',
      'title' => '获取空间分析任务的结果',
      'description' => '> 物理文件大小获取的是文件真实大小（需实例部署形态支持）；表级别其他数据基于`information_schema.tables`。由于MySQL中统计信息不是实时更新，所以可能和物理文件大小存在差异，如有需要获取最新数据，可在业务低峰时期对相关的表执行`ANALYZE TABLE`。

- 本接口只适用于RDS MySQL、PolarDB MySQL版和MongoDB实例。
- 对于RDS MySQL和PolarDB MySQL版实例，本接口对应于旧版空间分析功能，该接口生成的任务无法在DAS控制台新版空间分析页面查看。如有需要查看任务及结果，请调用接口后自行保存数据。
- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetAutoIncrementUsageStatistic' => 
    array (
      'summary' => '调用GetAutoIncrementUsageStatistic接口，获取表自增ID的使用数据。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'none',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'DbNames',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库名。传入此参数时，查询指定数据库中表自增ID使用情况，不传入时查询实例上所有数据库的表自增ID使用情况。
>数据格式为JSONArray，例如[\'db1\',\'db2\']，数据库名间用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => '[\'db1\',\'db2\']',
          ),
        ),
        2 => 
        array (
          'name' => 'RatioFilter',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '自增ID使用比例过滤值，只返回超过该比例的自增ID使用数据。取值为0~1的小数。',
            'type' => 'number',
            'format' => 'double',
            'required' => true,
            'example' => '0.9',
          ),
        ),
        3 => 
        array (
          'name' => 'RealTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否获取实时数据：

- **true**：实时查询实例上数据并计算。最小查询时间粒度为10分钟，即有10分钟内的数据时，即使传递**true**也不进行实时查询。
- **false**：当有近两小时的数据时，返回该数据，否则查询实例上最新数据。',
            'type' => 'boolean',
            'required' => true,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Finish' => 
                  array (
                    'description' => '任务是否结束：

- **true**：任务结束。
- **false**：任务未结束。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'Timestamp' => 
                  array (
                    'description' => '执行时间，格式为Unix时间戳，单位为毫秒（ms）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1697183353000',
                  ),
                  'TaskStatus' => 
                  array (
                    'description' => '任务状态：
- **INIT**：初始化。
- **RUNNING**：任务执行中。
- **SUCCESS**：任务成功。
- **FAIL**：任务失败。',
                    'type' => 'string',
                    'example' => 'INIT',
                  ),
                  'ErrorInfo' => 
                  array (
                    'description' => '任务失败时的错误信息。',
                    'type' => 'string',
                    'example' => 'the given database name list invalid, none of the database names in the list exist on the instance',
                  ),
                  'AutoIncrementUsageList' => 
                  array (
                    'description' => '自增ID使用数据列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'DbName' => 
                        array (
                          'description' => '数据库名。',
                          'type' => 'string',
                          'example' => 'db01',
                        ),
                        'TableName' => 
                        array (
                          'description' => '表名。',
                          'type' => 'string',
                          'example' => 'test_table',
                        ),
                        'ColumnName' => 
                        array (
                          'description' => '列名。',
                          'type' => 'string',
                          'example' => 'id',
                        ),
                        'AutoIncrementCurrentValue' => 
                        array (
                          'description' => '自增ID当前值。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '2147483647',
                        ),
                        'MaximumValue' => 
                        array (
                          'description' => '该数据类型的自增ID支持的最大值。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '2147483647',
                        ),
                        'AutoIncrementRatio' => 
                        array (
                          'description' => '自增ID使用比例。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '1',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0A74B755-98B7-59DB-8724-1321B394****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Finish\\": false,\\n    \\"Timestamp\\": 1697183353000,\\n    \\"TaskStatus\\": \\"INIT\\",\\n    \\"ErrorInfo\\": \\"the given database name list invalid, none of the database names in the list exist on the instance\\",\\n    \\"AutoIncrementUsageList\\": [\\n      {\\n        \\"DbName\\": \\"db01\\",\\n        \\"TableName\\": \\"test_table\\",\\n        \\"ColumnName\\": \\"id\\",\\n        \\"AutoIncrementCurrentValue\\": 2147483647,\\n        \\"MaximumValue\\": 2147483647,\\n        \\"AutoIncrementRatio\\": 1\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"0A74B755-98B7-59DB-8724-1321B394****\\",\\n  \\"Success\\": true\\n}","type":"json"}]',
      'title' => '获取表自增ID使用数据',
      'description' => '- 本接口只适用于RDS MySQL和PolarDB MySQL版实例。
- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
      'extraInfo' => '- 调用接口时，当返回数据中Finish不为true时，需要继续调用。当Finish为true且TaskStatus为SUCCESS时，可以查看具体的自增ID使用数据。',
    ),
    'GetDeadLockDetailList' => 
    array (
      'summary' => '调用GetDeadLockDetailList接口，查询RDS SQL Server实例的死锁详情列表。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'list',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze2016723b32****',
          ),
        ),
        1 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1701755730292',
          ),
        ),
        2 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1702360530292',
          ),
        ),
        3 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页最大记录数，默认值为10。',
            'type' => 'string',
            'required' => false,
            'example' => '5',
          ),
        ),
        5 => 
        array (
          'name' => 'DbNameList',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库名。传入多个数据库时，各个数据库名称间使用英文逗号（,）进行分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'testdb1,testdb2
',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'List' => 
                  array (
                    'description' => '详细信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回信息列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'BatchId' => 
                        array (
                          'description' => '采集的时间，格式为Unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1702301170701',
                        ),
                        'BlockProcessList' => 
                        array (
                          'description' => '阻塞列表。即主动造成锁定的会话信息。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'type' => 'object',
                            'properties' => 
                            array (
                              'ClientApp' => 
                              array (
                                'description' => '当前事务所使用的客户端名称。',
                                'type' => 'string',
                                'example' => 'Microsoft SQL Server Management Studio - Query',
                              ),
                              'HostName' => 
                              array (
                                'description' => '主机名。',
                                'type' => 'string',
                                'example' => 'sd7402****',
                              ),
                              'LastTranStarted' => 
                              array (
                                'description' => '事务开启的时间。格式为Unix时间戳，单位为毫秒。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '1702301152000',
                              ),
                              'LockMode' => 
                              array (
                                'description' => '锁模式。更多信息，请参见[锁模式](~~2362804~~)。',
                                'type' => 'string',
                                'example' => 'U',
                              ),
                              'LogUsed' => 
                              array (
                                'description' => '会话已经生成的日志大小。单位：字节（Byte）。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '352',
                              ),
                              'LoginName' => 
                              array (
                                'description' => '用户登录名。',
                                'type' => 'string',
                                'example' => 'sd7402****\\\\Administrator',
                              ),
                              'ObjectOwned' => 
                              array (
                                'description' => '已经被锁住的对象。',
                                'type' => 'string',
                                'example' => 'testdb1.dbo.test2',
                              ),
                              'ObjectRequested' => 
                              array (
                                'description' => '当前事务请求加锁的对象。',
                                'type' => 'string',
                                'example' => 'testdb1.dbo.test1',
                              ),
                              'OwnMode' => 
                              array (
                                'description' => '会话当前持有的锁模式。更多信息，请参见[锁模式](~~2362804~~)。',
                                'type' => 'string',
                                'example' => 'X',
                              ),
                              'Spid' => 
                              array (
                                'description' => '开启事务的会话ID。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '61',
                              ),
                              'SqlText' => 
                              array (
                                'description' => 'SQL语句详情。',
                                'type' => 'string',
                                'example' => 'update test1 set col1 =9',
                              ),
                              'Status' => 
                              array (
                                'description' => '当前事务的状态。',
                                'type' => 'string',
                                'example' => 'suspended',
                              ),
                              'Victim' => 
                              array (
                                'description' => '是否是死锁的受害者：

- **0**：不是。
- **1**：是。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '0',
                              ),
                              'WaitMode' => 
                              array (
                                'description' => '会话当前正在等待的锁模式。更多信息，请参见[锁模式](~~2362804~~)。',
                                'type' => 'string',
                                'example' => 'U',
                              ),
                              'WaitResource' => 
                              array (
                                'description' => '当前事务等待中的资源。',
                                'type' => 'string',
                                'example' => 'RID: 5:1:312:0',
                              ),
                              'WaitResourceDescription' => 
                              array (
                                'description' => '当前事务等待中的资源详情。',
                                'type' => 'string',
                                'example' => 'RID:school:school.mdf:312:0',
                              ),
                              'DatabaseName' => 
                              array (
                                'description' => '数据库名称。',
                                'type' => 'string',
                                'example' => 'testdb1',
                              ),
                            ),
                          ),
                        ),
                        'ClientApp' => 
                        array (
                          'description' => '客户端名称。',
                          'type' => 'string',
                          'example' => 'Microsoft SQL Server Management Studio - Query',
                        ),
                        'HostName' => 
                        array (
                          'description' => '主机名。',
                          'type' => 'string',
                          'example' => 'sd7402****',
                        ),
                        'LastTranStarted' => 
                        array (
                          'description' => '事务开启的时间。格式为Unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1702301141000',
                        ),
                        'LockMode' => 
                        array (
                          'description' => '锁模式。更多信息，请参见[锁模式](~~2362804~~)。',
                          'type' => 'string',
                          'example' => 'U',
                        ),
                        'LogUsed' => 
                        array (
                          'description' => '会话已经生成的日志大小。单位：字节（Byte）。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '352',
                        ),
                        'LoginName' => 
                        array (
                          'description' => '用户登录名。',
                          'type' => 'string',
                          'example' => 'sd7402****\\\\Administrator',
                        ),
                        'ObjectRequested' => 
                        array (
                          'description' => '当前事务请求加锁的对象。',
                          'type' => 'string',
                          'example' => 'testdb1.dbo.test2',
                        ),
                        'ObjectOwned' => 
                        array (
                          'description' => '已经被锁住的对象。',
                          'type' => 'string',
                          'example' => 'testdb1.dbo.test1',
                        ),
                        'OwnMode' => 
                        array (
                          'description' => '会话当前持有的锁模式。更多信息，请参见[锁模式](~~2362804~~)。',
                          'type' => 'string',
                          'example' => 'X',
                        ),
                        'Spid' => 
                        array (
                          'description' => '开启事务的会话ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '56',
                        ),
                        'SqlText' => 
                        array (
                          'description' => 'SQL语句详情。',
                          'type' => 'string',
                          'example' => 'update test2 set col1 =88',
                        ),
                        'Status' => 
                        array (
                          'description' => '当前事务的状态。',
                          'type' => 'string',
                          'example' => 'suspended',
                        ),
                        'Victim' => 
                        array (
                          'description' => '是否是死锁的受害者：

- **0**：不是。
- **1**：是。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1
',
                        ),
                        'WaitMode' => 
                        array (
                          'description' => '会话当前正在等待的锁模式。更多信息，请参见[锁模式](~~2362804~~)。',
                          'type' => 'string',
                          'example' => 'U',
                        ),
                        'WaitResource' => 
                        array (
                          'description' => '当前事务等待中的资源。',
                          'type' => 'string',
                          'example' => 'RID: 5:1:376:0',
                        ),
                        'WaitResourceDescription' => 
                        array (
                          'description' => '当前事务等待中的资源详情。',
                          'type' => 'string',
                          'example' => 'RID:school:school.mdf:376:0',
                        ),
                        'DatabaseName' => 
                        array (
                          'description' => '数据库的名称。',
                          'type' => 'string',
                          'example' => 'testdb1',
                        ),
                      ),
                    ),
                  ),
                  'PageNo' => 
                  array (
                    'description' => '当前页码。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'Total' => 
                  array (
                    'description' => '返回总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '2',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。

',
                'type' => 'string',
                'example' => '840F51F7-9C01-538D-94F6-AE712905****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"List\\": [\\n      {\\n        \\"BatchId\\": 1702301170701,\\n        \\"BlockProcessList\\": [\\n          {\\n            \\"ClientApp\\": \\"Microsoft SQL Server Management Studio - Query\\",\\n            \\"HostName\\": \\"sd7402****\\",\\n            \\"LastTranStarted\\": 1702301152000,\\n            \\"LockMode\\": \\"U\\",\\n            \\"LogUsed\\": 352,\\n            \\"LoginName\\": \\"sd7402****\\\\\\\\\\\\\\\\Administrator\\",\\n            \\"ObjectOwned\\": \\"testdb1.dbo.test2\\",\\n            \\"ObjectRequested\\": \\"testdb1.dbo.test1\\",\\n            \\"OwnMode\\": \\"X\\",\\n            \\"Spid\\": 61,\\n            \\"SqlText\\": \\"update test1 set col1 =9\\",\\n            \\"Status\\": \\"suspended\\",\\n            \\"Victim\\": 0,\\n            \\"WaitMode\\": \\"U\\",\\n            \\"WaitResource\\": \\"RID: 5:1:312:0\\",\\n            \\"WaitResourceDescription\\": \\"RID:school:school.mdf:312:0\\",\\n            \\"DatabaseName\\": \\"testdb1\\"\\n          }\\n        ],\\n        \\"ClientApp\\": \\"Microsoft SQL Server Management Studio - Query\\",\\n        \\"HostName\\": \\"sd7402****\\",\\n        \\"LastTranStarted\\": 1702301141000,\\n        \\"LockMode\\": \\"U\\",\\n        \\"LogUsed\\": 352,\\n        \\"LoginName\\": \\"sd7402****\\\\\\\\\\\\\\\\Administrator\\",\\n        \\"ObjectRequested\\": \\"testdb1.dbo.test2\\",\\n        \\"ObjectOwned\\": \\"testdb1.dbo.test1\\",\\n        \\"OwnMode\\": \\"X\\",\\n        \\"Spid\\": 56,\\n        \\"SqlText\\": \\"update test2 set col1 =88\\",\\n        \\"Status\\": \\"suspended\\",\\n        \\"Victim\\": 1,\\n        \\"WaitMode\\": \\"U\\",\\n        \\"WaitResource\\": \\"RID: 5:1:376:0\\",\\n        \\"WaitResourceDescription\\": \\"RID:school:school.mdf:376:0\\",\\n        \\"DatabaseName\\": \\"testdb1\\"\\n      }\\n    ],\\n    \\"PageNo\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"Total\\": 2\\n  },\\n  \\"RequestId\\": \\"840F51F7-9C01-538D-94F6-AE712905****\\",\\n  \\"Success\\": \\"true\\"\\n}","type":"json"}]',
      'title' => '查询RDS SQL Server实例的死锁列表',
      'description' => '* 本接口仅适用于RDS SQL Server版实例。
* 使用阿里云或DAS的SDK时，建议使用最新版本。
* 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetBlockingDetailList' => 
    array (
      'summary' => '调用GetBlockingDetailList接口，查询RDS SQL Server实例的锁阻塞列表。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'list',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。

',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-t4nfalp2ap421****',
          ),
        ),
        1 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1679429913757',
          ),
        ),
        2 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1682490480548',
          ),
        ),
        3 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码，取值大于0且不超过Integer数据类型的最大值，默认值为1。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页最大记录数，取值大于0且不超过Integer数据类型的最大值，默认值为10。',
            'type' => 'string',
            'required' => false,
            'example' => '10',
          ),
        ),
        5 => 
        array (
          'name' => 'QueryHash',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SQL哈希值。将SQL语句进行Hash之后得出的值，同一种SQL对应同一个QueryHash。',
            'type' => 'string',
            'required' => false,
            'example' => 'DC08B955CAD25E7B',
          ),
        ),
        6 => 
        array (
          'name' => 'DbNameList',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库名。传入多个数据库时，各个数据库名称间使用英文逗号（,）进行分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'testdb1,testdb2',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'List' => 
                  array (
                    'description' => '返回信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '数据详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'BatchId' => 
                        array (
                          'description' => '采集批次。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1683530096156',
                        ),
                        'ClientAppName' => 
                        array (
                          'description' => '客户端名称。',
                          'type' => 'string',
                          'example' => '.Net SqlClient Data Provider',
                        ),
                        'DataBase' => 
                        array (
                          'description' => '数据库名称。',
                          'type' => 'string',
                          'example' => 'testdb1',
                        ),
                        'HostName' => 
                        array (
                          'description' => '客户端主机名称。',
                          'type' => 'string',
                          'example' => 'ALLBNMGTAPPRD01',
                        ),
                        'LoginId' => 
                        array (
                          'description' => '登录用户名。',
                          'type' => 'string',
                          'example' => 'Testuser',
                        ),
                        'QueryHash' => 
                        array (
                          'description' => 'SQL HASH值。',
                          'type' => 'string',
                          'example' => 'DC08B955CAD25E7B',
                        ),
                        'Spid' => 
                        array (
                          'description' => '会话ID。',
                          'type' => 'string',
                          'example' => '1717',
                        ),
                        'SqlText' => 
                        array (
                          'description' => 'SQL语句。',
                          'type' => 'string',
                          'example' => 'select * from test1',
                        ),
                        'StartTime' => 
                        array (
                          'description' => '开始执行的时间。格式为Unix时间戳，单位为毫秒。',
                          'type' => 'string',
                          'example' => '1608888296000',
                        ),
                        'WaitTimeMs' => 
                        array (
                          'description' => '阻塞时长，单位毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '30000',
                        ),
                        'WaitType' => 
                        array (
                          'description' => '等待类型。更多等待类型及说明，请参见[等待类型](https://learn.microsoft.com/en-us/sql/relational-databases/system-dynamic-management-views/sys-dm-os-wait-stats-transact-sql?view=sql-server-ver15)。',
                          'type' => 'string',
                          'example' => 'MISCELLANEOUS',
                        ),
                        'CurrentCollectionTime' => 
                        array (
                          'description' => '阻塞的采集时间。格式为Unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1700065800000',
                        ),
                      ),
                    ),
                  ),
                  'PageNo' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '分页大小。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'Total' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '19',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"List\\": [\\n      {\\n        \\"BatchId\\": 1683530096156,\\n        \\"ClientAppName\\": \\".Net SqlClient Data Provider\\",\\n        \\"DataBase\\": \\"testdb1\\",\\n        \\"HostName\\": \\"ALLBNMGTAPPRD01\\",\\n        \\"LoginId\\": \\"Testuser\\",\\n        \\"QueryHash\\": \\"DC08B955CAD25E7B\\",\\n        \\"Spid\\": \\"1717\\",\\n        \\"SqlText\\": \\"select * from test1\\",\\n        \\"StartTime\\": \\"1608888296000\\",\\n        \\"WaitTimeMs\\": 30000,\\n        \\"WaitType\\": \\"MISCELLANEOUS\\",\\n        \\"CurrentCollectionTime\\": 1700065800000\\n      }\\n    ],\\n    \\"PageNo\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"Total\\": 19\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","type":"json"}]',
      'title' => '查询RDS SQL Server实例的锁阻塞列表',
      'description' => '* 本接口仅适用于RDS SQL Server版实例。
* 使用阿里云或DAS的SDK时，建议使用最新版本。
* 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetInstanceMissingIndexList' => 
    array (
      'summary' => '调用GetInstanceMissingIndexList接口，查询RDS SQL Server实例所有缺失索引的详细信息。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'list',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-t4nfalp2ap421****',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询的页码，从1开始，默认为1。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页最大记录数，默认值为10。',
            'type' => 'string',
            'required' => false,
            'example' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'ObjectName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '对象名。',
            'type' => 'string',
            'required' => false,
            'example' => 'bas_customer',
          ),
        ),
        4 => 
        array (
          'name' => 'ReservedSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表总空间筛选条件。单位为MB。输入格式为`运算符+分割服“|”+表总空间大小`，例如筛选条件设置为查询总空间大于等于100M的表时，输入：`>=|100`。',
            'type' => 'string',
            'required' => false,
            'example' => '>=|100',
          ),
        ),
        5 => 
        array (
          'name' => 'RowCount',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表记录数筛选条件。输入格式为`运算符+分割服“|”+表记录数`，例如`>=|100`。',
            'type' => 'string',
            'required' => false,
            'example' => '>=|100000',
          ),
        ),
        6 => 
        array (
          'name' => 'ReservedPages',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '总页数筛选条件。输入格式为`运算符+分割服“|”+总页数`，例如`>=|100`。',
            'type' => 'string',
            'required' => false,
            'example' => '>=|100',
          ),
        ),
        7 => 
        array (
          'name' => 'IndexCount',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '索引个数（索引缺失表目前所拥有的索引个数）筛选条件。输入格式为`运算符+分割服“|”+索引个数`，例如`>=|100`。',
            'type' => 'string',
            'required' => false,
            'example' => '>=|8',
          ),
        ),
        8 => 
        array (
          'name' => 'UniqueCompiles',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '编译次数筛选条件。输入格式为`运算符+分割服“|”+编译次数`，例如`>=|100`。',
            'type' => 'string',
            'required' => false,
            'example' => '>=|10000',
          ),
        ),
        9 => 
        array (
          'name' => 'UserSeeks',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查找次数筛选条件。输入格式为`运算符+分割服“|”+查找次数`，例如`>=|100`。',
            'type' => 'string',
            'required' => false,
            'example' => '>=|1000',
          ),
        ),
        10 => 
        array (
          'name' => 'UserScans',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '扫描次数筛选条件。输入格式为`运算符+分割服“|”+扫描次数`，例如`>=|100`。',
            'type' => 'string',
            'required' => false,
            'example' => '>=|10000',
          ),
        ),
        11 => 
        array (
          'name' => 'AvgTotalUserCost',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '平均开销节约百分比（预测建立了缺失索引后，用户的平均CPU开销节约百分比。）筛选条件。输入格式为`运算符+分割服“|”+平均开销节约百分比`，例如筛选条件设置为查询平均开销节约百分比小于等于10%时，输入：`<=|10`。',
            'type' => 'string',
            'required' => false,
            'example' => '<=|8',
          ),
        ),
        12 => 
        array (
          'name' => 'AvgUserImpact',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '性能提升百分比（预测建立了缺失索引后，用户的平均查询性能提升百分比。）筛选条件。输入格式为`运算符+分割服“|”+性能提升百分比`，例如筛选条件设置为查询性能提升百分比大于等于100%时，输入：`>=|100`。',
            'type' => 'string',
            'required' => false,
            'example' => '>|10000',
          ),
        ),
        13 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '索引最后查找时间的开始时间。格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => false,
            'example' => '1679414400000',
          ),
        ),
        14 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '索引最后查找时间的结束时间。格式为Unix时间戳，单位为毫秒。',
            'type' => 'string',
            'required' => false,
            'example' => '1681869544000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'List' => 
                  array (
                    'description' => '返回信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '记录详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'AvgTotalUserCost' => 
                        array (
                          'description' => '预测建立了缺失索引后，用户的平均CPU开销节约百分比。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '4.67',
                        ),
                        'AvgUserImpact' => 
                        array (
                          'description' => '预测建立了缺失索引后，用户的平均查询性能提升百分比。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '98.3
',
                        ),
                        'DatabaseName' => 
                        array (
                          'description' => '数据库名称。',
                          'type' => 'string',
                          'example' => 'testdb',
                        ),
                        'EqualityColumns' => 
                        array (
                          'description' => '相等列。缺失索引被使用来做等于查询的列。',
                          'type' => 'string',
                          'example' => 'col1,col2,col3',
                        ),
                        'IncludedColumns' => 
                        array (
                          'description' => '包含列。缺失索引包含列。',
                          'type' => 'string',
                          'example' => 'col3,col4',
                        ),
                        'IndexCount' => 
                        array (
                          'description' => '索引个数。索引缺失表目前所拥有的索引个数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1',
                        ),
                        'LastUserSeek' => 
                        array (
                          'description' => '用户最后查找时间。缺失索引用户最后的查找时间点。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1702023327000',
                        ),
                        'ObjectName' => 
                        array (
                          'description' => '对象名。',
                          'type' => 'string',
                          'example' => 'stu',
                        ),
                        'ReservedPages' => 
                        array (
                          'description' => '总页数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '5025',
                        ),
                        'ReservedSize' => 
                        array (
                          'description' => '总空间大小。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '39.26',
                        ),
                        'RowCount' => 
                        array (
                          'description' => '记录数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '226945',
                        ),
                        'SchemaName' => 
                        array (
                          'description' => '架构名。',
                          'type' => 'string',
                          'example' => 'dbo',
                        ),
                        'SystemScans' => 
                        array (
                          'description' => '扫描次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'SystemSeeks' => 
                        array (
                          'description' => '查找次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'UniqueCompiles' => 
                        array (
                          'description' => '编译次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '2392',
                        ),
                        'UserScans' => 
                        array (
                          'description' => '用户扫描次数。索引缺失表被扫描的次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'UserSeeks' => 
                        array (
                          'description' => '用户查找次数。索引缺失被查找的次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1081',
                        ),
                        'InequalityColumns' => 
                        array (
                          'description' => '不等列。缺失索引被使用来做不等于查询的列。',
                          'type' => 'string',
                          'example' => '2392',
                        ),
                        'CreateIndex' => 
                        array (
                          'description' => '索引创建语句。您可以使用这个语句来创建缺失索引。',
                          'type' => 'string',
                          'example' => 'CREATE INDEX [IX_CLOUDDBA_school_dbo_stu@col1_@col2] ON [school].[dbo].[stu]([col1],[col2],[col3]) INCLUDE ([col4],[col5]) WITH (FILLFACTOR = 90, ONLINE = OFF);',
                        ),
                      ),
                    ),
                  ),
                  'PageNo' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'Total' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '16',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0A74B755-98B7-59DB-8724-1321B394****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"List\\": [\\n      {\\n        \\"AvgTotalUserCost\\": 4.67,\\n        \\"AvgUserImpact\\": 98.3,\\n        \\"DatabaseName\\": \\"testdb\\",\\n        \\"EqualityColumns\\": \\"col1,col2,col3\\",\\n        \\"IncludedColumns\\": \\"col3,col4\\",\\n        \\"IndexCount\\": 1,\\n        \\"LastUserSeek\\": 1702023327000,\\n        \\"ObjectName\\": \\"stu\\",\\n        \\"ReservedPages\\": 5025,\\n        \\"ReservedSize\\": 39.26,\\n        \\"RowCount\\": 226945,\\n        \\"SchemaName\\": \\"dbo\\",\\n        \\"SystemScans\\": 0,\\n        \\"SystemSeeks\\": 0,\\n        \\"UniqueCompiles\\": 2392,\\n        \\"UserScans\\": 0,\\n        \\"UserSeeks\\": 1081,\\n        \\"InequalityColumns\\": \\"2392\\",\\n        \\"CreateIndex\\": \\"CREATE INDEX [IX_CLOUDDBA_school_dbo_stu@col1_@col2] ON [school].[dbo].[stu]([col1],[col2],[col3]) INCLUDE ([col4],[col5]) WITH (FILLFACTOR = 90, ONLINE = OFF);\\"\\n      }\\n    ],\\n    \\"PageNo\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"Total\\": 16\\n  },\\n  \\"RequestId\\": \\"0A74B755-98B7-59DB-8724-1321B394****\\",\\n  \\"Success\\": \\"true\\"\\n}","type":"json"}]',
      'title' => '查询RDS SQL Server实例索引缺失情况',
      'description' => '* 本接口仅适用于RDS SQL Server版实例。
* 使用阿里云或DAS的SDK时，建议使用最新版本。
* 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'UpdateAutoThrottleRulesAsync' => 
    array (
      'summary' => '调用UpdateAutoThrottleRulesAsync接口，采用异步方式，批量设置指定数据库实例的自动SQL限流配置参数。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'none',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。

> 数据格式为JSONArray，例如`[\'实例ID1\',\'实例ID2\']`，实例ID间用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => true,
            'example' => '[\'rm-2ze8g2am97624****\',\'rm-2ze9xrhze0709****\']',
          ),
        ),
        2 => 
        array (
          'name' => 'CpuUsage',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'CPU利用率阈值，取值范围：70%~100%。',
            'type' => 'number',
            'format' => 'double',
            'required' => true,
            'example' => '70',
          ),
        ),
        3 => 
        array (
          'name' => 'CpuSessionRelation',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '[AND | OR]',
            'description' => 'CPU利用率阈值和活跃会话数阈值的逻辑关系。
- **AND**：且。
- **OR**：或。',
            'type' => 'string',
            'required' => true,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'OR',
          ),
        ),
        4 => 
        array (
          'name' => 'ActiveSessions',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '活跃会话数阈值。	

- 与CPU利用率阈值关系为**OR**（或）时，大于等于16。
- 与CPU利用率阈值关系为**AND**（且）时，大于等于2。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '16',
          ),
        ),
        5 => 
        array (
          'name' => 'AbnormalDuration',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '触发自动SQL限流的异常的持续时间阈值，取值范围：大于等于2的正整数，单位：分钟。
',
            'type' => 'number',
            'format' => 'double',
            'required' => true,
            'example' => '2',
          ),
        ),
        6 => 
        array (
          'name' => 'MaxThrottleTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '最大限流时长，取值为正整数，单位：分钟。',
            'type' => 'number',
            'format' => 'double',
            'required' => true,
            'example' => '10',
          ),
        ),
        7 => 
        array (
          'name' => 'AllowThrottleStartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可限流时间段的开始时间（UTC时间）。',
            'type' => 'string',
            'required' => true,
            'example' => '00:00Z',
          ),
        ),
        8 => 
        array (
          'name' => 'AllowThrottleEndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可限流时间段的结束时间（UTC时间）。',
            'type' => 'string',
            'required' => true,
            'example' => '23:59Z',
          ),
        ),
        9 => 
        array (
          'name' => 'AutoKillSession',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否同时KILL执行中的异常SQL：
> 异常SQL：与需要限流的SQL模板相同。

- **true**：是。
- **false**：否。',
            'type' => 'boolean',
            'required' => true,
            'example' => 'true',
          ),
        ),
        10 => 
        array (
          'name' => 'ResultId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '异步请求的ID。
> 异步调用后不会立即返回完整结果，首先需要调用该接口获取**ResultId**，然后使用返回数据的**ResultId**，重新发起调用，直到**isFinish**取值为**true**时，返回完整结果。即获取一次完整数据，至少需要调用该接口两次。',
            'type' => 'string',
            'required' => false,
            'example' => 'async__507044db6c4eadfa2dab9b084e80****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Fail' => 
                  array (
                    'description' => '请求是否失败：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'ConfigResponse' => 
                  array (
                    'description' => '批量设置的返回数据。
> 异步请求完成时（即isFinish取值为**true**时）才会返回该数据。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'TotalInstanceCount' => 
                      array (
                        'description' => '总数据库实例数量。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '2',
                      ),
                      'ConfigSuccessInstanceCount' => 
                      array (
                        'description' => '设置成功的数据库实例数量。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1',
                      ),
                      'ConfigFailInstanceCount' => 
                      array (
                        'description' => '设置失败的数据库实例数量。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1',
                      ),
                      'ConfigSuccessInstanceList' => 
                      array (
                        'description' => '设置成功的数据库实例列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ConfigSuccess' => 
                            array (
                              'description' => '设置是否成功：

- **true**：是。

- **false**：否。',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                            'InstanceId' => 
                            array (
                              'description' => '数据库实例ID。',
                              'type' => 'string',
                              'example' => 'rm-2ze8g2am97624****',
                            ),
                          ),
                        ),
                      ),
                      'ConfigFailInstanceList' => 
                      array (
                        'description' => '设置失败的数据库实例列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ConfigSuccess' => 
                            array (
                              'description' => '设置是否成功：

- **true**：是。

- **false**：否。',
                              'type' => 'boolean',
                              'example' => 'false',
                            ),
                            'InstanceId' => 
                            array (
                              'description' => '数据库实例ID。',
                              'type' => 'string',
                              'example' => 'rm-2ze9xrhze0709****',
                            ),
                            'ErrorMessage' => 
                            array (
                              'description' => '错误信息。',
                              'type' => 'string',
                              'example' => 'instance das autonomy service is off or can not find instance',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'ResultId' => 
                  array (
                    'description' => '异步请求ID。',
                    'type' => 'string',
                    'example' => 'async__665ee69612f1627c7fd9f3c85075****',
                  ),
                  'IsFinish' => 
                  array (
                    'description' => '异步请求是否执行完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'State' => 
                  array (
                    'description' => '异步请求的执行状态：

- **RUNNING**：正在运行。

- **SUCCESS**：成功。

- **FAIL**：失败。',
                    'type' => 'string',
                    'example' => 'SUCCESS',
                  ),
                  'Complete' => 
                  array (
                    'description' => '异步请求是否执行完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'Timestamp' => 
                  array (
                    'description' => '执行时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1645668213000',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Fail\\": false,\\n    \\"ConfigResponse\\": {\\n      \\"TotalInstanceCount\\": 2,\\n      \\"ConfigSuccessInstanceCount\\": 1,\\n      \\"ConfigFailInstanceCount\\": 1,\\n      \\"ConfigSuccessInstanceList\\": [\\n        {\\n          \\"ConfigSuccess\\": true,\\n          \\"InstanceId\\": \\"rm-2ze8g2am97624****\\"\\n        }\\n      ],\\n      \\"ConfigFailInstanceList\\": [\\n        {\\n          \\"ConfigSuccess\\": false,\\n          \\"InstanceId\\": \\"rm-2ze9xrhze0709****\\",\\n          \\"ErrorMessage\\": \\"instance das autonomy service is off or can not find instance\\"\\n        }\\n      ]\\n    },\\n    \\"ResultId\\": \\"async__665ee69612f1627c7fd9f3c85075****\\",\\n    \\"IsFinish\\": true,\\n    \\"State\\": \\"SUCCESS\\",\\n    \\"Complete\\": true,\\n    \\"Timestamp\\": 1645668213000\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<UpdateAutoThrottleRulesAsyncResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Fail>false</Fail>\\n        <ConfigResponse>\\n            <TotalInstanceCount>2</TotalInstanceCount>\\n            <ConfigSuccessInstanceCount>1</ConfigSuccessInstanceCount>\\n            <ConfigFailInstanceCount>1</ConfigFailInstanceCount>\\n            <ConfigSuccessInstanceList>\\n                <ConfigSuccess>true</ConfigSuccess>\\n                <InstanceId>rm-2ze8g2am97624****</InstanceId>\\n            </ConfigSuccessInstanceList>\\n            <ConfigFailInstanceList>\\n                <ConfigSuccess>false</ConfigSuccess>\\n                <InstanceId>rm-2ze9xrhze0709****</InstanceId>\\n                <ErrorMessage>instance das autonomy service is off or can not find instance</ErrorMessage>\\n            </ConfigFailInstanceList>\\n        </ConfigResponse>\\n        <ResultId>async__665ee69612f1627c7fd9f3c85075****</ResultId>\\n        <IsFinish>true</IsFinish>\\n        <State>SUCCESS</State>\\n        <Complete>true</Complete>\\n        <Timestamp>1645668213000</Timestamp>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</UpdateAutoThrottleRulesAsyncResponse>","errorExample":""}]',
      'title' => '设置自动SQL限流配置参数',
      'description' => '> 异步调用后不会立即返回完整结果，首先需要调用该接口获取**ResultId**，然后使用返回数据的**ResultId**，重新发起调用，直到**isFinish**取值为**true**时，返回完整结果。即获取一次完整数据，至少需要调用该接口两次。

使用该接口需满足以下前提条件：
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。

- 目标数据库实例已开启自治服务，详情请参见[自治中心](~~152139~~)。

- 目标数据库实例为：
    - RDS MySQL 5.6、5.7、 8.0高可用系列、三节点企业系列。
    - PolarDB MySQL版 5.6集群版、5.7集群版、 8.0集群版、8.0高压缩引擎（X-Engine）。',
    ),
    'DisableAutoThrottleRules' => 
    array (
      'summary' => '调用DisableAutoThrottleRules接口，批量关闭指定数据库实例的自动SQL限流功能。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'none',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。

> 数据格式为JSONArray，例如`[\'实例ID1\',\'实例ID2\']`，实例ID间用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => true,
            'example' => '[\'rm-2ze8g2am97624****\',\'rm-2ze9xrhze0709****\']',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'TotalInstanceCount' => 
                  array (
                    'description' => '总数据库实例数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '2',
                  ),
                  'ConfigSuccessInstanceCount' => 
                  array (
                    'description' => '关闭自动SQL限流功能成功的数据库实例数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'ConfigFailInstanceCount' => 
                  array (
                    'description' => '关闭自动SQL限流功能失败的数据库实例数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'ConfigSuccessInstanceList' => 
                  array (
                    'description' => '关闭自动SQL限流功能成功的数据库实例列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ConfigSuccess' => 
                        array (
                          'description' => '关闭设置是否成功：
- **true**：是。

- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '数据库实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze8g2am97624****',
                        ),
                      ),
                    ),
                  ),
                  'ConfigFailInstanceList' => 
                  array (
                    'description' => '关闭自动SQL限流功能失败的数据库实例列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ConfigSuccess' => 
                        array (
                          'description' => '关闭设置是否成功：

- **true**：是。

- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '数据库实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze9xrhze0709****',
                        ),
                        'ErrorMessage' => 
                        array (
                          'description' => '错误信息。',
                          'type' => 'string',
                          'example' => 'cannot found instance by rm-2ze9xrhze0709****',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"TotalInstanceCount\\": 2,\\n    \\"ConfigSuccessInstanceCount\\": 1,\\n    \\"ConfigFailInstanceCount\\": 1,\\n    \\"ConfigSuccessInstanceList\\": [\\n      {\\n        \\"ConfigSuccess\\": true,\\n        \\"InstanceId\\": \\"rm-2ze8g2am97624****\\"\\n      }\\n    ],\\n    \\"ConfigFailInstanceList\\": [\\n      {\\n        \\"ConfigSuccess\\": false,\\n        \\"InstanceId\\": \\"rm-2ze9xrhze0709****\\",\\n        \\"ErrorMessage\\": \\"cannot found instance by rm-2ze9xrhze0709****\\"\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<DisableAutoThrottleRulesResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <TotalInstanceCount>2</TotalInstanceCount>\\n        <ConfigSuccessInstanceCount>1</ConfigSuccessInstanceCount>\\n        <ConfigFailInstanceCount>1</ConfigFailInstanceCount>\\n        <ConfigSuccessInstanceList>\\n            <ConfigSuccess>true</ConfigSuccess>\\n            <InstanceId>rm-2ze8g2am97624****</InstanceId>\\n        </ConfigSuccessInstanceList>\\n        <ConfigFailInstanceList>\\n            <ConfigSuccess>false</ConfigSuccess>\\n            <InstanceId>rm-2ze9xrhze0709****</InstanceId>\\n            <ErrorMessage>cannot found instance by rm-2ze9xrhze0709****</ErrorMessage>\\n        </ConfigFailInstanceList>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</DisableAutoThrottleRulesResponse>","errorExample":""}]',
      'title' => '关闭自动SQL限流功能',
      'description' => '在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetAutoThrottleRules' => 
    array (
      'summary' => '获取指定数据库实例的自动SQL限流规则。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'none',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。

- 数据格式为JSONArray，例如`[\'实例ID1\',\'实例ID2\']`，实例ID间用英文逗号（,）分隔。
- 不输入数据库实例ID时，默认返回当前账号曾经开启过自动SQL限流功能的全部数据库实例信息，包括：
    - 正在使用该功能的数据库实例。
    - 已关闭该功能的数据库实例（不包含已经释放的数据库实例）。',
            'type' => 'string',
            'required' => false,
            'example' => '[\'rm-2ze8g2am97624****\',\'rm-2vc54m2a6pd6p****\',\'rm-2ze9xrhze0709****\']',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'TotalAutoThrottleRulesCount' => 
                  array (
                    'description' => '所有开启过自动SQL限流功能的数据库数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '3',
                  ),
                  'EnableAutoThrottleCount' => 
                  array (
                    'description' => '正在使用自动SQL限流功能的数据库实例数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'TurnOffAutoThrottleCount' => 
                  array (
                    'description' => '曾经开启并且当前已关闭自动SQL限流功能的数据库实例数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'NeverEnableAutoThrottleOrReleasedInstanceCount' => 
                  array (
                    'description' => '从未开启过自动SQL限流或者实例不存在的数据库实例数量。
> 实例不存在：数据库实例已经释放或者传入的数据库实例ID存在错误。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'EnableAutoThrottleList' => 
                  array (
                    'description' => '正在使用自动SQL限流功能的数据库实例信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'AbnormalDuration' => 
                        array (
                          'description' => '触发自动限SQL流规则的异常的持续时间阈值，单位：分钟。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '2',
                        ),
                        'CpuUsage' => 
                        array (
                          'description' => 'CPU利用率阈值。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '70',
                        ),
                        'CpuSessionRelation' => 
                        array (
                          'description' => 'CPU利用率阈值和活跃会话数阈值的逻辑关系：

- **AND**：且。
- **OR**：或。',
                          'type' => 'string',
                          'example' => 'AND',
                        ),
                        'ActiveSessions' => 
                        array (
                          'description' => '活跃会话数量阈值。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '32',
                        ),
                        'MaxThrottleTime' => 
                        array (
                          'description' => '最大限流时长，单位：分钟。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '10',
                        ),
                        'AllowThrottleStartTime' => 
                        array (
                          'description' => '可限流时间段的开始时间（UTC时间）。',
                          'type' => 'string',
                          'example' => '00:00Z',
                        ),
                        'AllowThrottleEndTime' => 
                        array (
                          'description' => '可限流时间段的结束时间（UTC时间）。',
                          'type' => 'string',
                          'example' => '23:59Z',
                        ),
                        'Visible' => 
                        array (
                          'description' => '自动SQL限流规则是否开启：
- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'AutoKillSession' => 
                        array (
                          'description' => '是否同时KILL执行中的异常SQL：
> 异常SQL：与需要限流的SQL模板相同。

- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '数据库实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze8g2am97624****',
                        ),
                        'UserId' => 
                        array (
                          'description' => '用户ID，即创建数据库实例的阿里云主账号ID。',
                          'type' => 'string',
                          'example' => '140692647406****',
                        ),
                      ),
                    ),
                  ),
                  'TurnOffAutoThrottleList' => 
                  array (
                    'description' => '曾经开启并且当前已关闭自动SQL限流功能的数据库实例信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'AbnormalDuration' => 
                        array (
                          'description' => '触发自动限流规则的持续时间阈值，单位：分钟。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '2',
                        ),
                        'CpuUsage' => 
                        array (
                          'description' => 'CPU利用率阈值。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '80',
                        ),
                        'AllowThrottleEndTime' => 
                        array (
                          'description' => '可限流时间段的结束时间（UTC时间）。',
                          'type' => 'string',
                          'example' => '23:59Z',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '数据库实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze9xrhze0709****',
                        ),
                        'Visible' => 
                        array (
                          'description' => '自动SQL限流规则是否开启：
- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'CpuSessionRelation' => 
                        array (
                          'description' => 'CPU利用率阈值和活跃会话数阈值的关系：
- **AND**：且。
- **OR**：或。',
                          'type' => 'string',
                          'example' => 'OR',
                        ),
                        'AutoKillSession' => 
                        array (
                          'description' => '是否同时KILL执行中的异常SQL：
> 异常SQL：与需要限流的SQL模板相同。

- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'ActiveSessions' => 
                        array (
                          'description' => '活跃会话数阈值。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '64',
                        ),
                        'MaxThrottleTime' => 
                        array (
                          'description' => '最大限流时长，单位：分钟。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '10',
                        ),
                        'UserId' => 
                        array (
                          'description' => '用户ID，即创建数据库实例的阿里云主账号ID。',
                          'type' => 'string',
                          'example' => '140692647406****',
                        ),
                        'AllowThrottleStartTime' => 
                        array (
                          'description' => '可限流时间段的开始时间（UTC时间）。',
                          'type' => 'string',
                          'example' => '00:00Z',
                        ),
                      ),
                    ),
                  ),
                  'NeverEnableAutoThrottleOrReleasedInstanceIdList' => 
                  array (
                    'description' => '从未开启过自动SQL限流或者实例不存在的数据库实例数量。
> 实例不存在：数据库实例已经释放或者传入的数据库实例ID存在错误。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '数据库实例ID。',
                      'type' => 'string',
                      'example' => 'rm-2vc54m2a6pd6p****',
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '7172BECE-588A-5961-8126-C216E16B****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"TotalAutoThrottleRulesCount\\": 3,\\n    \\"EnableAutoThrottleCount\\": 1,\\n    \\"TurnOffAutoThrottleCount\\": 1,\\n    \\"NeverEnableAutoThrottleOrReleasedInstanceCount\\": 1,\\n    \\"EnableAutoThrottleList\\": [\\n      {\\n        \\"AbnormalDuration\\": 2,\\n        \\"CpuUsage\\": 70,\\n        \\"CpuSessionRelation\\": \\"AND\\",\\n        \\"ActiveSessions\\": 32,\\n        \\"MaxThrottleTime\\": 10,\\n        \\"AllowThrottleStartTime\\": \\"00:00Z\\",\\n        \\"AllowThrottleEndTime\\": \\"23:59Z\\",\\n        \\"Visible\\": true,\\n        \\"AutoKillSession\\": true,\\n        \\"InstanceId\\": \\"rm-2ze8g2am97624****\\",\\n        \\"UserId\\": \\"140692647406****\\"\\n      }\\n    ],\\n    \\"TurnOffAutoThrottleList\\": [\\n      {\\n        \\"AbnormalDuration\\": 2,\\n        \\"CpuUsage\\": 80,\\n        \\"AllowThrottleEndTime\\": \\"23:59Z\\",\\n        \\"InstanceId\\": \\"rm-2ze9xrhze0709****\\",\\n        \\"Visible\\": false,\\n        \\"CpuSessionRelation\\": \\"OR\\",\\n        \\"AutoKillSession\\": true,\\n        \\"ActiveSessions\\": 64,\\n        \\"MaxThrottleTime\\": 10,\\n        \\"UserId\\": \\"140692647406****\\",\\n        \\"AllowThrottleStartTime\\": \\"00:00Z\\"\\n      }\\n    ],\\n    \\"NeverEnableAutoThrottleOrReleasedInstanceIdList\\": [\\n      \\"rm-2vc54m2a6pd6p****\\"\\n    ]\\n  },\\n  \\"RequestId\\": \\"7172BECE-588A-5961-8126-C216E16B****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetAutoThrottleRulesResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <TotalAutoThrottleRulesCount>3</TotalAutoThrottleRulesCount>\\n        <EnableAutoThrottleCount>1</EnableAutoThrottleCount>\\n        <TurnOffAutoThrottleCount>1</TurnOffAutoThrottleCount>\\n        <NeverEnableAutoThrottleOrReleasedInstanceCount>1</NeverEnableAutoThrottleOrReleasedInstanceCount>\\n        <EnableAutoThrottleList>\\n            <AbnormalDuration>2</AbnormalDuration>\\n            <CpuUsage>70</CpuUsage>\\n            <CpuSessionRelation>AND</CpuSessionRelation>\\n            <ActiveSessions>32</ActiveSessions>\\n            <MaxThrottleTime>10</MaxThrottleTime>\\n            <AllowThrottleStartTime>00:00Z</AllowThrottleStartTime>\\n            <AllowThrottleEndTime>23:59Z</AllowThrottleEndTime>\\n            <Visible>true</Visible>\\n            <AutoKillSession>true</AutoKillSession>\\n            <InstanceId>rm-2ze8g2am97624****</InstanceId>\\n            <UserId>140692647406****</UserId>\\n        </EnableAutoThrottleList>\\n        <TurnOffAutoThrottleList>\\n            <AbnormalDuration>2</AbnormalDuration>\\n            <CpuUsage>80</CpuUsage>\\n            <AllowThrottleEndTime>23:59Z</AllowThrottleEndTime>\\n            <InstanceId>rm-2ze9xrhze0709****</InstanceId>\\n            <Visible>false</Visible>\\n            <CpuSessionRelation>OR</CpuSessionRelation>\\n            <AutoKillSession>true</AutoKillSession>\\n            <ActiveSessions>64</ActiveSessions>\\n            <MaxThrottleTime>10</MaxThrottleTime>\\n            <UserId>140692647406****</UserId>\\n            <AllowThrottleStartTime>00:00Z</AllowThrottleStartTime>\\n        </TurnOffAutoThrottleList>\\n        <NeverEnableAutoThrottleOrReleasedInstanceIdList>rm-2vc54m2a6pd6p****</NeverEnableAutoThrottleOrReleasedInstanceIdList>\\n    </Data>\\n    <RequestId>7172BECE-588A-5961-8126-C216E16B****</RequestId>\\n    <Success>true</Success>\\n</GetAutoThrottleRulesResponse>","errorExample":""}]',
      'title' => '获取自动SQL限流规则',
      'description' => '使用该接口需满足以下前提条件：
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 目标数据库实例为：
    - RDS MySQL 5.6、5.7、 8.0高可用系列、三节点企业系列。
    - PolarDB MySQL版 5.6集群版、5.7集群版、 8.0集群版、8.0高压缩引擎（X-Engine）。',
    ),
    'UpdateAutoSqlOptimizeStatus' => 
    array (
      'summary' => '调用UpdateAutoSqlOptimizeStatus接口，批量开启、修改或关闭自动SQL优化功能。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Instances',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID，多个ID间以英文逗号（,）分隔。

> 最多不能输入超过50个数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-bp10usoc1erj7****,rm-bp10usoc1erj7****',
          ),
        ),
        1 => 
        array (
          'name' => 'Status',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '自动SQL优化功能的状态：

- **0**：关闭自动SQL优化功能。
- **1**：设置为**SQL诊断并自动索引创建**。
- **3**：设置为**仅SQL诊断**。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Success' => 
                  array (
                    'description' => '设置自动SQL优化功能请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                    'type' => 'string',
                    'example' => 'false',
                  ),
                  'ErrorCode' => 
                  array (
                    'description' => '错误码：

- **-1001**：参数错误。
- **-91029**：系统错误。

',
                    'type' => 'string',
                    'example' => '-1001',
                  ),
                  'ErrorMsg' => 
                  array (
                    'description' => '错误信息。',
                    'type' => 'string',
                    'example' => 'invalid param',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => 'OpenAPI请求的ID。',
                'type' => 'string',
                'example' => 'A52AD37C-35ED-581A-AC23-2232BE54****',
              ),
              'Success' => 
              array (
                'description' => 'OpenAPI请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Success\\": \\"false\\",\\n    \\"ErrorCode\\": \\"-1001\\",\\n    \\"ErrorMsg\\": \\"invalid param\\"\\n  },\\n  \\"RequestId\\": \\"A52AD37C-35ED-581A-AC23-2232BE54****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<UpdateAutoSqlOptimizeStatusResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Success>false</Success>\\n        <ErrorCode>-1001</ErrorCode>\\n        <ErrorMsg>invalid param</ErrorMsg>\\n    </Data>\\n    <RequestId>A52AD37C-35ED-581A-AC23-2232BE54****</RequestId>\\n    <Success>true</Success>\\n</UpdateAutoSqlOptimizeStatusResponse>","errorExample":""}]',
      'title' => '批量开启、修改或关闭自动SQL优化功能',
      'description' => '使用该接口需满足以下前提条件：
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。

- 目标数据库实例已开启DAS企业版，您可以调用[EnableDasPro](~~411645~~)接口为指定数据库实例开启DAS企业版。

- 目标数据库实例已开启自治服务，详情请参见[自治中心](~~152139~~)。

- 本接口适用的数据库引擎为：
    - RDS MySQL高可用系列、三节点企业系列
    - PolarDB MySQL版的集群版、高压缩引擎（X-Engine）',
    ),
    'GetSqlOptimizeAdvice' => 
    array (
      'summary' => '调用GetSqlOptimizeAdvice接口，查询DAS自动SQL优化产生的诊断建议。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，取值：

- **MySQL**：RDS MySQL。
- **PolarDBMySQL**：PolarDB MySQL版。
',
            'type' => 'string',
            'required' => false,
            'example' => 'MySQL',
          ),
        ),
        2 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。
>仅支持RDS MySQL、PolarDB MySQL版实例。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        3 => 
        array (
          'name' => 'StartDt',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询开始日期，格式：<i>yyyyMMdd</i>（UTC时间）。

- 为空时，默认为当前日期的前一天。
- 只能查询当前日期前一天及之前的数据。',
            'type' => 'string',
            'required' => false,
            'example' => '20210916',
          ),
        ),
        4 => 
        array (
          'name' => 'EndDt',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询结束日期，格式：<i>yyyyMMdd</i>（UTC时间）。

- 为空时，默认为当前日期的前一天。
- 只能查询当前日期前一天及之前的数据，查询开始日期和查询结束日期的间隔不能超过30天。',
            'type' => 'string',
            'required' => false,
            'example' => '20210917',
          ),
        ),
        5 => 
        array (
          'name' => 'Region',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例所属地域，取值：

- **cn-china**：中国内地。
- **cn-hongkong**：中国香港。
- **ap-southeast-1**：新加坡。

此参数只有在请求参数**InstanceIds**为空时有效。如果请求参数**InstanceIds**为空时，按照**Region**参数设置的地域获取数据，系统默认实例所属地域为**cn-china**；如果请求参数**InstanceIds**不为空时，即使设置了**Region**参数，也以**InstanceIds**所传入的第一个实例所在地域为准获取数据。

> 在中国内地各地域创建的实例，传入此参数时，都为**cn-china**。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-china',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回Successful，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表，包括信息总数、错误码等。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '任务运行状态：

- **INIT**：初始化。
- **RUNNING**：运行中。
- **FINISH**：完成。
- **FAILED**：失败。',
                    'type' => 'string',
                    'example' => 'FINISH',
                  ),
                  'StatusCode' => 
                  array (
                    'description' => '任务状态码说明：

- **NO_DATA**：没有数据。
- **INTERNAL_ERROR**：内部错误。
- **SUCCESS**：成功。',
                    'type' => 'string',
                    'example' => 'SUCCESS',
                  ),
                  'DownloadUrl' => 
                  array (
                    'description' => '文件下载的链接。',
                    'type' => 'string',
                    'example' => 'https://das-sql-optimize.oss-cn-shanghai.aliyuncs.com/adb/oss_sql_optimize_advice/1083*******',
                  ),
                  'CreateTime' => 
                  array (
                    'description' => '任务创建时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'string',
                    'example' => '1632303861000',
                  ),
                  'ExpireTime' => 
                  array (
                    'description' => '文件过期时间，格式为Unix时间戳，单位为毫秒。
>任务创建3天后，文件过期。',
                    'type' => 'string',
                    'example' => '1632563061000',
                  ),
                  'TaskId' => 
                  array (
                    'description' => '任务ID。',
                    'type' => 'string',
                    'example' => '2021091710461519216****',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"FINISH\\",\\n    \\"StatusCode\\": \\"SUCCESS\\",\\n    \\"DownloadUrl\\": \\"https://das-sql-optimize.oss-cn-shanghai.aliyuncs.com/adb/oss_sql_optimize_advice/1083*******\\",\\n    \\"CreateTime\\": \\"1632303861000\\",\\n    \\"ExpireTime\\": \\"1632563061000\\",\\n    \\"TaskId\\": \\"2021091710461519216****\\"\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetSqlOptimizeAdviceResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Status>FINISH</Status>\\n        <StatusCode>SUCCESS</StatusCode>\\n        <DownloadUrl>https://das-sql-optimize.oss-cn-shanghai.aliyuncs.com/adb/oss_sql_optimize_advice/1083*******</DownloadUrl>\\n        <CreateTime>1632303861000</CreateTime>\\n        <ExpireTime>1632563061000</ExpireTime>\\n        <TaskId>2021091710461519216****</TaskId>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetSqlOptimizeAdviceResponse>","errorExample":""}]',
      'title' => '查询自动SQL优化产生的诊断建议',
      'description' => 'SQL诊断功能提供实例诊断建议，您可通过诊断建议优化实例的索引，详情请参见[自动SQL优化](~~167895~~)。

> 调用本接口只能查询由DAS自动SQL优化功能产生的诊断建议。

使用该接口需满足以下前提条件：

- 数据库引擎为RDS MySQL和PolarDB MySQL版。
- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'GetInstanceSqlOptimizeStatistic' => 
    array (
      'summary' => '调用GetInstanceSqlOptimizeStatistic接口，获取指定时间段内自动SQL优化任务的统计数据，包括任务总数和最大收益等。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '实例ID',
            'description' => '数据库实例ID。

> 仅支持RDS MySQL、PolarDB MySQL版数据库实例。',
            'type' => 'string',
            'required' => true,
            'example' => 'pc-wz90h9560rvdz****',
          ),
        ),
        1 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '开始时间',
            'description' => '查询开始时间，格式为Unix时间戳（UTC时间），单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1661308902060',
          ),
        ),
        2 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '结束时间',
            'description' => '查询结束时间，格式为Unix时间戳（UTC时间），单位为毫秒。',
            'type' => 'string',
            'required' => true,
            'example' => '1662518540764',
          ),
        ),
        3 => 
        array (
          'name' => 'NodeId',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '子节点ID',
            'description' => '节点ID。

> 对于RDS MySQL集群系列数据库实例或PolarDB MySQL版数据库实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-bp12v7243x012****',
          ),
        ),
        4 => 
        array (
          'name' => 'Threshold',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '阈值',
            'description' => '自动SQL优化事件的持续时间阈值。
设置此参数后，只会统计持续时间不超过阈值的自动SQL优化事件。

> 此参数为备用参数，当前暂不生效。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        5 => 
        array (
          'name' => 'FilterEnable',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '是否过滤专业版',
            'description' => '是否过滤开启了DAS企业版的数据库实例：
- **true**：是。
- **false**：否。

> 取值为**true**时，只统计未开启DAS企业版的数据库实例；取值为**false**时，统计所有数据库实例。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'false',
          ),
        ),
        6 => 
        array (
          'name' => 'UseMerging',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '是否合并事件',
            'description' => '是否合并事件：
- **true**：是。
- **false**：否。

> 此参数为备用参数，当前暂不生效。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'true',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回信息列表。',
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '详细信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'count' => 
                  array (
                    'title' => 'SQL自动优化事件总数',
                    'description' => '自动SQL优化事件总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '16',
                  ),
                  'improvement' => 
                  array (
                    'title' => '收益倍数',
                    'description' => '返回的自动SQL优化事件中，SQL优化后的最大收益倍数。',
                    'type' => 'number',
                    'format' => 'double',
                    'example' => '1003',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"count\\": 16,\\n    \\"improvement\\": 1003\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetInstanceSqlOptimizeStatisticResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <count>16</count>\\n        <improvement>1003</improvement>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetInstanceSqlOptimizeStatisticResponse>","errorExample":""}]',
      'title' => ' 获取自动SQL优化事件的统计数据',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 数据库引擎为RDS MySQL或PolarDB MySQL版。',
    ),
    'UpdateAutoResourceOptimizeRulesAsync' => 
    array (
      'summary' => '调用UpdateAutoResourceOptimizeRulesAsync接口，采用异步方式，批量设置指定数据库实例空间碎片自动回收功能的配置参数。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'none',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。

> 数据格式为JSONArray，例如`[\'实例ID1\',\'实例ID2\']`，实例ID间用英文逗号（,）分隔。

',
            'type' => 'string',
            'required' => true,
            'example' => '[\'rm-2ze8g2am97624****\',\'rm-2ze9xrhze0709****\']',
          ),
        ),
        2 => 
        array (
          'name' => 'TableSpaceSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '触发空间碎片自动回收单个物理表的最小空间，取值范围：**5**~**100**，单位为GB。',
            'type' => 'number',
            'format' => 'double',
            'required' => true,
            'example' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'TableFragmentationRatio',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '触发空间碎片自动回收单个物理表的碎片率，取值范围：**0.10**~**0.99**。',
            'type' => 'number',
            'format' => 'double',
            'required' => true,
            'example' => '0.2',
          ),
        ),
        4 => 
        array (
          'name' => 'ResultId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '异步请求的ID。
> 异步调用后不会立即返回完整结果，首先需要调用该接口获取**ResultId**，然后使用返回数据的**ResultId**，重新发起调用，直到**isFinish**取值为**true**时，返回完整结果。即获取一次完整数据，至少需要调用该接口两次。',
            'type' => 'string',
            'required' => false,
            'example' => 'async__507044db6c4eadfa2dab9b084e80****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Fail' => 
                  array (
                    'description' => '请求是否失败：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'ConfigResponse' => 
                  array (
                    'description' => '批量设置的返回数据。
> 异步请求完成时（即isFinish取值为**true**时）才会返回该数据。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'TotalInstanceCount' => 
                      array (
                        'description' => '总数据库实例数量。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '2',
                      ),
                      'ConfigSuccessInstanceCount' => 
                      array (
                        'description' => '设置成功的数据库实例数量。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1',
                      ),
                      'ConfigFailInstanceCount' => 
                      array (
                        'description' => '设置失败的数据库实例数量。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1',
                      ),
                      'ConfigSuccessInstanceList' => 
                      array (
                        'description' => '设置成功的数据库实例列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ConfigSuccess' => 
                            array (
                              'description' => '设置是否成功：

- **true**：是。

- **false**：否。',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                            'InstanceId' => 
                            array (
                              'description' => '数据库实例ID。',
                              'type' => 'string',
                              'example' => 'rm-2ze8g2am97624****',
                            ),
                          ),
                        ),
                      ),
                      'ConfigFailInstanceList' => 
                      array (
                        'description' => '设置失败的数据库实例列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ConfigSuccess' => 
                            array (
                              'description' => '设置是否成功：

- **true**：是。

- **false**：否。',
                              'type' => 'boolean',
                              'example' => 'false',
                            ),
                            'InstanceId' => 
                            array (
                              'description' => '数据库实例ID。',
                              'type' => 'string',
                              'example' => 'rm-2ze9xrhze0709****',
                            ),
                            'ErrorMessage' => 
                            array (
                              'description' => '错误信息。',
                              'type' => 'string',
                              'example' => 'Only Support DAS Pro High-availability Edition RDS MySQL 5.6, 5.7, 8.0 instance, and CPU cores >= 4, innodb_file_per_table=ON',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'ResultId' => 
                  array (
                    'description' => '异步请求的ID。',
                    'type' => 'string',
                    'example' => 'async__20ee808e72257f16a4fe024057ca****',
                  ),
                  'IsFinish' => 
                  array (
                    'description' => '异步请求是否执行完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'State' => 
                  array (
                    'description' => '异步请求的执行状态：

- **RUNNING**：正在运行。

- **SUCCESS**：成功。

- **FAIL**：失败。',
                    'type' => 'string',
                    'example' => 'SUCCESS',
                  ),
                  'Complete' => 
                  array (
                    'description' => '异步请求是否执行完成：

- **true**：是。

- **false**：否。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'Timestamp' => 
                  array (
                    'description' => '执行时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1645668213000',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '9CB97BC4-6479-55D0-B9D0-EA925AFE****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"Fail\\": false,\\n    \\"ConfigResponse\\": {\\n      \\"TotalInstanceCount\\": 2,\\n      \\"ConfigSuccessInstanceCount\\": 1,\\n      \\"ConfigFailInstanceCount\\": 1,\\n      \\"ConfigSuccessInstanceList\\": [\\n        {\\n          \\"ConfigSuccess\\": true,\\n          \\"InstanceId\\": \\"rm-2ze8g2am97624****\\"\\n        }\\n      ],\\n      \\"ConfigFailInstanceList\\": [\\n        {\\n          \\"ConfigSuccess\\": false,\\n          \\"InstanceId\\": \\"rm-2ze9xrhze0709****\\",\\n          \\"ErrorMessage\\": \\"Only Support DAS Pro High-availability Edition RDS MySQL 5.6, 5.7, 8.0 instance, and CPU cores >= 4, innodb_file_per_table=ON\\"\\n        }\\n      ]\\n    },\\n    \\"ResultId\\": \\"async__20ee808e72257f16a4fe024057ca****\\",\\n    \\"IsFinish\\": true,\\n    \\"State\\": \\"SUCCESS\\",\\n    \\"Complete\\": true,\\n    \\"Timestamp\\": 1645668213000\\n  },\\n  \\"RequestId\\": \\"9CB97BC4-6479-55D0-B9D0-EA925AFE****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<UpdateAutoResourceOptimizeRulesAsyncResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <Fail>false</Fail>\\n        <ConfigResponse>\\n            <TotalInstanceCount>2</TotalInstanceCount>\\n            <ConfigSuccessInstanceCount>1</ConfigSuccessInstanceCount>\\n            <ConfigFailInstanceCount>1</ConfigFailInstanceCount>\\n            <ConfigSuccessInstanceList>\\n                <ConfigSuccess>true</ConfigSuccess>\\n                <InstanceId>rm-2ze8g2am97624****</InstanceId>\\n            </ConfigSuccessInstanceList>\\n            <ConfigFailInstanceList>\\n                <ConfigSuccess>false</ConfigSuccess>\\n                <InstanceId>rm-2ze9xrhze0709****</InstanceId>\\n                <ErrorMessage>Only Support DAS Pro High-availability Edition RDS MySQL 5.6, 5.7, 8.0 instance, and CPU cores &gt;= 4, innodb_file_per_table=ON</ErrorMessage>\\n            </ConfigFailInstanceList>\\n        </ConfigResponse>\\n        <ResultId>async__20ee808e72257f16a4fe024057ca****</ResultId>\\n        <IsFinish>true</IsFinish>\\n        <State>SUCCESS</State>\\n        <Complete>true</Complete>\\n        <Timestamp>1645668213000</Timestamp>\\n    </Data>\\n    <RequestId>9CB97BC4-6479-55D0-B9D0-EA925AFE****</RequestId>\\n    <Success>true</Success>\\n</UpdateAutoResourceOptimizeRulesAsyncResponse>","errorExample":""}]',
      'title' => '设置空间碎片自动回收功能的配置参数',
      'description' => '> 异步调用后不会立即返回完整结果，首先需要调用该接口获取**ResultId**，然后使用返回数据的**ResultId**，重新发起调用，直到**isFinish**取值为**true**时，返回完整结果。即获取一次完整数据，至少需要调用该接口两次。

使用该接口需满足以下前提条件：
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。

- 数据库实例类型为RDS MySQL高可用系列。

- 数据库实例已开启DAS企业版，您可以调用[DescribeInstanceDasPro](~~413866~~)查询。

- 数据库实例的CPU规格不小于4核，且**innodb_file_per_table**参数值为**ON**。',
    ),
    'DisableAutoResourceOptimizeRules' => 
    array (
      'summary' => '调用DisableAutoResourceOptimizeRules接口，批量关闭指定数据库实例的空间碎片自动回收功能。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'none',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。

> 数据格式为JSONArray，例如`[\'实例ID1\',\'实例ID2\']`，实例ID间用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => true,
            'example' => '[\'rm-2ze8g2am97624****\',\'rm-2ze9xrhze0709****\']',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'TotalInstanceCount' => 
                  array (
                    'description' => '总数据库实例ID数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '2',
                  ),
                  'ConfigSuccessInstanceCount' => 
                  array (
                    'description' => '关闭空间碎片自动回收功能成功的数据库实例数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'ConfigFailInstanceCount' => 
                  array (
                    'description' => '关闭空间碎片自动回收功能失败的数据库实例数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'ConfigSuccessInstanceList' => 
                  array (
                    'description' => '关闭空间碎片自动回收功能成功的数据库实例列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ConfigSuccess' => 
                        array (
                          'description' => '关闭设置是否成功：

- **true**：是。

- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '数据库实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze8g2am97624****',
                        ),
                      ),
                    ),
                  ),
                  'ConfigFailInstanceList' => 
                  array (
                    'description' => '关闭空间碎片自动回收功能失败的数据库实例列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ConfigSuccess' => 
                        array (
                          'description' => '关闭设置是否成功：
- **true**：是。

- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '数据库实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze9xrhze0709****',
                        ),
                        'ErrorMessage' => 
                        array (
                          'description' => '错误信息。',
                          'type' => 'string',
                          'example' => 'cannot found instance by rm-2ze9xrhze0709****',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"TotalInstanceCount\\": 2,\\n    \\"ConfigSuccessInstanceCount\\": 1,\\n    \\"ConfigFailInstanceCount\\": 1,\\n    \\"ConfigSuccessInstanceList\\": [\\n      {\\n        \\"ConfigSuccess\\": true,\\n        \\"InstanceId\\": \\"rm-2ze8g2am97624****\\"\\n      }\\n    ],\\n    \\"ConfigFailInstanceList\\": [\\n      {\\n        \\"ConfigSuccess\\": false,\\n        \\"InstanceId\\": \\"rm-2ze9xrhze0709****\\",\\n        \\"ErrorMessage\\": \\"cannot found instance by rm-2ze9xrhze0709****\\"\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<DisableAutoResourceOptimizeRulesResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <TotalInstanceCount>2</TotalInstanceCount>\\n        <ConfigSuccessInstanceCount>1</ConfigSuccessInstanceCount>\\n        <ConfigFailInstanceCount>1</ConfigFailInstanceCount>\\n        <ConfigSuccessInstanceList>\\n            <ConfigSuccess>true</ConfigSuccess>\\n            <InstanceId>rm-2ze8g2am97624****</InstanceId>\\n        </ConfigSuccessInstanceList>\\n        <ConfigFailInstanceList>\\n            <ConfigSuccess>false</ConfigSuccess>\\n            <InstanceId>rm-2ze9xrhze0709****</InstanceId>\\n            <ErrorMessage>cannot found instance by rm-2ze9xrhze0709****</ErrorMessage>\\n        </ConfigFailInstanceList>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</DisableAutoResourceOptimizeRulesResponse>","errorExample":""}]',
      'title' => '关闭空间碎片自动回收功能',
      'description' => '在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
',
    ),
    'GetAutoResourceOptimizeRules' => 
    array (
      'summary' => '获取指定数据库实例的空间碎片自动回收规则。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'none',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。

- 数据格式为JSONArray，例如`[\'实例ID1\',\'实例ID2\']`，实例ID间用英文逗号（,）分隔。
- 不输入数据库实例ID时，默认返回当前账号曾经开启过空间碎片自动回收功能的全部数据库实例信息，包括：
    - 正在使用该功能的数据库实例。
    - 已关闭该功能的数据库实例（包含已经关闭了DAS企业版数据库实例，但不包含已经释放的数据库实例）。',
            'type' => 'string',
            'required' => false,
            'example' => '[\'rm-2ze8g2am97624****\',\'rm-2vc54m2a6pd6p****\',\'rm-2ze9xrhze0709****\',\'rm-2ze8g2am97627****\']',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '返回的数据。

',
                'type' => 'object',
                'properties' => 
                array (
                  'TotalAutoResourceOptimizeRulesCount' => 
                  array (
                    'description' => '所有开启过空间碎片自动回收功能的数据库实例数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '3',
                  ),
                  'EnableAutoResourceOptimizeCount' => 
                  array (
                    'description' => '正在使用空间碎片自动回收功能的数据库实例数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'TurnOffAutoResourceOptimizeCount' => 
                  array (
                    'description' => '曾经开启并且当前已关闭空间碎片自动回收功能的数据库实例数量。
',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'HasEnableRuleButNotDasProCount' => 
                  array (
                    'description' => '已开启并且未关闭空间碎片自动回收功能，但已不再使用DAS企业版的数据库实例数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'EnableAutoResourceOptimizeList' => 
                  array (
                    'description' => '正在使用空间碎片自动回收功能的数据库实例信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'InstanceId' => 
                        array (
                          'description' => '数据库实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze8g2am97624****',
                        ),
                        'AutoDefragment' => 
                        array (
                          'description' => '是否开启了自动空间碎片回收功能。

- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'TableSpaceSize' => 
                        array (
                          'description' => '触发空间碎片自动回收单个物理表的最小空间，单位为GB。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '10',
                        ),
                        'DasProOn' => 
                        array (
                          'description' => '是否开启了DAS企业版。
- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'TableFragmentationRatio' => 
                        array (
                          'description' => '触发空间碎片自动回收单个物理表的碎片率。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.2',
                        ),
                        'UserId' => 
                        array (
                          'description' => '用户ID，即创建数据库实例的阿里云主账号ID。',
                          'type' => 'string',
                          'example' => '140692647406****',
                        ),
                      ),
                    ),
                  ),
                  'TurnOffAutoResourceOptimizeList' => 
                  array (
                    'description' => '曾经开启并且当前已关闭空间碎片自动回收功能的数据库实例信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'InstanceId' => 
                        array (
                          'description' => '数据库实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2vc54m2a6pd6p****',
                        ),
                        'AutoDefragment' => 
                        array (
                          'description' => '是否开启了自动空间碎片回收功能。

- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'TableSpaceSize' => 
                        array (
                          'description' => '触发空间碎片自动回收单个物理表的最小空间，单位为GB。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '10',
                        ),
                        'DasProOn' => 
                        array (
                          'description' => '是否开启了DAS企业版。
- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'TableFragmentationRatio' => 
                        array (
                          'description' => '触发空间碎片自动回收单个物理表的碎片率。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.2',
                        ),
                        'UserId' => 
                        array (
                          'description' => '用户ID，即创建数据库实例的阿里云主账号ID。',
                          'type' => 'string',
                          'example' => '140692647406****',
                        ),
                      ),
                    ),
                  ),
                  'HasEnableRuleButNotDasProList' => 
                  array (
                    'description' => '已开启并且未关闭空间碎片自动回收功能，但已不再使用DAS企业版的数据库实例列表。
> 此类数据库实例不会执行空间碎片自动回收，直至再次为数据库实例开启DAS企业版。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'InstanceId' => 
                        array (
                          'description' => '数据库实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze9xrhze0709****',
                        ),
                        'AutoDefragment' => 
                        array (
                          'description' => '是否开启了自动空间碎片回收功能。

- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'TableSpaceSize' => 
                        array (
                          'description' => '触发空间碎片自动回收单个物理表的最小空间，单位为GB。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '10',
                        ),
                        'DasProOn' => 
                        array (
                          'description' => '是否开启了DAS企业版。
- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'TableFragmentationRatio' => 
                        array (
                          'description' => '触发空间碎片自动回收单个物理表的碎片率。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.2',
                        ),
                        'UserId' => 
                        array (
                          'description' => '用户ID，即创建数据库实例的阿里云主账号ID。',
                          'type' => 'string',
                          'example' => '140692647406****',
                        ),
                      ),
                    ),
                  ),
                  'NeverEnableAutoResourceOptimizeOrReleasedInstanceCount' => 
                  array (
                    'description' => '从未开启过空间碎片自动回收或者实例不存在的数据库实例数量。
> 实例不存在：数据库实例已经释放或者传入的数据库实例ID存在错误。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList' => 
                  array (
                    'description' => '从未开启过空间碎片自动回收或者实例不存在的数据库实例信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '数据库实例ID。',
                      'type' => 'string',
                      'example' => 'rm-2ze8g2am97624****',
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": 200,\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": {\\n    \\"TotalAutoResourceOptimizeRulesCount\\": 3,\\n    \\"EnableAutoResourceOptimizeCount\\": 1,\\n    \\"TurnOffAutoResourceOptimizeCount\\": 1,\\n    \\"HasEnableRuleButNotDasProCount\\": 1,\\n    \\"EnableAutoResourceOptimizeList\\": [\\n      {\\n        \\"InstanceId\\": \\"rm-2ze8g2am97624****\\",\\n        \\"AutoDefragment\\": true,\\n        \\"TableSpaceSize\\": 10,\\n        \\"DasProOn\\": true,\\n        \\"TableFragmentationRatio\\": 0.2,\\n        \\"UserId\\": \\"140692647406****\\"\\n      }\\n    ],\\n    \\"TurnOffAutoResourceOptimizeList\\": [\\n      {\\n        \\"InstanceId\\": \\"rm-2vc54m2a6pd6p****\\",\\n        \\"AutoDefragment\\": false,\\n        \\"TableSpaceSize\\": 10,\\n        \\"DasProOn\\": true,\\n        \\"TableFragmentationRatio\\": 0.2,\\n        \\"UserId\\": \\"140692647406****\\"\\n      }\\n    ],\\n    \\"HasEnableRuleButNotDasProList\\": [\\n      {\\n        \\"InstanceId\\": \\"rm-2ze9xrhze0709****\\",\\n        \\"AutoDefragment\\": true,\\n        \\"TableSpaceSize\\": 10,\\n        \\"DasProOn\\": false,\\n        \\"TableFragmentationRatio\\": 0.2,\\n        \\"UserId\\": \\"140692647406****\\"\\n      }\\n    ],\\n    \\"NeverEnableAutoResourceOptimizeOrReleasedInstanceCount\\": 1,\\n    \\"NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList\\": [\\n      \\"rm-2ze8g2am97624****\\"\\n    ]\\n  },\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetAutoResourceOptimizeRulesResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>\\n        <TotalAutoResourceOptimizeRulesCount>3</TotalAutoResourceOptimizeRulesCount>\\n        <EnableAutoResourceOptimizeCount>1</EnableAutoResourceOptimizeCount>\\n        <TurnOffAutoResourceOptimizeCount>1</TurnOffAutoResourceOptimizeCount>\\n        <HasEnableRuleButNotDasProCount>1</HasEnableRuleButNotDasProCount>\\n        <EnableAutoResourceOptimizeList>\\n            <InstanceId>rm-2ze8g2am97624****</InstanceId>\\n            <AutoDefragment>true</AutoDefragment>\\n            <TableSpaceSize>10</TableSpaceSize>\\n            <DasProOn>true</DasProOn>\\n            <TableFragmentationRatio>0.2</TableFragmentationRatio>\\n            <UserId>140692647406****</UserId>\\n        </EnableAutoResourceOptimizeList>\\n        <TurnOffAutoResourceOptimizeList>\\n            <InstanceId>rm-2vc54m2a6pd6p****</InstanceId>\\n            <AutoDefragment>false</AutoDefragment>\\n            <TableSpaceSize>10</TableSpaceSize>\\n            <DasProOn>true</DasProOn>\\n            <TableFragmentationRatio>0.2</TableFragmentationRatio>\\n            <UserId>140692647406****</UserId>\\n        </TurnOffAutoResourceOptimizeList>\\n        <HasEnableRuleButNotDasProList>\\n            <InstanceId>rm-2ze9xrhze0709****</InstanceId>\\n            <AutoDefragment>true</AutoDefragment>\\n            <TableSpaceSize>10</TableSpaceSize>\\n            <DasProOn>false</DasProOn>\\n            <TableFragmentationRatio>0.2</TableFragmentationRatio>\\n            <UserId>140692647406****</UserId>\\n        </HasEnableRuleButNotDasProList>\\n        <NeverEnableAutoResourceOptimizeOrReleasedInstanceCount>1</NeverEnableAutoResourceOptimizeOrReleasedInstanceCount>\\n        <NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList>rm-2ze8g2am97624****</NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList>\\n    </Data>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</GetAutoResourceOptimizeRulesResponse>","errorExample":""}]',
      'title' => '获取空间碎片自动回收规则',
      'description' => '使用该接口需满足以下前提条件：
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。

- 实例类型为RDS MySQL高可用系列。

- 数据库实例的CPU规格不小于4核，且**innodb_file_per_table**参数值为**ON**。',
    ),
    'ModifyAutoScalingConfig' => 
    array (
      'summary' => '调用ModifyAutoScalingConfig接口，修改实例弹性伸缩功能配置。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'Spec',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => '规格弹性伸缩功能配置项。',
            'type' => 'object',
            'properties' => 
            array (
              'Apply' => 
              array (
                'description' => '是否应用规格弹性伸缩功能配置项**Spec**下的配置：

- **true**：是。
- **false**：否。',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'Upgrade' => 
              array (
                'description' => '是否开启规格自动扩容：

- **true**：是。
- **false**：否。',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'CpuUsageUpperThreshold' => 
              array (
                'description' => '触发规格自动扩容的CPU平均利用率阈值，单位为%，取值：

- **50**
- **60**
- **70**
- **80**
- **90**

><notice>目标数据库实例为PolarDB MySQL版的集群版、RDS MySQL高可用系列云盘版时，需要设置本参数。
></notice>',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'example' => '70',
                'enum' => 
                array (
                  0 => '50',
                  1 => '60',
                  2 => '70',
                  3 => '80',
                  4 => '90',
                ),
              ),
              'MemUsageUpperThreshold' => 
              array (
                'description' => '触发规格自动扩容的内存平均利用率阈值，单位为%，取值：
- **50**
- **60**
- **70**
- **80**
- **90**

><notice>目标数据库实例为中国站Redis云原生（原云盘）社区版时，需要设置本参数。
></notice>',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'example' => '70',
                'enum' => 
                array (
                  0 => '50',
                  1 => '60',
                  2 => '70',
                  3 => '80',
                  4 => '90',
                ),
              ),
              'MaxSpec' => 
              array (
                'description' => '自动扩容的规格上限。仅支持扩容到数据库实例同系列的更高规格，详情请参见各数据库实例的产品规格文档：
<props="china">

- PolarDB MySQL版的集群版请参见[计算节点规格](~~102542~~)。
- RDS MySQL高可用系列云盘版请参见[产品规格](~~276974~~)。
- Redis云原生（原云盘）社区版请参见[实例规格](~~144986~~)。

</props>

<props="intl">

- PolarDB MySQL版的集群版请参见[计算节点规格](~~102542~~)。
- RDS MySQL高可用系列云盘版请参见[产品规格](~~276974~~)。

</props>',
                'type' => 'string',
                'required' => false,
                'example' => 'polar.mysql.x8.12xlarge
',
              ),
              'MaxReadOnlyNodes' => 
              array (
                'description' => '实例只读节点数的最大值。

><notice>目标数据库实例为PolarDB MySQL版的集群版时，需要设置本参数。
></notice>',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'maximum' => '15',
                'minimum' => '1',
                'example' => '10',
              ),
              'ObservationWindowSize' => 
              array (
                'description' => '观测窗口。参数值由数值和时间单位后缀组成，支持的数据库实例及其取值如下，其中时间后缀**m**表示分钟，**h**表示小时：

- PolarDB MySQL版的集群版：**5m**、**10m**、**15m**、**30m**。
- RDS MySQL高可用系列云盘版：**5m**、**20m**、**30m**、**40m**、**1h**。
- Redis云原生（原云盘）社区版：**5m**、**10m**、**15m**、**30m**。',
                'type' => 'string',
                'required' => false,
                'example' => '5m',
              ),
              'CoolDownTime' => 
              array (
                'description' => '静默期。参数值由数值和时间单位后缀组成，支持的数据库实例及其取值如下，其中时间单位后缀**m**表示分钟，**h**表示小时，**d**：表示天：

- PolarDB MySQL版的集群版：**5m**、**10m**、**30m**、**1h**、**2h**、**3h**、**1d**、**7d**。
- RDS MySQL高可用系列云盘版：**5m**、**10m**、**30m**、**1h**、**2h**、**3h**、**1d**、**7d**。',
                'type' => 'string',
                'required' => false,
                'example' => '5m',
              ),
              'Downgrade' => 
              array (
                'description' => '是否开启规格自动回缩：
- **true**：是。
- **false**：否。

><notice>目标数据库实例为PolarDB MySQL版的集群版、RDS MySQL高可用系列云盘版时，需要设置本参数。
></notice>',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
            ),
            'required' => false,
          ),
        ),
        2 => 
        array (
          'name' => 'Storage',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => '存储自动扩容功能配置项。',
            'type' => 'object',
            'properties' => 
            array (
              'Apply' => 
              array (
                'description' => '是否应用存储自动扩容功能配置项**Storage**下的配置：

- **true**：是。
- **false**：否。',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'Upgrade' => 
              array (
                'description' => '是否开启存储自动扩容：

- **true**：是。
- **false**：否。',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'DiskUsageUpperThreshold' => 
              array (
                'description' => '触发存储自动扩容的存储空间平均利用率阈值，单位为%，取值：
- **50**
- **60**
- **70**
- **80**
- **90**',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'example' => '70',
                'enum' => 
                array (
                  0 => '50',
                  1 => '60',
                  2 => '70',
                  3 => '80',
                  4 => '90',
                ),
              ),
              'MaxStorage' => 
              array (
                'description' => '存储空间上限，需要大于等于实例当前存储空间总大小，取值：

- ESSD云盘上限：32000 GB。
- SSD云盘上限：6000 GB。

> SSD云盘已下线，建议[升级至ESSD云盘](~~314678~~)。',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'maximum' => '32000',
                'minimum' => '20',
                'example' => '32000',
              ),
            ),
            'required' => false,
          ),
        ),
        3 => 
        array (
          'name' => 'Bandwidth',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => '带宽弹性伸缩功能配置项。',
            'type' => 'object',
            'properties' => 
            array (
              'Apply' => 
              array (
                'description' => '是否应用带宽弹性伸缩功能配置项**Bandwidth**下的配置：

- **true**：是。
- **false**：否。',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'Upgrade' => 
              array (
                'description' => '是否开启带宽自动扩展：

- **true**：是。
- **false**：否。',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'BandwidthUsageUpperThreshold' => 
              array (
                'description' => '触发带宽自动扩展的带宽平均使用率阈值，单位为%，取值：

- **50**
- **60**
- **70**
- **80**
- **90**
- **95**',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'maximum' => '95',
                'minimum' => '50',
                'example' => '70',
                'enum' => 
                array (
                ),
              ),
              'ObservationWindowSize' => 
              array (
                'description' => '带宽自动扩展的观测窗口。参数值由数值和时间单位后缀组成，其中时间单位后缀**m**表示分钟：

- **1m**
- **5m**
- **10m**
- **15m**
- **30m**',
                'type' => 'string',
                'required' => false,
                'example' => '5m',
                'enum' => 
                array (
                  0 => '1m',
                  1 => '5m',
                  2 => '10m',
                  3 => '15m',
                  4 => '30m',
                ),
              ),
              'Downgrade' => 
              array (
                'description' => '是否开启带宽自动回缩：

- **true**：是。
- **false**：否。',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'BandwidthUsageLowerThreshold' => 
              array (
                'description' => '触发带宽自动回缩的带宽平均使用率阈值，单位为%，取值：

- **10**
- **20**
- **30**',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'maximum' => '70',
                'minimum' => '10',
                'example' => '30',
                'enum' => 
                array (
                ),
              ),
            ),
            'required' => false,
          ),
        ),
        4 => 
        array (
          'name' => 'Shard',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => '分片弹性伸缩功能配置项。',
            'type' => 'object',
            'properties' => 
            array (
              'Apply' => 
              array (
                'description' => '是否应用分片弹性伸缩功能配置项**Shard**下的配置：

- **true**：是。
- **false**：否。

><notice>仅当目标数据库实例为中国站Redis云原生（原云盘）版集群架构时，支持分片弹性伸缩功能。
></notice>',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'Upgrade' => 
              array (
                'description' => '是否开启自动增加分片：

- **true**：是。
- **false**：否。',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'MemUsageUpperThreshold' => 
              array (
                'description' => '触发自动增加分片的内存平均利用率阈值，单位为%，取值：

- **50**
- **60**
- **70**
- **80**
- **90**',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'example' => '70',
                'enum' => 
                array (
                  0 => '50',
                  1 => '60',
                  2 => '70',
                  3 => '80',
                  4 => '90',
                ),
              ),
              'MaxShards' => 
              array (
                'description' => '实例总分片数的最大值， 取值为正整数，取值范围：4~32。',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'maximum' => '64',
                'minimum' => '2',
                'example' => '16',
              ),
              'UpgradeObservationWindowSize' => 
              array (
                'description' => '自动增加分片观测窗口。参数值由数值和时间单位后缀组成，其中时间单位后缀**m**表示分钟：

- **5m**
- **10m**
- **15m**
- **30m**
',
                'type' => 'string',
                'required' => false,
                'example' => '5m',
                'enum' => 
                array (
                  0 => '5m',
                  1 => '10m',
                  2 => '15m',
                  3 => '30m',
                ),
              ),
              'Downgrade' => 
              array (
                'description' => '自动减少分片是否开启：

- **true**：是。
- **false**：否。

>自动减少分片功能目前在灰度发布中。',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'MemUsageLowerThreshold' => 
              array (
                'description' => '触发自动减少分片的内存平均利用率阈值，单位为%，取值：

- **10**
- **20**
- **30**',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'example' => '30',
                'enum' => 
                array (
                  0 => '10',
                  1 => '20',
                  2 => '30',
                ),
              ),
              'MinShards' => 
              array (
                'description' => '实例总分片数的最小值，取值为正整数，取值范围：4~32。',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'maximum' => '64',
                'minimum' => '2',
                'example' => '4',
              ),
              'DowngradeObservationWindowSize' => 
              array (
                'description' => '自动减少分片观测窗口，参数由数值和时间单位后缀组成，其中时间单位后缀**h**表示小时，**d**表示天：

- **1h**
- **2h**
- **3h**
- **1d**
- **7d**',
                'type' => 'string',
                'required' => false,
                'example' => '1h',
                'enum' => 
                array (
                  0 => '1h',
                  1 => '2h',
                  2 => '3h',
                  3 => '1d',
                  4 => '7d',
                ),
              ),
            ),
            'required' => false,
          ),
        ),
        5 => 
        array (
          'name' => 'Resource',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => '资源弹性伸缩功能配置项。',
            'type' => 'object',
            'properties' => 
            array (
              'Apply' => 
              array (
                'description' => '是否应用资源弹性伸缩功能配置项**Resource**下的配置：

- **true**：是。
- **false**：否。',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'Enable' => 
              array (
                'description' => '是否开启资源弹性伸缩：

- **true**：是。
- **false**：否。',
                'type' => 'boolean',
                'required' => false,
                'example' => 'true',
                'default' => 'false',
              ),
              'CpuUsageUpperThreshold' => 
              array (
                'description' => '触发资源自动扩容的CPU平均利用率阈值，单位为%，取值：

- **70**
- **80**
- **90**',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'example' => '70',
                'enum' => 
                array (
                  0 => '70',
                  1 => '80',
                  2 => '90',
                ),
              ),
              'UpgradeObservationWindowSize' => 
              array (
                'description' => '扩容观测窗口。参数值由数值和时间单位后缀组成，其中时间单位后缀**m**表示分钟：

- **1m**
- **3m**
- **5m**
- **10m**
- **20m**
- **30m**',
                'type' => 'string',
                'required' => false,
                'enumValueTitles' => 
                array (
                  '30m' => '30m',
                  '5m' => '5m',
                  '3m' => '3m',
                  '1m' => '1m',
                  '10m' => '10m',
                  '20m' => '20m',
                ),
                'example' => '5m',
                'enum' => 
                array (
                  0 => '1m',
                  1 => '3m',
                  2 => '5m',
                  3 => '10m',
                  4 => '20m',
                  5 => '30m',
                ),
              ),
              'DowngradeObservationWindowSize' => 
              array (
                'description' => '缩容观测窗口。参数值由数值和时间单位后缀组成，其中时间单位后缀**m**表示分钟：

- **1m**
- **3m**
- **5m**
- **10m**
- **20m**
- **30m**',
                'type' => 'string',
                'required' => false,
                'example' => '5m',
                'enum' => 
                array (
                  0 => '1m',
                  1 => '3m',
                  2 => '5m',
                  3 => '10m',
                  4 => '20m',
                  5 => '30m',
                ),
              ),
            ),
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。

- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<ModifyAutoScalingConfigResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n</ModifyAutoScalingConfigResponse>","errorExample":""}]',
      'title' => '修改实例弹性伸缩功能配置',
      'description' => '<props="china">API支持修改数据库实例的**规格弹性伸缩**功能、**存储自动扩容**功能、**带宽弹性伸缩**功能、**分片弹性伸缩**功能以及**资源弹性伸缩**功能：</props>
<props="intl">API支持修改数据库实例的**规格弹性伸缩**功能、**存储自动扩容**功能、**带宽弹性伸缩**功能以及**资源弹性伸缩**功能：</props>
<props="china">

- 以下目标数据库实例支持修改**规格弹性伸缩**功能：
    - PolarDB MySQL版的集群版，功能介绍及费用说明参见[自动性能扩展](~~169686~~)。
    - RDS MySQL高可用系列云盘版，功能介绍及费用说明参见[自动性能扩展](~~169686~~)。
    - Redis云原生（原云盘）社区版，功能介绍及费用说明参见[开启自动扩容](~~208236~~)。

- 以下目标数据库实例支持修改**存储自动扩容**功能：
    - RDS MySQL高可用系列云盘实例，功能介绍及费用说明参见[自动空间扩展](~~173345~~)。

- 以下目标数据库实例支持修改**带宽弹性伸缩**功能：
    - Redis经典（原本地盘）实例，功能介绍及费用说明参见[自动调整带宽](~~216312~~)。

- 以下目标数据库实例支持修改**分片弹性伸缩**功能：
    - Redis云原生（原云盘）社区版集群架构，功能介绍及费用说明参见[自动增加分片](~~358868~~)。

- 以下目标数据库实例支持修改**资源弹性伸缩**功能：
    - RDS MySQL高可用系列本地盘版（通用型）和三节点企业系列（通用型），功能介绍及费用说明参见[自动性能扩展](~~169686~~)。

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。

</props>

<props="intl">

- 以下目标数据库实例支持修改**规格弹性伸缩**功能：
    - PolarDB MySQL版的集群版，功能介绍及费用说明参见[自动性能扩展](~~169686~~)。
    - RDS MySQL高可用系列云盘版，功能介绍及费用说明参见[自动性能扩展](~~169686~~)。

- 以下目标数据库实例支持修改**存储自动扩容**功能：
    - RDS MySQL高可用系列云盘实例，功能介绍及费用说明参见[自动空间扩展](~~173345~~)。

- 以下目标数据库实例支持修改**带宽弹性伸缩**功能：
    - Redis经典（原本地盘）实例，功能介绍及费用说明参见[自动调整带宽](~~216312~~)。

- 以下目标数据库实例支持修改**资源弹性伸缩**功能：
    - RDS MySQL三节点企业系列（通用型），功能介绍及费用说明参见[自动性能扩展](~~169686~~)。

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。

</props>',
    ),
    'DescribeAutoScalingConfig' => 
    array (
      'summary' => '调用DescribeAutoScalingConfig接口，查询实例弹性伸缩功能配置信息。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'pc-2ze1prap1k46r****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '实例弹性伸缩功能配置信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Spec' => 
                  array (
                    'description' => '规格弹性伸缩功能配置信息。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Upgrade' => 
                      array (
                        'description' => '规格自动扩容是否开启：

- **true**：是。
- **false**：否。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'CpuUsageUpperThreshold' => 
                      array (
                        'description' => '触发规格自动扩容的CPU平均利用率阈值，单位为%。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '70',
                      ),
                      'MemUsageUpperThreshold' => 
                      array (
                        'description' => '触发规格自动扩容的内存平均利用率阈值，单位为%。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '70',
                      ),
                      'MaxSpec' => 
                      array (
                        'description' => '自动扩容的规格上限。详情请参见各数据库实例的产品规格文档：
<props="china">

- PolarDB MySQL版的集群版请参见[计算节点规格](~~102542~~)。
- RDS MySQL高可用系列云盘版请参见[产品规格](~~276974~~)。
- Redis社区云盘版请参见[实例规格](~~144986~~)。

</props>

<props="intl">

- PolarDB MySQL版的集群版请参见[计算节点规格](~~102542~~)。
- RDS MySQL高可用系列云盘版请参见[产品规格](~~276974~~)。

</props>',
                        'type' => 'string',
                        'example' => 'polar.mysql.x8.12xlarge',
                      ),
                      'MaxReadOnlyNodes' => 
                      array (
                        'description' => '实例只读节点数的最大值。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '10',
                      ),
                      'ObservationWindowSize' => 
                      array (
                        'description' => '观测窗口。 返回值由数值和时间单位后缀组成，其中时间单位后缀含义如下：

- **s**：表示秒。
- **m**：表示分钟。
- **h**：表示小时。
- **d**：表示天。 

> 例如，返回**5m**表示5分钟。',
                        'type' => 'string',
                        'example' => '5m',
                      ),
                      'CoolDownTime' => 
                      array (
                        'description' => '静默期。返回值由数值和时间单位后缀组成，其中时间单位后缀含义如下：

- **s**：表示秒。
- **m**：表示分钟。
- **h**：表示小时。
- **d**：表示天。 

> 例如，返回**5m**表示5分钟。',
                        'type' => 'string',
                        'example' => '5m',
                      ),
                      'Downgrade' => 
                      array (
                        'description' => '规格自动回缩是否开启：

- **true**：是。
- **false**：否。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                    ),
                  ),
                  'Storage' => 
                  array (
                    'description' => '实例存储自动扩容功能配置信息。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Upgrade' => 
                      array (
                        'description' => '存储自动扩容是否开启：

- **true**：是。
- **false**：否。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'DiskUsageUpperThreshold' => 
                      array (
                        'description' => '触发存储自动扩容的存储空间平均利用率阈值，单位为%。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '70',
                      ),
                      'MaxStorage' => 
                      array (
                        'description' => '存储空间上限，单位为GB。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '32000',
                      ),
                    ),
                  ),
                  'Resource' => 
                  array (
                    'description' => '实例本地资源弹性伸缩功能配置信息。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Enable' => 
                      array (
                        'description' => '本地资源弹性伸缩是否开启：

- **true**：是。
- **false**：否。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'CpuUsageUpperThreshold' => 
                      array (
                        'description' => '触发本地资源自动扩容的CPU平均利用率阈值，单位为%。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '70',
                      ),
                      'CpuStep' => 
                      array (
                        'description' => 'CPU扩容步长。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '2',
                      ),
                      'UpgradeObservationWindowSize' => 
                      array (
                        'description' => '扩容观测窗口。返回值由数值和时间单位后缀组成，其中时间单位后缀含义如下：

- **s**：表示秒。
- **m**：表示分钟。
- **h**：表示小时。
- **d**：表示天。 

> 例如，返回**5m**表示5分钟。',
                        'type' => 'string',
                        'example' => '5m',
                      ),
                      'DowngradeObservationWindowSize' => 
                      array (
                        'description' => '缩容观测窗口。返回值由数值和时间单位后缀组成，其中时间单位后缀含义如下：

- **s**：表示秒。
- **m**：表示分钟。
- **h**：表示小时。
- **d**：表示天。 

> 例如，返回**5m**表示5分钟。',
                        'type' => 'string',
                        'example' => '5m',
                      ),
                    ),
                  ),
                  'Shard' => 
                  array (
                    'description' => '实例分片弹性伸缩功能配置信息。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Upgrade' => 
                      array (
                        'description' => '自动增加分片是否开启：

- **true**：是。
- **false**：否。
',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'MemUsageUpperThreshold' => 
                      array (
                        'description' => '触发自动增加分片的内存平均利用率阈值，单位为%。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '70',
                      ),
                      'MaxShards' => 
                      array (
                        'description' => '实例总分片数的最大值。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '16',
                      ),
                      'UpgradeObservationWindowSize' => 
                      array (
                        'description' => '自动增加分片观测窗口。返回值由数值和时间单位后缀组成，其中时间单位后缀含义如下：

- **s**：表示秒。
- **m**：表示分钟。
- **h**：表示小时。
- **d**：表示天。 

> 例如，返回**5m**表示5分钟。',
                        'type' => 'string',
                        'example' => '5m',
                      ),
                      'Downgrade' => 
                      array (
                        'description' => '自动减少分片是否开启：

- **true**：是。
- **false**：否。
',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'MemUsageLowerThreshold' => 
                      array (
                        'description' => '触发自动减少分片的内存平均利用率阈值，单位为%。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '30',
                      ),
                      'MinShards' => 
                      array (
                        'description' => '实例总分片数的最小值。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '4',
                      ),
                      'DowngradeObservationWindowSize' => 
                      array (
                        'description' => '自动减少分片观测窗口。返回值由数值和时间单位后缀组成，其中时间单位后缀含义如下：
- **s**：表示秒。
- **m**：表示分钟。
- **h**：表示小时。
- **d**：表示天。 

> 例如，返回**1d**表示1天。',
                        'type' => 'string',
                        'example' => '1d',
                      ),
                    ),
                  ),
                  'Bandwidth' => 
                  array (
                    'description' => '实例带宽弹性伸缩功能配置信息。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Upgrade' => 
                      array (
                        'description' => '带宽自动扩展是否开启：
- **true**：是。
- **false**：否。
',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'BandwidthUsageUpperThreshold' => 
                      array (
                        'description' => '触发带宽自动扩展的带宽平均使用率阈值，单位为%。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '70',
                      ),
                      'ObservationWindowSize' => 
                      array (
                        'description' => '带宽自动扩展的观测窗口。返回值由数值和时间单位后缀组成，其中时间单位后缀含义如下：

- **s**：表示秒。
- **m**：表示分钟。
- **h**：表示小时。
- **d**：表示天。 

> 例如，返回**5m**表示5分钟。',
                        'type' => 'string',
                        'example' => '5m',
                      ),
                      'Downgrade' => 
                      array (
                        'description' => '带宽自动回缩是否开启：

- **true**：是。
- **false**：否。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'BandwidthUsageLowerThreshold' => 
                      array (
                        'description' => '触发带宽自动回缩的带宽平均使用率阈值，单位为%。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '30',
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"Spec\\": {\\n      \\"Upgrade\\": true,\\n      \\"CpuUsageUpperThreshold\\": 70,\\n      \\"MemUsageUpperThreshold\\": 70,\\n      \\"MaxSpec\\": \\"polar.mysql.x8.12xlarge\\",\\n      \\"MaxReadOnlyNodes\\": 10,\\n      \\"ObservationWindowSize\\": \\"5m\\",\\n      \\"CoolDownTime\\": \\"5m\\",\\n      \\"Downgrade\\": true\\n    },\\n    \\"Storage\\": {\\n      \\"Upgrade\\": true,\\n      \\"DiskUsageUpperThreshold\\": 70,\\n      \\"MaxStorage\\": 32000\\n    },\\n    \\"Resource\\": {\\n      \\"Enable\\": true,\\n      \\"CpuUsageUpperThreshold\\": 70,\\n      \\"CpuStep\\": 2,\\n      \\"UpgradeObservationWindowSize\\": \\"5m\\",\\n      \\"DowngradeObservationWindowSize\\": \\"5m\\"\\n    },\\n    \\"Shard\\": {\\n      \\"Upgrade\\": true,\\n      \\"MemUsageUpperThreshold\\": 70,\\n      \\"MaxShards\\": 16,\\n      \\"UpgradeObservationWindowSize\\": \\"5m\\",\\n      \\"Downgrade\\": true,\\n      \\"MemUsageLowerThreshold\\": 30,\\n      \\"MinShards\\": 4,\\n      \\"DowngradeObservationWindowSize\\": \\"1d\\"\\n    },\\n    \\"Bandwidth\\": {\\n      \\"Upgrade\\": true,\\n      \\"BandwidthUsageUpperThreshold\\": 70,\\n      \\"ObservationWindowSize\\": \\"5m\\",\\n      \\"Downgrade\\": true,\\n      \\"BandwidthUsageLowerThreshold\\": 30\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeAutoScalingConfigResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <RequestId>B6D17591-B48B-4D31-9CD6-9B9796B2****</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <Spec>\\n            <Upgrade>true</Upgrade>\\n            <CpuUsageUpperThreshold>70</CpuUsageUpperThreshold>\\n            <MemUsageUpperThreshold>70</MemUsageUpperThreshold>\\n            <MaxSpec>polar.mysql.x8.12xlarge</MaxSpec>\\n            <MaxReadOnlyNodes>10</MaxReadOnlyNodes>\\n            <ObservationWindowSize>5m</ObservationWindowSize>\\n            <CoolDownTime>5m</CoolDownTime>\\n            <Downgrade>true</Downgrade>\\n        </Spec>\\n    </Data>\\n</DescribeAutoScalingConfigResponse>","errorExample":""}]',
      'title' => '查询实例弹性伸缩功能配置信息',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
    ),
    'DescribeAutoScalingHistory' => 
    array (
      'summary' => '调用DescribeAutoScalingHistory接口，查询实例弹性伸缩历史信息。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
        1 => 'http',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。

> 当前仅支持RDS MySQL实例。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'AutoScalingTaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询的弹性伸缩业务种类。当前仅支持**SPEC**，表示仅支持查询自动性能扩展历史信息。',
            'type' => 'string',
            'required' => true,
            'example' => 'SPEC',
          ),
        ),
        2 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务的开始时间，格式为Unix时间戳，单位为毫秒。

>查询任务的开始时间最大不能早于当前时间45天。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1675833788056',
          ),
        ),
        3 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询任务结束时间，格式为Unix时间戳，单位为毫秒。
>查询任务结束时间需晚于查询任务开始时间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1676605305796',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '状态码。200表示成功。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B6D17591-B48B-4D31-9CD6-9B9796B2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'title' => 'AutoScalingInstanceHistory',
                'description' => '弹性伸缩历史记录。',
                'type' => 'object',
                'properties' => 
                array (
                  'InstanceId' => 
                  array (
                    'description' => '实例ID。',
                    'type' => 'string',
                    'example' => 'rm-2ze1jdv45i7l6****',
                  ),
                  'SpecHistory' => 
                  array (
                    'description' => '自动性能扩展历史记录。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '自动性能扩展历史信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ScaleType' => 
                        array (
                          'description' => '自动性能扩展任务类型，取值：
- **SCALE_UP**：规格自动扩容。
- **SCALE_DOWN**：规格自动缩容。',
                          'type' => 'string',
                          'example' => 'SCALE_UP',
                        ),
                        'TaskExcuteStatus' => 
                        array (
                          'description' => '任务执行状态：
- **true**：执行成功。
- **false**：执行失败。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'ErrorCode' => 
                        array (
                          'description' => '扩缩容内部任务返回的错误码：

- **Insufficient_Balance** ：用户余额不足或存在未支付订单。
- **REACH_SPEC_UPPERBOUND** ：已达到用户规格上限。
- **Control_Error_Timeout_Msg** ：管控任务超时。
- **Invoke_Rds_Api_Error_Msg** ：调用RDS API失败。',
                          'type' => 'string',
                          'example' => 'Insufficient_Balance',
                        ),
                        'OriginInstanceClass' => 
                        array (
                          'description' => '原始实例规格码。',
                          'type' => 'string',
                          'example' => 'mysql.n2.large.2c',
                        ),
                        'TargetInstanceClass' => 
                        array (
                          'description' => '目标实例规格码。',
                          'type' => 'string',
                          'example' => 'mysql.n2.xlarge.2c',
                        ),
                        'OriginCore' => 
                        array (
                          'description' => '原始实例CPU核数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '4',
                        ),
                        'OriginMemory' => 
                        array (
                          'description' => '原始实例内存大小，单位GB。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '8',
                        ),
                        'TargetCore' => 
                        array (
                          'description' => '目标实例CPU核数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '8',
                        ),
                        'TargetMemory' => 
                        array (
                          'description' => '目标实例内存大小，单位GB。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '16',
                        ),
                        'TaskTime' => 
                        array (
                          'description' => '任务执行时间，格式为Unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1684830763000',
                        ),
                      ),
                    ),
                  ),
                  'Storage' => 
                  array (
                    'description' => '存储扩容历史记录，暂不支持。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '实例存储扩容历史信息。',
                      'type' => 'object',
                      'example' => 'None',
                    ),
                  ),
                  'Resource' => 
                  array (
                    'description' => 'Redis资源扩容历史记录，暂不支持。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => 'Redis资源扩容历史信息。',
                      'type' => 'object',
                      'example' => 'None',
                    ),
                  ),
                  'Shard' => 
                  array (
                    'description' => 'Redis自动分片扩容历史记录，暂不支持。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => 'Redis自动分片扩容历史信息。',
                      'type' => 'object',
                      'example' => 'None',
                    ),
                  ),
                  'Bandwidth' => 
                  array (
                    'description' => 'Redis带宽弹性伸缩历史记录，暂不支持。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => 'Redis带宽弹性伸缩历史信息。',
                      'type' => 'object',
                      'example' => 'None',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"B6D17591-B48B-4D31-9CD6-9B9796B2****\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"InstanceId\\": \\"rm-2ze1jdv45i7l6****\\",\\n    \\"SpecHistory\\": [\\n      {\\n        \\"ScaleType\\": \\"SCALE_UP\\",\\n        \\"TaskExcuteStatus\\": true,\\n        \\"ErrorCode\\": \\"Insufficient_Balance\\",\\n        \\"OriginInstanceClass\\": \\"mysql.n2.large.2c\\",\\n        \\"TargetInstanceClass\\": \\"mysql.n2.xlarge.2c\\",\\n        \\"OriginCore\\": 4,\\n        \\"OriginMemory\\": 8,\\n        \\"TargetCore\\": 8,\\n        \\"TargetMemory\\": 16,\\n        \\"TaskTime\\": 1684830763000\\n      }\\n    ],\\n    \\"Storage\\": [\\n      {\\n        \\"test\\": \\"test\\",\\n        \\"test2\\": 1\\n      }\\n    ],\\n    \\"Resource\\": [\\n      {\\n        \\"test\\": \\"test\\",\\n        \\"test2\\": 1\\n      }\\n    ],\\n    \\"Shard\\": [\\n      {\\n        \\"test\\": \\"test\\",\\n        \\"test2\\": 1\\n      }\\n    ],\\n    \\"Bandwidth\\": [\\n      {\\n        \\"test\\": \\"test\\",\\n        \\"test2\\": 1\\n      }\\n    ]\\n  }\\n}","type":"json"}]',
      'title' => '查询实例弹性伸缩历史信息',
      'description' => '- 当前仅支持查询RDS MySQL高可用系列云盘版的自动性能扩展历史信息。
- 使用阿里云或DAS的SDK时，建议使用最新版本。

- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
      'requestParamsDescription' => 'AutoScalingTaskType取值为SPEC时，表示查询自动性能扩展历史，当前仅支持取值为SPEC。',
    ),
    'DisableInstanceDasConfig' => 
    array (
      'summary' => '调用DisableInstanceDasConfig接口，关闭指定弹性伸缩功能。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'r-bp1nti25tc7bq5****',
          ),
        ),
        1 => 
        array (
          'name' => 'Engine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库引擎，当前仅支持Redis。',
            'type' => 'string',
            'required' => true,
            'example' => 'Redis',
          ),
        ),
        2 => 
        array (
          'name' => 'ScaleType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '弹性伸缩类型，取值：
- **specScale**：规格自动弹性伸缩。
- **shardScale**：分片自动弹性伸缩。
- **bandwidthScale**：带宽自动弹性伸缩。',
            'type' => 'string',
            'required' => true,
            'example' => 'bandwidthScale',
            'enum' => 
            array (
              0 => 'specScale',
              1 => 'shardScale',
              2 => 'bandwidthScale',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '关闭数据库实例指定弹性伸缩功能的结果。',
                'type' => 'string',
                'example' => 'success',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '7172BECE-588A-5961-8126-C216E16B****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：
* **true**：执行成功。
* **false**：执行失败。
',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"success\\",\\n  \\"RequestId\\": \\"7172BECE-588A-5961-8126-C216E16B****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<DisableInstanceDasConfigResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>success</Data>\\n    <RequestId>7172BECE-588A-5961-8126-C216E16B****</RequestId>\\n    <Success>true</Success>\\n</DisableInstanceDasConfigResponse>","errorExample":""}]',
      'title' => '关闭指定弹性伸缩功能',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 本接口当前仅适用于Redis数据库实例。',
    ),
    'GetPartitionsHeatmap' => 
    array (
      'summary' => '调用GetPartitionsHeatmap接口，查看PolarDB-X 2.0分区访问热度和数据热点。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConsoleContext',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备用参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'None',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'pxc-hzrciqy62c****',
          ),
        ),
        2 => 
        array (
          'name' => 'TimeRange',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要查询的时间范围：

- **LAST\\_ONE\\_HOURS**：过去一小时。
- **LAST\\_SIX\\_HOURS**：过去六小时。
- **LAST\\_ONE\\_DAYS**：过去一天。
- **LAST\\_THREE\\_DAYS**：过去三天。
- **LAST\\_SEVEN\\_DAYS**：过去七天。',
            'type' => 'string',
            'required' => false,
            'example' => 'LAST_SIX_HOURS',
          ),
        ),
        3 => 
        array (
          'name' => 'Type',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要查询的数据类型：
- **READ_ROWS**：读行数。
- **WRITTEN_ROWS**：写行数。
- **READ\\_WRITTEN\\_ROWS**：读写行数。
- **UPDATE_ROWS**：更新行数。
- **INSERTED_ROWS**：插入行数。
- **DELETED_ROWS**：删除行数。
- **READ\\_ROWS\\_WITH\\_DN**：以DN视角返回的读行数。
- **WRITTEN\\_ROWS\\_WITH\\_DN**：以DN视角返回的写行数。
- **READ\\_WRITTEN\\_ROWS\\_WITH\\_DN**：以DN视角返回的读写行数。',
            'type' => 'string',
            'required' => false,
            'example' => 'WRITTEN_ROWS_WITH_DN',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回信息列表。',
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'Data' => 
              array (
                'description' => '分布式数据库的数据热点数据。返回JSON格式的文本。',
                'type' => 'string',
                'example' => '{
    "boundAxis": [
        {
            "bound": "A,B,C,D",
            "labels": [
                "L1",
                "L2",
                "L3",
                "L4"
            ],
            "rows": 3171
        },
        {
            "bound": "A,B,C,D",
            "labels": [
                "L1",
                "L2",
                "L3",
                "L4"
            ],
            "rows": 277128
        }
    ],
    "dataMap": {
        "READ_WRITTEN_ROWS": [
            [
                0,
                0,
                0
            ],
            [
                0,
                0,
                0
            ]
        ]
    },
    "timeAxis": [
        1671701056070,
        1671701116551,
        1671701177020
    ]
}',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'D00DB161-FEF6-5428-B37A-8D29A4C2****',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"Data\\": \\"{\\\\n    \\\\\\"boundAxis\\\\\\": [\\\\n        {\\\\n            \\\\\\"bound\\\\\\": \\\\\\"A,B,C,D\\\\\\",\\\\n            \\\\\\"labels\\\\\\": [\\\\n                \\\\\\"L1\\\\\\",\\\\n                \\\\\\"L2\\\\\\",\\\\n                \\\\\\"L3\\\\\\",\\\\n                \\\\\\"L4\\\\\\"\\\\n            ],\\\\n            \\\\\\"rows\\\\\\": 3171\\\\n        },\\\\n        {\\\\n            \\\\\\"bound\\\\\\": \\\\\\"A,B,C,D\\\\\\",\\\\n            \\\\\\"labels\\\\\\": [\\\\n                \\\\\\"L1\\\\\\",\\\\n                \\\\\\"L2\\\\\\",\\\\n                \\\\\\"L3\\\\\\",\\\\n                \\\\\\"L4\\\\\\"\\\\n            ],\\\\n            \\\\\\"rows\\\\\\": 277128\\\\n        }\\\\n    ],\\\\n    \\\\\\"dataMap\\\\\\": {\\\\n        \\\\\\"READ_WRITTEN_ROWS\\\\\\": [\\\\n            [\\\\n                0,\\\\n                0,\\\\n                0\\\\n            ],\\\\n            [\\\\n                0,\\\\n                0,\\\\n                0\\\\n            ]\\\\n        ]\\\\n    },\\\\n    \\\\\\"timeAxis\\\\\\": [\\\\n        1671701056070,\\\\n        1671701116551,\\\\n        1671701177020\\\\n    ]\\\\n}\\",\\n  \\"RequestId\\": \\"D00DB161-FEF6-5428-B37A-8D29A4C2****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<GetPartitionsHeatmapResponse>\\n    <Code>200</Code>\\n    <Message>Successful</Message>\\n    <Data>{\\n    \\"boundAxis\\": [\\n        {\\n            \\"bound\\": \\"A,B,C,D\\",\\n            \\"labels\\": [\\n                \\"L1\\",\\n                \\"L2\\",\\n                \\"L3\\",\\n                \\"L4\\"\\n            ],\\n            \\"rows\\": 3171\\n        },\\n        {\\n            \\"bound\\": \\"A,B,C,D\\",\\n            \\"labels\\": [\\n                \\"L1\\",\\n                \\"L2\\",\\n                \\"L3\\",\\n                \\"L4\\"\\n            ],\\n            \\"rows\\": 277128\\n        }\\n    ],\\n    \\"dataMap\\": {\\n        \\"READ_WRITTEN_ROWS\\": [\\n            [\\n                0,\\n                0,\\n                0\\n            ],\\n            [\\n                0,\\n                0,\\n                0\\n            ]\\n        ]\\n    },\\n    \\"timeAxis\\": [\\n        1671701056070,\\n        1671701116551,\\n        1671701177020\\n    ]\\n}</Data>\\n    <RequestId>D00DB161-FEF6-5428-B37A-8D29A4C2****</RequestId>\\n    <Success>true</Success>\\n</GetPartitionsHeatmapResponse>","errorExample":""}]',
      'title' => '获取分区热度信息',
      'description' => '该接口不建议用户自行调用，因为返回的数据格式比较特殊，自行解析会非常复杂，建议使用阿里云DAS的[分区热力图](~~470302~~)功能查看该数据。',
    ),
    'GetPfsSqlSample' => 
    array (
      'summary' => '调用GetPfsSqlSample接口，获取性能洞察（新版）功能的SQL样本数据。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例ID。
>仅支持RDS MySQL和PolarDB MySQL版数据库实例。',
            'type' => 'string',
            'required' => true,
            'example' => 'rm-2ze1jdv45i7l6****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于RDS MySQL集群系列或PolarDB MySQL版数据库实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'r-x****-db-0',
          ),
        ),
        2 => 
        array (
          'name' => 'SqlId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'SQL ID。',
            'type' => 'string',
            'required' => false,
            'example' => '651b56fe9418d48edb8fdf0980ec****',
          ),
        ),
        3 => 
        array (
          'name' => 'StartTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1676511134614',
          ),
        ),
        4 => 
        array (
          'name' => 'EndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为unix时间戳，单位为毫秒。

> 查询结束时间需晚于查询开始时间，最多可查看最近一个月内任意七天的数据。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1678074351197',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '9CB97BC4-6479-55D0-B9D0-EA925AFE****',
              ),
              'Code' => 
              array (
                'description' => '返回状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回的SQL样本数据。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回数据。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'UserId' => 
                    array (
                      'description' => '用户ID。',
                      'type' => 'string',
                      'example' => '196278346919****',
                    ),
                    'InstanceId' => 
                    array (
                      'description' => '实例ID。',
                      'type' => 'string',
                      'example' => 'rm-2ze1jdv45i7l6****',
                    ),
                    'NodeId' => 
                    array (
                      'description' => '节点ID。

> RDS MySQL集群系列或PolarDB MySQL版数据库实例才会返回该数据。',
                      'type' => 'string',
                      'example' => 'r-x****-db-0',
                    ),
                    'LogicId' => 
                    array (
                      'description' => '逻辑库ID。',
                      'type' => 'string',
                      'example' => 'xxxxx',
                    ),
                    'Timestamp' => 
                    array (
                      'description' => '执行SQL的时间，格式为Unix时间戳，单位为毫秒。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1660100753556',
                    ),
                    'SqlId' => 
                    array (
                      'description' => 'SQL ID。',
                      'type' => 'string',
                      'example' => '651b56fe9418d48edb8fdf0980ec****',
                    ),
                    'Sql' => 
                    array (
                      'description' => 'SQL样本。',
                      'type' => 'string',
                      'example' => 'select * from xxxx where ****',
                    ),
                    'ThreadId' => 
                    array (
                      'description' => '线程ID。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '81751940',
                    ),
                    'EventId' => 
                    array (
                      'description' => '事件ID。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '63735293',
                    ),
                    'EndEventId' => 
                    array (
                      'description' => '该参数在事件开始时默认为NULL，在事件结束时更新为线程当前事件编号。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'EventName' => 
                    array (
                      'description' => '事件名称。',
                      'type' => 'string',
                      'example' => 'statement/sql/select',
                    ),
                    'Latency' => 
                    array (
                      'description' => '执行耗时，单位为毫秒。',
                      'type' => 'number',
                      'format' => 'double',
                      'example' => '0.199',
                    ),
                    'LockLatency' => 
                    array (
                      'description' => '锁等待时间，单位为毫秒。',
                      'type' => 'number',
                      'format' => 'double',
                      'example' => '0.09',
                    ),
                    'Errors' => 
                    array (
                      'description' => 'SQL语句错误数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'Warnings' => 
                    array (
                      'description' => 'SQL语句警告数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'RowsAffected' => 
                    array (
                      'description' => '影响行数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'RowsSent' => 
                    array (
                      'description' => '返回的SQL语句的当前行数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'RowsExamined' => 
                    array (
                      'description' => '扫描行数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '2048576',
                    ),
                    'CreateTmpDiskTables' => 
                    array (
                      'description' => '执行语句时创建的磁盘上内部临时表的数量。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'CreateTmpTables' => 
                    array (
                      'description' => '执行语句时创建的内部临时表的数量。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'SelectFullJoin' => 
                    array (
                      'description' => '不使用索引而执行表扫描的连接数。
><notice>该参数是用来统计联合查询过程中没有利用索引的情况，如果该参数值不为0，请仔细检查表的索引。
></notice>',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'SelectFullRangeJoin' => 
                    array (
                      'description' => '在引用表上使用范围搜索的连接数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'SelectRange' => 
                    array (
                      'description' => '在第一个表中使用范围的连接数量。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'SelectRangeCheck' => 
                    array (
                      'description' => '在每一行数据后对键值进行检查，统计不带键值的连接的数量。
><notice>该参数是用来统计联合查询过程中没有利用索引的情况，如果该参数值不为0，请仔细检查表的索引。
></notice>',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'SelectScan' => 
                    array (
                      'description' => '扫描数量。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'SortMergePasses' => 
                    array (
                      'description' => '排序算法必须执行的合并次数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'SortRange' => 
                    array (
                      'description' => '使用范围进行排序的次数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'SortRows' => 
                    array (
                      'description' => '排序行数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'SortScan' => 
                    array (
                      'description' => '扫描排序次数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '1',
                    ),
                    'NoIndexUsed' => 
                    array (
                      'description' => '语句在不使用索引的情况下是否执行了表扫描：

- **1**：是。
- **0**：否。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '1',
                    ),
                    'NoGoodIndexUsed' => 
                    array (
                      'description' => '服务器是否查找不到可用于该语句的索引：

- **1**：是。
- **0**：否。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '1',
                    ),
                    'Db' => 
                    array (
                      'description' => '数据库名称。',
                      'type' => 'string',
                      'example' => 'testDB',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"9CB97BC4-6479-55D0-B9D0-EA925AFE****\\",\\n  \\"Code\\": 200,\\n  \\"Success\\": true,\\n  \\"Data\\": [\\n    {\\n      \\"UserId\\": \\"196278346919****\\",\\n      \\"InstanceId\\": \\"rm-2ze1jdv45i7l6****\\",\\n      \\"NodeId\\": \\"r-x****-db-0\\",\\n      \\"LogicId\\": \\"xxxxx\\",\\n      \\"Timestamp\\": 1660100753556,\\n      \\"SqlId\\": \\"651b56fe9418d48edb8fdf0980ec****\\",\\n      \\"Sql\\": \\"select * from xxxx where ****\\",\\n      \\"ThreadId\\": 81751940,\\n      \\"EventId\\": 63735293,\\n      \\"EndEventId\\": 0,\\n      \\"EventName\\": \\"statement/sql/select\\",\\n      \\"Latency\\": 0.199,\\n      \\"LockLatency\\": 0.09,\\n      \\"Errors\\": 0,\\n      \\"Warnings\\": 0,\\n      \\"RowsAffected\\": 0,\\n      \\"RowsSent\\": 0,\\n      \\"RowsExamined\\": 2048576,\\n      \\"CreateTmpDiskTables\\": 0,\\n      \\"CreateTmpTables\\": 0,\\n      \\"SelectFullJoin\\": 0,\\n      \\"SelectFullRangeJoin\\": 0,\\n      \\"SelectRange\\": 0,\\n      \\"SelectRangeCheck\\": 0,\\n      \\"SelectScan\\": 0,\\n      \\"SortMergePasses\\": 0,\\n      \\"SortRange\\": 0,\\n      \\"SortRows\\": 0,\\n      \\"SortScan\\": 1,\\n      \\"NoIndexUsed\\": 1,\\n      \\"NoGoodIndexUsed\\": 1,\\n      \\"Db\\": \\"testDB\\"\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<GetPfsSqlSampleResponse>\\n    <Message>Successful</Message>\\n    <RequestId>9CB97BC4-6479-55D0-B9D0-EA925AFE****</RequestId>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n    <Data>\\n        <UserId>196278346919****</UserId>\\n        <InstanceId>rm-2ze1jdv45i7l6****</InstanceId>\\n        <NodeId>r-x****-db-0</NodeId>\\n        <LogicId>xxxxx</LogicId>\\n        <Timestamp>1660100753556</Timestamp>\\n        <SqlId>651b56fe9418d48edb8fdf0980ec****</SqlId>\\n        <Sql>select * from xxxx where ****</Sql>\\n        <ThreadId>81751940</ThreadId>\\n        <EventId>63735293</EventId>\\n        <EndEventId>0</EndEventId>\\n        <EventName>statement/sql/select</EventName>\\n        <Latency>0.199</Latency>\\n        <LockLatency>0.09</LockLatency>\\n        <Errors>0</Errors>\\n        <Warnings>0</Warnings>\\n        <RowsAffected>0</RowsAffected>\\n        <RowsSent>0</RowsSent>\\n        <RowsExamined>2048576</RowsExamined>\\n        <CreateTmpDiskTables>0</CreateTmpDiskTables>\\n        <CreateTmpTables>0</CreateTmpTables>\\n        <SelectFullJoin>0</SelectFullJoin>\\n        <SelectFullRangeJoin>0</SelectFullRangeJoin>\\n        <SelectRange>0</SelectRange>\\n        <SelectRangeCheck>0</SelectRangeCheck>\\n        <SelectScan>0</SelectScan>\\n        <SortMergePasses>0</SortMergePasses>\\n        <SortRange>0</SortRange>\\n        <SortRows>0</SortRows>\\n        <SortScan>1</SortScan>\\n        <NoIndexUsed>1</NoIndexUsed>\\n        <NoGoodIndexUsed>1</NoGoodIndexUsed>\\n        <Db>testDB</Db>\\n    </Data>\\n</GetPfsSqlSampleResponse>","errorExample":""}]',
      'title' => '获取SQL样本数据',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 目标数据库实例为RDS MySQL或PolarDB MySQL版。
- 目标数据库实例已开启性能洞察（新版），详情请参见[性能洞察（新版）](~~469117~~)。',
    ),
    'GetPfsMetricTrends' => 
    array (
      'summary' => '调用GetPfsMetricTrends接口，查询数据库实例性能洞察（新版）指定指标的趋势。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
        1 => 'http',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-m5ea73876ukci****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于RDS MySQL集群系列或PolarDB MySQL版数据库实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'r-x****-db-0',
          ),
        ),
        2 => 
        array (
          'name' => 'Metric',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '需要查询趋势的指标：

- **count**：执行次数。
- **avgRt**：平均执行时间。
- **rtRate**：耗时比例。
- **rowsExamined**：总扫描行数。',
            'type' => 'string',
            'required' => false,
            'example' => 'Count',
          ),
        ),
        3 => 
        array (
          'name' => 'StartTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1677461663092',
          ),
        ),
        4 => 
        array (
          'name' => 'EndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为Unix时间戳，单位为毫秒。
> 查询结束时间需晚于查询开始时间，最多可查看最近一个月内任意七天的数据。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1678432430967',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'F4C27966-284E-51C4-9407-DB50CAB8****',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'object',
                'additionalProperties' => 
                array (
                  'type' => 'array',
                  'items' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Timestamp' => 
                      array (
                        'type' => 'string',
                        'example' => '1681975870000',
                        'description' => '时间戳，格式为unix时间戳，单位为毫秒。',
                      ),
                      'Value' => 
                      array (
                        'type' => 'any',
                        'description' => '指标值。',
                        'example' => '478.28',
                      ),
                    ),
                    'description' => '返回指标趋势结果。',
                  ),
                  'description' => '返回数据列表。',
                ),
              ),
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"F4C27966-284E-51C4-9407-DB50CAB8****\\",\\n  \\"Data\\": {\\n    \\"key\\": [\\n      {\\n        \\"Timestamp\\": \\"1681975870000\\",\\n        \\"Value\\": \\"478.28\\"\\n      }\\n    ]\\n  },\\n  \\"Code\\": 200,\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetPfsMetricTrendsResponse>\\n    <Message>Successful</Message>\\n    <RequestId>F4C27966-284E-51C4-9407-DB50CAB8****</RequestId>\\n    <Data>\\n        <Timestamp>1681975870000</Timestamp>\\n        <Value>478.28</Value>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetPfsMetricTrendsResponse>","errorExample":""}]',
      'title' => '查询指定指标趋势',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 目标数据库实例为RDS MySQL或PolarDB MySQL版。
- 目标数据库实例已开启性能洞察（新版），详情请参见[性能洞察（新版）](~~469117~~)。',
    ),
    'GetPfsSqlSummaries' => 
    array (
      'summary' => '调用GetPfsSqlSummaries接口，查询数据库实例性能洞察（新版）中按照SQL ID维度的全量请求数据。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
        1 => 'http',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'rm-uf61swc4cru0b****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点ID。

> 对于RDS MySQL集群系列或PolarDB MySQL版数据库实例，需要提供节点ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'r-****-db-0',
          ),
        ),
        2 => 
        array (
          'name' => 'SqlId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'SQL ID。

> 传入SQL ID时，统计目标SQL ID的全量请求数据；为空时，统计整个数据库实例的全量请求数据。',
            'type' => 'string',
            'required' => false,
            'example' => '651b56fe9418d48edb8fdf0980ec****',
          ),
        ),
        3 => 
        array (
          'name' => 'Keywords',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'SQL文本关键词，多个关键词以空格分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'select update',
          ),
        ),
        4 => 
        array (
          'name' => 'StartTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1675833788056',
          ),
        ),
        5 => 
        array (
          'name' => 'EndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询结束时间，格式为Unix时间戳，单位为毫秒。
> 查询结束时间需晚于查询开始时间，最多可查看最近一个月内任意七天的数据。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1679297005999',
          ),
        ),
        6 => 
        array (
          'name' => 'OrderBy',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '排序字段，默认为**count**。

- **count**：执行次数。

- **avgRt**：平均执行时间。

- **rtRate**：耗时比例。

- **rowsExamined**：总扫描行数。

- **avgRowsExamined**：平均扫描行数。

- **avgRowsReturned**：平均返回行数。',
            'type' => 'string',
            'required' => false,
            'example' => 'count',
          ),
        ),
        7 => 
        array (
          'name' => 'Asc',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否升序排序，默认为**false**。

- **true**：是。
- **false**：否。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        8 => 
        array (
          'name' => 'PageNo',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页查询的页码，从1开始，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        9 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页查询每页最大记录数，默认为10，最大为100。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'ListResult<PfsSqlSummary>',
            'description' => 'ListResult<PfsSqlSummary>',
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '请求返回消息。
>请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '54F3DBAE-9420-511A-9C29-265E8C04****',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Total' => 
                  array (
                    'description' => '总数据量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '264',
                  ),
                  'List' => 
                  array (
                    'description' => '详细信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回信息列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'UserId' => 
                        array (
                          'description' => '用户ID。',
                          'type' => 'string',
                          'example' => '196278346919****',
                        ),
                        'Psql' => 
                        array (
                          'description' => 'SQL模板。',
                          'type' => 'string',
                          'example' => 'select ?',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '实例ID。',
                          'type' => 'string',
                          'example' => 'rm-2ze8g2am97624****',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点ID。
> 对于RDS MySQL集群系列或PolarDB MySQL版数据库实例，返回此参数。',
                          'type' => 'string',
                          'example' => 'r-x****-db-0',
                        ),
                        'SqlType' => 
                        array (
                          'description' => 'SQL的类型。取值：
- **SELECT**
- **UPDATE**
- **DELETE**',
                          'type' => 'string',
                          'example' => 'SELECT',
                        ),
                        'LogicId' => 
                        array (
                          'description' => '逻辑库ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '58275984',
                        ),
                        'SqlId' => 
                        array (
                          'description' => 'SQL模板ID。',
                          'type' => 'string',
                          'example' => '2e8147b5ca2dfc640dfd5e43d96a****',
                        ),
                        'Timestamp' => 
                        array (
                          'description' => '数据日期，格式为Unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1643040000000',
                        ),
                        'RtRate' => 
                        array (
                          'title' => '耗时占比',
                          'description' => '耗时占比。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.1384',
                        ),
                        'CountRate' => 
                        array (
                          'title' => '执行次数占比',
                          'description' => '执行次数占比。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.0586',
                        ),
                        'FullScan' => 
                        array (
                          'description' => '是否全表扫描。取值：

- **true**：是。
- **false**：否。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'Count' => 
                        array (
                          'description' => '总执行次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '100000',
                        ),
                        'ErrCount' => 
                        array (
                          'description' => '错误次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'WarnCount' => 
                        array (
                          'description' => '警告次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'TotalLatency' => 
                        array (
                          'description' => '总执行耗时，单位毫秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '60913.256',
                        ),
                        'MaxLatency' => 
                        array (
                          'description' => '最大执行耗时，单位毫秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '36.233',
                        ),
                        'AvgLatency' => 
                        array (
                          'description' => 'SQL平均执行耗时，单位毫秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.1717',
                        ),
                        'RowsSent' => 
                        array (
                          'description' => '返回行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'RowsSendAvg' => 
                        array (
                          'description' => '平均发送行数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'RowsExamined' => 
                        array (
                          'description' => '总扫描行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '100',
                        ),
                        'RowsExaminedAvg' => 
                        array (
                          'description' => '平均扫描行数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'RowsAffected' => 
                        array (
                          'description' => '影响行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'RowsAffectedAvg' => 
                        array (
                          'description' => '平均影响行数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'TmpTables' => 
                        array (
                          'description' => '临时表数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'TmpDiskTables' => 
                        array (
                          'description' => '临时磁盘表数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'RowsSorted' => 
                        array (
                          'description' => '排序行数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'SortMergePasses' => 
                        array (
                          'description' => '排序算法必须执行的合并次数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'PhysicalReads' => 
                        array (
                          'description' => '物理节点数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'PhysicalAsyncReads' => 
                        array (
                          'description' => '物理异步节点数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'SemisyncDelayTime' => 
                        array (
                          'description' => '半同步延迟时间，单位毫秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.12',
                        ),
                        'RowsSentAvg' => 
                        array (
                          'description' => '返回SQL句的平均行数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0.52',
                        ),
                        'LogicReads' => 
                        array (
                          'description' => '逻辑节点数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'RedoWrites' => 
                        array (
                          'description' => '重做节点数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'DataWriteTime' => 
                        array (
                          'description' => '数据写入时间，单位毫秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'DataWrites' => 
                        array (
                          'description' => '可写数据节点数量。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'DataReadTime' => 
                        array (
                          'description' => '可读数据时间，单位毫秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'DataReads' => 
                        array (
                          'description' => '可读数据节点数量。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'RwlockOsWaits' => 
                        array (
                          'description' => '是否开启了读写分离。取值：

- **0**：未开启。
- **1**：开启。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'RwlockSpinRounds' => 
                        array (
                          'description' => '读写分离参数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'RwlockSpinWaits' => 
                        array (
                          'description' => '是否开启多重索引扫描。取值：

- **0**：未开启。
- **1**：开启。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'MutexWaits' => 
                        array (
                          'description' => '互斥等待次数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'MutexSpins' => 
                        array (
                          'description' => '互斥旋转次数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'TransactionLockTime' => 
                        array (
                          'description' => '存储事务锁定时间，单位毫秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'ServerLockTime' => 
                        array (
                          'description' => '服务器锁定时间，单位毫秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'CpuTime' => 
                        array (
                          'description' => 'CPU运行时间，单位为毫秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'ElapsedTime' => 
                        array (
                          'description' => '实际运行时间，单位毫秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'Id' => 
                        array (
                          'title' => '主键',
                          'description' => '主键ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '26186357',
                        ),
                        'SelectScanAvg' => 
                        array (
                          'description' => '平均扫描数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'SelectRangeAvg' => 
                        array (
                          'description' => '平均选取范围。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'SelectFullJoinAvg' => 
                        array (
                          'description' => '不使用索引而执行表扫描的平均连接数。
><notice>如果该参数值不为0，则应仔细检查表的索引。
></notice>',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'SelectFullRangeJoinAvg' => 
                        array (
                          'description' => '平均范围连接数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'SortScanAvg' => 
                        array (
                          'description' => '平均扫描排序数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'SortRowsAvg' => 
                        array (
                          'description' => '平均排序行数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'TmpTablesAvg' => 
                        array (
                          'description' => '临时表平均数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'TmpDiskTablesAvg' => 
                        array (
                          'description' => '临时磁盘表平均数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'FirstTime' => 
                        array (
                          'description' => '首次执行时间，格式为unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1659308149000',
                        ),
                        'LastTime' => 
                        array (
                          'description' => '最后变更时间，格式为unix时间戳，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1661306520000',
                        ),
                        'LockLatencyAvg' => 
                        array (
                          'description' => '平均锁等待时间，单位毫秒。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'TimerWaitAvg' => 
                        array (
                          'description' => '备用参数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => 'None',
                        ),
                        'SortRangeAvg' => 
                        array (
                          'description' => '使用范围排序平均次数。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'CpuRate' => 
                        array (
                          'description' => 'CPU执行时间与SQL总执行时间的比值。',
                          'type' => 'number',
                          'format' => 'double',
                          'example' => '0',
                        ),
                        'Db' => 
                        array (
                          'description' => '数据库名称。',
                          'type' => 'string',
                          'example' => 'testDB',
                        ),
                        'Tables' => 
                        array (
                          'description' => '数据库表名。
',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '数据库表名。
',
                            'type' => 'string',
                            'example' => 'test_table',
                          ),
                        ),
                      ),
                    ),
                  ),
                  'PageNo' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页最大记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'Extra' => 
                  array (
                    'description' => '备用参数。',
                    'type' => 'any',
                    'example' => 'None',
                  ),
                ),
              ),
              'Code' => 
              array (
                'description' => '返回状态码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"54F3DBAE-9420-511A-9C29-265E8C04****\\",\\n  \\"Data\\": {\\n    \\"Total\\": 264,\\n    \\"List\\": [\\n      {\\n        \\"UserId\\": \\"196278346919****\\",\\n        \\"Psql\\": \\"select ?\\",\\n        \\"InstanceId\\": \\"rm-2ze8g2am97624****\\",\\n        \\"NodeId\\": \\"r-x****-db-0\\",\\n        \\"SqlType\\": \\"SELECT\\",\\n        \\"LogicId\\": 58275984,\\n        \\"SqlId\\": \\"2e8147b5ca2dfc640dfd5e43d96a****\\",\\n        \\"Timestamp\\": 1643040000000,\\n        \\"RtRate\\": 0.1384,\\n        \\"CountRate\\": 0.0586,\\n        \\"FullScan\\": true,\\n        \\"Count\\": 100000,\\n        \\"ErrCount\\": 0,\\n        \\"WarnCount\\": 0,\\n        \\"TotalLatency\\": 60913.256,\\n        \\"MaxLatency\\": 36.233,\\n        \\"AvgLatency\\": 0.1717,\\n        \\"RowsSent\\": 0,\\n        \\"RowsSendAvg\\": 0,\\n        \\"RowsExamined\\": 100,\\n        \\"RowsExaminedAvg\\": 0,\\n        \\"RowsAffected\\": 0,\\n        \\"RowsAffectedAvg\\": 0,\\n        \\"TmpTables\\": 0,\\n        \\"TmpDiskTables\\": 0,\\n        \\"RowsSorted\\": 0,\\n        \\"SortMergePasses\\": 0,\\n        \\"PhysicalReads\\": 0,\\n        \\"PhysicalAsyncReads\\": 0,\\n        \\"SemisyncDelayTime\\": 0.12,\\n        \\"RowsSentAvg\\": 0.52,\\n        \\"LogicReads\\": 0,\\n        \\"RedoWrites\\": 0,\\n        \\"DataWriteTime\\": 0,\\n        \\"DataWrites\\": 0,\\n        \\"DataReadTime\\": 0,\\n        \\"DataReads\\": 0,\\n        \\"RwlockOsWaits\\": 0,\\n        \\"RwlockSpinRounds\\": 0,\\n        \\"RwlockSpinWaits\\": 0,\\n        \\"MutexWaits\\": 1,\\n        \\"MutexSpins\\": 1,\\n        \\"TransactionLockTime\\": 0,\\n        \\"ServerLockTime\\": 0,\\n        \\"CpuTime\\": 0,\\n        \\"ElapsedTime\\": 0,\\n        \\"Id\\": 26186357,\\n        \\"SelectScanAvg\\": 0,\\n        \\"SelectRangeAvg\\": 0,\\n        \\"SelectFullJoinAvg\\": 0,\\n        \\"SelectFullRangeJoinAvg\\": 0,\\n        \\"SortScanAvg\\": 0,\\n        \\"SortRowsAvg\\": 0,\\n        \\"TmpTablesAvg\\": 0,\\n        \\"TmpDiskTablesAvg\\": 0,\\n        \\"FirstTime\\": 1659308149000,\\n        \\"LastTime\\": 1661306520000,\\n        \\"LockLatencyAvg\\": 0,\\n        \\"TimerWaitAvg\\": 0,\\n        \\"SortRangeAvg\\": 0,\\n        \\"CpuRate\\": 0,\\n        \\"Db\\": \\"testDB\\",\\n        \\"Tables\\": [\\n          \\"test_table\\"\\n        ]\\n      }\\n    ],\\n    \\"PageNo\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"Extra\\": \\"None\\"\\n  },\\n  \\"Code\\": 200,\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetPfsSqlSummariesResponse>\\n    <Message>Successful</Message>\\n    <RequestId>54F3DBAE-9420-511A-9C29-265E8C04****</RequestId>\\n    <Data>\\n        <Total>264</Total>\\n        <List>\\n            <UserId>196278346919****</UserId>\\n            <Psql>select ?</Psql>\\n            <SqlFeature>None</SqlFeature>\\n            <InstanceId>rm-2ze8g2am97624****</InstanceId>\\n            <NodeId>r-x****-db-0</NodeId>\\n            <SqlType>SELECT</SqlType>\\n            <LogicId>58275984</LogicId>\\n            <SqlId>2e8147b5ca2dfc640dfd5e43d96a****</SqlId>\\n            <Timestamp>1643040000000</Timestamp>\\n            <RtRate>0.1384</RtRate>\\n            <CountRate>0.0586</CountRate>\\n            <FullScan>true</FullScan>\\n            <Count>100000</Count>\\n            <ErrCount>0</ErrCount>\\n            <WarnCount>0</WarnCount>\\n            <TotalLatency>60913.256</TotalLatency>\\n            <MaxLatency>36.233</MaxLatency>\\n            <AvgLatency>0.1717</AvgLatency>\\n            <RowsSent>0</RowsSent>\\n            <RowsSendAvg>0</RowsSendAvg>\\n            <RowsExamined>100</RowsExamined>\\n            <RowsExaminedAvg>0</RowsExaminedAvg>\\n            <RowsAffected>0</RowsAffected>\\n            <RowsAffectedAvg>0</RowsAffectedAvg>\\n            <TmpTables>0</TmpTables>\\n            <TmpDiskTables>0</TmpDiskTables>\\n            <RowsSorted>0</RowsSorted>\\n            <SortMergePasses>0</SortMergePasses>\\n            <PhysicalReads>0</PhysicalReads>\\n            <PhysicalAsyncReads>0</PhysicalAsyncReads>\\n            <SemisyncDelayTime>0.12</SemisyncDelayTime>\\n            <RowsSentAvg>0.52</RowsSentAvg>\\n            <LogicReads>0</LogicReads>\\n            <RedoWrites>0</RedoWrites>\\n            <DataWriteTime>0</DataWriteTime>\\n            <DataWrites>0</DataWrites>\\n            <DataReadTime>0</DataReadTime>\\n            <DataReads>0</DataReads>\\n            <RwlockOsWaits>0</RwlockOsWaits>\\n            <RwlockSpinRounds>0</RwlockSpinRounds>\\n            <RwlockSpinWaits>0</RwlockSpinWaits>\\n            <MutexWaits>1</MutexWaits>\\n            <MutexSpins>1</MutexSpins>\\n            <TransactionLockTime>0</TransactionLockTime>\\n            <ServerLockTime>0</ServerLockTime>\\n            <CpuTime>0</CpuTime>\\n            <ElapsedTime>0</ElapsedTime>\\n            <Id>26186357</Id>\\n            <SelectScanAvg>0</SelectScanAvg>\\n            <SelectRangeAvg>0</SelectRangeAvg>\\n            <SelectFullJoinAvg>0</SelectFullJoinAvg>\\n            <SelectFullRangeJoinAvg>0</SelectFullRangeJoinAvg>\\n            <SortScanAvg>0</SortScanAvg>\\n            <SortRowsAvg>0</SortRowsAvg>\\n            <TmpTablesAvg>0</TmpTablesAvg>\\n            <TmpDiskTablesAvg>0</TmpDiskTablesAvg>\\n            <FirstTime>1659308149000</FirstTime>\\n            <LastTime>1661306520000</LastTime>\\n            <LockLatencyAvg>0</LockLatencyAvg>\\n            <SortRangeAvg>0</SortRangeAvg>\\n            <CpuRate>0</CpuRate>\\n            <Db>testDB</Db>\\n            <Tables>test_table</Tables>\\n        </List>\\n        <PageNo>1</PageNo>\\n        <PageSize>10</PageSize>\\n        <Extra>None</Extra>\\n    </Data>\\n    <Code>200</Code>\\n    <Success>true</Success>\\n</GetPfsSqlSummariesResponse>","errorExample":""}]',
      'title' => '查询按照SQL ID维度统计的全量请求数据',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 目标数据库实例为RDS MySQL或PolarDB MySQL版。
- 目标数据库实例已开启性能洞察（新版），详情请参见[性能洞察（新版）](~~469117~~)。',
    ),
    'GetEndpointSwitchTask' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Uid',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'accessKey',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        2 => 
        array (
          'name' => 'signature',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        3 => 
        array (
          'name' => 'timestamp',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        4 => 
        array (
          'name' => '__context',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        5 => 
        array (
          'name' => 'skipAuth',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
            'default' => 'true',
          ),
        ),
        6 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        7 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'type' => 'string',
              ),
              'RequestId' => 
              array (
                'type' => 'string',
              ),
              'Synchro' => 
              array (
                'type' => 'string',
              ),
              'Data' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'type' => 'string',
                  ),
                  'Uuid' => 
                  array (
                    'type' => 'string',
                  ),
                  'OriUuid' => 
                  array (
                    'type' => 'string',
                  ),
                  'AccountId' => 
                  array (
                    'type' => 'string',
                  ),
                  'ErrMsg' => 
                  array (
                    'type' => 'string',
                  ),
                  'TaskId' => 
                  array (
                    'type' => 'string',
                  ),
                  'DbLinkId' => 
                  array (
                    'type' => 'integer',
                    'format' => 'int64',
                  ),
                ),
              ),
              'Code' => 
              array (
                'type' => 'string',
              ),
              'Success' => 
              array (
                'type' => 'string',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '',
    ),
    'GetHDMAliyunResourceSyncResult' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Uid',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'accessKey',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        2 => 
        array (
          'name' => 'signature',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        3 => 
        array (
          'name' => 'timestamp',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        4 => 
        array (
          'name' => '__context',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        5 => 
        array (
          'name' => 'skipAuth',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
            'default' => 'true',
          ),
        ),
        6 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        7 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'type' => 'string',
              ),
              'RequestId' => 
              array (
                'type' => 'string',
              ),
              'Synchro' => 
              array (
                'type' => 'string',
              ),
              'Data' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'SyncStatus' => 
                  array (
                    'type' => 'string',
                  ),
                  'ErrorMsg' => 
                  array (
                    'type' => 'string',
                  ),
                  'SubResults' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'ResourceSyncSubResult' => 
                      array (
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'SyncCount' => 
                            array (
                              'type' => 'integer',
                              'format' => 'int32',
                            ),
                            'ResourceType' => 
                            array (
                              'type' => 'string',
                            ),
                            'Success' => 
                            array (
                              'type' => 'boolean',
                            ),
                            'ErrMsg' => 
                            array (
                              'type' => 'string',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'Results' => 
                  array (
                    'type' => 'string',
                  ),
                ),
              ),
              'Code' => 
              array (
                'type' => 'string',
              ),
              'Success' => 
              array (
                'type' => 'string',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '',
    ),
    'GetHDMLastAliyunResourceSyncResult' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Uid',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'accessKey',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        2 => 
        array (
          'name' => 'signature',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        3 => 
        array (
          'name' => 'timestamp',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        4 => 
        array (
          'name' => '__context',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        5 => 
        array (
          'name' => 'skipAuth',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
            'default' => 'true',
          ),
        ),
        6 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'type' => 'string',
              ),
              'RequestId' => 
              array (
                'type' => 'string',
              ),
              'Synchro' => 
              array (
                'type' => 'string',
              ),
              'Data' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'SyncStatus' => 
                  array (
                    'type' => 'string',
                  ),
                  'ErrorMsg' => 
                  array (
                    'type' => 'string',
                  ),
                  'SubResults' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'ResourceSyncSubResult' => 
                      array (
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'SyncCount' => 
                            array (
                              'type' => 'integer',
                              'format' => 'int32',
                            ),
                            'ResourceType' => 
                            array (
                              'type' => 'string',
                            ),
                            'Success' => 
                            array (
                              'type' => 'boolean',
                            ),
                            'ErrMsg' => 
                            array (
                              'type' => 'string',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'Results' => 
                  array (
                    'type' => 'string',
                  ),
                ),
              ),
              'Code' => 
              array (
                'type' => 'string',
              ),
              'Success' => 
              array (
                'type' => 'string',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '',
    ),
    'SyncHDMAliyunResource' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Uid',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'accessKey',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        2 => 
        array (
          'name' => 'signature',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        3 => 
        array (
          'name' => 'timestamp',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        4 => 
        array (
          'name' => '__context',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        5 => 
        array (
          'name' => 'skipAuth',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
            'default' => 'true',
          ),
        ),
        6 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        7 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        8 => 
        array (
          'name' => 'WaitForModifySecurityIps',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
        9 => 
        array (
          'name' => 'ResourceTypes',
          'in' => 'query',
          'schema' => 
          array (
            'type' => 'string',
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'type' => 'string',
              ),
              'Message' => 
              array (
                'type' => 'string',
              ),
              'Synchro' => 
              array (
                'type' => 'string',
              ),
              'Data' => 
              array (
                'type' => 'string',
              ),
              'Code' => 
              array (
                'type' => 'string',
              ),
              'Success' => 
              array (
                'type' => 'string',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '',
    ),
    'DescribeSqlLogRecords' => 
    array (
      'summary' => '调用DescribeSqlLogRecords接口，查询DAS企业版日志明细。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '199697',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREhdmFT57I0',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'pc-2ze8g2am97624****
',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点ID。

- 对于RDS MySQL和PolarDB MySQL版，该参数仅适用于集群版实例。若不传该参数，默认查询主节点日志明细。
- 对于PolarDB-X 2.0，该参数传入**polarx_cn**（计算节点）或**polarx_dn**（数据节点）。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-uf6k5f6g3912i****',
          ),
        ),
        2 => 
        array (
          'name' => 'Role',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'PolarDB-X 2.0数据库实例节点的角色。

- **polarx_cn **：计算节点。
- **polarx_dn **：数据节点。',
            'type' => 'string',
            'required' => false,
            'example' => 'polarx_cn ',
          ),
        ),
        3 => 
        array (
          'name' => 'Filters',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '筛选条件列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '筛选条件。',
              'type' => 'object',
              'properties' => 
              array (
                'Key' => 
                array (
                  'title' => '过滤参数',
                  'description' => '过滤参数。

> 支持的过滤参数及其取值请参考**请求参数补充说明**。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'keyWords',
                ),
                'Value' => 
                array (
                  'description' => '过滤参数取值。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'select',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
        4 => 
        array (
          'name' => 'StartTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1596177993000',
          ),
        ),
        5 => 
        array (
          'name' => 'EndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '结束时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1608888296000',
          ),
        ),
        6 => 
        array (
          'name' => 'PageNo',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页查询的页码，从1开始，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        7 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页最大记录数，默认值为10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。

> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'F43E7FB3-CE67-5FFD-A59C-EFD278BCD7BE',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'title' => 'SqlLogDetailResult',
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'StartTime' => 
                  array (
                    'description' => '开始时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1596177993000',
                  ),
                  'EndTime' => 
                  array (
                    'description' => '结束时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1608888296000',
                  ),
                  'TotalRecords' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'Items' => 
                  array (
                    'description' => '列表数据',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'SQLLogRecord' => 
                      array (
                        'description' => 'SQL日志数据。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => 'SQL日志数据。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Ext' => 
                            array (
                              'description' => '扩展信息字段，备用参数。',
                              'type' => 'string',
                              'example' => 'None',
                            ),
                            'ExecuteTime' => 
                            array (
                              'description' => '执行时间，格式为UTC时间：`yyyy-MM-ddTHH:mm:ssZ`。',
                              'type' => 'string',
                              'example' => '2023-12-07T02:15:32Z',
                            ),
                            'OriginTime' => 
                            array (
                              'description' => '执行时间戳，格式为Unix时间，单位为毫秒。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1701886532000',
                            ),
                            'HostAddress' => 
                            array (
                              'description' => '客户端IP地址。',
                              'type' => 'string',
                              'example' => '11.197.XX.XX',
                            ),
                            'UpdateRows' => 
                            array (
                              'description' => '更新行数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'LogicRead' => 
                            array (
                              'description' => '逻辑读。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'SqlText' => 
                            array (
                              'description' => 'SQL语句。',
                              'type' => 'string',
                              'example' => 'select resource_id as cluster_id, tpl_name \\n\\tfrom dbfree_alert_resource_tpl_ref\\n\\twhere user_id=? and type=\'cluster\' group by resource_id, tpl_name',
                            ),
                            'LockTime' => 
                            array (
                              'description' => '锁等待时间，单位毫秒。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'ScanRows' => 
                            array (
                              'description' => '扫描行数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'ThreadId' => 
                            array (
                              'description' => '线程ID。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => 'None',
                            ),
                            'State' => 
                            array (
                              'description' => '执行状态。

- **0**：执行成功。
- **1**：执行失败。',
                              'type' => 'string',
                              'example' => '0',
                            ),
                            'DBName' => 
                            array (
                              'description' => '数据库名称。',
                              'type' => 'string',
                              'example' => 'testdb',
                            ),
                            'SqlType' => 
                            array (
                              'description' => 'SQL语句的类型。',
                              'type' => 'string',
                              'example' => 'select',
                            ),
                            'AccountName' => 
                            array (
                              'description' => '数据库账号。',
                              'type' => 'string',
                              'example' => 'testname',
                            ),
                            'PhysicSyncRead' => 
                            array (
                              'description' => '物理同步读。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'PhysicAsyncRead' => 
                            array (
                              'description' => '物理异步读。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'TrxId' => 
                            array (
                              'description' => '事务ID。',
                              'type' => 'string',
                              'example' => '200000',
                            ),
                            'ReturnRows' => 
                            array (
                              'description' => '返回行数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'Consume' => 
                            array (
                              'description' => '执行耗时，单位毫秒。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '58',
                            ),
                            'Vip' => 
                            array (
                              'description' => '查询链接的endpoint解析地址。',
                              'type' => 'string',
                              'example' => '100.115.XX.XX',
                            ),
                            'NodeId' => 
                            array (
                              'description' => '节点ID。',
                              'type' => 'string',
                              'example' => 'pi-uf6k5f6g3912i****',
                            ),
                            'SqlId' => 
                            array (
                              'description' => 'SQL ID。',
                              'type' => 'string',
                              'example' => 'c67649d4a7fb62c4f8c7a447c52b5b17',
                            ),
                            'UseImciEngine' => 
                            array (
                              'description' => 'PolarDB MySQL版实例是否使用列存索引。

- **true**：是。
- **false**：否。',
                              'type' => 'string',
                              'example' => 'true',
                            ),
                            'ParallelQueueTime' => 
                            array (
                              'description' => 'PolarDB MySQL版实例的并行度。',
                              'type' => 'string',
                              'example' => '2',
                            ),
                            'ParallelDegree' => 
                            array (
                              'description' => 'PolarDB MySQL版实例的并行排队时间，单位为毫秒。',
                              'type' => 'string',
                              'example' => '10',
                            ),
                            'Scnt' => 
                            array (
                              'description' => 'PolarDB-X 2.0计算节点（CN）的DN请求数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '10',
                            ),
                            'Rows' => 
                            array (
                              'description' => 'PolarDB-X 2.0数据库实例计算节点总更新或返回的行数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '10',
                            ),
                            'Frows' => 
                            array (
                              'description' => 'PolarDB-X 2.0计算节点（CN）的拉取行数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '10',
                            ),
                            'TraceId' => 
                            array (
                              'description' => 'PolarDB-X 2.0的跟踪ID，即SQL在数据节点的执行ID。',
                              'type' => 'string',
                              'example' => '14c93b7c7bf00000 ',
                            ),
                            'PhysicRead' => 
                            array (
                              'description' => '物理读。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '0',
                            ),
                            'CpuTime' => 
                            array (
                              'description' => 'CPU执行时间，单位为微秒。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '100',
                            ),
                            'Writes' => 
                            array (
                              'description' => 'RDS SQL Server引擎的写入数。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '10',
                            ),
                            'Collection' => 
                            array (
                              'description' => '预留参数。',
                              'type' => 'string',
                              'example' => 'None',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'Finish' => 
                  array (
                    'description' => '任务是否完成。
- **0**：未完成
- **1**：已完成

> 当**Finish**返回为0，并且包含**JobId**字段时，说明当前请求为异步请求，无法直接获取返回结果，需要进一步根据**JobId**进行查询。查询时将**JobId**作为**Filters**的输入值，例如：`Filters=[{"Key": "JobId", "Value": "******"}]`。',
                    'type' => 'string',
                    'example' => '1',
                  ),
                  'JobId' => 
                  array (
                    'description' => '异步任务ID。',
                    'type' => 'string',
                    'example' => 'MzI4NTZfUUlOR0RBT19DTTlfTlUyMF9NWVNRTF9PREJTX0xWU18zMjg1Nl9teXNxbF9XZWQgTWFyIDA2IDE0OjUwOjQ3IENTVCAyMDI0XzBfMzBfRXhlY3V0ZVRpbWVfREVTQ19XZWQgTWFyIDA2IDE0OjM1OjQ3IENTVCAyMDI0Xw==_1709708406465',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"F43E7FB3-CE67-5FFD-A59C-EFD278BCD7BE\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"StartTime\\": 1596177993000,\\n    \\"EndTime\\": 1608888296000,\\n    \\"TotalRecords\\": 1,\\n    \\"Items\\": {\\n      \\"SQLLogRecord\\": [\\n        {\\n          \\"Ext\\": \\"None\\",\\n          \\"ExecuteTime\\": \\"2023-12-07T02:15:32Z\\",\\n          \\"OriginTime\\": 1701886532000,\\n          \\"HostAddress\\": \\"11.197.XX.XX\\",\\n          \\"UpdateRows\\": 0,\\n          \\"LogicRead\\": 0,\\n          \\"SqlText\\": \\"select resource_id as cluster_id, tpl_name \\\\\\\\n\\\\\\\\tfrom dbfree_alert_resource_tpl_ref\\\\\\\\n\\\\\\\\twhere user_id=? and type=\'cluster\' group by resource_id, tpl_name\\",\\n          \\"LockTime\\": 0,\\n          \\"ScanRows\\": 0,\\n          \\"ThreadId\\": 0,\\n          \\"State\\": \\"0\\",\\n          \\"DBName\\": \\"testdb\\",\\n          \\"SqlType\\": \\"select\\",\\n          \\"AccountName\\": \\"testname\\",\\n          \\"PhysicSyncRead\\": 0,\\n          \\"PhysicAsyncRead\\": 0,\\n          \\"TrxId\\": \\"200000\\",\\n          \\"ReturnRows\\": 0,\\n          \\"Consume\\": 58,\\n          \\"Vip\\": \\"100.115.XX.XX\\",\\n          \\"NodeId\\": \\"pi-uf6k5f6g3912i****\\",\\n          \\"SqlId\\": \\"c67649d4a7fb62c4f8c7a447c52b5b17\\",\\n          \\"UseImciEngine\\": \\"true\\",\\n          \\"ParallelQueueTime\\": \\"2\\",\\n          \\"ParallelDegree\\": \\"10\\",\\n          \\"Scnt\\": 10,\\n          \\"Rows\\": 10,\\n          \\"Frows\\": 10,\\n          \\"TraceId\\": \\"14c93b7c7bf00000 \\",\\n          \\"PhysicRead\\": 0,\\n          \\"CpuTime\\": 100,\\n          \\"Writes\\": 10,\\n          \\"Collection\\": \\"None\\"\\n        }\\n      ]\\n    },\\n    \\"Finish\\": \\"1\\",\\n    \\"JobId\\": \\"MzI4NTZfUUlOR0RBT19DTTlfTlUyMF9NWVNRTF9PREJTX0xWU18zMjg1Nl9teXNxbF9XZWQgTWFyIDA2IDE0OjUwOjQ3IENTVCAyMDI0XzBfMzBfRXhlY3V0ZVRpbWVfREVTQ19XZWQgTWFyIDA2IDE0OjM1OjQ3IENTVCAyMDI0Xw==_1709708406465\\"\\n  }\\n}","type":"json"}]',
      'title' => '（废弃）查询DAS企业版日志明细',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。',
      'requestParamsDescription' => '**Key**支持的参数和取值：

- **KeyWords**：关键字，多个关键字间使用空格隔开。
- **LogicalOperator**：关键字间的逻辑操作，取值为and或or。
- **AccountName**：用户名。
- **dbName**：数据库名称。
- **HostAddress**：客户端IP地址。
- **MaxConsume**：最大耗时，单位毫秒。
- **MinConsume**：最小耗时，单位毫秒。
- **MaxScanRows**：最大扫描行。
- **MinScanRows**：最小扫描行。
- **SqlType**：SQL类型，取值select、update、insert或delete。
- **State**：执行结果，取值0（成功）或1（失败）。
- **ThreadId**：线程ID。
- **SortKey**：排序列名称，取值ScanRows（扫描行数）、UpdateRows（更新行数）、Consume（耗时）、ExecuteTime（执行时间）、ReturnRows（返回行数）、LockTime（锁等待时间）、Frows（PolarDB-X 2.0计算节点的拉取行数）、Scnt（PolarDB-X 2.0计算节点的DN请求数）、CpuTime（CPU执行时间）、PhysicalRead（物理读）。
- **SortMethod**：排序方式，取值DESC（降序）、ASC（升序）。默认为DESC。
- **TraceId**：PolarDB-X 2.0实例的跟踪ID。
- **MinRows**：最小更新行数。
- **MaxRows**：最大更新行数。
- **MinScnt**：PolarDB-X 2.0计算节点（CN）的DN最小请求数。
- **MaxScnt**：PolarDB-X 2.0计算节点（CN）的DN最大请求数。
- **TrxId**：事务ID。
- **Fail**：错误码。
- **SqlId**：SQL ID。
- **JobId**：对于开通企业版V0和V1的数据库实例，需要通过异步任务ID进一步查询返回结果。',
    ),
    'CreateSqlLogTask' => 
    array (
      'summary' => '调用CreateSqlLogTask接口，创建DAS企业版的离线任务。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '199695',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREhdmFT57I0',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据库实例ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'pc-2ze8g2am97624****',
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点ID。
>该参数仅适用于集群版实例，可以选择查询指定节点离线任务。若不传该参数，默认返回主节点离线任务。',
            'type' => 'string',
            'required' => false,
            'example' => 'pi-uf6k5f6g3912i****',
          ),
        ),
        2 => 
        array (
          'name' => 'Type',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务类型

- **Export**：导出任务。
- **Query**：查询任务。
- **Insight**：分析任务。',
            'type' => 'string',
            'required' => false,
            'example' => 'Export',
          ),
        ),
        3 => 
        array (
          'name' => 'Name',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'SQL审计导出1
',
          ),
        ),
        4 => 
        array (
          'name' => 'Filters',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '筛选条件列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '筛选条件。',
              'type' => 'object',
              'properties' => 
              array (
                'Key' => 
                array (
                  'title' => '过滤参数',
                  'description' => '过滤参数的名称。

> 支持的过滤参数及其取值请参考**请求参数补充说明**。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'KeyWords',
                ),
                'Value' => 
                array (
                  'description' => '过滤参数的数值。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'select',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
        5 => 
        array (
          'name' => 'StartTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务的开始时间，格式为Unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1596177993000
',
          ),
        ),
        6 => 
        array (
          'name' => 'EndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务结束时间，格式为unix时间戳，单位为毫秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1608888296000
',
          ),
        ),
        7 => 
        array (
          'name' => 'Role',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'PolarDB-X 2.0数据库实例节点信息。

- **polarx_cn**：计算节点。

- **polarx_dn**：数据节点。',
            'type' => 'string',
            'required' => false,
            'example' => 'polarx_cn',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Code' => 
              array (
                'description' => '返回的状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Message' => 
              array (
                'description' => '请求返回消息。
> 请求成功时该参数返回**Successful**，请求失败时会返回请求异常信息（如错误码等）。',
                'type' => 'string',
                'example' => 'Successful',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '83D9D59B-057A-54A9-BFF9-CF2B42F05645',
              ),
              'Success' => 
              array (
                'description' => '请求是否执行成功：

- **true**：执行成功。
- **false**：执行失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'title' => 'SqlLogTask',
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'TaskId' => 
                  array (
                    'description' => '任务ID。',
                    'type' => 'string',
                    'example' => '54f8041743ca3a9ac5cb9342d050527c',
                  ),
                  'InstanceId' => 
                  array (
                    'title' => '实例标识',
                    'description' => '数据库实例ID。',
                    'type' => 'string',
                    'example' => 'pc-2ze8g2am97624****',
                  ),
                  'Name' => 
                  array (
                    'title' => '任务别名',
                    'description' => '任务名称。',
                    'type' => 'string',
                    'example' => 'Export_test',
                  ),
                  'Start' => 
                  array (
                    'title' => '查询开始时间',
                    'description' => '开始时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1596177993000',
                  ),
                  'End' => 
                  array (
                    'title' => '查询结束时间',
                    'description' => 'j结束时间，格式为Unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1608888296000
',
                  ),
                  'Status' => 
                  array (
                    'title' => '任务状态',
                    'description' => '任务状态。
- **INIT**：待调度。
- **RUNNING**：运行中。
- **FAILED**：失败。
- **CANCELED**：已取消。
- **COMPLETED**：完成。

> 当任务处于**COMPLETED**时，可以查看任务的结果。',
                    'type' => 'string',
                    'example' => 'COMPLETED',
                  ),
                  'CreateTime' => 
                  array (
                    'title' => '任务创建时间',
                    'description' => '任务创建时间，格式为unix时间戳，单位为毫秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1681363254423
',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The request parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to do this action.',
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Code\\": \\"200\\",\\n  \\"Message\\": \\"Successful\\",\\n  \\"RequestId\\": \\"83D9D59B-057A-54A9-BFF9-CF2B42F05645\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": {\\n    \\"TaskId\\": \\"54f8041743ca3a9ac5cb9342d050527c\\",\\n    \\"InstanceId\\": \\"pc-2ze8g2am97624****\\",\\n    \\"Name\\": \\"Export_test\\",\\n    \\"Start\\": 1596177993000,\\n    \\"End\\": 1608888296000,\\n    \\"Status\\": \\"COMPLETED\\",\\n    \\"CreateTime\\": 1681363254423\\n  }\\n}","type":"json"}]',
      'title' => '（废弃）创建DAS企业版离线任务',
      'description' => '使用该接口需满足以下前提条件：

- 使用阿里云或DAS的SDK时，建议使用最新版本。
- 在使用SDK调用DAS服务时，需要将地域指定为cn-shanghai。
- 仅开通了DAS企业版 V2和V3的数据库实例支持创建离线任务。DAS企业版各个版本支持的数据库和地域请参见[DAS产品系列及支持的功能](~~156204~~)。',
      'requestParamsDescription' => '**Key**支持的参数和取值：

- **KeyWords**：关键字，多个关键字间使用空格隔开。
- **LogicalOperator**：关键字间的逻辑操作，取值为and或or。
- **AccountName**：用户名。
- **dbName**：数据库名称。
- **HostAddress**：客户端IP地址。
- **MaxConsume**：最大耗时，单位毫秒。
- **MinConsume**：最小耗时，单位毫秒。
- **MaxScanRows**：最大扫描行。
- **MinScanRows**：最小扫描行。
- **SqlType**：SQL类型，取值select、update、insert或delete。
- **State**：执行结果，取值0（成功）或1（失败）。
- **ThreadId**：线程ID。
- **SortKey**：排序列名称，取值ScanRows（扫描行数）、UpdateRows（更新行数）、Consume（耗时）、ExecuteTime（执行时间）、ReturnRows（返回行数）、LockTime（锁等待时间）、Frows（PolarDB-X 2.0计算节点的拉取行数）、Scnt（PolarDB-X 2.0计算节点的DN请求数）、CpuTime（CPU执行时间）、PhysicalRead（物理读）。
- **SortMethod**：排序方式，取值DESC（降序）、ASC（升序）。默认为DESC。
- **TraceId**：PolarDB-X 2.0实例的跟踪ID。
- **MinRows**：最小更新行数。
- **MaxRows**：最大更新行数。
- **MinScnt**：PolarDB-X 2.0计算节点（CN）的DN最小请求数。
- **MaxScnt**：PolarDB-X 2.0计算节点（CN）的DN最大请求数。
- **TrxId**：事务ID。
- **Fail**：错误码。
- **SqlId**：SQL ID。
- **JobId**：对于开通企业版V0和V1的数据库实例，需要通过异步任务ID进一步查询返回结果。',
    ),
  ),
  'endpoints' => 
  array (
    0 => 
    array (
      'regionId' => 'cn-shanghai',
      'endpoint' => 'das.cn-shanghai.aliyuncs.com',
    ),
    1 => 
    array (
      'regionId' => 'ap-northeast-2-pop',
      'endpoint' => 'das.aliyuncs.com',
    ),
    2 => 
    array (
      'regionId' => 'cn-beijing-finance-pop',
      'endpoint' => 'das.aliyuncs.com',
    ),
    3 => 
    array (
      'regionId' => 'cn-beijing-gov-1',
      'endpoint' => 'das.aliyuncs.com',
    ),
    4 => 
    array (
      'regionId' => 'cn-beijing-nu16-b01',
      'endpoint' => 'das.aliyuncs.com',
    ),
    5 => 
    array (
      'regionId' => 'cn-edge-1',
      'endpoint' => 'das.aliyuncs.com',
    ),
    6 => 
    array (
      'regionId' => 'cn-fujian',
      'endpoint' => 'das.aliyuncs.com',
    ),
    7 => 
    array (
      'regionId' => 'cn-haidian-cm12-c01',
      'endpoint' => 'das.aliyuncs.com',
    ),
    8 => 
    array (
      'regionId' => 'cn-hangzhou-bj-b01',
      'endpoint' => 'das.aliyuncs.com',
    ),
    9 => 
    array (
      'regionId' => 'cn-hangzhou-internal-prod-1',
      'endpoint' => 'das.aliyuncs.com',
    ),
    10 => 
    array (
      'regionId' => 'cn-hangzhou-internal-test-1',
      'endpoint' => 'das.aliyuncs.com',
    ),
    11 => 
    array (
      'regionId' => 'cn-hangzhou-internal-test-2',
      'endpoint' => 'das.aliyuncs.com',
    ),
    12 => 
    array (
      'regionId' => 'cn-hangzhou-internal-test-3',
      'endpoint' => 'das.aliyuncs.com',
    ),
    13 => 
    array (
      'regionId' => 'cn-hangzhou-test-306',
      'endpoint' => 'das.aliyuncs.com',
    ),
    14 => 
    array (
      'regionId' => 'cn-hongkong-finance-pop',
      'endpoint' => 'das.aliyuncs.com',
    ),
    15 => 
    array (
      'regionId' => 'cn-huhehaote-nebula-1',
      'endpoint' => 'das.aliyuncs.com',
    ),
    16 => 
    array (
      'regionId' => 'cn-north-2-gov-1',
      'endpoint' => 'das.aliyuncs.com',
    ),
    17 => 
    array (
      'regionId' => 'cn-qingdao-nebula',
      'endpoint' => 'das.aliyuncs.com',
    ),
    18 => 
    array (
      'regionId' => 'cn-shanghai-et15-b01',
      'endpoint' => 'das.aliyuncs.com',
    ),
    19 => 
    array (
      'regionId' => 'cn-shanghai-et2-b01',
      'endpoint' => 'das.aliyuncs.com',
    ),
    20 => 
    array (
      'regionId' => 'cn-shanghai-inner',
      'endpoint' => 'das.aliyuncs.com',
    ),
    21 => 
    array (
      'regionId' => 'cn-shanghai-internal-test-1',
      'endpoint' => 'das.aliyuncs.com',
    ),
    22 => 
    array (
      'regionId' => 'cn-shenzhen-inner',
      'endpoint' => 'das.aliyuncs.com',
    ),
    23 => 
    array (
      'regionId' => 'cn-shenzhen-st4-d01',
      'endpoint' => 'das.aliyuncs.com',
    ),
    24 => 
    array (
      'regionId' => 'cn-shenzhen-su18-b01',
      'endpoint' => 'das.aliyuncs.com',
    ),
    25 => 
    array (
      'regionId' => 'cn-wuhan',
      'endpoint' => 'das.aliyuncs.com',
    ),
    26 => 
    array (
      'regionId' => 'cn-yushanfang',
      'endpoint' => 'das.aliyuncs.com',
    ),
    27 => 
    array (
      'regionId' => 'cn-zhangbei',
      'endpoint' => 'das.aliyuncs.com',
    ),
    28 => 
    array (
      'regionId' => 'cn-zhangbei-na61-b01',
      'endpoint' => 'das.aliyuncs.com',
    ),
    29 => 
    array (
      'regionId' => 'cn-zhangjiakou-na62-a01',
      'endpoint' => 'das.aliyuncs.com',
    ),
    30 => 
    array (
      'regionId' => 'cn-zhengzhou-nebula-1',
      'endpoint' => 'das.aliyuncs.com',
    ),
    31 => 
    array (
      'regionId' => 'eu-west-1-oxs',
      'endpoint' => 'das.aliyuncs.com',
    ),
    32 => 
    array (
      'regionId' => 'rus-west-1-pop',
      'endpoint' => 'das.aliyuncs.com',
    ),
  ),
);