<?php

declare(strict_types=1);

namespace Dew\Acs\Devs;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createProject(array $arguments = [])
 * @method \Http\Promise\Promise createProjectAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProject(array $arguments = [])
 * @method \Http\Promise\Promise deleteProjectAsync($arguments = [])
 * @method \Dew\Acs\Result updateProject(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectAsync($arguments = [])
 * @method \Dew\Acs\Result putProject(array $arguments = [])
 * @method \Http\Promise\Promise putProjectAsync($arguments = [])
 * @method \Dew\Acs\Result listProjects(array $arguments = [])
 * @method \Http\Promise\Promise listProjectsAsync($arguments = [])
 * @method \Dew\Acs\Result getProject(array $arguments = [])
 * @method \Http\Promise\Promise getProjectAsync($arguments = [])
 * @method \Dew\Acs\Result createEnvironment(array $arguments = [])
 * @method \Http\Promise\Promise createEnvironmentAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEnvironment(array $arguments = [])
 * @method \Http\Promise\Promise deleteEnvironmentAsync($arguments = [])
 * @method \Dew\Acs\Result updateEnvironment(array $arguments = [])
 * @method \Http\Promise\Promise updateEnvironmentAsync($arguments = [])
 * @method \Dew\Acs\Result putEnvironment(array $arguments = [])
 * @method \Http\Promise\Promise putEnvironmentAsync($arguments = [])
 * @method \Dew\Acs\Result listEnvironments(array $arguments = [])
 * @method \Http\Promise\Promise listEnvironmentsAsync($arguments = [])
 * @method \Dew\Acs\Result getEnvironment(array $arguments = [])
 * @method \Http\Promise\Promise getEnvironmentAsync($arguments = [])
 * @method \Dew\Acs\Result createConnection(array $arguments = [])
 * @method \Http\Promise\Promise createConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConnection(array $arguments = [])
 * @method \Http\Promise\Promise deleteConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result listConnections(array $arguments = [])
 * @method \Http\Promise\Promise listConnectionsAsync($arguments = [])
 * @method \Dew\Acs\Result getConnection(array $arguments = [])
 * @method \Http\Promise\Promise getConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result refreshConnection(array $arguments = [])
 * @method \Http\Promise\Promise refreshConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result createRepository(array $arguments = [])
 * @method \Http\Promise\Promise createRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRepository(array $arguments = [])
 * @method \Http\Promise\Promise deleteRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result listRepositories(array $arguments = [])
 * @method \Http\Promise\Promise listRepositoriesAsync($arguments = [])
 * @method \Dew\Acs\Result getRepository(array $arguments = [])
 * @method \Http\Promise\Promise getRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result createPipelineTrigger(array $arguments = [])
 * @method \Http\Promise\Promise createPipelineTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result deletePipelineTrigger(array $arguments = [])
 * @method \Http\Promise\Promise deletePipelineTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result updatePipelineTrigger(array $arguments = [])
 * @method \Http\Promise\Promise updatePipelineTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result putPipelineTrigger(array $arguments = [])
 * @method \Http\Promise\Promise putPipelineTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelineTriggers(array $arguments = [])
 * @method \Http\Promise\Promise listPipelineTriggersAsync($arguments = [])
 * @method \Dew\Acs\Result getPipelineTrigger(array $arguments = [])
 * @method \Http\Promise\Promise getPipelineTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result createPipelineTriggerEvent(array $arguments = [])
 * @method \Http\Promise\Promise createPipelineTriggerEventAsync($arguments = [])
 * @method \Dew\Acs\Result deletePipelineTriggerEvent(array $arguments = [])
 * @method \Http\Promise\Promise deletePipelineTriggerEventAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelineTriggerEvents(array $arguments = [])
 * @method \Http\Promise\Promise listPipelineTriggerEventsAsync($arguments = [])
 * @method \Dew\Acs\Result getPipelineTriggerEvent(array $arguments = [])
 * @method \Http\Promise\Promise getPipelineTriggerEventAsync($arguments = [])
 * @method \Dew\Acs\Result createPipeline(array $arguments = [])
 * @method \Http\Promise\Promise createPipelineAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelines(array $arguments = [])
 * @method \Http\Promise\Promise listPipelinesAsync($arguments = [])
 * @method \Dew\Acs\Result getPipeline(array $arguments = [])
 * @method \Http\Promise\Promise getPipelineAsync($arguments = [])
 * @method \Dew\Acs\Result startPipeline(array $arguments = [])
 * @method \Http\Promise\Promise startPipelineAsync($arguments = [])
 * @method \Dew\Acs\Result cancelPipeline(array $arguments = [])
 * @method \Http\Promise\Promise cancelPipelineAsync($arguments = [])
 * @method \Dew\Acs\Result putPipelineStatus(array $arguments = [])
 * @method \Http\Promise\Promise putPipelineStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createTask(array $arguments = [])
 * @method \Http\Promise\Promise createTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listTasks(array $arguments = [])
 * @method \Http\Promise\Promise listTasksAsync($arguments = [])
 * @method \Dew\Acs\Result getTask(array $arguments = [])
 * @method \Http\Promise\Promise getTaskAsync($arguments = [])
 * @method \Dew\Acs\Result startTask(array $arguments = [])
 * @method \Http\Promise\Promise startTaskAsync($arguments = [])
 * @method \Dew\Acs\Result retryTask(array $arguments = [])
 * @method \Http\Promise\Promise retryTaskAsync($arguments = [])
 * @method \Dew\Acs\Result resumeTask(array $arguments = [])
 * @method \Http\Promise\Promise resumeTaskAsync($arguments = [])
 * @method \Dew\Acs\Result cancelTask(array $arguments = [])
 * @method \Http\Promise\Promise cancelTaskAsync($arguments = [])
 * @method \Dew\Acs\Result putTaskStatus(array $arguments = [])
 * @method \Http\Promise\Promise putTaskStatusAsync($arguments = [])
 */
final class DevsClient extends AcsClient
{
    //
}
