<?php

declare(strict_types=1);

namespace Dew\Acs\Devops;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createFile(array $arguments = [])
 * @method \Http\Promise\Promise createFileAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFile(array $arguments = [])
 * @method \Http\Promise\Promise deleteFileAsync($arguments = [])
 * @method \Dew\Acs\Result updateFile(array $arguments = [])
 * @method \Http\Promise\Promise updateFileAsync($arguments = [])
 * @method \Dew\Acs\Result getFileBlobs(array $arguments = [])
 * @method \Http\Promise\Promise getFileBlobsAsync($arguments = [])
 * @method \Dew\Acs\Result listRepositoryTree(array $arguments = [])
 * @method \Http\Promise\Promise listRepositoryTreeAsync($arguments = [])
 * @method \Dew\Acs\Result getFileLastCommit(array $arguments = [])
 * @method \Http\Promise\Promise getFileLastCommitAsync($arguments = [])
 * @method \Dew\Acs\Result getRepositoryCommit(array $arguments = [])
 * @method \Http\Promise\Promise getRepositoryCommitAsync($arguments = [])
 * @method \Dew\Acs\Result listRepositoryCommits(array $arguments = [])
 * @method \Http\Promise\Promise listRepositoryCommitsAsync($arguments = [])
 * @method \Dew\Acs\Result listRepositoryCommitDiff(array $arguments = [])
 * @method \Http\Promise\Promise listRepositoryCommitDiffAsync($arguments = [])
 * @method \Dew\Acs\Result createCommitWithMultipleFiles(array $arguments = [])
 * @method \Http\Promise\Promise createCommitWithMultipleFilesAsync($arguments = [])
 * @method \Dew\Acs\Result addRepositoryMember(array $arguments = [])
 * @method \Http\Promise\Promise addRepositoryMemberAsync($arguments = [])
 * @method \Dew\Acs\Result addGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise addGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRepositoryMember(array $arguments = [])
 * @method \Http\Promise\Promise deleteRepositoryMemberAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise deleteGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result updateRepositoryMember(array $arguments = [])
 * @method \Http\Promise\Promise updateRepositoryMemberAsync($arguments = [])
 * @method \Dew\Acs\Result updateGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise updateGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result listRepositoryMemberWithInherited(array $arguments = [])
 * @method \Http\Promise\Promise listRepositoryMemberWithInheritedAsync($arguments = [])
 * @method \Dew\Acs\Result getProjectMember(array $arguments = [])
 * @method \Http\Promise\Promise getProjectMemberAsync($arguments = [])
 * @method \Dew\Acs\Result listGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise listGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result createRepository(array $arguments = [])
 * @method \Http\Promise\Promise createRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRepository(array $arguments = [])
 * @method \Http\Promise\Promise deleteRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result updateRepository(array $arguments = [])
 * @method \Http\Promise\Promise updateRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result triggerRepositoryMirrorSync(array $arguments = [])
 * @method \Http\Promise\Promise triggerRepositoryMirrorSyncAsync($arguments = [])
 * @method \Dew\Acs\Result transferRepository(array $arguments = [])
 * @method \Http\Promise\Promise transferRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result listRepositories(array $arguments = [])
 * @method \Http\Promise\Promise listRepositoriesAsync($arguments = [])
 * @method \Dew\Acs\Result getRepository(array $arguments = [])
 * @method \Http\Promise\Promise getRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result createBranch(array $arguments = [])
 * @method \Http\Promise\Promise createBranchAsync($arguments = [])
 * @method \Dew\Acs\Result createProtectdBranch(array $arguments = [])
 * @method \Http\Promise\Promise createProtectdBranchAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBranch(array $arguments = [])
 * @method \Http\Promise\Promise deleteBranchAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProtectedBranch(array $arguments = [])
 * @method \Http\Promise\Promise deleteProtectedBranchAsync($arguments = [])
 * @method \Dew\Acs\Result updateProtectedBranches(array $arguments = [])
 * @method \Http\Promise\Promise updateProtectedBranchesAsync($arguments = [])
 * @method \Dew\Acs\Result getBranchInfo(array $arguments = [])
 * @method \Http\Promise\Promise getBranchInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listRepositoryBranches(array $arguments = [])
 * @method \Http\Promise\Promise listRepositoryBranchesAsync($arguments = [])
 * @method \Dew\Acs\Result listProtectedBranches(array $arguments = [])
 * @method \Http\Promise\Promise listProtectedBranchesAsync($arguments = [])
 * @method \Dew\Acs\Result getMergeRequest(array $arguments = [])
 * @method \Http\Promise\Promise getMergeRequestAsync($arguments = [])
 * @method \Dew\Acs\Result listMergeRequests(array $arguments = [])
 * @method \Http\Promise\Promise listMergeRequestsAsync($arguments = [])
 * @method \Dew\Acs\Result createMergeRequest(array $arguments = [])
 * @method \Http\Promise\Promise createMergeRequestAsync($arguments = [])
 * @method \Dew\Acs\Result updateMergeRequest(array $arguments = [])
 * @method \Http\Promise\Promise updateMergeRequestAsync($arguments = [])
 * @method \Dew\Acs\Result updateMergeRequestPersonnel(array $arguments = [])
 * @method \Http\Promise\Promise updateMergeRequestPersonnelAsync($arguments = [])
 * @method \Dew\Acs\Result mergeMergeRequest(array $arguments = [])
 * @method \Http\Promise\Promise mergeMergeRequestAsync($arguments = [])
 * @method \Dew\Acs\Result reviewMergeRequest(array $arguments = [])
 * @method \Http\Promise\Promise reviewMergeRequestAsync($arguments = [])
 * @method \Dew\Acs\Result closeMergeRequest(array $arguments = [])
 * @method \Http\Promise\Promise closeMergeRequestAsync($arguments = [])
 * @method \Dew\Acs\Result reopenMergeRequest(array $arguments = [])
 * @method \Http\Promise\Promise reopenMergeRequestAsync($arguments = [])
 * @method \Dew\Acs\Result listMergeRequestPatchSets(array $arguments = [])
 * @method \Http\Promise\Promise listMergeRequestPatchSetsAsync($arguments = [])
 * @method \Dew\Acs\Result getMergeRequestChangeTree(array $arguments = [])
 * @method \Http\Promise\Promise getMergeRequestChangeTreeAsync($arguments = [])
 * @method \Dew\Acs\Result listMergeRequestFilesReads(array $arguments = [])
 * @method \Http\Promise\Promise listMergeRequestFilesReadsAsync($arguments = [])
 * @method \Dew\Acs\Result listMergeRequestComments(array $arguments = [])
 * @method \Http\Promise\Promise listMergeRequestCommentsAsync($arguments = [])
 * @method \Dew\Acs\Result createComment(array $arguments = [])
 * @method \Http\Promise\Promise createCommentAsync($arguments = [])
 * @method \Dew\Acs\Result getCompareDetail(array $arguments = [])
 * @method \Http\Promise\Promise getCompareDetailAsync($arguments = [])
 * @method \Dew\Acs\Result createCommitStatus(array $arguments = [])
 * @method \Http\Promise\Promise createCommitStatusAsync($arguments = [])
 * @method \Dew\Acs\Result listCommitStatuses(array $arguments = [])
 * @method \Http\Promise\Promise listCommitStatusesAsync($arguments = [])
 * @method \Dew\Acs\Result createCheckRun(array $arguments = [])
 * @method \Http\Promise\Promise createCheckRunAsync($arguments = [])
 * @method \Dew\Acs\Result updateCheckRun(array $arguments = [])
 * @method \Http\Promise\Promise updateCheckRunAsync($arguments = [])
 * @method \Dew\Acs\Result getCheckRun(array $arguments = [])
 * @method \Http\Promise\Promise getCheckRunAsync($arguments = [])
 * @method \Dew\Acs\Result listCheckRuns(array $arguments = [])
 * @method \Http\Promise\Promise listCheckRunsAsync($arguments = [])
 * @method \Dew\Acs\Result createTag(array $arguments = [])
 * @method \Http\Promise\Promise createTagAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTag(array $arguments = [])
 * @method \Http\Promise\Promise deleteTagAsync($arguments = [])
 * @method \Dew\Acs\Result getRepositoryTag(array $arguments = [])
 * @method \Http\Promise\Promise getRepositoryTagAsync($arguments = [])
 * @method \Dew\Acs\Result listRepositoryTags(array $arguments = [])
 * @method \Http\Promise\Promise listRepositoryTagsAsync($arguments = [])
 * @method \Dew\Acs\Result createProjectLabel(array $arguments = [])
 * @method \Http\Promise\Promise createProjectLabelAsync($arguments = [])
 * @method \Dew\Acs\Result updateProjectLabel(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectLabelAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProjectLabel(array $arguments = [])
 * @method \Http\Promise\Promise deleteProjectLabelAsync($arguments = [])
 * @method \Dew\Acs\Result listProjectLabels(array $arguments = [])
 * @method \Http\Promise\Promise listProjectLabelsAsync($arguments = [])
 * @method \Dew\Acs\Result listMergeRequestLabels(array $arguments = [])
 * @method \Http\Promise\Promise listMergeRequestLabelsAsync($arguments = [])
 * @method \Dew\Acs\Result linkMergeRequestLabel(array $arguments = [])
 * @method \Http\Promise\Promise linkMergeRequestLabelAsync($arguments = [])
 * @method \Dew\Acs\Result addWebhook(array $arguments = [])
 * @method \Http\Promise\Promise addWebhookAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRepositoryWebhook(array $arguments = [])
 * @method \Http\Promise\Promise deleteRepositoryWebhookAsync($arguments = [])
 * @method \Dew\Acs\Result listRepositoryWebhook(array $arguments = [])
 * @method \Http\Promise\Promise listRepositoryWebhookAsync($arguments = [])
 * @method \Dew\Acs\Result createRepositoryGroup(array $arguments = [])
 * @method \Http\Promise\Promise createRepositoryGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRepositoryGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteRepositoryGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getGroupDetail(array $arguments = [])
 * @method \Http\Promise\Promise getGroupDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getGroupByPath(array $arguments = [])
 * @method \Http\Promise\Promise getGroupByPathAsync($arguments = [])
 * @method \Dew\Acs\Result listRepositoryGroups(array $arguments = [])
 * @method \Http\Promise\Promise listRepositoryGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result listGroupRepositories(array $arguments = [])
 * @method \Http\Promise\Promise listGroupRepositoriesAsync($arguments = [])
 * @method \Dew\Acs\Result updatePushReviewOnOff(array $arguments = [])
 * @method \Http\Promise\Promise updatePushReviewOnOffAsync($arguments = [])
 * @method \Dew\Acs\Result createPushRule(array $arguments = [])
 * @method \Http\Promise\Promise createPushRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updatePushRule(array $arguments = [])
 * @method \Http\Promise\Promise updatePushRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deletePushRule(array $arguments = [])
 * @method \Http\Promise\Promise deletePushRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listPushRules(array $arguments = [])
 * @method \Http\Promise\Promise listPushRulesAsync($arguments = [])
 * @method \Dew\Acs\Result createDeployKey(array $arguments = [])
 * @method \Http\Promise\Promise createDeployKeyAsync($arguments = [])
 * @method \Dew\Acs\Result enableDeployKey(array $arguments = [])
 * @method \Http\Promise\Promise enableDeployKeyAsync($arguments = [])
 * @method \Dew\Acs\Result createUserKey(array $arguments = [])
 * @method \Http\Promise\Promise createUserKeyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserKey(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserKeyAsync($arguments = [])
 * @method \Dew\Acs\Result listUserKeys(array $arguments = [])
 * @method \Http\Promise\Promise listUserKeysAsync($arguments = [])
 * @method \Dew\Acs\Result listSearchSourceCode(array $arguments = [])
 * @method \Http\Promise\Promise listSearchSourceCodeAsync($arguments = [])
 * @method \Dew\Acs\Result listSearchRepository(array $arguments = [])
 * @method \Http\Promise\Promise listSearchRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result listSearchCommit(array $arguments = [])
 * @method \Http\Promise\Promise listSearchCommitAsync($arguments = [])
 * @method \Dew\Acs\Result getSearchCodePreview(array $arguments = [])
 * @method \Http\Promise\Promise getSearchCodePreviewAsync($arguments = [])
 * @method \Dew\Acs\Result getCodeupOrganization(array $arguments = [])
 * @method \Http\Promise\Promise getCodeupOrganizationAsync($arguments = [])
 * @method \Dew\Acs\Result listOrganizations(array $arguments = [])
 * @method \Http\Promise\Promise listOrganizationsAsync($arguments = [])
 * @method \Dew\Acs\Result getUserInfo(array $arguments = [])
 * @method \Http\Promise\Promise getUserInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listUserResources(array $arguments = [])
 * @method \Http\Promise\Promise listUserResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result createOAuthToken(array $arguments = [])
 * @method \Http\Promise\Promise createOAuthTokenAsync($arguments = [])
 * @method \Dew\Acs\Result createServiceConnection(array $arguments = [])
 * @method \Http\Promise\Promise createServiceConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result createServiceAuth(array $arguments = [])
 * @method \Http\Promise\Promise createServiceAuthAsync($arguments = [])
 * @method \Dew\Acs\Result createServiceCredential(array $arguments = [])
 * @method \Http\Promise\Promise createServiceCredentialAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceCredentials(array $arguments = [])
 * @method \Http\Promise\Promise listServiceCredentialsAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceAuths(array $arguments = [])
 * @method \Http\Promise\Promise listServiceAuthsAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceConnections(array $arguments = [])
 * @method \Http\Promise\Promise listServiceConnectionsAsync($arguments = [])
 * @method \Dew\Acs\Result stopVMDeployOrder(array $arguments = [])
 * @method \Http\Promise\Promise stopVMDeployOrderAsync($arguments = [])
 * @method \Dew\Acs\Result skipVMDeployMachine(array $arguments = [])
 * @method \Http\Promise\Promise skipVMDeployMachineAsync($arguments = [])
 * @method \Dew\Acs\Result retryVMDeployMachine(array $arguments = [])
 * @method \Http\Promise\Promise retryVMDeployMachineAsync($arguments = [])
 * @method \Dew\Acs\Result resumeVMDeployOrder(array $arguments = [])
 * @method \Http\Promise\Promise resumeVMDeployOrderAsync($arguments = [])
 * @method \Dew\Acs\Result getVMDeployOrder(array $arguments = [])
 * @method \Http\Promise\Promise getVMDeployOrderAsync($arguments = [])
 * @method \Dew\Acs\Result logVMDeployMachine(array $arguments = [])
 * @method \Http\Promise\Promise logVMDeployMachineAsync($arguments = [])
 * @method \Dew\Acs\Result createPipelineGroup(array $arguments = [])
 * @method \Http\Promise\Promise createPipelineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deletePipelineGroup(array $arguments = [])
 * @method \Http\Promise\Promise deletePipelineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result joinPipelineGroup(array $arguments = [])
 * @method \Http\Promise\Promise joinPipelineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updatePipelineGroup(array $arguments = [])
 * @method \Http\Promise\Promise updatePipelineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getPipelineGroup(array $arguments = [])
 * @method \Http\Promise\Promise getPipelineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelineGroupPipelines(array $arguments = [])
 * @method \Http\Promise\Promise listPipelineGroupPipelinesAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelineGroups(array $arguments = [])
 * @method \Http\Promise\Promise listPipelineGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result createFlowTag(array $arguments = [])
 * @method \Http\Promise\Promise createFlowTagAsync($arguments = [])
 * @method \Dew\Acs\Result createFlowTagGroup(array $arguments = [])
 * @method \Http\Promise\Promise createFlowTagGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFlowTagGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteFlowTagGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFlowTag(array $arguments = [])
 * @method \Http\Promise\Promise deleteFlowTagAsync($arguments = [])
 * @method \Dew\Acs\Result updateFlowTag(array $arguments = [])
 * @method \Http\Promise\Promise updateFlowTagAsync($arguments = [])
 * @method \Dew\Acs\Result updateFlowTagGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateFlowTagGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getFlowTagGroup(array $arguments = [])
 * @method \Http\Promise\Promise getFlowTagGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listFlowTagGroups(array $arguments = [])
 * @method \Http\Promise\Promise listFlowTagGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result createSshKey(array $arguments = [])
 * @method \Http\Promise\Promise createSshKeyAsync($arguments = [])
 * @method \Dew\Acs\Result resetSshKey(array $arguments = [])
 * @method \Http\Promise\Promise resetSshKeyAsync($arguments = [])
 * @method \Dew\Acs\Result createResourceMember(array $arguments = [])
 * @method \Http\Promise\Promise createResourceMemberAsync($arguments = [])
 * @method \Dew\Acs\Result deleteResourceMember(array $arguments = [])
 * @method \Http\Promise\Promise deleteResourceMemberAsync($arguments = [])
 * @method \Dew\Acs\Result updateResourceMember(array $arguments = [])
 * @method \Http\Promise\Promise updateResourceMemberAsync($arguments = [])
 * @method \Dew\Acs\Result listResourceMembers(array $arguments = [])
 * @method \Http\Promise\Promise listResourceMembersAsync($arguments = [])
 * @method \Dew\Acs\Result createHostGroup(array $arguments = [])
 * @method \Http\Promise\Promise createHostGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteHostGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteHostGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateHostGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateHostGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getHostGroup(array $arguments = [])
 * @method \Http\Promise\Promise getHostGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listHostGroups(array $arguments = [])
 * @method \Http\Promise\Promise listHostGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result createVariableGroup(array $arguments = [])
 * @method \Http\Promise\Promise createVariableGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVariableGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteVariableGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateVariableGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateVariableGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getVariableGroup(array $arguments = [])
 * @method \Http\Promise\Promise getVariableGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listVariableGroups(array $arguments = [])
 * @method \Http\Promise\Promise listVariableGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result createPipeline(array $arguments = [])
 * @method \Http\Promise\Promise createPipelineAsync($arguments = [])
 * @method \Dew\Acs\Result deletePipeline(array $arguments = [])
 * @method \Http\Promise\Promise deletePipelineAsync($arguments = [])
 * @method \Dew\Acs\Result deletePipelineRelations(array $arguments = [])
 * @method \Http\Promise\Promise deletePipelineRelationsAsync($arguments = [])
 * @method \Dew\Acs\Result updatePipeline(array $arguments = [])
 * @method \Http\Promise\Promise updatePipelineAsync($arguments = [])
 * @method \Dew\Acs\Result startPipelineRun(array $arguments = [])
 * @method \Http\Promise\Promise startPipelineRunAsync($arguments = [])
 * @method \Dew\Acs\Result stopPipelineJobRun(array $arguments = [])
 * @method \Http\Promise\Promise stopPipelineJobRunAsync($arguments = [])
 * @method \Dew\Acs\Result stopPipelineRun(array $arguments = [])
 * @method \Http\Promise\Promise stopPipelineRunAsync($arguments = [])
 * @method \Dew\Acs\Result updatePipelineBaseInfo(array $arguments = [])
 * @method \Http\Promise\Promise updatePipelineBaseInfoAsync($arguments = [])
 * @method \Dew\Acs\Result retryPipelineJobRun(array $arguments = [])
 * @method \Http\Promise\Promise retryPipelineJobRunAsync($arguments = [])
 * @method \Dew\Acs\Result skipPipelineJobRun(array $arguments = [])
 * @method \Http\Promise\Promise skipPipelineJobRunAsync($arguments = [])
 * @method \Dew\Acs\Result passPipelineValidate(array $arguments = [])
 * @method \Http\Promise\Promise passPipelineValidateAsync($arguments = [])
 * @method \Dew\Acs\Result refusePipelineValidate(array $arguments = [])
 * @method \Http\Promise\Promise refusePipelineValidateAsync($arguments = [])
 * @method \Dew\Acs\Result addPipelineRelations(array $arguments = [])
 * @method \Http\Promise\Promise addPipelineRelationsAsync($arguments = [])
 * @method \Dew\Acs\Result getPipeline(array $arguments = [])
 * @method \Http\Promise\Promise getPipelineAsync($arguments = [])
 * @method \Dew\Acs\Result getPipelineRun(array $arguments = [])
 * @method \Http\Promise\Promise getPipelineRunAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelineRuns(array $arguments = [])
 * @method \Http\Promise\Promise listPipelineRunsAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelines(array $arguments = [])
 * @method \Http\Promise\Promise listPipelinesAsync($arguments = [])
 * @method \Dew\Acs\Result getPipelineArtifactUrl(array $arguments = [])
 * @method \Http\Promise\Promise getPipelineArtifactUrlAsync($arguments = [])
 * @method \Dew\Acs\Result getPipelineEmasArtifactUrl(array $arguments = [])
 * @method \Http\Promise\Promise getPipelineEmasArtifactUrlAsync($arguments = [])
 * @method \Dew\Acs\Result getPipelineScanReportUrl(array $arguments = [])
 * @method \Http\Promise\Promise getPipelineScanReportUrlAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelineJobHistorys(array $arguments = [])
 * @method \Http\Promise\Promise listPipelineJobHistorysAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelineJobs(array $arguments = [])
 * @method \Http\Promise\Promise listPipelineJobsAsync($arguments = [])
 * @method \Dew\Acs\Result logPipelineJobRun(array $arguments = [])
 * @method \Http\Promise\Promise logPipelineJobRunAsync($arguments = [])
 * @method \Dew\Acs\Result listPipelineRelations(array $arguments = [])
 * @method \Http\Promise\Promise listPipelineRelationsAsync($arguments = [])
 * @method \Dew\Acs\Result workitemAttachmentCreate(array $arguments = [])
 * @method \Http\Promise\Promise workitemAttachmentCreateAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkitemAttachments(array $arguments = [])
 * @method \Http\Promise\Promise listWorkitemAttachmentsAsync($arguments = [])
 * @method \Dew\Acs\Result createWorkitemV2(array $arguments = [])
 * @method \Http\Promise\Promise createWorkitemV2Async($arguments = [])
 * @method \Dew\Acs\Result createWorkitemRecord(array $arguments = [])
 * @method \Http\Promise\Promise createWorkitemRecordAsync($arguments = [])
 * @method \Dew\Acs\Result createWorkitem(array $arguments = [])
 * @method \Http\Promise\Promise createWorkitemAsync($arguments = [])
 * @method \Dew\Acs\Result createWorkitemComment(array $arguments = [])
 * @method \Http\Promise\Promise createWorkitemCommentAsync($arguments = [])
 * @method \Dew\Acs\Result deleteWorkitemComment(array $arguments = [])
 * @method \Http\Promise\Promise deleteWorkitemCommentAsync($arguments = [])
 * @method \Dew\Acs\Result deleteWorkitemAllComment(array $arguments = [])
 * @method \Http\Promise\Promise deleteWorkitemAllCommentAsync($arguments = [])
 * @method \Dew\Acs\Result updateWorkitemComment(array $arguments = [])
 * @method \Http\Promise\Promise updateWorkitemCommentAsync($arguments = [])
 * @method \Dew\Acs\Result updateWorkItem(array $arguments = [])
 * @method \Http\Promise\Promise updateWorkItemAsync($arguments = [])
 * @method \Dew\Acs\Result getWorkitemAttachmentCreatemeta(array $arguments = [])
 * @method \Http\Promise\Promise getWorkitemAttachmentCreatemetaAsync($arguments = [])
 * @method \Dew\Acs\Result getWorkitemTimeTypeList(array $arguments = [])
 * @method \Http\Promise\Promise getWorkitemTimeTypeListAsync($arguments = [])
 * @method \Dew\Acs\Result getWorkitemRelations(array $arguments = [])
 * @method \Http\Promise\Promise getWorkitemRelationsAsync($arguments = [])
 * @method \Dew\Acs\Result getWorkitemCommentList(array $arguments = [])
 * @method \Http\Promise\Promise getWorkitemCommentListAsync($arguments = [])
 * @method \Dew\Acs\Result createWorkitemEstimate(array $arguments = [])
 * @method \Http\Promise\Promise createWorkitemEstimateAsync($arguments = [])
 * @method \Dew\Acs\Result getCustomFieldOption(array $arguments = [])
 * @method \Http\Promise\Promise getCustomFieldOptionAsync($arguments = [])
 * @method \Dew\Acs\Result getWorkItemActivity(array $arguments = [])
 * @method \Http\Promise\Promise getWorkItemActivityAsync($arguments = [])
 * @method \Dew\Acs\Result getWorkItemInfo(array $arguments = [])
 * @method \Http\Promise\Promise getWorkItemInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getWorkItemWorkFlowInfo(array $arguments = [])
 * @method \Http\Promise\Promise getWorkItemWorkFlowInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listProjectWorkitemTypes(array $arguments = [])
 * @method \Http\Promise\Promise listProjectWorkitemTypesAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkItemAllFields(array $arguments = [])
 * @method \Http\Promise\Promise listWorkItemAllFieldsAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkItemWorkFlowStatus(array $arguments = [])
 * @method \Http\Promise\Promise listWorkItemWorkFlowStatusAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkitems(array $arguments = [])
 * @method \Http\Promise\Promise listWorkitemsAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkitemTime(array $arguments = [])
 * @method \Http\Promise\Promise listWorkitemTimeAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkitemEstimate(array $arguments = [])
 * @method \Http\Promise\Promise listWorkitemEstimateAsync($arguments = [])
 * @method \Dew\Acs\Result updateWorkitemField(array $arguments = [])
 * @method \Http\Promise\Promise updateWorkitemFieldAsync($arguments = [])
 * @method \Dew\Acs\Result deleteWorkitem(array $arguments = [])
 * @method \Http\Promise\Promise deleteWorkitemAsync($arguments = [])
 * @method \Dew\Acs\Result getWorkitemFile(array $arguments = [])
 * @method \Http\Promise\Promise getWorkitemFileAsync($arguments = [])
 * @method \Dew\Acs\Result createProject(array $arguments = [])
 * @method \Http\Promise\Promise createProjectAsync($arguments = [])
 * @method \Dew\Acs\Result createSprint(array $arguments = [])
 * @method \Http\Promise\Promise createSprintAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProject(array $arguments = [])
 * @method \Http\Promise\Promise deleteProjectAsync($arguments = [])
 * @method \Dew\Acs\Result updateProjectMember(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectMemberAsync($arguments = [])
 * @method \Dew\Acs\Result updateProjectField(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectFieldAsync($arguments = [])
 * @method \Dew\Acs\Result getProjectInfo(array $arguments = [])
 * @method \Http\Promise\Promise getProjectInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listProjectMembers(array $arguments = [])
 * @method \Http\Promise\Promise listProjectMembersAsync($arguments = [])
 * @method \Dew\Acs\Result getSprintInfo(array $arguments = [])
 * @method \Http\Promise\Promise getSprintInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listProjects(array $arguments = [])
 * @method \Http\Promise\Promise listProjectsAsync($arguments = [])
 * @method \Dew\Acs\Result listProjectTemplates(array $arguments = [])
 * @method \Http\Promise\Promise listProjectTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result listSprints(array $arguments = [])
 * @method \Http\Promise\Promise listSprintsAsync($arguments = [])
 * @method \Dew\Acs\Result createTestCase(array $arguments = [])
 * @method \Http\Promise\Promise createTestCaseAsync($arguments = [])
 * @method \Dew\Acs\Result updateTestCase(array $arguments = [])
 * @method \Http\Promise\Promise updateTestCaseAsync($arguments = [])
 * @method \Dew\Acs\Result listTestCaseFields(array $arguments = [])
 * @method \Http\Promise\Promise listTestCaseFieldsAsync($arguments = [])
 * @method \Dew\Acs\Result getTestcaseList(array $arguments = [])
 * @method \Http\Promise\Promise getTestcaseListAsync($arguments = [])
 * @method \Dew\Acs\Result updateTestResult(array $arguments = [])
 * @method \Http\Promise\Promise updateTestResultAsync($arguments = [])
 * @method \Dew\Acs\Result getTestResultList(array $arguments = [])
 * @method \Http\Promise\Promise getTestResultListAsync($arguments = [])
 * @method \Dew\Acs\Result exportWorkitemActivity(array $arguments = [])
 * @method \Http\Promise\Promise exportWorkitemActivityAsync($arguments = [])
 * @method \Dew\Acs\Result exportInsightWorkitemVersion(array $arguments = [])
 * @method \Http\Promise\Promise exportInsightWorkitemVersionAsync($arguments = [])
 * @method \Dew\Acs\Result exportInsightWorkitemStatusJoinWorkitemDefectExtra(array $arguments = [])
 * @method \Http\Promise\Promise exportInsightWorkitemStatusJoinWorkitemDefectExtraAsync($arguments = [])
 * @method \Dew\Acs\Result exportInsightWorkitemStatus(array $arguments = [])
 * @method \Http\Promise\Promise exportInsightWorkitemStatusAsync($arguments = [])
 * @method \Dew\Acs\Result exportInsightWorkTime(array $arguments = [])
 * @method \Http\Promise\Promise exportInsightWorkTimeAsync($arguments = [])
 * @method \Dew\Acs\Result exportInsightTagRef(array $arguments = [])
 * @method \Http\Promise\Promise exportInsightTagRefAsync($arguments = [])
 * @method \Dew\Acs\Result exportInsightSprint(array $arguments = [])
 * @method \Http\Promise\Promise exportInsightSprintAsync($arguments = [])
 * @method \Dew\Acs\Result exportInsightSpaceRef(array $arguments = [])
 * @method \Http\Promise\Promise exportInsightSpaceRefAsync($arguments = [])
 * @method \Dew\Acs\Result exportInsightSpace(array $arguments = [])
 * @method \Http\Promise\Promise exportInsightSpaceAsync($arguments = [])
 * @method \Dew\Acs\Result exportInsightField(array $arguments = [])
 * @method \Http\Promise\Promise exportInsightFieldAsync($arguments = [])
 * @method \Dew\Acs\Result exportInsightExpectedWorkTime(array $arguments = [])
 * @method \Http\Promise\Promise exportInsightExpectedWorkTimeAsync($arguments = [])
 * @method \Dew\Acs\Result exportInsightCustomValue(array $arguments = [])
 * @method \Http\Promise\Promise exportInsightCustomValueAsync($arguments = [])
 * @method \Dew\Acs\Result updateOrganizationMember(array $arguments = [])
 * @method \Http\Promise\Promise updateOrganizationMemberAsync($arguments = [])
 * @method \Dew\Acs\Result listOrganizationMembers(array $arguments = [])
 * @method \Http\Promise\Promise listOrganizationMembersAsync($arguments = [])
 * @method \Dew\Acs\Result getOrganizationMember(array $arguments = [])
 * @method \Http\Promise\Promise getOrganizationMemberAsync($arguments = [])
 * @method \Dew\Acs\Result listJoinedOrganizations(array $arguments = [])
 * @method \Http\Promise\Promise listJoinedOrganizationsAsync($arguments = [])
 * @method \Dew\Acs\Result getApplication(array $arguments = [])
 * @method \Http\Promise\Promise getApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result updateApplication(array $arguments = [])
 * @method \Http\Promise\Promise updateApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result listApplications(array $arguments = [])
 * @method \Http\Promise\Promise listApplicationsAsync($arguments = [])
 * @method \Dew\Acs\Result listApplicationMembers(array $arguments = [])
 * @method \Http\Promise\Promise listApplicationMembersAsync($arguments = [])
 * @method \Dew\Acs\Result createAppMembers(array $arguments = [])
 * @method \Http\Promise\Promise createAppMembersAsync($arguments = [])
 * @method \Dew\Acs\Result updateAppMember(array $arguments = [])
 * @method \Http\Promise\Promise updateAppMemberAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAppMember(array $arguments = [])
 * @method \Http\Promise\Promise deleteAppMemberAsync($arguments = [])
 * @method \Dew\Acs\Result getReleaseStagePipelineRun(array $arguments = [])
 * @method \Http\Promise\Promise getReleaseStagePipelineRunAsync($arguments = [])
 * @method \Dew\Acs\Result executeChangeRequestReleaseStage(array $arguments = [])
 * @method \Http\Promise\Promise executeChangeRequestReleaseStageAsync($arguments = [])
 * @method \Dew\Acs\Result cancelExecutionReleaseStage(array $arguments = [])
 * @method \Http\Promise\Promise cancelExecutionReleaseStageAsync($arguments = [])
 * @method \Dew\Acs\Result listAllReleaseWorkflows(array $arguments = [])
 * @method \Http\Promise\Promise listAllReleaseWorkflowsAsync($arguments = [])
 * @method \Dew\Acs\Result listAppReleaseStageExecutions(array $arguments = [])
 * @method \Http\Promise\Promise listAppReleaseStageExecutionsAsync($arguments = [])
 * @method \Dew\Acs\Result listAppReleaseStageExecutionIntegratedMetadata(array $arguments = [])
 * @method \Http\Promise\Promise listAppReleaseStageExecutionIntegratedMetadataAsync($arguments = [])
 * @method \Dew\Acs\Result refuseReleaseStagePipelineValidate(array $arguments = [])
 * @method \Http\Promise\Promise refuseReleaseStagePipelineValidateAsync($arguments = [])
 * @method \Dew\Acs\Result passReleaseStagePipelineValidate(array $arguments = [])
 * @method \Http\Promise\Promise passReleaseStagePipelineValidateAsync($arguments = [])
 * @method \Dew\Acs\Result createChangeRequest(array $arguments = [])
 * @method \Http\Promise\Promise createChangeRequestAsync($arguments = [])
 * @method \Dew\Acs\Result listChangeRequests(array $arguments = [])
 * @method \Http\Promise\Promise listChangeRequestsAsync($arguments = [])
 * @method \Dew\Acs\Result listChangeRequestWorkflowExecutions(array $arguments = [])
 * @method \Http\Promise\Promise listChangeRequestWorkflowExecutionsAsync($arguments = [])
 * @method \Dew\Acs\Result listUserDrawRecordByPk(array $arguments = [])
 * @method \Http\Promise\Promise listUserDrawRecordByPkAsync($arguments = [])
 */
final class DevopsClient extends AcsClient
{
    //
}
