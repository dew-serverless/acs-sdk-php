<?php

declare(strict_types=1);

namespace Dew\Acs\MPServerless;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createSpaceWithOrder(array $arguments = [])
 * @method \Http\Promise\Promise createSpaceWithOrderAsync($arguments = [])
 * @method \Dew\Acs\Result describeSpaces(array $arguments = [])
 * @method \Http\Promise\Promise describeSpacesAsync($arguments = [])
 * @method \Dew\Acs\Result createSpace(array $arguments = [])
 * @method \Http\Promise\Promise createSpaceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSpace(array $arguments = [])
 * @method \Http\Promise\Promise deleteSpaceAsync($arguments = [])
 * @method \Dew\Acs\Result updateSpace(array $arguments = [])
 * @method \Http\Promise\Promise updateSpaceAsync($arguments = [])
 * @method \Dew\Acs\Result listSpace(array $arguments = [])
 * @method \Http\Promise\Promise listSpaceAsync($arguments = [])
 * @method \Dew\Acs\Result createFunction(array $arguments = [])
 * @method \Http\Promise\Promise createFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result createFunctionDeployment(array $arguments = [])
 * @method \Http\Promise\Promise createFunctionDeploymentAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFunction(array $arguments = [])
 * @method \Http\Promise\Promise deleteFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result updateFunction(array $arguments = [])
 * @method \Http\Promise\Promise updateFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result updateHttpTriggerConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateHttpTriggerConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeFunction(array $arguments = [])
 * @method \Http\Promise\Promise describeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result describeHttpTriggerConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeHttpTriggerConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listFunction(array $arguments = [])
 * @method \Http\Promise\Promise listFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result listFunctionDeployment(array $arguments = [])
 * @method \Http\Promise\Promise listFunctionDeploymentAsync($arguments = [])
 * @method \Dew\Acs\Result listFunctionLog(array $arguments = [])
 * @method \Http\Promise\Promise listFunctionLogAsync($arguments = [])
 * @method \Dew\Acs\Result deployFunction(array $arguments = [])
 * @method \Http\Promise\Promise deployFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result runFunction(array $arguments = [])
 * @method \Http\Promise\Promise runFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDBCollection(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBCollectionAsync($arguments = [])
 * @method \Dew\Acs\Result renameDBCollection(array $arguments = [])
 * @method \Http\Promise\Promise renameDBCollectionAsync($arguments = [])
 * @method \Dew\Acs\Result runDBCommand(array $arguments = [])
 * @method \Http\Promise\Promise runDBCommandAsync($arguments = [])
 * @method \Dew\Acs\Result createDBRestoreTask(array $arguments = [])
 * @method \Http\Promise\Promise createDBRestoreTaskAsync($arguments = [])
 * @method \Dew\Acs\Result queryDBBackupCollections(array $arguments = [])
 * @method \Http\Promise\Promise queryDBBackupCollectionsAsync($arguments = [])
 * @method \Dew\Acs\Result queryDBRestoreTaskStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryDBRestoreTaskStatusAsync($arguments = [])
 * @method \Dew\Acs\Result queryDBBackupDumpTimes(array $arguments = [])
 * @method \Http\Promise\Promise queryDBBackupDumpTimesAsync($arguments = [])
 * @method \Dew\Acs\Result createDBExportTask(array $arguments = [])
 * @method \Http\Promise\Promise createDBExportTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createDBImportTask(array $arguments = [])
 * @method \Http\Promise\Promise createDBImportTaskAsync($arguments = [])
 * @method \Dew\Acs\Result queryDBExportTaskStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryDBExportTaskStatusAsync($arguments = [])
 * @method \Dew\Acs\Result queryDBImportTaskStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryDBImportTaskStatusAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFile(array $arguments = [])
 * @method \Http\Promise\Promise deleteFileAsync($arguments = [])
 * @method \Dew\Acs\Result registerFile(array $arguments = [])
 * @method \Http\Promise\Promise registerFileAsync($arguments = [])
 * @method \Dew\Acs\Result describeFileUploadSignedUrl(array $arguments = [])
 * @method \Http\Promise\Promise describeFileUploadSignedUrlAsync($arguments = [])
 * @method \Dew\Acs\Result listFile(array $arguments = [])
 * @method \Http\Promise\Promise listFileAsync($arguments = [])
 * @method \Dew\Acs\Result describeCdnDomain(array $arguments = [])
 * @method \Http\Promise\Promise describeCdnDomainAsync($arguments = [])
 * @method \Dew\Acs\Result saveCdnDomainConfig(array $arguments = [])
 * @method \Http\Promise\Promise saveCdnDomainConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteWebHostingFile(array $arguments = [])
 * @method \Http\Promise\Promise deleteWebHostingFileAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeleteWebHostingFiles(array $arguments = [])
 * @method \Http\Promise\Promise batchDeleteWebHostingFilesAsync($arguments = [])
 * @method \Dew\Acs\Result listWebHostingFiles(array $arguments = [])
 * @method \Http\Promise\Promise listWebHostingFilesAsync($arguments = [])
 * @method \Dew\Acs\Result describeWebHostingFile(array $arguments = [])
 * @method \Http\Promise\Promise describeWebHostingFileAsync($arguments = [])
 * @method \Dew\Acs\Result getWebHostingUploadCredential(array $arguments = [])
 * @method \Http\Promise\Promise getWebHostingUploadCredentialAsync($arguments = [])
 * @method \Dew\Acs\Result bindWebHostingCustomDomain(array $arguments = [])
 * @method \Http\Promise\Promise bindWebHostingCustomDomainAsync($arguments = [])
 * @method \Dew\Acs\Result unbindWebHostingCustomDomain(array $arguments = [])
 * @method \Http\Promise\Promise unbindWebHostingCustomDomainAsync($arguments = [])
 * @method \Dew\Acs\Result saveWebHostingCustomDomainConfig(array $arguments = [])
 * @method \Http\Promise\Promise saveWebHostingCustomDomainConfigAsync($arguments = [])
 * @method \Dew\Acs\Result verifyWebHostingDomainOwner(array $arguments = [])
 * @method \Http\Promise\Promise verifyWebHostingDomainOwnerAsync($arguments = [])
 * @method \Dew\Acs\Result getWebHostingDomainVerificationContent(array $arguments = [])
 * @method \Http\Promise\Promise getWebHostingDomainVerificationContentAsync($arguments = [])
 * @method \Dew\Acs\Result listWebHostingCustomDomains(array $arguments = [])
 * @method \Http\Promise\Promise listWebHostingCustomDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result refreshWebHostingCustomDomainCache(array $arguments = [])
 * @method \Http\Promise\Promise refreshWebHostingCustomDomainCacheAsync($arguments = [])
 * @method \Dew\Acs\Result deleteWebHostingCertificate(array $arguments = [])
 * @method \Http\Promise\Promise deleteWebHostingCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result attachWebHostingCertificate(array $arguments = [])
 * @method \Http\Promise\Promise attachWebHostingCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result getWebHostingCertificateDetail(array $arguments = [])
 * @method \Http\Promise\Promise getWebHostingCertificateDetailAsync($arguments = [])
 * @method \Dew\Acs\Result saveWebHostingCustomDomainCorsConfig(array $arguments = [])
 * @method \Http\Promise\Promise saveWebHostingCustomDomainCorsConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getWebHostingConfig(array $arguments = [])
 * @method \Http\Promise\Promise getWebHostingConfigAsync($arguments = [])
 * @method \Dew\Acs\Result modifyWebHostingConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyWebHostingConfigAsync($arguments = [])
 * @method \Dew\Acs\Result enableExtension(array $arguments = [])
 * @method \Http\Promise\Promise enableExtensionAsync($arguments = [])
 * @method \Dew\Acs\Result updateServicePolicy(array $arguments = [])
 * @method \Http\Promise\Promise updateServicePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result openService(array $arguments = [])
 * @method \Http\Promise\Promise openServiceAsync($arguments = [])
 * @method \Dew\Acs\Result openWebHostingService(array $arguments = [])
 * @method \Http\Promise\Promise openWebHostingServiceAsync($arguments = [])
 * @method \Dew\Acs\Result resetServerSecret(array $arguments = [])
 * @method \Http\Promise\Promise resetServerSecretAsync($arguments = [])
 * @method \Dew\Acs\Result saveAppAuthToken(array $arguments = [])
 * @method \Http\Promise\Promise saveAppAuthTokenAsync($arguments = [])
 * @method \Dew\Acs\Result describeFCOpenStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeFCOpenStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeServicePolicy(array $arguments = [])
 * @method \Http\Promise\Promise describeServicePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listExtensions(array $arguments = [])
 * @method \Http\Promise\Promise listExtensionsAsync($arguments = [])
 * @method \Dew\Acs\Result queryServiceStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryServiceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getWebHostingStatus(array $arguments = [])
 * @method \Http\Promise\Promise getWebHostingStatusAsync($arguments = [])
 * @method \Dew\Acs\Result checkMpServerlessRoleExists(array $arguments = [])
 * @method \Http\Promise\Promise checkMpServerlessRoleExistsAsync($arguments = [])
 * @method \Dew\Acs\Result addDingtalkOpenPlatformConfig(array $arguments = [])
 * @method \Http\Promise\Promise addDingtalkOpenPlatformConfigAsync($arguments = [])
 * @method \Dew\Acs\Result saveAntOpenPlatformConfig(array $arguments = [])
 * @method \Http\Promise\Promise saveAntOpenPlatformConfigAsync($arguments = [])
 * @method \Dew\Acs\Result saveWechatOpenPlatformConfig(array $arguments = [])
 * @method \Http\Promise\Promise saveWechatOpenPlatformConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAntOpenPlatformConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteAntOpenPlatformConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDingtalkOpenPlatformConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteDingtalkOpenPlatformConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteWechatOpenPlatformConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteWechatOpenPlatformConfigAsync($arguments = [])
 * @method \Dew\Acs\Result updateDingtalkOpenPlatformConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateDingtalkOpenPlatformConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeSpaceClientConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeSpaceClientConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listOpenPlatformConfig(array $arguments = [])
 * @method \Http\Promise\Promise listOpenPlatformConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listDingtalkOpenPlatformConfigs(array $arguments = [])
 * @method \Http\Promise\Promise listDingtalkOpenPlatformConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result addCorsDomain(array $arguments = [])
 * @method \Http\Promise\Promise addCorsDomainAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCorsDomain(array $arguments = [])
 * @method \Http\Promise\Promise deleteCorsDomainAsync($arguments = [])
 * @method \Dew\Acs\Result listCorsDomains(array $arguments = [])
 * @method \Http\Promise\Promise listCorsDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result querySpaceSpecDetail(array $arguments = [])
 * @method \Http\Promise\Promise querySpaceSpecDetailAsync($arguments = [])
 * @method \Dew\Acs\Result querySpaceUsage(array $arguments = [])
 * @method \Http\Promise\Promise querySpaceUsageAsync($arguments = [])
 * @method \Dew\Acs\Result querySpaceConsumption(array $arguments = [])
 * @method \Http\Promise\Promise querySpaceConsumptionAsync($arguments = [])
 * @method \Dew\Acs\Result describeResourceQuota(array $arguments = [])
 * @method \Http\Promise\Promise describeResourceQuotaAsync($arguments = [])
 * @method \Dew\Acs\Result describeResourceUsage(array $arguments = [])
 * @method \Http\Promise\Promise describeResourceUsageAsync($arguments = [])
 */
final class MPServerlessClient extends AcsClient
{
    //
}
