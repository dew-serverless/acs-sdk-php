<?php

declare(strict_types=1);

namespace Dew\Acs\OnsMqtt;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result applyToken(array $arguments = [])
 * @method \Http\Promise\Promise applyTokenAsync($arguments = [])
 * @method \Dew\Acs\Result queryToken(array $arguments = [])
 * @method \Http\Promise\Promise queryTokenAsync($arguments = [])
 * @method \Dew\Acs\Result revokeToken(array $arguments = [])
 * @method \Http\Promise\Promise revokeTokenAsync($arguments = [])
 * @method \Dew\Acs\Result createGroupId(array $arguments = [])
 * @method \Http\Promise\Promise createGroupIdAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGroupId(array $arguments = [])
 * @method \Http\Promise\Promise deleteGroupIdAsync($arguments = [])
 * @method \Dew\Acs\Result listGroupId(array $arguments = [])
 * @method \Http\Promise\Promise listGroupIdAsync($arguments = [])
 * @method \Dew\Acs\Result sendMessage(array $arguments = [])
 * @method \Http\Promise\Promise sendMessageAsync($arguments = [])
 * @method \Dew\Acs\Result querySessionByClientId(array $arguments = [])
 * @method \Http\Promise\Promise querySessionByClientIdAsync($arguments = [])
 * @method \Dew\Acs\Result batchQuerySessionByClientIds(array $arguments = [])
 * @method \Http\Promise\Promise batchQuerySessionByClientIdsAsync($arguments = [])
 * @method \Dew\Acs\Result getDeviceCredential(array $arguments = [])
 * @method \Http\Promise\Promise getDeviceCredentialAsync($arguments = [])
 * @method \Dew\Acs\Result refreshDeviceCredential(array $arguments = [])
 * @method \Http\Promise\Promise refreshDeviceCredentialAsync($arguments = [])
 * @method \Dew\Acs\Result registerDeviceCredential(array $arguments = [])
 * @method \Http\Promise\Promise registerDeviceCredentialAsync($arguments = [])
 * @method \Dew\Acs\Result unRegisterDeviceCredential(array $arguments = [])
 * @method \Http\Promise\Promise unRegisterDeviceCredentialAsync($arguments = [])
 * @method \Dew\Acs\Result listDeviceCredentialClientId(array $arguments = [])
 * @method \Http\Promise\Promise listDeviceCredentialClientIdAsync($arguments = [])
 * @method \Dew\Acs\Result queryMqttTraceDevice(array $arguments = [])
 * @method \Http\Promise\Promise queryMqttTraceDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result queryMqttTraceMessageOfClient(array $arguments = [])
 * @method \Http\Promise\Promise queryMqttTraceMessageOfClientAsync($arguments = [])
 * @method \Dew\Acs\Result queryMqttTraceMessagePublish(array $arguments = [])
 * @method \Http\Promise\Promise queryMqttTraceMessagePublishAsync($arguments = [])
 * @method \Dew\Acs\Result queryMqttTraceMessageSubscribe(array $arguments = [])
 * @method \Http\Promise\Promise queryMqttTraceMessageSubscribeAsync($arguments = [])
 * @method \Dew\Acs\Result registerCaCertificate(array $arguments = [])
 * @method \Http\Promise\Promise registerCaCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result activeCaCertificate(array $arguments = [])
 * @method \Http\Promise\Promise activeCaCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result inactivateCaCertificate(array $arguments = [])
 * @method \Http\Promise\Promise inactivateCaCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result listCaCertificate(array $arguments = [])
 * @method \Http\Promise\Promise listCaCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result getCaCertificate(array $arguments = [])
 * @method \Http\Promise\Promise getCaCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result getRegisterCode(array $arguments = [])
 * @method \Http\Promise\Promise getRegisterCodeAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCaCertificate(array $arguments = [])
 * @method \Http\Promise\Promise deleteCaCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result activeDeviceCertificate(array $arguments = [])
 * @method \Http\Promise\Promise activeDeviceCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result inactivateDeviceCertificate(array $arguments = [])
 * @method \Http\Promise\Promise inactivateDeviceCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result listDeviceCertificate(array $arguments = [])
 * @method \Http\Promise\Promise listDeviceCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result listDeviceCertificateByCaSn(array $arguments = [])
 * @method \Http\Promise\Promise listDeviceCertificateByCaSnAsync($arguments = [])
 * @method \Dew\Acs\Result getDeviceCertificate(array $arguments = [])
 * @method \Http\Promise\Promise getDeviceCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDeviceCertificate(array $arguments = [])
 * @method \Http\Promise\Promise deleteDeviceCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result addCustomAuthIdentity(array $arguments = [])
 * @method \Http\Promise\Promise addCustomAuthIdentityAsync($arguments = [])
 * @method \Dew\Acs\Result updateCustomAuthIdentity(array $arguments = [])
 * @method \Http\Promise\Promise updateCustomAuthIdentityAsync($arguments = [])
 * @method \Dew\Acs\Result queryCustomAuthIdentity(array $arguments = [])
 * @method \Http\Promise\Promise queryCustomAuthIdentityAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCustomAuthIdentity(array $arguments = [])
 * @method \Http\Promise\Promise deleteCustomAuthIdentityAsync($arguments = [])
 * @method \Dew\Acs\Result addCustomAuthPermission(array $arguments = [])
 * @method \Http\Promise\Promise addCustomAuthPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result updateCustomAuthPermission(array $arguments = [])
 * @method \Http\Promise\Promise updateCustomAuthPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result queryCustomAuthPermission(array $arguments = [])
 * @method \Http\Promise\Promise queryCustomAuthPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCustomAuthPermission(array $arguments = [])
 * @method \Http\Promise\Promise deleteCustomAuthPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result addCustomAuthConnectBlack(array $arguments = [])
 * @method \Http\Promise\Promise addCustomAuthConnectBlackAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCustomAuthConnectBlack(array $arguments = [])
 * @method \Http\Promise\Promise deleteCustomAuthConnectBlackAsync($arguments = [])
 * @method \Dew\Acs\Result queryCustomAuthConnectBlack(array $arguments = [])
 * @method \Http\Promise\Promise queryCustomAuthConnectBlackAsync($arguments = [])
 */
final class OnsMqttClient extends AcsClient
{
    //
}
