<?php

declare(strict_types=1);

namespace Dew\Acs\ComputeNest;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result getService(array $arguments = [])
 * @method \Http\Promise\Promise getServiceAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceTemplateParameterConstraints(array $arguments = [])
 * @method \Http\Promise\Promise getServiceTemplateParameterConstraintsAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceEstimateCost(array $arguments = [])
 * @method \Http\Promise\Promise getServiceEstimateCostAsync($arguments = [])
 * @method \Dew\Acs\Result generateServicePolicy(array $arguments = [])
 * @method \Http\Promise\Promise generateServicePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceProvisions(array $arguments = [])
 * @method \Http\Promise\Promise getServiceProvisionsAsync($arguments = [])
 * @method \Dew\Acs\Result listServices(array $arguments = [])
 * @method \Http\Promise\Promise listServicesAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceCategories(array $arguments = [])
 * @method \Http\Promise\Promise listServiceCategoriesAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeServiceInstance(array $arguments = [])
 * @method \Http\Promise\Promise upgradeServiceInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createServiceInstance(array $arguments = [])
 * @method \Http\Promise\Promise createServiceInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceInstance(array $arguments = [])
 * @method \Http\Promise\Promise getServiceInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result continueDeployServiceInstance(array $arguments = [])
 * @method \Http\Promise\Promise continueDeployServiceInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteServiceInstances(array $arguments = [])
 * @method \Http\Promise\Promise deleteServiceInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceInstanceLogs(array $arguments = [])
 * @method \Http\Promise\Promise listServiceInstanceLogsAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceInstanceResources(array $arguments = [])
 * @method \Http\Promise\Promise listServiceInstanceResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceInstances(array $arguments = [])
 * @method \Http\Promise\Promise listServiceInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result startServiceInstance(array $arguments = [])
 * @method \Http\Promise\Promise startServiceInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result stopServiceInstance(array $arguments = [])
 * @method \Http\Promise\Promise stopServiceInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result restartServiceInstance(array $arguments = [])
 * @method \Http\Promise\Promise restartServiceInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result updateServiceInstanceSpec(array $arguments = [])
 * @method \Http\Promise\Promise updateServiceInstanceSpecAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceInstanceUpgradeHistory(array $arguments = [])
 * @method \Http\Promise\Promise listServiceInstanceUpgradeHistoryAsync($arguments = [])
 * @method \Dew\Acs\Result rollbackServiceInstance(array $arguments = [])
 * @method \Http\Promise\Promise rollbackServiceInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result updateServiceInstanceAttributes(array $arguments = [])
 * @method \Http\Promise\Promise updateServiceInstanceAttributesAsync($arguments = [])
 * @method \Dew\Acs\Result validateServiceInstanceName(array $arguments = [])
 * @method \Http\Promise\Promise validateServiceInstanceNameAsync($arguments = [])
 * @method \Dew\Acs\Result listTagKeys(array $arguments = [])
 * @method \Http\Promise\Promise listTagKeysAsync($arguments = [])
 * @method \Dew\Acs\Result unTagResources(array $arguments = [])
 * @method \Http\Promise\Promise unTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagValues(array $arguments = [])
 * @method \Http\Promise\Promise listTagValuesAsync($arguments = [])
 * @method \Dew\Acs\Result changeResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise changeResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserInformation(array $arguments = [])
 * @method \Http\Promise\Promise updateUserInformationAsync($arguments = [])
 * @method \Dew\Acs\Result getUserInformation(array $arguments = [])
 * @method \Http\Promise\Promise getUserInformationAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceUsages(array $arguments = [])
 * @method \Http\Promise\Promise listServiceUsagesAsync($arguments = [])
 * @method \Dew\Acs\Result cancelServiceUsage(array $arguments = [])
 * @method \Http\Promise\Promise cancelServiceUsageAsync($arguments = [])
 * @method \Dew\Acs\Result createServiceUsage(array $arguments = [])
 * @method \Http\Promise\Promise createServiceUsageAsync($arguments = [])
 * @method \Dew\Acs\Result updateServiceUsage(array $arguments = [])
 * @method \Http\Promise\Promise updateServiceUsageAsync($arguments = [])
 * @method \Dew\Acs\Result deployServiceInstance(array $arguments = [])
 * @method \Http\Promise\Promise deployServiceInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result listPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result getNetworkAvailableZones(array $arguments = [])
 * @method \Http\Promise\Promise getNetworkAvailableZonesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceInstanceSubscriptionEstimateCost(array $arguments = [])
 * @method \Http\Promise\Promise getServiceInstanceSubscriptionEstimateCostAsync($arguments = [])
 * @method \Dew\Acs\Result renewServiceInstanceResources(array $arguments = [])
 * @method \Http\Promise\Promise renewServiceInstanceResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceInstanceBill(array $arguments = [])
 * @method \Http\Promise\Promise listServiceInstanceBillAsync($arguments = [])
 * @method \Dew\Acs\Result checkServiceDeployable(array $arguments = [])
 * @method \Http\Promise\Promise checkServiceDeployableAsync($arguments = [])
 * @method \Dew\Acs\Result createRestoreTask(array $arguments = [])
 * @method \Http\Promise\Promise createRestoreTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getBackup(array $arguments = [])
 * @method \Http\Promise\Promise getBackupAsync($arguments = [])
 * @method \Dew\Acs\Result listRestoreTasks(array $arguments = [])
 * @method \Http\Promise\Promise listRestoreTasksAsync($arguments = [])
 * @method \Dew\Acs\Result listBackups(array $arguments = [])
 * @method \Http\Promise\Promise listBackupsAsync($arguments = [])
 * @method \Dew\Acs\Result createBackup(array $arguments = [])
 * @method \Http\Promise\Promise createBackupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBackup(array $arguments = [])
 * @method \Http\Promise\Promise deleteBackupAsync($arguments = [])
 */
final class ComputeNestClient extends AcsClient
{
    //
}
