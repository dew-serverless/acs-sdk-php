<?php

declare(strict_types=1);

namespace Dew\Acs\Cloudsso;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result enableService(array $arguments = [])
 * @method \Http\Promise\Promise enableServiceAsync($arguments = [])
 * @method \Dew\Acs\Result disableService(array $arguments = [])
 * @method \Http\Promise\Promise disableServiceAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceStatus(array $arguments = [])
 * @method \Http\Promise\Promise getServiceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createDirectory(array $arguments = [])
 * @method \Http\Promise\Promise createDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result listDirectories(array $arguments = [])
 * @method \Http\Promise\Promise listDirectoriesAsync($arguments = [])
 * @method \Dew\Acs\Result getDirectory(array $arguments = [])
 * @method \Http\Promise\Promise getDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result getDirectoryStatistics(array $arguments = [])
 * @method \Http\Promise\Promise getDirectoryStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result updateDirectory(array $arguments = [])
 * @method \Http\Promise\Promise updateDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDirectory(array $arguments = [])
 * @method \Http\Promise\Promise deleteDirectoryAsync($arguments = [])
 * @method \Dew\Acs\Result enableDelegateAccount(array $arguments = [])
 * @method \Http\Promise\Promise enableDelegateAccountAsync($arguments = [])
 * @method \Dew\Acs\Result disableDelegateAccount(array $arguments = [])
 * @method \Http\Promise\Promise disableDelegateAccountAsync($arguments = [])
 * @method \Dew\Acs\Result createUser(array $arguments = [])
 * @method \Http\Promise\Promise createUserAsync($arguments = [])
 * @method \Dew\Acs\Result listUsers(array $arguments = [])
 * @method \Http\Promise\Promise listUsersAsync($arguments = [])
 * @method \Dew\Acs\Result getUser(array $arguments = [])
 * @method \Http\Promise\Promise getUserAsync($arguments = [])
 * @method \Dew\Acs\Result updateUser(array $arguments = [])
 * @method \Http\Promise\Promise updateUserAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateUserStatusAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUser(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserAsync($arguments = [])
 * @method \Dew\Acs\Result resetUserPassword(array $arguments = [])
 * @method \Http\Promise\Promise resetUserPasswordAsync($arguments = [])
 * @method \Dew\Acs\Result listMFADevicesForUser(array $arguments = [])
 * @method \Http\Promise\Promise listMFADevicesForUserAsync($arguments = [])
 * @method \Dew\Acs\Result deleteMFADeviceForUser(array $arguments = [])
 * @method \Http\Promise\Promise deleteMFADeviceForUserAsync($arguments = [])
 * @method \Dew\Acs\Result updateMFAAuthenticationSettings(array $arguments = [])
 * @method \Http\Promise\Promise updateMFAAuthenticationSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result getMFAAuthenticationSettings(array $arguments = [])
 * @method \Http\Promise\Promise getMFAAuthenticationSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserMFAAuthenticationSettings(array $arguments = [])
 * @method \Http\Promise\Promise updateUserMFAAuthenticationSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result getUserMFAAuthenticationSettings(array $arguments = [])
 * @method \Http\Promise\Promise getUserMFAAuthenticationSettingsAsync($arguments = [])
 * @method \Dew\Acs\Result getMFAAuthenticationSettingInfo(array $arguments = [])
 * @method \Http\Promise\Promise getMFAAuthenticationSettingInfoAsync($arguments = [])
 * @method \Dew\Acs\Result setLoginPreference(array $arguments = [])
 * @method \Http\Promise\Promise setLoginPreferenceAsync($arguments = [])
 * @method \Dew\Acs\Result getLoginPreference(array $arguments = [])
 * @method \Http\Promise\Promise getLoginPreferenceAsync($arguments = [])
 * @method \Dew\Acs\Result setPasswordPolicy(array $arguments = [])
 * @method \Http\Promise\Promise setPasswordPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getPasswordPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getPasswordPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getUserId(array $arguments = [])
 * @method \Http\Promise\Promise getUserIdAsync($arguments = [])
 * @method \Dew\Acs\Result createGroup(array $arguments = [])
 * @method \Http\Promise\Promise createGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listGroups(array $arguments = [])
 * @method \Http\Promise\Promise listGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result getGroup(array $arguments = [])
 * @method \Http\Promise\Promise getGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteGroupAsync($arguments = [])
 * @method \Dew\Acs\Result addUserToGroup(array $arguments = [])
 * @method \Http\Promise\Promise addUserToGroupAsync($arguments = [])
 * @method \Dew\Acs\Result removeUserFromGroup(array $arguments = [])
 * @method \Http\Promise\Promise removeUserFromGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listJoinedGroupsForUser(array $arguments = [])
 * @method \Http\Promise\Promise listJoinedGroupsForUserAsync($arguments = [])
 * @method \Dew\Acs\Result listGroupMembers(array $arguments = [])
 * @method \Http\Promise\Promise listGroupMembersAsync($arguments = [])
 * @method \Dew\Acs\Result createSCIMServerCredential(array $arguments = [])
 * @method \Http\Promise\Promise createSCIMServerCredentialAsync($arguments = [])
 * @method \Dew\Acs\Result listSCIMServerCredentials(array $arguments = [])
 * @method \Http\Promise\Promise listSCIMServerCredentialsAsync($arguments = [])
 * @method \Dew\Acs\Result updateSCIMServerCredentialStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateSCIMServerCredentialStatusAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSCIMServerCredential(array $arguments = [])
 * @method \Http\Promise\Promise deleteSCIMServerCredentialAsync($arguments = [])
 * @method \Dew\Acs\Result setSCIMSynchronizationStatus(array $arguments = [])
 * @method \Http\Promise\Promise setSCIMSynchronizationStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getSCIMSynchronizationStatus(array $arguments = [])
 * @method \Http\Promise\Promise getSCIMSynchronizationStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getDirectorySAMLServiceProviderInfo(array $arguments = [])
 * @method \Http\Promise\Promise getDirectorySAMLServiceProviderInfoAsync($arguments = [])
 * @method \Dew\Acs\Result setExternalSAMLIdentityProvider(array $arguments = [])
 * @method \Http\Promise\Promise setExternalSAMLIdentityProviderAsync($arguments = [])
 * @method \Dew\Acs\Result getExternalSAMLIdentityProvider(array $arguments = [])
 * @method \Http\Promise\Promise getExternalSAMLIdentityProviderAsync($arguments = [])
 * @method \Dew\Acs\Result clearExternalSAMLIdentityProvider(array $arguments = [])
 * @method \Http\Promise\Promise clearExternalSAMLIdentityProviderAsync($arguments = [])
 * @method \Dew\Acs\Result addExternalSAMLIdPCertificate(array $arguments = [])
 * @method \Http\Promise\Promise addExternalSAMLIdPCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result listExternalSAMLIdPCertificates(array $arguments = [])
 * @method \Http\Promise\Promise listExternalSAMLIdPCertificatesAsync($arguments = [])
 * @method \Dew\Acs\Result removeExternalSAMLIdPCertificate(array $arguments = [])
 * @method \Http\Promise\Promise removeExternalSAMLIdPCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result createAccessConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise createAccessConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result listAccessConfigurations(array $arguments = [])
 * @method \Http\Promise\Promise listAccessConfigurationsAsync($arguments = [])
 * @method \Dew\Acs\Result getAccessConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getAccessConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result updateAccessConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise updateAccessConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccessConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccessConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result addPermissionPolicyToAccessConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise addPermissionPolicyToAccessConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result removePermissionPolicyFromAccessConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise removePermissionPolicyFromAccessConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result updateInlinePolicyForAccessConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise updateInlinePolicyForAccessConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result listPermissionPoliciesInAccessConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise listPermissionPoliciesInAccessConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result provisionAccessConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise provisionAccessConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result deprovisionAccessConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise deprovisionAccessConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result listAccessConfigurationProvisionings(array $arguments = [])
 * @method \Http\Promise\Promise listAccessConfigurationProvisioningsAsync($arguments = [])
 * @method \Dew\Acs\Result createAccessAssignment(array $arguments = [])
 * @method \Http\Promise\Promise createAccessAssignmentAsync($arguments = [])
 * @method \Dew\Acs\Result listAccessAssignments(array $arguments = [])
 * @method \Http\Promise\Promise listAccessAssignmentsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccessAssignment(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccessAssignmentAsync($arguments = [])
 * @method \Dew\Acs\Result listTasks(array $arguments = [])
 * @method \Http\Promise\Promise listTasksAsync($arguments = [])
 * @method \Dew\Acs\Result getTask(array $arguments = [])
 * @method \Http\Promise\Promise getTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getTaskStatus(array $arguments = [])
 * @method \Http\Promise\Promise getTaskStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createUserProvisioning(array $arguments = [])
 * @method \Http\Promise\Promise createUserProvisioningAsync($arguments = [])
 * @method \Dew\Acs\Result getUserProvisioning(array $arguments = [])
 * @method \Http\Promise\Promise getUserProvisioningAsync($arguments = [])
 * @method \Dew\Acs\Result listUserProvisionings(array $arguments = [])
 * @method \Http\Promise\Promise listUserProvisioningsAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserProvisioning(array $arguments = [])
 * @method \Http\Promise\Promise updateUserProvisioningAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserProvisioning(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserProvisioningAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserProvisioningConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise updateUserProvisioningConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result getUserProvisioningConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getUserProvisioningConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result listUserProvisioningEvents(array $arguments = [])
 * @method \Http\Promise\Promise listUserProvisioningEventsAsync($arguments = [])
 * @method \Dew\Acs\Result getUserProvisioningEvent(array $arguments = [])
 * @method \Http\Promise\Promise getUserProvisioningEventAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserProvisioningEvent(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserProvisioningEventAsync($arguments = [])
 * @method \Dew\Acs\Result retryUserProvisioningEvent(array $arguments = [])
 * @method \Http\Promise\Promise retryUserProvisioningEventAsync($arguments = [])
 * @method \Dew\Acs\Result getUserProvisioningStatistics(array $arguments = [])
 * @method \Http\Promise\Promise getUserProvisioningStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result getUserProvisioningRdAccountStatistics(array $arguments = [])
 * @method \Http\Promise\Promise getUserProvisioningRdAccountStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result setMFAAuthenticationStatus(array $arguments = [])
 * @method \Http\Promise\Promise setMFAAuthenticationStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getMFAAuthenticationStatus(array $arguments = [])
 * @method \Http\Promise\Promise getMFAAuthenticationStatusAsync($arguments = [])
 */
final class CloudssoClient extends AcsClient
{
    //
}
