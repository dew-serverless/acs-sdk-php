<?php return array (
  'version' => '1.0',
  'info' => 
  array (
    'style' => 'RPC',
    'product' => 'dataworks-public',
    'version' => '2020-05-18',
  ),
  'directories' => 
  array (
    0 => 
    array (
      'id' => 120438,
      'title' => '租户',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'ListCalcEngines',
        1 => 'CreateDataSource',
        2 => 'ListDataSources',
        3 => 'UpdateDataSource',
        4 => 'DeleteDataSource',
        5 => 'ListResourceGroups',
        6 => 'GetProject',
        7 => 'AddProjectMemberToRole',
        8 => 'CreateProjectMember',
        9 => 'DeleteProjectMember',
        10 => 'ListProjectRoles',
        11 => 'RemoveProjectMemberFromRole',
        12 => 'ListProjectMembers',
        13 => 'ListProjects',
        14 => 'ListProjectIds',
        15 => 'CreateProject',
        16 => 'ChangeResourceManagerResourceGroup',
        17 => 'ListMeasureData',
      ),
    ),
    1 => 
    array (
      'id' => 120453,
      'title' => '元数据',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetMetaDBInfo',
        1 => 'GetMetaDBTableList',
        2 => 'CheckMetaTable',
        3 => 'CheckMetaPartition',
        4 => 'SearchMetaTables',
        5 => 'GetMetaTableBasicInfo',
        6 => 'GetMetaTableColumn',
        7 => 'GetMetaTablePartition',
        8 => 'GetMetaTableOutput',
        9 => 'GetMetaTableChangeLog',
        10 => 'GetMetaTableIntroWiki',
        11 => 'CreateMetaCategory',
        12 => 'DeleteMetaCategory',
        13 => 'UpdateMetaCategory',
        14 => 'GetMetaCategory',
        15 => 'GetMetaTableListByCategory',
        16 => 'AddToMetaCategory',
        17 => 'DeleteFromMetaCategory',
        18 => 'UpdateMetaTable',
        19 => 'UpdateMetaTableIntroWiki',
        20 => 'ListMetaDB',
        21 => 'UpdateTableModelInfo',
        22 => 'CreateTableTheme',
        23 => 'DeleteTableTheme',
        24 => 'UpdateTableTheme',
        25 => 'ListTableTheme',
        26 => 'GetMetaTableThemeLevel',
        27 => 'CreateTableLevel',
        28 => 'UpdateTableLevel',
        29 => 'DeleteTableLevel',
        30 => 'ListTableLevel',
        31 => 'UpdateMetaCollection',
        32 => 'ListMetaCollections',
        33 => 'ListMetaCollectionEntities',
        34 => 'DeleteMetaCollection',
        35 => 'GetMetaCollectionDetail',
        36 => 'DeleteMetaCollectionEntity',
        37 => 'AddMetaCollectionEntity',
        38 => 'CreateMetaCollection',
        39 => 'ListLineage',
        40 => 'DeleteLineageRelation',
        41 => 'RegisterLineageRelation',
        42 => 'ListEntityTags',
        43 => 'SetEntityTags',
        44 => 'RemoveEntityTags',
        45 => 'ListEntitiesByTags',
      ),
    ),
    2 => 
    array (
      'id' => 120493,
      'title' => '数据开发',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateFile',
        1 => 'CreateUdfFile',
        2 => 'CreateBusiness',
        3 => 'DeleteBusiness',
        4 => 'CreateFolder',
        5 => 'UpdateBusiness',
        6 => 'ListFiles',
        7 => 'EstablishRelationTableToBusiness',
        8 => 'SubmitFile',
        9 => 'ListBusiness',
        10 => 'GetFileVersion',
        11 => 'DeleteFolder',
        12 => 'DeleteFile',
        13 => 'GetDeployment',
        14 => 'UpdateFile',
        15 => 'GetFolder',
        16 => 'ListFileVersions',
        17 => 'GetFile',
        18 => 'ListFolders',
        19 => 'DeployFile',
        20 => 'UpdateUdfFile',
        21 => 'GetBusiness',
        22 => 'UpdateFolder',
        23 => 'ListDeployments',
        24 => 'UpdateIDEEventResult',
        25 => 'GetIDEEventDetail',
        26 => 'CreateResourceFile',
      ),
    ),
    3 => 
    array (
      'id' => 120518,
      'title' => '数据集成',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateDISyncTask',
        1 => 'DeleteDISyncTask',
        2 => 'UpdateDISyncTask',
        3 => 'TestNetworkConnection',
        4 => 'GetDataSourceMeta',
        5 => 'ListDIProjectConfig',
        6 => 'UpdateDIProjectConfig',
        7 => 'GetDISyncTask',
        8 => 'DeployDISyncTask',
        9 => 'GetDISyncInstanceInfo',
        10 => 'TerminateDISyncInstance',
        11 => 'GenerateDISyncTaskConfigForCreating',
        12 => 'GenerateDISyncTaskConfigForUpdating',
        13 => 'StartDISyncInstance',
        14 => 'StopDISyncInstance',
        15 => 'QueryDISyncTaskConfigProcessResult',
        16 => 'CreateDIJob',
        17 => 'DeleteDIJob',
        18 => 'GetDIJob',
        19 => 'ListDIJobs',
        20 => 'StartDIJob',
        21 => 'StopDIJob',
        22 => 'UpdateDIJob',
        23 => 'CreateDIAlarmRule',
        24 => 'DeleteDIAlarmRule',
        25 => 'GetDIAlarmRule',
        26 => 'ListDIAlarmRules',
        27 => 'UpdateDIAlarmRule',
      ),
    ),
    4 => 
    array (
      'id' => 191818,
      'title' => '数据建模',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'QueryPublicModelEngine',
      ),
    ),
    5 => 
    array (
      'id' => 120540,
      'title' => '运维中心',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetAlertMessage',
        1 => 'ListAlertMessages',
        2 => 'GetBaselineConfig',
        3 => 'ListNodesByBaseline',
        4 => 'ListBaselineConfigs',
        5 => 'GetBaselineKeyPath',
        6 => 'GetBaselineStatus',
        7 => 'ListBaselineStatuses',
        8 => 'DeleteRemind',
        9 => 'UpdateRemind',
        10 => 'CreateRemind',
        11 => 'GetRemind',
        12 => 'ListReminds',
        13 => 'ListTopics',
        14 => 'GetTopic',
        15 => 'GetTopicInfluence',
        16 => 'GetNode',
        17 => 'ListNodeInputOrOutput',
        18 => 'ListNodes',
        19 => 'GetNodeCode',
        20 => 'GetInstance',
        21 => 'ListInstances',
        22 => 'GetInstanceLog',
        23 => 'StopInstance',
        24 => 'RestartInstance',
        25 => 'SetSuccessInstance',
        26 => 'SuspendInstance',
        27 => 'ResumeInstance',
        28 => 'RunCycleDagNodes',
        29 => 'RunSmokeTest',
        30 => 'ListSuccessInstanceAmount',
        31 => 'ListInstanceAmount',
        32 => 'TopTenElapsedTimeInstance',
        33 => 'TopTenErrorTimesInstance',
        34 => 'GetFileTypeStatistic',
        35 => 'GetInstanceStatusStatistic',
        36 => 'ListFileType',
        37 => 'RunManualDagNodes',
        38 => 'ListManualDagInstances',
        39 => 'GetDag',
        40 => 'ListDags',
        41 => 'ListNodesByOutput',
        42 => 'RunTriggerNode',
        43 => 'GetNodeParents',
        44 => 'GetNodeChildren',
        45 => 'UpdateNodeRunMode',
        46 => 'UpdateNodeOwner',
        47 => 'UpdateWorkbenchEventResult',
        48 => 'ListShiftPersonnels',
        49 => 'ListShiftSchedules',
        50 => 'ListInstanceHistory',
        51 => 'ListInnerNodes',
        52 => 'OfflineNode',
        53 => 'GetBaseline',
        54 => 'DeleteBaseline',
        55 => 'ListBaselines',
        56 => 'CreateBaseline',
        57 => 'UpdateBaseline',
      ),
    ),
    6 => 
    array (
      'id' => 120587,
      'title' => '数据质量',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'UpdateQualityFollower',
        1 => 'UpdateQualityRule',
        2 => 'GetQualityRule',
        3 => 'ListQualityRules',
        4 => 'CreateQualityRule',
        5 => 'DeleteQualityFollower',
        6 => 'DeleteQualityRule',
        7 => 'GetQualityFollower',
        8 => 'CreateQualityFollower',
        9 => 'DeleteQualityEntity',
        10 => 'GetQualityEntity',
        11 => 'CreateQualityEntity',
        12 => 'CreateQualityRelativeNode',
        13 => 'DeleteQualityRelativeNode',
        14 => 'ListQualityResultsByEntity',
        15 => 'ListQualityResultsByRule',
      ),
    ),
    7 => 
    array (
      'id' => 120604,
      'title' => '数据服务',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateDataServiceApi',
        1 => 'PublishDataServiceApi',
        2 => 'DeleteDataServiceApi',
        3 => 'ListDataServiceApis',
        4 => 'GetDataServiceApi',
        5 => 'UpdateDataServiceApi',
        6 => 'GetDataServicePublishedApi',
        7 => 'ListDataServicePublishedApis',
        8 => 'ListDataServiceApiAuthorities',
        9 => 'ListDataServiceAuthorizedApis',
        10 => 'AbolishDataServiceApi',
        11 => 'GetDataServiceApplication',
        12 => 'ListDataServiceApplications',
        13 => 'CreateDataServiceFolder',
        14 => 'GetDataServiceFolder',
        15 => 'ListDataServiceFolders',
        16 => 'CreateDataServiceGroup',
        17 => 'GetDataServiceGroup',
        18 => 'ListDataServiceGroups',
        19 => 'CreateDataServiceApiAuthority',
        20 => 'DeleteDataServiceApiAuthority',
        21 => 'ListDataServiceApiTest',
        22 => 'TestDataServiceApi',
        23 => 'GetDataServiceApiTest',
        24 => 'SubmitDataServiceApi',
        25 => 'SaveDataServiceApiTestResult',
      ),
    ),
    8 => 
    array (
      'id' => 191819,
      'title' => '数据分析',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'UmountDirectory',
        1 => 'MountDirectory',
      ),
    ),
    9 => 
    array (
      'id' => 191820,
      'title' => '数据保护伞',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetOpSensitiveData',
        1 => 'DesensitizeData',
        2 => 'GetOpRiskData',
        3 => 'GetSensitiveData',
        4 => 'ScanSensitiveData',
        5 => 'DsgQuerySensResult',
        6 => 'QueryDefaultTemplate',
        7 => 'DsgStopSensIdentify',
        8 => 'QuerySensClassification',
        9 => 'QuerySensLevel',
        10 => 'QueryRecognizeRulesType',
        11 => 'DsgRunSensIdentify',
        12 => 'DeleteRecognizeRule',
        13 => 'QuerySensNodeInfo',
        14 => 'AddRecognizeRule',
        15 => 'EditRecognizeRule',
        16 => 'QueryRecognizeDataByRuleType',
        17 => 'QueryRecognizeRuleDetail',
        18 => 'DsgUserGroupGetOdpsRoleGroups',
        19 => 'DsgDesensPlanAddOrUpdate',
        20 => 'DsgPlatformQueryProjectsAndSchemaFromMeta',
        21 => 'DsgUserGroupDelete',
        22 => 'DsgWhiteListDeleteList',
        23 => 'DsgScenedDeleteScene',
        24 => 'DsgDesensPlanDelete',
        25 => 'DsgDesensPlanUpdateStatus',
        26 => 'DsgWhiteListQueryList',
        27 => 'DsgSceneAddOrUpdateScene',
        28 => 'DsgSceneQuerySceneListByName',
        29 => 'DsgUserGroupAddOrUpdate',
        30 => 'DsgUserGroupQueryList',
        31 => 'DsgUserGroupQueryUserList',
        32 => 'DsgDesensPlanQueryList',
        33 => 'DsgWhiteListAddOrUpdate',
        34 => 'DsgQueryDefaultTemplates',
      ),
    ),
    10 => 
    array (
      'id' => 166717,
      'title' => '迁移助手',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateImportMigration',
        1 => 'GetMigrationProcess',
        2 => 'StartMigration',
        3 => 'CreateExportMigration',
        4 => 'GetMigrationSummary',
        5 => 'ListMigrations',
      ),
    ),
    11 => 
    array (
      'id' => 191821,
      'title' => '安全中心',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreatePermissionApplyOrder',
        1 => 'GetPermissionApplyOrderDetail',
        2 => 'ListPermissionApplyOrders',
        3 => 'ApprovePermissionApplyOrder',
        4 => 'RevokeColumnPermission',
        5 => 'RevokeTablePermission',
        6 => 'RevokeTablePermission',
      ),
    ),
    12 => 
    array (
      'id' => 166724,
      'title' => '开放平台',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'ListExtensions',
        1 => 'GetExtension',
        2 => 'GetOptionValueForProject',
        3 => 'ListEnabledExtensionsForProject',
        4 => 'CallbackExtension',
      ),
    ),
    13 => 
    array (
      'id' => 191836,
      'title' => '其他',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateTable',
        1 => 'DeleteTable',
        2 => 'GetDDLJobStatus',
        3 => 'GetMetaColumnLineage',
        4 => 'GetMetaTableFullInfo',
        5 => 'GetMetaTableLineage',
        6 => 'UpdateTable',
        7 => 'UpdateTableAddColumn',
        8 => 'CheckFileDeployment',
        9 => 'ListRefDISyncTasks',
        10 => 'ExportDataSources',
        11 => 'ImportDataSources',
      ),
    ),
    14 => 
    array (
      'id' => 120626,
      'title' => '废弃API',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'SetDataSourceShare',
        1 => 'CreateConnection',
        2 => 'CreateDagComplement',
        3 => 'CreateDagTest',
        4 => 'CreateManualDag',
        5 => 'DeleteConnection',
        6 => 'UpdateConnection',
        7 => 'ListConnections',
        8 => 'GetProjectDetail',
        9 => 'ListNodeIO',
        10 => 'GetInstanceStatusCount',
        11 => 'ListProgramTypeCount',
        12 => 'GetManualDagInstances',
        13 => 'SearchNodesByOutput',
        14 => 'GetNodeTypeListInfo',
        15 => 'GetNodeOnBaseline',
        16 => 'GetSuccessInstanceTrend',
        17 => 'GetInstanceCountTrend',
        18 => 'GetInstanceConsumeTimeRank',
        19 => 'GetInstanceErrorRank',
      ),
    ),
  ),
  'components' => 
  array (
    'schemas' => 
    array (
      'Collection' => 
      array (
        'title' => 'Definition of Collection',
        'description' => '集合定义。',
        'type' => 'object',
        'properties' => 
        array (
          'QualifiedName' => 
          array (
            'title' => 'Unique identifier of identity',
            'description' => '集合唯一标识。',
            'type' => 'string',
            'example' => 'album.12334',
          ),
          'CollectionType' => 
          array (
            'title' => 'Collection Type',
            'description' => '集合类型。
- **ALBUM**：专辑类型。
- **ALBUM_CATEGORY**：专辑中的子类目类型。',
            'type' => 'string',
            'example' => 'album',
          ),
          'Name' => 
          array (
            'title' => 'The name of the collection',
            'description' => '集合名称。',
            'type' => 'string',
            'example' => 'collectionName',
          ),
          'Comment' => 
          array (
            'title' => 'The comment of the collection',
            'description' => '备注信息。',
            'type' => 'string',
            'example' => 'comment',
          ),
          'OwnerId' => 
          array (
            'title' => 'The ownerId of the collection',
            'description' => '集合所属人ID（阿里云账号ID）。',
            'type' => 'string',
            'example' => '1234444',
          ),
          'OwnerName' => 
          array (
            'title' => 'The name of the collection owner',
            'description' => '集合所属人名称。',
            'type' => 'string',
            'example' => 'owner',
          ),
          'CreateTime' => 
          array (
            'title' => 'The create timestamp of the collection',
            'description' => '创建时间。',
            'type' => 'integer',
            'format' => 'int64',
            'example' => '1668600147617',
          ),
          'UpdateTime' => 
          array (
            'title' => 'The update timestamp of the collection',
            'description' => '更新时间。',
            'type' => 'integer',
            'format' => 'int64',
            'example' => '1668600148617',
          ),
          'Level' => 
          array (
            'title' => 'The level of the collection',
            'description' => '集合层级。
只有ALBUM_CATEGORY类型会返回该参数，目前支持4层。',
            'type' => 'integer',
            'format' => 'int32',
            'example' => '1',
          ),
        ),
      ),
      'Entity' => 
      array (
        'title' => 'Definition of Entity',
        'description' => '实体定义。',
        'type' => 'object',
        'properties' => 
        array (
          'QualifiedName' => 
          array (
            'title' => 'Unique identifier of identity',
            'description' => '实体唯一标识。
例如：maxcompute-table.projectA.tableB',
            'type' => 'string',
            'example' => 'maxcompute_table.563f0357118d05ef145d6bddf2966cc23e86ca8f2f013f915e565afdf09f7a23',
          ),
          'TenantId' => 
          array (
            'title' => 'Identifier of tenant',
            'description' => '租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'example' => '12345',
          ),
          'EntityContent' => 
          array (
            'title' => 'Attribute map',
            'description' => '实体的其他属性。包括：
- **entityType**：实体类型。例如，maxcompute-table、emr-table等。
- **name**：实体名称。
- **projectName**：MaxCompute项目名称。',
            'type' => 'object',
          ),
        ),
      ),
      'LineageEntityVO' => 
      array (
        'title' => 'Definition of entity in lineage',
        'description' => '注册血缘时的实体对象',
        'type' => 'object',
        'properties' => 
        array (
          'QualifiedName' => 
          array (
            'title' => 'Unique identifier of entity',
            'description' => 'Unique identifier of entity',
            'type' => 'string',
            'example' => 'maxcompute-table.projectName.tablename',
          ),
          'Name' => 
          array (
            'title' => 'Name of entity',
            'description' => 'Name of entity',
            'type' => 'string',
            'example' => 'tableName',
          ),
          'ParentName' => 
          array (
            'title' => 'Parent name of entity',
            'description' => 'Parent name of entity',
            'type' => 'string',
            'example' => 'dbName',
          ),
          'DetailUrl' => 
          array (
            'title' => 'Detail url of entity',
            'description' => 'Detail url of entity',
            'type' => 'string',
            'example' => 'http://domain.test.url/entity',
          ),
        ),
      ),
      'LineageRelationRegisterVO' => 
      array (
        'title' => 'Lineage relation register struct',
        'description' => '血缘关系注册结构体',
        'type' => 'object',
        'properties' => 
        array (
          'SrcEntity' => 
          array (
            'title' => 'The source entity in lineage relation',
            'description' => 'The source entity in lineage relation',
            '$ref' => '#/components/schemas/LineageEntityVO',
          ),
          'DestEntity' => 
          array (
            'title' => 'The destination entity in lineage relation',
            'description' => 'The destination entity in lineage relation',
            '$ref' => '#/components/schemas/LineageEntityVO',
          ),
          'Relationship' => 
          array (
            'title' => 'The relationship between entities',
            'description' => 'The relationship between entities',
            '$ref' => '#/components/schemas/RelationshipVO',
          ),
          'CreateTimestamp' => 
          array (
            'title' => 'The time of lineage relation generation',
            'description' => 'The time of lineage relation generation',
            'type' => 'integer',
            'format' => 'int64',
            'example' => '1684327487964',
          ),
        ),
      ),
      'RelationshipVO' => 
      array (
        'title' => 'relationship info',
        'description' => '实体关系结构体',
        'type' => 'object',
        'properties' => 
        array (
          'Type' => 
          array (
            'title' => 'Type name of relationship',
            'description' => 'Type name of relationship',
            'type' => 'string',
            'example' => 'sql',
          ),
        ),
      ),
      'UserEntityTag' => 
      array (
        'title' => '标签',
        'description' => '标签',
        'type' => 'object',
        'properties' => 
        array (
          'TagKey' => 
          array (
            'title' => '标签 Key',
            'description' => '标签 Key',
            'type' => 'string',
            'example' => 'priority',
          ),
          'TagValue' => 
          array (
            'title' => '标签 Value',
            'description' => '标签 Value',
            'type' => 'string',
            'example' => 'p1',
          ),
        ),
      ),
    ),
  ),
  'apis' => 
  array (
    'ListCalcEngines' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源所属的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '466230
',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询的数据源名称，精确匹配。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'test_mc',
          ),
        ),
        2 => 
        array (
          'name' => 'CalcEngineType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询的数据源类型。目前范围如下，不区分大小写。
- **ODPS**
- **EMR**
- **BLINK**
- **HOLO**
- **MaxGraph**
- **HYBRIDDB_FOR_POSTGRESQL**
- **ADB_MYSQL**
- **HADOOP_CDH**
- **CLICKHOUSE**',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ODPS',
          ),
        ),
        3 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源所属的环境。
- **DEV**：开发环境
- **PRD**：生产环境。',
            'type' => 'string',
            'required' => false,
            'example' => 'PRD',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询时每页显示的数据量，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        5 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询的页码。大于等于1的正整数，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '1AFAE64E-D1BE-432B-A9****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功，取值如下：
- **true**：请求成功。
- **false**：请求失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '分页查询结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '20',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '数据源的总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'CalcEngines' => 
                  array (
                    'description' => '数据源列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '数据源信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'BindingProjectName' => 
                        array (
                          'description' => '数据源关联的工作空间名称。',
                          'type' => 'string',
                          'example' => 'test_project',
                        ),
                        'IsDefault' => 
                        array (
                          'description' => '是否为当前类型的默认数据源。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'EngineId' => 
                        array (
                          'description' => '数据源ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '35',
                        ),
                        'DwRegion' => 
                        array (
                          'description' => '数据源关联的DataWorks工作空间所在的地域。',
                          'type' => 'string',
                          'example' => 'cn-zhangjiakou',
                        ),
                        'TaskAuthType' => 
                        array (
                          'description' => '数据源的访问身份。
- **USER**：当前用户。
- **PROJECT**：项目执行用户。
- **SUBACCOUNT**：子账号。
- **STS_ROLE**：STS角色。',
                          'type' => 'string',
                          'example' => 'PROJECT',
                        ),
                        'CalcEngineType' => 
                        array (
                          'description' => '数据源类型。',
                          'type' => 'string',
                          'example' => 'ODPS',
                        ),
                        'EngineInfo' => 
                        array (
                          'description' => '数据源的详细信息。
- ODPS
  ```
  {
    "pubEndpoint": "service.cn.maxcompute.aliyun.com/api",
    "endpoint": "service.cn.maxcompute.aliyun-inc.com/api",
    "initProperties": " 
    {\\"odpsTypeMode\\":\\"STANDARD\\",\\"openPai\\":false,\\"openPaiGpu\\":false}",
    "resourceGroupType": "ODPS",
    "resourceGroupId": "361826516****",
    "vpcEndpoint": "service.cn.maxcompute.aliyun-inc.com/api",
    "projectName": "onefall_test_zjk",
    "taskSameAsOwner": "true"
  }
  ```
- EMR
  ```
  {
    "emrClusterId": "C-xxx",
    "specs": "{\\"emrClusterId\\":\\"C-xxx\\",\\"emrAccessMode\\":\\"simple\\",\\"emrResourceQueueName\\":\\"default\\",\\"emrProjectId\\":\\"FP-xxx\\"}",
    "endpoint": "emr.aliyuncs.com",
    "emrResourceQueueName": "default",
    "emrAccessMode": "simple",
    "resourceGroupType": "DW",
    "projectName": "xx-xxxx",
    "emrProjectId": "FP-xxxx",
    "taskSameAsOwner": "false"
  }   
  ```
- BLINK
  ```
  {
    "bayesProjectId": "xxxx",
    "bayesProjectName": "xc_blxxixxxnk_1",
    "cluster": "xxxssxsx",
    "endpoint": "https://stream.console.aliyun.com",
    "engineType": "BLINK",
    "name": "xsxsxxxxx",
    "projectName": "xc_blxxxsxink_1",
    "queue": "root.xc_blxsxxxxxxink_1",
    "resourceGroupType": "DW",
    "specs": "{\\"cluster\\":\\"xxxxxx\\",\\"bayesProjectName\\":\\"xc_blxxixxxnk_1\\",\\"bayesProjectId\\":\\"ssxxxsa\\",\\"name\\":\\"sxsxsxxx\\",\\"queue\\":\\"root.sxxsxxsx\\"}",
    "taskSameAsOwner": false
  }
  ```
- HOLO
  ```
  {
    "endpoint": "hgprecn-cn-xsxssxsx-cn-shanghai-internal.hologres.aliyuncs.com:80",
    "engineType": "ODPS",
    "odpsEndpoint": "hgprecn-cn-xsxssxxs-cn-shanghai-internal.hologres.aliyuncs.com:80",
    "odpsProjectName": "xsxssxsxsx",
    "projectName": "xsxssxsxsx",
    "resourceGroupType": "DW",
    "specs": "{\\"pubEndpoint\\":\\"hgprecn-cn-xsxssxsxs-cn-shanghai.hologres.aliyuncs.com:80\\",\\"commonBuyInstanceId\\":\\"hgprecn-cn-xsxsxsxs\\",\\"project\\":\\"holo_upxsxgrade1\\",\\"common_buy_instance_id\\":\\"hgprecn-cn-xsxsxs\\",\\"endpoint\\":\\"hgprecn-cn-xsxxsxs-cn-shanghai-internal.hologres.aliyuncs.com:80\\",\\"port\\":\\"80\\",\\"host\\":\\"hgprecn-cn-xsxsxsxs-cn-shanghai-internal.hologres.aliyuncs.com\\",\\"vpcEndpoint\\":\\"hgprecn-cn-xsxsxsxs-cn-shanghai-vpc.hologres.aliyuncs.com:80\\",\\"authType\\":2,\\"region\\":\\"cn-shanghai\\"}",
    "taskSameAsOwner": false
  }
  ```
- MaxGraph
  ```
  {
    "endpoint": "http://pre-graphcompute.aliyuncs.com",
    "engineType": "ODPS",
    "odpsEndpoint": "http://pre-graphcompute.aliyuncs.com",
    "odpsProjectName": "xsxsxsxs",
    "projectName": "xsxsxsxs",
    "resourceGroupType": "DW",
    "taskSameAsOwner": false
  }
  ```
- HYBRIDDB_FOR_POSTGRESQL
  ```
  {
    "endpoint": "hybriddb_for_postgresql_mo12121ck_endpoint",
    "engineType": "ODPS",
    "odpsEndpoint": "hybriddb_for_postgresql_m121212ock_endpoint",
    "odpsProjectName": "sxasaxsaxaxas",
    "projectName": "sxasaxsaxaxas",
    "resourceGroupType": "DW",
    "specs": "{\\"connectionString\\":\\"gp-xsxsxsxxs.gpdb.rds.aliyuncs.com\\",\\"database\\":\\"xsxsxxsxs\\",\\"password\\":\\"xxxxxxx\\",\\"instanceId\\":\\"gp-cdcdacdacda\\",\\"port\\":\\"3432\\",\\"ownerId\\":\\"12121212\\",\\"username\\":\\"sdasaddsa\\"}",
    "taskSameAsOwner": false
  }
  ```
- ADB_MYSQL
  ```
  {
    "endpoint": "adb_mysql_mock_endpoint",
    "engineType": "ODPS",
    "odpsEndpoint": "adb_mysql_mock_endpoint",
    "odpsProjectName": "am-xsaxaxa",
    "projectName": "am-xsxsaxa",
    "resourceGroupType": "DW",
    "specs": "{\\"connectionString\\":\\"am-xsaxsa.ads.aliyuncs.com:3306\\",\\"database\\":\\"xsaxsaxa\\",\\"password\\":\\"xsaxsaxassxsa\\",\\"instanceId\\":\\"am-xsaxsasx\\",\\"username\\":\\"xsaxsadsd\\"}",
    "taskSameAsOwner": false
  }
  ```
- HADOOP_CDH
  ```
  {
    "bindingBaseId": "xsaxsaxs",
    "endpoint": "xsaaaaa",
    "engineType": "ODPS",
    "odpsEndpoint": "axsxaxssxs",
    "odpsProjectName": "ssxxax",
    "projectName": "xsaxsaxsa",
    "resourceGroupId": 45208xxxxxx,
    "resourceGroupType": "GATEWAY",
    "specs": "{\\"cluster\\":{\\"hive\\":{\\"hiveServer2Url\\":\\"jdbc:hive2://xxxxxxer-1-cn-shanghai-pre-kerberos-1:10000\\",\\"hiveMetastore\\":\\"thrift://xxxxxxxr-1-cn-shanghai-pre-kerberos-1:9083\\",\\"version\\":\\"2.1.1\\"},\\"configFiles\\":{\\"coreSite\\":\\"4534574xxxxxx\\",\\"hdfsSite\\":\\"453457919xxxxxxx\\",\\"mapredSite\\":\\"45345750xxxxxx\\",\\"yarnSite\\":\\"4534575xxxxx\\",\\"krb5Conf\\":\\"4534576xxxxx1\\",\\"hiveSite\\":\\"453457xxxxx20\\"},\\"spark\\":{\\"version\\":\\"2.4.0\\"},\\"cdh\\":{\\"version\\":\\"6.3.2\\"},\\"hdfs\\":{\\"version\\":\\"3.0.0\\"},\\"impala\\":{\\"impalaUrl\\":\\"jdbc:impala://cdh-xsxssxxsx-1-cn-shanghai-pre-kerberos-1:21050\\",\\"version\\":\\"3.2.0\\"},\\"yarn\\":{\\"YarnUrl\\":\\"http://cdh-xsxsxsxsxs-1-cn-shanghai-pre-kerberos-1:8032\\",\\"webUrl\\":\\"http://cdh-xsxsxssxxssx-1-cn-shanghai-pre-kerberos-1:8088\\",\\"version\\":\\"3.0.0\\"},\\"presto\\":{\\"prestoUrl\\":\\"jdbc:presto://cdh-xssxsxxsxsxs-1-cn-shanghai-pre-kerberos-1:8080/hive/default\\",\\"version\\":\\"0.244.1\\"}},\\"instanceId\\":161sdads733,\\"authDetail\\":{\\"principal\\":\\"hive@HADOOP.COM\\",\\"keytabFileId\\":\\"45345815xsxsxs3\\",\\"type\\":\\"kerberos\\",\\"username\\":\\"xsxsxsxsa@HADOOP.COM\\"},\\"resGroupStatus\\":\\"\\",\\"hadoopAuthType\\":\\"kerberos\\",\\"clusterIdentifier\\":\\"xssxsxsxsx\\",\\"clusterId\\":xsxsx,\\"resGroupId\\":4520870619xsxssxxs,\\"accessMode\\":\\"security\\",\\"authType\\":2}",
    "taskSameAsOwner": false
  }
  ```',
                          'type' => 'object',
                          'example' => '{
    "pubEndpoint": "service.cn.maxcompute.aliyun.com/api",
    "endpoint": "service.cn.maxcompute.aliyun-inc.com/api",
    "initProperties": " {\\"odpsTypeMode\\":\\"STANDARD\\",\\"openPai\\":false,\\"openPaiGpu\\":false}",
    "resourceGroupType": "ODPS",
    "resourceGroupId": "361826516****",
    "vpcEndpoint": "service.cn.maxcompute.aliyun-inc.com/api",
    "projectName": "onefall_test_zjk",
    "taskSameAsOwner": "true"
}',
                        ),
                        'EnvType' => 
                        array (
                          'description' => '数据源所在的环境。
- **DEV**：开发环境。
- **PRD**：生产环境。',
                          'type' => 'string',
                          'example' => 'PRD',
                        ),
                        'Region' => 
                        array (
                          'description' => '数据源所在的地域。',
                          'type' => 'string',
                          'example' => 'cn-zhangjiakou',
                        ),
                        'GmtCreate' => 
                        array (
                          'description' => '数据源的创建时间。',
                          'type' => 'string',
                          'example' => 'Oct 10, 2019 3:42:44 PM',
                        ),
                        'BindingProjectId' => 
                        array (
                          'description' => '数据源所在的工作空间ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '466230',
                        ),
                        'Name' => 
                        array (
                          'description' => '数据源的显示名称。',
                          'type' => 'string',
                          'example' => 'test_mc',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '租户ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234567',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
          3 => 
          array (
            'errorCode' => 'Invalid.CalcEngineEnvType',
            'errorMessage' => 'The specified envType %s is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'Invalid.CalcEngineType',
            'errorMessage' => 'The specified calcEngineType %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"1AFAE64E-D1BE-432B-A9****\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 20,\\n    \\"TotalCount\\": 1,\\n    \\"CalcEngines\\": [\\n      {\\n        \\"BindingProjectName\\": \\"test_project\\",\\n        \\"IsDefault\\": true,\\n        \\"EngineId\\": 35,\\n        \\"DwRegion\\": \\"cn-zhangjiakou\\",\\n        \\"TaskAuthType\\": \\"PROJECT\\",\\n        \\"CalcEngineType\\": \\"ODPS\\",\\n        \\"EngineInfo\\": {\\n          \\"pubEndpoint\\": \\"service.cn.maxcompute.aliyun.com/api\\",\\n          \\"endpoint\\": \\"service.cn.maxcompute.aliyun-inc.com/api\\",\\n          \\"initProperties\\": \\" {\\\\\\"odpsTypeMode\\\\\\":\\\\\\"STANDARD\\\\\\",\\\\\\"openPai\\\\\\":false,\\\\\\"openPaiGpu\\\\\\":false}\\",\\n          \\"resourceGroupType\\": \\"ODPS\\",\\n          \\"resourceGroupId\\": \\"361826516****\\",\\n          \\"vpcEndpoint\\": \\"service.cn.maxcompute.aliyun-inc.com/api\\",\\n          \\"projectName\\": \\"onefall_test_zjk\\",\\n          \\"taskSameAsOwner\\": \\"true\\"\\n        },\\n        \\"EnvType\\": \\"PRD\\",\\n        \\"Region\\": \\"cn-zhangjiakou\\",\\n        \\"GmtCreate\\": \\"Oct 10, 2019 3:42:44 PM\\",\\n        \\"BindingProjectId\\": 466230,\\n        \\"Name\\": \\"test_mc\\",\\n        \\"TenantId\\": 1234567\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListCalcEnginesResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0bc1ec92159376****</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>20</PageSize>\\n        <TotalCount>1</TotalCount>\\n        <CalcEngines>\\n            <BindingProjectName>abc</BindingProjectName>\\n            <IsDefault>true</IsDefault>\\n            <EngineId>35</EngineId>\\n            <DwRegion>cn-zhangjiakou</DwRegion>\\n            <TaskAuthType>PROJECT</TaskAuthType>\\n            <CalcEngineType>ODPS</CalcEngineType>\\n            <EnvType>PRD</EnvType>\\n            <Region>cn-zhangjiakou</Region>\\n            <GmtCreate>Oct 10, 2019 3:42:44 PM</GmtCreate>\\n            <BindingProjectId>27</BindingProjectId>\\n            <Name>abc</Name>\\n            <TenantId>1234567</TenantId>\\n        </CalcEngines>\\n    </Data>\\n</ListCalcEnginesResponse>","errorExample":""}]',
      'title' => '查看数据开发中绑定的数据源列表',
      'summary' => '该接口用于查询指定DataWorks工作空间的数据开发中绑定的数据源列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateDataSource' => 
    array (
      'summary' => '该接口用于创建DataWorks数据源。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源所在的DataWorks工作空间ID。您可以通过[ListProjects](~~2780068~~)接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'abc',
          ),
        ),
        2 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的描述信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        3 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的类型。常用类型如下：
- odps
- mysql
- rds
- oss
- sqlserver
- polardb
- oracle
- mongodb
- emr
- postgresql
- analyticdb_for_mysql
- hybriddb_for_postgresql
- holo',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'rds',
          ),
        ),
        4 => 
        array (
          'name' => 'SubType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的子类型。使用如下：

- 当DataSourceType参数配置为RDS时，SubType参数生效。
- 如果DataSourceType参数配置为RDS，SubType参数支持配置为mysql、sqlserver或postgresql。',
            'type' => 'string',
            'required' => false,
            'example' => 'mysql',
          ),
        ),
        5 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源所属的环境，包括0（开发环境）和1（生产环境）。

',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        6 => 
        array (
          'name' => 'Content',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的详细信息。部分常用数据源样例如下：
- odps
  ```
  {
    "accessId": "xssssss",
    "accessKey": "xsaxsaxsa",
    "authType": 2,
    "endpoint": "http://service.odps.aliyun.com/api",
    "project": "xsaxsax",
    "tag": "public"
  }
  ```
- mysql
  ```
  {
    "database": "xsaxsa",
    "instanceName": "rm-xsaxsa",
    "password": "xsaxsa",
    "rdsOwnerId": "xasxsa",
    "regionId": "cn-shanghai",
    "tag": "rds",
    "username": "xsaxsa"
  }
  ```
- rds
  ```
  {
    "configType": 1,
    "tag": "rds",
    "database": "xsaxsa",
    "username": "xsaxsa",
    "password": "xssaxsa$32050",
    "instanceName": "rm-xsaxs",
    "rdsOwnerId": "11111111"
  }
  ```
- oss
  ```
  {
    "accessId": "sssssxx",
    "accessKey": "xsaxaxsaxs",
    "bucket": "xsa-xs-xs",
    "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
    "tag": "public"
  }
  ```
- sqlserver
  ```
  {
    "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cn:123;DatabaseName=xsxs-xsxs",
    "password": "sdasda$fs",
    "tag": "public",
    "username": "sxaxacdacdd"
  }
  ```
- polardb
  ```
  {
    "clusterId": "pc-sdadsadsa",
    "database": "dsadsadsa",
    "ownerId": "121212122",
    "password": "sdasdafssa",
    "region": "cn-shanghai",
    "tag": "polardb",
    "username": "asdadsads"
  }
  ```
- redis
  ```
  {    
  "password": "xxxxxx",   
   "address":"[{\\"host\\":\\"xxxxxxx.redis.rds.aliyuncs.com\\",\\"port\\":6379}]",    
  "tag": "public"
  }
  ```
- oracle
  ```
  {
    "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
    "password": "sxasaxsa",
    "tag": "public",
    "username": "sasfadfa"
  }
  ```
- mongodb
  ```
  {
    "address": "[\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\"]",
    "database": "admin",
    "password": "sadsda@",
    "tag": "public",
    "username": "dsadsadas"
  }
  ```
- emr
  ```
  {
    "accessId": "xsaxsa",
    "emrClusterId": "C-dsads",
    "emrResourceQueueName": "default",
    "emrEndpoint": "emr.aliyuncs.com",
    "accessKey": "dsadsad",
    "emrUserId": "224833315798889783",
    "name": "sasdsadsa",
    "emrAccessMode": "simple",
    "region": "cn-shanghai",
    "authType": "2",
    "emrProjectId": "FP-sdadsad"
  }
  ```
- postgresql
  ```
  {
    "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
    "password": "sdadsads",
    "tag": "public",
    "username": "sdsasda"
  }
  ```
- analyticdb_for_mysql
  ```
  {
    "instanceId": "am-sadsada",
    "database": "xsxsx",
    "username": "xsxsa",
    "password": "asdadsa",
    "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
  }
  ```
- hybriddb_for_postgresql
  ```
  {
    "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
    "database": "xsaxsaxas",
    "password": "xsaxsaxsa@11",
    "instanceId": "gp-xsaxsaxsa",
    "port": "541132",
    "ownerId": "xsaxsaxsas",
    "username": "sadsad"
  }
  ```
- holo
  ```
  {
    "accessId": "xsaxsaxs",
    "accessKey": "xsaxsaxsa",
    "database": "xsaxsaxsa",
    "instanceId": "xsaxa",
    "tag": "aliyun"
  }
  ```
- kafka
  ```
  {
    "instanceId": "xsax-cn-xsaxsa",
    "regionId": "cn-shanghai",
    "tag": "aliyun",
    "ownerId": "1212121212112"
  }
  ```',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '数据源ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '123',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc141151593763****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
          3 => 
          array (
            'errorCode' => 'ConnectionAlreadyExist',
            'errorMessage' => 'The connection with envType %s and name %s already exists.',
          ),
          4 => 
          array (
            'errorCode' => 'DataSource.CheckRamRoleFailure',
            'errorMessage' => 'Failed to check the RAM role. AccountId %s. roleArn %s.',
          ),
          5 => 
          array (
            'errorCode' => 'DataSource.ConnectionStrProperty.PatternNotMatch',
            'errorMessage' => 'The pattern value %s is invalid. The correct pattern is %s.',
          ),
          6 => 
          array (
            'errorCode' => 'Invalid.DataSource.DataSourceTypeNotSupport',
            'errorMessage' => 'The dataSourceType %s and subType %s are not supported.',
          ),
          7 => 
          array (
            'errorCode' => 'Invalid.Param.Odps.EngineIdOrConnectStrEmpty',
            'errorMessage' => 'Either the compute engine ID or the connection string must be specified when data source type is ODPS.',
          ),
          8 => 
          array (
            'errorCode' => 'MissingParam.ConnectionStr.Property',
            'errorMessage' => 'You must specify property %s required by the data source connection string.',
          ),
          9 => 
          array (
            'errorCode' => 'Invalid.DataSource.DataSourceTypeNotExist',
            'errorMessage' => 'The data source type %s does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": \\"200\\",\\n  \\"Data\\": 123,\\n  \\"RequestId\\": \\"0bc141151593763****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<CreateDataSourceResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>123</Data>\\n    <RequestId>0bc141151593763****</RequestId>\\n    <Success>true</Success>\\n</CreateDataSourceResponse>","errorExample":""}]',
      'title' => '创建数据源',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListDataSources' => 
    array (
      'summary' => '该接口用于查询DataWorks的数据源列表。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源所在的DataWorks工作空间ID。您可以通过[ListProjects](~~2780068~~)接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询的数据源名称。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'test',
          ),
        ),
        2 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的类型。常用的类型如下：
- odps
- mysql
- rds
- oss
- sqlserver
- polardb
- oracle
- mongodb
- emr
- postgresql
- analyticdb_for_mysql
- hybriddb_for_postgresql
- holo',
            'type' => 'string',
            'required' => false,
            'example' => 'rds',
          ),
        ),
        3 => 
        array (
          'name' => 'SubType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的子类型。仅当DataSourceType参数配置为RDS时，该参数生效。

当DataSourceType参数配置为RDS时，该参数可以配置为mysql、sqlserver或postgresql。',
            'type' => 'string',
            'required' => false,
            'example' => 'mysql',
          ),
        ),
        4 => 
        array (
          'name' => 'Status',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的状态。取值如下：
- ENABLED，正常。
- DISABLED，禁用。',
            'type' => 'string',
            'required' => false,
            'example' => 'ENABLED',
          ),
        ),
        5 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源所属的环境，包括0（开发环境）和1（生产环境）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        6 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大为100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        7 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询的页码。取值为大于等于1的正整数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc14115159376359****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '数据源的查询结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '20',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '数据源的总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '233',
                  ),
                  'DataSources' => 
                  array (
                    'description' => '数据源列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '数据源详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '数据源的状态。取值如下：
- 1：表示数据源正常使用。
- 2：表示数据源已禁用。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '数据源关联的工作空间ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '123',
                        ),
                        'SubType' => 
                        array (
                          'description' => '数据源的子类型。仅当DataSourceType参数配置为RDS时，该参数生效。',
                          'type' => 'string',
                          'example' => 'mysql',
                        ),
                        'GmtModified' => 
                        array (
                          'description' => '修改数据源的时间。时间格式示例为Mar 17, 2021 4:09:32 PM。',
                          'type' => 'string',
                          'example' => 'Mar 17, 2021 4:09:32 PM',
                        ),
                        'EnvType' => 
                        array (
                          'description' => '数据源所在的环境。取值如下：
- 0：开发环境。
- 1：生产环境。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'ConnectStatus' => 
                        array (
                          'description' => '数据源的状态。取值如下：
- 1：表示数据源正常使用。
- 2：表示数据源已禁用。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'Sequence' => 
                        array (
                          'description' => '排序字段。数据源按此字段从大到小排序。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '300',
                        ),
                        'Description' => 
                        array (
                          'description' => '数据源的描述信息。',
                          'type' => 'string',
                          'example' => 'a connection',
                        ),
                        'DataSourceType' => 
                        array (
                          'description' => '数据源的类型。常用类型如下：
- odps
- mysql
- rds
- oss
- sqlserver
- polardb
- oracle
- mongodb
- emr
- postgresql
- analyticdb_for_mysql
- hybriddb_for_postgresql
- holo',
                          'type' => 'string',
                          'example' => 'rds',
                        ),
                        'GmtCreate' => 
                        array (
                          'description' => '创建数据源的时间。时间格式示例为Mar 17, 2021 4:09:32 PM。',
                          'type' => 'string',
                          'example' => 'Mar 17, 2021 4:09:32 PM',
                        ),
                        'DefaultEngine' => 
                        array (
                          'description' => '数据源关联的引擎是否为同类型数据源选用的默认引擎。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Shared' => 
                        array (
                          'description' => '是否为共享的数据源。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Operator' => 
                        array (
                          'description' => '最近一次修改数据源的阿里云用户ID。

',
                          'type' => 'string',
                          'example' => '193543050****',
                        ),
                        'Name' => 
                        array (
                          'description' => '数据源的名称。',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                        'Content' => 
                        array (
                          'description' => '数据连接串的相关信息。格式为JSON格式。常用的数据源对应的连接串样例如下：
- MaxCompute 
  ```
  {
    "pubEndpoint": "http://service.cn.maxcompute.aliyun.com/api",
    "accessId": "xxxxxxx",
    "securityToken": null,
    "endpoint": "http://service.cn.maxcompute.aliyun-inc.com/api",
    "accessKey": "***",
    "name": "PRE_PROJECT_A_engine",
    "project": "PRE_PROJECT_A",
    "vpcEndpoint": "http://service.cn.maxcompute.aliyun-inc.com/api",
    "region": "cn-shanghai",
    "authType": "2"
  }
  ```
- mysql 
  ```
  {
    "configType": "1",
    "database": "mysql_d111b",
    "instanceName": "rm-xxxxxx",
    "password": "***",
    "rdsOwnerId": "12133xxxxxx",
    "tag": "rds",
    "username": "mysql_db111"
  }
  ```
- sqlserver 
  ```
  {
    "configType": "1",
    "jdbcUrl": "jdbc:sqlserver://rm-xxxxx.sqlserver.rds.aliyuncs.com:1433;DatabaseName=sqlserver_db1",
    "password": "***",
    "tag": "public",
    "username": "sqlserver_db111"
  }
  ```
- oss 
  ```
  {
    "accessId": "LTAINbR9Uxxxx",
    "accessKey": "***",
    "bucket": "bigxxx1223",
    "configType": "1",
    "endpoint": "http://oss-cn-hangzhou.aliyuncs.com",
    "tag": "public"
  }
  ```
- postgresql 
  ```
  {
    "configType": "1",
    "database": "cdp_xxx",
    "instanceName": "rm-xxxx",
    "password": "***",
    "rdsOwnerId": "121xxxxx",
    "tag": "rds",
    "username": "cdp_xxx"
  }
  ```
- ads 
  ```
  {
    "configType": "1",
    "password": "***",
    "schema": "ads_demo",
    "tag": "public",
    "url": "ads-xxx-xxxx.cn-hangzhou-1.ads.aliyuncs.com:3029",
    "username": "lslslsls"
  }
  ```',
                          'type' => 'string',
                          'example' => '{"pubEndpoint":"http://service.cn.maxcompute.aliyun.com/api","accessId":"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC","securityToken":null,"endpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","accessKey":"***","name":"PRE_PROJECT_A_engine","project":"PRE_PROJECT_A","vpcEndpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","region":"cn-shanghai","authType":"2"}',
                        ),
                        'Id' => 
                        array (
                          'description' => '数据源ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1',
                        ),
                        'BindingCalcEngineId' => 
                        array (
                          'description' => '数据源关联的计算引擎ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '租户ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234567',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0bc14115159376359****\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 20,\\n    \\"TotalCount\\": 233,\\n    \\"DataSources\\": [\\n      {\\n        \\"Status\\": 1,\\n        \\"ProjectId\\": 123,\\n        \\"SubType\\": \\"mysql\\",\\n        \\"GmtModified\\": \\"Mar 17, 2021 4:09:32 PM\\",\\n        \\"EnvType\\": 1,\\n        \\"ConnectStatus\\": 1,\\n        \\"Sequence\\": 300,\\n        \\"Description\\": \\"a connection\\",\\n        \\"DataSourceType\\": \\"rds\\",\\n        \\"GmtCreate\\": \\"Mar 17, 2021 4:09:32 PM\\",\\n        \\"DefaultEngine\\": false,\\n        \\"Shared\\": false,\\n        \\"Operator\\": \\"193543050****\\",\\n        \\"Name\\": \\"abc\\",\\n        \\"Content\\": \\"{\\\\\\"pubEndpoint\\\\\\":\\\\\\"http://service.cn.maxcompute.aliyun.com/api\\\\\\",\\\\\\"accessId\\\\\\":\\\\\\"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC\\\\\\",\\\\\\"securityToken\\\\\\":null,\\\\\\"endpoint\\\\\\":\\\\\\"http://service.cn.maxcompute.aliyun-inc.com/api\\\\\\",\\\\\\"accessKey\\\\\\":\\\\\\"***\\\\\\",\\\\\\"name\\\\\\":\\\\\\"PRE_PROJECT_A_engine\\\\\\",\\\\\\"project\\\\\\":\\\\\\"PRE_PROJECT_A\\\\\\",\\\\\\"vpcEndpoint\\\\\\":\\\\\\"http://service.cn.maxcompute.aliyun-inc.com/api\\\\\\",\\\\\\"region\\\\\\":\\\\\\"cn-shanghai\\\\\\",\\\\\\"authType\\\\\\":\\\\\\"2\\\\\\"}\\",\\n        \\"Id\\": 1,\\n        \\"BindingCalcEngineId\\": 123,\\n        \\"TenantId\\": 1234567\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc14115159376359****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <TotalCount>233</TotalCount>\\n    <PageSize>20</PageSize>\\n    <PageNumber>1</PageNumber>\\n    <DataSources>\\n        <Status>1</Status>\\n        <Operator>193543050****</Operator>\\n        <ConnectStatus>1</ConnectStatus>\\n        <SubType>mysql</SubType>\\n        <Description>a connection</Description>\\n        <BindingCalcEngineId>123</BindingCalcEngineId>\\n        <ProjectId>123</ProjectId>\\n        <GmtModified>Mar 17, 2021 4:09:32 PM</GmtModified>\\n        <Sequence>300</Sequence>\\n        <Shared>false</Shared>\\n        <EnvType>1</EnvType>\\n        <Name>abc</Name>\\n        <DefaultEngine>false</DefaultEngine>\\n        <TenantId>1234567</TenantId>\\n        <GmtCreate>Mar 17, 2021 4:09:32 PM</GmtCreate>\\n        <Content>{\\"pubEndpoint\\":\\"http://service.cn.maxcompute.aliyun.com/api\\",\\"accessId\\":\\"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC\\",\\"securityToken\\":null,\\"endpoint\\":\\"http://service.cn.maxcompute.aliyun-inc.com/api\\",\\"accessKey\\":\\"***\\",\\"name\\":\\"PRE_PROJECT_A_engine\\",\\"project\\":\\"PRE_PROJECT_A\\",\\"vpcEndpoint\\":\\"http://service.cn.maxcompute.aliyun-inc.com/api\\",\\"region\\":\\"cn-shanghai\\",\\"authType\\":\\"2\\"}</Content>\\n        <DataSourceType>rds</DataSourceType>\\n        <Id>1</Id>\\n    </DataSources>\\n</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '查询数据源列表',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateDataSource' => 
    array (
      'methods' => 
      array (
        0 => 'put',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的描述信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'xxx',
          ),
        ),
        1 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源所在的环境。取值如下：
- 0：开发环境。
- 1：生产环境。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'Content',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要修改的目标数据源的详细信息。
不支持修改数据源的类型，例如，您不可以修改odps类型的数据源为MySQL类型。
部分常用数据源的信息样例如下：
- odps
  ```
  {
    "accessId": "xssssss",
    "accessKey": "xsaxsaxsa",
    "authType": 2,
    "endpoint": "http://service.odps.aliyun.com/api",
    "project": "xsaxsax",
    "tag": "public"
  }
  ```
- mysql
  ```
  {
    "database": "xsaxsa",
    "instanceName": "rm-xsaxsa",
    "password": "xsaxsa",
    "rdsOwnerId": "xasxsa",
    "regionId": "cn-shanghai",
    "tag": "rds",
    "username": "xsaxsa"
  }
  ```
- rds
  ```
  {
    "configType": 1,
    "tag": "rds",
    "database": "xsaxsa",
    "username": "xsaxsa",
    "password": "xssaxsa$32050",
    "instanceName": "rm-xsaxs",
    "rdsOwnerId": "11111111"
  }
  ```
- oss
  ```
  {
    "accessId": "sssssxx",
    "accessKey": "xsaxaxsaxs",
    "bucket": "xsa-xs-xs",
    "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
    "tag": "public"
  }
  ```
- sqlserver
  ```
  {
    "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cn:123;DatabaseName=xsxs-xsxs",
    "password": "sdasda$fs",
    "tag": "public",
    "username": "sxaxacdacdd"
  }
  ```
- polardb
  ```
  {
    "clusterId": "pc-sdadsadsa",
    "database": "dsadsadsa",
    "ownerId": "121212122",
    "password": "sdasdafssa",
    "region": "cn-shanghai",
    "tag": "polardb",
    "username": "asdadsads"
  }
  ```
- oracle
  ```
  {
    "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
    "password": "sxasaxsa",
    "tag": "public",
    "username": "sasfadfa"
  }
  ```
- mongodb
  ```
  {
    "address": "[\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\"]",
    "database": "admin",
    "password": "sadsda@",
    "tag": "public",
    "username": "dsadsadas"
  }
  ```
- emr
  ```
  {
    "accessId": "xsaxsa",
    "emrClusterId": "C-dsads",
    "emrResourceQueueName": "default",
    "emrEndpoint": "emr.aliyuncs.com",
    "accessKey": "dsadsad",
    "emrUserId": "224833315798889783",
    "name": "sasdsadsa",
    "emrAccessMode": "simple",
    "region": "cn-shanghai",
    "authType": "2",
    "emrProjectId": "FP-sdadsad"
  }
  ```
- postgresql
  ```
  {
    "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
    "password": "sdadsads",
    "tag": "public",
    "username": "sdsasda"
  }
  ```
- analyticdb_for_mysql
  ```
  {
    "instanceId": "am-sadsada",
    "database": "xsxsx",
    "username": "xsxsa",
    "password": "asdadsa",
    "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
  }
  ```
- hybriddb_for_postgresql
  ```
  {
    "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
    "database": "xsaxsaxas",
    "password": "xsaxsaxsa@11",
    "instanceId": "gp-xsaxsaxsa",
    "port": "541132",
    "ownerId": "xsaxsaxsas",
    "username": "sadsad"
  }
  ```
- holo
  ```
  {
    "accessId": "xsaxsaxs",
    "accessKey": "xsaxsaxsa",
    "database": "xsaxsaxsa",
    "instanceId": "xsaxa",
    "tag": "aliyun"
  }
  ```
- kafka
  ```
  {
    "instanceId": "xsax-cn-xsaxsa",
    "regionId": "cn-shanghai",
    "tag": "aliyun",
    "ownerId": "1212121212112"
  }
  ```',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '{"accessId":"xssssss","accessKey":"xsaxsaxsa","authType":2,"endpoint":"http://service.odps.aliyun.com/api","project":"xsaxsax","tag":"public"}',
          ),
        ),
        3 => 
        array (
          'name' => 'Status',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的状态。该字段已废弃，请勿使用。',
            'type' => 'string',
            'required' => false,
            'example' => 'ENABLED',
          ),
        ),
        4 => 
        array (
          'name' => 'DataSourceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要更新的数据源ID，您可以调用[ListDataSources](~~2780072~~)获取数据源的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '是否成功更新数据源。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc14115159376359****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
          3 => 
          array (
            'errorCode' => 'MissingParam.ConnectionStr.Property',
            'errorMessage' => 'You must specify property %s required by the data source connection string.',
          ),
          4 => 
          array (
            'errorCode' => 'DataSource.CheckRamRoleFailure',
            'errorMessage' => 'Failed to check the RAM role. AccountId %s. roleArn %s.',
          ),
          5 => 
          array (
            'errorCode' => 'DataSource.ConnectionStrProperty.PatternNotMatch',
            'errorMessage' => 'The pattern value %s is invalid. The correct pattern is %s.',
          ),
          6 => 
          array (
            'errorCode' => 'DataSource.NotFound',
            'errorMessage' => 'The specified data source ID %s does not exist.',
          ),
          7 => 
          array (
            'errorCode' => 'Invalid.Connection.Empty',
            'errorMessage' => 'You must specify the connection parameter.',
          ),
          8 => 
          array (
            'errorCode' => 'Invalid.DataSource.DataSourceTypeNotExist',
            'errorMessage' => 'The data source type %s does not exist.',
          ),
          9 => 
          array (
            'errorCode' => 'Invalid.DataSource.DataSourceTypeNotSupport',
            'errorMessage' => 'The dataSourceType %s and subType %s are not supported.',
          ),
          10 => 
          array (
            'errorCode' => 'Invalid.Operation',
            'errorMessage' => 'You cannot delete the bindingCalcEngine that is bound to the data source.',
          ),
          11 => 
          array (
            'errorCode' => 'Invalid.Param.Odps.EngineIdOrConnectStrEmpty',
            'errorMessage' => 'Either the compute engine ID or the connection string must be specified when data source type is ODPS.',
          ),
          12 => 
          array (
            'errorCode' => 'Required.Parameter.Empty',
            'errorMessage' => 'You must specify the parameter %s.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": \\"200\\",\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0bc14115159376359****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<UpdateDataSourceResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>0bc14115159376359****</RequestId>\\n    <Success>true</Success>\\n</UpdateDataSourceResponse>","errorExample":""}]',
      'title' => '更新数据源',
      'summary' => '该接口用于更新数据源。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteDataSource' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DataSourceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源ID，您可以调用[ListDataSources](~~211431~~)获取数据源的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '是否成功删除数据源。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1411515937635****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
          3 => 
          array (
            'errorCode' => 'Invalid.Operation',
            'errorMessage' => 'You cannot delete the bindingCalcEngine that is bound to the data source.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": \\"200\\",\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc1411515937635****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>true</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '删除数据源',
      'summary' => '该接口用于删除数据源。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListResourceGroups' => 
    array (
      'summary' => '该接口用于查看指定类型的资源组列表。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ResourceGroupType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要查看的资源组类型ID。取值如下：
- 0（DataWorks）
- 1（调度）
- 2（MaxCompute）
- 3（PAI）
- 4（数据集成）
- 7 （下单购买独享调度资源组时，生成的购买资源ID）
- 9 （dataService）
- 默认取值为1（调度）。

当取值表示引擎时，查看的资源组列表为购买该类型引擎时创建的资源组列表。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'example' => '3',
          ),
        ),
        1 => 
        array (
          'name' => 'Keyword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '关键字。用于模糊查询资源组名称和资源组标识。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        2 => 
        array (
          'name' => 'BizExtKey',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源组的类别。取值如下：
- default：默认值，公共资源组。
- single：独享资源组。',
            'type' => 'string',
            'required' => false,
            'example' => 'default',
          ),
        ),
        3 => 
        array (
          'name' => 'ResourceManagerResourceGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源组ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'rg-acfmzbn7pti3zfa',
          ),
        ),
        4 => 
        array (
          'name' => 'Tags',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '标签列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '标签信息。',
              'type' => 'object',
              'properties' => 
              array (
                'Key' => 
                array (
                  'description' => '标签键。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'Env',
                ),
                'Value' => 
                array (
                  'description' => '标签值。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'Test',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 20,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '资源组列表。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '资源组详情。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Status' => 
                    array (
                      'description' => '资源组的状态。取值如下：
- NORMAL(0)，表示资源组状态正常，处于运行中或服务中。
- STOP(1)，表示资源组已到期，处于冻结状态。
- DELETED(2)，表示资源组已被释放或销毁。
- CREATING(3)，表示资源组正在创建或启动。
- CREATE_FAILED(4)，表示资源组创建或启动失败。
- UPDATING(5)，表示资源组正在扩容或升级。
- UPDATE_FAILED(6)，表示资源组扩容或升级失败。
- DELETING(7)，表示资源组正在被释放或销毁。
- DELETE_FAILED(8)，表示资源组释放或销毁失败。
- TIMEOUT(9)，表示对资源组执行的操作超时。所有变更操作均可能会超时，该枚举值暂时仅提供给数据服务使用。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'UpdateTime' => 
                    array (
                      'description' => '最近一次更新资源组的时间。',
                      'type' => 'string',
                      'example' => 'Jul 9, 2018 2:43:37 PM',
                    ),
                    'IsDefault' => 
                    array (
                      'description' => '是否为默认资源组。取值如下：
- true：是默认资源组。
- false：非默认资源组。',
                      'type' => 'boolean',
                      'example' => 'true',
                    ),
                    'Cluster' => 
                    array (
                      'description' => '集群的名称。该参数仅对于MaxCompute和PAI资源组类型生效。',
                      'type' => 'string',
                      'example' => 'AY18G',
                    ),
                    'EnableKp' => 
                    array (
                      'description' => '是否使用Kp（关键人）访问。取值如下：
- true：表示MaxCompute引擎使用阿里云账号UID作为访问账户的显示名称。
- false：表示MaxCompute引擎使用阿里云账号名称作为访问账户的显示名称。
其余类型无意义。该参数仅对MaxCompute引擎生效。
',
                      'type' => 'boolean',
                      'example' => 'false',
                    ),
                    'ResourceGroupType' => 
                    array (
                      'description' => '资源组的类型。取值如下：
- 0（DataWorks）
- 2（MaxCompute）
- 3（PAI）
- 4（数据集成）
- 7（调度）
- 9 （dataService）',
                      'type' => 'string',
                      'example' => '3',
                    ),
                    'CreateTime' => 
                    array (
                      'description' => '创建集群的时间。格式示例为Jul 9, 2018 2:43:37 PM。',
                      'type' => 'string',
                      'example' => 'Jul 9, 2018 2:43:37 PM',
                    ),
                    'Identifier' => 
                    array (
                      'description' => '资源组的标识。',
                      'type' => 'string',
                      'example' => 'e1815577-2f4e-4c5e-b29****',
                    ),
                    'Mode' => 
                    array (
                      'description' => '资源组的类型。取值如下：
- ISOLATE：表示预付费的独享资源组。
- SHARE：表示后付费的公共资源组。
- DEVELOP：表示开发者版本。',
                      'type' => 'string',
                      'example' => 'SHARE',
                    ),
                    'BizExtKey' => 
                    array (
                      'description' => '资源组的类别。取值如下：
- default，公共资源组。
- single，独享资源组。',
                      'type' => 'string',
                      'example' => 'default',
                    ),
                    'Sequence' => 
                    array (
                      'description' => '序列字段。用于将已创建的资源组按照创建的序号从小到大升序排序。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '300',
                    ),
                    'Specs' => 
                    array (
                      'description' => '资源组的详细信息。{}中显示的内容为资源组的详细信息。',
                      'type' => 'object',
                      'example' => '{}',
                    ),
                    'Name' => 
                    array (
                      'description' => '资源组的名称。',
                      'type' => 'string',
                      'example' => 'abc',
                    ),
                    'Id' => 
                    array (
                      'description' => '资源组的ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1234567',
                    ),
                    'TenantId' => 
                    array (
                      'description' => '租户ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1234567',
                    ),
                    'ResourceManagerResourceGroupId' => 
                    array (
                      'description' => '资源组ID。',
                      'type' => 'string',
                      'example' => 'rg-acfmzbn7pti3zfa',
                    ),
                    'Tags' => 
                    array (
                      'description' => '标签列表。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'description' => '标签信息。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'Key' => 
                          array (
                            'description' => '标签键。',
                            'type' => 'string',
                            'example' => 'Env',
                          ),
                          'Value' => 
                          array (
                            'description' => '标签值。',
                            'type' => 'string',
                            'example' => 'Test',
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Success\\": true,\\n  \\"Data\\": [\\n    {\\n      \\"Status\\": 0,\\n      \\"UpdateTime\\": \\"Jul 9, 2018 2:43:37 PM\\",\\n      \\"IsDefault\\": true,\\n      \\"Cluster\\": \\"AY18G\\",\\n      \\"EnableKp\\": false,\\n      \\"ResourceGroupType\\": \\"3\\",\\n      \\"CreateTime\\": \\"Jul 9, 2018 2:43:37 PM\\",\\n      \\"Identifier\\": \\"e1815577-2f4e-4c5e-b29****\\",\\n      \\"Mode\\": \\"SHARE\\",\\n      \\"BizExtKey\\": \\"default\\",\\n      \\"Sequence\\": 300,\\n      \\"Specs\\": {},\\n      \\"Name\\": \\"abc\\",\\n      \\"Id\\": 1234567,\\n      \\"TenantId\\": 1234567,\\n      \\"ResourceManagerResourceGroupId\\": \\"rg-acfmzbn7pti3zfa\\",\\n      \\"Tags\\": [\\n        {\\n          \\"Key\\": \\"Env\\",\\n          \\"Value\\": \\"Test\\"\\n        }\\n      ]\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<ListResourceGroupsResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <Status>0</Status>\\n        <UpdateTime>Jul 9, 2018 2:43:37 PM</UpdateTime>\\n        <IsDefault>true</IsDefault>\\n        <Cluster>AY18G</Cluster>\\n        <EnableKp>false</EnableKp>\\n        <ResourceGroupType>3</ResourceGroupType>\\n        <CreateTime>Jul 9, 2018 2:43:37 PM</CreateTime>\\n        <Identifier>e1815577-2f4e-4c5e-b29****</Identifier>\\n        <Mode>SHARE</Mode>\\n        <BizExtKey>default</BizExtKey>\\n        <Sequence>300</Sequence>\\n        <Name>abc</Name>\\n        <Id>1234567</Id>\\n        <TenantId>1234567</TenantId>\\n        <ResourceManagerResourceGroupId>rg-acfmzbn7pti3zfa</ResourceManagerResourceGroupId>\\n        <Tags>\\n            <Key>Env</Key>\\n            <Value>Test</Value>\\n        </Tags>\\n    </Data>\\n</ListResourceGroupsResponse>","errorExample":""}]',
      'title' => '查看资源组列表',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetProject' => 
    array (
      'summary' => '该接口用于查询一个DataWorks工作空间的详细信息。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'riskType' => 'none',
        'chargeType' => 'free',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间ID。
您可以通过[ListProjects](~~2780068~~)接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'example' => '466230',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的名称。您可以通过[ListProjects](~~2780068~~)接口获取工作空间的名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'test_project',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '1AFAE64E-D1BE-432B-A9****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功，取值如下：
- **true**：请求成功。
- **false**：请求失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '工作空间的详细信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '工作空间的状态，取值如下：
- **0**：AVAILABLE，工作空间运行正常。
- **1**：DELETED，工作空间已被删除。
- **2**：INITIALIZING，初始化工作空间。
- **3**：INIT_FAILED，工作空间初始化失败。
- **4**：FORBIDDEN，手动禁用工作空间。
- **5**：DELETING，正在删除工作空间。
- **6**：DEL_FAILED，工作空间删除失败。
- **7**：FROZEN，工作空间欠费冻结。
- **8**：UPDATING，更新工作空间（为工作空间添加并初始化计算引擎）。
- **9**：UPDATE_FAILED，更新工作空间（为工作空间添加并初始化计算引擎）失败。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'MaxFlowNode' => 
                  array (
                    'description' => '该参数已废弃。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '466230',
                  ),
                  'IsAllowDownload' => 
                  array (
                    'description' => '是否允许下载ide上查询的结果，取值如下：
- **1**：允许下载。
- **0**：不允许下载。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'ProjectMode' => 
                  array (
                    'description' => '工作空间的模式，取值如下：
- **2**：表示简单工作空间模式。
- **3**：表示标准工作空间模式。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '2',
                  ),
                  'GmtModified' => 
                  array (
                    'description' => '修改工作空间的时间，示例格式为`Dec 3, 2019 9:12:20 PM`。',
                    'type' => 'string',
                    'example' => 'Dec 3, 2019 9:12:20 PM',
                  ),
                  'ProdStorageQuota' => 
                  array (
                    'description' => '该参数已废弃。',
                    'type' => 'string',
                    'example' => ' 1',
                  ),
                  'ProjectDescription' => 
                  array (
                    'description' => '工作空间的详细描述信息。',
                    'type' => 'string',
                    'example' => 'test_describe',
                  ),
                  'DevelopmentType' => 
                  array (
                    'description' => '该参数已废弃。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '4',
                  ),
                  'TablePrivacyMode' => 
                  array (
                    'description' => 'MaxCompute表的可见性权限，取值如下：
- **0**：租户内用户不可见MaxCompute表。
- **1**：租户内用户可见MaxCompute表。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'DefaultDiResourceGroupIdentifier' => 
                  array (
                    'description' => '购买MaxCompute独享资源组时，默认分配的资源组的标识。',
                    'type' => 'string',
                    'example' => 'group_280749521****',
                  ),
                  'SchedulerMaxRetryTimes' => 
                  array (
                    'description' => '默认出错自动重跑的次数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '3',
                  ),
                  'ProtectedMode' => 
                  array (
                    'description' => '工作空间是否开启了保护模式，取值如下：
- **1**：开启保护模式。
- **0**：未开启保护模式。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'SchedulerRetryInterval' => 
                  array (
                    'description' => '默认出错自动重跑的时间间隔，单位为ms。取值最大为30分钟，注意单位转换。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '120000',
                  ),
                  'Appkey' => 
                  array (
                    'description' => '该参数已废弃。',
                    'type' => 'string',
                    'example' => '0',
                  ),
                  'DevStorageQuota' => 
                  array (
                    'description' => '该参数已废弃。',
                    'type' => 'string',
                    'example' => '0',
                  ),
                  'ResidentArea' => 
                  array (
                    'description' => '工作空间的类型。
- **private**：私有区
- **swap**：交换区。',
                    'type' => 'string',
                    'example' => 'private',
                  ),
                  'IsDefault' => 
                  array (
                    'description' => '是否为默认工作空间，取值如下：
- **1**：是。
- **0**：否。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'Destination' => 
                  array (
                    'description' => '该参数已废弃。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'ProjectName' => 
                  array (
                    'description' => '工作空间的显示名称。',
                    'type' => 'string',
                    'example' => 'test_project',
                  ),
                  'ProjectIdentifier' => 
                  array (
                    'description' => '工作空间的名称。',
                    'type' => 'string',
                    'example' => 'test_project',
                  ),
                  'DisableDevelopment' => 
                  array (
                    'description' => '是否禁用开发角色，取值如下：
 - **false**：默认值，开启开发角色。
 -  **true**：禁用开发角色。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'ProjectOwnerBaseId' => 
                  array (
                    'description' => '工作空间所有者的阿里云ID。',
                    'type' => 'string',
                    'example' => '18229311****',
                  ),
                  'BaseProject' => 
                  array (
                    'description' => '该参数已废弃。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'UseProxyOdpsAccount' => 
                  array (
                    'description' => '访问MaxCompute引擎是否使用代理账号。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'GmtCreate' => 
                  array (
                    'description' => '创建工作空间时间，示例格式`Dec 3, 2019 9:12:20 PM`。',
                    'type' => 'string',
                    'example' => 'Oct 10, 2019 3:42:53 PM',
                  ),
                  'TenantId' => 
                  array (
                    'description' => '租户ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '280749521',
                  ),
                  'EnvTypes' => 
                  array (
                    'description' => '工作空间包含的环境信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '工作空间包含的环境：
- 简单模式只有生产环境（**PROD**）。
- 标准模式包含开发环境（**DEV**）和生产环境（**PROD**）。',
                      'type' => 'string',
                      'example' => '["PROD"]',
                    ),
                  ),
                  'ResourceManagerResourceGroupId' => 
                  array (
                    'description' => '资源组ID。',
                    'type' => 'string',
                    'example' => 'rg-acfmzbn7****',
                  ),
                  'Tags' => 
                  array (
                    'description' => '工作空间绑定的标签信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '标签信息详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Key' => 
                        array (
                          'description' => '标签键。',
                          'type' => 'string',
                          'example' => 'key',
                        ),
                        'Value' => 
                        array (
                          'description' => '标签值。',
                          'type' => 'string',
                          'example' => 'value',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"1AFAE64E-D1BE-432B-A9****\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"Status\\": 0,\\n    \\"MaxFlowNode\\": 1,\\n    \\"ProjectId\\": 466230,\\n    \\"IsAllowDownload\\": 1,\\n    \\"ProjectMode\\": 2,\\n    \\"GmtModified\\": \\"Dec 3, 2019 9:12:20 PM\\",\\n    \\"ProdStorageQuota\\": \\" 1\\",\\n    \\"ProjectDescription\\": \\"test_describe\\",\\n    \\"DevelopmentType\\": 4,\\n    \\"TablePrivacyMode\\": 1,\\n    \\"DefaultDiResourceGroupIdentifier\\": \\"group_280749521****\\",\\n    \\"SchedulerMaxRetryTimes\\": 3,\\n    \\"ProtectedMode\\": 1,\\n    \\"SchedulerRetryInterval\\": 120000,\\n    \\"Appkey\\": \\"0\\",\\n    \\"DevStorageQuota\\": \\"0\\",\\n    \\"ResidentArea\\": \\"private\\",\\n    \\"IsDefault\\": 1,\\n    \\"Destination\\": 0,\\n    \\"ProjectName\\": \\"test_project\\",\\n    \\"ProjectIdentifier\\": \\"test_project\\",\\n    \\"DisableDevelopment\\": true,\\n    \\"ProjectOwnerBaseId\\": \\"18229311****\\",\\n    \\"BaseProject\\": false,\\n    \\"UseProxyOdpsAccount\\": true,\\n    \\"GmtCreate\\": \\"Oct 10, 2019 3:42:53 PM\\",\\n    \\"TenantId\\": 280749521,\\n    \\"EnvTypes\\": [\\n      \\"[\\\\\\"PROD\\\\\\"]\\"\\n    ],\\n    \\"ResourceManagerResourceGroupId\\": \\"rg-acfmzbn7****\\",\\n    \\"Tags\\": [\\n      {\\n        \\"Key\\": \\"key\\",\\n        \\"Value\\": \\"value\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetProjectResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <Status>0</Status>\\n        <MaxFlowNode>1</MaxFlowNode>\\n        <ProjectId>27</ProjectId>\\n        <IsAllowDownload>1</IsAllowDownload>\\n        <ProjectMode>2</ProjectMode>\\n        <GmtModified>Dec 3, 2019 9:12:20 PM</GmtModified>\\n        <ProdStorageQuota> 1</ProdStorageQuota>\\n        <ProjectDescription>abc</ProjectDescription>\\n        <DevelopmentType>4</DevelopmentType>\\n        <TablePrivacyMode>1</TablePrivacyMode>\\n        <DefaultDiResourceGroupIdentifier>group_280749521****</DefaultDiResourceGroupIdentifier>\\n        <SchedulerMaxRetryTimes>3</SchedulerMaxRetryTimes>\\n        <ProtectedMode>1</ProtectedMode>\\n        <SchedulerRetryInterval>120000</SchedulerRetryInterval>\\n        <Appkey>0</Appkey>\\n        <DevStorageQuota>0</DevStorageQuota>\\n        <ResidentArea>private</ResidentArea>\\n        <IsDefault>1</IsDefault>\\n        <Destination>0</Destination>\\n        <ProjectName>abc</ProjectName>\\n        <ProjectIdentifier>abc</ProjectIdentifier>\\n        <DisableDevelopment>true</DisableDevelopment>\\n        <ProjectOwnerBaseId>18229311****</ProjectOwnerBaseId>\\n        <BaseProject>false</BaseProject>\\n        <UseProxyOdpsAccount>true</UseProxyOdpsAccount>\\n        <GmtCreate>Oct 10, 2019 3:42:53 PM</GmtCreate>\\n        <TenantId>280749521</TenantId>\\n        <EnvTypes>[\\"PROD\\"]</EnvTypes>\\n        <ResourceManagerResourceGroupId>rg-acfmzbn7pti3zfa</ResourceManagerResourceGroupId>\\n        <Tags>\\n            <Key>Env</Key>\\n            <Value>Test</Value>\\n        </Tags>\\n    </Data>\\n</GetProjectResponse>","errorExample":""}]',
      'title' => '查询工作空间详细信息',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'AddProjectMemberToRole' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以通过[ListProjects](~~2780068~~)接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000',
            'minimum' => '0',
            'example' => '27',
          ),
        ),
        1 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '阿里云账号ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，鼠标悬停至顶部菜单栏右侧的用户头像，查看账号ID。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        2 => 
        array (
          'name' => 'RoleCode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间角色的Code。您可以调用[ListProjectRoles](~~2780079~~)获取角色的Code。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'role_project_guest',
          ),
        ),
        3 => 
        array (
          'name' => 'ClientToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '幂等字段，建议使用UUID。用于唯一标识此次调用操作。',
            'type' => 'string',
            'required' => false,
            'example' => '1AFAE64E-D1BE-432B-A9*****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求的ID。',
                'type' => 'string',
                'example' => '1AFAE64E-D1BE-432B-A9****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"1AFAE64E-D1BE-432B-A9****\\"\\n}","errorExample":""},{"type":"xml","example":"<AddProjectMemberToRoleResponse>\\n    <RequestId>1AFAE64E-D1BE-432B-A9****</RequestId>\\n</AddProjectMemberToRoleResponse>","errorExample":""}]',
      'title' => '添加工作空间用户至角色',
      'summary' => '该接口用于添加DataWorks工作空间用户至角色。使用该接口前，您需要先添加目标账号为DataWorks工作空间的成员。',
      'description' => '添加目标账号为DataWorks工作空间的成员，详情请参见[DataWorks工作空间添加成员](~~136941~~)。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateProjectMember' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '100000000',
            'minimum' => '0',
            'example' => '27',
          ),
        ),
        1 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待添加的用户ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        2 => 
        array (
          'name' => 'ClientToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '幂等串，建议使用UUID。',
            'type' => 'string',
            'required' => false,
            'example' => '1AFAE64E-D1BE-432B-A9****',
          ),
        ),
        3 => 
        array (
          'name' => 'RoleCode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '角色code，非必填，当不为空，则用户一并添加到此角色中。',
            'type' => 'string',
            'required' => false,
            'example' => 'role_project_guest',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '1AFAE64E-D1BE-432B-A9****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
          3 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserAlreadyInProject',
            'errorMessage' => 'The user already exists in the project.',
          ),
          4 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in the tenant.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"1AFAE64E-D1BE-432B-A9****\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateProjectMemberResponse>\\n    <RequestId>1AFAE64E-D1BE-432B-A9****</RequestId>\\n</CreateProjectMemberResponse>","errorExample":""}]',
      'title' => '添加一个用户至工作空间',
      'summary' => '该接口用于添加一个用户至DataWorks工作空间。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteProjectMember' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78212',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideZ4P4R1',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '100000000',
            'minimum' => '0',
            'example' => '27',
          ),
        ),
        1 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '1AFAE64E-D1BE-432B-A9****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserAlreadyInProject',
            'errorMessage' => 'The user already exists in the project.',
          ),
          3 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in the tenant.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"1AFAE64E-D1BE-432B-A9****\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteProjectMemberResponse>\\n    <RequestId>1AFAE64E-D1BE-432B-A9****</RequestId>\\n</DeleteProjectMemberResponse>","errorExample":""}]',
      'title' => '从DataWorks工作空间移除用户',
      'summary' => '该接口用于从DataWorks工作空间移除用户。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListProjectRoles' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Dataworks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '1000000',
            'minimum' => '0',
            'example' => '27',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '1AFAE64E-D1BE-432B-A9****',
              ),
              'ProjectRoleList' => 
              array (
                'description' => '工作空间的角色列表。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '角色详情。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'ProjectRoleId' => 
                    array (
                      'description' => '工作空间的角色ID。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '1',
                    ),
                    'ProjectRoleType' => 
                    array (
                      'description' => '工作空间的角色类型。',
                      'type' => 'string',
                      'example' => '0',
                    ),
                    'ProjectRoleName' => 
                    array (
                      'description' => '工作空间的角色名称。',
                      'type' => 'string',
                      'example' => '访客',
                    ),
                    'ProjectRoleCode' => 
                    array (
                      'description' => '工作空间的角色Code。
',
                      'type' => 'string',
                      'example' => 'role_project_guest',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"1AFAE64E-D1BE-432B-A9****\\",\\n  \\"ProjectRoleList\\": [\\n    {\\n      \\"ProjectRoleId\\": 1,\\n      \\"ProjectRoleType\\": \\"0\\",\\n      \\"ProjectRoleName\\": \\"访客\\",\\n      \\"ProjectRoleCode\\": \\"role_project_guest\\"\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<ListProjectRolesResponse>\\n    <RequestId>1AFAE64E-D1BE-432B-A9****</RequestId>\\n    <ProjectRoleList>\\n        <ProjectRoleId>1</ProjectRoleId>\\n        <ProjectRoleType>0</ProjectRoleType>\\n        <ProjectRoleName>访客</ProjectRoleName>\\n        <ProjectRoleCode>role_project_guest</ProjectRoleCode>\\n    </ProjectRoleList>\\n</ListProjectRolesResponse>","errorExample":""}]',
      'title' => '获取工作空间所有角色的列表',
      'summary' => '该接口用于获取工作空间所有角色的列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'RemoveProjectMemberFromRole' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000',
            'minimum' => '0',
            'example' => '27',
          ),
        ),
        1 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户的ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        2 => 
        array (
          'name' => 'RoleCode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的角色Code。可调用接口ListProjectRoles获取项目有哪些角色code列表。
默认预设角色枚举如下：

- role\\_project\\_owner	项目所有者
- role\\_project\\_admin	空间管理员
- role\\_project\\_dev	开发
- role\\_project\\_pe	运维
- role\\_project\\_deploy	部署
- role\\_project\\_guest	访客
- role\\_project\\_security	安全管理员
- role\\_project\\_tester	体验者
- role\\_project\\_erd	模型设计师',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'role_project_guest',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '1AFAE64E-D1BE-432B-A9****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"1AFAE64E-D1BE-432B-A9****\\"\\n}","errorExample":""},{"type":"xml","example":"<RemoveProjectMemberFromRoleResponse>\\n    <RequestId>1AFAE64E-D1BE-432B-A9****</RequestId>\\n</RemoveProjectMemberFromRoleResponse>","errorExample":""}]',
      'title' => '将工作空间内用户从角色中移除',
      'summary' => '该接口用于将DataWorks工作空间内的用户从DataWorks角色中移除。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListProjectMembers' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Dataworks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000',
            'minimum' => '0',
            'example' => '27',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页的页数。默认值为1，最小值为1，最大值为30。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '10000',
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '20',
            'minimum' => '5',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '1AFAE64E-D1BE-432B-A9****',
              ),
              'Data' => 
              array (
                'description' => '查询结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前的页码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页的大小。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '结果的总条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '3',
                  ),
                  'ProjectMemberList' => 
                  array (
                    'description' => '工作空间的成员列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '成员详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '查询状态。取值如下：
 
- 0 ，表示正常（NORMAL）。
- 1，表示禁用（FORBIDDEN）。
- 2，表示已删除（DELETED）。',
                          'type' => 'string',
                          'example' => '0',
                        ),
                        'ProjectMemberId' => 
                        array (
                          'description' => '成员的用户ID。
',
                          'type' => 'string',
                          'example' => '121',
                        ),
                        'Nick' => 
                        array (
                          'description' => '工作空间成员的昵称。',
                          'type' => 'string',
                          'example' => 'zhangsan',
                        ),
                        'ProjectMemberName' => 
                        array (
                          'description' => '成员的名称。',
                          'type' => 'string',
                          'example' => '张三',
                        ),
                        'ProjectMemberType' => 
                        array (
                          'description' => '成员的类型，取值如下：

- 1： 阿里云主账号（USER_ALIYUN）；
- 5：RAM USER子账号（USER_UBACCOUNT）；
- 6：RAM ROLE角色（USER_STS_ROLE）。',
                          'type' => 'string',
                          'example' => '1',
                        ),
                        'ProjectRoleList' => 
                        array (
                          'description' => '成员所拥有的角色列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '返回数据结构。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'ProjectRoleId' => 
                              array (
                                'description' => '角色ID。',
                                'type' => 'integer',
                                'format' => 'int32',
                                'example' => '1',
                              ),
                              'ProjectRoleType' => 
                              array (
                                'description' => '角色的类型。取值如下：

- SYSTEM（0）：系统角色；

- USER_CUSTOM（2）：自定义角色。',
                                'type' => 'string',
                                'example' => '0',
                              ),
                              'ProjectRoleName' => 
                              array (
                                'description' => '角色的名称。
DataWorks为您提供了预设角色，您也可以根据业务需求自定义角色。角色更多详情，请参见[用户、角色与权限概述](~~295463~~)。',
                                'type' => 'string',
                                'example' => '访客',
                              ),
                              'ProjectRoleCode' => 
                              array (
                                'description' => '角色Code。
DataWorks为您提供了预设角色，您也可以根据业务需求自定义角色。角色更多详情，请参见[用户、角色与权限概述](~~295463~~)。',
                                'type' => 'string',
                                'example' => 'role_project_guest',
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"1AFAE64E-D1BE-432B-A9****\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 3,\\n    \\"ProjectMemberList\\": [\\n      {\\n        \\"Status\\": \\"0\\",\\n        \\"ProjectMemberId\\": \\"121\\",\\n        \\"Nick\\": \\"zhangsan\\",\\n        \\"ProjectMemberName\\": \\"张三\\",\\n        \\"ProjectMemberType\\": \\"1\\",\\n        \\"ProjectRoleList\\": [\\n          {\\n            \\"ProjectRoleId\\": 1,\\n            \\"ProjectRoleType\\": \\"0\\",\\n            \\"ProjectRoleName\\": \\"访客\\",\\n            \\"ProjectRoleCode\\": \\"role_project_guest\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListProjectMembersResponse>\\n    <RequestId>1AFAE64E-D1BE-432B-A9****</RequestId>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>3</TotalCount>\\n        <ProjectMemberList>\\n            <Status>0</Status>\\n            <ProjectMemberId>121</ProjectMemberId>\\n            <Nick>zhangsan</Nick>\\n            <ProjectMemberName>张三</ProjectMemberName>\\n            <ProjectMemberType>1</ProjectMemberType>\\n            <ProjectRoleList>\\n                <ProjectRoleId>1</ProjectRoleId>\\n                <ProjectRoleType>0</ProjectRoleType>\\n                <ProjectRoleName>访客</ProjectRoleName>\\n                <ProjectRoleCode>role_project_guest</ProjectRoleCode>\\n            </ProjectRoleList>\\n        </ProjectMemberList>\\n    </Data>\\n</ListProjectMembersResponse>","errorExample":""}]',
      'title' => '查询工作空间成员列表',
      'summary' => '该接口用于查询DataWorks工作空间中已存在成员的列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListProjects' => 
    array (
      'summary' => '该接口用于查询用户所在租户下的DataWorks工作空间列表。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码数。最小值1，最大值100',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '10000000',
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的数据量，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '10000000',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'ResourceManagerResourceGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源组ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'rg-acfmzbn7pt****',
          ),
        ),
        3 => 
        array (
          'name' => 'Tags',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '工作空间绑定的标签信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '标签信息。',
              'type' => 'object',
              'properties' => 
              array (
                'Key' => 
                array (
                  'description' => '标签键。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'key',
                ),
                'Value' => 
                array (
                  'description' => '标签值。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'value',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 20,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '20658801****',
              ),
              'PageResult' => 
              array (
                'description' => '查询结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前的页码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '返回结果的总条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '68',
                  ),
                  'ProjectList' => 
                  array (
                    'description' => 'DataWorks工作空间的结果列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '工作空间详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ProjectStatusCode' => 
                        array (
                          'description' => '工作空间的状态码。

- AVAILABLE：状态取值为0，表示正常。
- DELETED：状态取值为1，表示已删除。
- INITIALIZING：状态取值为2，表示初始化。
- INIT_FAILED：状态取值为3，表示初始化失败。
- FORBIDDEN：状态取值为4，表示手动禁用。
- DELETING：状态取值为5，表示删除中。
- DEL_FAILED：状态取值为6，表示删除失败。
- FROZEN：状态取值为7，表示欠费冻结。
- UPDATING：状态取值为8，表示项目更新（为项目添加并初始化计算引擎）中。
- UPDATE_FAILED：状态取值为9，表示项目更新（为项目添加并初始化计算引擎）失败。',
                          'type' => 'string',
                          'example' => 'AVAILABLE',
                        ),
                        'ProjectStatus' => 
                        array (
                          'description' => '工作空间的状态。
- AVAILABLE：状态取值为0，表示正常。
- DELETED：状态取值为1，表示已删除。
- INITIALIZING：状态取值为2，表示初始化。
- INIT_FAILED：状态取值为3，表示初始化失败。
- FORBIDDEN：状态取值为4，表示手动禁用。
- DELETING：状态取值为5，表示删除中。
- DEL_FAILED：状态取值为6，表示删除失败。
- FROZEN：状态取值为7，表示欠费冻结。
- UPDATING：状态取值为8，表示项目更新（为项目添加并初始化计算引擎）中。
- UPDATE_FAILED：状态取值为9，表示项目更新（为项目添加并初始化计算引擎）失败。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ProjectName' => 
                        array (
                          'description' => '工作空间的显示名称。',
                          'type' => 'string',
                          'example' => 'test_project',
                        ),
                        'ProjectIdentifier' => 
                        array (
                          'description' => '工作空间的名称。',
                          'type' => 'string',
                          'example' => 'test_project',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '466230',
                        ),
                        'ProjectDescription' => 
                        array (
                          'description' => '工作空间的详细描述信息。',
                          'type' => 'string',
                          'example' => 'test_describe',
                        ),
                        'ProjectOwnerBaseId' => 
                        array (
                          'description' => '工作空间所有者的用户ID。',
                          'type' => 'string',
                          'example' => '13969939245****',
                        ),
                        'ResourceManagerResourceGroupId' => 
                        array (
                          'description' => '资源组ID。',
                          'type' => 'string',
                          'example' => 'rg-acfmzbn7****',
                        ),
                        'Tags' => 
                        array (
                          'description' => '工作空间绑定的标签列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '标签信息。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'Key' => 
                              array (
                                'description' => '标签键。',
                                'type' => 'string',
                                'example' => 'key',
                              ),
                              'Value' => 
                              array (
                                'description' => '标签值。',
                                'type' => 'string',
                                'example' => 'value',
                              ),
                            ),
                          ),
                        ),
                        'DisableDevelopment' => 
                        array (
                          'description' => '是否禁用开发角色，取值如下：
-  **false**：开启开发角色。
-  **true**：禁用开发角色。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'UseProxyOdpsAccount' => 
                        array (
                          'description' => '访问MaxCompute引擎是否使用代理账号。
- **false**：不使用。
- **true**：使用。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'TablePrivacyMode' => 
                        array (
                          'description' => 'MaxCompute表的可见性权限，取值如下：
- **0**：租户内用户不可见MaxCompute表。
- **1**：租户内用户可见MaxCompute表。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'IsDefault' => 
                        array (
                          'description' => '是否为默认工作空间，取值如下：
- **1**：是。
- **0**：否。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserAlreadyInProject',
            'errorMessage' => 'The user already exists in the project.',
          ),
          3 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"20658801****\\",\\n  \\"PageResult\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 68,\\n    \\"ProjectList\\": [\\n      {\\n        \\"ProjectStatusCode\\": \\"AVAILABLE\\",\\n        \\"ProjectStatus\\": 0,\\n        \\"ProjectName\\": \\"test_project\\",\\n        \\"ProjectIdentifier\\": \\"test_project\\",\\n        \\"ProjectId\\": 466230,\\n        \\"ProjectDescription\\": \\"test_describe\\",\\n        \\"ProjectOwnerBaseId\\": \\"13969939245****\\",\\n        \\"ResourceManagerResourceGroupId\\": \\"rg-acfmzbn7****\\",\\n        \\"Tags\\": [\\n          {\\n            \\"Key\\": \\"key\\",\\n            \\"Value\\": \\"value\\"\\n          }\\n        ],\\n        \\"DisableDevelopment\\": true,\\n        \\"UseProxyOdpsAccount\\": true,\\n        \\"TablePrivacyMode\\": 1,\\n        \\"IsDefault\\": 1\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListProjectsResponse>\\n    <RequestId>20658801***</RequestId>\\n    <PageResult>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>123</TotalCount>\\n        <ProjectList>\\n            <ProjectStatusCode>AVAILABLE</ProjectStatusCode>\\n            <ProjectStatus>0</ProjectStatus>\\n            <ProjectName>测试空间</ProjectName>\\n            <ProjectIdentifier>test</ProjectIdentifier>\\n            <ProjectId>1212</ProjectId>\\n            <ProjectDescription>测试空间</ProjectDescription>\\n            <ProjectOwnerBaseId>122222</ProjectOwnerBaseId>\\n            <ResourceManagerResourceGroupId>rg-acfmzbn7pti3zfa</ResourceManagerResourceGroupId>\\n            <Tags>\\n                <Key>Env</Key>\\n                <Value>Test</Value>\\n            </Tags>\\n            <DisableDevelopment>true</DisableDevelopment>\\n            <UseProxyOdpsAccount>true</UseProxyOdpsAccount>\\n            <TablePrivacyMode>1</TablePrivacyMode>\\n            <IsDefault>1</IsDefault>\\n        </ProjectList>\\n    </PageResult>\\n</ListProjectsResponse>","errorExample":""}]',
      'title' => '查询工作空间列表',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListProjectIds' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'UserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标阿里云账号ID。

您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，鼠标悬停至顶部菜单栏右侧的用户头像，获取账号ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '139699392458****',
            'maxLength' => 10000000,
            'minLength' => 0,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0b57ff7216278945532771749d****',
              ),
              'ProjectIds' => 
              array (
                'description' => '返回的DataWorks工作空间ID列表。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回的DataWorks工作空间ID。
返回结果为目标阿里云账号所拥有角色权限的DataWorks工作空间的ID列表，此处仅以一个工作空间ID示例。',
                  'type' => 'integer',
                  'format' => 'int64',
                  'example' => '466230',
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0b57ff7216278945532771749d****\\",\\n  \\"ProjectIds\\": [\\n    466230\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0b57ff7216278945532771749d****</RequestId>\\n<ProjectIds>75777</ProjectIds>","errorExample":""}]',
      'title' => '查询指定账号下DataWorks工作空间ID列表',
      'summary' => '该接口用于查询指定阿里云账号（包括阿里云主账号或RAM用户）在目标地域下拥有角色权限的DataWorks工作空间的ID列表。',
      'description' => '您的阿里云账号在DataWorks工作空间中可以拥有开发、运维、空间管理员等不同的角色权限。DataWorks工作空间的角色权限介绍，详情请参见[DataWorks角色管理](~~136941~~)。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateProject' => 
    array (
      'summary' => '该接口用于创建一个DataWorks工作空间。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '158574',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideYNK30F',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClientToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '幂等参数，该参数可为空。',
            'type' => 'string',
            'required' => false,
            'example' => 'ABFUOEUOTRTRJKE',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '工作空间的显示名称。',
            'type' => 'string',
            'required' => true,
            'example' => 'test_project',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectDescription',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '工作空间的详细描述信息。',
            'type' => 'string',
            'required' => true,
            'example' => 'test_describe',
          ),
        ),
        3 => 
        array (
          'name' => 'DisableDevelopment',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否禁用开发角色，取值如下：
- **false**：默认值，开启开发角色。
- **true**：禁用开发角色。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        4 => 
        array (
          'name' => 'IsAllowDownload',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否允许下载ide上查询的结果，取值如下：
- **1**：默认值，允许下载。
- **0**：不允许下载。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        5 => 
        array (
          'name' => 'ProjectMode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '工作空间的模式，模式区别详情参见[必读：简单模式和标准模式的区别](~~85772~~)。

取值如下：
- **2**：默认值，表示简单工作空间模式。
- **3**：表示标准工作空间模式。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '3',
          ),
        ),
        6 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'query',
          'allowEmptyValue' => false,
          'schema' => 
          array (
            'description' => '工作空间的名称，只能包含大小写字母、数字和下划线，且首字母必须是字母或数字。',
            'type' => 'string',
            'required' => true,
            'example' => 'test_project',
          ),
        ),
        7 => 
        array (
          'name' => 'ResourceManagerResourceGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源组ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'rg-acfmzbn7pti3****',
          ),
        ),
        8 => 
        array (
          'name' => 'Tags',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '工作空间绑定的标签列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '标签信息。',
              'type' => 'object',
              'properties' => 
              array (
                'Key' => 
                array (
                  'description' => '标签键。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'key',
                ),
                'Value' => 
                array (
                  'description' => '标签值。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'value',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 21,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '1AFAE64E-D1BE-432B-A9****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功，取值如下：
- **true**：请求成功。
- **false**：请求失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '创建成功的DataWorks工作空间的ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '466230',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"1AFAE64E-D1BE-432B-A9****\\",\\n  \\"Success\\": true,\\n  \\"Data\\": 466230\\n}","errorExample":""},{"type":"xml","example":"<CreateProjectResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>1AFAE64E-D1BE-432B-A9****</RequestId>\\n    <Success>true</Success>\\n    <Data>25</Data>\\n</CreateProjectResponse>","errorExample":""}]',
      'title' => '创建DataWorks工作空间',
    ),
    'ChangeResourceManagerResourceGroup' => 
    array (
      'summary' => '该接口用于修改资源归属资源组。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ResourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源的类型，取值如下：
- project，工作空间。如果您需要修改的是DataWorks版本所归属的资源组信息时，请选择project。
- tenantresourcegroup，独享资源组。如果您需要修改的是DataWorks独享资源组所归属的资源组信息时，请选择tenantresourcegroup。',
            'type' => 'string',
            'required' => true,
            'example' => 'project',
          ),
        ),
        1 => 
        array (
          'name' => 'ResourceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源类型的ID标识符，取值如下：
- 当ResourceType=project时，则ResourceId可以理解为通过[ListProjects](~~2780068~~)接口获取工作空间的名称（ProjectIdentifier）。
- 当ResourceType=tenantresourcegroup时，则ResourceId可以理解为通过[ListResourceGroups](~~2780075~~)接口获取独享资源组的标识（Identifier）, 仅限ResourceGroupType=7、8、9的类型。',
            'type' => 'string',
            'required' => true,
            'example' => 'test_project',
          ),
        ),
        2 => 
        array (
          'name' => 'ResourceManagerResourceGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标资源组ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'rg-bp67acfmxazb4p****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'Data' => 
              array (
                'description' => '变更资源组是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。',
                'type' => 'string',
                'example' => '1AFAE64E-D1BE-432B-A9****',
              ),
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"1AFAE64E-D1BE-432B-A9****\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<ChangeResourceManagerResourceGroupResponse>\\n    <RequestId>1AFAE64E-D1BE-432B-A9****</RequestId>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <Success>true</Success>\\n</ChangeResourceManagerResourceGroupResponse>","errorExample":""}]',
      'title' => '修改资源归属资源组',
    ),
    'ListMeasureData' => 
    array (
      'summary' => '该接口用于查询用户所在租户下最近30天电话告警、短信告警计量数据。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '215284',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideD3SWSQ',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DomainCode',
          'in' => 'query',
          'allowEmptyValue' => false,
          'schema' => 
          array (
            'title' => '计量项，取值如下：
- DideAlarmPhone：电话告警
- DideAlarmSms：短信告警',
            'description' => '计量项，取值如下：
- DideAlarmPhone: 电话告警
- DideAlarmSms: 短信告警',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DideAlarmPhone',
          ),
        ),
        1 => 
        array (
          'name' => 'ComponentCode',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '计量组件,取值如下:
- Count：DideAlarmPhone电话告警条数、DideAlarmSms短信告警条数。',
            'description' => '计量组件,取值如下:
- Count: DideAlarmPhone电话告警条数、DideAlarmSms短信告警条数',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'Count',
          ),
        ),
        2 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '计量周期开始时间戳(毫秒),计量周期是按照天统计，EndTime - StartTime仅能查询最近30天的数据。',
            'description' => '计量周期开始时间戳(毫秒),计量周期是按照天统计, EndTime - StartTime 仅能查询最近30天的数据。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1717344000000',
          ),
        ),
        3 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '计量周期截止时间戳(毫秒),计量周期是按照天统计，EndTime - StartTime仅能查询最近30天的数据。',
            'description' => '计量周期截止时间戳(毫秒),计量周期是按照天统计, EndTime - StartTime 仅能查询最近30天的数据。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1717430400000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => '返回结果。',
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => '请求ID。',
                'description' => '请求 ID。',
                'type' => 'string',
                'example' => '1AFAE64E-D1BE-432B-A9****',
              ),
              'MeasureDatas' => 
              array (
                'title' => '查询计量结果列表。',
                'description' => '查询计量结果。',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'DomainCode' => 
                    array (
                      'title' => '计量项。',
                      'description' => '计量项。',
                      'type' => 'string',
                      'example' => 'DideAlarmPhone',
                    ),
                    'ComponentCode' => 
                    array (
                      'title' => '计量组件。',
                      'description' => '计量组件。',
                      'type' => 'string',
                      'example' => 'Count',
                    ),
                    'StartTime' => 
                    array (
                      'title' => '计量周期开始时间戳(毫秒)。',
                      'description' => '计量周期开始时间戳(毫秒)。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1717344000000',
                    ),
                    'EndTime' => 
                    array (
                      'title' => '计量周期结束时间戳(毫秒)。',
                      'description' => '计量周期结束时间戳(毫秒)。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1717430400000',
                    ),
                    'Usage' => 
                    array (
                      'title' => '计量周期内使用总量。
',
                      'description' => '计量周期内使用总量。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '10',
                    ),
                  ),
                ),
              ),
              'Success' => 
              array (
                'title' => '请求是否成功，取值如下：
- true：请求成功。
- false：请求失败。',
                'description' => '请求是否成功，取值如下：
- true：请求成功。
- false：请求失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'title' => '请求错误码。',
                'description' => '请求错误码。',
                'type' => 'string',
                'example' => '100001001',
              ),
              'ErrorMessage' => 
              array (
                'title' => '请求报错信息。',
                'description' => '请求报错信息。',
                'type' => 'string',
                'example' => 'The user is not in tenant.',
              ),
              'HttpStatusCode' => 
              array (
                'title' => '请求返回码。',
                'description' => '请求返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"RequestId\\": \\"1AFAE64E-D1BE-432B-A9****\\",\\n  \\"MeasureDatas\\": [\\n    {\\n      \\"DomainCode\\": \\"DideAlarmPhone\\",\\n      \\"ComponentCode\\": \\"Count\\",\\n      \\"StartTime\\": 1717344000000,\\n      \\"EndTime\\": 1717430400000,\\n      \\"Usage\\": 10\\n    }\\n  ],\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"100001001\\",\\n  \\"ErrorMessage\\": \\"The user is not in tenant.\\",\\n  \\"HttpStatusCode\\": 200\\n}","type":"json"}]',
      'title' => '查询计量数据',
    ),
    'GetMetaDBInfo' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78259',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'AppGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '引擎ID，格式为`引擎类型.引擎名称`。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'odps.some_engine_name',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的clusterId。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        2 => 
        array (
          'name' => 'DatabaseName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的数据库。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        3 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，包括odps和emr。',
            'type' => 'string',
            'required' => false,
            'example' => 'emr',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1411515937****',
              ),
              'Data' => 
              array (
                'description' => '基本元数据信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Type' => 
                  array (
                    'description' => '数据库类型。',
                    'type' => 'string',
                    'example' => 'hive',
                  ),
                  'Comment' => 
                  array (
                    'description' => '备注。',
                    'type' => 'string',
                    'example' => '备注',
                  ),
                  'CreateTime' => 
                  array (
                    'description' => '创建引擎的时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1541576644000',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '工作空间ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '22',
                  ),
                  'ProjectName' => 
                  array (
                    'description' => '工作空间的名称。',
                    'type' => 'string',
                    'example' => 'test',
                  ),
                  'AppGuid' => 
                  array (
                    'description' => '引擎ID，格式为`引擎类型.引擎名称`。',
                    'type' => 'string',
                    'example' => 'odps.engine_name',
                  ),
                  'OwnerName' => 
                  array (
                    'description' => '工作空间Owner的名称。',
                    'type' => 'string',
                    'example' => 'my_name',
                  ),
                  'OwnerId' => 
                  array (
                    'description' => '工作空间Owner的云账号ID。',
                    'type' => 'string',
                    'example' => 'userId',
                  ),
                  'EnvType' => 
                  array (
                    'description' => '环境类型：0表示非生产表，1表示生产表。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'ProjectNameCn' => 
                  array (
                    'description' => '工作空间的显示名称。',
                    'type' => 'string',
                    'example' => '测试项目',
                  ),
                  'Endpoint' => 
                  array (
                    'description' => '服务地址Endpoint。',
                    'type' => 'string',
                    'example' => 'http://service.odpsstg.aliyun-inc.com/',
                  ),
                  'ClusterBizId' => 
                  array (
                    'description' => 'emr集群id。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'Name' => 
                  array (
                    'description' => '数据库名称。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'Location' => 
                  array (
                    'description' => 'emr数据库对应数据存储地址。',
                    'type' => 'string',
                    'example' => 'hdfs://',
                  ),
                  'TenantId' => 
                  array (
                    'description' => '租户ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '233',
                  ),
                  'ModifyTime' => 
                  array (
                    'description' => '修改引擎的时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1541576644000',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.AppNotExist',
            'errorMessage' => 'The MaxCompute project does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          6 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          7 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The data does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0bc1411515937****\\",\\n  \\"Data\\": {\\n    \\"Type\\": \\"hive\\",\\n    \\"Comment\\": \\"备注\\",\\n    \\"CreateTime\\": 1541576644000,\\n    \\"ProjectId\\": 22,\\n    \\"ProjectName\\": \\"test\\",\\n    \\"AppGuid\\": \\"odps.engine_name\\",\\n    \\"OwnerName\\": \\"my_name\\",\\n    \\"OwnerId\\": \\"userId\\",\\n    \\"EnvType\\": 1,\\n    \\"ProjectNameCn\\": \\"测试项目\\",\\n    \\"Endpoint\\": \\"http://service.odpsstg.aliyun-inc.com/\\",\\n    \\"ClusterBizId\\": \\"abc\\",\\n    \\"Name\\": \\"abc\\",\\n    \\"Location\\": \\"hdfs://\\",\\n    \\"TenantId\\": 233,\\n    \\"ModifyTime\\": 1541576644000\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMetaDBInfoResponse>\\n    <RequestId>0bc1411515937****</RequestId>\\n    <Data>\\n        <Type>hive</Type>\\n        <Comment>备注</Comment>\\n        <CreateTime>1541576644000</CreateTime>\\n        <ProjectId>22</ProjectId>\\n        <ProjectName>test</ProjectName>\\n        <AppGuid>odps.engine_name</AppGuid>\\n        <OwnerName>323</OwnerName>\\n        <OwnerId>23</OwnerId>\\n        <EnvType>1</EnvType>\\n        <ProjectNameCn>测试项目</ProjectNameCn>\\n        <Endpoint>http://service.odpsstg.aliyun-inc.com/</Endpoint>\\n        <ClusterBizId>abc</ClusterBizId>\\n        <Name>abc</Name>\\n        <Location>hdfs://</Location>\\n        <TenantId>233</TenantId>\\n        <ModifyTime>1541576644000</ModifyTime>\\n    </Data>\\n</GetMetaDBInfoResponse>","errorExample":""}]',
      'title' => '获取引擎实例的基本元数据信息',
      'summary' => '该接口用于获取引擎实例的基本元数据信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaDBInfo接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'GetMetaDBTableList' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78260',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大为100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'AppGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '项目的唯一标识，格式为`odps.{projectName}`。仅当数据类型为odps时，需要配置该参数。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps.testProjectName',
          ),
        ),
        3 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的ID，仅当数据类型为emr时，需要配置该参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        4 => 
        array (
          'name' => 'DatabaseName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库的名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        5 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，目前仅支持odps和emr。',
            'type' => 'string',
            'required' => false,
            'example' => 'odps',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'Data' => 
              array (
                'description' => '引擎实例下的表信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '请求的数据页数，用于翻页。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大为100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '计算引擎的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '20',
                  ),
                  'TableEntityList' => 
                  array (
                    'description' => '引擎实例下的表列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回的表信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TableName' => 
                        array (
                          'description' => '表的名称。',
                          'type' => 'string',
                          'example' => 'tname',
                        ),
                        'TableGuid' => 
                        array (
                          'description' => '表的唯一标识。',
                          'type' => 'string',
                          'example' => 'odps.engine_name.tname',
                        ),
                        'DatabaseName' => 
                        array (
                          'description' => '数据库的名称。',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.AppNotExist',
            'errorMessage' => 'The MaxCompute project does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
          5 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          6 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 20,\\n    \\"TableEntityList\\": [\\n      {\\n        \\"TableName\\": \\"tname\\",\\n        \\"TableGuid\\": \\"odps.engine_name.tname\\",\\n        \\"DatabaseName\\": \\"abc\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMetaDBTableListResponse>\\n    <RequestId>0bc1ec92159376</RequestId>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>20</TotalCount>\\n        <TableEntityList>\\n            <TableName>tname</TableName>\\n            <TableGuid>odps.engine_name.tname</TableGuid>\\n            <DatabaseName>abc</DatabaseName>\\n        </TableEntityList>\\n    </Data>\\n</GetMetaDBTableListResponse>","errorExample":""}]',
      'title' => '获取引擎实例下的表',
      'summary' => '该接口用于获取引擎实例中的表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaDBTableList接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。
',
    ),
    'CheckMetaTable' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78173',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideYZD64M',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        2 => 
        array (
          'name' => 'DatabaseName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR数据库的名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        3 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR表名。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        4 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，odps或者emr。',
            'type' => 'string',
            'required' => false,
            'example' => 'emr',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'Data' => 
              array (
                'description' => '表是否存在。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0bc1ec92159376\\"\\n}","errorExample":""},{"type":"xml","example":"<CheckMetaTableResponse>\\n    <Data>true</Data>\\n    <RequestId>0bc1ec92159376</RequestId>\\n</CheckMetaTableResponse>","errorExample":""}]',
      'title' => '检查表是否存在',
      'summary' => '该接口用于检查表是否存在。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' CheckMetaTable接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'CheckMetaPartition' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78172',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideYZD64M',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'MaxCompute表的唯一标识。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
        1 => 
        array (
          'name' => 'Partition',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'MaxCompute表分区的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ds=202005',
          ),
        ),
        2 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '该参数已废弃使用。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        3 => 
        array (
          'name' => 'DatabaseName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库的名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        4 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表名。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        5 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，目前仅支持odps。',
            'type' => 'string',
            'required' => false,
            'example' => 'odps',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => 'MaxCompute表的分区是否存在。
- true：存在。
- false：不存在。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          5 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<CheckMetaPartitionResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>0bc1ec92159376</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</CheckMetaPartitionResponse>","errorExample":""}]',
      'title' => '检查分区是否存在',
      'summary' => '该接口用于检查分区是否存在。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => 'CheckMetaPartition接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'SearchMetaTables' => 
    array (
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78351',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9OA4H',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询页码。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'AppGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表所在工作空间的标识。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'odps.engine_name',
          ),
        ),
        3 => 
        array (
          'name' => 'Keyword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '关键字采用分词匹配算法搜索表名，如果没有匹配的字段则返回空值。默认按照下划线分词搜索。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'test',
          ),
        ),
        4 => 
        array (
          'name' => 'EntityType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的类型：0表示table，1表示view。如果不填，则默认搜索全部类型。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
          ),
        ),
        5 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的ID，仅当数据类型为EMR时，需要配置该参数。

您可以登录[EMR的控制台](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou)，获取集群ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        6 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，包括ODPS和emr。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'emr',
          ),
        ),
        7 => 
        array (
          'name' => 'Schema',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表Schema信息。在ODPS，用户启动了三层模型需要填写Schema信息',
            'type' => 'string',
            'required' => false,
            'example' => 'default',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Data' => 
              array (
                'description' => '搜索结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '分页查询页码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '分页查询每页的大小。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '表的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '100',
                  ),
                  'DataEntityList' => 
                  array (
                    'description' => '查询返回的表列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '表详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TableName' => 
                        array (
                          'description' => '表的名称。',
                          'type' => 'string',
                          'example' => 'test_name',
                        ),
                        'DatabaseName' => 
                        array (
                          'description' => '数据库名称。',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                        'EntityType' => 
                        array (
                          'description' => '表的类型：

- 0表示table。
- 1表示view。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ProjectName' => 
                        array (
                          'description' => '工作空间的名称。',
                          'type' => 'string',
                          'example' => 'test',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '323',
                        ),
                        'TableGuid' => 
                        array (
                          'description' => '表的唯一标识。',
                          'type' => 'string',
                          'example' => 'odps.engine_name.test_name',
                        ),
                        'OwnerId' => 
                        array (
                          'description' => '工作空间Owner的云账号ID。',
                          'type' => 'string',
                          'example' => '123',
                        ),
                        'ClusterId' => 
                        array (
                          'description' => 'EMR集群ID。',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                        'EnvType' => 
                        array (
                          'description' => '环境类型：
- 1表示生产环境。
- 0表示开发环境。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '租户ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '12345',
                        ),
                        'Schema' => 
                        array (
                          'description' => '表Schema信息。在ODPS，用户启动了三层模型需要填写Schema信息',
                          'type' => 'string',
                          'example' => 'default',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
          6 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          7 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ResourceNotAuthorized.Api',
            'errorMessage' => 'You are not authorized to access the resources.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          2 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"RequestId\\": \\"0bc1ec92159376****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"DataEntityList\\": [\\n      {\\n        \\"TableName\\": \\"test_name\\",\\n        \\"DatabaseName\\": \\"abc\\",\\n        \\"EntityType\\": 0,\\n        \\"ProjectName\\": \\"test\\",\\n        \\"ProjectId\\": 323,\\n        \\"TableGuid\\": \\"odps.engine_name.test_name\\",\\n        \\"OwnerId\\": \\"123\\",\\n        \\"ClusterId\\": \\"abc\\",\\n        \\"EnvType\\": 1,\\n        \\"TenantId\\": 12345,\\n        \\"Schema\\": \\"default\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<SearchMetaTablesResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <RequestId>0bc1ec92159376****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <DataEntityList>\\n            <TableName>test_name</TableName>\\n            <DatabaseName>abc</DatabaseName>\\n            <EntityType>0</EntityType>\\n            <ProjectName>test</ProjectName>\\n            <ProjectId>323</ProjectId>\\n            <TableGuid>odps.engine_name.test_name</TableGuid>\\n            <OwnerId>123</OwnerId>\\n            <ClusterId>abc</ClusterId>\\n            <EnvType>1</EnvType>\\n            <TenantId>12345</TenantId>\\n            <Schema>default</Schema>\\n        </DataEntityList>\\n    </Data>\\n</SearchMetaTablesResponse>","errorExample":""}]',
      'title' => '根据条件搜索表',
      'summary' => '该接口用于根据条件搜索表。',
      'description' => '仅支持搜索MaxCompute和EMR两种类型的引擎表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' SearchMetaTables接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'GetMetaTableBasicInfo' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78261',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'MaxCompute表的唯一标识。格式为odps.projectName.tableName。

> EMR场景下，该参数非必选。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的ID，当DataSourceType（数据类型）参数配置为EMR时，当前参数必配。

您可以登录[EMR的控制台](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou)，获取集群ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        2 => 
        array (
          'name' => 'DatabaseName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库的名称。仅当数据类型为EMR时，需要配置该参数。

您可以调用[ListMetaDB](~~2780105~~)接口获取。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        3 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR的表名称。仅当数据类型为EMR时，需要配置该参数。

您可以通过调用[GetMetaDBTableList](~~2780086~~)接口，获取表名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        4 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，包括odps和emr。',
            'type' => 'string',
            'required' => false,
            'example' => 'emr',
          ),
        ),
        5 => 
        array (
          'name' => 'Extension',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否包含扩展字段。
扩展字段包含读取次数、收藏次数、浏览次数等。
仅当数据类型为ODPS时，该参数生效。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '请求返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1411515937',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'TableName' => 
                  array (
                    'description' => '表的名称。',
                    'type' => 'string',
                    'example' => 'table_name',
                  ),
                  'FavoriteCount' => 
                  array (
                    'description' => '表的收藏次数。仅当Extension参数取值为true时才会返回该参数，并且该参数仅对odps数据类型生效。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '6',
                  ),
                  'Comment' => 
                  array (
                    'description' => '表的描述。',
                    'type' => 'string',
                    'example' => 'test table',
                  ),
                  'ColumnCount' => 
                  array (
                    'description' => '字段的个数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '3',
                  ),
                  'CreateTime' => 
                  array (
                    'description' => '创建表的时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1589870294000',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '232',
                  ),
                  'OwnerId' => 
                  array (
                    'description' => '表所有者的ID。',
                    'type' => 'string',
                    'example' => '123',
                  ),
                  'EnvType' => 
                  array (
                    'description' => '环境类型，取值如下：
- 0表示开发表。
- 1表示生产表。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'DatabaseName' => 
                  array (
                    'description' => '数据库的名称。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'IsVisible' => 
                  array (
                    'description' => '表的可见性：
- 0表示目标表对工作空间成员可见。
- 1表示目标表对租户内成员可见。
- 2表示目标表对租户间成员均可见。
- 3表示目标表仅对责任人可见。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'TableGuid' => 
                  array (
                    'description' => '表的唯一标识。',
                    'type' => 'string',
                    'example' => 'odps.engine_name.table_name',
                  ),
                  'ReadCount' => 
                  array (
                    'description' => '表的读取次数。仅当Extension参数取值为true时才会返回该参数，并且该参数仅对odps数据类型生效。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '3',
                  ),
                  'ClusterId' => 
                  array (
                    'description' => 'EMR集群的ID。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'IsPartitionTable' => 
                  array (
                    'description' => '是否为分区表，取值如下：
- true：是分区表。
- false：不是分区表。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'IsView' => 
                  array (
                    'description' => '是否为视图，取值如下：
- true：是视图。
- false：不是视图。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'LifeCycle' => 
                  array (
                    'description' => '表的生命周期。单位为天。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '5',
                  ),
                  'ProjectName' => 
                  array (
                    'description' => '工作空间的名称。',
                    'type' => 'string',
                    'example' => 'test',
                  ),
                  'ViewCount' => 
                  array (
                    'description' => '表的浏览次数。仅当Extension参数取值为true时才会返回该参数，并且该参数仅对odps数据类型生效。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '2',
                  ),
                  'LastAccessTime' => 
                  array (
                    'description' => '最近一次访问表的时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1589870294000',
                  ),
                  'DataSize' => 
                  array (
                    'description' => '表占用的存储空间。单位为Byte。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'LastModifyTime' => 
                  array (
                    'description' => '最近一次更新表的时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1589870294000',
                  ),
                  'LastDdlTime' => 
                  array (
                    'description' => '最近一次变更表结构的时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1589870294000',
                  ),
                  'PartitionKeys' => 
                  array (
                    'description' => 'Hive分区。',
                    'type' => 'string',
                    'example' => 'ab',
                  ),
                  'Location' => 
                  array (
                    'description' => 'Hive数据库的存储地址。',
                    'type' => 'string',
                    'example' => 'hdfs://',
                  ),
                  'Caption' => 
                  array (
                    'description' => '表的中文名称。',
                    'type' => 'string',
                    'example' => '中文名',
                  ),
                  'TenantId' => 
                  array (
                    'description' => '租户ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '12345',
                  ),
                  'Schema' => 
                  array (
                    'description' => '表Schema信息。在ODPS，用户启动了三层模型需要填写Schema信息',
                    'type' => 'string',
                    'example' => 'default',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
          6 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          7 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0bc1411515937\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"TableName\\": \\"table_name\\",\\n    \\"FavoriteCount\\": 6,\\n    \\"Comment\\": \\"test table\\",\\n    \\"ColumnCount\\": 3,\\n    \\"CreateTime\\": 1589870294000,\\n    \\"ProjectId\\": 232,\\n    \\"OwnerId\\": \\"123\\",\\n    \\"EnvType\\": 1,\\n    \\"DatabaseName\\": \\"abc\\",\\n    \\"IsVisible\\": 1,\\n    \\"TableGuid\\": \\"odps.engine_name.table_name\\",\\n    \\"ReadCount\\": 3,\\n    \\"ClusterId\\": \\"abc\\",\\n    \\"IsPartitionTable\\": true,\\n    \\"IsView\\": false,\\n    \\"LifeCycle\\": 5,\\n    \\"ProjectName\\": \\"test\\",\\n    \\"ViewCount\\": 2,\\n    \\"LastAccessTime\\": 1589870294000,\\n    \\"DataSize\\": 10,\\n    \\"LastModifyTime\\": 1589870294000,\\n    \\"LastDdlTime\\": 1589870294000,\\n    \\"PartitionKeys\\": \\"ab\\",\\n    \\"Location\\": \\"hdfs://\\",\\n    \\"Caption\\": \\"中文名\\",\\n    \\"TenantId\\": 12345,\\n    \\"Schema\\": \\"default\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMetaTableBasicInfoResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0bc1411515937</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <TableName>table_name</TableName>\\n        <FavoriteCount>6</FavoriteCount>\\n        <Comment>test table</Comment>\\n        <ColumnCount>3</ColumnCount>\\n        <CreateTime>1589870294000</CreateTime>\\n        <ProjectId>232</ProjectId>\\n        <OwnerId>123</OwnerId>\\n        <EnvType>1</EnvType>\\n        <DatabaseName>abc</DatabaseName>\\n        <IsVisible>1</IsVisible>\\n        <TableGuid>odps.engine_name.table_name</TableGuid>\\n        <ReadCount>3</ReadCount>\\n        <ClusterId>abc</ClusterId>\\n        <IsPartitionTable>true</IsPartitionTable>\\n        <IsView>false</IsView>\\n        <LifeCycle>5</LifeCycle>\\n        <ProjectName>test</ProjectName>\\n        <ViewCount>2</ViewCount>\\n        <LastAccessTime>1589870294000</LastAccessTime>\\n        <DataSize>10</DataSize>\\n        <LastModifyTime>1589870294000</LastModifyTime>\\n        <LastDdlTime>1589870294000</LastDdlTime>\\n        <PartitionKeys>ab</PartitionKeys>\\n        <Location>hdfs://</Location>\\n        <Caption>中文名</Caption>\\n        <TenantId>12345</TenantId>\\n        <Schema>default</Schema>\\n    </Data>\\n</GetMetaTableBasicInfoResponse>","errorExample":""}]',
      'title' => '获取表的基础信息',
      'summary' => '该接口用于获取表的基础信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaTableBasicInfo接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'GetMetaTableColumn' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78263',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识。您可以通过调用[GetMetaDBTableList](~~2780086~~)，获取表的唯一标识。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNum',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '请求获取的数据页码数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的ID，您可以登录EMR管理控制台，获取集群ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'C-010A704DA760****',
          ),
        ),
        4 => 
        array (
          'name' => 'DatabaseName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR的数据库名称。您可以通过调用[ListMetaDB](~~2780105~~)接口，获取数据库名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        5 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR的表名称。您可以通过调用[GetMetaDBTableList](~~2780086~~)接口，获取表名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        6 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，当前仅支持取值为emr。',
            'type' => 'string',
            'required' => false,
            'example' => 'emr',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNum' => 
                  array (
                    'description' => '请求获取的数据页码数，用于翻页。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '字段的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '100',
                  ),
                  'ColumnList' => 
                  array (
                    'description' => '字段的信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回结构。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ColumnGuid' => 
                        array (
                          'description' => '字段的唯一标识。',
                          'type' => 'string',
                          'example' => 'odps.engine_name.table_name.name',
                        ),
                        'ColumnName' => 
                        array (
                          'description' => '字段的名称。',
                          'type' => 'string',
                          'example' => 'name',
                        ),
                        'IsPartitionColumn' => 
                        array (
                          'description' => '字段是否为分区字段，取值如下：
- true，是分区字段。
- false，不是分区字段。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Comment' => 
                        array (
                          'description' => '字段的备注。',
                          'type' => 'string',
                          'example' => 'comment ',
                        ),
                        'ColumnType' => 
                        array (
                          'description' => '字段的类型。',
                          'type' => 'string',
                          'example' => 'string',
                        ),
                        'IsPrimaryKey' => 
                        array (
                          'description' => '字段是否为主键，取值如下：
- true，是主键。
- false，不是主键。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Position' => 
                        array (
                          'description' => '字段的排序。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'Caption' => 
                        array (
                          'description' => '字段的描述。',
                          'type' => 'string',
                          'example' => 'data column',
                        ),
                        'IsForeignKey' => 
                        array (
                          'description' => '字段是否为外键，取值如下：
- true，是外键。
- false，不是外键。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'RelationCount' => 
                        array (
                          'description' => '字段热度。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '2',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.GuidFormat',
            'errorMessage' => 'The GUID format is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
          6 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          7 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"PageNum\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"ColumnList\\": [\\n      {\\n        \\"ColumnGuid\\": \\"odps.engine_name.table_name.name\\",\\n        \\"ColumnName\\": \\"name\\",\\n        \\"IsPartitionColumn\\": false,\\n        \\"Comment\\": \\"comment \\",\\n        \\"ColumnType\\": \\"string\\",\\n        \\"IsPrimaryKey\\": false,\\n        \\"Position\\": 1,\\n        \\"Caption\\": \\"data column\\",\\n        \\"IsForeignKey\\": true,\\n        \\"RelationCount\\": 2\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMetaTableColumnResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0bc1ec92159376</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <PageNum>1</PageNum>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <ColumnList>\\n            <ColumnGuid>odps.engine_name.table_name.name</ColumnGuid>\\n            <ColumnName>name</ColumnName>\\n            <IsPartitionColumn>false</IsPartitionColumn>\\n            <Comment>comment </Comment>\\n            <ColumnType>string</ColumnType>\\n            <IsPrimaryKey>false</IsPrimaryKey>\\n            <Position>1</Position>\\n            <Caption>data column</Caption>\\n            <IsForeignKey>true</IsForeignKey>\\n            <RelationCount>2</RelationCount>\\n        </ColumnList>\\n    </Data>\\n</GetMetaTableColumnResponse>","errorExample":""}]',
      'title' => '获取表的字段信息',
      'summary' => '该接口用于获取表的字段信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaTableColumn接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'GetMetaTablePartition' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78269',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
        3 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的ID，仅当数据类型为EMR时，需要配置该参数。

您可以登录[EMR的控制台](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou)，获取集群ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        4 => 
        array (
          'name' => 'DatabaseName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库的名称。仅当数据类型为EMR时，需要配置该参数。

您可以调用[ListMetaDB](~~2780105~~)接口获取。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        5 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR的表名称。仅当数据类型为EMR时，需要配置该参数。

您可以通过调用[GetMetaDBTableList](~~2780086~~)接口，获取表名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        6 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，支持ODPS或者EMR。',
            'type' => 'string',
            'required' => false,
            'example' => 'emr',
          ),
        ),
        7 => 
        array (
          'name' => 'SortCriterion',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '表分区的排序逻辑。',
            'type' => 'object',
            'properties' => 
            array (
              'SortField' => 
              array (
                'description' => '表分区的排序字段。您可通过name、modify_time排序。
默认按照表分区的创建时间排序。',
                'type' => 'string',
                'required' => false,
                'example' => 'name',
              ),
              'Order' => 
              array (
                'description' => '表分区的排序顺序，支持使用asc、desc方式排序。默认使用desc。',
                'type' => 'string',
                'required' => false,
                'example' => 'desc',
              ),
            ),
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回的数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '请求的数据页数，用于翻页。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '分区的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '100',
                  ),
                  'DataEntityList' => 
                  array (
                    'description' => '实例列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '数据的结构。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'PartitionPath' => 
                        array (
                          'description' => '分区的目录。',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                        'DataSize' => 
                        array (
                          'description' => '分区的大小，单位为Byte。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '19',
                        ),
                        'PartitionName' => 
                        array (
                          'description' => '分区的名称。',
                          'type' => 'string',
                          'example' => 'pt=20170614',
                        ),
                        'Comment' => 
                        array (
                          'description' => '备注信息。',
                          'type' => 'string',
                          'example' => '备注',
                        ),
                        'ModifiedTime' => 
                        array (
                          'description' => '修改分区的时间，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590032868000',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '创建分区的时间，单位为毫秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590032868000',
                        ),
                        'RecordCount' => 
                        array (
                          'description' => '分区的数据量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '233',
                        ),
                        'PartitionType' => 
                        array (
                          'description' => '分区的类型。',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                        'PartitionGuid' => 
                        array (
                          'description' => '分区的唯一标识。',
                          'type' => 'string',
                          'example' => 'odps.engine_name.table_name.pt=20170614',
                        ),
                        'PartitionLocation' => 
                        array (
                          'description' => 'Hive分区的地址。',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                        'TableGuid' => 
                        array (
                          'description' => '表的唯一标识。',
                          'type' => 'string',
                          'example' => 'odps.engine_name.table_name',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
          5 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"DataEntityList\\": [\\n      {\\n        \\"PartitionPath\\": \\"abc\\",\\n        \\"DataSize\\": 19,\\n        \\"PartitionName\\": \\"pt=20170614\\",\\n        \\"Comment\\": \\"备注\\",\\n        \\"ModifiedTime\\": 1590032868000,\\n        \\"CreateTime\\": 1590032868000,\\n        \\"RecordCount\\": 233,\\n        \\"PartitionType\\": \\"abc\\",\\n        \\"PartitionGuid\\": \\"odps.engine_name.table_name.pt=20170614\\",\\n        \\"PartitionLocation\\": \\"abc\\",\\n        \\"TableGuid\\": \\"odps.engine_name.table_name\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMetaTablePartitionResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0bc1ec92159376</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <DataEntityList>\\n            <PartitionPath>abc</PartitionPath>\\n            <DataSize>19</DataSize>\\n            <PartitionName>pt=20170614</PartitionName>\\n            <Comment>备注</Comment>\\n            <ModifiedTime>1590032868000</ModifiedTime>\\n            <CreateTime>1590032868000</CreateTime>\\n            <RecordCount>233</RecordCount>\\n            <PartitionType>abc</PartitionType>\\n            <PartitionGuid>odps.engine_name.table_name.pt=20170614</PartitionGuid>\\n            <PartitionLocation>abc</PartitionLocation>\\n            <TableGuid>odps.engine_name.table_name</TableGuid>\\n        </DataEntityList>\\n    </Data>\\n</GetMetaTablePartitionResponse>","errorExample":""}]',
      'title' => '获取表的分区列表',
      'summary' => '该接口用于获取表的分区列表。',
      'description' => '仅支持获取MaxCompute和EMR两种引擎表的分区列表。 对于EMR引擎，仅支持采用数据湖构建（Data Lake Formation）管理元数据的新版本数据湖集群和集群版本小于3.41.0或5.7.0的Hadoop集群。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaTablePartition接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'GetMetaTableOutput' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78268',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页的页数。默认值为1，最小值为1，最大值为30。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
        3 => 
        array (
          'name' => 'StartDate',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '开始日期。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-06-27',
          ),
        ),
        4 => 
        array (
          'name' => 'EndDate',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '结束日期。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-05-27',
          ),
        ),
        5 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务标识。',
            'type' => 'string',
            'required' => false,
            'example' => '1048576',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '分页的页数。默认值为1，最小值为1，最大值为30。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '表的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '100',
                  ),
                  'DataEntityList' => 
                  array (
                    'description' => '实例列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'EndTime' => 
                        array (
                          'description' => '结束时间。',
                          'type' => 'string',
                          'example' => '1511107200000',
                        ),
                        'TaskInstanceId' => 
                        array (
                          'description' => '实例ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '3521',
                        ),
                        'StartTime' => 
                        array (
                          'description' => '开始时间。',
                          'type' => 'string',
                          'example' => '1511107200000',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '333',
                        ),
                        'WaitTime' => 
                        array (
                          'description' => '等待时间。',
                          'type' => 'string',
                          'example' => '323',
                        ),
                        'TableGuid' => 
                        array (
                          'description' => 'ODPS表的唯一标识。',
                          'type' => 'string',
                          'example' => 'odps.engine_name.table_name',
                        ),
                        'TaskId' => 
                        array (
                          'description' => '任务标识。',
                          'type' => 'string',
                          'example' => '1048576',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"RequestId\\": \\"0bc1ec92159376****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"DataEntityList\\": [\\n      {\\n        \\"EndTime\\": \\"1511107200000\\",\\n        \\"TaskInstanceId\\": 3521,\\n        \\"StartTime\\": \\"1511107200000\\",\\n        \\"ProjectId\\": 333,\\n        \\"WaitTime\\": \\"323\\",\\n        \\"TableGuid\\": \\"odps.engine_name.table_name\\",\\n        \\"TaskId\\": \\"1048576\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMetaTableOutputResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <RequestId>0bc1ec92159376****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <DataEntityList>\\n            <EndTime>1511107200000</EndTime>\\n            <TaskInstanceId>3521</TaskInstanceId>\\n            <StartTime>1511107200000</StartTime>\\n            <ProjectId>333</ProjectId>\\n            <WaitTime>323</WaitTime>\\n            <TableGuid>odps.engine_name.table_name</TableGuid>\\n            <TaskId>1048576</TaskId>\\n        </DataEntityList>\\n    </Data>\\n</GetMetaTableOutputResponse>","errorExample":""}]',
      'title' => '获取表的产出信息',
      'summary' => '该接口用于获取表的产出信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaTableOutput接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'GetMetaTableChangeLog' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78262',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'TableGuid',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '表的唯一标识，格式为odps.projectName.tableName。您可以通过调用[GetMetaDBTableList](~~2780086~~)，获取表的唯一标识。
> 当前仅支持调用[GetMetaTableChangeLog](~~2780094~~)获取MaxCompute表的变更日志。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
        3 => 
        array (
          'name' => 'ChangeType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '变更类型，包括CREATE_TABLE、ALTER_TABLE、DROP_TABLE、ADD_PARTITION和DROP_PARTITION。',
            'type' => 'string',
            'required' => false,
            'example' => 'ALTER_TABLE',
          ),
        ),
        4 => 
        array (
          'name' => 'ObjectType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '变更主体类别，包括TABLE和PARTITION。',
            'type' => 'string',
            'required' => false,
            'example' => 'TABLE',
          ),
        ),
        5 => 
        array (
          'name' => 'StartDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '表变更的开始日期，格式为yyyy-MM-dd HH:mm:ss。
- 如果输入的日期校验失败，则系统默认获取当前时间为表变更的开始日期。
- 当输入的变更开始日期和结束日期都校验失败时，则系统自动获取最近30天的表变更记录。
',
            'type' => 'string',
            'required' => false,
            'example' => '2020-06-01 00:00:00',
          ),
        ),
        6 => 
        array (
          'name' => 'EndDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '表变更的结束日期，格式为yyyy-MM-dd HH:mm:ss。
- 如果输入的日期校验失败，则系统默认获取当前时间为表变更的结束日期。
- 当输入的变更开始日期和结束日期都校验失败时，则系统自动获取最近30天的表变更记录。',
            'type' => 'string',
            'required' => false,
            'example' => '2020-06-02 00:00:00',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '请求的数据页数，用于翻页。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '表的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'DataEntityList' => 
                  array (
                    'description' => '实例列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回对象',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ObjectType' => 
                        array (
                          'description' => '变更主体的类别，包括TABLE和PARTITION。',
                          'type' => 'string',
                          'example' => 'TABLE',
                        ),
                        'ModifiedTime' => 
                        array (
                          'description' => '修改表的时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590722845000',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '创建表的时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590722845000',
                        ),
                        'ChangeContent' => 
                        array (
                          'description' => '变更的内容。',
                          'type' => 'string',
                          'example' => '"[{\\"action\\":\\"ADD_COLUMN\\",\\"value\\":[{\\"originName\\":\\"\\",\\"originType\\":\\"\\",\\"originComment\\":\\"\\",\\"name\\":\\"id\\",\\"type\\":\\"struct<name:string>\\",\\"comment\\":\\"\\"}]}]",',
                        ),
                        'Operator' => 
                        array (
                          'description' => '操作者的名称。',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                        'ChangeType' => 
                        array (
                          'description' => '变更的类型。',
                          'type' => 'string',
                          'example' => 'CREATE_TABLE',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 10,\\n    \\"PageSize\\": 1,\\n    \\"TotalCount\\": 10,\\n    \\"DataEntityList\\": [\\n      {\\n        \\"ObjectType\\": \\"TABLE\\",\\n        \\"ModifiedTime\\": 1590722845000,\\n        \\"CreateTime\\": 1590722845000,\\n        \\"ChangeContent\\": \\"\\\\\\"[{\\\\\\\\\\\\\\"action\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"ADD_COLUMN\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"value\\\\\\\\\\\\\\":[{\\\\\\\\\\\\\\"originName\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"originType\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"originComment\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"struct<name:string>\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"comment\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"\\\\\\\\\\\\\\"}]}]\\\\\\",\\",\\n        \\"Operator\\": \\"abc\\",\\n        \\"ChangeType\\": \\"CREATE_TABLE\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMetaTableChangeLogResponse>\\n    <RequestId>0bc1ec92159376</RequestId>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>\\n        <TotalCount>10</TotalCount>\\n        <PageSize>1</PageSize>\\n        <PageNumber>10</PageNumber>\\n        <DataEntityList>\\n            <Operator>abc</Operator>\\n            <ObjectType>TABLE</ObjectType>\\n            <ChangeContent>[{\\"action\\":\\"ADD_COLUMN\\",\\"value\\":[{\\"originName\\":\\"\\",\\"originType\\":\\"\\",\\"originComment\\":\\"\\",\\"name\\":\\"id\\",\\"type\\":\\"struct&lt;name:string&gt;\\",\\"comment\\":\\"\\"}]}]</ChangeContent>\\n            <ModifiedTime>1590722845000</ModifiedTime>\\n            <ChangeType>CREATE_TABLE</ChangeType>\\n            <CreateTime>1590722845000</CreateTime>\\n        </DataEntityList>\\n    </Data>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n</GetMetaTableChangeLogResponse>","errorExample":""}]',
      'title' => '获取表的变更日志',
      'summary' => '该接口用于获取表的变更日志。',
      'description' => '> 不建议使用该API，后续将有新API上线覆盖此功能。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaTableChangeLog接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'GetMetaTableIntroWiki' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78265',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
        1 => 
        array (
          'name' => 'WikiVersion',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '使用说明的版本。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'ModifiedTime' => 
                  array (
                    'description' => '修改表的时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1584444247000',
                  ),
                  'Version' => 
                  array (
                    'description' => '版本号。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'CreateTime' => 
                  array (
                    'description' => '表的创建时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1584444247000',
                  ),
                  'CreatorName' => 
                  array (
                    'description' => '表的创建者的名称。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'Content' => 
                  array (
                    'description' => '表的描述信息。',
                    'type' => 'string',
                    'example' => '# 业务需求\\n\\n&lt;a name=&quot;xiw5n&quot;',
                  ),
                  'Creator' => 
                  array (
                    'description' => '表的创建者。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"ModifiedTime\\": 1584444247000,\\n    \\"Version\\": 1,\\n    \\"CreateTime\\": 1584444247000,\\n    \\"CreatorName\\": \\"abc\\",\\n    \\"Content\\": \\"# 业务需求\\\\\\\\n\\\\\\\\n&lt;a name=&quot;xiw5n&quot;\\",\\n    \\"Creator\\": \\"abc\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc1ec92159376****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <ModifiedTime>1584444247000</ModifiedTime>\\n    <Version>1</Version>\\n    <Content># 业务需求\\\\n\\\\n&amp;lt;a name=&amp;quot;xiw5n&amp;quot;</Content>\\n    <CreateTime>1584444247000</CreateTime>\\n    <Creator>abc</Creator>\\n    <CreatorName>abc</CreatorName>\\n</Data>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '获取表的使用说明',
      'summary' => '该接口用于获取表的使用说明。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaTableIntroWiki接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'CreateMetaCategory' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78189',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Name',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '类目的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'category_name',
          ),
        ),
        1 => 
        array (
          'name' => 'Comment',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '类目的备注信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'category 1',
          ),
        ),
        2 => 
        array (
          'name' => 'ParentId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '父类目的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '0',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '类目信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'CategoryId' => 
                  array (
                    'description' => '类目的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '223',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
          6 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryIllegalDepth',
            'errorMessage' => 'A category can contain a maximum of 4 levels.',
          ),
          7 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryNameDuplicate',
            'errorMessage' => 'The category name is duplicated at this level.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryForbidden',
            'errorMessage' => 'Failed to delete the category. The current category is associated with a table and cannot be operated.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryIllegalTenant',
            'errorMessage' => 'The tenant ID is different in the parent and child categories.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
          5 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryRelationDuplicate"',
            'errorMessage' => 'The table is already bound to the category.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"CategoryId\\": 223\\n  }\\n}","errorExample":""},{"type":"xml","example":"<CreateMetaCategoryResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0bc1ec92159376</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <CategoryId>223</CategoryId>\\n    </Data>\\n</CreateMetaCategoryResponse>","errorExample":""}]',
      'title' => '创建类目',
      'summary' => '该接口用于创建类目。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' CreateMetaCategory接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'DeleteMetaCategory' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78211',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'CategoryId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '类目的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '23',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryIllegalDepth',
            'errorMessage' => 'A category can contain a maximum of 4 levels.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryNameDuplicate',
            'errorMessage' => 'The category name is duplicated at this level.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          6 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          7 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryForbidden',
            'errorMessage' => 'Failed to delete the category. The current category is associated with a table and cannot be operated.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryIllegalTenant',
            'errorMessage' => 'The tenant ID is different in the parent and child categories.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
          5 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryRelationDuplicate"',
            'errorMessage' => 'The table is already bound to the category.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<DeleteMetaCategoryResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>0bc1ec92159376</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</DeleteMetaCategoryResponse>","errorExample":""}]',
      'title' => '删除类目',
      'summary' => '该接口用于删除类目。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' DeleteMetaCategory接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'UpdateMetaCategory' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78374',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Name',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '类目的名称。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'category name ',
          ),
        ),
        1 => 
        array (
          'name' => 'Comment',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '类目的备注信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'category name',
          ),
        ),
        2 => 
        array (
          'name' => 'CategoryId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '类目的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '2',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '是否成功更新类目。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryIllegalDepth',
            'errorMessage' => 'A category can contain a maximum of 4 levels.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryNameDuplicate',
            'errorMessage' => 'The category name is duplicated at this level.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          6 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          7 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryForbidden',
            'errorMessage' => 'Failed to delete the category. The current category is associated with a table and cannot be operated.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryIllegalTenant',
            'errorMessage' => 'The tenant ID is different in the parent and child categories.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
          5 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryRelationDuplicate"',
            'errorMessage' => 'The table is already bound to the category.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc1ec92159376</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>true</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '更新类目',
      'summary' => '该接口用于更新类目。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' UpdateMetaCategory接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'GetMetaCategory' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78257',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ParentCategoryId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '类目树的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'example' => '333',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNum',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNum' => 
                  array (
                    'description' => '请求的数据页数，用于翻页。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '类目的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'DataEntityList' => 
                  array (
                    'description' => 'Data实例列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '类目详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Depth' => 
                        array (
                          'description' => '类目的层数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'Comment' => 
                        array (
                          'description' => '类目的备注信息。',
                          'type' => 'string',
                          'example' => 'category 1',
                        ),
                        'ModifiedTime' => 
                        array (
                          'description' => '修改类目的时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1541576644000',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '创建类目的时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1541576644000',
                        ),
                        'CategoryId' => 
                        array (
                          'description' => '类目的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '133',
                        ),
                        'LastOperatorId' => 
                        array (
                          'description' => '上一次操作的用户ID。',
                          'type' => 'string',
                          'example' => '12345',
                        ),
                        'Name' => 
                        array (
                          'description' => '类目的名称。',
                          'type' => 'string',
                          'example' => 'category 1',
                        ),
                        'ParentCategoryId' => 
                        array (
                          'description' => '父类目的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '12',
                        ),
                        'OwnerId' => 
                        array (
                          'description' => '类目所有者的ID。',
                          'type' => 'string',
                          'example' => '123',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryIllegalDepth',
            'errorMessage' => 'A category can contain a maximum of 4 levels.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryNameDuplicate',
            'errorMessage' => 'The category name is duplicated at this level.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          6 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          7 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryForbidden',
            'errorMessage' => 'Failed to delete the category. The current category is associated with a table and cannot be operated.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryIllegalTenant',
            'errorMessage' => 'The tenant ID is different in the parent and child categories.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
          5 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryRelationDuplicate"',
            'errorMessage' => 'The table is already bound to the category.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"PageNum\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 10,\\n    \\"DataEntityList\\": [\\n      {\\n        \\"Depth\\": 1,\\n        \\"Comment\\": \\"category 1\\",\\n        \\"ModifiedTime\\": 1541576644000,\\n        \\"CreateTime\\": 1541576644000,\\n        \\"CategoryId\\": 133,\\n        \\"LastOperatorId\\": \\"12345\\",\\n        \\"Name\\": \\"category 1\\",\\n        \\"ParentCategoryId\\": 12,\\n        \\"OwnerId\\": \\"123\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMetaCategoryResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0bc1ec92159376</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <PageNum>1</PageNum>\\n        <PageSize>10</PageSize>\\n        <TotalCount>10</TotalCount>\\n        <DataEntityList>\\n            <Depth>1</Depth>\\n            <Comment>category 1</Comment>\\n            <ModifiedTime>1541576644000</ModifiedTime>\\n            <CreateTime>1541576644000</CreateTime>\\n            <CategoryId>133</CategoryId>\\n            <LastOperatorId>12345</LastOperatorId>\\n            <Name>category 1</Name>\\n            <ParentCategoryId>12</ParentCategoryId>\\n            <OwnerId>123</OwnerId>\\n        </DataEntityList>\\n    </Data>\\n</GetMetaCategoryResponse>","errorExample":""}]',
      'title' => '查询类目树',
      'summary' => '该接口用于查询类目树。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaCategory接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'GetMetaTableListByCategory' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78267',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'CategoryId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '类目的ID，您可以调用[GetMetaCategory](~~2780099~~)获取类目的ID。类目方便您通过类别有效地组织和管理表，您可以在查找表时，通过类目来过滤目标表。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '23',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '请求的数据页数，用于翻页。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '表的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '20',
                  ),
                  'TableGuidList' => 
                  array (
                    'description' => '返回数据结构。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '表的列表。',
                      'type' => 'string',
                      'example' => 'odps.engine_name.table_name',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryIllegalDepth',
            'errorMessage' => 'A category can contain a maximum of 4 levels.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryNameDuplicate',
            'errorMessage' => 'The category name is duplicated at this level.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          6 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          7 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryForbidden',
            'errorMessage' => 'Failed to delete the category. The current category is associated with a table and cannot be operated.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryIllegalTenant',
            'errorMessage' => 'The tenant ID is different in the parent and child categories.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
          5 => 
          array (
            'errorCode' => 'Invalid.Meta.CategoryRelationDuplicate"',
            'errorMessage' => 'The table is already bound to the category.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 20,\\n    \\"TableGuidList\\": [\\n      \\"odps.engine_name.table_name\\"\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMetaTableListByCategoryResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0bc1ec92159376</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>20</TotalCount>\\n        <TableGuidList>odps.engine_name.table_name</TableGuidList>\\n    </Data>\\n</GetMetaTableListByCategoryResponse>","errorExample":""}]',
      'title' => '查询指定类目下的表',
      'summary' => '该接口用于查询指定类目下的表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaTableListByCategory接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'AddToMetaCategory' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78167',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'CategoryId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '类目的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '5',
          ),
        ),
        1 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '是否成功添加表至指定的类目。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc1ec92159376</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>true</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '添加表至指定的类目',
      'summary' => '该接口用于添加表至指定的类目。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' AddToMetaCategory接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'DeleteFromMetaCategory' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78210',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'CategoryId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '类目的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '5',
          ),
        ),
        1 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '是否成功删除表。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<DeleteFromMetaCategoryResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>0bc1ec92159376</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</DeleteFromMetaCategoryResponse>","errorExample":""}]',
      'title' => '从指定的类目中移除表',
      'summary' => '该接口用于从指定的类目中移除表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' DeleteFromMetaCategory接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'UpdateMetaTable' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78375',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '0',
            'example' => '101',
          ),
        ),
        1 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的名称。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'table1',
          ),
        ),
        2 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks的环境，包括0（开发环境）和1（生产环境）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识，格式为odps.{projectName}.{tableName}。',
            'type' => 'string',
            'required' => false,
            'example' => 'odps.test.table1',
          ),
        ),
        4 => 
        array (
          'name' => 'NewOwnerId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '新的OwnerId，为空时不更新。',
            'type' => 'string',
            'required' => false,
            'example' => '12345',
          ),
        ),
        5 => 
        array (
          'name' => 'AddedLabels',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '需要增加的标签名称，使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'a,b,c',
          ),
        ),
        6 => 
        array (
          'name' => 'RemovedLabels',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '需要删除的标签名称，使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'a,b,c',
          ),
        ),
        7 => 
        array (
          'name' => 'CategoryId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要关联的类目ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '0',
            'example' => '101',
          ),
        ),
        8 => 
        array (
          'name' => 'Visibility',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '编辑表的可见性，包括0（不可见）、1（可见）和2（工作空间可见）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '0',
            'example' => '1',
          ),
        ),
        9 => 
        array (
          'name' => 'Caption',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的中文名称。',
            'type' => 'string',
            'required' => false,
            'example' => '中文名',
          ),
        ),
        10 => 
        array (
          'name' => 'Schema',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表Schema信息。在ODPS，用户启动了三层模型需要填写Schema信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'default',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'UpdateResult' => 
              array (
                'description' => '是否更新成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abcde',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"UpdateResult\\": true,\\n  \\"RequestId\\": \\"abcde\\"\\n}","errorExample":""},{"type":"xml","example":"<UpdateMetaTableResponse>\\n    <UpdateResult>true</UpdateResult>\\n    <RequestId>abcde</RequestId>\\n</UpdateMetaTableResponse>","errorExample":""}]',
      'title' => '更新表的Meta信息',
      'summary' => '该接口用于更新表的Meta信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateMetaTableIntroWiki' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78376',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识，格式为odps.{projectName}.{tableName}。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps.test.table1',
          ),
        ),
        1 => 
        array (
          'name' => 'Content',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '表说明的详情。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'abc',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'UpdateResult' => 
              array (
                'description' => '表的更新结果。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => 'abcde',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"UpdateResult\\": true,\\n  \\"RequestId\\": \\"abcde\\"\\n}","errorExample":""},{"type":"xml","example":"<UpdateMetaTableIntroWikiResponse>\\n    <UpdateResult>true</UpdateResult>\\n    <RequestId>abcde</RequestId>\\n</UpdateMetaTableIntroWikiResponse>","errorExample":""}]',
      'title' => '更新表的说明信息',
      'summary' => '该接口用于更新表的说明信息，当数据不存在时增加信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListMetaDB' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78317',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以调用[ListProjects](~~178393~~)，获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '123',
          ),
        ),
        1 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，当前仅支持取值为emr。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'emr',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNum',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '10000',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大为100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '1',
            'example' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的ID。您可以登录[EMR的控制台](https://emr.console.aliyun.com/?spm=a2c4g.11186623.0.0.965cc5c2GeiHet#/cn-hangzhou)，获取集群ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abc',
              ),
              'DatabaseInfo' => 
              array (
                'description' => '数据库的信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'TotalCount' => 
                  array (
                    'description' => '数据库的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'DbList' => 
                  array (
                    'description' => '数据库列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结构。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Type' => 
                        array (
                          'description' => '数据库的类型。',
                          'type' => 'string',
                          'example' => 'HIVE',
                        ),
                        'CreateTimeStamp' => 
                        array (
                          'description' => '创建数据库的时间。该结果显示为时间戳，您可以根据使用的时区将时间戳转换为相应日期。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1388776825',
                        ),
                        'UUID' => 
                        array (
                          'description' => '数据库的唯一标识。',
                          'type' => 'string',
                          'example' => '32342',
                        ),
                        'ModifiedTimeStamp' => 
                        array (
                          'description' => '更新数据库的时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1388776837',
                        ),
                        'Name' => 
                        array (
                          'description' => '数据库的名称。',
                          'type' => 'string',
                          'example' => 'name',
                        ),
                        'OwnerId' => 
                        array (
                          'description' => 'Owner的ID。',
                          'type' => 'string',
                          'example' => '1232',
                        ),
                        'Location' => 
                        array (
                          'description' => '存储数据库的地址。',
                          'type' => 'string',
                          'example' => 'hdfs://localhost:777/user/hadoop/test.txt',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.AppNotExist',
            'errorMessage' => 'The MaxCompute project does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"abc\\",\\n  \\"DatabaseInfo\\": {\\n    \\"TotalCount\\": 10,\\n    \\"DbList\\": [\\n      {\\n        \\"Type\\": \\"HIVE\\",\\n        \\"CreateTimeStamp\\": 1388776825,\\n        \\"UUID\\": \\"32342\\",\\n        \\"ModifiedTimeStamp\\": 1388776837,\\n        \\"Name\\": \\"name\\",\\n        \\"OwnerId\\": \\"1232\\",\\n        \\"Location\\": \\"hdfs://localhost:777/user/hadoop/test.txt\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListMetaDBResponse>\\n    <RequestId>abc</RequestId>\\n    <DatabaseInfo>\\n        <TotalCount>10</TotalCount>\\n        <DbList>\\n            <Type>HIVE</Type>\\n            <CreateTimeStamp>1388776825</CreateTimeStamp>\\n            <UUID>32342</UUID>\\n            <ModifiedTimeStamp>1388776837</ModifiedTimeStamp>\\n            <Name>name</Name>\\n            <OwnerId>1232</OwnerId>\\n            <Location>hdfs://localhost:777/user/hadoop/test.txt</Location>\\n        </DbList>\\n    </DatabaseInfo>\\n</ListMetaDBResponse>","errorExample":""}]',
      'title' => '查询数据库列表',
      'summary' => '该接口用于查询数据库列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ListMetaDB接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'UpdateTableModelInfo' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78385',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FirstLevelThemeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '一级主题ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '0',
            'example' => '101',
          ),
        ),
        1 => 
        array (
          'name' => 'SecondLevelThemeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '二级主题ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '0',
            'example' => '101',
          ),
        ),
        2 => 
        array (
          'name' => 'LevelId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '层级ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '0',
            'example' => '101',
          ),
        ),
        3 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识，格式为odps.{projectName}.{tableName}。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps.test.table1',
          ),
        ),
        4 => 
        array (
          'name' => 'LevelType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '层级类型，包括1（逻辑层级）和2（物理层级）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '2147483647',
            'minimum' => '0',
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'UpdateResult' => 
              array (
                'description' => '表是否更新成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abcde',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"UpdateResult\\": true,\\n  \\"RequestId\\": \\"abcde\\"\\n}","errorExample":""},{"type":"xml","example":"<RequestId>abcde</RequestId>\\n<UpdateResult>true</UpdateResult>","errorExample":""}]',
      'title' => '修改表模型信息',
      'summary' => '修改表的主题、层级和物理分类等信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateTableTheme' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78199',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
        1 => 
        array (
          'name' => 'Level',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主题的层级，包括1（一级主题）和2（二级主题）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主题的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '主题名称',
          ),
        ),
        3 => 
        array (
          'name' => 'ParentId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '父类层级ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '122',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'ABCd',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误消息。',
                'type' => 'string',
                'example' => 'success',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '0',
              ),
              'Success' => 
              array (
                'description' => '是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ThemeId' => 
              array (
                'description' => '生成的主题ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '123',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"ABCd\\",\\n  \\"ErrorMessage\\": \\"success\\",\\n  \\"ErrorCode\\": \\"0\\",\\n  \\"Success\\": true,\\n  \\"ThemeId\\": 123\\n}","errorExample":""},{"type":"xml","example":"<CreateTableThemeResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>ABCd</RequestId>\\n    <ErrorMessage>success</ErrorMessage>\\n    <ErrorCode>0</ErrorCode>\\n    <Success>true</Success>\\n    <ThemeId>123</ThemeId>\\n</CreateTableThemeResponse>","errorExample":""}]',
      'title' => '创建主题',
      'summary' => '调用CreateTableTheme创建主题。不建议使用该API，后续将有新API上线覆盖此功能。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteTableTheme' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78220',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ThemeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主题ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abcdef',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误消息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '主题是否删除成功：

- true：是

- false：否',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'DeleteResult' => 
              array (
                'description' => '删除结果。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"abcdef\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true,\\n  \\"DeleteResult\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>abcdef</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<ErrorCode>0</ErrorCode>\\n<ErrorMessage>success</ErrorMessage>\\n<Success>true</Success>\\n<DeleteResult>true</DeleteResult>","errorExample":""}]',
      'title' => '删除主题',
      'summary' => '调用DeleteTableTheme删除主题。不建议使用该API，后续将有新API上线覆盖此功能。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateTableTheme' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78386',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主题的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '主题名称',
          ),
        ),
        2 => 
        array (
          'name' => 'ThemeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主题ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abcd',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误消息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'UpdateResult' => 
              array (
                'description' => '是否成功返回更新结果：

- true：是

- false：否',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '主题是否更新成功：

- true：是

- false：否',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"abcd\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"UpdateResult\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>abcd</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<ErrorCode>1031203110005</ErrorCode>\\n<ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n<Success>true</Success>\\n<UpdateResult>true</UpdateResult>","errorExample":""}]',
      'title' => '更新主题',
      'summary' => '调用UpdateTableTheme更新主题。不建议使用该API，后续将有新API上线覆盖此功能。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListTableTheme' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78337',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
        1 => 
        array (
          'name' => 'ParentId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '父类ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '121',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNum',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页的页数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '2147483647',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '1',
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abcde',
              ),
              'Success' => 
              array (
                'description' => '是否成功查询主题。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Data' => 
              array (
                'description' => '层级数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'TotalCount' => 
                  array (
                    'description' => '内容总数量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'ThemeList' => 
                  array (
                    'description' => '层级列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '主题列表详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'CreateTimeStamp' => 
                        array (
                          'description' => '创建层级的时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123432343243',
                        ),
                        'ParentId' => 
                        array (
                          'description' => '父节点ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '122',
                        ),
                        'ThemeId' => 
                        array (
                          'description' => '主题ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'Name' => 
                        array (
                          'description' => '层级的名称。',
                          'type' => 'string',
                          'example' => '层级名称',
                        ),
                        'Level' => 
                        array (
                          'description' => '1（一级层级）和2（二级层级）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'Creator' => 
                        array (
                          'description' => '层级的创建人。',
                          'type' => 'string',
                          'example' => '123455',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"RequestId\\": \\"abcde\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Data\\": {\\n    \\"TotalCount\\": 10,\\n    \\"ThemeList\\": [\\n      {\\n        \\"CreateTimeStamp\\": 123432343243,\\n        \\"ParentId\\": 122,\\n        \\"ThemeId\\": 123,\\n        \\"ProjectId\\": 123,\\n        \\"Name\\": \\"层级名称\\",\\n        \\"Level\\": 1,\\n        \\"Creator\\": \\"123455\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListTableThemeResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <RequestId>abcde</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Data>\\n        <TotalCount>10</TotalCount>\\n        <ThemeList>\\n            <CreateTimeStamp>123432343243</CreateTimeStamp>\\n            <ParentId>122</ParentId>\\n            <ThemeId>123</ThemeId>\\n            <ProjectId>123</ProjectId>\\n            <Name>层级名称</Name>\\n            <Level>1</Level>\\n            <Creator>123455</Creator>\\n        </ThemeList>\\n    </Data>\\n</ListTableThemeResponse>","errorExample":""}]',
      'title' => '查询主题列表',
      'summary' => '调用ListTableTheme查询主题列表。不建议使用该API，后续将有新API上线覆盖此功能。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetMetaTableThemeLevel' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78270',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一ID，格式为odps.${projectName}.${tableName}。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps.project1.name1',
          ),
        ),
        1 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，目前只支持odps。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'success',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '1324afdsfde',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '0',
              ),
              'Entity' => 
              array (
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Theme' => 
                  array (
                    'description' => '返回的主题信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '主题信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ParentId' => 
                        array (
                          'description' => '父主题ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'Name' => 
                        array (
                          'description' => '主题名称。',
                          'type' => 'string',
                          'example' => 'theme1',
                        ),
                        'ThemeId' => 
                        array (
                          'description' => '主题ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'Level' => 
                        array (
                          'description' => '主题类型，取值如下：
- 1：一级主题。
- 2：二级主题。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                      ),
                    ),
                  ),
                  'Level' => 
                  array (
                    'description' => '返回的层级信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '层级信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Type' => 
                        array (
                          'description' => '层级类型，取值如下：
- 1：逻辑层级。
- 2：物理层级。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'Description' => 
                        array (
                          'description' => '层级的描述。',
                          'type' => 'string',
                          'example' => '描述',
                        ),
                        'Name' => 
                        array (
                          'description' => '层级名称。',
                          'type' => 'string',
                          'example' => 'level1',
                        ),
                        'LevelId' => 
                        array (
                          'description' => '层级ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"success\\",\\n  \\"RequestId\\": \\"1324afdsfde\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"0\\",\\n  \\"Entity\\": {\\n    \\"Theme\\": [\\n      {\\n        \\"ParentId\\": 0,\\n        \\"Name\\": \\"theme1\\",\\n        \\"ThemeId\\": 123,\\n        \\"Level\\": 1\\n      }\\n    ],\\n    \\"Level\\": [\\n      {\\n        \\"Type\\": 1,\\n        \\"Description\\": \\"描述\\",\\n        \\"Name\\": \\"level1\\",\\n        \\"LevelId\\": 1\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMetaTableThemeLevelResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>success</ErrorMessage>\\n    <RequestId>1324afdsfde</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>0</ErrorCode>\\n    <Entity>\\n        <Theme>\\n            <ParentId>0</ParentId>\\n            <Name>theme1</Name>\\n            <ThemeId>123</ThemeId>\\n            <Level>1</Level>\\n        </Theme>\\n        <Level>\\n            <Type>1</Type>\\n            <Description>描述</Description>\\n            <Name>level1</Name>\\n            <LevelId>1</LevelId>\\n        </Level>\\n    </Entity>\\n</GetMetaTableThemeLevelResponse>","errorExample":""}]',
      'title' => '获取表的主题和层级信息',
      'summary' => '获取表的主题和层级信息。',
    ),
    'CreateTableLevel' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78198',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
        1 => 
        array (
          'name' => 'LevelType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '层级的类型，包括1（逻辑层级）和2（物理层级）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '层级的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '层级1',
          ),
        ),
        3 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '层级的描述。',
            'type' => 'string',
            'required' => false,
            'example' => '层级描述',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '请求id',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误消息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '是否成功创建层级。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'LevelId' => 
              array (
                'description' => '层级ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '123',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"请求id\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true,\\n  \\"LevelId\\": 123\\n}","errorExample":""},{"type":"xml","example":"<CreateTableLevelResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>请求id</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Success>true</Success>\\n    <LevelId>123</LevelId>\\n</CreateTableLevelResponse>","errorExample":""}]',
      'title' => '创建层级',
      'summary' => '调用CreateTableLevel创建层级。不建议使用该API，后续将有新API上线覆盖此功能。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateTableLevel' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78384',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
        1 => 
        array (
          'name' => 'LevelType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '层级的类型，包括1（逻辑层级）和2（物理层级）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '10',
            'minimum' => '0',
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '层级的名称。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '层级名称',
          ),
        ),
        3 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '层级的描述。',
            'type' => 'string',
            'required' => false,
            'example' => '层级描述',
          ),
        ),
        4 => 
        array (
          'name' => 'LevelId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要更新的层级ID。您可以通过ListLevel获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abcde',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误消息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'UpdateResult' => 
              array (
                'description' => '是否成功返回结果。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '是否成功更新层级。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"abcde\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"UpdateResult\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<UpdateTableLevelResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>abcde</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <UpdateResult>true</UpdateResult>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Success>true</Success>\\n</UpdateTableLevelResponse>","errorExample":""}]',
      'title' => '更新层级',
      'summary' => '调用UpdateTableLevel更新层级。不建议使用该API，后续将有新API上线覆盖此功能。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteTableLevel' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78219',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'LevelId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要删除的层级ID。您可以从ListLevel接口获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'DeleteResult' => 
              array (
                'description' => '删除结果。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abcde',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"DeleteResult\\": true,\\n  \\"RequestId\\": \\"abcde\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteTableLevelResponse>\\n    <DeleteResult>true</DeleteResult>\\n    <RequestId>abcde</RequestId>\\n</DeleteTableLevelResponse>","errorExample":""}]',
      'title' => '删除层级',
      'summary' => '调用DeleteTableLevel删除层级。不建议使用该API，后续将有新API上线覆盖此功能。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListTableLevel' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78336',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以进入DataWorks管理控制台获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123',
          ),
        ),
        1 => 
        array (
          'name' => 'LevelType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '层级的类型，包括1（逻辑层级）和2（物理层级）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10',
            'minimum' => '0',
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNum',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询页码。默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abc',
              ),
              'Success' => 
              array (
                'description' => '是否成功查询层级列表。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005	',
              ),
              'TableLevelInfo' => 
              array (
                'description' => '层级的信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'TotalCount' => 
                  array (
                    'description' => '层级的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'LevelList' => 
                  array (
                    'description' => '层级列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '层级信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'LevelType' => 
                        array (
                          'description' => '层级的类型，包括1（逻辑层级）和2（物理层级）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'Description' => 
                        array (
                          'description' => '层级的描述。',
                          'type' => 'string',
                          'example' => '层级描述',
                        ),
                        'Name' => 
                        array (
                          'description' => '层级的名称。',
                          'type' => 'string',
                          'example' => '层级1',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => 'DataWorks工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'LevelId' => 
                        array (
                          'description' => '层级ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"RequestId\\": \\"abc\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\\\t\\",\\n  \\"TableLevelInfo\\": {\\n    \\"TotalCount\\": 10,\\n    \\"LevelList\\": [\\n      {\\n        \\"LevelType\\": 1,\\n        \\"Description\\": \\"层级描述\\",\\n        \\"Name\\": \\"层级1\\",\\n        \\"ProjectId\\": 123,\\n        \\"LevelId\\": 123\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListTableLevelResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <RequestId>abc</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>1031203110005\\t</ErrorCode>\\n    <TableLevelInfo>\\n        <TotalCount>10</TotalCount>\\n        <LevelList>\\n            <LevelType>1</LevelType>\\n            <Description>层级描述</Description>\\n            <Name>层级1</Name>\\n            <ProjectId>123</ProjectId>\\n            <LevelId>123</LevelId>\\n        </LevelList>\\n    </TableLevelInfo>\\n</ListTableLevelResponse>","errorExample":""}]',
      'title' => '查询层级列表',
      'summary' => '调用ListTableLevel查询层级列表。不建议使用该API，后续将有新API上线覆盖此功能。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateMetaCollection' => 
    array (
      'summary' => '该接口用于更新集合对象的名称和注释。',
      'methods' => 
      array (
        0 => 'put',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '163134',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'QualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合的唯一标识',
            'type' => 'string',
            'required' => true,
            'example' => 'album.396397',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '名称',
            'type' => 'string',
            'required' => false,
            'example' => 'myCollectionName',
          ),
        ),
        2 => 
        array (
          'name' => 'Comment',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合备注
长度限制：1-64字符',
            'type' => 'string',
            'required' => false,
            'example' => 'this is a comment',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结构',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的ID。用于定位日志，排查问题。

',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
              'Status' => 
              array (
                'description' => '更新结果：
true: 成功
false: 失败',
                'type' => 'boolean',
                'enumValueTitles' => 
                array (
                ),
                'example' => 'true',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified product does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9999',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-E****\\",\\n  \\"Status\\": true,\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The specified product does not exist.\\",\\n  \\"ErrorCode\\": \\"9999\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<UpdateMetaCollectionResponse>\\n    <RequestId>0000-ABCD-E****</RequestId>\\n    <Status>true</Status>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The specified product does not exist.</ErrorMessage>\\n    <ErrorCode>9999</ErrorCode>\\n    <Success>true</Success>\\n</UpdateMetaCollectionResponse>","errorExample":""}]',
      'title' => '更新集合对象',
      'description' => '目前只支持更新名称(name)、注释(comment)。',
      'requestParamsDescription' => '更新的时候 Name 、Comment 二者至少要提供一个。',
    ),
    'ListMetaCollections' => 
    array (
      'summary' => '查询集合信息。 集合的概念包括数据地图页面上的专辑、专辑中的子类目等。 通过本接口可以指定集合类型查询集合信息。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '162854',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ParentQualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '父集合唯一标识',
            'type' => 'string',
            'required' => false,
            'example' => 'Album.1234',
          ),
        ),
        1 => 
        array (
          'name' => 'NextToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页信息，指定本次读取的起始点',
            'type' => 'string',
            'required' => false,
            'example' => '12345',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'Keyword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '关键字。',
            'type' => 'string',
            'required' => false,
            'example' => '关键词',
          ),
        ),
        4 => 
        array (
          'name' => 'OrderBy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '排序字段名称。',
            'type' => 'string',
            'required' => false,
            'example' => '排序字段',
          ),
        ),
        5 => 
        array (
          'name' => 'CollectionType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询的集合类型，取值范围：
- **ALBUM**：专辑集合
- **ALBUM_CATEGORY**：专辑内的类目',
            'type' => 'string',
            'required' => true,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'ALBUM',
          ),
        ),
        6 => 
        array (
          'name' => 'Creator',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建者用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '1200759642363000',
          ),
        ),
        7 => 
        array (
          'name' => 'Administrator',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合管理员ID',
            'type' => 'string',
            'required' => false,
            'example' => '1200759642363000',
          ),
        ),
        8 => 
        array (
          'name' => 'Follower',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合关注者ID',
            'type' => 'string',
            'required' => false,
            'example' => '1200759642363000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结构',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的ID。用于定位日志，排查问题。

',
                'type' => 'string',
                'example' => 'E25887B7-579C-54A5-9C4F-83A0DE367DDE',
              ),
              'Data' => 
              array (
                'description' => '返回对象',
                'type' => 'object',
                'properties' => 
                array (
                  'NextToken' => 
                  array (
                    'description' => '下一页的token',
                    'type' => 'string',
                    'example' => '37ae2053d87d380f28ce0dc0853ca51e',
                  ),
                  'CollectionList' => 
                  array (
                    'description' => '数组对象',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回的集合对象',
                      '$ref' => '#/components/schemas/Collection',
                    ),
                  ),
                ),
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Collection.NotExists',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Collection.ParamError',
            'errorMessage' => 'msg: %s',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.User.NotExist',
            'errorMessage' => 'msg: %s',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Collection.QualifiedNameError',
            'errorMessage' => 'msg: %s',
          ),
          3 => 
          array (
            'errorCode' => 'Invalid.Collection.CollectionNotCompatible',
            'errorMessage' => 'msg: %s',
          ),
          4 => 
          array (
            'errorCode' => 'Invalid.Collection.EntityOverflow',
            'errorMessage' => 'msg: %s',
          ),
          5 => 
          array (
            'errorCode' => 'Invalid.Collection.NotExist',
            'errorMessage' => 'msg: %s',
          ),
          6 => 
          array (
            'errorCode' => 'Invalid.Collection.AlreadyExist',
            'errorMessage' => 'msg: %s',
          ),
          7 => 
          array (
            'errorCode' => 'Invalid.Collection.UnsupportedOperation',
            'errorMessage' => 'msg: %s',
          ),
          8 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Missing',
            'errorMessage' => 'msg: %s',
          ),
          9 => 
          array (
            'errorCode' => 'Forbidden.No.Permission',
            'errorMessage' => 'msg: %s',
          ),
          10 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalData',
            'errorMessage' => 'msg: %s',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"E25887B7-579C-54A5-9C4F-83A0DE367DDE\\",\\n  \\"Data\\": {\\n    \\"NextToken\\": \\"37ae2053d87d380f28ce0dc0853ca51e\\",\\n    \\"CollectionList\\": [\\n      {\\n        \\"QualifiedName\\": \\"album.12334\\",\\n        \\"CollectionType\\": \\"album\\",\\n        \\"Name\\": \\"collectionName\\",\\n        \\"Comment\\": \\"comment\\",\\n        \\"OwnerId\\": \\"1234444\\",\\n        \\"OwnerName\\": \\"owner\\",\\n        \\"CreateTime\\": 1668600147617,\\n        \\"UpdateTime\\": 1668600148617,\\n        \\"Level\\": 1\\n      }\\n    ]\\n  },\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Collection.NotExists\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"HttpStatusCode\\": 200\\n}","errorExample":""},{"type":"xml","example":"<ListMetaCollectionsResponse>\\n    <RequestId>E25887B7-579C-54A5-9C4F-83A0DE367DDE</RequestId>\\n    <Data>\\n        <NextToken>37ae2053d87d380f28ce0dc0853ca51e</NextToken>\\n        <CollectionList>\\n            <QualifiedName>album.12334</QualifiedName>\\n            <CollectionType>album</CollectionType>\\n            <Name>collectionName</Name>\\n            <Comment>comment</Comment>\\n            <OwnerId>1234444</OwnerId>\\n            <OwnerName>owner</OwnerName>\\n            <CreateTime>1668600147617</CreateTime>\\n            <UpdateTime>1668600148617</UpdateTime>\\n            <Level>1</Level>\\n        </CollectionList>\\n    </Data>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Collection.NotExists</ErrorCode>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n</ListMetaCollectionsResponse>","errorExample":""}]',
      'title' => '查询集合信息',
      'description' => '集合包括： ALBUM（专辑集合）， ALBUM_CATEGORY（专辑内的子类目）。',
      'requestParamsDescription' => 'Creator、Administrator、Follower  这三个参数，最多可以设置一个',
    ),
    'ListMetaCollectionEntities' => 
    array (
      'summary' => '该接口用于查询集合中的实体。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '163137',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'CollectionQualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合唯一标识。',
            'type' => 'string',
            'required' => true,
            'example' => 'album.12345',
          ),
        ),
        1 => 
        array (
          'name' => 'EntityType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实体类型。示例：maxcompute-table表示MaxCompute表类型。',
            'type' => 'string',
            'required' => false,
            'example' => 'maxcompute-table',
          ),
        ),
        2 => 
        array (
          'name' => 'Keyword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '搜索关键词。',
            'type' => 'string',
            'required' => false,
            'example' => 'test',
          ),
        ),
        3 => 
        array (
          'name' => 'NextToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页信息，指定本次读取的起始点。',
            'type' => 'string',
            'required' => false,
            'example' => '12222',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页大小。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiMetaResultModel',
            'description' => 'OpenApiMetaResultModel',
            'type' => 'object',
            'properties' => 
            array (
              'Data' => 
              array (
                'description' => '返回结构体。',
                'type' => 'object',
                'properties' => 
                array (
                  'NextToken' => 
                  array (
                    'description' => '下一页的Token。',
                    'type' => 'string',
                    'example' => '123344',
                  ),
                  'EntityList' => 
                  array (
                    'description' => '实体数组。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '实体信息。',
                      '$ref' => '#/components/schemas/Entity',
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。

',
                'type' => 'string',
                'example' => 'E25887B7-579C-54A5-9C4F-83A0DE367DD',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：

true：调用成功。

false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。

',
                'type' => 'string',
                'example' => 'Invalid.Collection.NotExists',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。

',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。

',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Data\\": {\\n    \\"NextToken\\": \\"123344\\",\\n    \\"EntityList\\": [\\n      {\\n        \\"QualifiedName\\": \\"maxcompute_table.563f0357118d05ef145d6bddf2966cc23e86ca8f2f013f915e565afdf09f7a23\\",\\n        \\"TenantId\\": 12345,\\n        \\"EntityContent\\": {\\n          \\"test\\": \\"test\\",\\n          \\"test2\\": 1\\n        }\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"E25887B7-579C-54A5-9C4F-83A0DE367DD\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Collection.NotExists\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"HttpStatusCode\\": 200\\n}","errorExample":""},{"type":"xml","example":"<ListMetaCollectionEntitiesResponse>\\n    <Data>\\n        <NextToken>12</NextToken>\\n        <EntityList>\\n            <EntityContent>\\n                <entityType>maxcompute-table</entityType>\\n                <name>table_name_for_example</name>\\n                <projectName>maxcomputeProjectName</projectName>\\n                <remark>cui</remark>\\n                <addToCollectionTimestamp>1691563804264</addToCollectionTimestamp>\\n            </EntityContent>\\n            <QualifiedName>maxcompute-table.maxcomputeProjectName.table_name_for_example</QualifiedName>\\n        </EntityList>\\n    </Data>\\n    <RequestId>E25887B7-579C-54A5-9C4F-83A0DE367DD</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Collection.NotExists</ErrorCode>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n</ListMetaCollectionEntitiesResponse>","errorExample":""}]',
      'title' => '查询集合中的实体',
    ),
    'DeleteMetaCollection' => 
    array (
      'summary' => '删除集合。',
      'methods' => 
      array (
        0 => 'delete',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '163135',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'QualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合唯一标识符',
            'type' => 'string',
            'required' => true,
            'example' => 'album.12333',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结构',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的ID。用于定位日志，排查问题。

',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
              'Status' => 
              array (
                'description' => '操作结果：
 
true: 成功

false: 失败

',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。

',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。

',
                'type' => 'string',
                'example' => 'The specified product does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。

',
                'type' => 'string',
                'example' => '999999',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：

true：调用成功。

false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-E****\\",\\n  \\"Status\\": true,\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The specified product does not exist.\\",\\n  \\"ErrorCode\\": \\"999999\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<DeleteMetaCollectionResponse>\\n    <RequestId>0000-ABCD-E****</RequestId>\\n    <Status>true</Status>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The specified product does not exist.</ErrorMessage>\\n    <ErrorCode>999999</ErrorCode>\\n    <Success>true</Success>\\n</DeleteMetaCollectionResponse>","errorExample":""}]',
      'title' => '删除集合',
    ),
    'GetMetaCollectionDetail' => 
    array (
      'summary' => '该接口用于查询集合的详细信息。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '163136',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'QualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合唯一标识符。',
            'type' => 'string',
            'required' => true,
            'example' => 'album.12345',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
              'Collection' => 
              array (
                'description' => '集合对象。',
                '$ref' => '#/components/schemas/Collection',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：

true：调用成功。

false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。

',
                'type' => 'string',
                'example' => '9999',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'album.xxxx does not exist.',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。

',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-E****\\",\\n  \\"Collection\\": {\\n    \\"QualifiedName\\": \\"album.12334\\",\\n    \\"CollectionType\\": \\"album\\",\\n    \\"Name\\": \\"collectionName\\",\\n    \\"Comment\\": \\"comment\\",\\n    \\"OwnerId\\": \\"1234444\\",\\n    \\"OwnerName\\": \\"owner\\",\\n    \\"CreateTime\\": 1668600147617,\\n    \\"UpdateTime\\": 1668600148617,\\n    \\"Level\\": 1\\n  },\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"9999\\",\\n  \\"ErrorMessage\\": \\"album.xxxx does not exist.\\",\\n  \\"HttpStatusCode\\": 200\\n}","errorExample":""},{"type":"xml","example":"<GetMetaCollectionDetailResponse>\\n    <RequestId>0000-ABCD-E****</RequestId>\\n    <Collection>\\n        <QualifiedName>album.12334</QualifiedName>\\n        <CollectionType>album</CollectionType>\\n        <Name>collectionName</Name>\\n        <Comment>comment</Comment>\\n        <OwnerId>1234444</OwnerId>\\n        <OwnerName>owner</OwnerName>\\n        <CreateTime>1668600147617</CreateTime>\\n        <UpdateTime>1668600148617</UpdateTime>\\n        <Level>1</Level>\\n    </Collection>\\n    <Success>true</Success>\\n    <ErrorCode>9999</ErrorCode>\\n    <ErrorMessage>album.xxxx does not exist.</ErrorMessage>\\n</GetMetaCollectionDetailResponse>","errorExample":""}]',
      'title' => '查询集合详情信息',
    ),
    'DeleteMetaCollectionEntity' => 
    array (
      'summary' => '该接口用于删除集合中的实体。',
      'methods' => 
      array (
        0 => 'delete',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '163139',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'CollectionQualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合唯一识别符。',
            'type' => 'string',
            'required' => true,
            'example' => 'album.12345',
          ),
        ),
        1 => 
        array (
          'name' => 'EntityQualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实体唯一标识符。',
            'type' => 'string',
            'required' => true,
            'example' => 'maxcompute.projectA.tableB',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
              'Status' => 
              array (
                'description' => '操作结果：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。

',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。

',
                'type' => 'string',
                'example' => 'entity not exist',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。

',
                'type' => 'string',
                'example' => '999999',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Entity.NotExist',
            'errorMessage' => '%s',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-E****\\",\\n  \\"Status\\": true,\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"entity not exist\\",\\n  \\"ErrorCode\\": \\"999999\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<DeleteMetaCollectionEntityResponse>\\n    <RequestId>0000-ABCD-E****</RequestId>\\n    <Status>true</Status>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>entity not exist</ErrorMessage>\\n    <ErrorCode>999999</ErrorCode>\\n    <Success>true</Success>\\n</DeleteMetaCollectionEntityResponse>","errorExample":""}]',
      'title' => '删除集合中的实体',
    ),
    'AddMetaCollectionEntity' => 
    array (
      'summary' => '该接口用于添加实体到集合中。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '163138',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'CollectionQualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合唯一标识符。',
            'type' => 'string',
            'required' => true,
            'example' => 'album.2222',
          ),
        ),
        1 => 
        array (
          'name' => 'EntityQualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实体唯一标识符。',
            'type' => 'string',
            'required' => true,
            'example' => 'maxcompute-table.projectA.tableB',
          ),
        ),
        2 => 
        array (
          'name' => 'Remark',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '对实体的备注信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'this is a remark',
            'maxLength' => 50,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结构。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的ID。用于定位日志，排查问题。

',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
              'Status' => 
              array (
                'description' => '操作结果： 

- true: 成功 
- false: 失败

',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。

',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。

',
                'type' => 'string',
                'example' => 'The specified product does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。

',
                'type' => 'string',
                'example' => '9999',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Entity.NotExist',
            'errorMessage' => '%s',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-E****\\",\\n  \\"Status\\": true,\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The specified product does not exist.\\",\\n  \\"ErrorCode\\": \\"9999\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<AddMetaCollectionEntityResponse>\\n    <RequestId>0000-ABCD-E****</RequestId>\\n    <Status>true</Status>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The specified product does not exist.</ErrorMessage>\\n    <ErrorCode>9999</ErrorCode>\\n    <Success>true</Success>\\n</AddMetaCollectionEntityResponse>","errorExample":""}]',
      'title' => '添加实体到集合中',
    ),
    'CreateMetaCollection' => 
    array (
      'summary' => '创建集合对象。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '163133',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideE9XYA6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合名称, 
长度限制:1-32字符',
            'type' => 'string',
            'required' => true,
            'example' => 'collection_name',
          ),
        ),
        1 => 
        array (
          'name' => 'Comment',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合备注
长度限制：1-64字符',
            'type' => 'string',
            'required' => false,
            'example' => 'this is a comment',
          ),
        ),
        2 => 
        array (
          'name' => 'ParentQualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '父集合唯一标识',
            'type' => 'string',
            'required' => false,
            'example' => 'album.333508',
          ),
        ),
        3 => 
        array (
          'name' => 'CollectionType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集合类型',
            'type' => 'string',
            'required' => true,
            'example' => 'ALBUM',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => 'Id of the request',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'QualifiedName' => 
              array (
                'description' => '集合的唯一标识',
                'type' => 'string',
                'example' => 'album.11111',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'string',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'NoPermission',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP错误码。',
                'type' => 'string',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"QualifiedName\\": \\"album.11111\\",\\n  \\"Success\\": \\"true\\",\\n  \\"ErrorCode\\": \\"NoPermission\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"HttpStatusCode\\": \\"200\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateMetaCollectionResponse>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <QualifiedName>album.1111</QualifiedName>\\n    <Success>true</Success>\\n    <ErrorCode>9999</ErrorCode>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n</CreateMetaCollectionResponse>","errorExample":""}]',
      'title' => '创建集合对象',
      'description' => '集合目前有多种类型， 同一集合类型内要保证名称唯一性。',
      'requestParamsDescription' => '由于专辑下的类目是需要建立在专辑下的。 
只有创建了专辑后，才能通过指定parentQualifiedName = 专辑的qualifiedName ， 创建专辑内的子类目',
    ),
    'ListLineage' => 
    array (
      'summary' => '查询实体的上下游血缘关系。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '178500',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSYOMAV',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'EntityQualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实体唯一标识符。',
            'type' => 'string',
            'required' => true,
            'example' => 'maxcompute-table.project.table',
          ),
        ),
        1 => 
        array (
          'name' => 'NextToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页信息，指定本次读取的起始点。',
            'type' => 'string',
            'required' => false,
            'example' => 'next-token-from-previous-request',
          ),
        ),
        2 => 
        array (
          'name' => 'Keyword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实体名称关键词。',
            'type' => 'string',
            'required' => false,
            'example' => 'name-keyword',
          ),
        ),
        3 => 
        array (
          'name' => 'Direction',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '血缘上下游。取值如下： 
- up：上游。
- down：下游。',
            'type' => 'string',
            'required' => true,
            'example' => 'up',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页大小，最大为100。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => 'OpenApiMetaResultModel

',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'qualifiedName should be in format as entity-table.entity-guid',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志、排查问题。',
                'type' => 'string',
                'example' => '64B-587A-8CED-969E1973887FXXX-TT',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1010040007',
              ),
              'Data' => 
              array (
                'description' => '返回结构体。',
                'type' => 'object',
                'properties' => 
                array (
                  'NextToken' => 
                  array (
                    'description' => '分页信息，指定下次读取的起始点。',
                    'type' => 'string',
                    'example' => 'nextTokenFromRequest-xxxsd-ff',
                  ),
                  'DataEntityList' => 
                  array (
                    'description' => '实体结构体数组。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '实体结构体。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Entity' => 
                        array (
                          'description' => '实体信息。',
                          '$ref' => '#/components/schemas/Entity',
                        ),
                        'CreateTimestamp' => 
                        array (
                          'description' => '血缘创建时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1686215809269',
                        ),
                        'RelationList' => 
                        array (
                          'description' => '关系结构体数组。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '关系结构体。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'Guid' => 
                              array (
                                'description' => '关系唯一ID。',
                                'type' => 'string',
                                'example' => 'aaabbccddguid',
                              ),
                              'Datasource' => 
                              array (
                                'description' => '数据源名称。',
                                'type' => 'string',
                                'example' => 'mysql',
                              ),
                              'Type' => 
                              array (
                                'description' => '任务类型：主要描述实体间关系类型。例如，通过SQL计算、通过报表字段映射、通过定义API等 。',
                                'type' => 'string',
                                'example' => 'sql',
                              ),
                              'Channel' => 
                              array (
                                'description' => '数据渠道：

- **FIRST_PARTY**：DataWorks平台数据。
- **THIRD_PARTY**：用户注册的数据。',
                                'type' => 'string',
                                'example' => 'THIRD_PARTY',
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"qualifiedName should be in format as entity-table.entity-guid\\",\\n  \\"RequestId\\": \\"64B-587A-8CED-969E1973887FXXX-TT\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1010040007\\",\\n  \\"Data\\": {\\n    \\"NextToken\\": \\"nextTokenFromRequest-xxxsd-ff\\",\\n    \\"DataEntityList\\": [\\n      {\\n        \\"Entity\\": {\\n          \\"QualifiedName\\": \\"maxcompute_table.563f0357118d05ef145d6bddf2966cc23e86ca8f2f013f915e565afdf09f7a23\\",\\n          \\"TenantId\\": 12345,\\n          \\"EntityContent\\": {\\n            \\"test\\": \\"test\\",\\n            \\"test2\\": 1\\n          }\\n        },\\n        \\"CreateTimestamp\\": 1686215809269,\\n        \\"RelationList\\": [\\n          {\\n            \\"Guid\\": \\"aaabbccddguid\\",\\n            \\"Datasource\\": \\"mysql\\",\\n            \\"Type\\": \\"sql\\",\\n            \\"Channel\\": \\"THIRD_PARTY\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListLineageResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>qualifiedName should be in format as entity-table.entity-guid</ErrorMessage>\\n    <RequestId>64B-587A-8CED-969E1973887FXXX-TT</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>1010040007</ErrorCode>\\n    <Data>\\n        <NextToken>nextTokenFromRequest-xxxsd-ff</NextToken>\\n        <DataEntityList>\\n            <Entity>\\n                <QualifiedName>maxcompute_table.563f0357118d05ef145d6bddf2966cc23e86ca8f2f013f915e565afdf09f7a23</QualifiedName>\\n                <TenantId>12345</TenantId>\\n            </Entity>\\n            <CreateTimestamp>1686215809269</CreateTimestamp>\\n            <RelationList>\\n                <Guid>aaabbccddguid</Guid>\\n                <Datasource>mysql</Datasource>\\n                <Type>sql</Type>\\n                <Channel>THIRD_PARTY</Channel>\\n            </RelationList>\\n        </DataEntityList>\\n    </Data>\\n</ListLineageResponse>","errorExample":""}]',
      'title' => '查询实体血缘',
    ),
    'DeleteLineageRelation' => 
    array (
      'summary' => '删除实体间血缘关系。 仅限于删除用户注册的自定义血缘关系。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '178630',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSYOMAV',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'SrcEntityQualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '源实体唯一标识',
            'type' => 'string',
            'required' => true,
            'example' => 'maxcompute-table.project.table',
          ),
        ),
        1 => 
        array (
          'name' => 'DestEntityQualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标实体唯一标识',
            'type' => 'string',
            'required' => true,
            'example' => 'custom-report.report123',
          ),
        ),
        2 => 
        array (
          'name' => 'RelationshipGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '血缘关系唯一标识',
            'type' => 'string',
            'required' => false,
            'example' => 'dfazcdfdfccdedd',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => 'OpenApiMetaResultModel

',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码

',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息

',
                'type' => 'string',
                'example' => 'qualifiedName should be in format as entity-table.entity-guid',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID：用于定位日志、排查问题

',
                'type' => 'string',
                'example' => '64B-587A-8CED-969E1973887FXXX-TT',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：

true：调用成功

false：调用失败',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码

',
                'type' => 'string',
                'example' => '1010040007',
              ),
              'Status' => 
              array (
                'description' => '操作结果：

true: 成功

false: 失败
',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"qualifiedName should be in format as entity-table.entity-guid\\",\\n  \\"RequestId\\": \\"64B-587A-8CED-969E1973887FXXX-TT\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1010040007\\",\\n  \\"Status\\": true\\n}","type":"json"}]',
      'title' => '删除血缘关系',
      'description' => '本接口当前处于试用阶段。需要体验的用户可以提出申请，管理员加入试用名单后即可调用。',
    ),
    'RegisterLineageRelation' => 
    array (
      'summary' => '注册实体关系，支持用户注册自定义的实体关系。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '178589',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSYOMAV',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'LineageRelationRegisterVO',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '血缘注册结构体。',
            'required' => true,
            '$ref' => '#/components/schemas/LineageRelationRegisterVO',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => 'OpenApiMetaResultModel',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The entity of lineage not exist, xxx',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID：用于定位日志、排查问题。',
                'type' => 'string',
                'example' => 'EE50E05E-028C-182B-9xxx',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：

- true：调用成功。

- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1010210001',
              ),
              'LineageRelation' => 
              array (
                'description' => '血缘关系对象。',
                'type' => 'object',
                'properties' => 
                array (
                  'SrcEntityQualifiedName' => 
                  array (
                    'description' => '源实体唯一标识。',
                    'type' => 'string',
                    'example' => 'maxcompute-table.project.table',
                  ),
                  'DestEntityQualifiedName' => 
                  array (
                    'description' => '目标实体唯一标识。',
                    'type' => 'string',
                    'example' => 'custom-report.month_stat_user',
                  ),
                  'RelationshipGuid' => 
                  array (
                    'description' => '实体间血缘关系ID。',
                    'type' => 'string',
                    'example' => 'dfsldfdlsfdsaaaabbbb',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The entity of lineage not exist, xxx\\",\\n  \\"RequestId\\": \\"EE50E05E-028C-182B-9xxx\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1010210001\\",\\n  \\"LineageRelation\\": {\\n    \\"SrcEntityQualifiedName\\": \\"maxcompute-table.project.table\\",\\n    \\"DestEntityQualifiedName\\": \\"custom-report.month_stat_user\\",\\n    \\"RelationshipGuid\\": \\"dfsldfdlsfdsaaaabbbb\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RegisterLineageRelationResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The entity of lineage not exist, xxx</ErrorMessage>\\n    <RequestId>EE50E05E-028C-182B-9xxx</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>1010210001</ErrorCode>\\n    <LineageRelation>\\n        <SrcEntityQualifiedName>maxcompute-table.project.table</SrcEntityQualifiedName>\\n        <DestEntityQualifiedName>custom-report.month_stat_user</DestEntityQualifiedName>\\n        <RelationshipGuid>dfsldfdlsfdsaaaabbbb</RelationshipGuid>\\n    </LineageRelation>\\n</RegisterLineageRelationResponse>","errorExample":""}]',
      'title' => '注册血缘关系',
      'description' => '本接口当前处于试用阶段。需要体验的用户可以提出申请，管理员加入试用名单后即可调用。',
      'requestParamsDescription' => '实体唯一标识格式：EntityType.EntityGuid

```
1：EntityType 标识实体类型
    1.1 Dataworks上已有的实体类型
        (1) maxcompute表：maxcompute-table
        (2) mysql表：mysql-table
        (3) emr表：emr-table 
        (4) holo表：holodb-table

    1.2 用户自定义的实体类型： custom-xxx
       根据用户需求，推荐使用如下类型
        (1) 表：custom-table
        (2) API：custom-api 
        (3) 应用：custom-app
        (4) 报表： custom-report
        (5) 数据集：custom-dataset
        (6) 数据源：custom-datasource

2: EntityGuid：在同一实体类型内部，唯一标识该实体的标识
    用户自定义的实体可以根据需要自己定义唯一ID

3: 实体举例：
    3.1：Dataworks已有系统实体，可以在数据地图页面血缘图中看到
        (1) maxcompute-table.project.tableName  表示maxcompute 表的唯一ID
        (2) emr-table.kadfdfaccdd4ted   表示emr表的唯一ID
    3.2：用自定义实体： 用户根据自己业务需求，自己定义出唯一Id，（50个字节以内）
        (1) custom-api.listUser   表示自定义api实体，其唯一标识为listUser 
        (2) custom-table.db1.table2  标识自定义表实体，其唯一标识为 db1.table2
```',
    ),
    'ListEntityTags' => 
    array (
      'summary' => '列出实体的标签，目前只支持 maxcompute-table 类型的实体。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '187352',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'QualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实体唯一标识符，例如：maxcompute-table.projectA.tableA。',
            'type' => 'string',
            'required' => true,
            'example' => 'maxcompute-table.projectA.tableA',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiMetaResultModel',
            'description' => '返回结构。',
            'type' => 'object',
            'properties' => 
            array (
              'Data' => 
              array (
                'description' => '标签列表。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '标签。',
                  '$ref' => '#/components/schemas/UserEntityTag',
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求的 ID，用于定位日志、排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功：

true: 成功；  
false: 失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '101011005',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'Invalid.Entity.EntityTypeNotSupported',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP 状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Data\\": [\\n    {\\n      \\"TagKey\\": \\"priority\\",\\n      \\"TagValue\\": \\"p1\\"\\n    }\\n  ],\\n  \\"RequestId\\": \\"0000-ABCD-E****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"101011005\\",\\n  \\"ErrorMessage\\": \\"Invalid.Entity.EntityTypeNotSupported\\",\\n  \\"HttpStatusCode\\": 200\\n}","errorExample":""},{"type":"xml","example":"<ListEntityTagsResponse>\\n    <Data>\\n        <TagKey>priority</TagKey>\\n        <TagValue>p1</TagValue>\\n    </Data>\\n    <RequestId>0000-ABCD-E****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>101011005</ErrorCode>\\n    <ErrorMessage>Invalid.Entity.EntityTypeNotSupported</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n</ListEntityTagsResponse>","errorExample":""}]',
      'title' => '列出实体的标签',
    ),
    'SetEntityTags' => 
    array (
      'summary' => '设置实体的标签，目前只支持 maxcompute-table 类型的实体。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '187379',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'QualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实体唯一标识符，例如：maxcompute-table.projectA.tableA。',
            'type' => 'string',
            'required' => true,
            'example' => 'maxcompute-table.projectA.tableA',
          ),
        ),
        1 => 
        array (
          'name' => 'Tags',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '标签列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '标签。',
              'required' => false,
              '$ref' => '#/components/schemas/UserEntityTag',
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiMetaResultModel',
            'description' => '返回结构。',
            'type' => 'object',
            'properties' => 
            array (
              'Data' => 
              array (
                'description' => '操作是否成功：

true: 成功；
false: 失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的 ID，用于定位日志、排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功：

true: 成功；
false: 失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '101011005',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'Invalid.Entity.EntityTypeNotSupported',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP 状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0000-ABCD-E****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"101011005\\",\\n  \\"ErrorMessage\\": \\"Invalid.Entity.EntityTypeNotSupported\\",\\n  \\"HttpStatusCode\\": 200\\n}","errorExample":""},{"type":"xml","example":"<SetEntityTagsResponse>\\n    <Data>true</Data>\\n    <RequestId>0000-ABCD-E****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>101011005</ErrorCode>\\n    <ErrorMessage>Invalid.Entity.EntityTypeNotSupported</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n</SetEntityTagsResponse>","errorExample":""}]',
      'title' => '设置实体的标签',
    ),
    'RemoveEntityTags' => 
    array (
      'summary' => '移除实体的标签，目前只支持 maxcompute-table 类型的实体。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '187380',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'QualifiedName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实体唯一标识符，例如：maxcompute-table.projectA.tableA。',
            'type' => 'string',
            'required' => true,
            'example' => 'maxcompute-table.projectA.tableA',
          ),
        ),
        1 => 
        array (
          'name' => 'TagKeys',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '标签 Key 列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '标签 Key。',
              'type' => 'string',
              'required' => false,
              'example' => 'priority',
            ),
            'required' => true,
            'maxItems' => 100,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiMetaResultModel',
            'description' => '返回结构。',
            'type' => 'object',
            'properties' => 
            array (
              'Data' => 
              array (
                'description' => '操作是否成功：

true: 成功；  
false: 失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的 ID，用于定位日志、排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功：

true: 成功；  
false: 失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '101011005',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'Invalid.Entity.EntityTypeNotSupported',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP 状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0000-ABCD-E****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"101011005\\",\\n  \\"ErrorMessage\\": \\"Invalid.Entity.EntityTypeNotSupported\\",\\n  \\"HttpStatusCode\\": 200\\n}","errorExample":""},{"type":"xml","example":"<RemoveEntityTagsResponse>\\n    <Data>true</Data>\\n    <RequestId>0000-ABCD-E****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>101011005</ErrorCode>\\n    <ErrorMessage>Invalid.Entity.EntityTypeNotSupported</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n</RemoveEntityTagsResponse>","errorExample":""}]',
      'title' => '移除实体的标签',
    ),
    'ListEntitiesByTags' => 
    array (
      'summary' => '根据标签列出实体，目前只支持 maxcompute-table 类型的实体。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '187376',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'EntityType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实体的类型。',
            'type' => 'string',
            'required' => true,
            'example' => 'maxcompute-table',
          ),
        ),
        1 => 
        array (
          'name' => 'Tags',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '标签列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '标签。',
              'required' => false,
              '$ref' => '#/components/schemas/UserEntityTag',
            ),
            'required' => true,
            'maxItems' => 10,
          ),
        ),
        2 => 
        array (
          'name' => 'NextToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页信息，指定本次读取的起始点。',
            'type' => 'string',
            'required' => false,
            'example' => '12345',
            'default' => '0',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为 10 条、最大 100 条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '1000',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiMetaResultModel',
            'description' => '返回结构。',
            'type' => 'object',
            'properties' => 
            array (
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'NextToken' => 
                  array (
                    'description' => '分页信息，指定下一页读取的起始点。',
                    'type' => 'string',
                    'example' => '12345',
                  ),
                  'EntityList' => 
                  array (
                    'description' => '实体列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '实体。',
                      '$ref' => '#/components/schemas/Entity',
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求的 ID，用于定位日志、排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功：

true: 成功；  
false: 失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '101011005',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'Invalid.Entity.EntityTypeNotSupported',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP 状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Data\\": {\\n    \\"NextToken\\": \\"12345\\",\\n    \\"EntityList\\": [\\n      {\\n        \\"QualifiedName\\": \\"maxcompute_table.563f0357118d05ef145d6bddf2966cc23e86ca8f2f013f915e565afdf09f7a23\\",\\n        \\"TenantId\\": 12345,\\n        \\"EntityContent\\": {\\n          \\"test\\": \\"test\\",\\n          \\"test2\\": 1\\n        }\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"0000-ABCD-E****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"101011005\\",\\n  \\"ErrorMessage\\": \\"Invalid.Entity.EntityTypeNotSupported\\",\\n  \\"HttpStatusCode\\": 200\\n}","errorExample":""},{"type":"xml","example":"<ListEntitiesByTagsResponse>\\n    <Data>\\n        <NextToken>12345</NextToken>\\n        <EntityList>\\n            <QualifiedName>maxcompute_table.563f0357118d05ef145d6bddf2966cc23e86ca8f2f013f915e565afdf09f7a23</QualifiedName>\\n            <TenantId>12345</TenantId>\\n        </EntityList>\\n    </Data>\\n    <RequestId>0000-ABCD-E****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>101011005</ErrorCode>\\n    <ErrorMessage>Invalid.Entity.EntityTypeNotSupported</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n</ListEntitiesByTagsResponse>","errorExample":""}]',
      'title' => '根据标签列出实体',
    ),
    'CreateFile' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78185',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideBTP3AR',
          1 => 'FEATUREdide8FM783',
          2 => 'FEATUREdideHO4TQP',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FileFolderPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的路径。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '业务流程/第一个业务流程/MaxCompute/文件夹1/文件夹2',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。

该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'FileName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '文件名',
          ),
        ),
        3 => 
        array (
          'name' => 'FileDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的描述信息。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '这里是文件描述',
          ),
        ),
        4 => 
        array (
          'name' => 'FileType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的代码类型。

常用的代码及其对应的文件类型包括6（Shell）、10（ODPS SQL）、11（ODPS MR）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。

您可以调用[ListFileType](~~212428~~)接口，查询文件的代码类型。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '10',
          ),
        ),
        5 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件责任人的阿里云用户ID。如果该参数为空，则默认使用调用者的阿里云用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '1000000000001',
          ),
        ),
        6 => 
        array (
          'name' => 'Content',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件代码内容，不同代码类型（fileType）的文件，代码格式不同。您可以在运维中心找到对应类型的任务，右键单击查看代码，查看具体的代码格式。',
            'type' => 'string',
            'required' => false,
            'example' => 'SHOW TABLES;',
          ),
        ),
        7 => 
        array (
          'name' => 'AutoRerunTimes',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '出错自动重跑的次数，取值最大为10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => false,
            'example' => '3',
          ),
        ),
        8 => 
        array (
          'name' => 'AutoRerunIntervalMillis',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '出错自动重跑时间间隔，单位为毫秒。最大为1800000毫秒（30分钟）。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>出错自动重跑”的”重跑间隔“配置对应。
控制台中“重跑间隔”的时间单位为分钟，请在调用时注意转换时间。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '120000',
          ),
        ),
        9 => 
        array (
          'name' => 'RerunMode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '重跑属性。取值如下：
- ALL_ALLOWED：运行成功或失败后皆可重跑。
- FAILURE_ALLOWED：运行成功后不可重跑，运行失败后可以重跑。
- ALL_DENIED：运行成功或失败皆不可重跑。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>重跑属性”配置内容对应。',
            'type' => 'string',
            'required' => false,
            'example' => 'ALL_ALLOWED',
            'default' => 'ALL_ALLOWED',
            'enum' => 
            array (
              0 => 'ALL_ALLOWED',
              1 => 'FAILURE_ALLOWED',
              2 => 'ALL_DENIED',
            ),
          ),
        ),
        10 => 
        array (
          'name' => 'Stop',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否暂停调度，取值如下：
- true：暂停调度。
- false：不暂停调度。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>调度类型”配置为”暂停调度“时对应。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
            'default' => 'false',
          ),
        ),
        11 => 
        array (
          'name' => 'ParaValue',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度参数。多个参数之间用空格进行分割。 

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>参数”对应。您可以参考[调度参数](~~137548~~)配置。',
            'type' => 'string',
            'required' => false,
            'example' => 'a=x b=y',
          ),
        ),
        12 => 
        array (
          'name' => 'StartEffectDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '开始自动调度的毫秒时间戳。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>生效日期”配置的开始时间的毫秒时间戳对应。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'minimum' => '0',
            'example' => '1671608450000',
            'default' => '0',
          ),
        ),
        13 => 
        array (
          'name' => 'EndEffectDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '停止自动调度的时间戳，单位为毫秒。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>生效日期”配置的结束时间的毫秒时间戳对应。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'minimum' => '0',
            'example' => '1671694850000',
          ),
        ),
        14 => 
        array (
          'name' => 'CronExpress',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '周期调度的cron表达式，该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>cron表达式”对应。配置完“调度周期”及“定时调度时间”后，DataWorks会自动生成相应cron表达式。

示例如下：
- 每天凌晨5点30分定时调度：`00 30 05 * * ?`

- 每个小时的第15分钟定时调度：`00 15 00-23/1 * * ?`

- 每隔十分钟调度一次：`00 00/10 * * * ?`

- 每天8点到17点，每隔十分钟调度一次：`00 00-59/10 8-17 * * * ?`

- 每月的1日0点20分自动调度：`00 20 00 1 * ?`

- 从1月1日0点10分开始，每过3个月调度一次：`00 10 00 1 1-12/3 ?`

- 每周二、周五的0点5分自动调度：`00 05 00 * * 2,5`

由于DataWorks调度系统的规则，cron表达式有以下限制：

- 最短调度间隔时间为5分钟。

- 每天最早调度时间为0点5分。',
            'type' => 'string',
            'required' => false,
            'example' => '00 05 00 * * ?',
            'default' => 'day',
          ),
        ),
        15 => 
        array (
          'name' => 'CycleType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度周期的类型，包括NOT_DAY（分钟、小时）和DAY（日、周、月）。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>调度周期”对应。',
            'type' => 'string',
            'required' => false,
            'example' => 'DAY',
            'default' => 'DAY',
            'enum' => 
            array (
              0 => 'DAY',
              1 => 'NOT_DAY',
            ),
          ),
        ),
        16 => 
        array (
          'name' => 'DependentType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '依赖上一周期的方式。取值如下：
- SELF：依赖项选择本节点。
- CHILD：依赖项选择一级子节点。
- USER_DEFINE：依赖项选择其他节点。
- NONE：未选择依赖项，即不会依赖上一周期。   
- USER\\_DEFINE\\_AND\\_SELF： 跨周期依赖本节点和其他节点的组合的情况
- CHILD\\_AND\\_SELF：跨周期依赖一层子节点和本节点的组合的情况',
            'type' => 'string',
            'required' => false,
            'example' => 'NONE',
            'default' => 'NONE',
            'enum' => 
            array (
              0 => 'NONE',
              1 => 'USER_DEFINE',
              2 => 'CHILD',
              3 => 'SELF',
              4 => 'USER_DEFINE_AND_SELF',
              5 => 'CHILD_AND_SELF',
            ),
          ),
        ),
        17 => 
        array (
          'name' => 'DependentNodeIdList',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '依赖上一周期的节点列表。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        18 => 
        array (
          'name' => 'InputList',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件依赖的上游文件的输出名称，多个输出使用英文逗号（,）分隔。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖“选择”同周期“时的”父节点输出名称”对应。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'project_root,project.file1,project.001_out',
          ),
        ),
        19 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的名称。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间名称。

该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'dw_project',
          ),
        ),
        20 => 
        array (
          'name' => 'ResourceGroupIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件发布成任务后，任务执行时对应的资源组。您可以调用[ListResourceGroups](~~173913~~)通过**identifier**字段获取工作空间可用的资源组列表。


> 您需确认ListResourceGroups接口返回的资源组已绑定至创建文件所使用的工作空间，绑定后才能在CreateFile中使用。',
            'type' => 'string',
            'required' => false,
            'example' => 'group_375827434852437',
          ),
        ),
        21 => 
        array (
          'name' => 'ResourceGroupId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '该字段已废弃，请勿使用。

文件发布成任务后，任务执行时对应的资源组。对应页面上调度配置>资源属性>调度资源组的配置。与ResourceGroupIdentifier二者设置其一即可。

您可以通过[ListResourceGroups](~~173913~~)接口获取工作空间可用的资源组列表。ResourceGroupType传1，拿到结果后取出ID字段。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '375827434852437',
          ),
        ),
        22 => 
        array (
          'name' => 'ConnectionName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件发布成任务后，任务执行时连接的数据源。
您可以调用[UpdateDataSource](~~211432~~)接口获取工作空间可用的数据源列表。
',
            'type' => 'string',
            'required' => false,
            'example' => 'odps_source',
          ),
        ),
        23 => 
        array (
          'name' => 'AutoParsing',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件是否开启自动解析功能。取值如下：
- true：文件会自动解析代码。
- false：文件不会自动解析代码。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖”选择“同周期”时的“代码解析”对应。',
            'type' => 'boolean',
            'required' => false,
            'docRequired' => false,
            'example' => 'true',
            'default' => 'true',
          ),
        ),
        24 => 
        array (
          'name' => 'SchedulerType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度的类型，取值如下：
- NORMAL：正常调度任务。
- MANUAL：手动任务，不会被日常调度，对应手动业务流程下的节点。
- PAUSE：暂停任务。
- SKIP：空跑任务，被日常调度，但启动调度时直接被置为成功。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'NORMAL',
            'enum' => 
            array (
              0 => 'NORMAL',
              1 => 'MANUAL',
              2 => 'PAUSE',
              3 => 'SKIP',
            ),
          ),
        ),
        25 => 
        array (
          'name' => 'AdvancedSettings',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务的高级配置。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，EMR Spark Streaming和EMR Streaming SQL数据开发任务，编辑页面右侧导航栏的“高级设置“对应。

当前仅EMR Spark Streaming和EMR Streaming SQL任务支持配置该参数，并且参数为JSON格式。',
            'type' => 'string',
            'required' => false,
            'example' => '{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}',
          ),
        ),
        26 => 
        array (
          'name' => 'StartImmediately',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '发布后是否立即启动。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，EMR Spark Streaming和EMR Streaming SQL数据开发任务，编辑页面右侧导航栏的“配置>时间属性>启动方式“对应。',
            'type' => 'boolean',
            'required' => false,
            'docRequired' => false,
            'example' => 'true',
            'default' => 'false',
          ),
        ),
        27 => 
        array (
          'name' => 'InputParameters',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的上下文输入参数。参数为JSON格式，包含的字段可参考[GetFile](~~173954~~)接口返回值中的InputContextParameterList参数结构。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>节点上下文>本节点输入参数“对应。',
            'type' => 'string',
            'required' => false,
            'example' => '[{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]',
          ),
        ),
        28 => 
        array (
          'name' => 'OutputParameters',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的上下文输出参数。参数为JSON格式，包含的字段可参考[GetFile](~~173954~~)接口返回值中的OutputContextParameterList参数结构。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>节点上下文>本节点输出参数“对应。',
            'type' => 'string',
            'required' => false,
            'example' => '[{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]',
          ),
        ),
        29 => 
        array (
          'name' => 'IgnoreParentSkipRunningProperty',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否沿用上一周期空跑属性。取值如下：

- true：沿用上一周期空跑属性。

- false：不沿用上一周期空跑属性。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        30 => 
        array (
          'name' => 'CreateFolderIfNotExists',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '当参数中指定的目录（FileFolderPath）在系统中不存在时，是否自动创建此目录。取值如下：

true：若此目录不存在，自动创建此目录

false：若此目录不存在，调用失败',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '文件创建成功后的ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '1000001',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 1000001,\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateFileResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>1000001</Data>\\n    <RequestId>0000-ABCD-EFG</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n</CreateFileResponse>","errorExample":""}]',
      'title' => '在数据开发中创建一个文件',
      'summary' => '调用CreateFile，在数据开发中创建一个文件。目前不支持调用该接口创建数据集成节点任务。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateUdfFile' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78200',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FileFolderPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数文件所在的文件夹路径。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '业务流程/第一个业务流程/函数/字符串处理',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID，您可以单击页面右上角的小扳手图标，进入工作空间管理页面查看。

',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'FileName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数的名称。

',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'StringConcat',
          ),
        ),
        3 => 
        array (
          'name' => 'FunctionType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数的分类，对应创建函数表单中的函数类型一项，包括MATH（数学运算函数）、AGGREGATE（聚合函数）、STRING（字符串处理函数）、DATE（日期处理函数）、ANALYTIC（窗口函数）和OTHER（其他函数）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'STRING',
            'enum' => 
            array (
              0 => 'MATH',
              1 => 'AGGREGATE',
              2 => 'STRING',
              3 => 'DATE',
              4 => 'ANALYTIC',
              5 => 'OTHER',
            ),
          ),
        ),
        4 => 
        array (
          'name' => 'ClassName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数定义所在的类名，对应创建函数表单的类名一项。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'com.alibaba.DataWorks.api.udf.StringConcat',
          ),
        ),
        5 => 
        array (
          'name' => 'Resources',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数引用的资源名列表，对应创建表中的资源列表。多个资源名称之间使用英文逗号（,）分隔。

',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'string-concat-1.0.0.jar,commons-lang-2.6.jar',
          ),
        ),
        6 => 
        array (
          'name' => 'UdfDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数用途的说明，对应创建函数表单中的描述。

',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '把几个字符串连接起来生成一个新的字符串',
          ),
        ),
        7 => 
        array (
          'name' => 'CmdDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数调用的命令格式，对应创建函数表单中的命令格式。

',
            'type' => 'string',
            'required' => false,
            'example' => 'StringConcat(String... substrs)',
          ),
        ),
        8 => 
        array (
          'name' => 'ParameterDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数入参的说明，对应创建函数表单中的参数说明。

',
            'type' => 'string',
            'required' => false,
            'example' => '需要连接的字符串列表',
            'default' => '',
          ),
        ),
        9 => 
        array (
          'name' => 'ReturnValue',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数的返回值说明，对应创建函数表单中的返回值。

',
            'type' => 'string',
            'required' => false,
            'example' => '所有字符串按照输入顺序前后连接生成的新字符串',
            'default' => 'false',
          ),
        ),
        10 => 
        array (
          'name' => 'Example',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数调用示例，对应创建函数表单中的示例。

',
            'type' => 'string',
            'required' => false,
            'example' => 'StringConcat(\'a\', \'b\', \'c\')',
          ),
        ),
        11 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的唯一标识符，即数据开发页面顶部切换工作空间处的英文标识。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        12 => 
        array (
          'name' => 'CreateFolderIfNotExists',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '当参数中指定的目录（FileFolderPath）在系统中不存在时，是否自动创建此目录。取值如下：

true：若此目录不存在，自动创建此目录

false：若此目录不存在，调用失败',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。

',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '文件创建成功后的ID。

',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '100000002',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。

',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。

',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。

',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。

',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 100000002,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateUdfFileResponse>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>100000002</Data>\\n    <Success>true</Success>\\n</CreateUdfFileResponse>","errorExample":""}]',
      'title' => '在数据开发中创建函数类型文件',
      'summary' => '调用CreateUdfFile，在数据开发中创建函数类型文件。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateBusiness' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78175',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID，您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间管理页面查看ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的唯一标识符（即工作空间名称）。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面查看名称。
该参数与projectId参数二者必须设置其一，以确定本次API调用操作的DataWorks项目。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'BusinessName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程名称，同一个项目空间下的业务流程名称必须唯一。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '我的业务流程',
          ),
        ),
        3 => 
        array (
          'name' => 'Description',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的描述信息。',
            'type' => 'string',
            'required' => false,
            'example' => '这是一个通过接口创建的业务流程',
          ),
        ),
        4 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程对应责任人的阿里云账号ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，鼠标悬停至顶部菜单栏右侧的用户头像，查看账号ID。如果该参数为空，则默认使用调用者的阿里云账号ID。',
            'type' => 'string',
            'required' => false,
            'example' => '1000000000001',
          ),
        ),
        5 => 
        array (
          'name' => 'UseType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程所属的功能模块。取值如下：
- NORMAL（数据开发）
- MANUAL_BIZ（手动业务流程）',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'NORMAL',
            'default' => 'NORMAL',
            'enum' => 
            array (
              0 => 'NORMAL',
              1 => 'MANUAL_BIZ',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'BusinessId' => 
              array (
                'description' => '业务流程ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '100001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"BusinessId\\": 100001\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<BusinessId>100001</BusinessId>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '创建业务流程',
      'summary' => '调用CreateBusiness，创建数据开发（DataStudio）的业务流程。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteBusiness' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78202',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。
',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'BusinessId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的ID，您可以调用[ListBusiness](~~173945~~)接口，根据名称查询对应业务流程的ID。

',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1000001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '删除业务流程',
      'summary' => '调用DeleteBusiness删除业务流程。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateFolder' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78186',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'FolderPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹的路径。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '业务流程/系统数据/MaxCompute/导入层',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '新建文件夹的唯一标识符。',
                'type' => 'string',
                'example' => 'bdfd68****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"bdfd68****\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateFolderResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>bdfd68****</Data>\\n    <RequestId>0000-ABCD-EFG</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n</CreateFolderResponse>","errorExample":""}]',
      'title' => '创建文件夹',
      'summary' => '调用CreateFolder创建文件夹。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateBusiness' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78366',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'BusinessName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的名称。您可以调用[ListBusiness](~~173945~~)接口获取。
',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'MyBusiness',
          ),
        ),
        3 => 
        array (
          'name' => 'Description',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的描述信息。
',
            'type' => 'string',
            'required' => false,
            'example' => 'modified from my first business',
          ),
        ),
        4 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的责任人。您可以调用[ListBusiness](~~173945~~)接口获取。',
            'type' => 'string',
            'required' => false,
            'example' => '348428****',
          ),
        ),
        5 => 
        array (
          'name' => 'BusinessId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的ID，您可以调用[ListBusiness](~~173945~~)接口获取。

',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '300000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '更新业务流程',
      'summary' => '调用UpdateBusiness更新业务流程。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListFiles' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78310',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FileFolderPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件所在的文件夹路径。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '业务流程/我的第一个业务流程/MaxCompute/ods层',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。

该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'Keyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件名称的关键字。支持模糊匹配，即输入关键字即可查询包含该关键字的所有文件。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'ods',
          ),
        ),
        3 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的名称。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间名称。

该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        4 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        5 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大为100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => false,
            'maximum' => '100',
            'minimum' => '0',
            'example' => '10',
            'default' => '10',
          ),
        ),
        6 => 
        array (
          'name' => 'UseType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件所属的功能模块。取值如下：
- NORMAL：数据开发。
- MANUAL：手动任务。
- MANUAL_BIZ：手动业务流程。
- SKIP：数据开发的空跑调度。
- ADHOCQUERY：临时查询。
- COMPONENT：组件管理。',
            'type' => 'string',
            'required' => false,
            'example' => 'NORMAL',
          ),
        ),
        7 => 
        array (
          'name' => 'FileTypes',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的代码类型。

常用的代码及其对应的文件类型包括6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、97（PAI）、98（组合节点）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1002（PAI内部节点）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1106（遍历节点（foreach））、1221（PyODPS 3）。',
            'type' => 'string',
            'required' => false,
            'example' => '10,23',
          ),
        ),
        8 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件责任人。',
            'type' => 'string',
            'required' => false,
            'example' => '3726346****',
          ),
        ),
        9 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度节点的ID。您可以调用[ListNodes](~~173979~~)接口获取节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '123541234',
          ),
        ),
        10 => 
        array (
          'name' => 'NeedContent',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询结果是否包含文件内容（对于内容较多的文件，可能存在较长的网络传输延时）。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        11 => 
        array (
          'name' => 'NeedAbsoluteFolderPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '查询结果是否包含文件所在的文件夹的路径。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        12 => 
        array (
          'name' => 'ExactFileName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '精确匹配的文件名称，查询结果的文件名称与该参数完全一致。',
            'type' => 'string',
            'required' => false,
            'example' => 'ods_create.sql',
          ),
        ),
        13 => 
        array (
          'name' => 'FileIdIn',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'Fileld列表，查询结果的文件ID集合只能是该列表的子集。最多支持一次指定50个FileId。',
            'type' => 'string',
            'required' => false,
            'example' => '78237,816123',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '满足条件的文件列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '请求的数据页数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的数据条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '满足条件的数据总条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '13',
                  ),
                  'Files' => 
                  array (
                    'description' => '文件详情。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '文件信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'CommitStatus' => 
                        array (
                          'description' => '文件当前的提交状态，包括0（未提交最新的代码）和1（已提交最新的代码）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'AutoParsing' => 
                        array (
                          'description' => '文件是否开启自动解析功能。取值如下：
- true：文件会自动解析代码。
- false：文件不会自动解析代码。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖”选择“同周期”时的“代码解析”对应。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'Owner' => 
                        array (
                          'description' => '文件责任人的阿里云用户ID。
',
                          'type' => 'string',
                          'example' => '3872572****',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '文件创建时间的毫秒时间戳。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1593950832000',
                        ),
                        'FileType' => 
                        array (
                          'description' => '文件的代码类型。常用的代码及其对应的文件类型包括6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                        'CurrentVersion' => 
                        array (
                          'description' => '文件当前已经提交的最新版本号。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '2',
                        ),
                        'BizId' => 
                        array (
                          'description' => '文件所属的业务流程ID。该字段已废弃，请使用BusinessId字段。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '300000',
                        ),
                        'LastEditUser' => 
                        array (
                          'description' => '最近一次编辑文件的用户阿里云用户ID。
',
                          'type' => 'string',
                          'example' => '38748246285727',
                        ),
                        'FileName' => 
                        array (
                          'description' => '文件的名称。
',
                          'type' => 'string',
                          'example' => 'ods_user_info_d',
                        ),
                        'ConnectionName' => 
                        array (
                          'description' => '文件对应的任务执行时所使用的数据源名称。',
                          'type' => 'string',
                          'example' => 'odps_source',
                        ),
                        'UseType' => 
                        array (
                          'description' => '文件所属的功能模块。取值如下：
- NORMAL：数据开发。
- MANUAL：手动任务。
- MANUAL_BIZ：手动业务流程。
- SKIP：数据开发的空跑调度。
- ADHOCQUERY：临时查询。
- COMPONENT：组件管理。
',
                          'type' => 'string',
                          'example' => 'NORMAL',
                        ),
                        'FileFolderId' => 
                        array (
                          'description' => '文件所在文件夹的ID。
',
                          'type' => 'string',
                          'example' => '2735c2****',
                        ),
                        'FileId' => 
                        array (
                          'description' => '文件的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000001',
                        ),
                        'ParentId' => 
                        array (
                          'description' => '如果当前文件是组合节点文件的内部文件，该字段标识对应组合节点文件的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '-1',
                        ),
                        'CreateUser' => 
                        array (
                          'description' => '文件创建者的阿里云用户ID。
',
                          'type' => 'string',
                          'example' => '382762****',
                        ),
                        'IsMaxCompute' => 
                        array (
                          'description' => '如果当前文件是MaxCompute资源文件，该字段标识该资源文件是否需要上传至MaxCompute。

仅当文件是MaxCompute资源文件时才需要配置该参数。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'BusinessId' => 
                        array (
                          'description' => '文件所属的业务流程ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '300000',
                        ),
                        'FileDescription' => 
                        array (
                          'description' => '文件的描述信息。
',
                          'type' => 'string',
                          'example' => 'my test datastudio file',
                        ),
                        'LastEditTime' => 
                        array (
                          'description' => '最近一次编辑文件的毫秒时间戳。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1593950832000',
                        ),
                        'Content' => 
                        array (
                          'description' => '该参数已废弃。您可通过[GetFile](~~173954~~)接口查询。',
                          'type' => 'string',
                          'example' => 'SHOW TABLES;',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '提交文件后，在调度系统生成的调度任务的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '300001',
                        ),
                        'AbsoluteFolderPath' => 
                        array (
                          'description' => '文件所在的文件夹的路径',
                          'type' => 'string',
                          'example' => '业务流程/我的第一个业务流程/MaxCompute/ods层',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 13,\\n    \\"Files\\": [\\n      {\\n        \\"CommitStatus\\": 1,\\n        \\"AutoParsing\\": true,\\n        \\"Owner\\": \\"3872572****\\",\\n        \\"CreateTime\\": 1593950832000,\\n        \\"FileType\\": 10,\\n        \\"CurrentVersion\\": 2,\\n        \\"BizId\\": 300000,\\n        \\"LastEditUser\\": \\"38748246285727\\",\\n        \\"FileName\\": \\"ods_user_info_d\\",\\n        \\"ConnectionName\\": \\"odps_source\\",\\n        \\"UseType\\": \\"NORMAL\\",\\n        \\"FileFolderId\\": \\"2735c2****\\",\\n        \\"FileId\\": 10000001,\\n        \\"ParentId\\": -1,\\n        \\"CreateUser\\": \\"382762****\\",\\n        \\"IsMaxCompute\\": false,\\n        \\"BusinessId\\": 300000,\\n        \\"FileDescription\\": \\"my test datastudio file\\",\\n        \\"LastEditTime\\": 1593950832000,\\n        \\"Content\\": \\"SHOW TABLES;\\",\\n        \\"NodeId\\": 300001,\\n        \\"AbsoluteFolderPath\\": \\"业务流程/我的第一个业务流程/MaxCompute/ods层\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListFilesResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>13</TotalCount>\\n        <Files>\\n            <CommitStatus>1</CommitStatus>\\n            <AutoParsing>true</AutoParsing>\\n            <Owner>3872572****</Owner>\\n            <CreateTime>1593950832000</CreateTime>\\n            <FileType>10</FileType>\\n            <CurrentVersion>2</CurrentVersion>\\n            <BizId>300000</BizId>\\n            <LastEditUser>38748246285727</LastEditUser>\\n            <FileName>ods_user_info_d</FileName>\\n            <ConnectionName>odps_source</ConnectionName>\\n            <UseType>NORMAL</UseType>\\n            <FileFolderId>2735c2****</FileFolderId>\\n            <FileId>10000001</FileId>\\n            <ParentId>-1</ParentId>\\n            <CreateUser>382762****</CreateUser>\\n            <IsMaxCompute>false</IsMaxCompute>\\n            <BusinessId>300000</BusinessId>\\n            <FileDescription>my test datastudio file</FileDescription>\\n            <LastEditTime>1593950832000</LastEditTime>\\n            <Content>SHOW TABLES;</Content>\\n            <NodeId>300001</NodeId>\\n        </Files>\\n    </Data>\\n</ListFilesResponse>","errorExample":""}]',
      'title' => '查询文件列表',
      'summary' => '调用ListFiles查询文件列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'EstablishRelationTableToBusiness' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78225',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideEPPSOE',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID，您可以单击页面右上角的小扳手图标，进入工作空间管理页面查看。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的唯一标识符，即数据开发页面顶部切换工作空间处的英文标识。

该参数与ProjectId参数二者必须设置其一，以确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw',
          ),
        ),
        2 => 
        array (
          'name' => 'BusinessId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的ID，您可以使用[ListBusiness](~~173945~~)获取对应业务流程的ID。

',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1000001',
          ),
        ),
        3 => 
        array (
          'name' => 'TableGuid',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '表的UUID，您可以通过[SearchMetaTables](~~173919~~)获取对应表的UUID。

',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps.dw_project.tb1',
          ),
        ),
        4 => 
        array (
          'name' => 'FolderId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹的ID，您可以使用[GetFolder](~~173952~~)或者[ListFolders](~~173955~~)获取对应文件夹的ID。


',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '2eb6f9****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '导入表至业务流程',
      'summary' => '相当于在数据开发页面右键单击业务流程，选择导入表的操作。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SubmitFile' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78360',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'FileId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的ID，您可以通过[ListFiles](~~173942~~)查询对应文件的ID。

',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1000000',
          ),
        ),
        3 => 
        array (
          'name' => 'Comment',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '本次提交的说明信息。',
            'type' => 'string',
            'required' => false,
            'example' => '第一次提交任务',
          ),
        ),
        4 => 
        array (
          'name' => 'SkipAllDeployFileExtensions',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件提交成功后是否跳过发布前检查：
- false：不跳过。文件提交后会自动触发发布前检查流程，检查通过后才会进入可发布状态。
- true：跳过。文件提交后不会触发发布前检查流程，可直接进入发布流程。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
            'default' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '发布包的ID，后续需要将该ID作为参数调用[GetDeployment](~~173950~~)接口，获取本次发布的具体情况。

',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '3000001',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 3000001,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\"\\n}","errorExample":""},{"type":"xml","example":"<SubmitFileResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>3000001</Data>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n</SubmitFileResponse>","errorExample":""}]',
      'title' => '提交文件至调度系统开发环境',
      'summary' => '提交文件至调度系统的开发环境，生成对应的任务。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListBusiness' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78297',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的数据条数，默认为10条，最大为100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '100',
            'minimum' => '0',
            'example' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'Keyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '关键字，用于模糊匹配业务流程的名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'my',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '业务流程列表的详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前数据页的页码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '当前数据页的数据条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '满足查询条件的数据总条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '13',
                  ),
                  'Business' => 
                  array (
                    'description' => '业务流程的详情。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '业务流程列表信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Owner' => 
                        array (
                          'description' => '业务流程的责任人。',
                          'type' => 'string',
                          'example' => '34824327****',
                        ),
                        'Description' => 
                        array (
                          'description' => '业务流程的描述信息。',
                          'type' => 'string',
                          'example' => '我的第一个业务流程',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '业务流程所在工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                        'BusinessId' => 
                        array (
                          'description' => '业务流程的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '3000001',
                        ),
                        'BusinessName' => 
                        array (
                          'description' => '业务流程的名称。',
                          'type' => 'string',
                          'example' => '我的第一个业务流程',
                        ),
                        'UseType' => 
                        array (
                          'description' => '业务流程所属的功能模块，包括NORMAL（数据开发）和MANUAL_BIZ（手动业务流程）。',
                          'type' => 'string',
                          'example' => 'NORMAL',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 13,\\n    \\"Business\\": [\\n      {\\n        \\"Owner\\": \\"34824327****\\",\\n        \\"Description\\": \\"我的第一个业务流程\\",\\n        \\"ProjectId\\": 10000,\\n        \\"BusinessId\\": 3000001,\\n        \\"BusinessName\\": \\"我的第一个业务流程\\",\\n        \\"UseType\\": \\"NORMAL\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListBusinessResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>13</TotalCount>\\n        <Business>\\n            <Owner>34824327****</Owner>\\n            <Description>我的第一个业务流程</Description>\\n            <ProjectId>10000</ProjectId>\\n            <BusinessId>3000001</BusinessId>\\n            <BusinessName>我的第一个业务流程</BusinessName>\\n            <UseType>NORMAL</UseType>\\n        </Business>\\n    </Data>\\n</ListBusinessResponse>","errorExample":""}]',
      'title' => '查询业务流程的列表',
      'summary' => '调用ListBusiness查询业务流程的列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetFileVersion' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78247',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FileId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的ID，您可以通过[ListFiles](~~173942~~)查询对应文件的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1000001',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID，您可以单击页面右上角的小扳手图标，进入工作空间管理页面查看。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的唯一标识符，即数据开发页面顶部切换工作空间处的英文标识。

该参数与ProjectId参数二者必须设置其一，以确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        3 => 
        array (
          'name' => 'FileVersion',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '需要查询的文件版本。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '2',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '文件的版本详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'FileContent' => 
                  array (
                    'description' => '生成本次文件版本的文件代码。',
                    'type' => 'string',
                    'example' => 'SHOW TABLES;',
                  ),
                  'IsCurrentProd' => 
                  array (
                    'description' => '本次文件版本是否为当前生产环境的最新版本。
- true：是最新版本。
- false：不是最新版本。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'Status' => 
                  array (
                    'description' => '文件版本当前的状态，取值如下：
- COMMITTING（提交中）
- COMMITTED或CHECK_OK（已提交）
- PACKAGED（准备发布）
- DEPLOYING（发布中）
- DEPLOYED（已发布）
- CANCELLED（取消发布）',
                    'type' => 'string',
                    'example' => 'COMMITTED',
                  ),
                  'NodeContent' => 
                  array (
                    'description' => '本次文件版本生成时的调度配置。',
                    'type' => 'string',
                    'example' => '{"cycleType":0,"cronExpress":"00 05 00 * * ?"}',
                  ),
                  'CommitUser' => 
                  array (
                    'description' => '生成本次文件版本的阿里云用户ID。',
                    'type' => 'string',
                    'example' => '7384234****',
                  ),
                  'Comment' => 
                  array (
                    'description' => '本次文件版本的说明。',
                    'type' => 'string',
                    'example' => '第二次版本提交',
                  ),
                  'FilePropertyContent' => 
                  array (
                    'description' => '生成本次文件版本的文件基本信息。',
                    'type' => 'string',
                    'example' => '{"fileName":"ods_user_info_d","fileType":10}',
                  ),
                  'FileName' => 
                  array (
                    'description' => '生成本次文件版本的文件名。',
                    'type' => 'string',
                    'example' => 'ods_user_info_d',
                  ),
                  'UseType' => 
                  array (
                    'description' => '文件所属的功能模块，取值如下：
- 0：NORMAL（数据开发）
- 1：MANUAL（手动任务）
- 2：MANUAL_BIZ（手动工作流）
- 3：SKIP（数据开发的空跑调度）
- 10：ADHOCQUERY（临时查询）
- 30：COMPONENT（组件管理）
',
                    'type' => 'string',
                    'example' => '0',
                  ),
                  'ChangeType' => 
                  array (
                    'description' => '本次文件版本的变更类型，包括CREATE、UPDATE和DELETE。',
                    'type' => 'string',
                    'example' => 'UPDATE',
                  ),
                  'FileVersion' => 
                  array (
                    'description' => '文件的版本。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '2',
                  ),
                  'CommitTime' => 
                  array (
                    'description' => '文件版本生成的毫秒时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1593881265000',
                  ),
                  'NodeId' => 
                  array (
                    'description' => '文件版本生成时对应的调度任务ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '3000001',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"FileContent\\": \\"SHOW TABLES;\\",\\n    \\"IsCurrentProd\\": true,\\n    \\"Status\\": \\"COMMITTED\\",\\n    \\"NodeContent\\": \\"{\\\\\\"cycleType\\\\\\":0,\\\\\\"cronExpress\\\\\\":\\\\\\"00 05 00 * * ?\\\\\\"}\\",\\n    \\"CommitUser\\": \\"7384234****\\",\\n    \\"Comment\\": \\"第二次版本提交\\",\\n    \\"FilePropertyContent\\": \\"{\\\\\\"fileName\\\\\\":\\\\\\"ods_user_info_d\\\\\\",\\\\\\"fileType\\\\\\":10}\\",\\n    \\"FileName\\": \\"ods_user_info_d\\",\\n    \\"UseType\\": \\"0\\",\\n    \\"ChangeType\\": \\"UPDATE\\",\\n    \\"FileVersion\\": 2,\\n    \\"CommitTime\\": 1593881265000,\\n    \\"NodeId\\": 3000001\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetFileVersionResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <FileContent>SHOW TABLES;</FileContent>\\n        <IsCurrentProd>true</IsCurrentProd>\\n        <Status>COMMITTED</Status>\\n        <NodeContent>{\\"cycleType\\":0,\\"cronExpress\\":\\"00 05 00 * * ?\\"}</NodeContent>\\n        <CommitUser>7384234****</CommitUser>\\n        <Comment>第二次版本提交</Comment>\\n        <FilePropertyContent>{\\"fileName\\":\\"ods_user_info_d\\",\\"fileType\\":10}</FilePropertyContent>\\n        <FileName>ods_user_info_d</FileName>\\n        <UseType>0</UseType>\\n        <ChangeType>UPDATE</ChangeType>\\n        <FileVersion>2</FileVersion>\\n        <CommitTime>1593881265000</CommitTime>\\n        <NodeId>3000001</NodeId>\\n    </Data>\\n</GetFileVersionResponse>","errorExample":""}]',
      'title' => '获取文件的版本详情',
      'summary' => '调用GetFileVersion获取文件的版本详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteFolder' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78209',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'FolderId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹的ID，您可以通过[ListFolders](~~173955~~)查询对应文件夹的ID。

',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2eb6f9****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '删除数据开发页面的文件夹',
      'summary' => '调用DeleteFolder删除数据开发页面的文件夹。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteFile' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78208',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。

该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的名称。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间名称。

该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'FileId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的ID，您可以使用[ListFiles](~~173942~~)接口查询对应文件的ID。

',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'DeploymentId' => 
              array (
                'description' => '如果文件已经提交过，那么DeleteFile接口会同时触发一个异步在调度系统删除的流程，需要用DeleteFile接口返回的DeploymentId继续调用GetDeployment轮询被触发的异步删除流程的状态。

如果该字段为空，则说明文件已经删除完毕，无需继续轮询。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '1000000001',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"DeploymentId\\": 1000000001,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteFileResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <DeploymentId>1000000001</DeploymentId>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n</DeleteFileResponse>","errorExample":""}]',
      'title' => '删除数据开发中的文件',
      'summary' => '调用DeleteFile删除数据开发中的文件。如果文件已经提交过，那么DeleteFile API会同时触发一个异步在调度系统删除的流程，需要用DeleteFile  API返回的DeploymentId继续调用GetDeployment轮询被触发的异步删除流程的状态。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetDeployment' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78242',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID，您可以单击页面右上角的小扳手图标，进入工作空间管理页面查看。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的唯一标识符，即数据开发页面顶部切换工作空间处的英文标识。

该参数与ProjectId参数二者必须设置其一，以确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'DeploymentId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '发布包的ID。执行[SubmitFile](~~173944~~) 和[DeployFile](~~173956~~)时，都会生成一个对应的发布包ID。

',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '3000001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '发布包的详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'Deployment' => 
                  array (
                    'description' => '发布包的详情。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Status' => 
                      array (
                        'description' => '发布包当前的状态，包括0（就绪）、1（成功）和2（失败）。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '1',
                      ),
                      'ErrorMessage' => 
                      array (
                        'description' => '当发布包执行失败（status为2）后，该字段记录具体的错误信息。',
                        'type' => 'string',
                        'example' => '成功',
                      ),
                      'FromEnvironment' => 
                      array (
                        'description' => '执行本次发布所在的环境，包括0（本地）和1（开发环境）。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '0',
                      ),
                      'ToEnvironment' => 
                      array (
                        'description' => '发布文件信息的目标环境，包括1（开发环境）和2（生产环境）。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '1',
                      ),
                      'CheckingStatus' => 
                      array (
                        'description' => '当前发布包涉及节点的检查状态，当发布包的目标环境是开发环境（toEnviroment=1）时，只有发布包的Status为1并且CheckingStatus为空时，才可以继续进行文件到生产环境的发布。
- 7：检查未通过
- 8：正在处于检查中的状态',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '7',
                      ),
                      'CreateTime' => 
                      array (
                        'description' => '发布包生成的毫秒时间戳。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1593877765000',
                      ),
                      'HandlerId' => 
                      array (
                        'description' => '发布包执行者的阿里云用户ID。',
                        'type' => 'string',
                        'example' => '2003****',
                      ),
                      'CreatorId' => 
                      array (
                        'description' => '发布包创建者的阿里云用户ID。',
                        'type' => 'string',
                        'example' => '20030****',
                      ),
                      'ExecuteTime' => 
                      array (
                        'description' => '发布包开始执行的毫秒时间戳。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1593877765000',
                      ),
                      'Name' => 
                      array (
                        'description' => '发布包的名称，显示在任务发布>发布包列表页面。',
                        'type' => 'string',
                        'example' => 'ods_user_info_d-2020-07-04_20030****',
                      ),
                    ),
                  ),
                  'DeployedItems' => 
                  array (
                    'description' => '发布项列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '发布项详情',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'FileId' => 
                        array (
                          'description' => '文件的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '507642378',
                        ),
                        'FileVersion' => 
                        array (
                          'description' => '文件的版本。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '7',
                        ),
                        'Status' => 
                        array (
                          'description' => '* UNPUBLISHED(0): 未发布
* SUCCESS(1): 发布成功
* ERROR(2): 发布失败
* CLONED(3): 克隆成功
* DEPLOY_ERROR(4): 发布失败
* CLONING(5): 克隆中
* REJECT(6): 发布驳回',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"Deployment\\": {\\n      \\"Status\\": 1,\\n      \\"ErrorMessage\\": \\"成功\\",\\n      \\"FromEnvironment\\": 0,\\n      \\"ToEnvironment\\": 1,\\n      \\"CheckingStatus\\": 7,\\n      \\"CreateTime\\": 1593877765000,\\n      \\"HandlerId\\": \\"2003****\\",\\n      \\"CreatorId\\": \\"20030****\\",\\n      \\"ExecuteTime\\": 1593877765000,\\n      \\"Name\\": \\"ods_user_info_d-2020-07-04_20030****\\"\\n    },\\n    \\"DeployedItems\\": [\\n      {\\n        \\"FileId\\": 507642378,\\n        \\"FileVersion\\": 7,\\n        \\"Status\\": 1\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDeploymentResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <Deployment>\\n            <Status>1</Status>\\n            <ErrorMessage>成功</ErrorMessage>\\n            <FromEnvironment>0</FromEnvironment>\\n            <ToEnvironment>1</ToEnvironment>\\n            <CheckingStatus>7</CheckingStatus>\\n            <CreateTime>1593877765000</CreateTime>\\n            <HandlerId>2003****</HandlerId>\\n            <CreatorId>20030****</CreatorId>\\n            <ExecuteTime>1593877765000</ExecuteTime>\\n            <Name>ods_user_info_d-2020-07-04_20030****</Name>\\n        </Deployment>\\n        <DeployedItems>\\n            <FileId>507642378</FileId>\\n            <FileVersion>7</FileVersion>\\n            <Status>1</Status>\\n        </DeployedItems>\\n    </Data>\\n</GetDeploymentResponse>","errorExample":""}]',
      'title' => '获取发布包的详情',
      'summary' => '调用GetDeployment获取发布包的详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateFile' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78372',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideBTP3AR',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FileFolderPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件所在的路径。
',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '业务流程/第一个业务流程/数据集成/文件夹1/文件夹2',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间管理页面获取ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'FileName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的名称。您可以通过重新设置FileName的值来修改文件名称。
例如，使用[ListFiles](~~173942~~)接口查询目标目录下的文件ID，通过[UpdateFile](~~173951~~)接口，输入查询的文件ID至FileId参数，并配置FileName的参数值，即可修改相应文件的名称。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'ods_user_info_d',
          ),
        ),
        3 => 
        array (
          'name' => 'FileDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的描述。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '这里是文件描述',
          ),
        ),
        4 => 
        array (
          'name' => 'Content',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件代码内容，不同代码类型（fileType）的文件，代码格式不同。您可以在运维中心，右键单击对应类型的任务，选择查看代码，查看具体的代码格式。',
            'type' => 'string',
            'required' => false,
            'example' => 'SELECT "1";',
          ),
        ),
        5 => 
        array (
          'name' => 'AutoRerunTimes',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件出错后，自动重跑的次数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'example' => '3',
          ),
        ),
        6 => 
        array (
          'name' => 'AutoRerunIntervalMillis',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '出错自动重跑时间间隔，单位为毫秒。最大为1800000毫秒（30分钟）。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>出错自动重跑”的”重跑间隔“配置对应。
控制台中“重跑间隔”的时间单位为分钟，请在调用时注意转换时间。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '120000',
          ),
        ),
        7 => 
        array (
          'name' => 'RerunMode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '重跑属性。取值如下：
- ALL_ALLOWED：运行成功或失败后皆可重跑。
- FAILURE_ALLOWED：运行成功后不可重跑，运行失败后可以重跑。
- ALL_DENIED：运行成功或失败皆不可重跑。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>重跑属性”配置内容对应。',
            'type' => 'string',
            'required' => false,
            'example' => 'ALL_ALLOWED',
            'enum' => 
            array (
              0 => 'ALL_ALLOWD',
              1 => 'FAILURE_ALLOWED',
              2 => 'ALL_DENIED',
              3 => 'ALL_ALLOWED',
            ),
          ),
        ),
        8 => 
        array (
          'name' => 'Stop',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否暂停调度，取值如下：
- true：暂停调度。
- false：不暂停调度。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>调度类型”配置为”暂停调度“时对应。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        9 => 
        array (
          'name' => 'ParaValue',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度参数。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>参数”对应。您可以参考[调度参数](~~137548~~)配置。',
            'type' => 'string',
            'required' => false,
            'example' => 'x=a y=b z=c',
          ),
        ),
        10 => 
        array (
          'name' => 'StartEffectDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '开始自动调度的毫秒时间戳。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>生效日期”配置的开始时间的毫秒时间戳对应。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'minimum' => '0',
            'example' => '936923400000',
          ),
        ),
        11 => 
        array (
          'name' => 'EndEffectDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '停止自动调度的时间戳，单位为毫秒。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>生效日期”配置的结束时间的毫秒时间戳对应。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'minimum' => '0',
            'example' => '4155787800000',
          ),
        ),
        12 => 
        array (
          'name' => 'CronExpress',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '周期调度的cron表达式，该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>cron表达式”对应。配置完“调度周期”及“定时调度时间”后，DataWorks会自动生成相应cron表达式。

示例如下：

- 每天凌晨5点30分定时调度：`00 30 05 * * ?`。

- 每个小时的第15分钟定时调度：`00 15 * * * ?`。

- 每隔十分钟调度一次：`00 00/10 * * * ?`。

- 每天8点到17点，每个十分钟调度一次：`00 00-59/10 8-23 * * * ?`。

- 每月的1日0点20分自动调度：`00 20 00 1 * ?`。

- 从1月1日0点10分开始，每过3个月调度一次：`00 10 00 1 1-12/3 ?`。

- 每周二、周五的0点5分自动调度：`00 05 00 * * 2,5`。


由于DataWorks调度系统的规则，cron表达式有以下限制：

- 最短调度间隔时间为5分钟。

- 每天最早调度时间为0点5分。',
            'type' => 'string',
            'required' => false,
            'example' => '00 00-59/5 1-23 * * ?',
          ),
        ),
        13 => 
        array (
          'name' => 'CycleType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度周期的类型，包括NOT_DAY（分钟、小时）和DAY（日、周、月）。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>调度周期”对应。',
            'type' => 'string',
            'required' => false,
            'example' => 'NOT_DAY',
            'default' => 'DAY',
            'enum' => 
            array (
              0 => 'DAY',
              1 => 'NOT_DAY',
            ),
          ),
        ),
        14 => 
        array (
          'name' => 'DependentType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '依赖上一周期的方式。取值如下：
- SELF：依赖项选择本节点。
- CHILD：依赖项选择一级子节点。
- USER_DEFINE：依赖项选择其他节点。
- NONE：未选择依赖项，即不会依赖上一周期。',
            'type' => 'string',
            'required' => false,
            'example' => 'USER_DEFINE',
            'enum' => 
            array (
              0 => 'NONE',
              1 => 'USER_DEFINE',
              2 => 'CHILD',
              3 => 'SELF',
              4 => 'USER_DEFINE_AND_SELF',
              5 => 'CHILD_AND_SELF',
            ),
          ),
        ),
        15 => 
        array (
          'name' => 'DependentNodeIdList',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '当DependentType参数配置为USER_DEFINE时，用于设置当前文件具体依赖的节点ID。依赖多个节点时，使用英文逗号（,）分隔。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖”配置为“上一周期”后，依赖项选择”其他节点“时配置的内容对应。',
            'type' => 'string',
            'required' => false,
            'example' => '5,10,15,20',
          ),
        ),
        16 => 
        array (
          'name' => 'InputList',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件依赖的上游文件的输出名称。依赖多个输出时，使用英文逗号（,）分隔。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖“选择”同周期“时的”父节点输出名称”对应。

> 通过CreateDISyncTask和UpdateFile方式创建离线同步任务时此参数必须配置。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'project_root,project.file1,project.001_out',
          ),
        ),
        17 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的名称。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间名称。

该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。
',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        18 => 
        array (
          'name' => 'FileId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的ID。您可以调用[ListFiles](~~173942~~)接口获取文件ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '100000001',
          ),
        ),
        19 => 
        array (
          'name' => 'OutputList',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的输出。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖“选择”同周期“时的”本节点的输出名称”对应。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project.ods_user_info_d',
          ),
        ),
        20 => 
        array (
          'name' => 'ResourceGroupIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件发布成任务后，任务执行时对应的资源组。您可以调用[ListResourceGroups](~~173913~~)获取工作空间可用的资源组列表。',
            'type' => 'string',
            'required' => false,
            'example' => 'default_group',
          ),
        ),
        21 => 
        array (
          'name' => 'ConnectionName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件对应任务执行时，任务使用的数据源标识符。您可以调用[ListDataSources](~~211431~~)获取可用的数据源列表。',
            'type' => 'string',
            'required' => false,
            'example' => 'odps_source',
          ),
        ),
        22 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件所有者的用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '18023848927592',
          ),
        ),
        23 => 
        array (
          'name' => 'AutoParsing',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件是否开启自动解析功能。取值如下：
- true：文件会自动解析代码。
- false：文件不会自动解析代码。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖”选择“同周期”时的“代码解析”对应。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        24 => 
        array (
          'name' => 'SchedulerType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度的类型，取值如下：
- NORMAL：正常调度任务。
- MANUAL：手动任务，不会被日常调度，对应手动业务流程下的节点。
- PAUSE：暂停任务。
- SKIP：空跑任务，被日常调度，但启动调度时直接被置为成功。',
            'type' => 'string',
            'required' => false,
            'example' => 'NORMAL',
            'enum' => 
            array (
              0 => 'NORMAL',
              1 => 'SKIP',
              2 => 'PAUSE',
              3 => 'MANUAL',
            ),
          ),
        ),
        25 => 
        array (
          'name' => 'AdvancedSettings',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务的高级配置。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，EMR Spark Streaming和EMR Streaming SQL数据开发任务，编辑页面右侧导航栏的“高级设置“对应。

当前仅EMR Spark Streaming和EMR Streaming SQL任务支持配置该参数，并且参数为JSON格式。',
            'type' => 'string',
            'required' => false,
            'example' => '{"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}',
          ),
        ),
        26 => 
        array (
          'name' => 'StartImmediately',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '发布后是否立即启动。取值如下：
- true：发布后立即启动。
- false：发布后暂不启动。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，EMR Spark Streaming和EMR Streaming SQL数据开发任务，编辑页面右侧导航栏的“配置>时间属性>启动方式“对应。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        27 => 
        array (
          'name' => 'InputParameters',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的上下文输入参数。参数为JSON格式，包含的字段可参考[GetFile](~~173954~~)接口返回值中的InputContextParameterList参数结构。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>节点上下文>本节点输入参数“对应。',
            'type' => 'string',
            'required' => false,
            'example' => '[{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]',
          ),
        ),
        28 => 
        array (
          'name' => 'OutputParameters',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的上下文输出参数。参数为JSON格式，包含的字段可参考[GetFile](~~173954~~)接口返回值中的OutputContextParameterList参数结构。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>节点上下文>本节点输出参数“对应。',
            'type' => 'string',
            'required' => false,
            'example' => '[{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]',
          ),
        ),
        29 => 
        array (
          'name' => 'IgnoreParentSkipRunningProperty',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度配置->上一周期->是否跳过上游的空跑属性',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFGH-IJKLMNOPQ',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFGH-IJKLMNOPQ\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<UpdateFileResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFGH-IJKLMNOPQ</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</UpdateFileResponse>","errorExample":""}]',
      'title' => '更新已有的文件节点',
      'summary' => '调用UpdateFile更新已创建的文件。',
      'description' => '调试或调用该接口时，填写的参数必须与该节点原本的文件配置不同。例如，源节点的某参数值为A，则需要变更为B后再提交。如果仍填写A，会报invalid异常。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetFolder' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78248',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'FolderId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹的ID。您可以调用[ListFolders](~~173955~~)接口获取文件夹ID。
该参数与FolderPath参数配置一个即可。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '273****',
          ),
        ),
        3 => 
        array (
          'name' => 'FolderPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹的路径。您可以调用[ListFolders](~~173955~~)接口获取文件夹路径。
该参数与FolderId参数配置一个即可。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '业务流程/我的第一个业务流程/MaxCompute/ods层',
            'minLength' => 1,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '文件夹的详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'FolderPath' => 
                  array (
                    'description' => '文件夹的路径。',
                    'type' => 'string',
                    'example' => '业务流程/我的第一个业务流程/MaxCompute/ods层',
                  ),
                  'FolderId' => 
                  array (
                    'description' => '文件夹的ID。

',
                    'type' => 'string',
                    'example' => '2735****',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"FolderPath\\": \\"业务流程/我的第一个业务流程/MaxCompute/ods层\\",\\n    \\"FolderId\\": \\"2735****\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <FolderPath>业务流程/我的第一个业务流程/MaxCompute/ods层</FolderPath>\\n    <FolderId>2735****</FolderId>\\n</Data>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '获取文件夹的详情',
      'summary' => '调用GetFolder获取文件夹的详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListFileVersions' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78312',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FileId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的ID，您可以通过[ListFiles](~~173942~~)查询对应文件的ID。

',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '100000001',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID，您可以单击页面右上角的小扳手图标，进入工作空间管理页面查看。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的唯一标识符，即数据开发页面顶部切换工作空间处的英文标识。

该参数与ProjectId参数二者必须设置其一，以确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        3 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => false,
            'maximum' => '100',
            'minimum' => '0',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '文件的版本列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前数据页的页码。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '当前数据页的大小。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '满足查询条件的数据总条数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '13',
                  ),
                  'FileVersions' => 
                  array (
                    'description' => '文件的版本详情。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'FileContent' => 
                        array (
                          'description' => '生成本次文件版本的文件代码。
',
                          'type' => 'string',
                          'example' => 'SHOW TABLES;',
                        ),
                        'Status' => 
                        array (
                          'description' => '文件版本当前的状态，包括COMMITTING（提交中）、COMMITTED或CHECK_OK（已提交）、PACKAGED（准备发布）、DEPLOYING（发布中）、DEPLOYED（已发布）和CANCELLED（取消发布）。',
                          'type' => 'string',
                          'example' => 'COMMITTED',
                        ),
                        'IsCurrentProd' => 
                        array (
                          'description' => '本次文件版本是否为当前生产环境的最新版本。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'CommitUser' => 
                        array (
                          'description' => '生成本次文件版本的阿里云用户UID。
',
                          'type' => 'string',
                          'example' => '73842342****',
                        ),
                        'NodeContent' => 
                        array (
                          'description' => '生成本次文件版本的调度配置。
',
                          'type' => 'string',
                          'example' => '{"cycleType":0,"cronExpress":"00 05 00 * * ?"}',
                        ),
                        'Comment' => 
                        array (
                          'description' => '本次文件版本的说明。',
                          'type' => 'string',
                          'example' => '第二次版本提交',
                        ),
                        'FilePropertyContent' => 
                        array (
                          'description' => '生成本次文件版本的文本基本信息。
',
                          'type' => 'string',
                          'example' => '{"fileName":"ods_user_info_d","fileType":10}',
                        ),
                        'FileName' => 
                        array (
                          'description' => '生成本次文件版本的文件名。
',
                          'type' => 'string',
                          'example' => 'ods_user_info_d',
                        ),
                        'UseType' => 
                        array (
                          'description' => '文件所属的功能模块，包括NORMAL（数据开发）、MANUAL（手动任务）、MANUAL_BIZ（手动工作流）、SKIP（数据开发的空跑调度）、ADHOCQUERY（临时查询）和COMPONENT（组件管理）。',
                          'type' => 'string',
                          'example' => 'NORMAL',
                        ),
                        'ChangeType' => 
                        array (
                          'description' => '本次文件版本的变更类型，包括CREATE、UPDATE和DELETE。',
                          'type' => 'string',
                          'example' => 'UPDATE',
                        ),
                        'FileVersion' => 
                        array (
                          'description' => '文件的版本。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '2',
                        ),
                        'CommitTime' => 
                        array (
                          'description' => '生成文件版本的毫秒时间戳。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1593881265000',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '生成文件版本时对应的调度任务ID。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 13,\\n    \\"FileVersions\\": [\\n      {\\n        \\"FileContent\\": \\"SHOW TABLES;\\",\\n        \\"Status\\": \\"COMMITTED\\",\\n        \\"IsCurrentProd\\": false,\\n        \\"CommitUser\\": \\"73842342****\\",\\n        \\"NodeContent\\": \\"{\\\\\\"cycleType\\\\\\":0,\\\\\\"cronExpress\\\\\\":\\\\\\"00 05 00 * * ?\\\\\\"}\\",\\n        \\"Comment\\": \\"第二次版本提交\\",\\n        \\"FilePropertyContent\\": \\"{\\\\\\"fileName\\\\\\":\\\\\\"ods_user_info_d\\\\\\",\\\\\\"fileType\\\\\\":10}\\",\\n        \\"FileName\\": \\"ods_user_info_d\\",\\n        \\"UseType\\": \\"NORMAL\\",\\n        \\"ChangeType\\": \\"UPDATE\\",\\n        \\"FileVersion\\": 2,\\n        \\"CommitTime\\": 1593881265000,\\n        \\"NodeId\\": 1234\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****Q</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <TotalCount>13</TotalCount>\\n    <FileVersions>\\n        <Status>COMMITTED</Status>\\n        <CommitUser>73842342****</CommitUser>\\n        <Comment>第二次版本提交</Comment>\\n        <CommitTime>1593881265000</CommitTime>\\n        <FileName>ods_user_info_d</FileName>\\n        <FilePropertyContent>{\\"fileName\\":\\"ods_user_info_d\\",\\"fileType\\":10}</FilePropertyContent>\\n        <UseType>NORMAL</UseType>\\n        <IsCurrentProd>false</IsCurrentProd>\\n        <FileContent>SHOW TABLES;</FileContent>\\n        <ChangeType>UPDATE</ChangeType>\\n        <FileVersion>2</FileVersion>\\n        <NodeId>3000001</NodeId>\\n        <NodeContent>{\\"cycleType\\":0,\\"cronExpress\\":\\"00 05 00 * * ?\\"}</NodeContent>\\n    </FileVersions>\\n    <PageSize>10</PageSize>\\n    <PageNumber>1</PageNumber>\\n</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '查询文件的版本列表',
      'summary' => '调用ListFileVersions查询文件的版本列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetFile' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78245',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。

该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的名称。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间名称。

该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'FileId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的ID。您可以调用[ListFiles](~~173942~~)接口查询对应文件的ID。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '100000001',
          ),
        ),
        3 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度节点的ID。您可以调用[ListFiles](~~173942~~)接口获取节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '200000001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '文件的详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'File' => 
                  array (
                    'description' => '文件的基本信息。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'CommitStatus' => 
                      array (
                        'description' => '文件当前的提交状态，包括0（未提交最新的代码）和1（已提交最新的代码）。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '0',
                      ),
                      'AutoParsing' => 
                      array (
                        'description' => '文件是否开启自动解析功能。取值如下：
- true：文件会自动解析代码。
- false：文件不会自动解析代码。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖”选择“同周期”时的“代码解析”对应。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'Owner' => 
                      array (
                        'description' => '文件责任人的阿里云用户ID。',
                        'type' => 'string',
                        'example' => '7775674356****',
                      ),
                      'CreateTime' => 
                      array (
                        'description' => '文件创建的时间戳，单位为毫秒。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1593879116000',
                      ),
                      'FileType' => 
                      array (
                        'description' => '文件的代码类型。常用的代码及其对应的文件类型包括6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '10',
                      ),
                      'CurrentVersion' => 
                      array (
                        'description' => '文件当前已经提交的最新版本号。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '3',
                      ),
                      'BizId' => 
                      array (
                        'description' => '文件所属业务流程的ID。该字段已废弃，请使用BusinessId字段。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1000001',
                      ),
                      'LastEditUser' => 
                      array (
                        'description' => '最近一次编辑文件的阿里云用户ID。',
                        'type' => 'string',
                        'example' => '62465892****',
                      ),
                      'FileName' => 
                      array (
                        'description' => '文件的名称。',
                        'type' => 'string',
                        'example' => 'ods_user_info_d',
                      ),
                      'ConnectionName' => 
                      array (
                        'description' => '执行文件对应的任务时，所使用的数据源名称。',
                        'type' => 'string',
                        'example' => 'odps_source',
                      ),
                      'UseType' => 
                      array (
                        'description' => '文件所属的功能模块。取值如下：
- NORMAL：数据开发。
- MANUAL：手动任务。
- MANUAL_BIZ：手动业务流程。
- SKIP：数据开发的空跑调度。
- ADHOCQUERY：临时查询。
- COMPONENT：组件管理。
',
                        'type' => 'string',
                        'example' => 'NORMAL',
                      ),
                      'FileFolderId' => 
                      array (
                        'description' => '文件所属文件夹的ID。',
                        'type' => 'string',
                        'example' => '2735c2****',
                      ),
                      'ParentId' => 
                      array (
                        'description' => '如果当前文件是组合节点文件的内部文件，该字段标识对应组合节点文件的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '-1',
                      ),
                      'CreateUser' => 
                      array (
                        'description' => '文件创建人的阿里云用户ID。',
                        'type' => 'string',
                        'example' => '424732****',
                      ),
                      'IsMaxCompute' => 
                      array (
                        'description' => '标识该资源文件是否需要上传至MaxCompute。
仅当文件是MaxCompute资源文件时才需要配置该参数。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'BusinessId' => 
                      array (
                        'description' => '文件的业务流程ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1000001',
                      ),
                      'FileDescription' => 
                      array (
                        'description' => '文件的描述信息。',
                        'type' => 'string',
                        'example' => '我的第一个DataWorks文件',
                      ),
                      'DeletedStatus' => 
                      array (
                        'description' => '文件的删除状态。取值如下：
- NORMAL：未删除。
- RECYCLE_BIN：回收站。
- DELETED：被删除。',
                        'type' => 'string',
                        'example' => 'RECYCLE',
                      ),
                      'LastEditTime' => 
                      array (
                        'description' => '最近一次编辑文件的时间戳，单位为毫秒。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1593879116000',
                      ),
                      'Content' => 
                      array (
                        'description' => '文件的代码。',
                        'type' => 'string',
                        'example' => 'SHOW TABLES;',
                      ),
                      'NodeId' => 
                      array (
                        'description' => '提交文件后，在调度系统生成的调度任务ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '300001',
                      ),
                      'AdvancedSettings' => 
                      array (
                        'description' => '任务的高级配置。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，EMR数据开发任务，编辑页面右侧导航栏的“高级设置“对应。

> 当前EMR Shell任务不支持配置高级参数。

各EMR任务开发的高级参数说明，请参见[EMR任务开发](~~473077~~)。',
                        'type' => 'string',
                        'example' => '{\\"priority\\":\\"1\\",\\"ENABLE_SPARKSQL_JDBC\\":false,\\"FLOW_SKIP_SQL_ANALYZE\\":false,\\"queue\\":\\"default\\"}',
                      ),
                      'FileId' => 
                      array (
                        'description' => '文件的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '100000001',
                      ),
                    ),
                  ),
                  'NodeConfiguration' => 
                  array (
                    'description' => '文件的调度配置。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'RerunMode' => 
                      array (
                        'description' => '重跑属性。取值如下：
- ALL_ALLOWED：运行成功或失败后皆可重跑。
- FAILURE_ALLOWED：运行成功后不可重跑，运行失败后可以重跑。
- ALL_DENIED：运行成功或失败皆不可重跑。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>重跑属性”配置内容对应。',
                        'type' => 'string',
                        'example' => 'ALL_ALLOWED',
                      ),
                      'SchedulerType' => 
                      array (
                        'description' => '调度的类型，取值如下：
- NORMAL：正常调度任务。
- MANUAL：手动任务，不会被日常调度，对应手动业务流程下的节点。
- PAUSE：暂停任务。
- SKIP：空跑任务，被日常调度，但启动调度时直接被置为成功。',
                        'type' => 'string',
                        'example' => 'NORMAL',
                      ),
                      'Stop' => 
                      array (
                        'description' => '是否暂停调度，取值如下：
- true：暂停调度。
- false：不暂停调度。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>调度类型”配置为”暂停调度“时对应。',
                        'type' => 'boolean',
                        'example' => 'false',
                      ),
                      'ParaValue' => 
                      array (
                        'description' => '调度参数。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>参数”对应。您可以参考[调度参数](~~137548~~)配置。',
                        'type' => 'string',
                        'example' => 'a=x b=y',
                      ),
                      'StartEffectDate' => 
                      array (
                        'description' => '开始自动调度的毫秒时间戳。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>生效日期”配置的开始时间的毫秒时间戳对应。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '936923400000',
                      ),
                      'EndEffectDate' => 
                      array (
                        'description' => '停止自动调度的时间戳，单位为毫秒。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>生效日期”配置的结束时间的毫秒时间戳对应。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '4155787800000',
                      ),
                      'CycleType' => 
                      array (
                        'description' => '调度周期的类型，包括NOT_DAY（分钟、小时）和DAY（日、周、月）。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>调度周期”对应。',
                        'type' => 'string',
                        'example' => 'DAY',
                      ),
                      'DependentNodeIdList' => 
                      array (
                        'description' => '当DependentType参数配置为USER_DEFINE时，用于设置当前文件具体依赖的节点ID。依赖多个节点时，使用英文逗号（,）分隔。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖”配置为“上一周期”后，依赖项选择”其他节点“时配置的内容对应。',
                        'type' => 'string',
                        'example' => '5,10,15,20',
                      ),
                      'ResourceGroupId' => 
                      array (
                        'description' => '文件发布成任务后，任务执行时对应的资源组。您可以调用[ListResourceGroups](~~173913~~)获取工作空间可用的资源组列表。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '375827434852437',
                      ),
                      'DependentType' => 
                      array (
                        'description' => '依赖上一周期的方式。取值如下：
- SELF：依赖项选择本节点。
- CHILD：依赖项选择一级子节点。
- USER_DEFINE：依赖项选择其他节点。
- NONE：未选择依赖项，即不会依赖上一周期。',
                        'type' => 'string',
                        'example' => 'USER_DEFINE',
                      ),
                      'AutoRerunTimes' => 
                      array (
                        'description' => '出错自动重跑的次数。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '3',
                      ),
                      'AutoRerunIntervalMillis' => 
                      array (
                        'description' => '出错自动重跑时间间隔，单位为毫秒。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>出错自动重跑”的”重跑间隔“配置对应。
控制台中“重跑间隔”的时间单位为分钟，请在调用时注意转换时间。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '120000',
                      ),
                      'CronExpress' => 
                      array (
                        'description' => '文件定时调度的cron表达式。',
                        'type' => 'string',
                        'example' => '00 05 00 * * ?',
                      ),
                      'InputList' => 
                      array (
                        'description' => '文件依赖的上游文件输出。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '依赖的上游文件输出信息。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Input' => 
                            array (
                              'description' => '文件依赖的上游文件的输出名称。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖“选择”同周期“时的”父节点输出名称”对应。',
                              'type' => 'string',
                              'example' => 'project.001_out',
                            ),
                            'ParseType' => 
                            array (
                              'description' => '配置文件依赖的方式，取值如下：
- MANUAL：手动配置。
- AUTO：自动解析。',
                              'type' => 'string',
                              'example' => 'MANUAL',
                            ),
                          ),
                        ),
                      ),
                      'OutputList' => 
                      array (
                        'description' => '文件的输出。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖“选择”同周期“时的”本节点的输出名称”对应。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '文件的输出信息。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'RefTableName' => 
                            array (
                              'description' => '文件的输出值。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖“选择”同周期“时的“本节点的输出表”列的值对应。',
                              'type' => 'string',
                              'example' => 'ods_user_info_d',
                            ),
                            'Output' => 
                            array (
                              'description' => '文件的输出名称。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖“选择”同周期“时的“本节点的输出名称”列值对应。',
                              'type' => 'string',
                              'example' => 'dw_project.002_out',
                            ),
                          ),
                        ),
                      ),
                      'StartImmediately' => 
                      array (
                        'description' => '发布后是否立即启动。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，EMR Spark Streaming和EMR Streaming SQL数据开发任务，编辑页面右侧导航栏的“配置>时间属性>启动方式“对应。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'InputParameters' => 
                      array (
                        'description' => '节点上下文输入参数。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>节点上下文>本节点输入参数“对应。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '返回结果。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ParameterName' => 
                            array (
                              'description' => '节点上下文输入参数的参数名称。在代码中可以使用${...}方式引用该参数。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>节点上下文>本节点输入参数“的”参数名“对应。',
                              'type' => 'string',
                              'example' => 'input',
                            ),
                            'ValueSource' => 
                            array (
                              'description' => '节点上下文输入参数的取值来源。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>节点上下文>本节点输入参数“的”取值来源“对应。',
                              'type' => 'string',
                              'example' => 'project_001.parent_node:outputs',
                            ),
                          ),
                        ),
                      ),
                      'OutputParameters' => 
                      array (
                        'description' => '节点上下文输出参数。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>节点上下文>本节点输出参数“对应。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '返回结果。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ParameterName' => 
                            array (
                              'description' => '节点上下文输出参数的参数名称。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>节点上下文>本节点输出参数“的”参数名“对应。',
                              'type' => 'string',
                              'example' => 'output',
                            ),
                            'Value' => 
                            array (
                              'description' => '节点上下文输出参数的表达式。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>节点上下文>本节点输出参数“的”取值“对应。',
                              'type' => 'string',
                              'example' => '${bizdate}',
                            ),
                            'Type' => 
                            array (
                              'description' => '节点上下文输出参数表达式的类型。取值如下：
- 1：表示常量。
- 2：表示变量。
- 3：表示参数节点透传变量。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>节点上下文>本节点输出参数“的”类型“对应。',
                              'type' => 'string',
                              'example' => '1',
                            ),
                            'Description' => 
                            array (
                              'description' => '节点上下文输出的参数描述。',
                              'type' => 'string',
                              'example' => 'It\'s a context output parameter.',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"File\\": {\\n      \\"CommitStatus\\": 0,\\n      \\"AutoParsing\\": true,\\n      \\"Owner\\": \\"7775674356****\\",\\n      \\"CreateTime\\": 1593879116000,\\n      \\"FileType\\": 10,\\n      \\"CurrentVersion\\": 3,\\n      \\"BizId\\": 1000001,\\n      \\"LastEditUser\\": \\"62465892****\\",\\n      \\"FileName\\": \\"ods_user_info_d\\",\\n      \\"ConnectionName\\": \\"odps_source\\",\\n      \\"UseType\\": \\"NORMAL\\",\\n      \\"FileFolderId\\": \\"2735c2****\\",\\n      \\"ParentId\\": -1,\\n      \\"CreateUser\\": \\"424732****\\",\\n      \\"IsMaxCompute\\": true,\\n      \\"BusinessId\\": 1000001,\\n      \\"FileDescription\\": \\"我的第一个DataWorks文件\\",\\n      \\"DeletedStatus\\": \\"RECYCLE\\",\\n      \\"LastEditTime\\": 1593879116000,\\n      \\"Content\\": \\"SHOW TABLES;\\",\\n      \\"NodeId\\": 300001,\\n      \\"AdvancedSettings\\": \\"{\\\\\\\\\\\\\\"priority\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"ENABLE_SPARKSQL_JDBC\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\"FLOW_SKIP_SQL_ANALYZE\\\\\\\\\\\\\\":false,\\\\\\\\\\\\\\"queue\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\"}\\",\\n      \\"FileId\\": 100000001\\n    },\\n    \\"NodeConfiguration\\": {\\n      \\"RerunMode\\": \\"ALL_ALLOWED\\",\\n      \\"SchedulerType\\": \\"NORMAL\\",\\n      \\"Stop\\": false,\\n      \\"ParaValue\\": \\"a=x b=y\\",\\n      \\"StartEffectDate\\": 936923400000,\\n      \\"EndEffectDate\\": 4155787800000,\\n      \\"CycleType\\": \\"DAY\\",\\n      \\"DependentNodeIdList\\": \\"5,10,15,20\\",\\n      \\"ResourceGroupId\\": 375827434852437,\\n      \\"DependentType\\": \\"USER_DEFINE\\",\\n      \\"AutoRerunTimes\\": 3,\\n      \\"AutoRerunIntervalMillis\\": 120000,\\n      \\"CronExpress\\": \\"00 05 00 * * ?\\",\\n      \\"InputList\\": [\\n        {\\n          \\"Input\\": \\"project.001_out\\",\\n          \\"ParseType\\": \\"MANUAL\\"\\n        }\\n      ],\\n      \\"OutputList\\": [\\n        {\\n          \\"RefTableName\\": \\"ods_user_info_d\\",\\n          \\"Output\\": \\"dw_project.002_out\\"\\n        }\\n      ],\\n      \\"StartImmediately\\": true,\\n      \\"InputParameters\\": [\\n        {\\n          \\"ParameterName\\": \\"input\\",\\n          \\"ValueSource\\": \\"project_001.parent_node:outputs\\"\\n        }\\n      ],\\n      \\"OutputParameters\\": [\\n        {\\n          \\"ParameterName\\": \\"output\\",\\n          \\"Value\\": \\"${bizdate}\\",\\n          \\"Type\\": \\"1\\",\\n          \\"Description\\": \\"It\'s a context output parameter.\\"\\n        }\\n      ]\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetFileResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <File>\\n            <CommitStatus>0</CommitStatus>\\n            <AutoParsing>true</AutoParsing>\\n            <Owner>7775674356****</Owner>\\n            <CreateTime>1593879116000</CreateTime>\\n            <FileType>10</FileType>\\n            <CurrentVersion>3</CurrentVersion>\\n            <BizId>1000001</BizId>\\n            <LastEditUser>62465892****</LastEditUser>\\n            <FileName>ods_user_info_d</FileName>\\n            <ConnectionName>odps_source</ConnectionName>\\n            <UseType>NORMAL</UseType>\\n            <FileFolderId>2735c2****</FileFolderId>\\n            <ParentId>-1</ParentId>\\n            <CreateUser>424732****</CreateUser>\\n            <IsMaxCompute>true</IsMaxCompute>\\n            <BusinessId>1000001</BusinessId>\\n            <FileDescription>我的第一个Dataworks文件</FileDescription>\\n            <DeletedStatus>RECYCLE</DeletedStatus>\\n            <LastEditTime>1593879116000</LastEditTime>\\n            <Content>SHOW TABLES;</Content>\\n            <NodeId>300001</NodeId>\\n            <AdvancedSettings>{\\"queue\\":\\"default\\",\\"SPARK_CONF\\":\\"--conf spark.driver.memory=2g\\"}</AdvancedSettings>\\n            <FileId>100000001</FileId>\\n        </File>\\n        <NodeConfiguration>\\n            <RerunMode>ALL_ALLOWED</RerunMode>\\n            <SchedulerType>NORMAL</SchedulerType>\\n            <Stop>false</Stop>\\n            <ParaValue>a=x b=y</ParaValue>\\n            <StartEffectDate>936923400000</StartEffectDate>\\n            <EndEffectDate>4155787800000</EndEffectDate>\\n            <CycleType>DAY</CycleType>\\n            <DependentNodeIdList>5,10,15,20</DependentNodeIdList>\\n            <ResourceGroupId>375827434852437</ResourceGroupId>\\n            <DependentType>USER_DEFINE</DependentType>\\n            <AutoRerunTimes>3</AutoRerunTimes>\\n            <AutoRerunIntervalMillis>120000</AutoRerunIntervalMillis>\\n            <CronExpress>00 05 00 * * ?</CronExpress>\\n            <InputList>\\n                <Input>project.001_out</Input>\\n                <ParseType>MANUAL</ParseType>\\n            </InputList>\\n            <OutputList>\\n                <RefTableName>ods_user_info_d</RefTableName>\\n                <Output>dw_project.002_out</Output>\\n            </OutputList>\\n            <StartImmediately>true</StartImmediately>\\n            <InputParameters>\\n                <ParameterName>input</ParameterName>\\n                <ValueSource>project_001.parent_node:outputs</ValueSource>\\n            </InputParameters>\\n            <OutputParameters>\\n                <ParameterName>output</ParameterName>\\n                <Value>${bizdate}</Value>\\n                <Type>1</Type>\\n                <Description>It\'s a context output parameter.</Description>\\n            </OutputParameters>\\n        </NodeConfiguration>\\n    </Data>\\n</GetFileResponse>","errorExample":""}]',
      'title' => '获取文件的详情',
      'summary' => '该接口用于获取文件的详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListFolders' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78313',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。
',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'ParentFolderPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '父文件夹的路径。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '业务流程/我的第一个业务流程/MaxCompute',
          ),
        ),
        3 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的数据条数，默认为10条，最大为100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '100',
            'minimum' => '0',
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '满足条件的文件夹的列表信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前数据页的页码。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '当前数据页的数据条数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '满足查询条件的数据总条数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '13',
                  ),
                  'Folders' => 
                  array (
                    'description' => '文件夹的列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'FolderPath' => 
                        array (
                          'description' => '文件夹的路径。',
                          'type' => 'string',
                          'example' => '业务流程/我的第一个业务流程/MaxCompute/ods层',
                        ),
                        'FolderId' => 
                        array (
                          'description' => '文件夹的ID。',
                          'type' => 'string',
                          'example' => '2735c2****',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 13,\\n    \\"Folders\\": [\\n      {\\n        \\"FolderPath\\": \\"业务流程/我的第一个业务流程/MaxCompute/ods层\\",\\n        \\"FolderId\\": \\"2735c2****\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <TotalCount>13</TotalCount>\\n    <PageSize>10</PageSize>\\n    <PageNumber>1</PageNumber>\\n    <Folders>\\n        <FolderPath>业务流程/我的第一个业务流程/MaxCompute/ods层</FolderPath>\\n        <FolderId>2735c2****</FolderId>\\n    </Folders>\\n</Data>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '查询文件夹的列表',
      'summary' => '调用ListFolders查询文件夹的列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeployFile' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78223',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'FileId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的ID，您可以通过[ListFiles](~~173942~~)查询对应文件的ID。
该参数与NodeId参数配置一个即可。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'example' => '10000001',
          ),
        ),
        3 => 
        array (
          'name' => 'Comment',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '本次发布的说明信息。',
            'type' => 'string',
            'required' => false,
            'example' => '第一次发布任务',
          ),
        ),
        4 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '待发布文件在调度系统对应的任务ID。该参数与FileId参数配置一个即可。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '2000001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回的数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '发布包的ID，后续需要将该ID作为参数调用[GetDeployment](~~173950~~)接口，获取本次发布的具体情况。 

',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '30000001',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 30000001,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\"\\n}","errorExample":""},{"type":"xml","example":"<DeployFileResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>30000001</Data>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n</DeployFileResponse>","errorExample":""}]',
      'title' => '部署文件',
      'summary' => '发布文件至生产环境。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateUdfFile' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78387',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FileFolderPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数文件所在文件夹的路径。
',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '业务流程/第一个业务流程/函数/字符串处理函数',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID，您可以单击页面右上角的小扳手图标，进入工作空间管理页面查看。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'FunctionType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数的分类，对应创建函数表单中的函数类型，包括MATH（数学运算函数）、AGGREGATE（聚合函数）、STRING（字符串处理函数）、DATE（日期处理函数）、ANALYTIC（窗口函数）和OTHER（其他函数）。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'STRING',
            'enum' => 
            array (
              0 => 'MATH',
              1 => 'AGGREGATE',
              2 => 'STRING',
              3 => 'DATE',
              4 => 'ANALYTIC',
              5 => 'OTHER',
            ),
          ),
        ),
        3 => 
        array (
          'name' => 'ClassName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数定义所在的类名，对应创建函数表单的类名。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'com.alibaba.DataWorks.api.udf.StringConcat',
          ),
        ),
        4 => 
        array (
          'name' => 'Resources',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数引用的资源名列表，使用英文逗号（,）分隔，对应创建函数表单中的资源列表。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'string-concat-1.0.0.jar,commons-lang-2.6.jar',
          ),
        ),
        5 => 
        array (
          'name' => 'UdfDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数用途的说明，对应创建函数表单中的描述。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '把几个字符串连接起来生成一个新的字符串',
          ),
        ),
        6 => 
        array (
          'name' => 'CmdDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数的调用命令格式，对应创建函数表单中的命令格式。',
            'type' => 'string',
            'required' => false,
            'example' => 'StringConcat(String... substrs)',
          ),
        ),
        7 => 
        array (
          'name' => 'ParameterDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数入参的说明，对应创建函数表单中的参数说明。',
            'type' => 'string',
            'required' => false,
            'example' => '需要连接的字符串列表',
            'default' => 'ALL_ALLOWED',
            'enum' => 
            array (
              0 => 'ALL_ALLOWD',
              1 => 'FAILURE_ALLOWED',
              2 => 'ALL_DENIED',
            ),
          ),
        ),
        8 => 
        array (
          'name' => 'ReturnValue',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数的返回值说明，对应创建函数表单中的返回值。',
            'type' => 'string',
            'required' => false,
            'example' => '所有字符串按照输入顺序前后连接生成的新字符串',
            'default' => 'false',
          ),
        ),
        9 => 
        array (
          'name' => 'Example',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '函数的调用示例，对应创建函数表单中的示例。',
            'type' => 'string',
            'required' => false,
            'example' => 'StringConcat(\'a\', \'b\', \'c\')',
          ),
        ),
        10 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的唯一标识符，即数据开发页面顶部切换工作空间处的英文标识。

该参数与ProjectId参数二者必须设置其一，以确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        11 => 
        array (
          'name' => 'FileId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '10000001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '更新函数的文件信息',
      'summary' => '调用UpdateUdfFile更新函数的文件信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetBusiness' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78232',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'BusinessId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的ID，您可以调用[ListBusiness](~~173945~~)接口获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1000000001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '业务流程的详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'Owner' => 
                  array (
                    'description' => '业务流程责任人的阿里云用户ID。',
                    'type' => 'string',
                    'example' => '20000****',
                  ),
                  'Description' => 
                  array (
                    'description' => '业务流程的描述信息。',
                    'type' => 'string',
                    'example' => '这是我的第一个业务流程',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '业务流程所在DataWorks工作空间的ID。',
                    'type' => 'string',
                    'example' => '10000',
                  ),
                  'BusinessId' => 
                  array (
                    'description' => '业务流程的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1000001',
                  ),
                  'BusinessName' => 
                  array (
                    'description' => '业务流程的名称。',
                    'type' => 'string',
                    'example' => '第一个业务流程',
                  ),
                  'UseType' => 
                  array (
                    'description' => '业务流程所属的功能模块，包括NORMAL（数据开发）和MANUAL_BIZ（手动业务流程）。',
                    'type' => 'string',
                    'example' => 'NORMAL',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"Owner\\": \\"20000****\\",\\n    \\"Description\\": \\"这是我的第一个业务流程\\",\\n    \\"ProjectId\\": \\"10000\\",\\n    \\"BusinessId\\": 1000001,\\n    \\"BusinessName\\": \\"第一个业务流程\\",\\n    \\"UseType\\": \\"NORMAL\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <Owner>20000****</Owner>\\n    <Description>这是我的第一个业务流程</Description>\\n    <BusinessName>第一个业务流程</BusinessName>\\n    <UseType>NORMAL</UseType>\\n    <ProjectId>10000</ProjectId>\\n    <BusinessId>1000001</BusinessId>\\n</Data>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '查询业务流程的详情',
      'summary' => '调用GetBusiness查询业务流程的详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateFolder' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78373',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'FolderId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹的ID，您可以调用[ListFolders](~~173955~~)获取文件夹的ID。

',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2735c2c19d58',
          ),
        ),
        3 => 
        array (
          'name' => 'FolderName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'MySecondFolder',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<UpdateFolderResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</UpdateFolderResponse>","errorExample":""}]',
      'title' => '更新文件夹的信息',
      'summary' => '调用UpdateFolder更新文件夹的信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListDeployments' => 
    array (
      'summary' => '查询发布包列表信息。该功能与DataWorks控制台任务发布页面的发布包列表功能对应。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '100712',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的名称。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间名称。

该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。

该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'Creator',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '发布包创建者的阿里云用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '20030****',
          ),
        ),
        3 => 
        array (
          'name' => 'EndCreateTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '生成发布包的最大毫秒时间戳。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1593877765000',
          ),
        ),
        4 => 
        array (
          'name' => 'Executor',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '发布包执行者的阿里云用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '2003****',
          ),
        ),
        5 => 
        array (
          'name' => 'EndExecuteTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '发布包开始执行的最大毫秒时间戳。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1593877765000',
          ),
        ),
        6 => 
        array (
          'name' => 'Status',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '发布包当前的状态。取值如下：
- 0：发布包已准备就绪。
- 1：发布包发布成功。
- 2：发布包发布失败。
- 6：发布包被驳回。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        7 => 
        array (
          'name' => 'Keyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '发布包名称的关键字。DataWorks支持模糊匹配，即输入关键字，即可查询包含该关键字的发布包。',
            'type' => 'string',
            'required' => false,
            'example' => 'hello',
          ),
        ),
        8 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        9 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大为100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'example' => '20',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG',
              ),
              'Data' => 
              array (
                'description' => '满足查询条件的发布包列表数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '请求的数据页数，用于翻页。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的数据条数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '满足条件的数据总条数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '13',
                  ),
                  'Deployments' => 
                  array (
                    'description' => '返回的发布包列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '发布包的详细信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '发布包当前的状态。取值如下：
- 0：发布包已准备就绪。
- 1：发布包发布成功。
- 2：发布包发布失败。
- 6：发布包被驳回。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'ErrorMessage' => 
                        array (
                          'description' => '当发布包执行失败，该参数用于记录错误信息。',
                          'type' => 'string',
                          'example' => 'OK',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '发布包创建的时间戳。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1593877765000',
                        ),
                        'Executor' => 
                        array (
                          'description' => '发布包执行者的阿里云用户ID。',
                          'type' => 'string',
                          'example' => '2003****',
                        ),
                        'Creator' => 
                        array (
                          'description' => '发布包创建者的阿里云用户ID。',
                          'type' => 'string',
                          'example' => '2003****',
                        ),
                        'ExecuteTime' => 
                        array (
                          'description' => '执行发布包的时间戳。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1593877765000',
                        ),
                        'Name' => 
                        array (
                          'description' => '发布包的名称。',
                          'type' => 'string',
                          'example' => 'auto_created',
                        ),
                        'Id' => 
                        array (
                          'description' => '发布包的ID，您可以根据此ID调用[GetDeployment](~~173950~~)接口，获取发布包详情。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '11111',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 13,\\n    \\"Deployments\\": [\\n      {\\n        \\"Status\\": 1,\\n        \\"ErrorMessage\\": \\"OK\\",\\n        \\"CreateTime\\": 1593877765000,\\n        \\"Executor\\": \\"2003****\\",\\n        \\"Creator\\": \\"2003****\\",\\n        \\"ExecuteTime\\": 1593877765000,\\n        \\"Name\\": \\"auto_created\\",\\n        \\"Id\\": 11111\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListDeploymentsResponse>\\n    <RequestId>0000-ABCD-EFG</RequestId>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>13</TotalCount>\\n        <Deployments>\\n            <Status>1</Status>\\n            <ErrorMessage>OK</ErrorMessage>\\n            <CreateTime>1593877765000</CreateTime>\\n            <Executor>2003****</Executor>\\n            <Creator>2003****</Creator>\\n            <ExecuteTime>1593877765000</ExecuteTime>\\n            <Name>auto_created</Name>\\n            <Id>11111</Id>\\n        </Deployments>\\n    </Data>\\n</ListDeploymentsResponse>","errorExample":""}]',
      'title' => '查询发布包列表信息',
    ),
    'UpdateIDEEventResult' => 
    array (
      'summary' => '用于在数据开发过程中触发扩展点时，通过将扩展程序对扩展点事件的检查结果返回给数据开发系统。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '101717',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide6ZPSGN',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'MessageId',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '消息UUID',
            'description' => 'DataWorks开放消息的消息ID。当触发扩展点事件后，您可以从接收到的事件消息中获取消息ID。

<props="china">消息格式，可参考[消息格式](~~215367~~)。</props>

',
            'type' => 'string',
            'required' => false,
            'example' => '8abcb91f-d266-4073-b907-2ed670378ed1',
          ),
        ),
        1 => 
        array (
          'name' => 'ExtensionCode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '扩展程序的唯一标识。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入开放平台的Extensions页签查看标识。',
            'type' => 'string',
            'required' => false,
            'example' => '8abcb91f-d266-4073-b907-2ed670378ed1',
          ),
        ),
        2 => 
        array (
          'name' => 'CheckResult',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '扩展程序对本次扩展点事件的检查状态。取值如下：
- OK：扩展程序对本次扩展点事件检查通过。
- FAIL：扩展程序对本次扩展点事件检查不通过。您需要查看并及时处理报错，以免影响后续程序的正常执行。
- WARN：扩展程序对本次扩展点事件检查通过，但存在警告。',
            'type' => 'string',
            'required' => false,
            'example' => 'OK',
          ),
        ),
        3 => 
        array (
          'name' => 'CheckResultTip',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '扩展程序对本次扩展点事件进行检查的摘要信息。该信息会显示在您当前的开发页面上，当本次检查存在警告或者检查不通过时，您可以通过该摘要信息快速定位原因。',
            'type' => 'string',
            'required' => false,
            'example' => 'Succeeded',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的唯一标识，用于后续错误排查使用。',
                'type' => 'string',
                'example' => '8abcb91f-d266-4073-b907-2ed670378ed1',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"8abcb91f-d266-4073-b907-2ed670378ed1\\"\\n}","errorExample":""},{"type":"xml","example":"<UpdateIDEEventResultResponse>\\n    <RequestId>8abcb91f-d266-4073-b907-2ed670378ed1</RequestId>\\n</UpdateIDEEventResultResponse>","errorExample":""}]',
      'title' => '更新扩展点事件的检查结果',
      'description' => '
',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetIDEEventDetail' => 
    array (
      'summary' => '根据DataWorks开放消息的消息ID，查询触发扩展点事件时的扩展点数据快照。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '101710',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'MessageId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks开放消息的消息ID。当触发扩展点事件后，您可以从接收到的事件消息中获取消息ID。

<props="china">消息格式，可参考[消息格式](~~215367~~)。</props>
',
            'type' => 'string',
            'required' => true,
            'example' => '8abcb91f-d266-4073-b907-2ed670378ed1',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID，您可以通过解析DataWorks开放消息获取空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '10000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的唯一标识，用于后续错误排查使用。',
                'type' => 'string',
                'example' => '8abcb91f-d266-4073-b907-2ed670378ed1',
              ),
              'EventDetail' => 
              array (
                'description' => '触发扩展点事件时的数据快照。

不同类型的消息事件，数据快照的有效字段存在差异，具体请参考各消息事件的字段说明。',
                'type' => 'object',
                'properties' => 
                array (
                  'FileExecutionCommand' => 
                  array (
                    'description' => '文件代码执行时的快照，当Message类型为IDE_FILE_EXECUTE_BEFORE时有效。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'FileId' => 
                      array (
                        'description' => '文件的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1234123',
                      ),
                      'DataSourceName' => 
                      array (
                        'description' => '文件关联的数据源唯一标识。',
                        'type' => 'string',
                        'example' => 'odps_source',
                      ),
                      'Content' => 
                      array (
                        'description' => '生成本次文件版本的文件代码。',
                        'type' => 'string',
                        'example' => 'SHOW TABLES;',
                      ),
                      'FileType' => 
                      array (
                        'description' => '文件类型。不同文件类型其代码不同，常用的代码及其表示的类型包括6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '10',
                      ),
                    ),
                  ),
                  'DeletedFile' => 
                  array (
                    'description' => '删除文件时的快照信息，当Message类型为IDE_FILE_DELETE_BEFORE时有效。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Owner' => 
                      array (
                        'description' => '文件责任人。',
                        'type' => 'string',
                        'example' => '7384234****',
                      ),
                      'FileType' => 
                      array (
                        'description' => '文件类型。不同文件类型其代码不同，常用的代码及其表示的类型包括6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '10',
                      ),
                      'CurrentVersion' => 
                      array (
                        'description' => '当前文件的最新版本。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1',
                      ),
                      'BusinessId' => 
                      array (
                        'description' => '文件所属的业务流程ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '74328',
                      ),
                      'FileName' => 
                      array (
                        'description' => '文件名称。',
                        'type' => 'string',
                        'example' => 'hello_dataworks.sql',
                      ),
                      'DataSourceName' => 
                      array (
                        'description' => '文件关联的数据源唯一标识。',
                        'type' => 'string',
                        'example' => 'odps_source',
                      ),
                      'UseType' => 
                      array (
                        'description' => '文件所属的功能模块。取值如下：
- NORMAL：数据开发
- MANUAL：手动任务
- MANUAL_BIZ：手动业务流程
- SKIP：数据开发的空跑调度
- ADHOCQUERY：临时查询
- COMPONENT：组件管理',
                        'type' => 'string',
                        'example' => 'NORMAL',
                      ),
                      'FolderId' => 
                      array (
                        'description' => '文件所属的文件夹ID，您可以调用[GetFolder](~~173952~~)接口，通过文件夹ID查询文件详情。',
                        'type' => 'string',
                        'example' => 'aldurie78l2falure',
                      ),
                      'ParentFileId' => 
                      array (
                        'description' => '文件所属的循环节点或遍历节点的节点ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1234122',
                      ),
                      'Content' => 
                      array (
                        'description' => '生成本次文件版本的文件代码。',
                        'type' => 'string',
                        'example' => 'SHOW TABLES;',
                      ),
                      'NodeId' => 
                      array (
                        'description' => '调度节点的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '421429',
                      ),
                      'FileId' => 
                      array (
                        'description' => '文件的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1234123',
                      ),
                    ),
                  ),
                  'CommittedFile' => 
                  array (
                    'description' => '文件提交和发布时的快照。

仅当Message类型为IDE_FILE_SUBMIT_BEFORE或IDE_FILE_DEPLOY_BEFORE时有效。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'FileId' => 
                      array (
                        'description' => '文件的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1234123',
                      ),
                      'Content' => 
                      array (
                        'description' => '生成本次文件版本的文件代码。',
                        'type' => 'string',
                        'example' => 'SHOW TABLES;',
                      ),
                      'Committor' => 
                      array (
                        'description' => '生成本次文件版本的阿里云用户ID。',
                        'type' => 'string',
                        'example' => '7384234****',
                      ),
                      'FileType' => 
                      array (
                        'description' => '文件类型。不同文件类型其代码不同，常用的代码及其表示的类型包括6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '10',
                      ),
                      'ChangeType' => 
                      array (
                        'description' => '本次文件版本的变更类型，包括CREATE、UPDATE和DELETE。',
                        'type' => 'string',
                        'example' => 'UPDATE',
                      ),
                      'FileName' => 
                      array (
                        'description' => '文件名称。',
                        'type' => 'string',
                        'example' => 'hello_dataworks.sql',
                      ),
                      'NodeId' => 
                      array (
                        'description' => '调度节点的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '421429',
                      ),
                      'Comment' => 
                      array (
                        'description' => '本次文件版本的说明。',
                        'type' => 'string',
                        'example' => '第二次版本提交',
                      ),
                      'UseType' => 
                      array (
                        'description' => '文件所属的功能模块。取值如下：
- NORMAL：数据开发
- MANUAL：手动任务
- MANUAL_BIZ：手动业务流程
- SKIP：数据开发的空跑调度
- ADHOCQUERY：临时查询
- COMPONENT：组件管理',
                        'type' => 'string',
                        'example' => 'NORMAL',
                      ),
                      'FilePropertyContent' => 
                      array (
                        'description' => '文件的更多属性。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'DataSourceName' => 
                          array (
                            'description' => '文件关联的数据源唯一标识。',
                            'type' => 'string',
                            'example' => 'odps_source',
                          ),
                          'ParentFileId' => 
                          array (
                            'description' => '文件所属的循环节点或遍历节点的节点ID。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1234122',
                          ),
                          'BusinessId' => 
                          array (
                            'description' => '文件所属的业务流程ID。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '74328',
                          ),
                          'CurrentVersion' => 
                          array (
                            'description' => '当前文件的最新版本。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1',
                          ),
                          'Owner' => 
                          array (
                            'description' => '文件责任人。',
                            'type' => 'string',
                            'example' => '7384234****',
                          ),
                          'FolderId' => 
                          array (
                            'description' => '文件所属的文件夹ID，您可以调用[GetFolder](~~173952~~)接口，通过文件夹ID查询文件详情。',
                            'type' => 'string',
                            'example' => 'aldurie78l2falure',
                          ),
                        ),
                      ),
                      'NodeConfiguration' => 
                      array (
                        'description' => '文件的调度属性配置。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'RerunMode' => 
                          array (
                            'description' => '重跑属性。取值如下：
- ALL_ALLOWED：运行成功或失败后皆可重跑。
- FAILURE_ALLOWED：运行成功后不可重跑，运行失败后可以重跑。
- ALL_DENIED：运行成功或失败皆不可重跑。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>重跑属性”配置内容对应。',
                            'type' => 'string',
                            'example' => 'ALL_ALLOWED',
                          ),
                          'SchedulerType' => 
                          array (
                            'description' => '调度的类型，取值如下：
- NORMAL：正常调度任务。
- MANUAL：手动任务，不会被日常调度，对应手动业务流程下的节点。
- PAUSE：暂停任务。
- SKIP：空跑任务，被日常调度，但启动调度时直接被置为成功。',
                            'type' => 'string',
                            'example' => 'NORMAL',
                          ),
                          'ParaValue' => 
                          array (
                            'description' => '调度参数。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>参数”对应。您可以参考[调度参数](~~137548~~)配置。',
                            'type' => 'string',
                            'example' => 'a=x b=y',
                          ),
                          'CycleType' => 
                          array (
                            'description' => '调度周期的类型，包括NOT_DAY（分钟、小时）和DAY（日、周、月）。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>时间属性>调度周期”对应。',
                            'type' => 'string',
                            'example' => 'DAY',
                          ),
                          'DependentNodeIdList' => 
                          array (
                            'description' => '当DependentType参数配置为USER_DEFINE时，用于设置当前文件具体依赖的节点ID。依赖多个节点时，使用英文逗号（,）分隔。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖”配置为“上一周期”后，依赖项选择”其他节点“时配置的内容对应。',
                            'type' => 'string',
                            'example' => '5,10,15,20',
                          ),
                          'ResourceGroupId' => 
                          array (
                            'description' => '文件发布成任务后，任务执行时使用的资源组。您可以调用[ListResourceGroups](~~173913~~)获取工作空间可用的资源组列表。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '375827434852437',
                          ),
                          'AutoRerunTimes' => 
                          array (
                            'description' => '自动重跑次数。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '3',
                          ),
                          'AutoRerunIntervalMillis' => 
                          array (
                            'description' => '自动重跑间隔毫秒数。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '120000',
                          ),
                          'CronExpress' => 
                          array (
                            'description' => '调度Cron表达式。',
                            'type' => 'string',
                            'example' => '00 05 00 * * ?',
                          ),
                          'InputList' => 
                          array (
                            'description' => '文件依赖的上游文件输出。',
                            'type' => 'array',
                            'items' => 
                            array (
                              'description' => '依赖的上游文件输出信息。',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'Input' => 
                                array (
                                  'description' => '文件依赖的上游文件的输出名称。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖“选择”同周期“时的”父节点输出名称”对应。',
                                  'type' => 'string',
                                  'example' => 'dw_project_root',
                                ),
                                'ParseType' => 
                                array (
                                  'description' => '配置文件依赖的方式，取值如下：
- MANUAL：手动配置。
- AUTO：自动解析。',
                                  'type' => 'string',
                                  'example' => 'MANUAL',
                                ),
                              ),
                            ),
                          ),
                          'OutputList' => 
                          array (
                            'description' => '文件的输出。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖“选择”同周期“时的”本节点的输出名称”对应。',
                            'type' => 'array',
                            'items' => 
                            array (
                              'description' => '文件的输出信息。',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'RefTableName' => 
                                array (
                                  'description' => '文件的输出值。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖“选择”同周期“时的“本节点的输出表”列的值对应。',
                                  'type' => 'string',
                                  'example' => 'ods_user_info_d',
                                ),
                                'Output' => 
                                array (
                                  'description' => '文件的输出名称。

该参数与[DataWorks控制台](https://workbench.data.aliyun.com/console)中，数据开发任务的“调度配置>调度依赖“选择”同周期“时的“本节点的输出名称”列值对应。',
                                  'type' => 'string',
                                  'example' => 'dw_project.002_out',
                                ),
                              ),
                            ),
                          ),
                          'DependentType' => 
                          array (
                            'description' => '依赖上一周期的方式。取值如下：
- SELF：依赖项选择本节点。
- CHILD：依赖项选择一级子节点。
- USER_DEFINE：依赖项选择其他节点。
- NONE：未选择依赖项，即不会依赖上一周期。
',
                            'type' => 'string',
                            'example' => 'USER_DEFINE',
                          ),
                        ),
                      ),
                    ),
                  ),
                  'TableModel' => 
                  array (
                    'description' => '表提交和发布时的快照，当Message类型为IDE_TABLE_SUBMIT_BEFORE和IDE_TABLE_DEPLOY_BEFORE时有效。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Env' => 
                      array (
                        'description' => '表所属环境。取值如下：
- DEV：开发环境。
- PROD：生产环境。',
                        'type' => 'string',
                        'example' => 'DEV',
                      ),
                      'LifeCycle' => 
                      array (
                        'description' => '表的生命周期。单位为天。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '7',
                      ),
                      'TableName' => 
                      array (
                        'description' => '表名称。',
                        'type' => 'string',
                        'example' => 'tb_hello',
                      ),
                      'DataSourceName' => 
                      array (
                        'description' => '表所属数据源的唯一标识。',
                        'type' => 'string',
                        'example' => 'odps_source',
                      ),
                      'Columns' => 
                      array (
                        'description' => '字段列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '字段信息。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ColumnName' => 
                            array (
                              'description' => '字段名称。',
                              'type' => 'string',
                              'example' => 'ID',
                            ),
                            'ColumnType' => 
                            array (
                              'description' => '字段类型。',
                              'type' => 'string',
                              'example' => 'BIGINT',
                            ),
                            'IsPartitionColumn' => 
                            array (
                              'description' => '是否为分区字段，取值如下：
- true：是分区字段。
- false：非分区字段。',
                              'type' => 'boolean',
                              'example' => 'false',
                            ),
                            'Comment' => 
                            array (
                              'description' => '字段备注。',
                              'type' => 'string',
                              'example' => 'ID',
                            ),
                          ),
                        ),
                      ),
                      'Comment' => 
                      array (
                        'description' => '表的备注信息。',
                        'type' => 'string',
                        'example' => '新建的一张表。',
                      ),
                      'Location' => 
                      array (
                        'description' => '外部表的Location信息。',
                        'type' => 'string',
                        'example' => 'hdfs://path/to/object',
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"8abcb91f-d266-4073-b907-2ed670378ed1\\",\\n  \\"EventDetail\\": {\\n    \\"FileExecutionCommand\\": {\\n      \\"FileId\\": 1234123,\\n      \\"DataSourceName\\": \\"odps_source\\",\\n      \\"Content\\": \\"SHOW TABLES;\\",\\n      \\"FileType\\": 10\\n    },\\n    \\"DeletedFile\\": {\\n      \\"Owner\\": \\"7384234****\\",\\n      \\"FileType\\": 10,\\n      \\"CurrentVersion\\": 1,\\n      \\"BusinessId\\": 74328,\\n      \\"FileName\\": \\"hello_dataworks.sql\\",\\n      \\"DataSourceName\\": \\"odps_source\\",\\n      \\"UseType\\": \\"NORMAL\\",\\n      \\"FolderId\\": \\"aldurie78l2falure\\",\\n      \\"ParentFileId\\": 1234122,\\n      \\"Content\\": \\"SHOW TABLES;\\",\\n      \\"NodeId\\": 421429,\\n      \\"FileId\\": 1234123\\n    },\\n    \\"CommittedFile\\": {\\n      \\"FileId\\": 1234123,\\n      \\"Content\\": \\"SHOW TABLES;\\",\\n      \\"Committor\\": \\"7384234****\\",\\n      \\"FileType\\": 10,\\n      \\"ChangeType\\": \\"UPDATE\\",\\n      \\"FileName\\": \\"hello_dataworks.sql\\",\\n      \\"NodeId\\": 421429,\\n      \\"Comment\\": \\"第二次版本提交\\",\\n      \\"UseType\\": \\"NORMAL\\",\\n      \\"FilePropertyContent\\": {\\n        \\"DataSourceName\\": \\"odps_source\\",\\n        \\"ParentFileId\\": 1234122,\\n        \\"BusinessId\\": 74328,\\n        \\"CurrentVersion\\": 1,\\n        \\"Owner\\": \\"7384234****\\",\\n        \\"FolderId\\": \\"aldurie78l2falure\\"\\n      },\\n      \\"NodeConfiguration\\": {\\n        \\"RerunMode\\": \\"ALL_ALLOWED\\",\\n        \\"SchedulerType\\": \\"NORMAL\\",\\n        \\"ParaValue\\": \\"a=x b=y\\",\\n        \\"CycleType\\": \\"DAY\\",\\n        \\"DependentNodeIdList\\": \\"5,10,15,20\\",\\n        \\"ResourceGroupId\\": 375827434852437,\\n        \\"AutoRerunTimes\\": 3,\\n        \\"AutoRerunIntervalMillis\\": 120000,\\n        \\"CronExpress\\": \\"00 05 00 * * ?\\",\\n        \\"InputList\\": [\\n          {\\n            \\"Input\\": \\"dw_project_root\\",\\n            \\"ParseType\\": \\"MANUAL\\"\\n          }\\n        ],\\n        \\"OutputList\\": [\\n          {\\n            \\"RefTableName\\": \\"ods_user_info_d\\",\\n            \\"Output\\": \\"dw_project.002_out\\"\\n          }\\n        ],\\n        \\"DependentType\\": \\"USER_DEFINE\\"\\n      }\\n    },\\n    \\"TableModel\\": {\\n      \\"Env\\": \\"DEV\\",\\n      \\"LifeCycle\\": 7,\\n      \\"TableName\\": \\"tb_hello\\",\\n      \\"DataSourceName\\": \\"odps_source\\",\\n      \\"Columns\\": [\\n        {\\n          \\"ColumnName\\": \\"ID\\",\\n          \\"ColumnType\\": \\"BIGINT\\",\\n          \\"IsPartitionColumn\\": false,\\n          \\"Comment\\": \\"ID\\"\\n        }\\n      ],\\n      \\"Comment\\": \\"新建的一张表。\\",\\n      \\"Location\\": \\"hdfs://path/to/object\\"\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetIDEEventDetailResponse>\\n    <RequestId>8abcb91f-d266-4073-b907-2ed670378ed1</RequestId>\\n    <EventDetail>\\n        <FileExecutionCommand>\\n            <FileId>1234123</FileId>\\n            <DataSourceName>odps_source</DataSourceName>\\n            <Content>SHOW TABLES;</Content>\\n            <FileType>10</FileType>\\n        </FileExecutionCommand>\\n        <DeletedFile>\\n            <Owner>7384234****</Owner>\\n            <FileType>10</FileType>\\n            <CurrentVersion>1</CurrentVersion>\\n            <BusinessId>74328</BusinessId>\\n            <FileName>hello_dataworks.sql</FileName>\\n            <DataSourceName>odps_source</DataSourceName>\\n            <UseType>NORMAL</UseType>\\n            <FolderId>aldurie78l2falure</FolderId>\\n            <ParentFileId>1234122</ParentFileId>\\n            <Content>SHOW TABLES;</Content>\\n            <NodeId>421429</NodeId>\\n            <FileId>1234123</FileId>\\n        </DeletedFile>\\n        <CommittedFile>\\n            <FileId>1234123</FileId>\\n            <Content>SHOW TABLES;</Content>\\n            <Committor>7384234****</Committor>\\n            <FileType>10</FileType>\\n            <ChangeType>UPDATE</ChangeType>\\n            <FileName>hello_dataworks.sql</FileName>\\n            <NodeId>421429</NodeId>\\n            <Comment>第二次版本提交</Comment>\\n            <UseType>NORMAL</UseType>\\n            <FilePropertyContent>\\n                <DataSourceName>odps_source</DataSourceName>\\n                <ParentFileId>1234122</ParentFileId>\\n                <BusinessId>74328</BusinessId>\\n                <CurrentVersion>1</CurrentVersion>\\n                <Owner>7384234****</Owner>\\n                <FolderId>aldurie78l2falure</FolderId>\\n            </FilePropertyContent>\\n            <NodeConfiguration>\\n                <RerunMode>ALL_ALLOWED</RerunMode>\\n                <SchedulerType>NORMAL</SchedulerType>\\n                <ParaValue>a=x b=y</ParaValue>\\n                <CycleType>DAY</CycleType>\\n                <DependentNodeIdList>5,10,15,20</DependentNodeIdList>\\n                <ResourceGroupId>375827434852437</ResourceGroupId>\\n                <AutoRerunTimes>3</AutoRerunTimes>\\n                <AutoRerunIntervalMillis>120000</AutoRerunIntervalMillis>\\n                <CronExpress>00 05 00 * * ?</CronExpress>\\n                <InputList>\\n                    <Input>dw_project_root</Input>\\n                    <ParseType>MANUAL</ParseType>\\n                </InputList>\\n                <OutputList>\\n                    <RefTableName>ods_user_info_d</RefTableName>\\n                    <Output>dw_project.002_out</Output>\\n                </OutputList>\\n                <DependentType>USER_DEFINE</DependentType>\\n            </NodeConfiguration>\\n        </CommittedFile>\\n        <TableModel>\\n            <Env>DEV</Env>\\n            <LifeCycle>7</LifeCycle>\\n            <TableName>tb_hello</TableName>\\n            <DataSourceName>odps_source</DataSourceName>\\n            <Columns>\\n                <ColumnName>ID</ColumnName>\\n                <ColumnType>BIGINT</ColumnType>\\n                <IsPartitionColumn>false</IsPartitionColumn>\\n                <Comment>ID</Comment>\\n            </Columns>\\n            <Comment>新建的一张表。</Comment>\\n            <Location>hdfs://path/to/object</Location>\\n        </TableModel>\\n    </EventDetail>\\n</GetIDEEventDetailResponse>","errorExample":""}]',
      'title' => '查询触发扩展点事件时的数据快照',
      'description' => '
',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateResourceFile' => 
    array (
      'summary' => '调用CreateResourceFile接口，在数据开发中创建或上传一个资源文件，此API功能与IDE界面中新建资源功能保持一致。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '185133',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
          1 => 'FEATUREdideJ3TPTK',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间ID。需要用该参数来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '0',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'FileFolderPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的路径。

',
            'type' => 'string',
            'required' => true,
            'example' => '业务流程/第一个业务流程/MaxCompute/文件夹1/文件夹2',
          ),
        ),
        2 => 
        array (
          'name' => 'FileName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的名称。',
            'type' => 'string',
            'required' => true,
            'example' => '文件名',
          ),
        ),
        3 => 
        array (
          'name' => 'FileType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的代码类型。

常用的代码及其对应的文件类型包括6（Shell）、10（ODPS SQL）、11（ODPS MR）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。

您可以调用ListFileType接口，查询文件的代码类型。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'minimum' => '0',
            'example' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'FileDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的描述信息。',
            'type' => 'string',
            'required' => false,
            'example' => '这是一个描述信息',
          ),
        ),
        5 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件责任人的阿里云用户ID。如果该参数为空，则默认使用调用者的阿里云用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '1000000000001',
          ),
        ),
        6 => 
        array (
          'name' => 'Content',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件代码内容，不同代码类型（fileType）的文件，代码格式不同。您可以在运维中心找到对应类型的任务，右键单击查看代码，查看具体的代码格式。',
            'type' => 'string',
            'required' => false,
            'example' => 'SHOW TABLES;',
          ),
        ),
        7 => 
        array (
          'name' => 'ResourceFile',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'POP提供的文件上传OSS URL。',
            'type' => 'string',
            'required' => false,
            'example' => 'http://bucketname1.oss-cn-shanghai.aliyuncs.com/example',
            'isFileTransferUrl' => true,
          ),
        ),
        8 => 
        array (
          'name' => 'OriginResourceName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '原始资源文件的名称。',
            'type' => 'string',
            'required' => true,
            'example' => 'origin_file_name.sql',
          ),
        ),
        9 => 
        array (
          'name' => 'UploadMode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件资源上传模式。目前仅对MaxCompute的File类型文件生效，取值如下：

- true：可下载的资源模式。

- false：在线编辑的文本模式。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        10 => 
        array (
          'name' => 'RegisterToCalcEngine',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否将资源同步上传到计算引擎。',
            'type' => 'boolean',
            'required' => true,
            'example' => 'false',
          ),
        ),
        11 => 
        array (
          'name' => 'StorageURL',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '资源文件在计算引擎上的存储路径，目前只有EMR和CDH用到该字段。EMR格式为[oss|hdfs]://path/to/object，CDH默认需要填写为/user/admin/lib。',
            'type' => 'string',
            'required' => false,
            'example' => 'oss://oss-cn-shanghai.aliyuncs.com/emr-test',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Data' => 
              array (
                'description' => '文件创建成功后的ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '1000001',
              ),
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Data\\": 1000001,\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateResourceFileResponse>\\n    <Data>1000001</Data>\\n    <RequestId>0000-ABCD-EFG</RequestId>\\n</CreateResourceFileResponse>","errorExample":""}]',
      'title' => '创建资源文件',
    ),
    'CreateDISyncTask' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'APP' => 
          array (
          ),
        ),
        2 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建的数据集成同步任务的任务类型。
目前支持使用CreateDISyncTask接口创建数据集成离线同步任务（DI_OFFLINE），实时同步任务（DI_REALTIME）和解决方案（DI_SOLUTION）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_OFFLINE',
          ),
        ),
        2 => 
        array (
          'name' => 'TaskContent',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '使用脚本模式配置数据集成离线同步任务的配置内容。详情请参见[通过脚本模式配置任务](~~137717~~)。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '{"type":"job","version":"2.0","steps":[{"stepType":"mysql","parameter":{"envType":1,"datasource":"mysql_pub","column":["id","name","create_time","age","score","t_01"],"connection":[{"datasource":"mysql_pub","table":["u_pk"]}],"where":"","splitPk":"id","encoding":"UTF-8"},"name":"Reader","category":"reader"},{"stepType":"odps","parameter":{"partition":"pt=${bizdate}","truncate":true,"datasource":"odps_source","envType":1,"column":["id","name","create_time","age","score","t_01"],"emptyAsNull":false,"tableComment":"null","table":"u_pk"},"name":"Writer","category":"writer"}],"setting":{"executeMode":null,"errorLimit":{"record":""},"speed":{"concurrent":2,"throttle":false}},"order":{"hops":[{"from":"Reader","to":"Writer"}]}}',
            'default' => '',
          ),
        ),
        3 => 
        array (
          'name' => 'TaskParam',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据集成同步任务的配置参数。目前支持配置如下参数：
- FileFolderPath：表示数据集成同步任务的存放路径。
- ResourceGroup：表示数据集成同步任务所使用的数据集成资源组标识（Identifier）。您可以调用[ListResourceGroups](~~173913~~)，获取资源组标识。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '{"FileFolderPath":"业务流程/XXX/数据集成","ResourceGroup":"S_res_group_XXX_XXXX"}',
          ),
        ),
        4 => 
        array (
          'name' => 'TaskName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建的数据集成同步任务的名称。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'new_di_task',
          ),
        ),
        5 => 
        array (
          'name' => 'ClientToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '幂等参数，该参数可为空。',
            'type' => 'string',
            'required' => false,
            'example' => '0000-ABCD-EFG****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '创建数据集成同步任务的返回结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '创建数据集成同步任务的结果状态。取值如下：
- success：表示创建任务成功。
- fail：表示创建任务失败。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'Message' => 
                  array (
                    'description' => '创建数据集成同步任务失败的原因描述，如果成功，该字段为空，如果不成功，实例如下"不合法的目录路径：业务流程/xxxx/数据集成"，
',
                    'type' => 'string',
                    'example' => '不合法的目录路径：业务流程/xxxx/数据集成',
                  ),
                  'FileId' => 
                  array (
                    'description' => '成功创建的数据集成同步任务的任务ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1000001',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter.File.Existed',
            'errorMessage' => 'The file name already exists.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"Message\\": \\"不合法的目录路径：业务流程/xxxx/数据集成\\",\\n    \\"FileId\\": 1000001\\n  }\\n}","errorExample":""},{"type":"xml","example":"<CreateDISyncTaskResponse>\\n    <Success>true</Success>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Data>\\n        <Status>success</Status>\\n        <FileId>1000001</FileId>\\n    </Data>\\n</CreateDISyncTaskResponse>","errorExample":""}]',
      'title' => '创建数据集成同步任务',
      'summary' => '调用CreateDISyncTask创建数据集成同步任务。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteDISyncTask' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
        2 => 
        array (
          'APP' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。

该参数用于确定本次API调用操作使用的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据集成同步任务的类型。
当前仅支持取值为DI_REALTIME，表示实时数据同步任务。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_REALTIME',
          ),
        ),
        2 => 
        array (
          'name' => 'FileId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实时数据同步任务的ID。您可以调用[ListFiles](~~173942~~)接口获取任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999999999999',
            'minimum' => '1',
            'example' => '100',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：请求成功。
- false：请求失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '删除数据集成同步任务的结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '删除数据集成同步任务的结果状态。取值如下：
- success：表示删除数据集成同步任务成功。
- fail：表示删除数据集成同步任务失败。您可以查看具体的失败原因处理问题。',
                    'type' => 'string',
                    'example' => 'fail',
                  ),
                  'Message' => 
                  array (
                    'description' => '删除数据集成同步任务失败后的原因描述。
如果删除数据集成同步任务成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'fileId:[100] is invalid.',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Param.Invalid',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"fail\\",\\n    \\"Message\\": \\"fileId:[100] is invalid.\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DeleteDISyncTaskResponse>\\n    <Success>true</Success>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Data>\\n        <Status>fail</Status>\\n        <Message>fileId:[100] is invalid.</Message>\\n    </Data>\\n</DeleteDISyncTaskResponse>","errorExample":""}]',
      'title' => '删除数据集成同步任务',
      'summary' => '调用DeleteDISyncTask接口，删除数据集成同步任务。当前仅支持使用该接口删除实时数据同步任务。',
      'description' => '如果您希望删除离线数据同步任务，请使用DeleteFile接口，具体操作流程请参考[删除同步任务](~~321443~~)。',
    ),
    'UpdateDISyncTask' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'APP' => 
          array (
          ),
        ),
        2 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。
该参数用来确定本次API调用操作使用的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '修改的数据集成同步任务的任务类型。
目前仅支持使用UpdateDISyncTask接口修改数据集成离线同步任务（DI_OFFLINE）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_OFFLINE',
          ),
        ),
        2 => 
        array (
          'name' => 'TaskContent',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '更新已创建的数据集成同步任务通过脚本模式配置的任务内容。详情请参见[通过脚本模式配置任务](~~137717~~)。当前仅支持通过UpdateDISyncTask接口更新数据集成离线同步任务。如果您无需更新数据集成同步任务的配置内容，则可将该参数置为空。
',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '{"type":"job","version":"2.0","steps":[{"stepType":"mysql","parameter":{"envType":1,"datasource":"mysql_pub","column":["id","name","create_time","age","score","t_01"],"connection":[{"datasource":"mysql_pub","table":["u_pk"]}],"where":"","splitPk":"id","encoding":"UTF-8"},"name":"Reader","category":"reader"},{"stepType":"odps","parameter":{"partition":"pt=${bizdate}","truncate":true,"datasource":"odps_source","envType":1,"column":["id","name","create_time","age","score","t_01"],"emptyAsNull":false,"tableComment":"null","table":"u_pk"},"name":"Writer","category":"writer"}],"setting":{"executeMode":null,"errorLimit":{"record":""},"speed":{"concurrent":2,"throttle":false}},"order":{"hops":[{"from":"Reader","to":"Writer"}]}}',
            'default' => '',
          ),
        ),
        3 => 
        array (
          'name' => 'TaskParam',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '更新数据集成同步任务的配置参数，使用JSON格式。

目前仅支持更新数据集成同步任务的配置参数ResourceGroup，即数据集成同步任务所使用的数据集成资源组标识（Identifier）。您可以调用[ListResourceGroups](~~173913~~)，获取资源组标识。
如果您无需更新数据集成同步任务的配置参数，则可将TaskParam置为空。
',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '{"ResourceGroup":"S_res_group_XXX_XXXX"}',
          ),
        ),
        4 => 
        array (
          'name' => 'FileId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要更新的数据集成同步任务的任务ID。您可以调用[ListFiles](~~173942~~)接口获取同步任务的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999999999999',
            'minimum' => '1',
            'example' => '1000000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '更新数据集成同步任务的返回结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '更新数据集成同步任务的结果状态。取值如下：
- success：表示更新数据集成同步任务成功。
- fail：表示更新数据集成同步任务失败。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'Message' => 
                  array (
                    'description' => '更新数据集成同步任务失败后的原因描述。如果更新数据集成同步任务成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'ResourceGroup:[S_res_group_XXX] is invalid.',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"Message\\": \\"ResourceGroup:[S_res_group_XXX] is invalid.\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc1411515937635973****</RequestId>\\n<Data>\\n    <Status>success</Status>\\n    <Message>ResourceGroup:[S_res_group_XXX] is invalid.</Message>\\n</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '更新同步任务',
      'summary' => '更新数据集成同步任务。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'TestNetworkConnection' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'APP' => 
          array (
          ),
        ),
        2 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78363',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRWC5F7',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所在的DataWorks工作空间ID。您可以调用[ListProjects](~~178393~~)接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'DatasourceName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'mysql_name',
          ),
        ),
        2 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所属的环境。取值如下：
- 0：开发环境。
- 1：生产环境。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'ResourceGroup',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所使用的资源组的标识（Identifier）。您可以调用[ListResourceGroups](~~173913~~)接口获取资源组的标识（Identifier）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'S_res_group_2XXXX4_1619100XXXXX',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。用于出现错误后定位日志，排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG	',
              ),
              'TaskList' => 
              array (
                'description' => '测试数据源与资源组网络连通性的返回结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'ConnectMessage' => 
                  array (
                    'description' => '测试目标数据源与其所使用资源组的网络连通性失败后的原因描述。如果数据源与资源组网络连通性测试成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => '可连通',
                  ),
                  'ConnectStatus' => 
                  array (
                    'description' => '测试目标数据源与其所使用资源组网络连通性的结果状态。取值如下：
- true：表示目标数据源与其所使用资源组的网络连通成功。
- false：表示目标数据源与其所使用资源组的网络连通失败。您可以查看ConnectMessage参数定位失败原因。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\\\t\\",\\n  \\"TaskList\\": {\\n    \\"ConnectMessage\\": \\"可连通\\",\\n    \\"ConnectStatus\\": true\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG\\t</RequestId>\\n<TaskList>\\n    <ConnectStatus>true</ConnectStatus>\\n    <ConnectMessage>可连通</ConnectMessage>\\n</TaskList>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '测试数据源网络连通性',
      'summary' => '测试目标数据源与所使用资源组的网络连通性。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetDataSourceMeta' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'APP' => 
          array (
          ),
        ),
        2 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'DatasourceName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'mysql_name',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'maximum' => '100',
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的数据条数。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'maximum' => '10000',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所属的环境。取值如下：
- 0：开发环境。
- 1：生产环境。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。用于出现错误后定位日志，排查问题。

',
                'type' => 'string',
                'example' => '0000-ABCD-EFG	',
              ),
              'Data' => 
              array (
                'description' => '获取目标数据源Meta信息的返回的结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '获取目标数据源Meta信息的结果状态。取值如下：
- success：表示获取目标数据源的Meta信息成功。
- fail：表示获取目标数据源的Meta信息失败。您可以查看Message参数定位失败原因。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'Message' => 
                  array (
                    'description' => '获取目标数据源Meta信息失败后的原因描述。如果获取目标数据源的Meta信息成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'read datasource time out',
                  ),
                  'Meta' => 
                  array (
                    'description' => '返回的目标数据源的Meta信息。返回的信息为JSON格式。

`{"dbTables":[{"dbName":"testdb","schema":[{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table1","tableName":"table1"}]},{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table2","tableName":"table2"}]}]}]}`

参数描述如下：
- dbName：数据源所在的数据库名称。
- schema：数据库所属的模式。
- enable：数据库是否可用，包含true（表示数据库可用），false（表示数据库不可用）取值。
- tableName：数据库包含的表名称。
- tableInfos：数据库中表的信息。',
                    'type' => 'string',
                    'example' => '{"dbTables":[{"dbName":"testdb","schema":[{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table1","tableName":"table1"}]},{"tableInfos":[{"dbName":"testdb","enable":true,"table":"table2","tableName":"table2"}]}]}]}',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\\\t\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"Message\\": \\"read datasource time out\\",\\n    \\"Meta\\": \\"{\\\\\\"dbTables\\\\\\":[{\\\\\\"dbName\\\\\\":\\\\\\"testdb\\\\\\",\\\\\\"schema\\\\\\":[{\\\\\\"tableInfos\\\\\\":[{\\\\\\"dbName\\\\\\":\\\\\\"testdb\\\\\\",\\\\\\"enable\\\\\\":true,\\\\\\"table\\\\\\":\\\\\\"table1\\\\\\",\\\\\\"tableName\\\\\\":\\\\\\"table1\\\\\\"}]},{\\\\\\"tableInfos\\\\\\":[{\\\\\\"dbName\\\\\\":\\\\\\"testdb\\\\\\",\\\\\\"enable\\\\\\":true,\\\\\\"table\\\\\\":\\\\\\"table2\\\\\\",\\\\\\"tableName\\\\\\":\\\\\\"table2\\\\\\"}]}]}]}\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDataSourceMetaResponse>\\n    <Success>true</Success>\\n    <RequestId>0000-ABCD-EFG\\t</RequestId>\\n    <Data>\\n        <Status>success</Status>\\n        <Message>read datasource time out</Message>\\n        <Meta>{\\"dbTables\\":[{\\"dbName\\":\\"testdb\\",\\"schema\\":[{\\"tableInfos\\":[{\\"dbName\\":\\"testdb\\",\\"enable\\":true,\\"table\\":\\"table1\\",\\"tableName\\":\\"table1\\"}]},{\\"tableInfos\\":[{\\"dbName\\":\\"testdb\\",\\"enable\\":true,\\"table\\":\\"table2\\",\\"tableName\\":\\"table2\\"}]}]}]}</Meta>\\n    </Data>\\n</GetDataSourceMetaResponse>","errorExample":""}]',
      'title' => '获取目标数据源的Meta信息',
      'summary' => '调用GetDataSourceMeta获取目标数据源的Meta信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListDIProjectConfig' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
        2 => 
        array (
          'APP' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '1000',
          ),
        ),
        1 => 
        array (
          'name' => 'DestinationType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据集成同步解决方案任务的目的端数据源。该参数不能为空。
调用ListDIProjectConfig查看同步解决方案的全局配置目前仅支持配置目的端数据源为analyticdb_for_mysql、odps、elasticsearch、holo、mysql及polardb。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'elasticsearch',
          ),
        ),
        2 => 
        array (
          'name' => 'SourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据集成同步解决方案任务的源端数据源。
调用ListDIProjectConfig查看同步解决方案的全局配置目前仅支持配置源端数据源为oracle、mysql、polardb、datahub、drds及analyticdb_for_mysql。
如果不配置源端数据源，则默认全局配置对所有的源端数据源均生效。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'mysql',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。用于出现错误后定位日志，排查问题。

',
                'type' => 'string',
                'example' => '0000-ABCD-EFG	',
              ),
              'Data' => 
              array (
                'description' => '查看目标工作空间中数据集成同步解决方案任务默认全局配置的返回结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Config' => 
                  array (
                    'description' => '数据集成同步解决方案任务默认的全局配置内容（即对不同DDL消息类型配置的默认处理策略）。示例如下：
{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}

DDL消息类型如下：
- RENAMECOLUMN：重命名列。
- DROPTABLE：删除表。
- CREATETABLE：新建表。
- MODIFYCOLUMN：修改列类型。
- TRUNCATETABLE：清空表。
- DROPCOLUMN：删除列。
- ADDCOLUMN：新增列。
- RENAMETABLE：重命名表。

DataWorks收到对应类型的DDL消息时，处理策略如下：
- WARNING：直接丢弃该消息，同时会在实时同步日志中记录告警信息，指明该消息因执行出错被丢弃。
- IGNORE：直接丢弃该消息，不再向目的端数据源发送。
- CRITICAL：实时同步任务直接显示出错状态并终止运行。
- NORMAL：将相应消息继续下发给目的端数据源，由目的端数据源来处理。因为不同目的端数据源对DDL消息处理策略可能会不同，因此DataWorks只执行转发操作。
',
                    'type' => 'string',
                    'example' => '{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\\\t\\",\\n  \\"Data\\": {\\n    \\"Config\\": \\"{\\\\\\"RENAMECOLUMN\\\\\\":\\\\\\"WARNING\\\\\\",\\\\\\"DROPTABLE\\\\\\":\\\\\\"WARNING\\\\\\",\\\\\\"CREATETABLE\\\\\\":\\\\\\"WARNING\\\\\\",\\\\\\"MODIFYCOLUMN\\\\\\":\\\\\\"WARNING\\\\\\",\\\\\\"TRUNCATETABLE\\\\\\":\\\\\\"WARNING\\\\\\",\\\\\\"DROPCOLUMN\\\\\\":\\\\\\"WARNING\\\\\\",\\\\\\"ADDCOLUMN\\\\\\":\\\\\\"WARNING\\\\\\",\\\\\\"RENAMETABLE\\\\\\":\\\\\\"WARNING\\\\\\"}\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG\\t</RequestId>\\n<Data>\\n    <Config>{\\"RENAMECOLUMN\\":\\"WARNING\\",\\"DROPTABLE\\":\\"WARNING\\",\\"CREATETABLE\\":\\"WARNING\\",\\"MODIFYCOLUMN\\":\\"WARNING\\",\\"TRUNCATETABLE\\":\\"WARNING\\",\\"DROPCOLUMN\\":\\"WARNING\\",\\"ADDCOLUMN\\":\\"WARNING\\",\\"RENAMETABLE\\":\\"WARNING\\"}</Config>\\n</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '查看数据集成项目默认配置',
      'summary' => '查看当前工作空间中数据集成同步解决方案任务默认的全局配置。',
      'description' => '当前DataWorks仅支持为同步解决方案任务中的实时同步DDL消息处理策略设置默认的全局配置。如果您的同步解决方案任务包含实时同步任务，则配置**DDL消息处理规则**时会读取此处的全局配置为默认配置。您也可以根据实际业务需求修改目标同步任务的默认**DDL消息处理规则**为所需的配置。配置数据集成同步解决方案任务，详情请参见[配置同步解决方案任务](~~199008~~)。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateDIProjectConfig' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'APP' => 
          array (
          ),
        ),
        2 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'DestinationType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据集成同步解决方案任务的目的端数据源。该参数不能为空。
调用UpdateDIProjectConfig修改同步解决方案的全局配置，目前仅支持配置目的端数据源为analyticdb_for_mysql、odps、elasticsearch、holo、mysql及polardb。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps',
          ),
        ),
        2 => 
        array (
          'name' => 'SourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据集成同步解决方案任务的源端数据源。
调用UpdateDIProjectConfig修改同步解决方案任务的全局配置，目前仅支持配置源端数据源为oracle、mysql、polardb、datahub、drds及analyticdb_for_mysql。
如果不配置源端数据源，则默认全局配置对所有的源端数据源均生效。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'mysql',
          ),
        ),
        3 => 
        array (
          'name' => 'ProjectConfig',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '修改后的数据集成同步解决方案任务默认的全局配置内容（即对不同DDL消息类型配置的默认处理策略）。请使用JSON格式。示例如下：
{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}

DDL消息类型如下：
- RENAMECOLUMN：重命名列。
- DROPTABLE：删除表。
- CREATETABLE：新建表。
- MODIFYCOLUMN：修改列类型。
- TRUNCATETABLE：清空表。
- DROPCOLUMN：删除列。
- ADDCOLUMN：新增列。
- RENAMETABLE：重命名表。

DataWorks收到对应类型的DDL消息时，处理策略如下：
- WARNING：直接丢弃该消息，同时会在实时同步日志中记录告警信息，指明该消息因执行出错被丢弃。
- IGNORE：直接丢弃该消息，不再向目的端数据源发送。
- CRITICAL：实时同步任务直接显示出错状态并终止运行。
- NORMAL：将相应消息继续下发给目的端数据源，由目的端数据源来处理。因为不同目的端数据源对DDL消息处理策略可能会不同，因此DataWorks只执行转发操作。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"WARNING","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"WARNING","DROPCOLUMN":"WARNING","ADDCOLUMN":"WARNING","RENAMETABLE":"WARNING"}',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。用于出现错误后定位日志，排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG	',
              ),
              'Data' => 
              array (
                'description' => '修改目标工作空间中数据集成同步解决方案任务默认全局配置的返回结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '修改数据集成同步解决方案任务默认的全局配置是否成功。取值如下：
- success：修改成功。
- fail：修改失败。
',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\\\t\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"success\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<UpdateDIProjectConfigResponse>\\n    <Success>true</Success>\\n    <RequestId>0000-ABCD-EFG\\t</RequestId>\\n    <Data>\\n        <Status>success</Status>\\n    </Data>\\n</UpdateDIProjectConfigResponse>","errorExample":""}]',
      'title' => '修改同步解决方案任务的全局配置',
      'summary' => '修改当前工作空间中数据集成同步解决方案任务默认的全局配置。',
      'description' => '当前DataWorks仅支持为同步解决方案任务中的实时同步DDL消息处理策略设置默认的全局配置。如果您的同步解决方案任务包含实时同步任务，则配置**DDL消息处理规则**时会读取此处的全局配置为默认配置。您也可以根据实际业务需求修改目标同步任务的默认**DDL消息处理规则**为所需的配置。配置数据集成同步解决方案任务，详情请参见[配置同步解决方案任务](~~199008~~)。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetDISyncTask' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'APP' => 
          array (
          ),
        ),
        2 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间管理页面获取ID。

该参数用来确定本次API调用操作使用的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所关联的数据集成同步任务的任务类型。取值如下：

- DI_REALTIME：表示数据集成实时同步任务。
- DI_SOLUTION：表示数据集成同步解决方案。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_REALTIME',
          ),
        ),
        2 => 
        array (
          'name' => 'FileId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '- 当TaskType为DI_REALTIME时，则FileId为实时同步任务的文件ID。
- 当TaskType为DI_SOLUTION时，则FileId为同步解决方案的任务ID。

您可以调用[ListFiles](~~173942~~)接口获取任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999999999999',
            'minimum' => '1',
            'example' => '100',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '获取数据集成任务的返回结果',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：

- True：成功。
- False：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1411515937635973****	',
              ),
              'Data' => 
              array (
                'description' => '获取数据集成任务的返回结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Code' => 
                  array (
                    'description' => '- 如果TaskType为DI_REALTIME，则获取实时同步任务的详情。
- 如果TaskType为DI_SOLUTION，则为null。',
                    'type' => 'string',
                    'example' => '{"extend":{"mode":"wizard","resourceGroup":"S_res_group_287114642182658_1560324290517"},"nodeDef":{},"order":{"hops":[{"from":"datahub_8htXSsfiS2vtZCVG","to":"datahub_CRHBAyGfhSaLmv2f"}]},"setting":{"errorLimit":{},"jvmOption":""},"steps":[{"stepType":"datahub","category":"writer","displayName":"DataHub1","parameter":{"batchSize":1000,"datasource":"datahub_cloud_dev_test","topic":"dwd_tfc_opt_speed_rid_amap_rt"},"name":"datahub_CRHBAyGfhSaLmv2f","gui":{"x":262,"y":325}},{"stepType":"datahub","displayName":"DataHub2","parameter":{"datasource":"datahub_uric_test","topic":"dwd_tfc_opt_speed_rid_amap_rt_330000","batchSize":1000},"name":"datahub_8htXSsfiS2vtZCVG","gui":{"x":268,"y":160.5},"category":"writer"}]}',
                  ),
                  'Status' => 
                  array (
                    'description' => '获取数据集成同步任务的结果状态。取值如下：

Success：表示获取数据集成同步任务成功。
Fail：表示获取数据集成同步任务失败。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'Message' => 
                  array (
                    'description' => '获取数据集成同步任务失败后的原因描述。

如果获取数据集成同步任务成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'fileId:[100] is invalid.',
                  ),
                  'SolutionDetail' => 
                  array (
                    'description' => '- 如果TaskType为DI_REALTIME，则为null。
- 如果TaskType为DI_SOLUTION，则获取同步解决方案任务的详情。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Status' => 
                      array (
                        'description' => '同步解决方案的执行状态

- 0-成功 
- 1-未运行 
- 2-运行中
- 3-失败 
- 4-提交
- 5-待人工确认
- 6-人工确认完成
- 7-其他 
- 8-等待 
- 9-已删除',
                        'type' => 'string',
                        'example' => '0',
                      ),
                      'Type' => 
                      array (
                        'description' => '同步解决方案任务的类型。',
                        'type' => 'string',
                        'example' => 'holo',
                      ),
                      'StartTime' => 
                      array (
                        'description' => '同步解决方案任务的开始时间。',
                        'type' => 'string',
                        'example' => '2021-12-07 14:40:51',
                      ),
                      'CreatorName' => 
                      array (
                        'description' => '同步解决方案任务的创建者名称。',
                        'type' => 'string',
                        'example' => 'dataworks_di',
                      ),
                      'ProjectId' => 
                      array (
                        'description' => '同步解决方案任务所在的项目ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '10000',
                      ),
                      'SourceType' => 
                      array (
                        'description' => '同步解决方案任务源端的类型。',
                        'type' => 'string',
                        'example' => 'mysql',
                      ),
                      'ProcessContent' => 
                      array (
                        'description' => '同步解决方案的配置详情。',
                        'type' => 'string',
                        'example' => '{"holoDatasource":"holo","offlineSyncConfig":{"nodeNameRule":"oneclick_holo_di_${db_table_name_src}_to_${db_table_name_dest}","resourceGroup":"group_219193793999490"},"processRuleId":1007,"readerConcurrent":10,"realtimeSyncConfig":{"content":{"order":{"hops":[{"from":"reader","to":"writer"}]},"setting":{"speed":{"readerConcurrent":10}},"steps":[{"stepType":"mysql","name":"reader","category":"reader","parameter":{"connection":[{"datasource":"mm","datasourceType":"mysql","table":[]}]}},{"stepType":"holo","name":"writer","category":"writer","parameter":{"datasource":"holo","writeMode":"replay","datasourceSchema":"public","tableMappingRule":{"datasource":[{"tableRule":[],"srcDatasourceName":"mm"}]}}}]},"extend":{"mode":"migration_holo","resourceGroup":"group_219193793999490"}},"setting":{"autoCreateWorkflow":true,"userDefinedFileNameExpression":"oneclick"},"srcType":"mysql","tableMappingRuleFromRealtimeSyncConfig":{"datasource":[{"srcDatasourceName":"mm","tableRule":[]}]}}',
                      ),
                      'Name' => 
                      array (
                        'description' => '同步解决方案任务的名称。',
                        'type' => 'string',
                        'example' => 'holo_20211206161025',
                      ),
                      'ProcessExtra' => 
                      array (
                        'description' => '同步解决方案任务的额外参数。',
                        'type' => 'string',
                        'example' => '{"processType":"new","tableNum":300}',
                      ),
                      'SubmitTime' => 
                      array (
                        'description' => '同步解决方案任务提交的时间。',
                        'type' => 'string',
                        'example' => '2021-12-07 14:40:51',
                      ),
                      'Id' => 
                      array (
                        'description' => '同步解决方案的任务ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '100',
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Param.Invalid',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\\\t\\",\\n  \\"Data\\": {\\n    \\"Code\\": \\"{\\\\\\"extend\\\\\\":{\\\\\\"mode\\\\\\":\\\\\\"wizard\\\\\\",\\\\\\"resourceGroup\\\\\\":\\\\\\"S_res_group_287114642182658_1560324290517\\\\\\"},\\\\\\"nodeDef\\\\\\":{},\\\\\\"order\\\\\\":{\\\\\\"hops\\\\\\":[{\\\\\\"from\\\\\\":\\\\\\"datahub_8htXSsfiS2vtZCVG\\\\\\",\\\\\\"to\\\\\\":\\\\\\"datahub_CRHBAyGfhSaLmv2f\\\\\\"}]},\\\\\\"setting\\\\\\":{\\\\\\"errorLimit\\\\\\":{},\\\\\\"jvmOption\\\\\\":\\\\\\"\\\\\\"},\\\\\\"steps\\\\\\":[{\\\\\\"stepType\\\\\\":\\\\\\"datahub\\\\\\",\\\\\\"category\\\\\\":\\\\\\"writer\\\\\\",\\\\\\"displayName\\\\\\":\\\\\\"DataHub1\\\\\\",\\\\\\"parameter\\\\\\":{\\\\\\"batchSize\\\\\\":1000,\\\\\\"datasource\\\\\\":\\\\\\"datahub_cloud_dev_test\\\\\\",\\\\\\"topic\\\\\\":\\\\\\"dwd_tfc_opt_speed_rid_amap_rt\\\\\\"},\\\\\\"name\\\\\\":\\\\\\"datahub_CRHBAyGfhSaLmv2f\\\\\\",\\\\\\"gui\\\\\\":{\\\\\\"x\\\\\\":262,\\\\\\"y\\\\\\":325}},{\\\\\\"stepType\\\\\\":\\\\\\"datahub\\\\\\",\\\\\\"displayName\\\\\\":\\\\\\"DataHub2\\\\\\",\\\\\\"parameter\\\\\\":{\\\\\\"datasource\\\\\\":\\\\\\"datahub_uric_test\\\\\\",\\\\\\"topic\\\\\\":\\\\\\"dwd_tfc_opt_speed_rid_amap_rt_330000\\\\\\",\\\\\\"batchSize\\\\\\":1000},\\\\\\"name\\\\\\":\\\\\\"datahub_8htXSsfiS2vtZCVG\\\\\\",\\\\\\"gui\\\\\\":{\\\\\\"x\\\\\\":268,\\\\\\"y\\\\\\":160.5},\\\\\\"category\\\\\\":\\\\\\"writer\\\\\\"}]}\\",\\n    \\"Status\\": \\"success\\",\\n    \\"Message\\": \\"fileId:[100] is invalid.\\",\\n    \\"SolutionDetail\\": {\\n      \\"Status\\": \\"0\\",\\n      \\"Type\\": \\"holo\\",\\n      \\"StartTime\\": \\"2021-12-07 14:40:51\\",\\n      \\"CreatorName\\": \\"dataworks_di\\",\\n      \\"ProjectId\\": 10000,\\n      \\"SourceType\\": \\"mysql\\",\\n      \\"ProcessContent\\": \\"{\\\\\\"holoDatasource\\\\\\":\\\\\\"holo\\\\\\",\\\\\\"offlineSyncConfig\\\\\\":{\\\\\\"nodeNameRule\\\\\\":\\\\\\"oneclick_holo_di_${db_table_name_src}_to_${db_table_name_dest}\\\\\\",\\\\\\"resourceGroup\\\\\\":\\\\\\"group_219193793999490\\\\\\"},\\\\\\"processRuleId\\\\\\":1007,\\\\\\"readerConcurrent\\\\\\":10,\\\\\\"realtimeSyncConfig\\\\\\":{\\\\\\"content\\\\\\":{\\\\\\"order\\\\\\":{\\\\\\"hops\\\\\\":[{\\\\\\"from\\\\\\":\\\\\\"reader\\\\\\",\\\\\\"to\\\\\\":\\\\\\"writer\\\\\\"}]},\\\\\\"setting\\\\\\":{\\\\\\"speed\\\\\\":{\\\\\\"readerConcurrent\\\\\\":10}},\\\\\\"steps\\\\\\":[{\\\\\\"stepType\\\\\\":\\\\\\"mysql\\\\\\",\\\\\\"name\\\\\\":\\\\\\"reader\\\\\\",\\\\\\"category\\\\\\":\\\\\\"reader\\\\\\",\\\\\\"parameter\\\\\\":{\\\\\\"connection\\\\\\":[{\\\\\\"datasource\\\\\\":\\\\\\"mm\\\\\\",\\\\\\"datasourceType\\\\\\":\\\\\\"mysql\\\\\\",\\\\\\"table\\\\\\":[]}]}},{\\\\\\"stepType\\\\\\":\\\\\\"holo\\\\\\",\\\\\\"name\\\\\\":\\\\\\"writer\\\\\\",\\\\\\"category\\\\\\":\\\\\\"writer\\\\\\",\\\\\\"parameter\\\\\\":{\\\\\\"datasource\\\\\\":\\\\\\"holo\\\\\\",\\\\\\"writeMode\\\\\\":\\\\\\"replay\\\\\\",\\\\\\"datasourceSchema\\\\\\":\\\\\\"public\\\\\\",\\\\\\"tableMappingRule\\\\\\":{\\\\\\"datasource\\\\\\":[{\\\\\\"tableRule\\\\\\":[],\\\\\\"srcDatasourceName\\\\\\":\\\\\\"mm\\\\\\"}]}}}]},\\\\\\"extend\\\\\\":{\\\\\\"mode\\\\\\":\\\\\\"migration_holo\\\\\\",\\\\\\"resourceGroup\\\\\\":\\\\\\"group_219193793999490\\\\\\"}},\\\\\\"setting\\\\\\":{\\\\\\"autoCreateWorkflow\\\\\\":true,\\\\\\"userDefinedFileNameExpression\\\\\\":\\\\\\"oneclick\\\\\\"},\\\\\\"srcType\\\\\\":\\\\\\"mysql\\\\\\",\\\\\\"tableMappingRuleFromRealtimeSyncConfig\\\\\\":{\\\\\\"datasource\\\\\\":[{\\\\\\"srcDatasourceName\\\\\\":\\\\\\"mm\\\\\\",\\\\\\"tableRule\\\\\\":[]}]}}\\",\\n      \\"Name\\": \\"holo_20211206161025\\",\\n      \\"ProcessExtra\\": \\"{\\\\\\"processType\\\\\\":\\\\\\"new\\\\\\",\\\\\\"tableNum\\\\\\":300}\\",\\n      \\"SubmitTime\\": \\"2021-12-07 14:40:51\\",\\n      \\"Id\\": 100\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDISyncTaskResponse>\\n    <Success>true</Success>\\n    <RequestId>0bc1411515937635973****\\t</RequestId>\\n    <Data>\\n        <Code>{\\"extend\\":{\\"mode\\":\\"wizard\\",\\"resourceGroup\\":\\"S_res_group_287114642182658_1560324290517\\"},\\"nodeDef\\":{},\\"order\\":{\\"hops\\":[{\\"from\\":\\"datahub_8htXSsfiS2vtZCVG\\",\\"to\\":\\"datahub_CRHBAyGfhSaLmv2f\\"}]},\\"setting\\":{\\"errorLimit\\":{},\\"jvmOption\\":\\"\\"},\\"steps\\":[{\\"stepType\\":\\"datahub\\",\\"category\\":\\"writer\\",\\"displayName\\":\\"DataHub1\\",\\"parameter\\":{\\"batchSize\\":1000,\\"datasource\\":\\"datahub_cloud_dev_test\\",\\"topic\\":\\"dwd_tfc_opt_speed_rid_amap_rt\\"},\\"name\\":\\"datahub_CRHBAyGfhSaLmv2f\\",\\"gui\\":{\\"x\\":262,\\"y\\":325}},{\\"stepType\\":\\"datahub\\",\\"displayName\\":\\"DataHub2\\",\\"parameter\\":{\\"datasource\\":\\"datahub_uric_test\\",\\"topic\\":\\"dwd_tfc_opt_speed_rid_amap_rt_330000\\",\\"batchSize\\":1000},\\"name\\":\\"datahub_8htXSsfiS2vtZCVG\\",\\"gui\\":{\\"x\\":268,\\"y\\":160.5},\\"category\\":\\"writer\\"}]}</Code>\\n        <Status>success</Status>\\n        <Message>fileId:[100] is invalid.</Message>\\n        <SolutionDetail>\\n            <Status>0</Status>\\n            <Type>holo</Type>\\n            <StartTime>2021-12-07 14:40:51</StartTime>\\n            <CreatorName>dataworks_di</CreatorName>\\n            <ProjectId>10000</ProjectId>\\n            <SourceType>mysql</SourceType>\\n            <ProcessContent>{\\"holoDatasource\\":\\"holo\\",\\"offlineSyncConfig\\":{\\"nodeNameRule\\":\\"oneclick_holo_di_${db_table_name_src}_to_${db_table_name_dest}\\",\\"resourceGroup\\":\\"group_219193793999490\\"},\\"processRuleId\\":1007,\\"readerConcurrent\\":10,\\"realtimeSyncConfig\\":{\\"content\\":{\\"order\\":{\\"hops\\":[{\\"from\\":\\"reader\\",\\"to\\":\\"writer\\"}]},\\"setting\\":{\\"speed\\":{\\"readerConcurrent\\":10}},\\"steps\\":[{\\"stepType\\":\\"mysql\\",\\"name\\":\\"reader\\",\\"category\\":\\"reader\\",\\"parameter\\":{\\"connection\\":[{\\"datasource\\":\\"mm\\",\\"datasourceType\\":\\"mysql\\",\\"table\\":[]}]}},{\\"stepType\\":\\"holo\\",\\"name\\":\\"writer\\",\\"category\\":\\"writer\\",\\"parameter\\":{\\"datasource\\":\\"holo\\",\\"writeMode\\":\\"replay\\",\\"datasourceSchema\\":\\"public\\",\\"tableMappingRule\\":{\\"datasource\\":[{\\"tableRule\\":[],\\"srcDatasourceName\\":\\"mm\\"}]}}}]},\\"extend\\":{\\"mode\\":\\"migration_holo\\",\\"resourceGroup\\":\\"group_219193793999490\\"}},\\"setting\\":{\\"autoCreateWorkflow\\":true,\\"userDefinedFileNameExpression\\":\\"oneclick\\"},\\"srcType\\":\\"mysql\\",\\"tableMappingRuleFromRealtimeSyncConfig\\":{\\"datasource\\":[{\\"srcDatasourceName\\":\\"mm\\",\\"tableRule\\":[]}]}}</ProcessContent>\\n            <Name>holo_20211206161025</Name>\\n            <ProcessExtra>{\\"processType\\":\\"new\\",\\"tableNum\\":300}</ProcessExtra>\\n            <SubmitTime>2021-12-07 14:40:51</SubmitTime>\\n            <Id>100</Id>\\n        </SolutionDetail>\\n    </Data>\\n</GetDISyncTaskResponse>","errorExample":""}]',
      'title' => '查询数据同步任务',
      'summary' => '获取数据集成实时同步任务和同步解决方案的详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeployDISyncTask' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
        2 => 
        array (
          'APP' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间管理页面获取ID。

该参数用来确定本次API调用操作使用的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所关联的数据集成同步任务的任务类型。取值如下：

- DI_REALTIME：表示数据集成实时同步任务。
- DI_SOLUTION：表示数据集成同步解决方案。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_REALTIME',
          ),
        ),
        2 => 
        array (
          'name' => 'FileId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '- 当TaskType为DI_REALTIME时，则FileId为实时同步任务的文件ID。
- 当TaskType为DI_SOLUTION时，则FileId为同步解决方案的任务ID。

您可以调用[ListFiles](~~173942~~)接口获取任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999999999999',
            'minimum' => '1',
            'example' => '100',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '数据集成同步任务返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：

- true：成功。 
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。
',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '发布同步任务的结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '发布数据集成同步任务的结果状态。取值如下：

- success：表示发布数据集成同步任务成功。
- fail：表示发布数据集成同步任务失败。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'Message' => 
                  array (
                    'description' => '发布数据集成同步任务失败后的原因描述。

如果发布数据集成同步任务成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'submit and deploy fail.',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Param.Invalid',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"Message\\": \\"submit and deploy fail.\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DeployDISyncTaskResponse>\\n    <Success>true</Success>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Data>\\n        <Status>success</Status>\\n        <Message>submit and deploy fail.</Message>\\n    </Data>\\n</DeployDISyncTaskResponse>","errorExample":""}]',
      'title' => '部署发布同步任务',
      'summary' => '该接口用于发布实时同步任务。',
    ),
    'GetDISyncInstanceInfo' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
        2 => 
        array (
          'APP' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间管理页面获取ID。

该参数用来确定本次API调用操作使用的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所关联的数据集成同步任务的任务类型。取值如下：

- DI_REALTIME：表示数据集成实时同步任务。
- DI_SOLUTION：表示数据集成同步解决方案。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_REALTIME',
          ),
        ),
        2 => 
        array (
          'name' => 'FileId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '- 当TaskType为DI_REALTIME时，则FileId为实时同步任务的文件ID。
- 当TaskType为DI_SOLUTION时，则FileId为同步解决方案的任务ID。

您可以调用[ListFiles](~~173942~~)接口获取任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999999999999',
            'minimum' => '1',
            'example' => '100',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '数据集成同步任务返回的数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：

- true：成功。 
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。
',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '获取同步任务的运行状态。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '- 如果taskType为DI_REALTIME，则status为实时任务的运行状态。包括：PAUSE、NORUN、RUN、KILLING、WAIT。 

- 如果taskType为DI_SOLITION， 则status为同步解决方案的运行状态。包括：success、fail。
',
                    'type' => 'string',
                    'example' => 'RUN',
                  ),
                  'Message' => 
                  array (
                    'description' => '获取同步任务运行状态失败后的原因描述。如果获取数据集成同步任务成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'fileId[100] is invalid',
                  ),
                  'Name' => 
                  array (
                    'description' => '- 如果taskType为DI_REALTIME，则name为实时同步任务的名称。
- 如果taskType为DI_SOLITION， 则name为空。',
                    'type' => 'string',
                    'example' => 'streamx_name',
                  ),
                  'SolutionInfo' => 
                  array (
                    'description' => '- 如果taskType为DI_REALTIME，则SolutionInfo为空。
- 如果taskType为DI_SOLITION， 则SolutionInfo为同步解决方案运行详情。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Status' => 
                      array (
                        'description' => '同步解决方案运行状态。',
                        'type' => 'string',
                        'example' => 'run',
                      ),
                      'Id' => 
                      array (
                        'description' => '同步解决方案任务ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '100',
                      ),
                      'CreatorName' => 
                      array (
                        'description' => '同步解决方案任务创建者名称。',
                        'type' => 'string',
                        'example' => 'dataworks_3h1',
                      ),
                      'StepDetail' => 
                      array (
                        'description' => '同步解决方案任务运行步骤详情。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '数据集成同步任务返回的数据结构。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Status' => 
                            array (
                              'description' => '同步解决方案运行步骤的状态。',
                              'type' => 'string',
                              'example' => 'success',
                            ),
                            'StepId' => 
                            array (
                              'description' => '同步解决方案运行步骤的ID。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1',
                            ),
                            'StepName' => 
                            array (
                              'description' => '同步解决方案运行步骤的名称。',
                              'type' => 'string',
                              'example' => '创建base表',
                            ),
                            'Info' => 
                            array (
                              'description' => '同步解决方案运行信息',
                              'type' => 'string',
                              'example' => '{\\"fusionProps\\":{\\"dataSource\\":[{\\"fileName\\":\\"holo_20221020161613\\",\\"status\\":\\"SUCCESS\\"}]},\\"customProps\\":{\\"showSN\\":true,\\"columns\\":[{\\"dataIndex\\":\\"fileName\\",\\"width\\":0.8,\\"title\\":\\"实时同步名称\\"},{\\"dataIndex\\":\\"status\\",\\"width\\":0.2,\\"title\\":\\"状态\\"}]},\\"componentName\\":\\"Table\\"}',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Param.Invalid',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"RUN\\",\\n    \\"Message\\": \\"fileId[100] is invalid\\",\\n    \\"Name\\": \\"streamx_name\\",\\n    \\"SolutionInfo\\": {\\n      \\"Status\\": \\"run\\",\\n      \\"Id\\": 100,\\n      \\"CreatorName\\": \\"dataworks_3h1\\",\\n      \\"StepDetail\\": [\\n        {\\n          \\"Status\\": \\"success\\",\\n          \\"StepId\\": 1,\\n          \\"StepName\\": \\"创建base表\\",\\n          \\"Info\\": \\"{\\\\\\\\\\\\\\"fusionProps\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\"dataSource\\\\\\\\\\\\\\":[{\\\\\\\\\\\\\\"fileName\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"holo_20221020161613\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"SUCCESS\\\\\\\\\\\\\\"}]},\\\\\\\\\\\\\\"customProps\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\"showSN\\\\\\\\\\\\\\":true,\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\":[{\\\\\\\\\\\\\\"dataIndex\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"fileName\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"width\\\\\\\\\\\\\\":0.8,\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"实时同步名称\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\"dataIndex\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"width\\\\\\\\\\\\\\":0.2,\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"状态\\\\\\\\\\\\\\"}]},\\\\\\\\\\\\\\"componentName\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"Table\\\\\\\\\\\\\\"}\\"\\n        }\\n      ]\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDISyncInstanceInfoResponse>\\n    <Success>true</Success>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Data>\\n        <Status>RUN</Status>\\n        <Message>fileId[100] is invalid</Message>\\n        <Name>streamx_name</Name>\\n        <SolutionInfo>\\n            <Status>run</Status>\\n            <Id>100</Id>\\n            <CreatorName>dataworks_3h1</CreatorName>\\n            <StepDetail>\\n                <Status>success</Status>\\n                <StepId>1</StepId>\\n                <StepName>创建base表</StepName>\\n            </StepDetail>\\n        </SolutionInfo>\\n    </Data>\\n</GetDISyncInstanceInfoResponse>","errorExample":""}]',
      'title' => '获取同步任务实例信息',
      'summary' => '获取实时同步任务和同步解决方案任务的运行状态。',
    ),
    'TerminateDISyncInstance' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
        2 => 
        array (
          'APP' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间管理页面获取ID。

该参数用来确定本次API调用操作使用的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DI_REALTIME表示实时同步任务。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_REALTIME',
          ),
        ),
        2 => 
        array (
          'name' => 'FileId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实时同步任务的文件ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999999999999',
            'minimum' => '1',
            'example' => '100',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '实时同步任务返回的数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：

- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '下线实时同步任务的状态。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '下线数据集成实时同步任务的结果状态。取值如下：

- success：表示下线数据集成实时同步任务成功。 
- fail：表示下线数据集成实时同步任务失败。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'Message' => 
                  array (
                    'description' => '下线数据集成实时同步任务失败后的原因描述。如果下线数据集成实时同步任务成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'fileId:[100] is invalid.',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Param.Invalid',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"Message\\": \\"fileId:[100] is invalid.\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<TerminateDISyncInstanceResponse>\\n    <Success>true</Success>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Data>\\n        <Status>success</Status>\\n        <Message>fileId:[100] is invalid.</Message>\\n    </Data>\\n</TerminateDISyncInstanceResponse>","errorExample":""}]',
      'title' => '终止同步任务',
      'summary' => '下线数据集成实时同步任务。',
    ),
    'GenerateDISyncTaskConfigForCreating' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'APP' => 
          array (
          ),
        ),
        2 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。

该参数用来确定本次API调用操作使用的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '使用异步方式创建数据集成同步任务的任务类型。取值如下：
- DI_REALTIME：表示实时同步任务。
- DI_SOLUTION：表示其他同步类型的同步任务。

仅支持使用异步方式生成数据集成实时同步任务和其他同步类型的同步任务。
 
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_REALTIME',
            'enum' => 
            array (
              0 => 'DI_OFFLINE',
              1 => 'DI_REALTIME',
              2 => 'DI_SOLUTION',
            ),
          ),
        ),
        2 => 
        array (
          'name' => 'TaskParam',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据集成同步任务的脚本。
目前支持创建的同步任务类型如下： 
- 同步MySQL数据至MaxCompute。
- 同步MySQL数据至Kafka。
- 同步MySQL数据至Hologres。

SelectedTables用于多库模式选择同步表，Tables用于单库模式选择同步表。
- 当脚本中包含SelectedTables语句时，系统会使用SelectedTables语句中的表信息进行同步。
- 当脚本中包含Tables语句时，系统会使用Tables的字段信息进行同步。


同步MySQL数据至MaxCompute，示例语句如下。
```
{
  "type": "realtime",
  "version": "1.0",
  "setting": {
    "resourceGroup": "S_res_group_280749521950784_1623033752022",
    "taskType": "oneclick_to_odps"
  },
  "steps": [
    {
      "stepType": "mysql",
      "parameter": {
        "connection": [
          {
            "datasourceType": "mysql",
            "datasource": "mysql_pub1",
            "selectedTables": [
              {
                "dbName": "mysql_db",
                "schema": [
                  {
                    "tableInfos": [
                      {
                        "table": "molin_di_test_in_pk_v4"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "name": "Reader",
      "category": "reader"
    },
    {
      "stepType": "odps",
      "parameter": {
        "datasource": "odps_source"
      },
      "name": "Writer",
      "category": "writer"
    }
  ]
}
```

同步MySQL数据至Kafka，示例语句如下。
```
{
  "type": "realtime",
  "version": "1.0",
  "setting": {
    "resourceGroup": "S_res_group_280749521950784_1623033752022",
    "taskType": "oneclick_to_kafka"
  },
  "steps": [
    {
      "stepType": "mysql",
      "parameter": {
        "connection": [
          {
            "datasourceType": "mysql",
            "datasource": "pkset_test",
            "selectedTables": [
              {
                "dbName": "mysql_db",
                "schema": [
                  {
                    "tableInfos": [
                      {
                        "table": "molin_di_test_in_pk_v4"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "name": "Reader",
      "category": "reader"
    },
    {
      "stepType": "kafka",
      "parameter": {
        "datasource": "azn_kafka"
      },
      "name": "Writer",
      "category": "writer"
    }
  ]
}
```

同步MySQL数据至Hologres，示例语句如下。
```
{
  "type": "realtime",
  "version": "1.0",
  "setting": {
    "resourceGroup": "S_res_group_280749521950784_1623033752022",
    "taskType": "oneclick_to_holo"
  },
  "steps": [
    {
      "stepType": "mysql",
      "parameter": {
        "connection": [
          {
            "datasourceType": "mysql",
            "datasource": "mysql_pub",
            "selectedTables": [
              {
                "dbName": "mysql_db",
                "schema": [
                  {
                    "tableInfos": [
                      {
                        "table": "molin_di_test_in2_pk_v3"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "name": "Reader",
      "category": "reader"
    },
    {
      "stepType": "holo",
      "parameter": {
        "datasource": "holo"
      },
      "name": "Writer",
      "category": "writer"
    }
  ]
}
```


',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '{  "type": "realtime",  "version": "1.0",  "setting": {  "resourceGroup": "S_res_group_280749521950784_1623033752022",  "taskType": "oneclick_to_odps"  },  "steps": [{ "stepType": "mysql", "parameter": { "connection": [ { "datasourceType": "mysql", "datasource": "mysql_pub1", "selectedTables": [ { "dbName": "mysql_db", "schema": [ { "tableInfos": [ { "table": "molin_di_test_in_pk_v4" }]  }  ]  }  ]  }  ]  },  "name": "Reader",  "category": "reader"  },  {  "stepType": "odps",  "parameter": {  "datasource": "odps_source"  },  "name": "Writer",  "category": "writer"  }  ]  }',
          ),
        ),
        3 => 
        array (
          'name' => 'ClientToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '幂等参数。用于避免多次调用导致操作重复。',
            'type' => 'string',
            'required' => false,
            'example' => 'ABFUOEUOTRTRJKE',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '异步线程ID的生成结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '生成异步线程ID的结果状态。取值如下：
- success：表示成功生成异步线程ID。
- fail：表示异步线程ID生成失败。您可以查看失败原因，处理相关问题。',
                    'type' => 'string',
                    'example' => 'true',
                  ),
                  'ProcessId' => 
                  array (
                    'description' => '异步线程ID。您需要通过该ID，调用[QueryDISyncTaskConfigProcessResult](~~383465~~)接口获取异步生成创建数据集成同步任务需要的参数，使用该参数创建数据集成同步任务。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'Message' => 
                  array (
                    'description' => '异步线程ID生成失败的原因描述。
如果成功生成异步线程ID，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'XXX is invalid.',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter.File.Existed',
            'errorMessage' => 'The file name already exists.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"true\\",\\n    \\"ProcessId\\": 10,\\n    \\"Message\\": \\"XXX is invalid.\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GenerateDISyncTaskConfigForCreatingResponse>\\n    <Success>true</Success>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Data>\\n        <Status>true</Status>\\n        <ProcessId>10</ProcessId>\\n        <Message>XXX is invalid.</Message>\\n    </Data>\\n</GenerateDISyncTaskConfigForCreatingResponse>","errorExample":""}]',
      'title' => '异步生成同时任务的JSON',
      'summary' => '异步生成同时任务的JSON。',
      'description' => 'DataWorks目前仅支持直接使用[CreateDISyncTask](~~278725~~)接口创建数据集成离线同步任务，而数据集成实时同步任务和其他同步类型的任务则需要先调用[GenerateDISyncTaskConfigForCreating](~~383463~~)和[QueryDISyncTaskConfigProcessResult](~~383465~~)接口，获取异步生成创建数据集成同步任务需要的参数，再将该参数作为[CreateDISyncTask](~~278725~~)接口的入参，使用[CreateDISyncTask](~~278725~~)接口创建相应的实时同步任务和其他同步类型的同步任务。
仅支持使用异步方式创建数据集成实时同步任务和其他同步类型的同步任务。',
    ),
    'GenerateDISyncTaskConfigForUpdating' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'APP' => 
          array (
          ),
        ),
        2 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。

该参数用来确定本次API调用操作使用的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '使用异步方式更新数据集成同步任务的任务类型。取值如下：
- DI_REALTIME：表示实时同步任务。
- DI_SOLUTION：表示解决方案同步任务。
仅支持使用异步方式更新数据集成实时同步任务和解决方案同步任务。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_REALTIME',
            'enum' => 
            array (
              0 => 'DI_OFFLINE',
              1 => 'DI_REALTIME',
              2 => 'DI_SOLUTION',
            ),
          ),
        ),
        2 => 
        array (
          'name' => 'TaskParam',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '更新同步任务的脚本语句。
目前仅支持通过异步方式为数据集成同步任务新增表或者删除表，并且仅支持更新如下类型的同步任务：
- 同步MySQL数据至MaxCompute。
- 同步MySQL数据至Kafka。
- 同步MySQL数据至Hologres。

同步任务中的SelectedTables用于多库模式选择同步表，Tables用于单库模式选择同步表。
- 当脚本中包含SelectedTables语句时，系统会使用SelectedTables语句中的表信息进行同步。
- 当脚本中包含Tables语句时，系统会使用Tables的字段信息进行同步。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '{"steps":[{"parameter":{"connection":[{"table":["xyx"]}]},"name":"Reader","category":"reader"}]}',
          ),
        ),
        3 => 
        array (
          'name' => 'ClientToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '幂等参数。用于避免多次调用导致操作重复。',
            'type' => 'string',
            'required' => false,
            'example' => 'ABFUOEUOTRTRJKE',
          ),
        ),
        4 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务ID。
- 当TaskType参数配置为实时同步任务（DI_REALTIME），则TaskId为实时同步任务的FileId。
- 当TaskType参数配置为解决方案同步任务（DI_SOLUTION），则TaskId为解决方案同步任务的FileId。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999999999999',
            'minimum' => '0',
            'example' => '100',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '异步线程ID的生成结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '生成异步线程ID的结果状态。取值如下：
- success：表示成功生成异步线程ID。
- fail：表示异步线程ID生成失败。您可以查看失败原因，处理相关问题。',
                    'type' => 'string',
                    'example' => 'true',
                  ),
                  'ProcessId' => 
                  array (
                    'description' => '异步线程ID。您需要通过该ID，调用[QueryDISyncTaskConfigProcessResult](~~383465~~)接口获取异步生成更新数据集成同步任务需要的参数，后续使用该参数更新数据集成同步任务。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'Message' => 
                  array (
                    'description' => '异步线程ID生成失败的原因描述。 如果成功生成异步线程ID，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'XXX is invalid.',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter.File.Existed',
            'errorMessage' => 'The file name already exists.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"true\\",\\n    \\"ProcessId\\": 10,\\n    \\"Message\\": \\"XXX is invalid.\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GenerateDISyncTaskConfigForUpdatingResponse>\\n    <Success>true</Success>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Data>\\n        <Status>true</Status>\\n        <ProcessId>10</ProcessId>\\n        <Message>XXX is invalid.</Message>\\n    </Data>\\n</GenerateDISyncTaskConfigForUpdatingResponse>","errorExample":""}]',
      'title' => '异步生成更新同步任务配置',
      'summary' => '异步生成更新同步任务的JSON。',
      'description' => 'DataWorks目前仅支持直接使用[UpdateDISyncTask](~~289109~~)接口更新数据集成离线同步任务，而数据集成实时同步任务则需要先调用GenerateDISyncTaskConfigForUpdating和[QueryDISyncTaskConfigProcessResult](~~383465~~)接口，异步生成更新数据集成同步任务需要的参数，再将该参数作为UpdateDISyncTask接口的入参，使用UpdateDISyncTask接口更新相应的实时同步任务。 仅支持使用异步方式更新数据集成实时同步任务。',
    ),
    'StartDISyncInstance' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。
该参数用来确定本次API调用操作使用的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '启动数据集成同步任务的任务类型。 目前仅支持使用DI_REALTIME和DI_SOLUTION两种类型：
- DI_REALTIME代表启动实时任务。
- DI_SOLUTION代表启动解决方案。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_REALTIME',
          ),
        ),
        2 => 
        array (
          'name' => 'FileId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '- 当TaskType参数配置为DI_REALTIME，则FileId为实时同步任务的任务ID。
- 当TaskType参数配置为DI_SOLUTION，则FileId为解决方案同步任务的任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999999999999',
            'minimum' => '1',
            'example' => '100',
          ),
        ),
        3 => 
        array (
          'name' => 'StartParam',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '- 当TaskType参数配置为DI_REALTIME，则StartParam为实时同步任务的启动参数，包括Failover的设置，脏数据条数，以及DDL的参数配置。
- 当TaskType参数配置为DI_SOLUTION，则StartParam参数无意义。

',
            'type' => 'string',
            'required' => false,
            'example' => '{"failoverLimit":{"count":10,"interval":30},"errorLimit":{"record":0},"ddlMarkMap":{"RENAMECOLUMN":"WARNING","DROPTABLE":"WARNING","CREATETABLE":"IGNORE","MODIFYCOLUMN":"WARNING","TRUNCATETABLE":"NORMAL","DROPCOLUMN":"IGNORE","ADDCOLUMN":"NORMAL","RENAMETABLE":"CRITICAL"}}',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
-  false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。
',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '启动同步任务的结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '启动同步任务的结果状态。取值如下：
- success：同步任务启动成功。
- fail：同步任务启动失败。您可以查看具体原因，处理相关问题。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'Message' => 
                  array (
                    'description' => '启动数据集成同步任务失败后的原因描述。

如果启动数据集成同步任务成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'fileId:[100] is invalid.',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Param.Invalid',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"Message\\": \\"fileId:[100] is invalid.\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<StartDISyncInstanceResponse>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Data>\\n        <Status>success</Status>\\n        <Message>fileId:[100] is invalid.</Message>\\n    </Data>\\n    <Success>true</Success>\\n</StartDISyncInstanceResponse>","errorExample":""}]',
      'title' => '启动实时同步任务和解决方案同步任务',
      'summary' => '调用StartDISyncInstance接口，启动实时同步任务和解决方案同步任务。',
    ),
    'StopDISyncInstance' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
        2 => 
        array (
          'APP' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。

该参数用来确定本次API调用操作使用的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '停止数据集成同步任务的任务类型。目前仅支持使用DI_REALTIME类型。

DI_REALTIME代表实时任务。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_REALTIME',
          ),
        ),
        2 => 
        array (
          'name' => 'FileId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'FileId为实时同步任务的ID。您可以调用[ListFiles](~~173942~~)接口获取任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999999999999',
            'minimum' => '1',
            'example' => '100',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。 
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。
',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '停止同步任务的结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '停止数据集成同步任务的结果状态。取值如下：
- success：表示停止数据集成同步任务成功。
-  fail：表示停止数据集成同步任务失败。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'Message' => 
                  array (
                    'description' => '停止数据集成同步任务失败后的原因描述。

如果停止数据集成同步任务成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'fileId:[100] is invalid.',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Param.Invalid',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"Message\\": \\"fileId:[100] is invalid.\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<StopDISyncInstanceResponse>\\n    <Success>true</Success>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Data>\\n        <Status>success</Status>\\n        <Message>fileId:[100] is invalid.</Message>\\n    </Data>\\n</StopDISyncInstanceResponse>","errorExample":""}]',
      'title' => '停止实时同步任务',
      'summary' => '调用StopDISyncInstance接口，停止实时同步任务。',
    ),
    'QueryDISyncTaskConfigProcessResult' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
        2 => 
        array (
          'APP' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。

该参数用来确定本次API调用操作使用的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '异步方式创建或更新的同步任务的任务类型。取值如下：
- DI_REALTIME：表示实时同步任务。
- DI_SOLUTION：表示解决方案同步任务。
仅支持使用异步方式创建或更新数据集成实时同步任务和解决方案同步任务。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'DI_REALTIME',
            'enum' => 
            array (
              0 => 'DI_OFFLINE',
              1 => 'DI_REALTIME',
              2 => 'DI_SOLUTION',
            ),
          ),
        ),
        2 => 
        array (
          'name' => 'AsyncProcessId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '异步线程的ID。您可以调用[GenerateDISyncTaskConfigForCreating](~~383463~~)或[GenerateDISyncTaskConfigForUpdating](~~383464~~)接口获取ID。
- GenerateDISyncTaskConfigForCreating：表示创建数据集成同步任务。
- GenerateDISyncTaskConfigForUpdating：表示更新数据集成同步任务。

',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999999999999',
            'minimum' => '1',
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '获取异步生成或更新数据集成同步任务所需参数的返回结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '获取异步生成或更新数据集成同步任务所需参数的结果状态。取值如下：
- success：表示成功获取相关参数。
- fail：表示获取相关参数失败。您可以查看失败原因，处理相关问题。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'Message' => 
                  array (
                    'description' => '获取异步生成或更新数据集成同步任务所需参数失败的原因描述。如果获取成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'fileId:[100] is invalid.',
                  ),
                  'TaskContent' => 
                  array (
                    'description' => '异步线程生成的数据集成同步任务所需参数。该参数将作为[CreateDISyncTask](~~278725~~)或[UpdateDISyncTask](~~289109~~)接口的输入参数，用于后续创建或更新数据集成同步任务。',
                    'type' => 'string',
                    'example' => '{"extend":{"mode":"migration_holo","resourceGroup":"280749","name":"h"},"type":"job","steps":[{"stepType":"mysql","parameter":{"connection":[{"datasourceType":"mysql","datasource":"mm","selectedTables":[{"schema":[{"tableInfos":[{"enable":true,"table":"m_v1","tableName":"m_v1"}]}],"dbName":"m"}]}]},"name":"reader","category":"reader"},{"stepType":"holo","parameter":{"datasource":"h","tableMappingRule":{"datasource":[{"tableRule":[{"srcTable":"m_v1","mergeIntoCycleType":"DEFAULT","hourDeltaEnable":false,"dstTable":"m.m_v1","dayDeltaEnable":false,"primaryKeyInfo":{"column":["id"],"type":"pk"},"dstCreateTableInfo":{"indexType":"m_v1","dataColumn":[{"columnSize":0,"name":"id","index":0,"comment":"","newDigit":0,"type":"int8","digit":0,"primaryKey":true}],"schemaName":"m","tableName":"m_v1"},"srcDbName":"m"}],"srcDatasourceName":"mm"}],"totalTableMapping":1},"writeMode":"replay"},"name":"writer","category":"writer"}],"version":"2.0","order":{"hops":[{"from":"reader","to":"writer"}]}}',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Param.Invalid',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"Message\\": \\"fileId:[100] is invalid.\\",\\n    \\"TaskContent\\": \\"{\\\\\\"extend\\\\\\":{\\\\\\"mode\\\\\\":\\\\\\"migration_holo\\\\\\",\\\\\\"resourceGroup\\\\\\":\\\\\\"280749\\\\\\",\\\\\\"name\\\\\\":\\\\\\"h\\\\\\"},\\\\\\"type\\\\\\":\\\\\\"job\\\\\\",\\\\\\"steps\\\\\\":[{\\\\\\"stepType\\\\\\":\\\\\\"mysql\\\\\\",\\\\\\"parameter\\\\\\":{\\\\\\"connection\\\\\\":[{\\\\\\"datasourceType\\\\\\":\\\\\\"mysql\\\\\\",\\\\\\"datasource\\\\\\":\\\\\\"mm\\\\\\",\\\\\\"selectedTables\\\\\\":[{\\\\\\"schema\\\\\\":[{\\\\\\"tableInfos\\\\\\":[{\\\\\\"enable\\\\\\":true,\\\\\\"table\\\\\\":\\\\\\"m_v1\\\\\\",\\\\\\"tableName\\\\\\":\\\\\\"m_v1\\\\\\"}]}],\\\\\\"dbName\\\\\\":\\\\\\"m\\\\\\"}]}]},\\\\\\"name\\\\\\":\\\\\\"reader\\\\\\",\\\\\\"category\\\\\\":\\\\\\"reader\\\\\\"},{\\\\\\"stepType\\\\\\":\\\\\\"holo\\\\\\",\\\\\\"parameter\\\\\\":{\\\\\\"datasource\\\\\\":\\\\\\"h\\\\\\",\\\\\\"tableMappingRule\\\\\\":{\\\\\\"datasource\\\\\\":[{\\\\\\"tableRule\\\\\\":[{\\\\\\"srcTable\\\\\\":\\\\\\"m_v1\\\\\\",\\\\\\"mergeIntoCycleType\\\\\\":\\\\\\"DEFAULT\\\\\\",\\\\\\"hourDeltaEnable\\\\\\":false,\\\\\\"dstTable\\\\\\":\\\\\\"m.m_v1\\\\\\",\\\\\\"dayDeltaEnable\\\\\\":false,\\\\\\"primaryKeyInfo\\\\\\":{\\\\\\"column\\\\\\":[\\\\\\"id\\\\\\"],\\\\\\"type\\\\\\":\\\\\\"pk\\\\\\"},\\\\\\"dstCreateTableInfo\\\\\\":{\\\\\\"indexType\\\\\\":\\\\\\"m_v1\\\\\\",\\\\\\"dataColumn\\\\\\":[{\\\\\\"columnSize\\\\\\":0,\\\\\\"name\\\\\\":\\\\\\"id\\\\\\",\\\\\\"index\\\\\\":0,\\\\\\"comment\\\\\\":\\\\\\"\\\\\\",\\\\\\"newDigit\\\\\\":0,\\\\\\"type\\\\\\":\\\\\\"int8\\\\\\",\\\\\\"digit\\\\\\":0,\\\\\\"primaryKey\\\\\\":true}],\\\\\\"schemaName\\\\\\":\\\\\\"m\\\\\\",\\\\\\"tableName\\\\\\":\\\\\\"m_v1\\\\\\"},\\\\\\"srcDbName\\\\\\":\\\\\\"m\\\\\\"}],\\\\\\"srcDatasourceName\\\\\\":\\\\\\"mm\\\\\\"}],\\\\\\"totalTableMapping\\\\\\":1},\\\\\\"writeMode\\\\\\":\\\\\\"replay\\\\\\"},\\\\\\"name\\\\\\":\\\\\\"writer\\\\\\",\\\\\\"category\\\\\\":\\\\\\"writer\\\\\\"}],\\\\\\"version\\\\\\":\\\\\\"2.0\\\\\\",\\\\\\"order\\\\\\":{\\\\\\"hops\\\\\\":[{\\\\\\"from\\\\\\":\\\\\\"reader\\\\\\",\\\\\\"to\\\\\\":\\\\\\"writer\\\\\\"}]}}\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<QueryDISyncTaskConfigProcessResultResponse>\\n    <Success>true</Success>\\n    <RequestId>0bc1411515937635973****</RequestId>\\n    <Data>\\n        <Status>success</Status>\\n        <Message>fileId:[100] is invalid.</Message>\\n        <TaskContent>{\\"extend\\":{\\"mode\\":\\"migration_holo\\",\\"resourceGroup\\":\\"280749\\",\\"name\\":\\"h\\"},\\"type\\":\\"job\\",\\"steps\\":[{\\"stepType\\":\\"mysql\\",\\"parameter\\":{\\"connection\\":[{\\"datasourceType\\":\\"mysql\\",\\"datasource\\":\\"mm\\",\\"selectedTables\\":[{\\"schema\\":[{\\"tableInfos\\":[{\\"enable\\":true,\\"table\\":\\"m_v1\\",\\"tableName\\":\\"m_v1\\"}]}],\\"dbName\\":\\"m\\"}]}]},\\"name\\":\\"reader\\",\\"category\\":\\"reader\\"},{\\"stepType\\":\\"holo\\",\\"parameter\\":{\\"datasource\\":\\"h\\",\\"tableMappingRule\\":{\\"datasource\\":[{\\"tableRule\\":[{\\"srcTable\\":\\"m_v1\\",\\"mergeIntoCycleType\\":\\"DEFAULT\\",\\"hourDeltaEnable\\":false,\\"dstTable\\":\\"m.m_v1\\",\\"dayDeltaEnable\\":false,\\"primaryKeyInfo\\":{\\"column\\":[\\"id\\"],\\"type\\":\\"pk\\"},\\"dstCreateTableInfo\\":{\\"indexType\\":\\"m_v1\\",\\"dataColumn\\":[{\\"columnSize\\":0,\\"name\\":\\"id\\",\\"index\\":0,\\"comment\\":\\"\\",\\"newDigit\\":0,\\"type\\":\\"int8\\",\\"digit\\":0,\\"primaryKey\\":true}],\\"schemaName\\":\\"m\\",\\"tableName\\":\\"m_v1\\"},\\"srcDbName\\":\\"m\\"}],\\"srcDatasourceName\\":\\"mm\\"}],\\"totalTableMapping\\":1},\\"writeMode\\":\\"replay\\"},\\"name\\":\\"writer\\",\\"category\\":\\"writer\\"}],\\"version\\":\\"2.0\\",\\"order\\":{\\"hops\\":[{\\"from\\":\\"reader\\",\\"to\\":\\"writer\\"}]}}</TaskContent>\\n    </Data>\\n</QueryDISyncTaskConfigProcessResultResponse>","errorExample":""}]',
      'title' => '查询异步任务结果',
      'summary' => '查询异步任务结果。',
      'description' => 'DataWorks目前仅支持直接使用[CreateDISyncTask](~~278725~~)接口创建或[UpdateDISyncTask](~~289109~~)接口更新数据集成离线同步任务，而数据集成实时同步任务则需要先调用[GenerateDISyncTaskConfigForCreating](~~383463~~)、[GenerateDISyncTaskConfigForUpdating](~~383464~~)和[QueryDISyncTaskConfigProcessResult](~~383465~~)接口，获取异步生成创建或更新数据集成同步任务需要的参数，再将该参数作为CreateDISyncTask或UpdateDISyncTask接口的入参，使用CreateDISyncTask创建、UpdateDISyncTask更新相应的实时同步任务。
 仅支持使用异步方式创建或更新数据集成实时同步任务。',
    ),
    'CreateDIJob' => 
    array (
      'summary' => '创建数据集成新版任务，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '155151',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideQHGTK4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间ID。您可以通过[ListProjects](~~178393~~)接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'JobName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'mysql_to_holo_sync_8772',
          ),
        ),
        2 => 
        array (
          'name' => 'Description',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务描述。',
            'type' => 'string',
            'required' => false,
            'example' => 'mysql同步到hologres',
          ),
        ),
        3 => 
        array (
          'name' => 'MigrationType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '同步类型，可选的枚举值有：
- FullAndRealtimeIncremental（全量和实时增量）
- RealtimeIncremental（实时增量）
- Full（全量）
- OfflineIncremental（离线增量）
- FullAndOfflineIncremental（全量+离线增量）',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'FullAndRealtimeIncremental',
          ),
        ),
        4 => 
        array (
          'name' => 'SourceDataSourceType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '源端数据源类型，枚举值：MySQL。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'MySQL',
          ),
        ),
        5 => 
        array (
          'name' => 'DestinationDataSourceType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '目标端数据源类型，枚举值：Hologres、Hive。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'Hologres',
          ),
        ),
        6 => 
        array (
          'name' => 'SourceDataSourceSettings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '源端数据源设置，目前仅支持单个数据源。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '源端数据源设置。',
              'type' => 'object',
              'properties' => 
              array (
                'DataSourceName' => 
                array (
                  'description' => '数据源名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'mysql_datasource_1',
                ),
                'DataSourceProperties' => 
                array (
                  'description' => '数据源属性。',
                  'type' => 'object',
                  'required' => false,
                  'additionalProperties' => 
                  array (
                    'type' => 'string',
                    'example' => 'TimeZone',
                    'description' => '源端数据源属性。MySQL数据源支持的属性名称包括：TimeZone（时区），Encoding（编码）。',
                  ),
                ),
              ),
              'required' => false,
            ),
            'required' => false,
          ),
        ),
        7 => 
        array (
          'name' => 'DestinationDataSourceSettings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '目标端数据源设置，目前仅支持单个数据源。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '目标端数据源设置。',
              'type' => 'object',
              'properties' => 
              array (
                'DataSourceName' => 
                array (
                  'description' => '数据源名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'holo_datasource_1',
                ),
                'DataSourceProperties' => 
                array (
                  'description' => '数据源属性。',
                  'type' => 'object',
                  'required' => false,
                  'additionalProperties' => 
                  array (
                    'type' => 'string',
                    'example' => 'TimeZone',
                    'description' => '目标端数据源属性。Hologres数据源暂无属性可设置。

',
                  ),
                ),
              ),
              'required' => false,
            ),
            'required' => false,
          ),
        ),
        8 => 
        array (
          'name' => 'ResourceSettings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '资源设置。',
            'type' => 'object',
            'properties' => 
            array (
              'OfflineResourceSettings' => 
              array (
                'description' => '离线同步资源。',
                'type' => 'object',
                'properties' => 
                array (
                  'ResourceGroupIdentifier' => 
                  array (
                    'description' => '离线同步使用的数据集成资源组标识。',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'S_res_group_111_222',
                  ),
                ),
                'required' => false,
              ),
              'RealtimeResourceSettings' => 
              array (
                'description' => '实时同步资源。',
                'type' => 'object',
                'properties' => 
                array (
                  'ResourceGroupIdentifier' => 
                  array (
                    'description' => '实时同步使用的数据集成资源组标识。',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'S_res_group_111_222',
                  ),
                ),
                'required' => false,
              ),
              'RequestedCu' => 
              array (
                'type' => 'number',
                'format' => 'float',
                'required' => false,
              ),
            ),
            'required' => false,
          ),
        ),
        9 => 
        array (
          'name' => 'TransformationRules',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '同步对象转换规则定义列表，列表中每个元素为一条转换规则定义。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '同步对象转换规则定义。',
              'type' => 'object',
              'properties' => 
              array (
                'RuleName' => 
                array (
                  'description' => '规则名称，当动作类型和动作作用的目标类型相同时，规则名称需保证唯一性。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'rename_rule_1',
                ),
                'RuleActionType' => 
                array (
                  'description' => '动作类型，可选的枚举值：
- DefinePrimaryKey（定义主键）
- Rename（重命名）
- AddColumn（增加列）
- HandleDml（DML处理）
- DefineIncrementalCondition（定义增量条件）
- DefineCycleScheduleSettings（定义周期调度设置）
- DefineRuntimeSettings（定义高级配置参数）
- DefinePartitionKey（定义分区列）',
                  'type' => 'string',
                  'required' => false,
                  'enumValueTitles' => 
                  array (
                  ),
                  'example' => 'Rename',
                ),
                'RuleTargetType' => 
                array (
                  'description' => '动作作用的目标类型，可选的枚举值：
- Table（表）
- Schema（schema）',
                  'type' => 'string',
                  'required' => false,
                  'enumValueTitles' => 
                  array (
                  ),
                  'example' => 'Table',
                ),
                'RuleExpression' => 
                array (
                  'description' => '规则表达式，json string格式。


重命名规则（Rename）示例：
{"expression":"${srcDatasourceName}_${srcDatabaseName}_0922","variables":\\[{"variableName":"srcDatabaseName","variableRules":\\[{"from":"fromdb","to":"todb"}\\]}\\]}
- expression：为重命名转换规则表达式，表达式内支持变量包括：${srcDatasourceName}（源端数据源名）、${srcDatabaseName}（源端库名）、${srcTableName}（源端表名）。
- variables：为重命名转换规则表达式中各变量的生成规则，参数默认值为对应含义在源端的原始值，可按需定义一组字符串替换规则对原始值进行改写。variableName：变量名，不含${}。variableRules：变量生成规则组，按顺序串行执行替换，from原始字符串；to替换后字符串。


在目标端增加指定列并赋值规则（AddColumn）示例：
{"columns":\\[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}\\]}
- 如不指定，默认规则为不加列不复制。
- columnName：附加的列名称。
- columnValueType：附加的列取值类型，包括Constant（常量）、Variable（变量）。
- columnValue：附加的列取值。当valueType=Constant时，value为自定义常量，String类型。当valueType=Variable时，value为内置变量。内置变量可选值包括：EXECUTE_TIME（执行时间，Long类型）、DB_NAME_SRC（源端数据库名称，String类型）、DATASOURCE_NAME_SRC（源端数据源名称，String类型）、TABLE_NAME_SRC（源端表名，String类型）、DB_NAME_DEST（目标端数据库名称，String类型）、DATASOURCE_NAME_DEST（目标端数据源名称，String类型）、TABLE_NAME_DEST（目标端表名，String类型）、DB_NAME_SRC_TRANSED（转换后的数据库名称，String类型）。

指定目标端表的主键列列名（DefinePrimaryKey）示例：
{"columns":\\["ukcolumn1","ukcolumn2"\\]}
- 如不指定默认使用源端主键列。
- 当目标端为已有表：数据集成系统不会修改目标端表结构，如果指定的主键列不在目标端的列集合中，任务启动会报错提示。
- 当目标端为自动建表：数据集成系统会自动创建目标端表结构，表结构包含定义的主键列。当指定的主键列不在目标端的列集合中时，任务启动会报错提示。

DML处理规则（HandleDml）示例：
{"dmlPolicies":\\[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}\\]}
- 如不指定，默认规则为Insert、Update、Delete均为Normal
- dmlType：DML操作类型，Insert（插入）、Update（更新）、Delete（删除）
- dmlAction：DML处理策略，Normal（正常处理）、Ignore（忽略）、Filter（有条件的正常处理，当dmlType=Update/Delete时使用）、LogicalDelete（逻辑删除）
- filterCondition：DML过滤条件，当dmlAction=Filter时使用',
                  'type' => 'string',
                  'required' => false,
                  'example' => '{"expression":"${srcDatasoureName}_${srcDatabaseName}"}',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
          ),
        ),
        10 => 
        array (
          'name' => 'TableMappings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '同步对象转换映射列表，列表中每个元素描述了一组源端同步对象选择规则列表和在该组同步对象上应用的同步对象转换规则列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '同步对象转换映射。',
              'type' => 'object',
              'properties' => 
              array (
                'SourceObjectSelectionRules' => 
                array (
                  'description' => '源端对象选择规则，支持多条。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '每条规则可选择待同步源端对象的不同对象类型，如选择源端数据库、源端数据表。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'ObjectType' => 
                      array (
                        'description' => '对象类型，可选的枚举值：
- Table（表）
- Database（数据库）',
                        'type' => 'string',
                        'required' => false,
                        'enumValueTitles' => 
                        array (
                        ),
                        'example' => 'Table',
                      ),
                      'Expression' => 
                      array (
                        'description' => '表达式。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'mysql_table_1',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                ),
                'TransformationRules' => 
                array (
                  'description' => '源端对象上应用的转换规则列表。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '源端对象上应用的转换规则。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'RuleName' => 
                      array (
                        'description' => '规则名称，在一种动作类型+动作作用的目标类型下规则名称唯一。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'rename_rule_1',
                      ),
                      'RuleActionType' => 
                      array (
                        'description' => '动作类型，可选的枚举值：
- DefinePrimaryKey（定义主键）
- Rename（重命名）
- AddColumn（增加列）
- HandleDml（DML处理）
- DefineIncrementalCondition（定义增量条件）
- DefineCycleScheduleSettings（定义周期调度设置）
- DefineRuntimeSettings（定义高级配置参数）
- DefinePartitionKey（定义分区列）',
                        'type' => 'string',
                        'required' => false,
                        'enumValueTitles' => 
                        array (
                        ),
                        'example' => 'Rename',
                      ),
                      'RuleTargetType' => 
                      array (
                        'description' => '动作作用的目标类型，可选的枚举值：
- Table（表）
- Schema（schema）',
                        'type' => 'string',
                        'required' => false,
                        'enumValueTitles' => 
                        array (
                        ),
                        'example' => 'Table',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                ),
              ),
              'required' => false,
            ),
            'required' => false,
          ),
        ),
        11 => 
        array (
          'name' => 'JobSettings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '同步任务维度的设置，含DDL处理策略、源端和目标端列数据类型映射策略、任务运行时参数等。',
            'type' => 'object',
            'properties' => 
            array (
              'DdlHandlingSettings' => 
              array (
                'description' => 'DDL处理设置。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => 'DDL处理设置。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Type' => 
                    array (
                      'description' => 'DDL类型，可选的枚举值：
- RenameColumn（重命名列）
- ModifyColumn（重命名列）
- CreateTable（重命名列）
- TruncateTable（清空表）
- DropTable（删除表）
- DropColumn（删除列）
- AddColumn（新增列）',
                      'type' => 'string',
                      'required' => false,
                      'enumValueTitles' => 
                      array (
                      ),
                      'example' => 'AddColumn',
                    ),
                    'Action' => 
                    array (
                      'description' => '处理动作，可选的枚举值：
	
- Ignore（忽略）
- Critical（报错）
- Normal（正常处理）',
                      'type' => 'string',
                      'required' => false,
                      'enumValueTitles' => 
                      array (
                      ),
                      'example' => 'Critical',
                    ),
                  ),
                  'required' => false,
                ),
                'required' => false,
              ),
              'ColumnDataTypeSettings' => 
              array (
                'description' => '列类型映射，多值。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '列类型映射。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'SourceDataType' => 
                    array (
                      'description' => '源端类型。',
                      'type' => 'string',
                      'required' => false,
                      'example' => 'bigint',
                    ),
                    'DestinationDataType' => 
                    array (
                      'description' => '目标端类型。',
                      'type' => 'string',
                      'required' => false,
                      'example' => 'text',
                    ),
                  ),
                  'required' => false,
                ),
                'required' => false,
              ),
              'RuntimeSettings' => 
              array (
                'description' => '运行时设置，多值。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '运行时设置。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Name' => 
                    array (
                      'description' => '设置名称，可选的枚举值：
- runtime.offline.speed.limit.mb（离线批量任务限流大小，当runtime.offline.speed.limit.enable=true时有效）
- runtime.offline.speed.limit.enable（离线批量任务是否开启限流）
- dst.offline.connection.max（离线批量任务写端最大连接数）
- runtime.offline.concurrent（离线批量同步任务并发度）
- dst.realtime.connection.max（实时任务写端最大连接数）
- runtime.enable.auto.create.schema（是否自动在目标端创建schema）
- src.offline.datasource.max.connection（离线批量任务源端最大连接数）
- runtime.realtime.concurrent（实时任务并发度）',
                      'type' => 'string',
                      'required' => false,
                      'enumValueTitles' => 
                      array (
                      ),
                      'example' => 'runtime.offline.concurrent',
                    ),
                    'Value' => 
                    array (
                      'description' => '设置取值。',
                      'type' => 'string',
                      'required' => false,
                      'example' => '1',
                    ),
                  ),
                  'required' => false,
                ),
                'required' => false,
              ),
              'CycleScheduleSettings' => 
              array (
                'description' => '周期调度设置。',
                'type' => 'object',
                'properties' => 
                array (
                  'CycleMigrationType' => 
                  array (
                    'description' => '需要周期调度的同步类型。取值范围：
- Full：全量
- OfflineIncremental：离线增量',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'Full',
                  ),
                  'ScheduleParameters' => 
                  array (
                    'description' => '调度参数。',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'bizdate=$bizdate
',
                  ),
                ),
                'required' => false,
              ),
              'ChannelSettings' => 
              array (
                'description' => '通道相关任务设置，Json String形式。',
                'type' => 'string',
                'required' => false,
                'example' => '{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}
',
              ),
              'ImportRuleSettings' => 
              array (
                'description' => '同步任务导入设置。',
                'type' => 'object',
                'properties' => 
                array (
                  'Source' => 
                  array (
                    'description' => '任务配置导入来源。取值范围：
Datastudio：数据开发中的同步任务',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'Datastudio',
                  ),
                  'FileId' => 
                  array (
                    'description' => '待导入任务ID。',
                    'type' => 'string',
                    'required' => false,
                    'example' => '10000',
                  ),
                ),
                'required' => false,
              ),
            ),
            'required' => false,
          ),
        ),
        12 => 
        array (
          'name' => 'SystemDebug',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '系统调试使用，默认false。',
            'type' => 'string',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '4F6AB6B3-41FB-5EBB-AFB2-0C98D49DA2BB',
              ),
              'DIJobId' => 
              array (
                'description' => '数据集成任务ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '11792',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"4F6AB6B3-41FB-5EBB-AFB2-0C98D49DA2BB\\",\\n  \\"DIJobId\\": 11792\\n}","errorExample":""},{"type":"xml","example":"<CreateDIJobResponse>\\n    <RequestId>4F6AB6B3-41FB-5EBB-AFB2-0C98D49DA2BB</RequestId>\\n    <DIJobId>11792</DIJobId>\\n</CreateDIJobResponse>","errorExample":""}]',
      'title' => '创建数据集成新版任务',
    ),
    'DeleteDIJob' => 
    array (
      'summary' => '删除数据集成新版任务，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '155161',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideQHGTK4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DIJobId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '11126',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '响应。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'D33D4A51-5845-579A-B4BA-FAADD0F83D53',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"D33D4A51-5845-579A-B4BA-FAADD0F83D53\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteDIJobResponse>\\n    <RequestId>D33D4A51-5845-579A-B4BA-FAADD0F83D53</RequestId>\\n</DeleteDIJobResponse>","errorExample":""}]',
      'title' => '删除数据集成新版任务',
    ),
    'GetDIJob' => 
    array (
      'summary' => '查看数据集成新版任务，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '154572',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideQHGTK4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DIJobId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '11588',
          ),
        ),
        1 => 
        array (
          'name' => 'WithDetails',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否返回详细配置信息，详细配置信息包括TransformationRules、TableMappings、JobSettings。默认返回。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '响应。',
            'type' => 'object',
            'properties' => 
            array (
              'Data' => 
              array (
                'description' => '任务信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'ProjectId' => 
                  array (
                    'description' => '工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '22',
                  ),
                  'DIJobId' => 
                  array (
                    'description' => '任务ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '11588',
                  ),
                  'JobName' => 
                  array (
                    'description' => '任务名称。',
                    'type' => 'string',
                    'example' => 'mysql_to_holo_sync_445',
                  ),
                  'Description' => 
                  array (
                    'description' => '描述信息。',
                    'type' => 'string',
                    'example' => 'mysql同步到hologres',
                  ),
                  'MigrationType' => 
                  array (
                    'description' => '同步类型，可选的枚举值有：
- FullAndRealtimeIncremental（全量和实时增量）
- RealtimeIncremental（实时增量）
- Full（全量）
- OfflineIncremental（离线增量）
- FullAndOfflineIncremental（全量+离线增量）',
                    'type' => 'string',
                    'enumValueTitles' => 
                    array (
                    ),
                    'example' => 'FullAndRealtimeIncremental',
                  ),
                  'SourceDataSourceType' => 
                  array (
                    'description' => '源端数据源类型，枚举值：MySQL。',
                    'type' => 'string',
                    'enumValueTitles' => 
                    array (
                    ),
                    'example' => 'MySQL',
                  ),
                  'DestinationDataSourceType' => 
                  array (
                    'description' => '目标端数据源类型，枚举值：Hologres、Hive。',
                    'type' => 'string',
                    'enumValueTitles' => 
                    array (
                    ),
                    'example' => 'Hologres',
                  ),
                  'SourceDataSourceSettings' => 
                  array (
                    'description' => '源端数据源设置，目前仅支持单个数据源。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '源端数据源设置。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'DataSourceName' => 
                        array (
                          'description' => '数据源名称。',
                          'type' => 'string',
                          'example' => 'mysql_datasource_1',
                        ),
                        'DataSourceProperties' => 
                        array (
                          'description' => '数据源属性。',
                          'type' => 'object',
                          'additionalProperties' => 
                          array (
                            'type' => 'string',
                            'description' => '源端数据源属性。 MySQL数据源支持的属性名称包括：TimeZone（时区），Encoding（编码）。',
                            'example' => 'TimeZone',
                          ),
                        ),
                      ),
                    ),
                  ),
                  'DestinationDataSourceSettings' => 
                  array (
                    'description' => '目标端数据源设置，目前仅支持单个数据源。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '目标端数据源设置。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'DataSourceName' => 
                        array (
                          'description' => '数据源名称。',
                          'type' => 'string',
                          'example' => 'holo_datasource_1',
                        ),
                        'DataSourceProperties' => 
                        array (
                          'description' => '数据源属性。',
                          'type' => 'object',
                          'additionalProperties' => 
                          array (
                            'type' => 'string',
                            'example' => 'TimeZone',
                            'description' => '目标端数据源属性。Hologres数据源暂无属性可设置。',
                          ),
                        ),
                      ),
                    ),
                  ),
                  'ResourceSettings' => 
                  array (
                    'description' => '资源设置。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'OfflineResourceSettings' => 
                      array (
                        'description' => '离线同步资源。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'ResourceGroupIdentifier' => 
                          array (
                            'description' => '离线同步使用的数据集成资源组标识。',
                            'type' => 'string',
                            'example' => 'S_res_group_111_222',
                          ),
                        ),
                      ),
                      'RealtimeResourceSettings' => 
                      array (
                        'description' => '实时同步资源。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'ResourceGroupIdentifier' => 
                          array (
                            'description' => '实时同步使用的数据集成资源组标识。',
                            'type' => 'string',
                            'example' => 'S_res_group_111_222',
                          ),
                        ),
                      ),
                      'RequestedCu' => 
                      array (
                        'type' => 'number',
                        'format' => 'float',
                      ),
                    ),
                  ),
                  'TransformationRules' => 
                  array (
                    'description' => '同步对象转换规则定义列表，列表中每个元素为一条转换规则定义。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '同步对象转换规则定义。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'RuleActionType' => 
                        array (
                          'description' => '动作类型，可选的枚举值：
- DefinePrimaryKey（定义主键）
- Rename（重命名）
- AddColumn（增加列）
- HandleDml（DML处理）
- DefineIncrementalCondition（定义增量条件）
- DefineCycleScheduleSettings（定义周期调度设置）
- DefineRuntimeSettings（定义高级配置参数）
- DefinePartitionKey（定义分区列）',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                          ),
                          'example' => 'Rename',
                        ),
                        'RuleExpression' => 
                        array (
                          'description' => '规则表达式，json string格式。

- 重命名规则（Rename）示例： `{"expression":"${srcDatasourceName}_${srcDatabaseName}_0922","variables":\\[{"variableName":"srcDatabaseName","variableRules":\\[{"from":"fromdb","to":"todb"}\\]}\\]}`

  - expression：为重命名转换规则表达式，表达式内支持变量包括：
    - ${srcDatasourceName}（源端数据源名）
    - ${srcDatabaseName}（源端库名）
    - ${srcTableName}（源端表名）
  - variables：为重命名转换规则表达式中各变量的生成规则，参数默认值为对应含义在源端的原始值，可按需定义一组字符串替换规则对原始值进行改写。
    - variableName：变量名，不含${}。
    - variableRules：变量生成规则组，按顺序串行执行替换，from原始字符串；to替换后字符串。

- 在目标端增加指定列并赋值规则（AddColumn）示例：` {"columns":\\[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}\\]}`

  如不指定，默认规则为不加列不复制。
  - columnName：附加的列名称。
  - columnValueType：附加的列取值类型，包括Constant（常量）、Variable（变量）。
  - columnValue：附加的列取值。
    - 当valueType=Constant时，value为自定义常量，String类型。
    - 当valueType=Variable时，value为内置变量。内置变量可选值包括：EXECUTE_TIME（执行时间，Long类型）、DB_NAME_SRC（源端数据库名称，String类型）、DATASOURCE_NAME_SRC（源端数据源名称，String类型）、TABLE_NAME_SRC（源端表名，String类型）、DB_NAME_DEST（目标端数据库名称，String类型）、DATASOURCE_NAME_DEST（目标端数据源名称，String类型）、TABLE_NAME_DEST（目标端表名，String类型）、DB_NAME_SRC_TRANSED（转换后的数据库名称，String类型）。

- 指定目标端表的主键列列名（DefinePrimaryKey）示例：` {"columns":\\["ukcolumn1","ukcolumn2"\\]}`

  如不指定默认使用源端主键列。
  - 当目标端为已有表：数据集成系统不会修改目标端表结构，如果指定的主键列不在目标端的列集合中，任务启动会报错提示。
  - 当目标端为自动建表：数据集成系统会自动创建目标端表结构，表结构包含定义的主键列。当指定的主键列不在目标端的列集合中时，任务启动会报错提示。

- DML处理规则（HandleDml）示例： `{"dmlPolicies":\\[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}\\]}`

  如不指定，默认规则为Insert、Update、Delete均为Normal。
  - dmlType：DML操作类型，Insert（插入）、Update（更新）、Delete（删除）。
  - dmlAction：DML处理策略，Normal（正常处理）、Ignore（忽略）、Filter（有条件的正常处理，当dmlType=Update/Delete时使用）、LogicalDelete（逻辑删除）。
  - filterCondition：DML过滤条件，当dmlAction=Filter时使用。',
                          'type' => 'string',
                          'example' => '{"expression":"${srcDatasoureName}_${srcDatabaseName}"}',
                        ),
                        'RuleName' => 
                        array (
                          'description' => '规则名称，当动作类型和动作作用的目标类型相同时，规则名称需保证唯一性。',
                          'type' => 'string',
                          'example' => 'rename_rule_1',
                        ),
                        'RuleTargetType' => 
                        array (
                          'description' => '动作作用的目标类型，可选的数据类型有：
- Table（表）
- Schema（schema）',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                          ),
                          'example' => 'Table',
                        ),
                      ),
                    ),
                  ),
                  'TableMappings' => 
                  array (
                    'description' => '同步对象转换映射列表，列表中每个元素描述了一组源端同步对象选择规则列表和在该组同步对象上应用的同步对象转换规则列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '同步对象转换映射。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'SourceObjectSelectionRules' => 
                        array (
                          'description' => '源端对象选择规则，支持多条。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '每条规则可选择待同步源端对象的不同对象类型，如选择源端数据库、源端数据表。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'Expression' => 
                              array (
                                'description' => '表达式。',
                                'type' => 'string',
                                'example' => 'mysql_table_1',
                              ),
                              'ObjectType' => 
                              array (
                                'description' => '对象类型，可选的枚举值有：
- Table（表）
- Database（数据库）',
                                'type' => 'string',
                                'enumValueTitles' => 
                                array (
                                ),
                                'example' => 'Table',
                              ),
                            ),
                          ),
                        ),
                        'TransformationRules' => 
                        array (
                          'description' => '源端对象上应用的转换规则列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '源端对象上应用的转换规则。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'RuleActionType' => 
                              array (
                                'description' => '动作类型，可选的枚举值：
- DefinePrimaryKey（定义主键）
- Rename（重命名）
- AddColumn（增加列）
- HandleDml（DML处理）
- DefineIncrementalCondition（定义增量条件）
- DefineCycleScheduleSettings（定义周期调度设置）
- DefineRuntimeSettings（定义高级配置参数）
- DefinePartitionKey（定义分区列）',
                                'type' => 'string',
                                'enumValueTitles' => 
                                array (
                                ),
                                'example' => 'Rename',
                              ),
                              'RuleName' => 
                              array (
                                'description' => '规则名称，在一种动作类型+动作作用的目标类型下规则名称唯一。',
                                'type' => 'string',
                                'example' => 'rename_rule_1',
                              ),
                              'RuleTargetType' => 
                              array (
                                'description' => '动作作用的目标类型，可选的枚举值有：
- Table（表）
- Schema（schema）',
                                'type' => 'string',
                                'enumValueTitles' => 
                                array (
                                ),
                                'example' => 'Table',
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'JobSettings' => 
                  array (
                    'description' => '同步任务维度的设置，含DDL处理策略、源端和目标端列数据类型映射策略、任务运行时参数等。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'ColumnDataTypeSettings' => 
                      array (
                        'description' => '列类型映射，支持多值。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '列类型映射。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'SourceDataType' => 
                            array (
                              'description' => '源端类型。',
                              'type' => 'string',
                              'example' => 'bigint',
                            ),
                            'DestinationDataType' => 
                            array (
                              'description' => '目标端类型。',
                              'type' => 'string',
                              'example' => 'text',
                            ),
                          ),
                        ),
                      ),
                      'DdlHandlingSettings' => 
                      array (
                        'description' => 'DDL处理设置，支持多值。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => 'DDL处理设置。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Action' => 
                            array (
                              'description' => '处理动作，可选的枚举值：
- Ignore（忽略）
- Critical（报错）
- Normal（正常处理）',
                              'type' => 'string',
                              'enumValueTitles' => 
                              array (
                              ),
                              'example' => 'Critical',
                            ),
                            'Type' => 
                            array (
                              'description' => 'DDL类型，可选的枚举值：
- RenameColumn（重命名列）
- ModifyColumn（更新列）
- CreateTable（新建表）
- TruncateTable（清空表）
- DropTable（删除表）
- DropColumn（删除列）
- AddColumn（新增列）',
                              'type' => 'string',
                              'enumValueTitles' => 
                              array (
                              ),
                              'example' => 'AddColumn',
                            ),
                          ),
                        ),
                      ),
                      'RuntimeSettings' => 
                      array (
                        'description' => '运行时设置，支持多值。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '运行时设置。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Name' => 
                            array (
                              'description' => '设置名称，可选的枚举值：
- runtime.offline.speed.limit.mb（离线批量任务限流大小，当runtime.offline.speed.limit.enable=true时有效）
- runtime.offline.speed.limit.enable（离线批量任务是否开启限流）
- dst.offline.connection.max（离线批量任务写端最大连接数）
- runtime.offline.concurrent（离线批量同步任务并发度）
- dst.realtime.connection.max（实时任务写端最大连接数）
- runtime.enable.auto.create.schema（是否自动在目标端创建schema）
- src.offline.datasource.max.connection（离线批量任务源端最大连接数）
- runtime.realtime.concurrent（实时任务并发度）',
                              'type' => 'string',
                              'enumValueTitles' => 
                              array (
                              ),
                              'example' => 'runtime.offline.concurrent',
                            ),
                            'Value' => 
                            array (
                              'description' => '设置取值。',
                              'type' => 'string',
                              'example' => '1',
                            ),
                          ),
                        ),
                      ),
                      'CycleScheduleSettings' => 
                      array (
                        'description' => '周期调度设置。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'CycleMigrationType' => 
                          array (
                            'description' => '需要周期调度的同步类型。取值范围：
- Full：全量
- OfflineIncremental：离线增量',
                            'type' => 'string',
                            'example' => 'Full',
                          ),
                          'ScheduleParameters' => 
                          array (
                            'description' => '调度参数。',
                            'type' => 'string',
                            'example' => 'bizdate=$bizdate',
                          ),
                        ),
                      ),
                      'ChannelSettings' => 
                      array (
                        'description' => '通道相关任务设置，Json String形式。',
                        'type' => 'string',
                        'example' => '{"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}
',
                      ),
                    ),
                  ),
                  'CreatedTime' => 
                  array (
                    'description' => '创建时间戳，单位秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1671516776',
                  ),
                  'CreatedUid' => 
                  array (
                    'description' => '创建者用户ID。',
                    'type' => 'string',
                    'example' => '100000001',
                  ),
                  'UpdatedTime' => 
                  array (
                    'description' => '最近一次更新时间戳，单位秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1673859985',
                  ),
                  'UpdatedUid' => 
                  array (
                    'description' => '最近一次更新者用户ID。',
                    'type' => 'string',
                    'example' => '100000001',
                  ),
                  'StartedTime' => 
                  array (
                    'description' => '最近一次启动时间戳，单位秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1673859999',
                  ),
                  'StartedUid' => 
                  array (
                    'description' => '最近一次启动者用户ID。',
                    'type' => 'string',
                    'example' => '100000001',
                  ),
                  'JobStatus' => 
                  array (
                    'description' => '同步状态，可选的枚举值：
- Finished（运行成功已结束）
- Initialized（初始化完成）
- Stopped（已停止）
- Failed（运行失败）
- Running（运行中）
- Stopping（停止中）',
                    'type' => 'string',
                    'enumValueTitles' => 
                    array (
                    ),
                    'example' => 'Finished',
                  ),
                  'ErrorMessage' => 
                  array (
                    'description' => '错误信息，当JobStatus=Failed时使用。',
                    'type' => 'string',
                    'example' => 'error details xxx',
                  ),
                  'RunStats' => 
                  array (
                    'description' => '运行统计信息',
                    'type' => 'object',
                    'additionalProperties' => 
                    array (
                      'type' => 'string',
                      'description' => '运行统计信息详情。
- StructureMigrationTotalTables：结构同步表总数
- StructureMigrationSuccessTables：结构同步表成功数
- StructureMigrationFailedTables：结构同步表失败数
- StructureMigrationStatus：结构同步状态，Waiting、Running、Finished、Failed、Stopped
- StructureMigrationErrorMessage：结构同步错误信息
- FullMigrationTotalTables：全量同步表总数
- FullMigrationSuccessTables：全量同步表成功数
- FullMigrationFailedTables：全量同步表失败数
- FullMigrationStatus：全量同步状态
- FullMigrationErrorMessage：全量同步错误信息
- RealtimeMigrationMaxDelay：实时同步延迟时长，单位毫秒
- RealtimeMigrationStatus：实时同步状态
- RealtimeMigrationErrorMessage：实时已同步错误信息',
                      'example' => 'StructureMigrationTotalTables',
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Data\\": {\\n    \\"ProjectId\\": 22,\\n    \\"DIJobId\\": 11588,\\n    \\"JobName\\": \\"mysql_to_holo_sync_445\\",\\n    \\"Description\\": \\"mysql同步到hologres\\",\\n    \\"MigrationType\\": \\"FullAndRealtimeIncremental\\",\\n    \\"SourceDataSourceType\\": \\"MySQL\\",\\n    \\"DestinationDataSourceType\\": \\"Hologres\\",\\n    \\"SourceDataSourceSettings\\": [\\n      {\\n        \\"DataSourceName\\": \\"mysql_datasource_1\\",\\n        \\"DataSourceProperties\\": {\\n          \\"key\\": \\"TimeZone\\"\\n        }\\n      }\\n    ],\\n    \\"DestinationDataSourceSettings\\": [\\n      {\\n        \\"DataSourceName\\": \\"holo_datasource_1\\",\\n        \\"DataSourceProperties\\": {\\n          \\"key\\": \\"TimeZone\\"\\n        }\\n      }\\n    ],\\n    \\"ResourceSettings\\": {\\n      \\"OfflineResourceSettings\\": {\\n        \\"ResourceGroupIdentifier\\": \\"S_res_group_111_222\\"\\n      },\\n      \\"RealtimeResourceSettings\\": {\\n        \\"ResourceGroupIdentifier\\": \\"S_res_group_111_222\\"\\n      },\\n      \\"RequestedCu\\": 0\\n    },\\n    \\"TransformationRules\\": [\\n      {\\n        \\"RuleActionType\\": \\"Rename\\",\\n        \\"RuleExpression\\": \\"{\\\\\\"expression\\\\\\":\\\\\\"${srcDatasoureName}_${srcDatabaseName}\\\\\\"}\\",\\n        \\"RuleName\\": \\"rename_rule_1\\",\\n        \\"RuleTargetType\\": \\"Table\\"\\n      }\\n    ],\\n    \\"TableMappings\\": [\\n      {\\n        \\"SourceObjectSelectionRules\\": [\\n          {\\n            \\"Expression\\": \\"mysql_table_1\\",\\n            \\"ObjectType\\": \\"Table\\"\\n          }\\n        ],\\n        \\"TransformationRules\\": [\\n          {\\n            \\"RuleActionType\\": \\"Rename\\",\\n            \\"RuleName\\": \\"rename_rule_1\\",\\n            \\"RuleTargetType\\": \\"Table\\"\\n          }\\n        ]\\n      }\\n    ],\\n    \\"JobSettings\\": {\\n      \\"ColumnDataTypeSettings\\": [\\n        {\\n          \\"SourceDataType\\": \\"bigint\\",\\n          \\"DestinationDataType\\": \\"text\\"\\n        }\\n      ],\\n      \\"DdlHandlingSettings\\": [\\n        {\\n          \\"Action\\": \\"Critical\\",\\n          \\"Type\\": \\"AddColumn\\"\\n        }\\n      ],\\n      \\"RuntimeSettings\\": [\\n        {\\n          \\"Name\\": \\"runtime.offline.concurrent\\",\\n          \\"Value\\": \\"1\\"\\n        }\\n      ],\\n      \\"CycleScheduleSettings\\": {\\n        \\"CycleMigrationType\\": \\"Full\\",\\n        \\"ScheduleParameters\\": \\"bizdate=$bizdate\\"\\n      },\\n      \\"ChannelSettings\\": \\"{\\\\\\"structInfo\\\\\\":\\\\\\"MANAGED\\\\\\",\\\\\\"storageType\\\\\\":\\\\\\"TEXTFILE\\\\\\",\\\\\\"writeMode\\\\\\":\\\\\\"APPEND\\\\\\",\\\\\\"partitionColumns\\\\\\":[{\\\\\\"columnName\\\\\\":\\\\\\"pt\\\\\\",\\\\\\"columnType\\\\\\":\\\\\\"STRING\\\\\\",\\\\\\"comment\\\\\\":\\\\\\"\\\\\\"}],\\\\\\"fieldDelimiter\\\\\\":\\\\\\"\\\\\\"}\\\\n\\"\\n    },\\n    \\"CreatedTime\\": 1671516776,\\n    \\"CreatedUid\\": \\"100000001\\",\\n    \\"UpdatedTime\\": 1673859985,\\n    \\"UpdatedUid\\": \\"100000001\\",\\n    \\"StartedTime\\": 1673859999,\\n    \\"StartedUid\\": \\"100000001\\",\\n    \\"JobStatus\\": \\"Finished\\",\\n    \\"ErrorMessage\\": \\"error details xxx\\",\\n    \\"RunStats\\": {\\n      \\"key\\": \\"StructureMigrationTotalTables\\"\\n    }\\n  },\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\"\\n}","errorExample":""},{"type":"xml","example":"<GetDIJobResponse>\\n    <Data>\\n        <ProjectId>22</ProjectId>\\n        <DIJobId>11588</DIJobId>\\n        <JobName>mysql_to_holo_sync_445</JobName>\\n        <Description>mysql同步到hologres</Description>\\n        <MigrationType>FullAndRealtimeIncremental</MigrationType>\\n        <SourceDataSourceType>MySQL</SourceDataSourceType>\\n        <DestinationDataSourceType>Hologres</DestinationDataSourceType>\\n        <SourceDataSourceSettings>\\n            <DataSourceName>mysql_datasource_1</DataSourceName>\\n            <DataSourceProperties>\\n                <key>TimeZone</key>\\n            </DataSourceProperties>\\n        </SourceDataSourceSettings>\\n        <DestinationDataSourceSettings>\\n            <DataSourceName>holo_datasource_1</DataSourceName>\\n            <DataSourceProperties>\\n                <key>TimeZone</key>\\n            </DataSourceProperties>\\n        </DestinationDataSourceSettings>\\n        <ResourceSettings>\\n            <OfflineResourceSettings>\\n                <ResourceGroupIdentifier>S_res_group_111_222</ResourceGroupIdentifier>\\n            </OfflineResourceSettings>\\n            <RealtimeResourceSettings>\\n                <ResourceGroupIdentifier>S_res_group_111_222</ResourceGroupIdentifier>\\n            </RealtimeResourceSettings>\\n        </ResourceSettings>\\n        <TransformationRules>\\n            <RuleActionType>Rename</RuleActionType>\\n            <RuleExpression>{\\"expression\\":\\"${srcDatasoureName}_${srcDatabaseName}\\"}</RuleExpression>\\n            <RuleName>rename_rule_1</RuleName>\\n            <RuleTargetType>Table</RuleTargetType>\\n        </TransformationRules>\\n        <TableMappings>\\n            <SourceObjectSelectionRules>\\n                <Expression>mysql_table_1</Expression>\\n                <ObjectType>Table</ObjectType>\\n            </SourceObjectSelectionRules>\\n            <TransformationRules>\\n                <RuleActionType>Rename</RuleActionType>\\n                <RuleName>rename_rule_1</RuleName>\\n                <RuleTargetType>Table</RuleTargetType>\\n            </TransformationRules>\\n        </TableMappings>\\n        <JobSettings>\\n            <ColumnDataTypeSettings>\\n                <SourceDataType>bigint</SourceDataType>\\n                <DestinationDataType>text</DestinationDataType>\\n            </ColumnDataTypeSettings>\\n            <DdlHandlingSettings>\\n                <Action>Critical</Action>\\n                <Type>AddColumn</Type>\\n            </DdlHandlingSettings>\\n            <RuntimeSettings>\\n                <Name>runtime.offline.concurrent</Name>\\n                <Value>1</Value>\\n            </RuntimeSettings>\\n        </JobSettings>\\n        <CreatedTime>1671516776</CreatedTime>\\n        <CreatedUid>100000001</CreatedUid>\\n        <UpdatedTime>1673859985</UpdatedTime>\\n        <UpdatedUid>100000001</UpdatedUid>\\n        <StartedTime>1673859999</StartedTime>\\n        <StartedUid>100000001</StartedUid>\\n        <JobStatus>Finished</JobStatus>\\n        <ErrorMessage>error details xxx</ErrorMessage>\\n        <RunStats>\\n            <key>StructureMigrationTotalTables</key>\\n        </RunStats>\\n    </Data>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n</GetDIJobResponse>","errorExample":""}]',
      'title' => '查看数据集成新版任务',
    ),
    'ListDIJobs' => 
    array (
      'summary' => '查询数据集成新版任务列表，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '155162',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideQHGTK4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1967',
          ),
        ),
        1 => 
        array (
          'name' => 'JobName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务名称，不填代表不限制，填写支持模糊查询。',
            'type' => 'string',
            'required' => false,
            'example' => 'mysql_to_holo_sync_8772',
          ),
        ),
        2 => 
        array (
          'name' => 'SourceDataSourceType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '源端数据源类型，不填代表不限制。',
            'type' => 'string',
            'required' => false,
            'example' => 'MySQL',
          ),
        ),
        3 => 
        array (
          'name' => 'DestinationDataSourceType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '目标端数据源类型，不填代表不限制。',
            'type' => 'string',
            'required' => false,
            'example' => 'Hologres',
          ),
        ),
        4 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        5 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页大小，默认为10，最大支持100。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '响应。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '7263E4AC-9D2E-5B29-B8AF-7C5012E92A41',
              ),
              'DIJobPaging' => 
              array (
                'description' => '任务分页结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'TotalCount' => 
                  array (
                    'description' => '总记录数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '6',
                  ),
                  'PageNumber' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '分页大小。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'DIJobs' => 
                  array (
                    'description' => '任务列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '任务。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'DIJobId' => 
                        array (
                          'description' => '任务ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '16626',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1967',
                        ),
                        'JobName' => 
                        array (
                          'description' => '任务名称。',
                          'type' => 'string',
                          'example' => 'mysql_to_holo_sync_8772',
                        ),
                        'MigrationType' => 
                        array (
                          'description' => '同步类型，可选的枚举值有：
- FullAndRealtimeIncremental（全量和实时增量）
- RealtimeIncremental（实时增量）
- Full（全量）',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                            'FullAndRealtimeIncremental' => '全量和实时增量',
                            'RealtimeIncremental' => '实时增量',
                            'Full' => '全量',
                          ),
                          'example' => 'Full',
                        ),
                        'SourceDataSourceType' => 
                        array (
                          'description' => '源端数据源类型，枚举值：MySQL。',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                            'MySQL' => 'MySQL',
                          ),
                          'example' => 'MySQL',
                        ),
                        'DestinationDataSourceType' => 
                        array (
                          'description' => '目标端数据源类型，枚举值：Hologres。',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                            'Hologres' => 'Hologres',
                          ),
                          'example' => 'Hologres',
                        ),
                        'JobStatus' => 
                        array (
                          'description' => '同步状态，可选的枚举值：
- Finished（运行成功已结束）
- Initialized（初始化完成）
- Stopped（已停止）
- Failed（运行失败）
- Running（运行中）
- Stopping（停止中）',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                            'Finished' => '运行成功已结束',
                            'Initialized' => '初始化完成',
                            'Stopped' => '已停止',
                            'Failed' => '运行失败',
                            'Running' => '运行中',
                            'Stopping' => '停止中',
                          ),
                          'example' => 'Finished',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"7263E4AC-9D2E-5B29-B8AF-7C5012E92A41\\",\\n  \\"DIJobPaging\\": {\\n    \\"TotalCount\\": 6,\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"DIJobs\\": [\\n      {\\n        \\"DIJobId\\": 16626,\\n        \\"ProjectId\\": 1967,\\n        \\"JobName\\": \\"mysql_to_holo_sync_8772\\",\\n        \\"MigrationType\\": \\"Full\\",\\n        \\"SourceDataSourceType\\": \\"MySQL\\",\\n        \\"DestinationDataSourceType\\": \\"Hologres\\",\\n        \\"JobStatus\\": \\"Finished\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListDIJobsResponse>\\n    <RequestId>7263E4AC-9D2E-5B29-B8AF-7C5012E92A41</RequestId>\\n    <DIJobPaging>\\n        <TotalCount>6</TotalCount>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <DIJobs>\\n            <DIJobId>16626</DIJobId>\\n            <ProjectId>1967</ProjectId>\\n            <JobName>mysql_to_holo_sync_8772</JobName>\\n            <MigrationType>Full</MigrationType>\\n            <SourceDataSourceType>MySQL</SourceDataSourceType>\\n            <DestinationDataSourceType>Hologres</DestinationDataSourceType>\\n            <JobStatus>Finished</JobStatus>\\n        </DIJobs>\\n    </DIJobPaging>\\n</ListDIJobsResponse>","errorExample":""}]',
      'title' => '查询数据集成新版任务列表',
      'description' => '此列表接口仅返回任务基础信息，如需查看任务详细信息，请调用单任务查询接口GetDIJob。',
    ),
    'StartDIJob' => 
    array (
      'summary' => '启动数据集成新版任务，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '155172',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideQHGTK4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DIJobId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '11743',
          ),
        ),
        1 => 
        array (
          'name' => 'RealtimeStartSettings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '实时同步启动设置。',
            'type' => 'object',
            'properties' => 
            array (
              'StartTime' => 
              array (
                'description' => '实时同步起始位点时间戳，单位秒。不填默认为不重置位点。',
                'type' => 'integer',
                'format' => 'int64',
                'required' => false,
                'example' => '1671516776',
              ),
              'FailoverSettings' => 
              array (
                'description' => 'Failover设置。',
                'type' => 'object',
                'properties' => 
                array (
                  'Interval' => 
                  array (
                    'description' => 'Failover时间区间，单位分钟。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'required' => false,
                    'example' => '10',
                  ),
                  'UpperLimit' => 
                  array (
                    'description' => 'Failover次数上限。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'required' => false,
                    'example' => '30',
                  ),
                ),
                'required' => false,
              ),
            ),
            'required' => false,
          ),
        ),
        2 => 
        array (
          'name' => 'ForceToRerun',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否强制重跑全部同步步骤。不填默认为不强制重跑。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '响应。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '999431B2-6013-577F-B684-36F7433C753B',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"999431B2-6013-577F-B684-36F7433C753B\\"\\n}","errorExample":""},{"type":"xml","example":"<StartDIJobResponse>\\n    <RequestId>999431B2-6013-577F-B684-36F7433C753B</RequestId>\\n</StartDIJobResponse>","errorExample":""}]',
      'title' => '启动数据集成新版任务',
    ),
    'StopDIJob' => 
    array (
      'summary' => '停止数据集成新版任务，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '155174',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideQHGTK4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DIJobId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '11668',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '响应。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '92F778C7-8F00-53B1-AE1A-B3B17101247D',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"92F778C7-8F00-53B1-AE1A-B3B17101247D\\"\\n}","errorExample":""},{"type":"xml","example":"<StopDIJobResponse>\\n    <RequestId>92F778C7-8F00-53B1-AE1A-B3B17101247D</RequestId>\\n</StopDIJobResponse>","errorExample":""}]',
      'title' => '停止数据集成新版任务',
    ),
    'UpdateDIJob' => 
    array (
      'summary' => '更新数据集成新版任务，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '155160',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideQHGTK4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DIJobId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '11588',
          ),
        ),
        1 => 
        array (
          'name' => 'Description',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务描述。',
            'type' => 'string',
            'required' => false,
            'example' => 'mysql同步到hologres',
          ),
        ),
        2 => 
        array (
          'name' => 'ResourceSettings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '资源设置。',
            'type' => 'object',
            'properties' => 
            array (
              'OfflineResourceSettings' => 
              array (
                'description' => '离线同步资源。',
                'type' => 'object',
                'properties' => 
                array (
                  'ResourceGroupIdentifier' => 
                  array (
                    'description' => '离线同步使用的数据集成资源组标识。',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'S_res_group_111_222',
                  ),
                ),
                'required' => false,
              ),
              'RealtimeResourceSettings' => 
              array (
                'description' => '实时同步资源。',
                'type' => 'object',
                'properties' => 
                array (
                  'ResourceGroupIdentifier' => 
                  array (
                    'description' => '实时同步使用的数据集成资源组标识。',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'S_res_group_111_222',
                  ),
                ),
                'required' => false,
              ),
              'RequestedCu' => 
              array (
                'type' => 'number',
                'format' => 'float',
                'required' => false,
              ),
            ),
            'required' => false,
          ),
        ),
        3 => 
        array (
          'name' => 'TransformationRules',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '同步对象转换规则定义列表，列表中每个元素为一条转换规则定义。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '同步对象转换规则定义。',
              'type' => 'object',
              'properties' => 
              array (
                'RuleName' => 
                array (
                  'description' => '规则名称，当动作类型和动作作用的目标类型相同时，规则名称需保证唯一性。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'rename_rule_1',
                ),
                'RuleActionType' => 
                array (
                  'description' => '动作类型，可选的枚举值：
- DefinePrimaryKey（定义主键）
- Rename（重命名）
- AddColumn（增加列）
- HandleDml（DML处理）',
                  'type' => 'string',
                  'required' => false,
                  'enumValueTitles' => 
                  array (
                    'DefinePrimaryKey' => '定义主键',
                    'Rename' => '重命名',
                    'AddColumn' => '增加列',
                    'HandleDml' => 'DML处理',
                  ),
                  'example' => 'Rename',
                ),
                'RuleTargetType' => 
                array (
                  'description' => '动作作用的目标类型，可选的枚举值：
- Table（表）
- Schema（schema）',
                  'type' => 'string',
                  'required' => false,
                  'enumValueTitles' => 
                  array (
                    'Table' => '表',
                    'Schema' => 'schema',
                  ),
                  'example' => 'Table',
                ),
                'RuleExpression' => 
                array (
                  'description' => '规则表达式，json string格式。

重命名规则（Rename）示例： {"expression":"${srcDatasourceName}_${srcDatabaseName}_0922","variables":\\[{"variableName":"srcDatabaseName","variableRules":\\[{"from":"fromdb","to":"todb"}\\]}\\]}

expression：为重命名转换规则表达式，表达式内支持变量包括：${srcDatasourceName}（源端数据源名）、${srcDatabaseName}（源端库名）、${srcTableName}（源端表名）。
variables：为重命名转换规则表达式中各变量的生成规则，参数默认值为对应含义在源端的原始值，可按需定义一组字符串替换规则对原始值进行改写。variableName：变量名，不含${}。variableRules：变量生成规则组，按顺序串行执行替换，from原始字符串；to替换后字符串。
在目标端增加指定列并赋值规则（AddColumn）示例： {"columns":\\[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}\\]}

如不指定，默认规则为不加列不复制。
columnName：附加的列名称。
columnValueType：附加的列取值类型，包括Constant（常量）、Variable（变量）。
columnValue：附加的列取值。当valueType=Constant时，value为自定义常量，String类型。当valueType=Variable时，value为内置变量。内置变量可选值包括：EXECUTE_TIME（执行时间，Long类型）、DB_NAME_SRC（源端数据库名称，String类型）、DATASOURCE_NAME_SRC（源端数据源名称，String类型）、TABLE_NAME_SRC（源端表名，String类型）、DB_NAME_DEST（目标端数据库名称，String类型）、DATASOURCE_NAME_DEST（目标端数据源名称，String类型）、TABLE_NAME_DEST（目标端表名，String类型）、DB_NAME_SRC_TRANSED（转换后的数据库名称，String类型）。
指定目标端表的主键列列名（DefinePrimaryKey）示例： {"columns":\\["ukcolumn1","ukcolumn2"\\]}

如不指定默认使用源端主键列。
当目标端为已有表：数据集成系统不会修改目标端表结构，如果指定的主键列不在目标端的列集合中，任务启动会报错提示。
当目标端为自动建表：数据集成系统会自动创建目标端表结构，表结构包含定义的主键列。当指定的主键列不在目标端的列集合中时，任务启动会报错提示。
DML处理规则（HandleDml）示例： {"dmlPolicies":\\[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}\\]}

如不指定，默认规则为Insert、Update、Delete均为Normal
dmlType：DML操作类型，Insert（插入）、Update（更新）、Delete（删除）
dmlAction：DML处理策略，Normal（正常处理）、Ignore（忽略）、Filter（有条件的正常处理，当dmlType=Update/Delete时使用）、LogicalDelete（逻辑删除）
filterCondition：DML过滤条件，当dmlAction=Filter时使用',
                  'type' => 'string',
                  'required' => false,
                  'example' => '{"expression":"${srcDatasoureName}_${srcDatabaseName}"}',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
          ),
        ),
        4 => 
        array (
          'name' => 'TableMappings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '同步对象转换映射列表，列表中每个元素描述了一组源端同步对象选择规则列表和在该组同步对象上应用的同步对象转换规则列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '同步对象转换映射。',
              'type' => 'object',
              'properties' => 
              array (
                'SourceObjectSelectionRules' => 
                array (
                  'description' => '源端对象选择规则，支持多条。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '每条规则可选择待同步源端对象的不同对象类型，如选择源端数据库、源端数据表。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'ObjectType' => 
                      array (
                        'description' => '对象类型，可选的枚举值：
- Table（表）
- Database（数据库）',
                        'type' => 'string',
                        'required' => false,
                        'enumValueTitles' => 
                        array (
                          'Table' => '表',
                          'Database' => '数据库',
                        ),
                        'example' => 'Table',
                      ),
                      'Expression' => 
                      array (
                        'description' => '表达式。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'mysql_table_1',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                ),
                'TransformationRules' => 
                array (
                  'description' => '源端对象上应用的转换规则列表。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '源端对象上应用的转换规则。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'RuleName' => 
                      array (
                        'description' => '规则名称，在一种动作类型+动作作用的目标类型下规则名称唯一。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'rename_rule_1',
                      ),
                      'RuleActionType' => 
                      array (
                        'description' => '动作类型，可选的枚举值：
- DefinePrimaryKey（定义主键）
- Rename（重命名）
- AddColumn（增加列）
- HandleDml（DML处理）',
                        'type' => 'string',
                        'required' => false,
                        'enumValueTitles' => 
                        array (
                          'DefinePrimaryKey' => '定义主键',
                          'Rename' => '重命名',
                          'AddColumn' => '增加列',
                          'HandleDml' => 'DML处理',
                        ),
                        'example' => 'Rename',
                      ),
                      'RuleTargetType' => 
                      array (
                        'description' => '动作作用的目标类型，可选的枚举值;
- Table（表）
- Schema（schema）',
                        'type' => 'string',
                        'required' => false,
                        'enumValueTitles' => 
                        array (
                          'Table' => '表',
                          'Schema' => 'schema',
                        ),
                        'example' => 'Table',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                ),
              ),
              'required' => false,
            ),
            'required' => false,
          ),
        ),
        5 => 
        array (
          'name' => 'JobSettings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '同步任务维度的设置，含DDL处理策略、源端和目标端列数据类型映射策略、任务运行时参数等。',
            'type' => 'object',
            'properties' => 
            array (
              'DdlHandlingSettings' => 
              array (
                'description' => 'DDL处理设置，支持多值。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => 'DDL处理设置。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Type' => 
                    array (
                      'description' => 'DDL类型，可选的枚举值;
- RenameColumn（重命名列）
- ModifyColumn（更新列）
- CreateTable（新建表）
- TruncateTable（清空表）
- DropTable（删除表）
- DropColumn（删除列）
- AddColumn（新增列）',
                      'type' => 'string',
                      'required' => false,
                      'enumValueTitles' => 
                      array (
                        'RenameColumn' => '重命名列',
                        'ModifyColumn' => '更新列',
                        'CreateTable' => '新建表',
                        'TruncateTable' => '清空表',
                        'DropTable' => '删除表',
                        'DropColumn' => '删除列',
                        'AddColumn' => '新增列',
                      ),
                      'example' => 'AddColumn',
                    ),
                    'Action' => 
                    array (
                      'description' => '处理动作，可选的枚举值：
- Ignore（忽略）
- Critical（报错）
- Normal（正常处理）',
                      'type' => 'string',
                      'required' => false,
                      'enumValueTitles' => 
                      array (
                        'Ignore' => '忽略',
                        'Critical' => '报错',
                        'Normal' => '正常处理',
                      ),
                      'example' => 'Critical',
                    ),
                  ),
                  'required' => false,
                ),
                'required' => false,
              ),
              'ColumnDataTypeSettings' => 
              array (
                'description' => '列类型映射，支持多值。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '列类型映射。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'SourceDataType' => 
                    array (
                      'description' => '源端类型。',
                      'type' => 'string',
                      'required' => false,
                      'example' => 'bigint',
                    ),
                    'DestinationDataType' => 
                    array (
                      'description' => '目标端类型。',
                      'type' => 'string',
                      'required' => false,
                      'example' => 'text',
                    ),
                  ),
                  'required' => false,
                ),
                'required' => false,
              ),
              'RuntimeSettings' => 
              array (
                'description' => '运行时设置，支持多值。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '运行时设置。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Name' => 
                    array (
                      'description' => '设置名称，可选的枚举值：
	
- runtime.offline.speed.limit.mb（离线批量任务限流大小，当runtime.offline.speed.limit.enable=true时有效）
- runtime.offline.speed.limit.enable（离线批量任务是否开启限流）
- dst.offline.connection.max（离线批量任务写端最大连接数）
- runtime.offline.concurrent（离线批量同步任务并发度）
- dst.realtime.connection.max（实时任务写端最大连接数）
- runtime.enable.auto.create.schema（是否自动在目标端创建schema）
- src.offline.datasource.max.connection（离线批量任务源端最大连接数）
- runtime.realtime.concurrent（实时任务并发度）',
                      'type' => 'string',
                      'required' => false,
                      'enumValueTitles' => 
                      array (
                        'runtime.offline.speed.limit.mb' => '离线批量任务限流大小，当runtime.offline.speed.limit.enable=true时有效',
                        'runtime.offline.speed.limit.enable' => '离线批量任务是否开启限流',
                        'dst.offline.connection.max' => '离线批量任务写端最大连接数',
                        'runtime.offline.concurrent' => '离线批量同步任务并发度',
                        'dst.realtime.connection.max' => '实时任务写端最大连接数',
                        'runtime.enable.auto.create.schema' => '是否自动在目标端创建schema',
                        'src.offline.datasource.max.connection' => '离线批量任务源端最大连接数',
                        'runtime.realtime.concurrent' => '实时任务并发度',
                      ),
                      'example' => 'runtime.offline.concurrent',
                    ),
                    'Value' => 
                    array (
                      'description' => '设置取值。',
                      'type' => 'string',
                      'required' => false,
                      'example' => '1',
                    ),
                  ),
                  'required' => false,
                ),
                'required' => false,
              ),
              'CycleScheduleSettings' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ScheduleParameters' => 
                  array (
                    'type' => 'string',
                    'required' => false,
                  ),
                ),
                'required' => false,
              ),
              'ChannelSettings' => 
              array (
                'type' => 'string',
                'required' => false,
              ),
            ),
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '响应。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'AAC30B35-820D-5F3E-A42C-E96BB6379325',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"AAC30B35-820D-5F3E-A42C-E96BB6379325\\"\\n}","errorExample":""},{"type":"xml","example":"<UpdateDIJobResponse>\\n    <RequestId>AAC30B35-820D-5F3E-A42C-E96BB6379325</RequestId>\\n</UpdateDIJobResponse>","errorExample":""}]',
      'title' => '更新数据集成新版任务',
    ),
    'CreateDIAlarmRule' => 
    array (
      'summary' => '创建数据集成新版任务告警规则，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '154822',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideTG7EYI',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DIJobId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务ID，是告警规则关联的任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '11265',
          ),
        ),
        1 => 
        array (
          'name' => 'Description',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '描述。',
            'type' => 'string',
            'required' => false,
            'example' => 'mysql同步到hologres心跳告警',
          ),
        ),
        2 => 
        array (
          'name' => 'MetricType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '告警指标类型，可选的枚举值：
- Heartbeat（任务状态报警）
- FailoverCount（failover次数报警）
- Delay（任务延迟报警）',
            'type' => 'string',
            'required' => true,
            'enumValueTitles' => 
            array (
              'Heartbeat' => '任务状态报警',
              'FailoverCount' => 'failover次数报警',
              'Delay' => '任务延迟报警',
            ),
            'example' => 'Heartbeat',
          ),
        ),
        3 => 
        array (
          'name' => 'TriggerConditions',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '告警触发条件列表，支持多条件。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '告警触发条件。',
              'type' => 'object',
              'properties' => 
              array (
                'Severity' => 
                array (
                  'description' => '严重程度，可选的枚举值：
- Warning
- Critical',
                  'type' => 'string',
                  'required' => false,
                  'enumValueTitles' => 
                  array (
                    'Warning' => 'Warning',
                    'Critical' => 'Critical',
                  ),
                  'example' => 'Warning',
                ),
                'Duration' => 
                array (
                  'description' => '告警计算时间区间，单位分钟。',
                  'type' => 'integer',
                  'format' => 'int64',
                  'required' => false,
                  'example' => '15',
                ),
                'Threshold' => 
                array (
                  'description' => '告警阈值。
- 任务状态报警：无需填写阈值。
- failover次数报警：阈值为failover次数。
- 任务延迟报警：阈值为延迟时长，单位秒。',
                  'type' => 'integer',
                  'format' => 'int64',
                  'required' => false,
                  'example' => '5',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
          ),
        ),
        4 => 
        array (
          'name' => 'NotificationSettings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '告警通知设置。',
            'type' => 'object',
            'properties' => 
            array (
              'NotificationChannels' => 
              array (
                'description' => '告警通知渠道，支持多值。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '告警通知渠道。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Severity' => 
                    array (
                      'description' => '严重程度。',
                      'type' => 'string',
                      'required' => false,
                      'enumValueTitles' => 
                      array (
                        'Warning' => 'Warning',
                        'Critical' => 'Critical',
                      ),
                      'example' => 'Warning',
                    ),
                    'Channels' => 
                    array (
                      'description' => '通道列表。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'description' => '通道，可选的枚举值：
- Mail（邮件）
- Phone（电话）
- Sms（短信）
- Ding（钉钉）',
                        'type' => 'string',
                        'required' => false,
                        'enumValueTitles' => 
                        array (
                          'Mail' => '邮件',
                          'Phone' => '电话',
                          'Sms' => '短信',
                          'Ding' => '钉钉',
                        ),
                        'example' => 'Ding',
                      ),
                      'required' => false,
                    ),
                  ),
                  'required' => false,
                ),
                'required' => true,
              ),
              'NotificationReceivers' => 
              array (
                'description' => '告警通知接收方，支持多值。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '告警通知接收方。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'ReceiverType' => 
                    array (
                      'description' => '接收方类型。
- 当告警通知渠道为邮件、电话、短信时，接收方类型选择阿里云用户ID。
- 当告警通知渠道为钉钉时，接收方类型选择钉钉token。',
                      'type' => 'string',
                      'required' => false,
                      'enumValueTitles' => 
                      array (
                        'DingToken' => '钉钉token',
                        'AliyunUid' => '阿里云用户ID',
                      ),
                      'example' => 'DingToken',
                    ),
                    'ReceiverValues' => 
                    array (
                      'description' => '接收方取值列表。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'description' => '接收方取值。
- 当接收方类型为阿里云ID时，接收方取值为具体阿里云用户ID。
- 当接收方类型为钉钉token时，接收方取值为具体钉钉token值。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'token1',
                      ),
                      'required' => false,
                    ),
                  ),
                  'required' => false,
                ),
                'required' => true,
              ),
              'InhibitionInterval' => 
              array (
                'description' => '告警抑制间隔时长，单位分钟，默认5分钟。',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'example' => '5',
              ),
            ),
            'required' => true,
          ),
        ),
        5 => 
        array (
          'name' => 'Enabled',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '告警规则是否启用，默认不开启。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
            'default' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '响应。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'C636A747-7E4E-594D-94CD-2B4F8A9A9A63',
              ),
              'DIAlarmRuleId' => 
              array (
                'description' => '告警规则ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '34988',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"C636A747-7E4E-594D-94CD-2B4F8A9A9A63\\",\\n  \\"DIAlarmRuleId\\": 34988\\n}","errorExample":""},{"type":"xml","example":"<CreateDIAlarmRuleResponse>\\n    <RequestId>C636A747-7E4E-594D-94CD-2B4F8A9A9A63</RequestId>\\n    <DIAlarmRuleId>34988</DIAlarmRuleId>\\n</CreateDIAlarmRuleResponse>","errorExample":""}]',
      'title' => '创建数据集成新版任务告警规则',
      'description' => '当您的任务同步类型中包含实时同步时，支持设置告警规则。',
    ),
    'DeleteDIAlarmRule' => 
    array (
      'summary' => '删除数据集成新版任务告警规则，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '154894',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide39WW3A',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DIAlarmRuleId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '告警规则ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '34971',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '响应。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteDIAlarmRuleResponse>\\n    <RequestId>C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490</RequestId>\\n</DeleteDIAlarmRuleResponse>","errorExample":""}]',
      'title' => '删除数据集成新版任务告警规则',
      'description' => '当您的任务同步类型中包含实时同步时，支持设置告警规则。',
    ),
    'GetDIAlarmRule' => 
    array (
      'summary' => '查询数据集成新版任务告警规则，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '154881',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide39WW3A',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DIAlarmRuleId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '告警规则ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '34994',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '响应。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '4A807D85-AC9F-55F7-A58F-998D5249CAD9',
              ),
              'DIAlarmRule' => 
              array (
                'description' => '告警规则。',
                'type' => 'object',
                'properties' => 
                array (
                  'DIAlarmRuleId' => 
                  array (
                    'description' => '告警规则ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '34988',
                  ),
                  'DIJobId' => 
                  array (
                    'description' => '任务ID，是告警规则关联的任务ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '11170',
                  ),
                  'Description' => 
                  array (
                    'description' => '描述。',
                    'type' => 'string',
                    'example' => 'mysql同步到hologres心跳告警',
                  ),
                  'MetricType' => 
                  array (
                    'description' => '告警指标类型，可选的枚举值：
- Heartbeat（任务状态报警）
- FailoverCount（failover次数报警）
- Delay（任务延迟报警）',
                    'type' => 'string',
                    'enumValueTitles' => 
                    array (
                      'Heartbeat' => '任务状态报警',
                      'FailoverCount' => 'failover次数报警',
                      'Delay' => '任务延迟报警',
                    ),
                    'example' => 'Heartbeat',
                  ),
                  'Enabled' => 
                  array (
                    'description' => '告警规则是否启用。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'TriggerConditions' => 
                  array (
                    'description' => '告警触发条件列表，支持多条件。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '告警触发条件。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Severity' => 
                        array (
                          'description' => '严重程度，可选的枚举值：
- Warning
- Critical',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                            'Warning' => 'Warning',
                            'Critical' => 'Critical',
                          ),
                          'example' => 'Warning',
                        ),
                        'Duration' => 
                        array (
                          'description' => '告警计算时间区间，单位分钟。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '15',
                        ),
                        'Threshold' => 
                        array (
                          'description' => '告警阈值。

- 任务状态报警：无阈值。
- failover次数报警：阈值为failover次数。
- 任务延迟报警：阈值为延迟时长，单位秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '5',
                        ),
                      ),
                    ),
                  ),
                  'NotificationSettings' => 
                  array (
                    'description' => '告警通知设置。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'NotificationChannels' => 
                      array (
                        'description' => '告警通知渠道，支持多值。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '告警通知渠道。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Severity' => 
                            array (
                              'description' => '严重程度，可选的枚举值：
- Warning
- Critical',
                              'type' => 'string',
                              'enumValueTitles' => 
                              array (
                                'Warning' => 'Warning',
                                'Critical' => 'Critical',
                              ),
                              'example' => 'Warning',
                            ),
                            'Channels' => 
                            array (
                              'description' => '通道列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '通道，可选的枚举值;
- Mail（邮件）
- Phone（电话）
- Sms（短信）
- Ding（钉钉）',
                                'type' => 'string',
                                'enumValueTitles' => 
                                array (
                                  'Mail' => '邮件',
                                  'Phone' => '电话',
                                  'Sms' => '短信',
                                  'Ding' => '钉钉',
                                ),
                                'example' => 'Ding',
                              ),
                            ),
                          ),
                        ),
                      ),
                      'NotificationReceivers' => 
                      array (
                        'description' => '告警通知接收方，支持多值。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '告警通知接收方。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ReceiverType' => 
                            array (
                              'description' => '接收方类型。

- 当告警通知渠道为邮件、电话、短信时，接收方类型为阿里云用户ID。
- 当告警通知渠道为钉钉时，接收方类型为钉钉token。',
                              'type' => 'string',
                              'enumValueTitles' => 
                              array (
                                'DingToken' => '钉钉token',
                                'AliyunUid' => '阿里云用户ID',
                              ),
                              'example' => 'DingToken',
                            ),
                            'ReceiverValues' => 
                            array (
                              'description' => '接收方取值列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '接收方取值。

- 当接收方类型为阿里云ID时，接收方取值为具体阿里云用户ID。
- 当接收方类型为钉钉token时，接收方取值为具体钉钉token值。',
                                'type' => 'string',
                                'example' => 'token1',
                              ),
                            ),
                          ),
                        ),
                      ),
                      'InhibitionInterval' => 
                      array (
                        'description' => '告警抑制间隔时长，单位分钟。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '5',
                      ),
                    ),
                  ),
                  'CreatedUid' => 
                  array (
                    'description' => '告警规则创建者用户ID。',
                    'type' => 'string',
                    'example' => '10000001',
                  ),
                  'CreatedTime' => 
                  array (
                    'description' => '告警规则创建时间戳，单位秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1663573162',
                  ),
                  'UpdatedUid' => 
                  array (
                    'description' => '告警规则最近一次更新者用户ID。',
                    'type' => 'string',
                    'example' => '10000001',
                  ),
                  'UpdatedTime' => 
                  array (
                    'description' => '告警规则最近一次更新时间戳，单位秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1663573163',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"4A807D85-AC9F-55F7-A58F-998D5249CAD9\\",\\n  \\"DIAlarmRule\\": {\\n    \\"DIAlarmRuleId\\": 34988,\\n    \\"DIJobId\\": 11170,\\n    \\"Description\\": \\"mysql同步到hologres心跳告警\\",\\n    \\"MetricType\\": \\"Heartbeat\\",\\n    \\"Enabled\\": true,\\n    \\"TriggerConditions\\": [\\n      {\\n        \\"Severity\\": \\"Warning\\",\\n        \\"Duration\\": 15,\\n        \\"Threshold\\": 5\\n      }\\n    ],\\n    \\"NotificationSettings\\": {\\n      \\"NotificationChannels\\": [\\n        {\\n          \\"Severity\\": \\"Warning\\",\\n          \\"Channels\\": [\\n            \\"Ding\\"\\n          ]\\n        }\\n      ],\\n      \\"NotificationReceivers\\": [\\n        {\\n          \\"ReceiverType\\": \\"DingToken\\",\\n          \\"ReceiverValues\\": [\\n            \\"token1\\"\\n          ]\\n        }\\n      ],\\n      \\"InhibitionInterval\\": 5\\n    },\\n    \\"CreatedUid\\": \\"10000001\\",\\n    \\"CreatedTime\\": 1663573162,\\n    \\"UpdatedUid\\": \\"10000001\\",\\n    \\"UpdatedTime\\": 1663573163\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDIAlarmRuleResponse>\\n    <RequestId>4A807D85-AC9F-55F7-A58F-998D5249CAD9</RequestId>\\n    <DIAlarmRule>\\n        <DIAlarmRuleId>34988</DIAlarmRuleId>\\n        <DIJobId>11170</DIJobId>\\n        <Description>mysql同步到hologres心跳告警</Description>\\n        <MetricType>Heartbeat</MetricType>\\n        <Enabled>true</Enabled>\\n        <TriggerConditions>\\n            <Severity>Warning</Severity>\\n            <Duration>15</Duration>\\n            <Threshold>5</Threshold>\\n        </TriggerConditions>\\n        <NotificationSettings>\\n            <NotificationChannels>\\n                <Severity>Warning</Severity>\\n                <Channels>Ding</Channels>\\n            </NotificationChannels>\\n            <NotificationReceivers>\\n                <ReceiverType>DingToken</ReceiverType>\\n                <ReceiverValues>token1</ReceiverValues>\\n            </NotificationReceivers>\\n            <InhibitionInterval>5</InhibitionInterval>\\n        </NotificationSettings>\\n        <CreatedUid>10000001</CreatedUid>\\n        <CreatedTime>1663573162</CreatedTime>\\n        <UpdatedUid>10000001</UpdatedUid>\\n        <UpdatedTime>1663573163</UpdatedTime>\\n    </DIAlarmRule>\\n</GetDIAlarmRuleResponse>","errorExample":""}]',
      'title' => '查询数据集成新版任务告警规则',
      'description' => '当您的任务同步类型中包含实时同步时，支持设置告警规则。',
    ),
    'ListDIAlarmRules' => 
    array (
      'summary' => '查询数据集成新版任务告警规则列表，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '154898',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideTG7EYI',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DIJobId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务ID，是告警规则关联的任务ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '11260',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码，默认为1。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页大小，默认为10。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '响应。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '74C2FECD-5B3A-554A-BCF5-351A36DE9815',
              ),
              'DIAlarmRulePaging' => 
              array (
                'description' => '告警规则分页结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'TotalCount' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '2',
                  ),
                  'PageNumber' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '分页大小。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'DIJobAlarmRules' => 
                  array (
                    'description' => '告警规则列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '告警规则。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'DIAlarmRuleId' => 
                        array (
                          'description' => '告警规则ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '41998',
                        ),
                        'DIJobId' => 
                        array (
                          'description' => '任务ID，是告警规则关联的任务ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '11260',
                        ),
                        'Description' => 
                        array (
                          'description' => '描述。',
                          'type' => 'string',
                          'example' => 'mysql同步到hologres心跳告警',
                        ),
                        'MetricType' => 
                        array (
                          'description' => '告警指标类型，可选的枚举值：
- Heartbeat（任务状态报警）
- FailoverCount（failover次数报警）
- Delay（任务延迟报警）',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                            'Heartbeat' => '任务状态报警',
                            'FailoverCount' => 'failover次数报警',
                            'Delay' => '任务延迟报警',
                          ),
                          'example' => 'Heartbeat',
                        ),
                        'Enabled' => 
                        array (
                          'description' => '告警规则是否启用。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'TriggerConditions' => 
                        array (
                          'description' => '告警触发条件列表，支持多条件。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '告警触发条件。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'Severity' => 
                              array (
                                'description' => '严重程度，可选的枚举值：
- Warning
- Critical',
                                'type' => 'string',
                                'enumValueTitles' => 
                                array (
                                  'Warning' => 'Warning',
                                  'Critical' => 'Critical',
                                ),
                                'example' => 'Warning',
                              ),
                              'Duration' => 
                              array (
                                'description' => '告警计算时间区间，单位分钟。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '15',
                              ),
                              'Threshold' => 
                              array (
                                'description' => '告警阈值。

- 任务状态报警：无阈值。
- failover次数报警：阈值为failover次数。
- 任务延迟报警：阈值为延迟时长，单位秒。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '5',
                              ),
                            ),
                          ),
                        ),
                        'NotificationSettings' => 
                        array (
                          'description' => '告警通知设置。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'NotificationChannels' => 
                            array (
                              'description' => '告警通知渠道，支持多值。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '告警通知渠道。',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'Severity' => 
                                  array (
                                    'description' => '严重程度，可选的枚举值：
- Warning
- Critical',
                                    'type' => 'string',
                                    'enumValueTitles' => 
                                    array (
                                      'Warning' => 'Warning',
                                      'Critical' => 'Critical',
                                    ),
                                    'example' => 'Warning',
                                  ),
                                  'Channels' => 
                                  array (
                                    'description' => '通道列表。',
                                    'type' => 'array',
                                    'items' => 
                                    array (
                                      'description' => '通道，可选的枚举值：
- Mail（邮件）
- Phone（电话）
- Sms（短信）
- Ding（钉钉）',
                                      'type' => 'string',
                                      'enumValueTitles' => 
                                      array (
                                        'Mail' => '邮件',
                                        'Phone' => '电话',
                                        'Sms' => '短信',
                                        'Ding' => '钉钉',
                                      ),
                                      'example' => 'Ding',
                                    ),
                                  ),
                                ),
                              ),
                            ),
                            'NotificationReceivers' => 
                            array (
                              'description' => '告警通知接收方，支持多值。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '告警通知接收方。',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ReceiverType' => 
                                  array (
                                    'description' => '接收方类型。

- 当告警通知渠道为邮件、电话、短信时，接收方类型为阿里云用户ID。
- 当告警通知渠道为钉钉时，接收方类型为钉钉token。',
                                    'type' => 'string',
                                    'enumValueTitles' => 
                                    array (
                                      'DingToken' => '钉钉token',
                                      'AliyunUid' => '阿里云用户ID',
                                    ),
                                    'example' => 'DingToken',
                                  ),
                                  'ReceiverValues' => 
                                  array (
                                    'description' => '接收方取值列表。',
                                    'type' => 'array',
                                    'items' => 
                                    array (
                                      'description' => '接收方取值。

- 当接收方类型为阿里云ID时，接收方取值为具体阿里云用户ID。
- 当接收方类型为钉钉token时，接收方取值为具体钉钉token值。',
                                      'type' => 'string',
                                      'example' => 'token1',
                                    ),
                                  ),
                                ),
                              ),
                            ),
                            'InhibitionInterval' => 
                            array (
                              'description' => '告警抑制间隔时长，单位分钟。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '5',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"74C2FECD-5B3A-554A-BCF5-351A36DE9815\\",\\n  \\"DIAlarmRulePaging\\": {\\n    \\"TotalCount\\": 2,\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"DIJobAlarmRules\\": [\\n      {\\n        \\"DIAlarmRuleId\\": 41998,\\n        \\"DIJobId\\": 11260,\\n        \\"Description\\": \\"mysql同步到hologres心跳告警\\",\\n        \\"MetricType\\": \\"Heartbeat\\",\\n        \\"Enabled\\": true,\\n        \\"TriggerConditions\\": [\\n          {\\n            \\"Severity\\": \\"Warning\\",\\n            \\"Duration\\": 15,\\n            \\"Threshold\\": 5\\n          }\\n        ],\\n        \\"NotificationSettings\\": {\\n          \\"NotificationChannels\\": [\\n            {\\n              \\"Severity\\": \\"Warning\\",\\n              \\"Channels\\": [\\n                \\"Ding\\"\\n              ]\\n            }\\n          ],\\n          \\"NotificationReceivers\\": [\\n            {\\n              \\"ReceiverType\\": \\"DingToken\\",\\n              \\"ReceiverValues\\": [\\n                \\"token1\\"\\n              ]\\n            }\\n          ],\\n          \\"InhibitionInterval\\": 5\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListDIAlarmRulesResponse>\\n    <RequestId>74C2FECD-5B3A-554A-BCF5-351A36DE9815</RequestId>\\n    <DIAlarmRulePaging>\\n        <TotalCount>2</TotalCount>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <DIJobAlarmRules>\\n            <DIAlarmRuleId>41998</DIAlarmRuleId>\\n            <DIJobId>11260</DIJobId>\\n            <Description>mysql同步到hologres心跳告警</Description>\\n            <MetricType>Heartbeat</MetricType>\\n            <Enabled>true</Enabled>\\n            <TriggerConditions>\\n                <Severity>Warning</Severity>\\n                <Duration>15</Duration>\\n                <Threshold>5</Threshold>\\n            </TriggerConditions>\\n            <NotificationSettings>\\n                <NotificationChannels>\\n                    <Severity>Warning</Severity>\\n                    <Channels>Ding</Channels>\\n                </NotificationChannels>\\n                <NotificationReceivers>\\n                    <ReceiverType>DingToken</ReceiverType>\\n                    <ReceiverValues>token1</ReceiverValues>\\n                </NotificationReceivers>\\n                <InhibitionInterval>5</InhibitionInterval>\\n            </NotificationSettings>\\n        </DIJobAlarmRules>\\n    </DIAlarmRulePaging>\\n</ListDIAlarmRulesResponse>","errorExample":""}]',
      'title' => '查询数据集成新版任务告警规则列表',
      'description' => '当您的任务同步类型中包含实时同步时，支持设置告警规则。',
    ),
    'UpdateDIAlarmRule' => 
    array (
      'summary' => '更新数据集成新版任务告警规则，当前支持的任务类型包括：MySQL到Hologres整库实时解决方案。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '154892',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide39WW3A',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DIAlarmRuleId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '告警规则ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '34982',
          ),
        ),
        1 => 
        array (
          'name' => 'Description',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '描述。',
            'type' => 'string',
            'required' => false,
            'example' => 'mysql同步到hologres心跳告警',
          ),
        ),
        2 => 
        array (
          'name' => 'MetricType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '告警指标类型，可选的枚举值：
- Heartbeat（任务状态报警）
- FailoverCount（failover次数报警）
- Delay（任务延迟报警）',
            'type' => 'string',
            'required' => true,
            'enumValueTitles' => 
            array (
              'Heartbeat' => '任务状态报警',
              'FailoverCount' => 'failover次数报警',
              'Delay' => '任务延迟报警',
            ),
            'example' => 'Heartbeat',
          ),
        ),
        3 => 
        array (
          'name' => 'TriggerConditions',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '告警触发条件列表，支持多条件。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '告警触发条件。',
              'type' => 'object',
              'properties' => 
              array (
                'Severity' => 
                array (
                  'description' => '严重程度，可选的枚举值;
- Warning
- Critical',
                  'type' => 'string',
                  'required' => false,
                  'enumValueTitles' => 
                  array (
                    'Warning' => 'Warning',
                    'Critical' => 'Critical',
                  ),
                  'example' => 'Warning',
                ),
                'Duration' => 
                array (
                  'description' => '告警计算时间区间，单位分钟。',
                  'type' => 'integer',
                  'format' => 'int64',
                  'required' => false,
                  'example' => '15',
                ),
                'Threshold' => 
                array (
                  'description' => '告警阈值。

- 任务状态报警：无需填写阈值。
- failover次数报警：阈值为failover次数。
- 任务延迟报警：阈值为延迟时长，单位秒。',
                  'type' => 'integer',
                  'format' => 'int64',
                  'required' => false,
                  'example' => '5',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
          ),
        ),
        4 => 
        array (
          'name' => 'NotificationSettings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '告警通知设置。',
            'type' => 'object',
            'properties' => 
            array (
              'NotificationChannels' => 
              array (
                'description' => '告警通知渠道，支持多值。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '告警通知渠道。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Severity' => 
                    array (
                      'description' => '严重程度，可选的枚举值：
- Warning
- Critical',
                      'type' => 'string',
                      'required' => false,
                      'enumValueTitles' => 
                      array (
                        'Warning' => 'Warning',
                        'Critical' => 'Critical',
                      ),
                      'example' => 'Warning',
                    ),
                    'Channels' => 
                    array (
                      'description' => '通道列表。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'description' => '通道，可选的枚举值：
- Mail（邮件）
- Phone（电话）
- Sms（短信）
- Ding（钉钉）',
                        'type' => 'string',
                        'required' => false,
                        'enumValueTitles' => 
                        array (
                          'Mail' => '邮件',
                          'Phone' => '电话',
                          'Sms' => '短信',
                          'Ding' => '钉钉',
                        ),
                        'example' => 'Ding',
                      ),
                      'required' => false,
                    ),
                  ),
                  'required' => false,
                ),
                'required' => true,
              ),
              'NotificationReceivers' => 
              array (
                'description' => '告警通知接收方，支持多值。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '告警通知接收方。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'ReceiverType' => 
                    array (
                      'description' => '接收方类型。

- 当告警通知渠道为邮件、电话、短信时，接收方类型选择阿里云用户ID。
- 当告警通知渠道为钉钉时，接收方类型选择钉钉token。',
                      'type' => 'string',
                      'required' => false,
                      'enumValueTitles' => 
                      array (
                        'DingToken' => '钉钉token',
                        'AliyunUid' => '阿里云用户ID',
                      ),
                      'example' => 'DingToken',
                    ),
                    'ReceiverValues' => 
                    array (
                      'description' => '接收方取值列表。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'description' => '接收方取值。

- 当接收方类型为阿里云ID时，接收方取值为具体阿里云用户ID。
- 当接收方类型为钉钉token时，接收方取值为具体钉钉token值。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'token1',
                      ),
                      'required' => false,
                    ),
                  ),
                  'required' => false,
                ),
                'required' => true,
              ),
              'InhibitionInterval' => 
              array (
                'description' => '告警抑制间隔时长，单位分钟，默认5分钟。',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'example' => '5',
              ),
            ),
            'required' => true,
          ),
        ),
        5 => 
        array (
          'name' => 'Enabled',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '告警规则是否启用，默认不开启。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '响应。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'A6C6B486-E3A2-5D52-9E76-D9380485D946',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"A6C6B486-E3A2-5D52-9E76-D9380485D946\\"\\n}","errorExample":""},{"type":"xml","example":"<UpdateDIAlarmRuleResponse>\\n    <RequestId>A6C6B486-E3A2-5D52-9E76-D9380485D946</RequestId>\\n</UpdateDIAlarmRuleResponse>","errorExample":""}]',
      'title' => '更新数据集成新版任务告警规则',
      'description' => '当您的任务同步类型中包含实时同步时，支持设置告警规则。
告警规则更新为全字段更新，不支持部分字段更新。',
    ),
    'QueryPublicModelEngine' => 
    array (
      'summary' => '使用FML语句查询数据建模引擎的信息。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Text',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '输入查询引擎信息的FML语句，详情请参见[使用FML语句配置并管理数据表](~~298128~~)。
当前仅支持show语句。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'show dim tables',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间管理页面获取ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '是调用FML语句查询返回的结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '4CFB2DED-7D9B-4C42-B4AA-CFF4991DFFF4',
              ),
              'ReturnValue' => 
              array (
                'description' => '是通过FML语句查询返回的列表信息。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回通过FML语句查询的数据建模引擎信息的结果。',
                  'type' => 'object',
                  'example' => '[{ "gmtModified": 最后修改时间,"code": "表名","creatorId": "创建人ID","creatorName": "创建人名称","modifierId": "修改人ID","gmtCreate": 创建时间,"type": 表类型,"ownerId": "负责人ID","uuid": "系统ID","businessUnitUuid": "业务板块ID","detailType": "表二级类型","ownerName": "负责人名称","name": "表显示名","modifierName": "最后修改人名称","businessProcessUuid": "业务过程ID" 	}]',
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Valid.FML.NoPermission',
            'errorMessage' => 'You are not authorized to access the project resources.',
          ),
          1 => 
          array (
            'errorCode' => 'Valid.FML.OnlySupportQueryStatement',
            'errorMessage' => 'Only FML query statement is supported.',
          ),
          2 => 
          array (
            'errorCode' => 'Valid.FML.ProjectNotExist',
            'errorMessage' => 'The project does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'Valid.FML.StatementNotValid',
            'errorMessage' => 'The FML statement is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'Valid.FML.ProductExpired',
            'errorMessage' => '智能数据建模产品购买已到期',
          ),
          5 => 
          array (
            'errorCode' => 'Valid.FML.ProductNotActivated',
            'errorMessage' => '智能数据建模产品未开通',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Execute.FML.ProcessError',
            'errorMessage' => 'Failed to execute FML statement.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"4CFB2DED-7D9B-4C42-B4AA-CFF4991DFFF4\\",\\n  \\"ReturnValue\\": [\\n    {\\n      \\"test\\": \\"test\\",\\n      \\"test2\\": 1\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<QueryPublicModelEngineResponse>\\n    <RequestId>4CFB2DED-7D9B-4C42-B4AA-CFF4991DFFF4</RequestId>\\n    <ReturnValue/>\\n</QueryPublicModelEngineResponse>","errorExample":""}]',
      'title' => '查询数据建模引擎的信息',
      'description' => '- 每次调用该接口均需使用FML语句请求获取查询信息。
- 除了数仓分层、业务过程和数据域查询外，其他引擎信息查询均可使用分页查询方式。您可以在FML语句结尾增加offset
 num limit num语句，表示查询信息时的偏移量及每次返回的页数。目前偏移量取值仅支持为页数的倍数。
- 每次调用该接口时，最多返回1000条数据。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => '## 返回结果说明
### 查询数仓分层使用的FML语句如下。
show layers;  
输出参数
| 参数名    | 参数类型 | 示例值  | 描述信息   |
| ---------------- | -------- | ---------- | ------------ |
| code         | String   | dws        | 数仓分层编码 |
| englishName  | String   | dws        | 数仓分层英文名 |
| name         | String   | 汇总层  | 数仓分层中文名 |
| ownerId      | String   | 0123456    | 负责人ID    |
| ownerName    | String   | 甲乙丙丁 | 负责人名称 |
| description  | String   | 汇总层描述 | 备注         |
| uuid         | String   | obj-123456 | 对象唯一标识 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId    | String   | 0123456    | 创建人BaseId |
| creatorName  | String   | 甲乙丙丁 | 创建人名称 |
| modifierId   | String   | 0123456    | 修改人BaseId |
| modifierName | String   | 甲乙丙丁 | 修改人名称 |


### 查询数据域使用的FML语句如下。
 show domains;  
输出参数
| 参数名        | 参数类型 | 示例值  | 描述信息 |
| ---------------- | -------- | ---------- | ------------ |
| code             | String   | member     | 数据域编码 |
| englishName      | String   | member     | 数据域英文名 |
| name             | String   | 会员     | 数据域中文名 |
| ownerId          | String   | 0123456    | 负责人ID  |
| ownerName        | String   | 甲乙丙丁 | 负责人名称 |
| businessUnitCode | String   | bu-123456  | 业务板块编码 |
| description      | String   | 会员域备注 | 备注       |
| uuid             | String   | obj-123456 | 对象唯一标识 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId        | String   | 0123456    | 创建人BaseIdID |
| creatorName      | String   | 甲乙丙丁 | 创建人名称 |
| modifierId       | String   | 0123456    | 修改人BaseIdID |
| modifierName     | String   | 甲乙丙丁 | 修改人名称 |
 

### 查询业务过程使用的FML语句如下。

- 无条件列表查询：show business_processes;
- 根据code查询业务过程：show business_processes where code=\'bp-code\';  
- 根据数据域查询业务过程：show business_processes where data_domain=\'dm-code\';     
 
输出参数

| 参数名      | 参数类型 | 示例值      | 描述信息                    |
| -------------- | -------- | -------------- | ------------------------------- |
| code           | String   | bp-123456      | 业务过程编码              |
| englishName    | String   | pay            | 业务过程英文名           |
| name           | String   | 付款         | 业务过程中文名           |
| dataDomainCode | String   | trade          | 所属数据域编码           |
| dataDomainName | String   | 交易         | 所属数据域中文名        |
| dataDomainUuid | String   | dm-123456      | 所属数据域UUID             |
| ownerId        | String   | 0123456        | 负责人BaseId                |
| ownerName      | String   | 甲乙丙丁   | 负责人名称                 |
| description    | String   | 付款         | 备注                          |
| source         | Integer  | 2              | 创建来源。可取值如下：<br>1：系统创建<br>2：用户创建|
| uuid           | String   | obj-123456     | 对象唯一标识              |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId      | String   | creatorId      | 创建人BaseId          |
| creatorName    | String   | 甲乙丙丁   | 创建人名称                 |
| modifierId     | String   | 0123456        | 修改人BaseId            |
| modifierName   | String   | 甲乙丙丁   | 修改人名称                 |

### 查询业务分类使用的FML语句如下。

```
 show business_categories;
 show business_categories where code=\'code\';
 show business_categories where keyword=\'keyword\';
 show business_categories where uuid=\'uuid\';   
```

输出参数
| 参数名         | 参数类型       | 示例值            | 描述信息         |
| ----------------- | ------------------ | -------------------- | -------------------- |
| categoryDetail    | DirectoryDetailDTO | {"uuid": "cate_uuid", "code": "trd", "name": "交易"} | 业务分类详细信息 |
|   name            | String             | 电商               | 目录名称         |
| detailType        | String             | DICT                 | 目录子类型      |
|  parentUuid       | String             | dy-123456            | 父级目录UUID     |
|   description     | String             | 描述信息         | 目录描述         |
|     code          | String             | ind                  | 业务分类code     |
| dataDomains       | List           | [{"uuid": "domain1", "code": "trd", "name": "交易域"}] | 业务分类下挂靠数据域 |
|  ownerId          | String             | 0123456              | 负责人BaseId          |
| ownerName         | String             | 甲乙丙丁         | 负责人名称      |
|  businessUnitCode | String             | bu-123456            | 业务板块编码   |
|   description     | String             | 描述信息      | 目录描述             |
| categoryPath      | String             | tm.ind               | 业务分类path     |

### 查询数据集市使用的FML语句如下。
 show markets;
输出参数
| 参数名         | 参数类型       | 示例值            | 描述信息         |
| ----------------- | ------------------ | -------------------- | -------------------- |
| categoryDetail    | DirectoryDetailDTO | {"uuid": "cate_uuid", "code": "trd", "name": "交易"} | 数据集市详细信息 |
|   name            | String             | 电商               | 目录名称         |
| detailType        | String             | DICT                 | 目录子类型      |
|  parentUuid       | String             | dy-123456            | 父级目录UUID     |
|   description     | String             | 描述信息         | 目录描述         |
|   code          | String             | ind                  | 业务分类code     |
|  subDetailType          | String             | common                  | 目录子类型细分类型     |
|  auditDTOList          | List        | [{"baseId":"123","showName":"test"}]     | 审核人员列表     |
|  code             | String             | member               | 数据域编码      |
|  englishName      | String             | member               | 数据域英文名   |
|  name             | String             | 会员               | 数据域中文名   |
|  ownerId          | String             | 0123456              | 负责人BaseId         |
| ownerName         | String             | 甲乙丙丁         | 负责人名称      |
|  businessUnitCode | String             | bu-123456            | 业务板块编码   |
|   description     | String             | 会员域备注      | 备注               |
|  auditDTOList          | List        | [{"baseId":"123","showName":"test"}]     | 审核人员列表     |
| categoryPath      | String             | tm.ind               | 业务分类path     |

### 查询主题域使用的FML语句如下。
 show subjects;
输出参数
| 参数名         | 参数类型       | 示例值            | 描述信息         |
| ----------------- | ------------------ | -------------------- | -------------------- |
| categoryDetail    | DirectoryDetailDTO | {"uuid": "cate_uuid", "code": "trd", "name": "交易"} |主题详细信息 |
|   name            | String             | 电商               | 目录名称         |
| detailType        | String             | DICT                 | 目录子类型      |
|  parentUuid       | String             | dy-123456            | 父级目录UUID     |
|   description     | String             | 描述信息         | 目录描述         |
|   code          | String             | ind                  | 业务分类code     |
|  subDetailType          | String             | common                  | 目录子类型细分类型     |
|  auditDTOList          | List        | [{"baseId":"123","showName":"test"}]     | 审核人员列表     |
|  code             | String             | member               | 数据域编码      |
|  englishName      | String             | member               | 数据域英文名   |
|  name             | String             | 会员               | 数据域中文名   |
|  ownerId          | String             | 0123456              | 负责人BaseId      |
| ownerName         | String             | 甲乙丙丁         | 负责人名称      |
|  businessUnitCode | String             | bu-123456            | 业务板块编码   |
|   description     | String             | 会员域备注      | 备注               |
|  auditDTOList          | List        | [{"baseId":"123","showName":"test"}]     | 审核人员列表     |
| categoryPath      | String             | tm.ind               | 业务分类path     |

###  查询数据标准集使用的FML语句如下。
 show dict groups;
输出参数
| 参数名    | 参数类型 | 示例值  | 描述信息 |
| ------------ | -------- | ---------- | ------------ |
| name         | String   | 电商     | 目录名称 |
| detailType   | String   | DICT       | 目录子类型 |
| parentUuid   | String   | dy-123456  | 父级目录UUID |
| description  | String   | 描述信息 | 目录描述 |
| code         | String   | ind        | 业务分类code |
| uuid         | List     | obj-123456 | 对象唯一标识 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId    | String   | 0123456    | 创建人BaseId|
| creatorName  | String   | 甲乙丙丁 | 创建人名称 |
| modifierId   | String   | 0123456    | 修改人BaseId |
| modifierName | String   | 甲乙丙丁 | 修改人名称 |

### 查询数据标准使用的FML语句如下。
 show dicts;
输出参数
| 参数名          | 参数类型 | 示例值    | 描述信息 |
| ------------------ | -------- | ------------ | ------------ |
| code               | String   | shop_type   | 英文缩写    |
| englishName        | String   | shop type | 英文名称 |
| name               | String   | 店铺类型 | 中文名称 |
| no                 | String   | SN00001| 标准编号 |
| dataType           | String   | STRING| 数据类型 |
| length             | Integer  | 10   | 列长度    |
| numericalPrecision | Integer  | 2    | 列精度    |
| notNull            | Boolean  | false | 是否不为空 |
| defaultValue       | String   | 旗舰店    | 默认值    |
| parentNo           | String   | SN0001 | 父级标准编号 |
| parentName         | String   | 店铺 | 父级标准名称 |
| codeTableNo        | String   | shop_type | 引用码表编号 |
| codeTableName      | String   | 店铺类型码表 | 引用码表名称 |
| codeTableUuid      | String   | tb-0001 | 引用码表UUID |
| directoryUuid      | String   | 所属目录UUID | 所属目录UUID |
| directoryName      | String   | 店铺目录 | 所属目录名称 |
| description        | String   | remark       | 备注       |
| uuid               | String   | obj-123456   | 对象唯一标识 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId          | String   | 0123456      | 创建人BaseId |
| creatorName        | String   | 甲乙丙丁 | 创建人名称 |
| modifierId         | String   | 0123456      | 修改人BaseId |
| modifierName       | String   | 甲乙丙丁 | 修改人名称 |

###  查询标准代码使用的FML语句如下。
 show code tables;
输出参数
| 参数名    | 参数类型 | 示例值 |  描述信息 |
| ------------ | -------- | ---------- | ------------ |
| code         | String   | shop_type  |代码编码    |
| name         | String   | 店铺类型 | 代码名称 |
| extendName   | String   | shop type | 英文名称 |
| description  | String   | remark     | 描述       |
| uuid         | String   | obj-123456 | 对象唯一标识 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId    | String   | 0123456    | 创建人BaseId |
| creatorName  | String   | 甲乙丙丁 | 创建人名称 |
| modifierId   | String   | 0123456    | 修改人BaseId|
| modifierName | String   | 甲乙丙丁 | 修改人名称 |

### 查询度量单位组使用的FML语句如下。
 show measure_unit groups;
输出参数
| 参数名    | 参数类型 | 示例值 | 描述信息 |
| ------------ | -------- | ---------- | ------------ |
| name         | String   | 电商     | 目录名称|
| detailType   | String   | DICT       | 目录子类型 |
| parentUuid   | String   | dy-123456  | 父级目录UUID |
| description  | String   |描述信息 | 目录描述 |
| code         | String   | ind       | 分类code |
| uuid         | String   | obj-123456 | 对象唯一标识 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId    | String   | 0123456    | 创建人BaseId |
| creatorName  | String   | 甲乙丙丁 | 创建人名称 |
| modifierId   | String   | 0123456    | 修改人BaseId |
| modifierName | String   | 甲乙丙丁 | 修改人名称 |

###  查询度量单位使用的FML语句如下。
 show measure_units;
输出参数
| 参数名     | 参数类型 | 示例值 | 描述信息 |
| ------------- | -------- | ------------ | ------------ |
| code          | String   | yuan    | 英文缩写    |
| englishName   | String   | RMB | 英文名称 |
| name          | String   | 元 | 列中文名称 |
| directoryUuid | String   | di-0001 | 单位分组UUID |
| directoryName | String   | 货币 | 单位分组名称 |
| description   | String   | remark       | 备注       |
| uuid          | String   | obj-123456   | 对象唯一标识 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId     | String   | 0123456      | 创建人BaseId |
| creatorName   | String   | 甲乙丙丁 | 创建人名称 |
| modifierId    | String   | 0123456      | 修改人BaseId |
| modifierName  | String   | 甲乙丙丁 | 修改人名称 |

### 查询标准代码内容使用的FML语句如下。
 show codes from code_table;
输出参数
| 参数名         | 参数类型 | 示例值     |  描述信息   |
| ----------------- | -------- | ---------------- | ---------------- |
| codeContent       | String   | 0  | code内容值    |
| extendNameContent | String   | female | 扩展标准代码名称 |
| nameContent       | String   | 女性 | 标准代码名称 |
| description       | String   | remark | 标准代码描述 |
| uuid              | String   | obj-123456       | 对象唯一标识 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId         | String   | 0123456          | 创建人BaseId  |
| creatorName       | String   | 甲乙丙丁     | 创建人名称  |
| modifierId        | String   | 0123456          | 修改人BaseId  |
| modifierName      | String   | 甲乙丙丁     | 修改人名称  |

###  查询命名词典使用的FML语句如下。
show naming dicts;
输出参数
| 参数名    | 参数类型 | 示例值 |  描述信息 |
| ------------ | -------- | ---------- | ------------ |
| code         | String   | shop  | 英文缩写    |
| creatorId        | String   | 0123456 | 创建人BaseId |
| creatorName   | String   | 甲乙丙丁 | 创建人名称 |
| extendName  | String   | shop    | 英文名称 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| modifierId  | String     | 0123456 | 修改人BaseId |
| modifierName  | String     | 甲乙丙丁 | 修改人名称 |
| name    | String   | 店铺   | 中文名称 |
| ownerId  | String   | 0123456 | 负责人BaseId |
| ownerName   | String   | 甲乙丙丁   | 负责人名称 |
| uuid | String   | obj-123456 | 对象唯一标识 |

### 查询表信息使用的FML语句如下。
 show tables;
输出参数
| 参数名              | 参数类型 | 示例值 | 描述信息                                |
| ---------------------- | -------- | ---------- | ------------------------------------------ |
| code                   | String   | dim_shop   | 表编码                                  |
| name                   | String   | 店铺维度表 | 表中文名                               |
| type                   | Integer  | 1          | 表类型。取值如下：<br>0：事实表<br>1：维度表<br>3：汇总表<br>4：应用表<br>5：贴源表<br>6：维度    |
| detailType             | String   | normal     | 表具体类型。可取值如下：<br>普通维度<br>枚举维度<br>事务事实 |
| businessProcessUuid    | String   | bp-123456  | 业务过程UUID                           |
| businessUnitUuid       | String   | bu-123456  | 业务板块UUID                           |
| dataWarehouseLayerUuid | String   | ly-123456  | 数仓层UUID                              |
| businessCategoryUuid   | String   | bc-123456  | 业务分类UUID                           |
| ownerId                | String   | 0123456    | 负责人BaseId                           |
| ownerName              | String   | 甲乙丙丁 | 负责人名称                            |
| description            | String   | 店铺表备注 | 备注                                     |
| config                 | String   | json字符串 | 拓展属性配置                         |
| lifeCycle              | Integer  | 365        | 表生命周期                            |
| uuid                   | String   | obj-123456 | 对象唯一标识                         |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId              | String   | 0123456    | 创建人BaseId                        |
| creatorName            | String   | 甲乙丙丁 | 创建人名称                            |
| modifierId             | String   | 0123456    | 修改人BaseId                        |
| modifierName           | String   | 甲乙丙丁 | 修改人名称                            |

### 查询维度表使用的FML语句如下。
 show dim tables;  
输出参数
| 参数名              | 参数类型 | 示例值  | 描述信息                             |
| ---------------------- | -------- | ---------- | ---------------------------------------- |
| code                   | String   | dim_shop   | 表编码                                |
| name                   | String   | 店铺维度表 | 表中文名                             |
| type                   | Integer  | 1          | 表类型。可取值如下：<br>0：事实表<br>1：维度表  |
| detailType             | String   | normal     | 表具体类型。可取值如下：<br>普通维度<br>枚举维度<br>事务事实 |
| businessProcessUuid    | String   | bp-123456  | 业务过程UUID                         |
| businessUnitUuid       | String   | bu-123456  | 业务板块UUID                         |
| dataWarehouseLayerUuid | String   | ly-123456  | 数仓层UUID                            |
| businessCategoryUuid   | String   | bc-123456  | 业务分类UUID                         |
| ownerId                | String   | 0123456    | 负责人BaseId                     |
| ownerName              | String   | 甲乙丙丁 | 负责人名称                             |
| description            | String   | 店铺表备注 | 备注                                   |
| config                 | String   | json字符串 | 拓展属性配置                       |
| lifeCycle              | Integer  | 365        | 表生命周期                          |
| uuid                   | String   | obj-123456 | 对象唯一标识                       |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId              | String   | 0123456    | 创建人BaseId                          |
| creatorName            | String   | 甲乙丙丁 | 创建人名称                          |
| modifierId             | String   | 0123456    | 修改人BaseId                          |
| modifierName           | String   | 甲乙丙丁 | 修改人名称                          |

### 查询事实表信息使用的FML语句如下。
 show fact tables;
输出参数
| 参数名              | 参数类型 | 示例值  | 描述信息                             |
| ---------------------- | -------- | ---------- | ---------------------------------------- |
| code                   | String   | dim_shop   | 表编码                                |
| name                   | String   | 店铺维度表 | 表中文名                             |
| type                   | Integer  | 1          | 表类型。可取值如下：<br>0：事实表<br>1：维度表  |
| detailType             | String   | normal     | 表具体类型。可取值如下：<br>普通维度<br>枚举维度<br>事务事实 |
| businessProcessUuid    | String   | bp-123456  | 业务过程UUID                         |
| businessUnitUuid       | String   | bu-123456  | 业务板块UUID                         |
| dataWarehouseLayerUuid | String   | ly-123456  | 数仓层UUID                            |
| businessCategoryUuid   | String   | bc-123456  | 业务分类UUID                         |
| ownerId                | String   | 0123456    | 负责人BaseId                         |
| ownerName              | String   | 甲乙丙丁 | 负责人名称                          |
| description            | String   | 店铺表备注 | 备注                                   |
| config                 | String   | json字符串 | 拓展属性配置                       |
| lifeCycle              | Integer  | 365        | 表生命周期                          |
| uuid                   | String   | obj-123456 | 对象唯一标识                       |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId              | String   | 0123456    | 创建人BaseId                       |
| creatorName            | String   | 甲乙丙丁 | 创建人名称                          |
| modifierId             | String   | 0123456    | 修改人BaseId                          |
| modifierName           | String   | 甲乙丙丁 | 修改人名称                          |

### 查询汇总表使用的FML语句如下。
 show dws tables;
输出参数
| 参数名              | 参数类型 | 示例值    | 描述信息                               |
| ---------------------- | -------- | ------------ | ------------------------------------------ |
| dataDomainUuid         | String   | dm-12345     | 数据域UUID                            |
| dataDomainCode         | String   | member       | 数据域Code                              |
| dataDomainName         | String   | 会员       | 数据域名字                            |
| timePeriods            | List     | [{"uuid": "uuid", "code": "code", "name": "中文名称"}] | 时间周期列表                         |
|  uuid                  | String   | obj-123456 | 对象唯一标识                         |
|  code                  | String   | dws_001 | 表名                               |
|  name                  | String   | 支付汇总表 | 表中文名称                               |
| adjuncts               | List     | [{"uuid": "uuid", "code": "code", "name": "中文名称"}] | 修饰词列表                            |
| dimensions             | List     | [{"uuid": "uuid", "code": "code", "name": "中文名称"}] | 粒度                               |
|     bizEntityUuid      | String   | dim-123456   | 业务对象UUID                           |
| bizEntityCode          | String   | dim_shop     | 业务对象英文缩写                   |
|   bizEntityName        | String   | 店铺表    | 业务对象中文名称                   |
|     relUuid            | String   | dim_a-123456 | 关联维度UUID                          |
| type                   | Integer  | 3          | 表类型。取值为：3（汇总表）  |
| detailType             | String   | dws_normal    | 表具体类型。可取值如下：<br>dws_normal：普通汇总表<br>dws_advanced：轻度汇总表 |
| businessProcessUuid    | String   | bp-123456    | 业务过程UUID                           |
| businessUnitUuid       | String   | bu-123456    | 业务板块UUID                           |
| dataWarehouseLayerUuid | String   | ly-123456    | 数仓层UUID                              |
| businessCategoryUuid   | String   | bc-123456    | 业务分类UUID                           |
| ownerId                | String   | 0123456      | 负责人BaseId                            |
| ownerName              | String   | 甲乙丙丁 | 负责人名称                            |
| description            | String   | 店铺表备注 | 备注                                     |
| config                 | String   | json字符串 | 拓展属性配置                         |
| lifeCycle              | Integer  | 365          | 表生命周期                            |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId              | String   | 0123456      | 创建人BaseId                          |
| creatorName            | String   | 甲乙丙丁 | 创建人名称                            |
| modifierId             | String   | 0123456      | 修改人BaseId                            |
| modifierName           | String   | 甲乙丙丁 | 修改人名称                            |

### 查询应用表使用的FML语句如下。
 show ads tables;
输出参数
| 参数名              | 参数类型 | 示例值    | 描述信息                               |
| ---------------------- | -------- | ------------ | ------------------------------------------ |
| dataDomainUuid         | String   | dm-12345     | 数据域UUID                              |
| dataDomainCode         | String   | member       | 数据域Code                              |
| dataDomainName         | String   | 会员       | 数据域名称                            |
| timePeriods            | List     | [{"uuid": "uuid", "code": "code", "name": "中文名称"}] | 时间周期列表                         |
|  uuid                  | String   | obj-123456 | 对象唯一标识                         |
|  code                  | String   | dws_001 |表名                               |
|  name                  | String   | 支付汇总表 | 表中文名称                               |
| adjuncts               | List     | [{"uuid": "uuid", "code": "code", "name": "中文名称"}] | 修饰词列表                            |
| dimensions             | List     | [{"uuid": "uuid", "code": "code", "name": "中文名称"}] |粒度                            |
|  bizEntityUuid      | String   | dim-123456   | 业务对象UUID                           |
| bizEntityCode          | String   | dim_shop     | 业务对象英文缩写                   |
|   bizEntityName        | String   | 店铺表    | 业务对象中文名称                   |
|   relUuid            | String   | dim_a-123456 | 关联维度UUID                          |
| type                   | Integer  | 1          | 表类型。可取值如下：<br>0：事实表<br>1：维度表  |
| detailType             | String   | normal     | 表具体类型。可取值如下：<br>普通维度<br>枚举维度<br>事务事实 |
| businessProcessUuid    | String   | bp-123456    | 业务过程UUID                           |
| businessUnitUuid       | String   | bu-123456    | 业务板块UUID                           |
| dataWarehouseLayerUuid | String   | ly-123456    | 数仓层UUID                              |
| businessCategoryUuid   | String   | bc-123456    | 业务分类UUID                           |
| ownerId                | String   | 0123456      | 负责人BaseId                           |
| ownerName              | String   | 甲乙丙丁 | 负责人名称                            |
| description            | String   | 店铺表备注 | 备注                                     |
| config                 | String   | json字符串 | 拓展属性配置                         |
| lifeCycle              | Integer  | 365          | 表生命周期                            |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId              | String   | 0123456      | 创建人BaseId                            |
| creatorName            | String   | 甲乙丙丁 | 创建人名称                            |
| modifierId             | String   | 0123456      | 修改人BaseId                         |
| modifierName           | String   | 甲乙丙丁 | 修改人名称                            |

### 查询表信息同时返回字段信息使用的FML语句如下。
 show full tables;
输出参数
| 参数名      | 参数类型 | 示例值  | 描述信息 |
| -------------- | -------- | ---------- | ---------- |
| tableUuid      | String   | tb-123456  | 表UUID    |
| tableCode      | String   | dim_shop   | 表编码  |
| tableName      | String   | 店铺表  | 表名称  |
| columnCode     | String   | shop_id    | 列编码  |
| columnName     | String   | 店铺Id   | 列名称  |
| columnUuid     | String   | col-123456 | 列UUID    |
| columnType     | String   | STRING     | 列数据类型 |
| columnCategory | String   | ATTRIBUTE  | 列类别  |

### 查询列信息使用的FML语句如下。
 show columns from table_code;
输出参数
| 参数名           | 参数类型 | 示例值    | 描述信息 |
| ------------------- | -------- | ------------ | ------------ |
| code                | String   | seller_id    | 列编码    |
| name                | String   | 卖家Id     | 列中文名 |
| dataType            | String   | STRING       | 数据类型 |
| type                | String   | ATTRIBUTE    | 字段类型 |
| isPrimaryKey        | Boolean  | false        | 是否主键 |
| isPartitionKey      | Boolean  | false        | 是否分区键 |
| partitionOrder      | Integer  | 1            | 分区键顺序 |
| notNull             | Boolean  | true         | 是否非空 |
| dataDictionaryUuid  | String   | member_id    | 数据字典编码 |
| dataDictionaryCode  | String   | 会员Id     | 数据字典名称 |
| codeTableUuid       | String   | cd-123456    | 关联码表UUID |
| codeTableCode       | String   | sex          | 关联码表编码 |
| codeTableName       | String   | 性别       | 关联码表名称 |
| measureUnitCode     | String   | percent      | 关联单位编码 |
| measureUnitName     | String   | 分          | 关联单位名称 |
| sourceProjectName   | String   | autotest     | 来源项目名称 |
| sourceTableCode     | String   | dict         | 来源表编码 |
| sourceColumnCode    | String   | age          | 来源字段编码 |
| sourceRelationTag   | String   | label        | 冗余关系标签 |
| description         | String   | 字段备注 | 备注       |
| orderId             | String   | 1            | 字段顺序 |
| columnGroupName     | Integer  | col_group_1 | 所属字段组 |
| config              | String   | json字符串 | 拓展属性配置 |
| uuid                | String   | obj-123456   | 对象唯一标识 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId           | String   | 0123456      | 创建人BaseId |
| creatorName         | String   | 甲乙丙丁 | 创建人名称 |
| modifierId          | String   | 0123456      | 修改人BaseId |
| modifierName        | String   | 甲乙丙丁 | 修改人名称 |

### 查询修饰词使用的FML语句如下。
 show adjuncts;
输出参数
| 参数名         | 参数类型       | 示例值                                      | 描述信息                                   |
| ----------------- | ------------------ | ---------------------------------------------- | ---------------------------------------------- |
| businessUnitUuid  | String             | bu-123456                                      | 业务板块UUID                               |
| businessUnitCode  | String             | test_bu                                        | 业务板块CODE                               |
| businessUnitName  | String             | 测试板块                                   | 业务板块NAME                               |
| dataDomainUuid    | String             | dt-123456                                      | 数据域UUID                                  |
| dataDomainCode    | String             | member                                         | 数据域CODE                                  |
| dataDomainName    | String             | 会员域                                      | 数据域NAME                                  |
| categoryUuid      | String             | cy-123456                                      | 业务分类UUID                              |
| categoryCode      | String             | trade                                          | 业务分类CODE                               |
| categoryName      | String             | 电商                                         | 业务分类NAME                              |
| type              | AdjunctTypeEnum    | DIM_VAL                                        | 修饰词类型                                |
| code              | String             | beauty                                         | 英文缩写                                   |
| name              | String             | 美妆                                         | 中文名称                                   |
| extendName        | String             | beauty                                         | 英文名称                                   |
| description       | String             | 美妆描述                                   | 描述                                         |
| bizExpression     | String             | 用于报表统计口径                       | 业务口径                                   |
| expression        | String             | beauty = 1                                     | 修饰词语义表达式                       |
|   bizEntityUuid   | String             | dim-123456                                     | 业务对象UUID                               |
|     bizEntityCode | String             | dim_shop                                       | 业务对象英文缩写                       |
|    bizEntityName  | String             | 店铺表                                      | 业务对象中文名称                       |
|    relUuid        | String             | dim_a-123456                                   | 关联维度UUID                              |
| ownerId           | String             | 0123456                                        | 负责人BaseId                               |
| ownerName         | String             | 甲乙丙丁                                   | 负责人名称                                |
| isDeleted         | DeleteTagEnum      | NO                                             | 是否被删除                                |
| uuid              | String             | obj-123456                                     | 对象唯一标识                             |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId         | String             | 0123456                                        | 创建人BaseId                              |
| creatorName       | String             | 甲乙丙丁                                   | 创建人名称                                |
| modifierId        | String             | 0123456                                        | 修改人BaseId                            |
| modifierName      | String             | 甲乙丙丁                                   | 修改人名称                                |

### 查询时间周期使用的FML语句如下。
 show time_periods;
输出参数
| 参数名        | 参数类型           | 示例值                                      | 描述信息     |
| ----------------- | ------------------ | ---------------------------------------------- | ---------------------------------------------- |
| businessUnitUuid | String                 | bu-123456                                      | 所属的业务板块  |
| businessUnitCode | String                 | test_bu                                        | 业务板块CODE     |
| type             | TimePeriodTypeEnum     | DAY                                            | 时间周期类型  |
| typeName         | String                 | 天                                            | 时间周期类型名称       |
| code             | String                 | 1d                                             | 英文缩写    |
| name             | String                 | 1天                                           | 中文名称|
| extendName       | String                 | 1d                                             | 英文名称|
| description      | String                 | 时间周期描述                             | 描述  |
| isDeleted        | DeleteTagEnum          | NO                                             | 是否被删除 |
| timeBegin        | String                 | start_expression                               | 开始时间表达式|
| timeEnd          | String                 | end_expression                                 | 结束时间表达式|
| gmtCreate        | TimeStamp                  | 1633885261000                                  | 创建时间|
| gmtModified      | TimeStamp                  | 1633885261000                                  | 修改时间 |
| modifierId       | String                 | 0123456                                        | 修改人BaseId  |
| modifierName     | String                 | 甲乙丙丁                                   | 修改人名称  |
| ownerId          | String                 | 0123456                                        | 负责人BaseId |
| ownerName        | String                 | 甲乙丙丁                                   | 负责人名称 |
| beginOffset      | Integer                | 1                                              | 开始周期偏移量  |
| endOffset        | Integer                | 1                                              | 结束周期偏移量|
| firstDay         | Integer                | 1  |周期第一天（必填场景：type in[WEEK, MONTH, QUARTER, YEAR]）,"+ "取值范围:"+ "WEEK（初始星期，周日：1, 周一：2, 周二：3, 周三：4, 周四：5, 周五：6, 周六：7）, "+ "MONTH（初始号，月初：1, 月末：99, 2号到27号：[2~27]）, "+ "QUARTER（初始月，1月到12月：[0~11]）, "+ "YEAR（初始月，1月到12月：[0~11]）|
| uuid             | String                 | obj-123456                                     | 对象唯一标识 |
| creatorId        | String                 | 0123456                                        | 创建人BaseId |
| creatorName      | String                 | 甲乙丙丁                                   | 创建人名称|

### 查询原子指标使用的FML语句如下。
 show atomic indicators;
输出参数  
| 参数名           | 参数类型        | 示例值    | 描述信息     |
| ------------------- | ------------------- | ------------ | ---------------- |
| dataDistinct        | YesOrNoEnum         | YES          | 数据是否需要去重。可取值如下：<br>YES<br>NO  |
| aggFunctionType     | AggFunctionEnum     | SUM          | 指标聚合函数类型。可取值如下：<br>SUM<br>COUNT<br>AVG<br>MAX<br>MIN<br>RATE<br>RANK<br>UNDEFINED|
| calExpression       | String              | price        | 计算口径(code) |
| dataType            | DataTypeNameEnum    | TINYINT      | 数据类型。可取值为：TINYINT、SMALLINT、INT、BIGINT、BINARY、FLOAT、DOUBLE、DECIMAL、VARCHAR、CHAR、STRING、DATE、DATETIME、TIMESTAMP、BOOLEAN、ARRAY、MAP、STRUCT、JSON     |
| dataRound           | String              | N            | 数据精度。可取值如下：<br>N<br>M |
| dataUnitUuid        | String              | du-123456    | 指标单位UUID |
| dataUnitCode        | String              | percent      | 指标单位CODE  |
| dataUnitName        | String              | 分          | 指标单位名称  |
| bizExpression       | String              | 支付金额汇总 | 业务口径     |
| dataRollUpType      | String     | AGG_FUNCTION | 数据上卷方式。可取值如下：<br>AGG_FUNCTION<br>SUM_THEN_RATE<br>RATE_THEN_AVG<br>NOT_SUPPORT |
| businessUnitUuid    | String              | bu-0001 | 业务板块UUID |
| businessUnitCode    | String              | project_code| 业务板块Code |
| businessProcessUuid | String              | di-0002| 业务过程UUID |
| businessProcessCode | String              | pay| 业务过程Code|
| businessProcessName | String              | 支付 | 业务过程Name |
| dataDomainUuid      | String              | di-0003 | 数据域UUID    |
| dataDomainCode      | String              | trd| 数据域Code   |
| dataDomainName      | String              | 交易 | 数据域Name    |
| categoryUuid        | String              | di-0001 | 业务分类UUID |
| categoryCode        | String              | tb | 业务分类Code |
| categoryName        | String              | 淘宝| 业务分类Name |
| type                |String  | ATOMIC | 指标类型。可取值如下：<br> ATOMIC<br> DERIVATIVE<br> DERIVATIVE_COMPOSITE  |
| code                | String              | pay_amt | 英文缩写     |
| name                | String              |支付金额 | 中文名称     |
| extendName          | String              | pay amount | 英文名称     |
| description         | String              | remark      | 描述           |
| status              | String   | NORMAL | 指标状态。可取值如下：<br>DRAFT<br>DEV<br>NORMAL      |
| ownerId             | String              | 0001 | 负责人BaseId  |
| ownerName           | String              | 负责人姓名 | 负责人名称  |
| isDeleted           | DeleteTagEnum       | NO           | 是否被删除。可取值如下：<br>YES <br>NO|
| uuid             | String                 | obj-123456                                     | 对象唯一标识 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId        | String                 | 0123456                                        | 创建人BaseId  |
| creatorName      | String                 | 甲乙丙丁                                   | 创建人名称  |
| modifierId       | String                 | 0123456                                        | 修改人BaseId |
| modifierName     | String                 | 甲乙丙丁                                   | 修改人名称       |

### 查询派生指标使用的FML语句如下。
 show derivative indicators;
输出参数
| 参数名              | 参数类型        | 示例值          | 描述信息       |
| ---------------------- | ------------------- | ------------------ | ------------------ |
| timePeriodUuid         | String              | tp-0001  | 时间周期UUID  |
| timePeriodCode         | String              | 1d | 时间周期英文缩写 |
| timePeriodName         | String              | 近1天 | 时间周期中文名称 |
| adjunctUuids           | List                |  ["adj-001"]| 修饰词UUID列表 |
| adjunctCodes           | List                |["male"]| 修饰词英缩写列表 |
| adjunctNames           | List                | 男性 | 修饰词中文名称列表 |
| atomicIndicatorUuid    | String              | ind-a-0001 | 原子指标UUID   |
| atomicIndicatorCode    | String              | pay_amt | 原子指标英文缩写 |
| atomicIndicatorName    | String              | 支付金额 | 原子指标中文名称 |
| dataType               | DataTypeNameEnum    | BIGINT       | 数据类型。可取值为：TINYINT、SMALLINT、INT、BIGINT、BINARY、FLOAT、DOUBLE、DECIMAL、VARCHAR、CHAR、STRING、DATE、DATETIME、TIMESTAMP、BOOLEAN、ARRAY、MAP、STRUCT、JSON       |
|    bizEntityUuid       | String              | dim-123456         | 业务对象UUID   |
|  bizEntityCode         | String              | dim_shop           | 业务对象英文缩写 |
|   bizEntityName        | String              | 店铺表          | 业务对象中文名称 |
|     relUuid            | String              | dim_a-123456       | 关联维度UUID   |
| indHash                | String              | hash-0001         | 指标hash         |
| suggestCode            | String              | pay_amt_1d    | 推荐编码       |
| businessUnitUuid       | String              | bu-0001   | 业务板块UUID   |
| businessUnitCode       | String              | project_code   | 业务板块Code   |
| businessProcessUuid    | String              | di-0002   | 业务过程UUID    |
| businessProcessCode    | String              | pay   | 业务过程Code  |
| businessProcessName    | String              | 支付   | 业务过程Name   |
| dataDomainUuid         | String              | di-0003    | 数据域UUID      |
| dataDomainCode         | String              | trd     | 数据域Code   |
| dataDomainName         | String              | 交易     | 数据域Name      |
| categoryUuid           | String              | di-0001   | 业务分类UUID   |
| categoryCode           | String              | tb   | 业务分类Code   |
| categoryName           | String              | 淘宝 | 业务分类Name    |
| type                   | IndicatorTypeEnum   | ATOMIC     | 指标类型。可取值如下：<br> ATOMIC<br> DERIVATIVE<br> DERIVATIVE_COMPOSITE      |
| code                   | String              | pay_amt | 英文缩写       |
| name                   | String              | 支付金额     | 中文名称       |
| extendName             | String              | pay amount      | 英文名称       |
| description            | String              | remark             | 描述             |
| status                 | IndicatorStatusEnum | NORMAL         | 指标状态。可取值如下：<br>DRAFT<br>DEV<br>NORMAL       |
| ownerId                | String              | 0001    | 负责人BaseId   |
| ownerName              | String              | 负责人姓名   | 负责人名称    |
| isDeleted              | DeleteTagEnum       | NO                 | 是否被删除。可取值如下：<br>YES <br>NO  |
| uuid             | String                 | obj-123456                                     | 对象唯一标识 |
| gmtCreate    | TimeStamp     | 1644397025000 | 创建时间   |
| gmtModified  | TimeStamp     | 1644459965000 | 修改时间   |
| creatorId        | String                 | 0123456                                        | 创建人BaseId   |
| creatorName      | String                 | 甲乙丙丁                                   | 创建人名称  |
| modifierId       | String                 | 0123456                                        | 修改人BaseId  |
| modifierName     | String                 | 甲乙丙丁                                   | 修改人名称   |

### 查询复合指标使用的FML语句如下。
show derivative composite indicators;
输出参数
| 参数名              | 参数类型        | 示例值          | 描述信息       |
| ---------------------- | ------------------- | ------------------ | ------------------ |
| businessUnitCode         | String              | project_code | 工作空间名称  |
| businessProcessUuid         | String              | di-0002  | 业务过程UUID |
| businessProcessCode           | String               | pay | 业务过程Code  |
| businessProcessName          | String               | 支付 | 业务过程名称 |
| dataDomainUuid           | String               | di-0003 | 数据域UUID |
| dataDomainCode     | String              | trd  | 数据域Code  |
| dataDomainName    | String              | 交易 | 数据域名称 |
| categoryUuid    | String              | di-0001  | 业务分类UUID  |
| categoryCode   | String    | tb      | 业务分类Code   |
| categoryName      | String              | 淘宝        | 业务分类名称  |
| type         | String            | DERIVATIVE_COMPOSITE       | 计算模式。可取值DERIVATIVE_COMPOSITE （计算表达式）、DERIVATIVE_COMPARISON（同环比） |
| code        | String              | pay_amt          | 指标英文缩写  |
| name             | String              | 支付金额       | 指标中文名称   |
| extendName               | String              | pay amount         | 指标英文名称   |
| description          | String              | remark   | 指标描述信息      |
| calculateExpression      | String              | {@pay_amt_1d[近1天_支付金额]}/{@pay_amt_1m[近30天_支付金额]}  | 计算表达式  |
| comparisonPeriodType     | String              | DAY_MOM   | 同环比对比类型。取值如下： DAY_MOM（日环比）、 WEEK_MOM（周环比）、WEEK_YOY（周同比）、MONTH_MOM（月环比）、MONTH_YOY（月同比）、QUARTER_MOM（季度环比）、YEAR_MOM（年环比）、YEAR_YOY（年同比） |
| comparisonIndicatorUuid   | String              | obj-123456   | 同环比对比指标的UUID    |
| comparisonIndicatorCode   | String              | pay_amt_1d  | 同环比对比指标的英文缩写 |
| comparisonIndicatorName    | String              | 近1天_支付金额   | 同环比对比指标的中文名称   |
| ownerId         | String              | 0001     | 指标负责人的BaseId     |
| ownerName          | String              | 张三   | 指标负责人的姓名  |
| isDeleted          | DeleteTagEnum              | NO      | 是否被删除，可取值YES或NO。     |
| uuid          | String              | obj-123456   | 对象唯一标识  |
| gmtCreate           | TimeStamp              | 1644397025000   | 指标创建时间  |
| gmtModified    | TimeStamp             | 1644459965000  | 指标修改时间   |
| creatorId             | String   | 0123456    | 指标创建人BaseId    |
| creatorName       | String              | 甲乙丙丁 | 指标创建人名称   |
| modifierId            | String              |  0123456  | 指标修改人BaseId    |
| modifierName      | String              | 甲乙丙丁   | 指标修改人名称      |

### 查询单个指标所依赖模型的相关信息，使用的FML语句如下。
show statistic indicator table_code;
输出参数
| 参数名              | 参数类型        | 示例值          | 描述信息       |
| ---------------------- | ------------------- | ------------------ | ------------------ |
| uuid         | String              | obj-123456  | 指标唯一标识  |
| code         | String              | pay_amt | 指标英文缩写 |
| name         | String              | 支付金额 | 指标中文名称 |
|extendName           | String   |  pay amount          | 指标英文名称 |
| relations        | List<EntityInfo>    | 示例请参见下文     | 依赖指标的模型信息列表，EntityInfo的结构参见下文|

EntityInfo的结构示例及参数描述如下。

```
[
    {
        "uuid": "uuid",
        "code": "code",
        "name": "中文名称",
        "extendName": "full name in English",
        "entityType": "EntityTypeEnum.BASE_DERIVATIVE_INDICATOR",
        "entityTypeName": "实体类型名称",
        "entitySubType": "DERIVATIVE_INDICATOR",
        "entitySubTypeName": "实体子类型名称",
        "ownerId": "0001",
        "ownerName": "负责人姓名"
    }
]
```

| 参数名              | 参数类型        | 示例值          | 描述信息       |
| ---------------------- | ------------------- | ------------------ | ------------------ |
| uuid         | String              | obj-123456  | 模型唯一标识  |
| code        | String              | dws_001| 模型英文缩写 |
| name         | String              | 支付汇总表 | 模型中文名称 |
| extendName          | String               | dws_001| 模型英文名称 |
| entityType          | EntityTypeEnum               | Table | 依赖指标的实体类型。取值包括但不限于`TABLE、BASE_ATOMIC_INDICATOR、BASE_DERIVATIVE_INDICATOR` |
| entityTypeName    | String              | 表 | 实体类型名称 |
| entitySubType    | String              | DWS_TABLE | 实体子类型。取值包括但不限于`DWS_TABLE、ATOMIC_INDICATOR、DERIVATIVE_INDICATOR` |
| entitySubTypeName    | String              | 汇总表 | 实体子类型名称 |
| ownerId              | String    | 0001       | 负责人BaseId  |
|  ownerName      | String              | 张三         | 负责人名称 |',
      'extraInfo' => ' ',
    ),
    'GetAlertMessage' => 
    array (
      'summary' => '调用GetAlertMessage接口，通过获取的AlertId查询报警信息。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '201154',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRJGWWC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'AlertId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '报警ID，可调用[ListAlertMessages](~~173961~~)获取。',
            'type' => 'string',
            'required' => true,
            'example' => '1421',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的ID。用于定位日志，排查问题。

',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回数据详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'RemindId' => 
                  array (
                    'description' => '当Source（报警来源）为REMIND_ALERT（自定义报警）时，返回触发的自定义监控规则ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'AlertMessageStatus' => 
                  array (
                    'description' => '报警信息的发送状态。取值如下：
- READY_TO_SEND（准备发送）
- SEND_FAIL（发送失败）
- SEND_SUCCESS（发送成功）
- SEND_OVERLIMIT（报警超限）',
                    'type' => 'string',
                    'example' => 'READY_TO_SEND',
                  ),
                  'AlertUser' => 
                  array (
                    'description' => '报警信息接收人的阿里云UID。',
                    'type' => 'string',
                    'example' => '9527952795****',
                  ),
                  'AlertTime' => 
                  array (
                    'description' => '报警时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553524393000',
                  ),
                  'AlertMethod' => 
                  array (
                    'description' => '报警方式。取值如下：
- MAIL（邮件）
- SMS（短信）
- PHONE（电话，仅DataWorks专业版及以上版本支持）',
                    'type' => 'string',
                    'example' => 'SMS',
                  ),
                  'Source' => 
                  array (
                    'description' => '报警来源。取值如下：
- REMIND_ALERT（自定义报警）
- TOPIC_ALERT（事件报警）
- SLA_ALERT（基线预警）
- NODE_CYCLE_ALERT（节点成环报警）
- NODE_LONELY_ALERT（节点孤立报警）',
                    'type' => 'string',
                    'example' => 'REMIND_ALERT',
                  ),
                  'Content' => 
                  array (
                    'description' => '报警内容。',
                    'type' => 'string',
                    'example' => '节点出错',
                  ),
                  'RemindName' => 
                  array (
                    'description' => '当Source（报警来源）为REMIND_ALERT（自定义提醒）时，返回触发的自定义监控规则名称。',
                    'type' => 'string',
                    'example' => '自定义监控规则名称',
                  ),
                  'AlertId' => 
                  array (
                    'description' => '报警ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '123',
                  ),
                  'Instances' => 
                  array (
                    'description' => '当Source（报警来源）为REMIND_ALERT（自定义提醒）时，返回触发自定义监控规则的实例列表。其它类型的报警来源返回为空。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '实例信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '实例状态。取值如下：
- NOT_RUN（未运行）
- WAIT_TIME（等待时间）
- WAIT_RESOURCE（等待资源）
- RUNNING（运行中）
- CHECKING（校检中）
- CHECKING_CONDITION（条件检测中）
- FAILURE（运行失败）
- SUCCESS（运行成功）',
                          'type' => 'string',
                          'example' => 'NOT_RUN',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '实例的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '12312312',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点的名称。',
                          'type' => 'string',
                          'example' => '节点名',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '节点所在工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                      ),
                    ),
                  ),
                  'Topics' => 
                  array (
                    'description' => '当Source（报警来源）为TOPIC_ALERT（全局事件告警）时，返回触发报警的事件列表。当报警来源为其它类型时，返回结果为空。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '事件信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TopicName' => 
                        array (
                          'description' => '事件的名称。',
                          'type' => 'string',
                          'example' => '9527出错',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '事件关联的实例ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '12345',
                        ),
                        'TopicId' => 
                        array (
                          'description' => '事件的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '412431',
                        ),
                        'TopicOwner' => 
                        array (
                          'description' => '事件责任人的阿里云UID。',
                          'type' => 'string',
                          'example' => '9527952795****',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '事件关联的任务节点ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'TopicStatus' => 
                        array (
                          'description' => '事件的状态。取值如下：
- IGNORE（已忽略）
- NEW（新发现）
- FIXING（处理中）
- RECOVER（已恢复）',
                          'type' => 'string',
                          'example' => 'FIXING',
                        ),
                      ),
                    ),
                  ),
                  'Nodes' => 
                  array (
                    'description' => '不同的报警来源返回不同的节点列表：
当Source（报警来源）为NODE_ CYCLE_ALERT（节点成环报警）时，返回成环的节点类型。
当Source（报警来源）为NODELONELYALERT（节点孤立报警）时，返回孤立的节点类型。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '节点信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Owner' => 
                        array (
                          'description' => '节点责任人的阿里云UID。',
                          'type' => 'string',
                          'example' => '95279527952****',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点的名称。',
                          'type' => 'string',
                          'example' => '节点名',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '节点所在工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                      ),
                    ),
                  ),
                  'SlaAlert' => 
                  array (
                    'description' => '当Source（报警来源）为SLA_ALERT（基线报警）时，返回触发基线预警的基本实例信息。当报警来源为其它类型时，返回为空。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Status' => 
                      array (
                        'description' => '基线状态。取值如下：
- ERROR（异常）
- SAFE（安全）
- DANGEROUS（预警）
- OVER（破线）',
                        'type' => 'string',
                        'example' => 'SAFE',
                      ),
                      'BaselineOwner' => 
                      array (
                        'description' => '基线责任人的阿里云UID，多个UID之间使用英文逗号（,）分隔。',
                        'type' => 'string',
                        'example' => '952795279****',
                      ),
                      'BaselineId' => 
                      array (
                        'description' => '基线的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '15142123',
                      ),
                      'BaselineName' => 
                      array (
                        'description' => '基线的名称。',
                        'type' => 'string',
                        'example' => '基线名',
                      ),
                      'Bizdate' => 
                      array (
                        'description' => '基线实例的业务日期时间戳。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1553443200000',
                      ),
                      'ProjectId' => 
                      array (
                        'description' => '基线所在工作空间的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1234',
                      ),
                      'InGroupId' => 
                      array (
                        'description' => '基线实例的周期号：天基线为1，小时基线范围为\\[1,24]。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '1',
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"RemindId\\": 1234,\\n    \\"AlertMessageStatus\\": \\"READY_TO_SEND\\",\\n    \\"AlertUser\\": \\"9527952795****\\",\\n    \\"AlertTime\\": 1553524393000,\\n    \\"AlertMethod\\": \\"SMS\\",\\n    \\"Source\\": \\"REMIND_ALERT\\",\\n    \\"Content\\": \\"节点出错\\",\\n    \\"RemindName\\": \\"自定义监控规则名称\\",\\n    \\"AlertId\\": 123,\\n    \\"Instances\\": [\\n      {\\n        \\"Status\\": \\"NOT_RUN\\",\\n        \\"InstanceId\\": 12312312,\\n        \\"NodeName\\": \\"节点名\\",\\n        \\"NodeId\\": 1234,\\n        \\"ProjectId\\": 1234\\n      }\\n    ],\\n    \\"Topics\\": [\\n      {\\n        \\"TopicName\\": \\"9527出错\\",\\n        \\"InstanceId\\": 12345,\\n        \\"TopicId\\": 412431,\\n        \\"TopicOwner\\": \\"9527952795****\\",\\n        \\"NodeId\\": 1234,\\n        \\"TopicStatus\\": \\"FIXING\\"\\n      }\\n    ],\\n    \\"Nodes\\": [\\n      {\\n        \\"Owner\\": \\"95279527952****\\",\\n        \\"NodeName\\": \\"节点名\\",\\n        \\"NodeId\\": 1234,\\n        \\"ProjectId\\": 1234\\n      }\\n    ],\\n    \\"SlaAlert\\": {\\n      \\"Status\\": \\"SAFE\\",\\n      \\"BaselineOwner\\": \\"952795279****\\",\\n      \\"BaselineId\\": 15142123,\\n      \\"BaselineName\\": \\"基线名\\",\\n      \\"Bizdate\\": 1553443200000,\\n      \\"ProjectId\\": 1234,\\n      \\"InGroupId\\": 1\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetAlertMessageResponse>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <RemindId>1234</RemindId>\\n        <AlertMessageStatus>READY_TO_SEND</AlertMessageStatus>\\n        <AlertUser>9527952795****</AlertUser>\\n        <AlertTime>1553524393000</AlertTime>\\n        <AlertMethod>SMS</AlertMethod>\\n        <Source>REMIND_ALERT</Source>\\n        <Content>节点出错</Content>\\n        <RemindName>自定义监控规则名称</RemindName>\\n        <AlertId>123</AlertId>\\n        <Instances>\\n            <Status>NOT_RUN</Status>\\n            <InstanceId>12312312</InstanceId>\\n            <NodeName>节点名</NodeName>\\n            <NodeId>1234</NodeId>\\n            <ProjectId>1234</ProjectId>\\n        </Instances>\\n        <Topics>\\n            <TopicName>9527出错</TopicName>\\n            <InstanceId>12345</InstanceId>\\n            <TopicId>412431</TopicId>\\n            <TopicOwner>9527952795****</TopicOwner>\\n            <NodeId>1234</NodeId>\\n            <TopicStatus>FIXING</TopicStatus>\\n        </Topics>\\n        <Nodes>\\n            <Owner>95279527952****</Owner>\\n            <NodeName>节点名</NodeName>\\n            <NodeId>1234</NodeId>\\n            <ProjectId>1234</ProjectId>\\n        </Nodes>\\n        <SlaAlert>\\n            <Status>SAFE</Status>\\n            <BaselineOwner>952795279****</BaselineOwner>\\n            <BaselineId>15142123</BaselineId>\\n            <BaselineName>基线名</BaselineName>\\n            <Bizdate>1553443200000</Bizdate>\\n            <ProjectId>1234</ProjectId>\\n            <InGroupId>1</InGroupId>\\n        </SlaAlert>\\n    </Data>\\n</GetAlertMessageResponse>","errorExample":""}]',
      'title' => '查询报警信息',
    ),
    'ListAlertMessages' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '78294',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRJGWWC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页的页数。默认值为1、最小值为1、最大值为30。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10，最大100条。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'BeginTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '起始报警时间，需要使用yyyy-MM-dd\'T\'HH:mm:ssZ的UTC格式。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-04-02T00:00:00+0800',
          ),
        ),
        3 => 
        array (
          'name' => 'EndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '截止报警时间，需要使用yyyy-MM-dd\'T\'HH:mm:ssZ的UTC格式。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-04-04T00:00:00+0800',
          ),
        ),
        4 => 
        array (
          'name' => 'RemindId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '自定义规则的ID，当AlertRuleTypes参数配置为USER_DEFINE自定义规则时生效。
该参数与BaselineId参数配置一个即可。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '9527',
          ),
        ),
        5 => 
        array (
          'name' => 'AlertMethods',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '报警方式，取值如下：
- MAIL：邮件。
- SMS：短信。
<props="intl">可使用短信告警的地域为：新加坡、马来西亚（吉隆坡）、德国（法兰克福）。</props>
<props="china">- PHONE：电话。仅DataWorks专业版及以上版本支持。</props>

多个报警方式之间使用英文逗号（,）分隔。
',
            'type' => 'string',
            'required' => false,
            'example' => 'SMS,MAIL,PHONE',
          ),
        ),
        6 => 
        array (
          'name' => 'AlertUser',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '报警接收人的阿里云UID。',
            'type' => 'string',
            'required' => false,
            'example' => '123456',
          ),
        ),
        7 => 
        array (
          'name' => 'AlertRuleTypes',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '规则类型，包括GLOBAL（全局规则）、USER_DEFINE（自定义规则）和OTHER（其它）。多个规则类型之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'GLOBAL,USER_DEFINE,OTHER',
          ),
        ),
        8 => 
        array (
          'name' => 'BaselineId',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线ID，当 alertRuleTypes 包含 GLOBAL 时生效，与 RemindId 互斥',
            'description' => '基线ID。当AlertRuleTypes参数配置为GLOBAL时生效。
该参数与RemindId参数配置一个即可。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回的报警信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前的页数。',
                    'type' => 'string',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页的大小。
',
                    'type' => 'string',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '报警信息的总数。
',
                    'type' => 'string',
                    'example' => '100',
                  ),
                  'AlertMessages' => 
                  array (
                    'description' => '报警信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'RemindId' => 
                        array (
                          'description' => '当Source（报警来源）为REMIND_ALERT（自定义报警）时，返回触发的自定义监控规则ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'AlertMessageStatus' => 
                        array (
                          'description' => '发送状态，包括READY_TO_SEND（准备发送）、SEND_FAIL（发送失败）、SEND_SUCCESS（发送成功）和SEND_OVERLIMIT（报警超限）。',
                          'type' => 'string',
                          'example' => 'READY_TO_SEND',
                        ),
                        'AlertUser' => 
                        array (
                          'description' => '接收人的阿里云UID。',
                          'type' => 'string',
                          'example' => '9527952795****',
                        ),
                        'AlertTime' => 
                        array (
                          'description' => '报警的时间戳。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1553531401000',
                        ),
                        'AlertMethod' => 
                        array (
                          'description' => '报警方式，包括MAIL（邮件）、SMS（短信）和 PHONE（电话，仅DataWorks专业版及以上版本支持）。',
                          'type' => 'string',
                          'example' => 'SMS',
                        ),
                        'Source' => 
                        array (
                          'description' => '报警来源，包括REMIND_ALERT（自定义报警）、TOPIC_ALERT（事件告警）、SLA_ALERT（基线预警）、NODE_CYCLE_ALERT（节点成环报警）和NODE_LONELY_ALERT（节点孤立报警）。',
                          'type' => 'string',
                          'example' => 'REMIND_ALERT',
                        ),
                        'Content' => 
                        array (
                          'description' => '报警的内容。',
                          'type' => 'string',
                          'example' => '节点出错',
                        ),
                        'RemindName' => 
                        array (
                          'description' => '当Source（报警来源）为REMIND_ALERT（自定义提醒）时，返回触发的自定义监控规则名称。',
                          'type' => 'string',
                          'example' => '自定义监控规则名称',
                        ),
                        'AlertId' => 
                        array (
                          'description' => '报警ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'Instances' => 
                        array (
                          'description' => '当Source（报警来源）为REMIND_ALERT（自定义提醒）时，返回触发自定义监控规则的实例列表。其它类型的报警来源返回为空。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '实例信息。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'Status' => 
                              array (
                                'description' => '实例状态，包括NOT_RUN （未运行）、WAIT_TIME（等待时间）、WAIT_RESOURCE（等待资源）、RUNNING（运行中）、CHECKING（校检中）、CHECKING_CONDITION（条件检测中）、FAILURE（运行失败）和SUCCESS（运行成功）。
',
                                'type' => 'string',
                                'example' => 'NOT_RUN',
                              ),
                              'InstanceId' => 
                              array (
                                'description' => '实例的ID。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '12345',
                              ),
                              'NodeName' => 
                              array (
                                'description' => '节点的名称。',
                                'type' => 'string',
                                'example' => '节点名称',
                              ),
                              'NodeId' => 
                              array (
                                'description' => '节点的ID。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '1234',
                              ),
                              'ProjectId' => 
                              array (
                                'description' => '节点所在工作空间的ID。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '1234',
                              ),
                            ),
                          ),
                        ),
                        'Topics' => 
                        array (
                          'description' => '当Source（报警来源）为TOPIC_ALERT（全局事件告警）时，返回触发报警的事件列表。当报警来源为其它类型时，返回结果为空。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '事件信息。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'TopicName' => 
                              array (
                                'description' => '事件的名称。',
                                'type' => 'string',
                                'example' => '9527出错',
                              ),
                              'InstanceId' => 
                              array (
                                'description' => '事件关联的实例ID。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '12345',
                              ),
                              'TopicId' => 
                              array (
                                'description' => '事件的ID。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '1234',
                              ),
                              'TopicOwner' => 
                              array (
                                'description' => '事件责任人的阿里云UID。',
                                'type' => 'string',
                                'example' => '9527952795****',
                              ),
                              'NodeId' => 
                              array (
                                'description' => '事件关联的节点ID。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '1234',
                              ),
                              'TopicStatus' => 
                              array (
                                'description' => '事件状态，包括IGNORE（已忽略），NEW（新发现）、 FIXING（处理中）和RECOVER（已恢复）。',
                                'type' => 'string',
                                'example' => 'FIXING',
                              ),
                            ),
                          ),
                        ),
                        'Nodes' => 
                        array (
                          'description' => '不同的报警来源返回不同的节点列表：

- 当Source（报警来源）为NODE_ CYCLE_ALERT（节点成环报警）时，返回成环的节点类型。

- 当Source（报警来源）为NODE_LONELY_ALERT（节点孤立报警）时，返回孤立的节点类型。


',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '节点信息。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'Owner' => 
                              array (
                                'description' => '节点责任人的阿里云UID。',
                                'type' => 'string',
                                'example' => '95279527952****',
                              ),
                              'NodeName' => 
                              array (
                                'description' => '节点的名称。',
                                'type' => 'string',
                                'example' => '节点名称',
                              ),
                              'NodeId' => 
                              array (
                                'description' => '节点的ID。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '1234',
                              ),
                              'ProjectId' => 
                              array (
                                'description' => '节点所在工作空间的ID。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '1234',
                              ),
                            ),
                          ),
                        ),
                        'SlaAlert' => 
                        array (
                          'description' => '当Source（报警来源）为SLA_ALERT（基线报警）时，返回触发基线预警的基本实例信息。当报警来源为其它类型时，返回为空。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Status' => 
                            array (
                              'description' => '基线状态，包括ERROR（异常）、SAFE（安全）、DANGROUS（预警）和OVER（破线）。',
                              'type' => 'string',
                              'example' => 'SAFE',
                            ),
                            'BaselineOwner' => 
                            array (
                              'description' => '基线责任人的阿里云UID，多个UID之间使用英文逗号（,）分隔。',
                              'type' => 'string',
                              'example' => '952795279****',
                            ),
                            'BaselineId' => 
                            array (
                              'description' => '基线的ID。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1234',
                            ),
                            'BaselineName' => 
                            array (
                              'description' => '基线的名称。',
                              'type' => 'string',
                              'example' => '基线名称',
                            ),
                            'Bizdate' => 
                            array (
                              'description' => '基线实例的业务日期时间戳。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1553443200000',
                            ),
                            'ProjectId' => 
                            array (
                              'description' => '基线所在工作空间的ID。',
                              'type' => 'integer',
                              'format' => 'int64',
                              'example' => '1234',
                            ),
                            'InGroupId' => 
                            array (
                              'description' => '基线实例的周期号：天基线为1，小时基线范围为\\[1,24\\]。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": \\"1\\",\\n    \\"PageSize\\": \\"10\\",\\n    \\"TotalCount\\": \\"100\\",\\n    \\"AlertMessages\\": [\\n      {\\n        \\"RemindId\\": 1234,\\n        \\"AlertMessageStatus\\": \\"READY_TO_SEND\\",\\n        \\"AlertUser\\": \\"9527952795****\\",\\n        \\"AlertTime\\": 1553531401000,\\n        \\"AlertMethod\\": \\"SMS\\",\\n        \\"Source\\": \\"REMIND_ALERT\\",\\n        \\"Content\\": \\"节点出错\\",\\n        \\"RemindName\\": \\"自定义监控规则名称\\",\\n        \\"AlertId\\": 1234,\\n        \\"Instances\\": [\\n          {\\n            \\"Status\\": \\"NOT_RUN\\",\\n            \\"InstanceId\\": 12345,\\n            \\"NodeName\\": \\"节点名称\\",\\n            \\"NodeId\\": 1234,\\n            \\"ProjectId\\": 1234\\n          }\\n        ],\\n        \\"Topics\\": [\\n          {\\n            \\"TopicName\\": \\"9527出错\\",\\n            \\"InstanceId\\": 12345,\\n            \\"TopicId\\": 1234,\\n            \\"TopicOwner\\": \\"9527952795****\\",\\n            \\"NodeId\\": 1234,\\n            \\"TopicStatus\\": \\"FIXING\\"\\n          }\\n        ],\\n        \\"Nodes\\": [\\n          {\\n            \\"Owner\\": \\"95279527952****\\",\\n            \\"NodeName\\": \\"节点名称\\",\\n            \\"NodeId\\": 1234,\\n            \\"ProjectId\\": 1234\\n          }\\n        ],\\n        \\"SlaAlert\\": {\\n          \\"Status\\": \\"SAFE\\",\\n          \\"BaselineOwner\\": \\"952795279****\\",\\n          \\"BaselineId\\": 1234,\\n          \\"BaselineName\\": \\"基线名称\\",\\n          \\"Bizdate\\": 1553443200000,\\n          \\"ProjectId\\": 1234,\\n          \\"InGroupId\\": 1\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListAlertMessagesResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <AlertMessages>\\n            <RemindId>1234</RemindId>\\n            <AlertMessageStatus>READY_TO_SEND</AlertMessageStatus>\\n            <AlertUser>9527952795****</AlertUser>\\n            <AlertTime>1553531401000</AlertTime>\\n            <AlertMethod>SMS</AlertMethod>\\n            <Source>REMIND_ALERT</Source>\\n            <Content>节点出错</Content>\\n            <RemindName>自定义监控规则名称</RemindName>\\n            <AlertId>1234</AlertId>\\n            <Instances>\\n                <Status>NOT_RUN</Status>\\n                <InstanceId>12345</InstanceId>\\n                <NodeName>节点名称</NodeName>\\n                <NodeId>1234</NodeId>\\n                <ProjectId>1234</ProjectId>\\n            </Instances>\\n            <Topics>\\n                <TopicName>9527出错</TopicName>\\n                <InstanceId>12345</InstanceId>\\n                <TopicId>1234</TopicId>\\n                <TopicOwner>9527952795****</TopicOwner>\\n                <NodeId>1234</NodeId>\\n                <TopicStatus>FIXING</TopicStatus>\\n            </Topics>\\n            <Nodes>\\n                <Owner>95279527952****</Owner>\\n                <NodeName>节点名称</NodeName>\\n                <NodeId>1234</NodeId>\\n                <ProjectId>1234</ProjectId>\\n            </Nodes>\\n            <SlaAlert>\\n                <Status>SAFE</Status>\\n                <BaselineOwner>952795279****</BaselineOwner>\\n                <BaselineId>1234</BaselineId>\\n                <BaselineName>基线名称</BaselineName>\\n                <Bizdate>1553443200000</Bizdate>\\n                <ProjectId>1234</ProjectId>\\n                <InGroupId>1</InGroupId>\\n            </SlaAlert>\\n        </AlertMessages>\\n    </Data>\\n</ListAlertMessagesResponse>","errorExample":""}]',
      'title' => '获取报警信息的列表',
      'summary' => '调用ListAlertMessages获取报警信息的列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetBaselineConfig' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78229',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BaselineId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的ID。您可以通过调用[GetNode](~~173977~~)接口获取基线ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '401',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'ecb967ec-c137-48a5-860****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '基线的详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'HourSlaDetail' => 
                  array (
                    'description' => '小时基线的承诺时间配置（JSON格式），key为周期号，value为hh:mm格式。hh的取值范围为\\[0,47\\]，mm的取值范围为\\[0,59\\]。',
                    'type' => 'string',
                    'example' => '{"1":"03:58","2":"04:58","3":"05:58","4":"06:58","5":"07:58","6":"08:58","7":"09:58","8":"10:58","9":"11:58","10":"12:58","11":"13:58","12":"14:58","13":"15:58","14":"16:58","15":"17:58","16":"18:58","17":"19:58","18":"20:58","19":"21:58","20":"22:58","21":"23:58","22":"24:58","23":"25:58","24":"26:58"}',
                  ),
                  'IsDefault' => 
                  array (
                    'description' => '是否为工作空间的默认基线，包括true（是）和false（否）。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'Owner' => 
                  array (
                    'description' => '基线责任人的阿里云UID。有多个责任人时，使用英文逗号（,）分隔。',
                    'type' => 'string',
                    'example' => '9527952****',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'Priority' => 
                  array (
                    'description' => '基线的优先级，取值集合为{1,3,5,7,8}。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'SlaMinu' => 
                  array (
                    'description' => '天基线的承诺分钟，取值范围为\\[0, 59\\]。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '30',
                  ),
                  'SlaHour' => 
                  array (
                    'description' => '天基线的承诺小时，取值范围为\\[0, 47\\]。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '9',
                  ),
                  'BaselineId' => 
                  array (
                    'description' => '基线的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'BaselineName' => 
                  array (
                    'description' => '基线的名称。',
                    'type' => 'string',
                    'example' => '基线名称',
                  ),
                  'HourExpDetail' => 
                  array (
                    'description' => '小时基线的预警时间配置（JSON格式），key为周期号，value为hh:mm格式。hh的取值范围为\\[0,47\\]，mm的取值范围为\\[0,59\\]。',
                    'type' => 'string',
                    'example' => '{"1":"03:28","2":"04:28","3":"05:28","4":"06:28","5":"07:28","6":"08:28","7":"09:28","8":"10:28","9":"11:28","10":"12:28","11":"13:28","12":"14:28","13":"15:28","14":"16:28","15":"17:28","16":"18:28","17":"19:28","18":"20:28","19":"21:28","20":"22:28","21":"23:28","22":"24:28","23":"25:28","24":"26:28"}',
                  ),
                  'UseFlag' => 
                  array (
                    'description' => '基线是否开启，包括true（开启）和false（未开启）。 ',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'ExpHour' => 
                  array (
                    'description' => '天基线的预警小时，取值范围为\\[0, 47\\]。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '7',
                  ),
                  'BaselineType' => 
                  array (
                    'description' => '基线类型，包括DAILY（天基线）和HOURLY（小时基线）。',
                    'type' => 'string',
                    'example' => 'DAILY',
                  ),
                  'ExpMinu' => 
                  array (
                    'description' => '天基线的预警分钟，取值范围为\\[0, 59\\]。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '30',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.BaselineNoPermission',
            'errorMessage' => 'You are not authorized to access the baseline.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Wkbench.ServiceError',
            'errorMessage' => 'An internal error occurred.',
          ),
          5 => 
          array (
            'errorCode' => 'Invalid.Wkbench.Parameter',
            'errorMessage' => 'The specified parameters are invalid.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 401,\\n  \\"RequestId\\": \\"ecb967ec-c137-48a5-860****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"HourSlaDetail\\": \\"{\\\\\\"1\\\\\\":\\\\\\"03:58\\\\\\",\\\\\\"2\\\\\\":\\\\\\"04:58\\\\\\",\\\\\\"3\\\\\\":\\\\\\"05:58\\\\\\",\\\\\\"4\\\\\\":\\\\\\"06:58\\\\\\",\\\\\\"5\\\\\\":\\\\\\"07:58\\\\\\",\\\\\\"6\\\\\\":\\\\\\"08:58\\\\\\",\\\\\\"7\\\\\\":\\\\\\"09:58\\\\\\",\\\\\\"8\\\\\\":\\\\\\"10:58\\\\\\",\\\\\\"9\\\\\\":\\\\\\"11:58\\\\\\",\\\\\\"10\\\\\\":\\\\\\"12:58\\\\\\",\\\\\\"11\\\\\\":\\\\\\"13:58\\\\\\",\\\\\\"12\\\\\\":\\\\\\"14:58\\\\\\",\\\\\\"13\\\\\\":\\\\\\"15:58\\\\\\",\\\\\\"14\\\\\\":\\\\\\"16:58\\\\\\",\\\\\\"15\\\\\\":\\\\\\"17:58\\\\\\",\\\\\\"16\\\\\\":\\\\\\"18:58\\\\\\",\\\\\\"17\\\\\\":\\\\\\"19:58\\\\\\",\\\\\\"18\\\\\\":\\\\\\"20:58\\\\\\",\\\\\\"19\\\\\\":\\\\\\"21:58\\\\\\",\\\\\\"20\\\\\\":\\\\\\"22:58\\\\\\",\\\\\\"21\\\\\\":\\\\\\"23:58\\\\\\",\\\\\\"22\\\\\\":\\\\\\"24:58\\\\\\",\\\\\\"23\\\\\\":\\\\\\"25:58\\\\\\",\\\\\\"24\\\\\\":\\\\\\"26:58\\\\\\"}\\",\\n    \\"IsDefault\\": true,\\n    \\"Owner\\": \\"9527952****\\",\\n    \\"ProjectId\\": 1234,\\n    \\"Priority\\": 1,\\n    \\"SlaMinu\\": 30,\\n    \\"SlaHour\\": 9,\\n    \\"BaselineId\\": 1234,\\n    \\"BaselineName\\": \\"基线名称\\",\\n    \\"HourExpDetail\\": \\"{\\\\\\"1\\\\\\":\\\\\\"03:28\\\\\\",\\\\\\"2\\\\\\":\\\\\\"04:28\\\\\\",\\\\\\"3\\\\\\":\\\\\\"05:28\\\\\\",\\\\\\"4\\\\\\":\\\\\\"06:28\\\\\\",\\\\\\"5\\\\\\":\\\\\\"07:28\\\\\\",\\\\\\"6\\\\\\":\\\\\\"08:28\\\\\\",\\\\\\"7\\\\\\":\\\\\\"09:28\\\\\\",\\\\\\"8\\\\\\":\\\\\\"10:28\\\\\\",\\\\\\"9\\\\\\":\\\\\\"11:28\\\\\\",\\\\\\"10\\\\\\":\\\\\\"12:28\\\\\\",\\\\\\"11\\\\\\":\\\\\\"13:28\\\\\\",\\\\\\"12\\\\\\":\\\\\\"14:28\\\\\\",\\\\\\"13\\\\\\":\\\\\\"15:28\\\\\\",\\\\\\"14\\\\\\":\\\\\\"16:28\\\\\\",\\\\\\"15\\\\\\":\\\\\\"17:28\\\\\\",\\\\\\"16\\\\\\":\\\\\\"18:28\\\\\\",\\\\\\"17\\\\\\":\\\\\\"19:28\\\\\\",\\\\\\"18\\\\\\":\\\\\\"20:28\\\\\\",\\\\\\"19\\\\\\":\\\\\\"21:28\\\\\\",\\\\\\"20\\\\\\":\\\\\\"22:28\\\\\\",\\\\\\"21\\\\\\":\\\\\\"23:28\\\\\\",\\\\\\"22\\\\\\":\\\\\\"24:28\\\\\\",\\\\\\"23\\\\\\":\\\\\\"25:28\\\\\\",\\\\\\"24\\\\\\":\\\\\\"26:28\\\\\\"}\\",\\n    \\"UseFlag\\": true,\\n    \\"ExpHour\\": 7,\\n    \\"BaselineType\\": \\"DAILY\\",\\n    \\"ExpMinu\\": 30\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetBaselineConfigResponse>\\n    <HttpStatusCode>401</HttpStatusCode>\\n    <RequestId>ecb967ec-c137-48a5-860****</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <HourSlaDetail>{\\"1\\":\\"03:58\\",\\"2\\":\\"04:58\\",\\"3\\":\\"05:58\\",\\"4\\":\\"06:58\\",\\"5\\":\\"07:58\\",\\"6\\":\\"08:58\\",\\"7\\":\\"09:58\\",\\"8\\":\\"10:58\\",\\"9\\":\\"11:58\\",\\"10\\":\\"12:58\\",\\"11\\":\\"13:58\\",\\"12\\":\\"14:58\\",\\"13\\":\\"15:58\\",\\"14\\":\\"16:58\\",\\"15\\":\\"17:58\\",\\"16\\":\\"18:58\\",\\"17\\":\\"19:58\\",\\"18\\":\\"20:58\\",\\"19\\":\\"21:58\\",\\"20\\":\\"22:58\\",\\"21\\":\\"23:58\\",\\"22\\":\\"24:58\\",\\"23\\":\\"25:58\\",\\"24\\":\\"26:58\\"}</HourSlaDetail>\\n        <IsDefault>true</IsDefault>\\n        <Owner>9527952****</Owner>\\n        <ProjectId>1234</ProjectId>\\n        <Priority>1</Priority>\\n        <SlaMinu>30</SlaMinu>\\n        <SlaHour>9</SlaHour>\\n        <BaselineId>1234</BaselineId>\\n        <BaselineName>基线名称</BaselineName>\\n        <HourExpDetail>{\\"1\\":\\"03:28\\",\\"2\\":\\"04:28\\",\\"3\\":\\"05:28\\",\\"4\\":\\"06:28\\",\\"5\\":\\"07:28\\",\\"6\\":\\"08:28\\",\\"7\\":\\"09:28\\",\\"8\\":\\"10:28\\",\\"9\\":\\"11:28\\",\\"10\\":\\"12:28\\",\\"11\\":\\"13:28\\",\\"12\\":\\"14:28\\",\\"13\\":\\"15:28\\",\\"14\\":\\"16:28\\",\\"15\\":\\"17:28\\",\\"16\\":\\"18:28\\",\\"17\\":\\"19:28\\",\\"18\\":\\"20:28\\",\\"19\\":\\"21:28\\",\\"20\\":\\"22:28\\",\\"21\\":\\"23:28\\",\\"22\\":\\"24:28\\",\\"23\\":\\"25:28\\",\\"24\\":\\"26:28\\"}</HourExpDetail>\\n        <UseFlag>true</UseFlag>\\n        <ExpHour>7</ExpHour>\\n        <BaselineType>DAILY</BaselineType>\\n        <ExpMinu>30</ExpMinu>\\n    </Data>\\n</GetBaselineConfigResponse>","errorExample":""}]',
      'title' => '获取配置详情',
      'summary' => '调用GetBaselineConfig获取配置详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListNodesByBaseline' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '78321',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BaselineId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的ID。您可以通过调用[ListBaselineConfigs](~~173964~~)接口获取基线ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。
',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。
',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '基线中的节点列表。
',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Owner' => 
                    array (
                      'description' => '节点责任人的阿里云UID。
',
                      'type' => 'string',
                      'example' => '9527952****',
                    ),
                    'NodeName' => 
                    array (
                      'description' => '节点的名称。
',
                      'type' => 'string',
                      'example' => '节点名称',
                    ),
                    'NodeId' => 
                    array (
                      'description' => '节点的ID。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1234',
                    ),
                    'ProjectId' => 
                    array (
                      'description' => '节点所在工作空间的ID。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1234',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.BaselineNoPermission',
            'errorMessage' => 'You are not authorized to access the baseline.',
          ),
          2 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.ProjectNoPermission',
            'errorMessage' => 'You are not authorized to access the workspace.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          5 => 
          array (
            'errorCode' => 'InternalError.Wkbench.ServiceError',
            'errorMessage' => 'An internal error occurred.',
          ),
          6 => 
          array (
            'errorCode' => 'Invalid.Wkbench.Parameter',
            'errorMessage' => 'The specified parameters are invalid.',
          ),
          7 => 
          array (
            'errorCode' => 'Invalid.Wkbench.BaselineNotExist',
            'errorMessage' => 'The baseline does not exist.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-E****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": [\\n    {\\n      \\"Owner\\": \\"9527952****\\",\\n      \\"NodeName\\": \\"节点名称\\",\\n      \\"NodeId\\": 1234,\\n      \\"ProjectId\\": 1234\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<ListNodesByBaselineResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-E****</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <Owner>9527952****</Owner>\\n        <NodeName>节点名称</NodeName>\\n        <NodeId>1234</NodeId>\\n        <ProjectId>1234</ProjectId>\\n    </Data>\\n</ListNodesByBaselineResponse>","errorExample":""}]',
      'title' => '获取基线中的节点',
      'summary' => '获取基线中的节点（不包含这些节点的上游节点）。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListBaselineConfigs' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '78295',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页的页数。默认值为1，最小值为1，最大值为30。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页返回的数据行数。默认值为10，最小值为1，最大值为100。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线责任人的阿里云UID。',
            'type' => 'string',
            'required' => false,
            'example' => '95279527****',
          ),
        ),
        3 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。您可以通过ListProjects接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        4 => 
        array (
          'name' => 'Priority',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的优先级，取值范围为{1,3,5,7,8} 。多个优先级之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => '1,3,5,7,8',
          ),
        ),
        5 => 
        array (
          'name' => 'Useflag',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否开启，包括true（开启）和false（未开启）。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        6 => 
        array (
          'name' => 'BaselineTypes',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线类型，包括DAILY（天基线）和HOURLY（小时基线）。多个类型之间使用英文逗号（,）分隔。
',
            'type' => 'string',
            'required' => false,
            'example' => 'DAILY,HOURLY',
          ),
        ),
        7 => 
        array (
          'name' => 'SearchText',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线名称的搜索关键字。',
            'type' => 'string',
            'required' => false,
            'example' => '基线名称搜索关键字',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。

',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回的基线列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前的页数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页的大小。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '基线的总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Baselines' => 
                  array (
                    'description' => '基线列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结构。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'HourSlaDetail' => 
                        array (
                          'description' => '小时基线的承诺时间配置（JSON格式），key为周期号，value为hh:mm格式。hh的取值范围为\\[0,47\\]，mm的取值范围为\\[0,59\\]。',
                          'type' => 'string',
                          'example' => '{"1":"03:58","2":"04:58","3":"05:58","4":"06:58","5":"07:58","6":"08:58","7":"09:58","8":"10:58","9":"11:58","10":"12:58","11":"13:58","12":"14:58","13":"15:58","14":"16:58","15":"17:58","16":"18:58","17":"19:58","18":"20:58","19":"21:58","20":"22:58","21":"23:58","22":"24:58","23":"25:58","24":"26:58"}',
                        ),
                        'IsDefault' => 
                        array (
                          'description' => '是否为工作空间的默认基线，包括true（是）和false（否）。
',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'Owner' => 
                        array (
                          'description' => '基线责任人的阿里云UID。有多个责任人时，使用英文逗号（,）分隔。
',
                          'type' => 'string',
                          'example' => '952795****',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '基线所在工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '9527',
                        ),
                        'Priority' => 
                        array (
                          'description' => '基线的优先级，取值集合为{1,3,5,7,8}。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'SlaMinu' => 
                        array (
                          'description' => '天基线的预警分钟，取值范围为\\[0, 59\\]。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '30',
                        ),
                        'SlaHour' => 
                        array (
                          'description' => '天基线的承诺小时，取值范围为\\[0, 47\\]。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '9',
                        ),
                        'BaselineId' => 
                        array (
                          'description' => '基线的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'BaselineName' => 
                        array (
                          'description' => '基线的名称。',
                          'type' => 'string',
                          'example' => '基线名称',
                        ),
                        'HourExpDetail' => 
                        array (
                          'description' => '小时基线的预警时间配置（JSON格式），key为周期号，value为hh:mm格式。hh的取值范围为\\[0,47\\]，mm的取值范围为\\[0,59\\]。',
                          'type' => 'string',
                          'example' => '{"1":"03:28","2":"04:28","3":"05:28","4":"06:28","5":"07:28","6":"08:28","7":"09:28","8":"10:28","9":"11:28","10":"12:28","11":"13:28","12":"14:28","13":"15:28","14":"16:28","15":"17:28","16":"18:28","17":"19:28","18":"20:28","19":"21:28","20":"22:28","21":"23:28","22":"24:28","23":"25:28","24":"26:28"}',
                        ),
                        'UseFlag' => 
                        array (
                          'description' => '基线是否开启，包括true（开启）和false（未开启）。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'ExpHour' => 
                        array (
                          'description' => '天基线的预警小时，取值范围为\\[0, 47\\]。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '7',
                        ),
                        'BaselineType' => 
                        array (
                          'description' => '基线类型，包括DAILY（天基线）和HOURLY（小时基线）。 
',
                          'type' => 'string',
                          'example' => 'DAILY',
                        ),
                        'ExpMinu' => 
                        array (
                          'description' => '天基线的预警分钟，取值范围为\\[0, 59\\]。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '30',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Baselines\\": [\\n      {\\n        \\"HourSlaDetail\\": \\"{\\\\\\"1\\\\\\":\\\\\\"03:58\\\\\\",\\\\\\"2\\\\\\":\\\\\\"04:58\\\\\\",\\\\\\"3\\\\\\":\\\\\\"05:58\\\\\\",\\\\\\"4\\\\\\":\\\\\\"06:58\\\\\\",\\\\\\"5\\\\\\":\\\\\\"07:58\\\\\\",\\\\\\"6\\\\\\":\\\\\\"08:58\\\\\\",\\\\\\"7\\\\\\":\\\\\\"09:58\\\\\\",\\\\\\"8\\\\\\":\\\\\\"10:58\\\\\\",\\\\\\"9\\\\\\":\\\\\\"11:58\\\\\\",\\\\\\"10\\\\\\":\\\\\\"12:58\\\\\\",\\\\\\"11\\\\\\":\\\\\\"13:58\\\\\\",\\\\\\"12\\\\\\":\\\\\\"14:58\\\\\\",\\\\\\"13\\\\\\":\\\\\\"15:58\\\\\\",\\\\\\"14\\\\\\":\\\\\\"16:58\\\\\\",\\\\\\"15\\\\\\":\\\\\\"17:58\\\\\\",\\\\\\"16\\\\\\":\\\\\\"18:58\\\\\\",\\\\\\"17\\\\\\":\\\\\\"19:58\\\\\\",\\\\\\"18\\\\\\":\\\\\\"20:58\\\\\\",\\\\\\"19\\\\\\":\\\\\\"21:58\\\\\\",\\\\\\"20\\\\\\":\\\\\\"22:58\\\\\\",\\\\\\"21\\\\\\":\\\\\\"23:58\\\\\\",\\\\\\"22\\\\\\":\\\\\\"24:58\\\\\\",\\\\\\"23\\\\\\":\\\\\\"25:58\\\\\\",\\\\\\"24\\\\\\":\\\\\\"26:58\\\\\\"}\\",\\n        \\"IsDefault\\": true,\\n        \\"Owner\\": \\"952795****\\",\\n        \\"ProjectId\\": 9527,\\n        \\"Priority\\": 1,\\n        \\"SlaMinu\\": 30,\\n        \\"SlaHour\\": 9,\\n        \\"BaselineId\\": 1234,\\n        \\"BaselineName\\": \\"基线名称\\",\\n        \\"HourExpDetail\\": \\"{\\\\\\"1\\\\\\":\\\\\\"03:28\\\\\\",\\\\\\"2\\\\\\":\\\\\\"04:28\\\\\\",\\\\\\"3\\\\\\":\\\\\\"05:28\\\\\\",\\\\\\"4\\\\\\":\\\\\\"06:28\\\\\\",\\\\\\"5\\\\\\":\\\\\\"07:28\\\\\\",\\\\\\"6\\\\\\":\\\\\\"08:28\\\\\\",\\\\\\"7\\\\\\":\\\\\\"09:28\\\\\\",\\\\\\"8\\\\\\":\\\\\\"10:28\\\\\\",\\\\\\"9\\\\\\":\\\\\\"11:28\\\\\\",\\\\\\"10\\\\\\":\\\\\\"12:28\\\\\\",\\\\\\"11\\\\\\":\\\\\\"13:28\\\\\\",\\\\\\"12\\\\\\":\\\\\\"14:28\\\\\\",\\\\\\"13\\\\\\":\\\\\\"15:28\\\\\\",\\\\\\"14\\\\\\":\\\\\\"16:28\\\\\\",\\\\\\"15\\\\\\":\\\\\\"17:28\\\\\\",\\\\\\"16\\\\\\":\\\\\\"18:28\\\\\\",\\\\\\"17\\\\\\":\\\\\\"19:28\\\\\\",\\\\\\"18\\\\\\":\\\\\\"20:28\\\\\\",\\\\\\"19\\\\\\":\\\\\\"21:28\\\\\\",\\\\\\"20\\\\\\":\\\\\\"22:28\\\\\\",\\\\\\"21\\\\\\":\\\\\\"23:28\\\\\\",\\\\\\"22\\\\\\":\\\\\\"24:28\\\\\\",\\\\\\"23\\\\\\":\\\\\\"25:28\\\\\\",\\\\\\"24\\\\\\":\\\\\\"26:28\\\\\\"}\\",\\n        \\"UseFlag\\": true,\\n        \\"ExpHour\\": 7,\\n        \\"BaselineType\\": \\"DAILY\\",\\n        \\"ExpMinu\\": 30\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListBaselineConfigsResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Baselines>\\n            <HourSlaDetail>{\\"1\\":\\"03:58\\",\\"2\\":\\"04:58\\",\\"3\\":\\"05:58\\",\\"4\\":\\"06:58\\",\\"5\\":\\"07:58\\",\\"6\\":\\"08:58\\",\\"7\\":\\"09:58\\",\\"8\\":\\"10:58\\",\\"9\\":\\"11:58\\",\\"10\\":\\"12:58\\",\\"11\\":\\"13:58\\",\\"12\\":\\"14:58\\",\\"13\\":\\"15:58\\",\\"14\\":\\"16:58\\",\\"15\\":\\"17:58\\",\\"16\\":\\"18:58\\",\\"17\\":\\"19:58\\",\\"18\\":\\"20:58\\",\\"19\\":\\"21:58\\",\\"20\\":\\"22:58\\",\\"21\\":\\"23:58\\",\\"22\\":\\"24:58\\",\\"23\\":\\"25:58\\",\\"24\\":\\"26:58\\"}</HourSlaDetail>\\n            <IsDefault>true</IsDefault>\\n            <Owner>952795****</Owner>\\n            <ProjectId>9527</ProjectId>\\n            <Priority>1</Priority>\\n            <SlaMinu>30</SlaMinu>\\n            <SlaHour>9</SlaHour>\\n            <BaselineId>1234</BaselineId>\\n            <BaselineName>基线名称</BaselineName>\\n            <HourExpDetail>{\\"1\\":\\"03:28\\",\\"2\\":\\"04:28\\",\\"3\\":\\"05:28\\",\\"4\\":\\"06:28\\",\\"5\\":\\"07:28\\",\\"6\\":\\"08:28\\",\\"7\\":\\"09:28\\",\\"8\\":\\"10:28\\",\\"9\\":\\"11:28\\",\\"10\\":\\"12:28\\",\\"11\\":\\"13:28\\",\\"12\\":\\"14:28\\",\\"13\\":\\"15:28\\",\\"14\\":\\"16:28\\",\\"15\\":\\"17:28\\",\\"16\\":\\"18:28\\",\\"17\\":\\"19:28\\",\\"18\\":\\"20:28\\",\\"19\\":\\"21:28\\",\\"20\\":\\"22:28\\",\\"21\\":\\"23:28\\",\\"22\\":\\"24:28\\",\\"23\\":\\"25:28\\",\\"24\\":\\"26:28\\"}</HourExpDetail>\\n            <UseFlag>true</UseFlag>\\n            <ExpHour>7</ExpHour>\\n            <BaselineType>DAILY</BaselineType>\\n            <ExpMinu>30</ExpMinu>\\n        </Baselines>\\n    </Data>\\n</ListBaselineConfigsResponse>","errorExample":""}]',
      'title' => '获取基线列表',
      'summary' => '调用ListBaselineConfigs获取基线列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetBaselineKeyPath' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78230',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BaselineId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'Bizdate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期，需要使用yyyy-MM-dd\'T\'HH:mm:ssZ的UTC格式。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-07-07T00:00:00+0800',
          ),
        ),
        2 => 
        array (
          'name' => 'InGroupId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线实例周期号。天基线为1，小时基线的取值范围为\\[1,24\\]。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。
',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '关键路径信息。',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Owner' => 
                    array (
                      'description' => '节点责任人的阿里云UID。',
                      'type' => 'string',
                      'example' => '9527952****',
                    ),
                    'NodeName' => 
                    array (
                      'description' => '节点的名称。',
                      'type' => 'string',
                      'example' => '节点名称',
                    ),
                    'Bizdate' => 
                    array (
                      'description' => '实例的业务日期时间戳。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1553443200000',
                    ),
                    'ProjectId' => 
                    array (
                      'description' => '节点所在工作空间的ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1234',
                    ),
                    'InstanceId' => 
                    array (
                      'description' => '实例的ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '12345',
                    ),
                    'PrgType' => 
                    array (
                      'description' => '节点类型，常用的节点类型包括数据集成（23）、MaxCompute SQL（10）、Shell（6）和虚节点（99）。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '10',
                    ),
                    'NodeId' => 
                    array (
                      'description' => '节点的ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1234',
                    ),
                    'InGroupId' => 
                    array (
                      'description' => '实例周期号，取值范围为\\[1,288\\]。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '1',
                    ),
                    'Runs' => 
                    array (
                      'description' => '实例的运行记录。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'type' => 'object',
                        'properties' => 
                        array (
                          'Status' => 
                          array (
                            'description' => '实例的状态，包括NOT_RUN（未运行）、WAIT_TIME（等待时间）、WAIT_RESOURCE（等待资源）、RUNNING（运行中）、CHECKING（校检中）、CHECKING_CONDITION（条件检测中）、FAILURE（运行失败）和SUCCESS（运行成功）。',
                            'type' => 'string',
                            'example' => 'SUCCESS',
                          ),
                          'AbsTime' => 
                          array (
                            'description' => '实例的预计开始运行时间+历史平均运行时长得到的时间戳。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1553531402000',
                          ),
                          'BeginRunningTime' => 
                          array (
                            'description' => '实例实际开始运行的时间戳。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1553531401000',
                          ),
                          'FinishTime' => 
                          array (
                            'description' => '实例的实际运行结束时间戳。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1553531401000',
                          ),
                          'BeginCast' => 
                          array (
                            'description' => '实例预计开始运行的时间戳。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1553531686000',
                          ),
                          'EndCast' => 
                          array (
                            'description' => '实例的预计运行结束时间戳。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1553531687000',
                          ),
                          'BeginWaitResTime' => 
                          array (
                            'description' => '实例开始进入等待资源状态的时间戳。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1553531401000',
                          ),
                          'BeginWaitTimeTime' => 
                          array (
                            'description' => '实例开始进入等待时间状态的时间戳。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1553531400000',
                          ),
                        ),
                      ),
                    ),
                    'Topics' => 
                    array (
                      'description' => '实例关联的事件信息。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'type' => 'object',
                        'properties' => 
                        array (
                          'TopicName' => 
                          array (
                            'description' => '事件的名称。',
                            'type' => 'string',
                            'example' => '1234',
                          ),
                          'InstanceId' => 
                          array (
                            'description' => '实例的ID。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1234',
                          ),
                          'TopicId' => 
                          array (
                            'description' => '事件的ID。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1234',
                          ),
                          'AddTime' => 
                          array (
                            'description' => '事件发现时间戳。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1553531401000',
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.BaselineNoPermission',
            'errorMessage' => 'You are not authorized to access the baseline.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.ProjectNoPermission',
            'errorMessage' => 'You are not authorized to access the workspace.',
          ),
          2 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          5 => 
          array (
            'errorCode' => 'Invalid.Wkbench.BaselineStatusNotExist',
            'errorMessage' => 'The BaselineStatus does not exist.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true,\\n  \\"Data\\": [\\n    {\\n      \\"Owner\\": \\"9527952****\\",\\n      \\"NodeName\\": \\"节点名称\\",\\n      \\"Bizdate\\": 1553443200000,\\n      \\"ProjectId\\": 1234,\\n      \\"InstanceId\\": 12345,\\n      \\"PrgType\\": 10,\\n      \\"NodeId\\": 1234,\\n      \\"InGroupId\\": 1,\\n      \\"Runs\\": [\\n        {\\n          \\"Status\\": \\"SUCCESS\\",\\n          \\"AbsTime\\": 1553531402000,\\n          \\"BeginRunningTime\\": 1553531401000,\\n          \\"FinishTime\\": 1553531401000,\\n          \\"BeginCast\\": 1553531686000,\\n          \\"EndCast\\": 1553531687000,\\n          \\"BeginWaitResTime\\": 1553531401000,\\n          \\"BeginWaitTimeTime\\": 1553531400000\\n        }\\n      ],\\n      \\"Topics\\": [\\n        {\\n          \\"TopicName\\": \\"1234\\",\\n          \\"InstanceId\\": 1234,\\n          \\"TopicId\\": 1234,\\n          \\"AddTime\\": 1553531401000\\n        }\\n      ]\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<GetBaselineKeyPathResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <Owner>9527952****</Owner>\\n        <NodeName>节点名称</NodeName>\\n        <Bizdate>1553443200000</Bizdate>\\n        <ProjectId>1234</ProjectId>\\n        <InstanceId>12345</InstanceId>\\n        <PrgType>10</PrgType>\\n        <NodeId>1234</NodeId>\\n        <InGroupId>1</InGroupId>\\n        <Runs>\\n            <Status>SUCCESS</Status>\\n            <AbsTime>1553531402000</AbsTime>\\n            <BeginRunningTime>1553531401000</BeginRunningTime>\\n            <CycTime>1553443200000</CycTime>\\n            <Owner>9527952****</Owner>\\n            <FinishTime>1553531401000</FinishTime>\\n            <ProjectId>1234</ProjectId>\\n            <BeginCast>1553531686000</BeginCast>\\n            <InstanceId>1234</InstanceId>\\n            <EndCast>1553531687000</EndCast>\\n            <BeginWaitResTime>1553531401000</BeginWaitResTime>\\n            <InGroupId>1</InGroupId>\\n            <NodeName>节点名称</NodeName>\\n            <Bizdate>1553443200000</Bizdate>\\n            <BeginWaitTimeTime>1553531400000</BeginWaitTimeTime>\\n            <NodeId>1234</NodeId>\\n        </Runs>\\n        <Topics>\\n            <TopicName>1234</TopicName>\\n            <InstanceId>1234</InstanceId>\\n            <TopicId>1234</TopicId>\\n            <AddTime>1553531401000</AddTime>\\n        </Topics>\\n    </Data>\\n</GetBaselineKeyPathResponse>","errorExample":""}]',
      'title' => '获取基线实例的关键路径',
      'summary' => '调用GetBaselineKeyPath获取基线实例的关键路径。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetBaselineStatus' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78231',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BaselineId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'Bizdate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期，需要使用UTC格式（yyyy-MM-dd\'T\'HH:mm:ssZ）。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-07-07T00:00:00+0800',
          ),
        ),
        2 => 
        array (
          'name' => 'InGroupId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线实例的周期号。天基线为1，小时基线的取值范围为\\[1,24\\]。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '基线实例的详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '基线的状态，包括ERROR（异常）、SAFE（安全）、DANGROUS（预警）和OVER（破线）。',
                    'type' => 'string',
                    'example' => 'SAFE',
                  ),
                  'Owner' => 
                  array (
                    'description' => '基线责任人的阿里云UID。多个责任人之间使用英文逗号（,）分隔。',
                    'type' => 'string',
                    'example' => '9527952795****',
                  ),
                  'FinishTime' => 
                  array (
                    'description' => '当FinishStatus（基线实例完成状态）为FINISH（已完成）时，返回基线实例的完成时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553443200000',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '基线所在工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'Priority' => 
                  array (
                    'description' => '基线的优先级，取值范围为{1,2,5,7,8}。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'EndCast' => 
                  array (
                    'description' => '基线实例的预计产出时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553443200000',
                  ),
                  'InGroupId' => 
                  array (
                    'description' => '基线实例的周期号。天基线为1，小时基线的取值范围为\\[1,24\\]。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'BaselineName' => 
                  array (
                    'description' => '基线的名称。',
                    'type' => 'string',
                    'example' => '基线名称',
                  ),
                  'BaselineId' => 
                  array (
                    'description' => '基线的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'FinishStatus' => 
                  array (
                    'description' => '基线实例是否完成，包括UNFINISH（未完成）和FINISH（已完成）。
',
                    'type' => 'string',
                    'example' => 'UNFINISH',
                  ),
                  'Bizdate' => 
                  array (
                    'description' => '业务日期时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553443200000',
                  ),
                  'Buffer' => 
                  array (
                    'description' => '基线实例的余量，单位为秒。',
                    'type' => 'number',
                    'format' => 'float',
                    'example' => '1200',
                  ),
                  'SlaTime' => 
                  array (
                    'description' => '基线实例的承诺时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553443200000',
                  ),
                  'ExpTime' => 
                  array (
                    'description' => '基线实例的预警时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553443200000',
                  ),
                  'LastInstance' => 
                  array (
                    'description' => '最晚实例信息。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Status' => 
                      array (
                        'description' => '实例的状态，包括NOT_RUN（未运行）、WAIT_TIME（等待时间）、WAIT_RESOURCE（等待资源）、RUNNING（运行中）、CHECKING（校检中）、CHECKING_CONDITION（条件检测中）、FAILURE（运行失败）和SUCCESS（运行成功）。',
                        'type' => 'string',
                        'example' => 'SUCCESS',
                      ),
                      'Owner' => 
                      array (
                        'description' => '节点责任人的阿里云UID。',
                        'type' => 'string',
                        'example' => '9527952795****',
                      ),
                      'FinishTime' => 
                      array (
                        'description' => '实例的实际完成时间戳。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1553443200000',
                      ),
                      'NodeName' => 
                      array (
                        'description' => '节点的名称。',
                        'type' => 'string',
                        'example' => '节点名称',
                      ),
                      'ProjectId' => 
                      array (
                        'description' => '节点所在工作空间的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1234',
                      ),
                      'InstanceId' => 
                      array (
                        'description' => '实例的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '12345',
                      ),
                      'EndCast' => 
                      array (
                        'description' => '实例的预计完成时间戳。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1553443200000',
                      ),
                      'NodeId' => 
                      array (
                        'description' => '节点的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1234',
                      ),
                    ),
                  ),
                  'BlockInstance' => 
                  array (
                    'description' => '关键实例信息。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Status' => 
                      array (
                        'description' => '实例的状态，包括NOT_RUN（未运行）、WAIT_TIME（等待时间）、WAIT_RESOURCE（等待资源）、RUNNING（运行中）、CHECKING（校检中）、CHECKING_CONDITION（条件检测中）、FAILURE（运行失败）和SUCCESS（运行成功）。',
                        'type' => 'string',
                        'example' => 'SUCCESS',
                      ),
                      'Owner' => 
                      array (
                        'description' => '节点责任人的阿里云UID。',
                        'type' => 'string',
                        'example' => '9527952795****',
                      ),
                      'FinishTime' => 
                      array (
                        'description' => '实例的实际完成时间戳。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1553443200000',
                      ),
                      'NodeName' => 
                      array (
                        'description' => '节点的名称。',
                        'type' => 'string',
                        'example' => '节点名称',
                      ),
                      'ProjectId' => 
                      array (
                        'description' => '节点所在工作空间的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1234',
                      ),
                      'InstanceId' => 
                      array (
                        'description' => '实例的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '12345',
                      ),
                      'EndCast' => 
                      array (
                        'description' => '实例的预计完成时间戳。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1553443200000',
                      ),
                      'NodeId' => 
                      array (
                        'description' => '节点的ID。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1234',
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"Status\\": \\"SAFE\\",\\n    \\"Owner\\": \\"9527952795****\\",\\n    \\"FinishTime\\": 1553443200000,\\n    \\"ProjectId\\": 1234,\\n    \\"Priority\\": 1,\\n    \\"EndCast\\": 1553443200000,\\n    \\"InGroupId\\": 1,\\n    \\"BaselineName\\": \\"基线名称\\",\\n    \\"BaselineId\\": 1234,\\n    \\"FinishStatus\\": \\"UNFINISH\\",\\n    \\"Bizdate\\": 1553443200000,\\n    \\"Buffer\\": 1200,\\n    \\"SlaTime\\": 1553443200000,\\n    \\"ExpTime\\": 1553443200000,\\n    \\"LastInstance\\": {\\n      \\"Status\\": \\"SUCCESS\\",\\n      \\"Owner\\": \\"9527952795****\\",\\n      \\"FinishTime\\": 1553443200000,\\n      \\"NodeName\\": \\"节点名称\\",\\n      \\"ProjectId\\": 1234,\\n      \\"InstanceId\\": 12345,\\n      \\"EndCast\\": 1553443200000,\\n      \\"NodeId\\": 1234\\n    },\\n    \\"BlockInstance\\": {\\n      \\"Status\\": \\"SUCCESS\\",\\n      \\"Owner\\": \\"9527952795****\\",\\n      \\"FinishTime\\": 1553443200000,\\n      \\"NodeName\\": \\"节点名称\\",\\n      \\"ProjectId\\": 1234,\\n      \\"InstanceId\\": 12345,\\n      \\"EndCast\\": 1553443200000,\\n      \\"NodeId\\": 1234\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetBaselineStatusResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <Status>SAFE</Status>\\n        <Owner>9527952795****</Owner>\\n        <FinishTime>1553443200000</FinishTime>\\n        <ProjectId>1234</ProjectId>\\n        <Priority>1</Priority>\\n        <EndCast>1553443200000</EndCast>\\n        <InGroupId>1</InGroupId>\\n        <BaselineName>基线名称</BaselineName>\\n        <BaselineId>1234</BaselineId>\\n        <FinishStatus>UNFINISH</FinishStatus>\\n        <Bizdate>1553443200000</Bizdate>\\n        <Buffer>1200</Buffer>\\n        <SlaTime>1553443200000</SlaTime>\\n        <ExpTime>1553443200000</ExpTime>\\n        <LastInstance>\\n            <Status>SUCCESS</Status>\\n            <Owner>9527952795****</Owner>\\n            <FinishTime>1553443200000</FinishTime>\\n            <NodeName>节点名称</NodeName>\\n            <ProjectId>1234</ProjectId>\\n            <InstanceId>12345</InstanceId>\\n            <EndCast>1553443200000</EndCast>\\n            <NodeId>1234</NodeId>\\n        </LastInstance>\\n        <BlockInstance>\\n            <Status>SUCCESS</Status>\\n            <Owner>9527952795****</Owner>\\n            <FinishTime>1553443200000</FinishTime>\\n            <NodeName>节点名称</NodeName>\\n            <ProjectId>1234</ProjectId>\\n            <InstanceId>12345</InstanceId>\\n            <EndCast>1553443200000</EndCast>\\n            <NodeId>1234</NodeId>\\n        </BlockInstance>\\n    </Data>\\n</GetBaselineStatusResponse>","errorExample":""}]',
      'title' => '获取基线实例的详情',
      'summary' => '调用GetBaselineStatus获取基线实例的详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListBaselineStatuses' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '78296',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页的页数。默认值为1，最小值为1，最大值为30。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认值为10，最大值为100。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'Bizdate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期，需要使用UTC格式（yyyy-MM-dd\'T\'HH:mm:ssZ）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-07-07T00:00:00+0800',
          ),
        ),
        3 => 
        array (
          'name' => 'Priority',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的优先级，取值范围为{1,3,5,7,8}。多个优先级之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => '1,3,5,7,8',
          ),
        ),
        4 => 
        array (
          'name' => 'SearchText',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线名称搜索关键字。',
            'type' => 'string',
            'required' => false,
            'example' => '基线名称搜索关键字',
          ),
        ),
        5 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线责任人的阿里云UID。',
            'type' => 'string',
            'required' => false,
            'example' => '9527952795****',
          ),
        ),
        6 => 
        array (
          'name' => 'TopicId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '相关事件的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1234',
          ),
        ),
        7 => 
        array (
          'name' => 'FinishStatus',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线实例是否完成，包括UNFINISH（未完成）、FINISH（已完成）。多个状态之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'FINISH,UNFINISH',
          ),
        ),
        8 => 
        array (
          'name' => 'Status',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的状态，包括ERROR（异常）、SAFE（安全）、DANGROUS（预警）和OVER（破线）。多个状态之间使用英文逗号（,）分隔。 ',
            'type' => 'string',
            'required' => false,
            'example' => 'SAFE,DANGROUS,OVER',
          ),
        ),
        9 => 
        array (
          'name' => 'BaselineTypes',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的类型，包括DAILY（天基线）和HOURLY（小时基线）。多个类型之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'DAILY,HOURLY',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回的基线实例列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前的页数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页的大小。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '基线实例的总数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'BaselineStatuses' => 
                  array (
                    'description' => '基线实例列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '基线实例列表信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '基线的状态，包括ERROR（异常）、SAFE（安全）、DANGEROUS（预警）和OVER（破线）。',
                          'type' => 'string',
                          'example' => 'SAFE',
                        ),
                        'Owner' => 
                        array (
                          'description' => '基线责任人的阿里云UID。多个责任人之间使用英文逗号（,）分隔。',
                          'type' => 'string',
                          'example' => '9527952795****',
                        ),
                        'FinishTime' => 
                        array (
                          'description' => '当FinishStatus（基线实例完成状态）为FINISH（已完成）时，返回基线实例的完成时间戳。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1553531400000',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '基线所在工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'Priority' => 
                        array (
                          'description' => '基线的优先级，取值范围为{1,3,5,7,8}。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'EndCast' => 
                        array (
                          'description' => '基线实例的预计完成时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1553531400000',
                        ),
                        'InGroupId' => 
                        array (
                          'description' => '基线实例的周期号。天基线为1，小时基线的取值范围为\\[1,24]。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'BaselineName' => 
                        array (
                          'description' => '基线的名称。',
                          'type' => 'string',
                          'example' => '基线名称',
                        ),
                        'BaselineId' => 
                        array (
                          'description' => '基线的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'FinishStatus' => 
                        array (
                          'description' => '基线实例是否完成，包括UNFINISH（未完成）和FINISH（已完成）。',
                          'type' => 'string',
                          'example' => 'UNFINISH',
                        ),
                        'Bizdate' => 
                        array (
                          'description' => '业务日期时间戳。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1553443200000',
                        ),
                        'Buffer' => 
                        array (
                          'description' => '基线实例的余量，单位为秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1800',
                        ),
                        'SlaTime' => 
                        array (
                          'description' => '基线实例的实际完成时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1553531400000',
                        ),
                        'ExpTime' => 
                        array (
                          'description' => '基线实例的预警时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1553531400000',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"BaselineStatuses\\": [\\n      {\\n        \\"Status\\": \\"SAFE\\",\\n        \\"Owner\\": \\"9527952795****\\",\\n        \\"FinishTime\\": 1553531400000,\\n        \\"ProjectId\\": 1234,\\n        \\"Priority\\": 1,\\n        \\"EndCast\\": 1553531400000,\\n        \\"InGroupId\\": 1,\\n        \\"BaselineName\\": \\"基线名称\\",\\n        \\"BaselineId\\": 1234,\\n        \\"FinishStatus\\": \\"UNFINISH\\",\\n        \\"Bizdate\\": 1553443200000,\\n        \\"Buffer\\": 1800,\\n        \\"SlaTime\\": 1553531400000,\\n        \\"ExpTime\\": 1553531400000\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListBaselineStatusesResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <BaselineStatuses>\\n            <Status>SAFE</Status>\\n            <Owner>9527952795****</Owner>\\n            <FinishTime>1553531400000</FinishTime>\\n            <ProjectId>1234</ProjectId>\\n            <Priority>1</Priority>\\n            <EndCast>1553531400000</EndCast>\\n            <InGroupId>1</InGroupId>\\n            <BaselineName>基线名称</BaselineName>\\n            <BaselineId>1234</BaselineId>\\n            <FinishStatus>UNFINISH</FinishStatus>\\n            <Bizdate>1553443200000</Bizdate>\\n            <Buffer>1800</Buffer>\\n            <SlaTime>1553531400000</SlaTime>\\n            <ExpTime>1553531400000</ExpTime>\\n        </BaselineStatuses>\\n    </Data>\\n</ListBaselineStatusesResponse>","errorExample":""}]',
      'title' => '获取基线实例列表',
      'summary' => '调用ListBaselineStatuses获取基线实例列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteRemind' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78217',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRJGWWC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RemindId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '自定义监控报警规则的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '是否删除成功，包括true（删除成功）和false（删除失败）。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。
',
                'type' => 'string',
                'example' => '1031203110005',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.RemindNoPermission',
            'errorMessage' => 'You are not authorized to modify the reminder.',
          ),
          4 => 
          array (
            'errorCode' => 'Invalid.Wkbench.RemindNotExist',
            'errorMessage' => 'The reminder does not exist.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\"\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>true</Data>\\n<ErrorCode>1031203110005</ErrorCode>\\n<ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '删除自定义监控报警规则',
      'summary' => '调用DeleteRemind删除自定义监控报警规则。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateRemind' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78381',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRJGWWC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RemindId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '自定义规则的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'RemindName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '自定义规则的名称，不能超过128个字符。',
            'type' => 'string',
            'required' => false,
            'example' => 'update_remindname',
          ),
        ),
        2 => 
        array (
          'name' => 'DndEnd',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '免打扰的截止时间，即在设置的时间之前不会发送报警。格式为hh:mm。hh的取值范围为\\[0,23\\] ，mm的取值范围为\\[0,59\\]。',
            'type' => 'string',
            'required' => false,
            'example' => '08:00',
          ),
        ),
        3 => 
        array (
          'name' => 'RemindUnit',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '监控对象的类型。取值如下：
- NODE（节点）
- BASELINE（基线）
- PROJECT（工作空间）
- BIZPROCESS（业务流程）',
            'type' => 'string',
            'required' => false,
            'example' => 'NODE',
            'enum' => 
            array (
              0 => 'NODE',
              1 => 'BASELINE',
              2 => 'PROJECT',
              3 => 'BIZPROCESS',
            ),
          ),
        ),
        4 => 
        array (
          'name' => 'NodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '监控对象为节点时的节点ID。一个规则最多监控50个节点，多个节点ID之间使用英文逗号（,）分隔。
当RemindUnit参数取值为NODE（节点）时，当前参数生效。',
            'type' => 'string',
            'required' => false,
            'example' => '1,2,3',
          ),
        ),
        5 => 
        array (
          'name' => 'BaselineIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '监控对象为基线时的基线ID。一个规则最多监控5条基线，多个基线ID之间使用英文逗号（,）分隔。
当RemindUnit参数取值为BASELINE（基线）时，当前参数生效。',
            'type' => 'string',
            'required' => false,
            'example' => '1,2,3',
          ),
        ),
        6 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '监控对象为工作空间时的工作空间ID。一个规则只能监控一个工作空间。
当RemindUnit参数取值为PROJECT（工作空间）时，当前参数生效。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1234',
          ),
        ),
        7 => 
        array (
          'name' => 'BizProcessIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '监控对象为业务流程时的业务流程ID。一个规则最多监控5个业务流程，多个业务流程ID之间使用英文逗号（,）分隔。
当RemindUnit参数取值为BIZPROCESS（业务流程）时，当前参数生效。',
            'type' => 'string',
            'required' => false,
            'example' => '1,2,3',
          ),
        ),
        8 => 
        array (
          'name' => 'RemindType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '触发报警规则的条件。取值如下：
- FINISHED（完成）：表示从实例运行的起始时间点开始监控，在任务运行成功时系统发送报警。
- UNFINISHED（未完成）：表示从实例运行的起始时间点开始监控，到指定的目标时间点任务仍未结束运行，则系统发送报警。
- ERROR（出错）：表示从实例运行的起始时间点开始监控，当任务运行出错时，系统发送报警。
-  CYCLE_UNFINISHED（周期未完成）：表示在指定的周期内，实例仍未结束运行，则系统发送报警。通常用于监控以小时为周期单位的实例任务。
- TIMEOUT（运行超时）：表示从实例运行的起始时间点开始监控，到指定的运行时长后，该任务仍未结束运行，则系统发送报警。通常用于监控实例任务的运行时间。

更多触发报警规则的内容，详情请参见[自定义规则](~~138172~~)。',
            'type' => 'string',
            'required' => false,
            'example' => 'FINISHED',
            'enum' => 
            array (
              0 => 'FINISHED',
              1 => 'UNFINISHED',
              2 => 'ERROR',
              3 => 'CYCLE_UNFINISHED',
              4 => 'TIMEOUT',
              5 => 'EXHAUSTED_ERROR',
            ),
          ),
        ),
        9 => 
        array (
          'name' => 'MaxAlertTimes',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '最大报警次数。取值范围为\\[1,10\\]，默认值为3。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '10',
            'minimum' => '1',
            'example' => '3',
            'default' => '3',
          ),
        ),
        10 => 
        array (
          'name' => 'AlertInterval',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '报警间隔，单位为秒。最小值为1200，默认值为1800。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => false,
            'maximum' => '1800',
            'minimum' => '1200',
            'example' => '1800',
            'default' => '1800',
          ),
        ),
        11 => 
        array (
          'name' => 'Detail',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '不同触发条件的参数配置详情，具体如下：
- 当RemindType（触发条件）取值为FINISHED（完成）时，当前参数配置为空。
- 当RemindType（触发条件）取值为UNFINISHED（未完成）时，当前参数的配置格式示例为{"hour":23,"minu":59}。hour的取值范围为\\[0,47\\]，minu的取值范围为\\[0,59\\]。
- 当RemindType（触发条件）取值为ERROR（出错）时，当前参数配置为空。
- 当RemindType（触发条件）取值为CYCLE_UNFINISHED（周期未完成）时，当前参数的配置格式示例为{"1":"05:50","2":"06:50","3":"07:50","4":"08:50","5":"09:50","6":"10:50","7":"11:50","8":"12:50","9":"13:50","10":"14:50","11":"15:50","12":"16:50","13":"17:50","14":"18:50","15":"19:50","16":"20:50","17":"21:50","18":"22:50","19":"23:50","20":"24:50","21":"25:50"}。
JSON字符串的key为周期号，取值范围为\\[1,288\\]；value为该周期对应的未完成时间，格式为hh:mm。hh的取值范围为\\[0,47\\]，mm的取值范围为\\[0,59\\]。
- 当RemindType（触发条件）取值为TIMEOUT（运行超时）时，当前参数的配置格式示例为1800，单位为秒。即从实例开始运行起，运行超过30分钟触发报警。',
            'type' => 'string',
            'required' => false,
            'example' => '{"hour":23,"minu":59}',
          ),
        ),
        12 => 
        array (
          'name' => 'AlertUnit',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '报警的接收对象，包括OWNER（任务责任人）和OTHER（指定的用户）。',
            'type' => 'string',
            'required' => false,
            'example' => 'OWNER',
            'default' => '',
            'enum' => 
            array (
              0 => 'OTHER',
              1 => 'OWNER',
            ),
          ),
        ),
        13 => 
        array (
          'name' => 'AlertMethods',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '报警的方式，取值如下：
- MAIL（邮件）
- SMS（短信）
- PHONE（电话），仅DataWorks专业版及以上版本支持使用电话方式接收报警。
- DINGROBOTS（钉钉机器人），仅当配置RobotUrls参数后，该报警方式才会生效。
- Webhooks（企业微信或飞书机器人），仅当配置 Webhooks 参数后，该报警方式才会生效。

多个报警方式之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'SMS,MAIL',
            'default' => '',
            'enum' => 
            array (
            ),
          ),
        ),
        14 => 
        array (
          'name' => 'AlertTargets',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '不同报警接收人的配置详情：
- 当AlertUnit（报警接收人）取值为OWNER（节点任务责任人）时，当前参数配置为空。
- 当AlertUnit（报警接收人）取值为OTHER（指定的用户）时，当前参数配置为指定用户的阿里云UID。多个阿里云UID之间使用英文逗号（,）分隔，最多支持指定10个用户接收报警。
',
            'type' => 'string',
            'required' => false,
            'example' => '9527952795279527',
          ),
        ),
        15 => 
        array (
          'name' => 'UseFlag',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否启用报警规则，取值如下：
- true（开启）
- false（关闭）',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        16 => 
        array (
          'name' => 'RobotUrls',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '钉钉群机器人的WebHook地址，多个WebHook地址之间使用英文逗号（,）分隔。
当该参数配置为undefined时，系统会清空钉钉机器人的WebHook地址。',
            'type' => 'string',
            'required' => false,
            'example' => 'https://oapi.dingtalk.com/robot/send?access_token=******************************',
          ),
        ),
        17 => 
        array (
          'name' => 'Webhooks',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '企业微信或飞书机器人的webhook地址，多个webhook地址之间使用英文逗号（,）分隔。alertMethods 中需要包含 WEBHOOKS 告警方式。当该参数配置为undefined时，系统会清空WebHook地址。

仅DataWorks企业版支持。
可用地域：华东2（上海）、西南1（成都）、华北3（张家口）、华北2（北京）、华东1（杭州）、华南1（深圳）、中国（香港）、欧洲中部 1（法兰克福）、亚太东南1（新加坡）。',
            'type' => 'string',
            'required' => false,
            'example' => 'https://open.feishu.cn/open-apis/bot/v2/hook/*******
',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '更新自定义监控规则的返回结果。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true（成功）
- false（失败）
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.BaselineNoPermission',
            'errorMessage' => 'You are not authorized to access the baseline.',
          ),
          2 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.ProjectNoPermission',
            'errorMessage' => 'You are not authorized to access the workspace.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          5 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.RemindNoPermission',
            'errorMessage' => 'You are not authorized to modify the reminder.',
          ),
          6 => 
          array (
            'errorCode' => 'Invalid.Wkbench.RemindNotExist',
            'errorMessage' => 'The reminder does not exist.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\"\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>true</Data>\\n<ErrorCode>1031203110005</ErrorCode>\\n<ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '更新自定义报警规则',
      'summary' => '调用UpdateRemind更新自定义监控规则。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateRemind' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78196',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRJGWWC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RemindName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '自定义规则的名称，不能超过128个字符。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'test_error_remind',
          ),
        ),
        1 => 
        array (
          'name' => 'DndEnd',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '免打扰截止时间，格式为hh:mm。hh的取值范围为\\[0,23\\]，mm的取值范围为\\[0,59\\]。 ',
            'type' => 'string',
            'required' => false,
            'example' => '08:00',
          ),
        ),
        2 => 
        array (
          'name' => 'RemindUnit',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '对象的类型，包括NODE（任务节点）、BASELINE（基线） 、PROJECT（工作空间）和BIZPROCESS（业务流程）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'NODE',
            'enum' => 
            array (
              0 => 'NODE',
              1 => 'BASELINE',
              2 => 'PROJECT',
              3 => 'BIZPROCESS',
            ),
          ),
        ),
        3 => 
        array (
          'name' => 'NodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'RemindUnit（对象类型）为NODE（任务节点）时，监控的任务节点ID。多个ID之间使用英文逗号（,）分隔，一个规则最多监控50个节点。',
            'type' => 'string',
            'required' => false,
            'example' => '1,2,3',
          ),
        ),
        4 => 
        array (
          'name' => 'BaselineIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '当RemindUnit（对象类型）为BASELINE（基线）时，监控的基线ID。多个ID之间使用英文逗号（,）分隔，一个规则最多监控5条基线。',
            'type' => 'string',
            'required' => false,
            'example' => '1,2,3',
          ),
        ),
        5 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '当RemindUnit（对象类型）为PROJECT（工作空间）时，监控的工作空间ID。一个规则只能监控一个工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '9527',
          ),
        ),
        6 => 
        array (
          'name' => 'BizProcessIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '当RemindUnit（对象类型）为BIZPROCESS（业务流程）时，监控的业务流程ID。多个业务流程ID之间使用英文逗号（,）分隔，一个规则最多监控5个业务流程。',
            'type' => 'string',
            'required' => false,
            'example' => '1,2,3',
          ),
        ),
        7 => 
        array (
          'name' => 'RemindType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '触发条件，包括FINISHED（完成）、UNFINISHED（未完成）、ERROR（出错）、 CYCLE_UNFINISHED（周期未完成）和TIMEOUT（运行超时）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'FINISHED',
            'enum' => 
            array (
              0 => 'FINISHED',
              1 => 'UNFINISHED',
              2 => 'ERROR',
              3 => 'CYCLE_UNFINISHED',
              4 => 'TIMEOUT',
              5 => 'EXHAUSTED_ERROR',
            ),
          ),
        ),
        8 => 
        array (
          'name' => 'MaxAlertTimes',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '最大报警次数。最小值为1，最大值为10，默认值为3。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '10',
            'minimum' => '1',
            'example' => '2',
            'default' => '3',
          ),
        ),
        9 => 
        array (
          'name' => 'AlertInterval',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '最小报警间隔，单位为秒。最小值为1200，默认值为1800。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'minimum' => '1200',
            'example' => '1800',
            'default' => '1800',
          ),
        ),
        10 => 
        array (
          'name' => 'Detail',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '不同触发条件的说明如下：

- 当RemindType（触发条件）为FINISHED（完成）时，传空。

- 当RemindType（触发条件）为UNFINISHED（未完成）时，传参格式为{"hour":23,"minu":59}。hour的取值范围为\\[0,47\\]，minu的取值范围为\\[0,59\\]。

- 当RemindType（触发条件）为ERROR（出错）时，传空。

- 当RemindType（触发条件）为CYCLE_UNFINISHED（周期未完成）时，传参格式为{"1":"05:50","2":"06:50","3":"07:50","4":"08:50","5":"09:50","6":"10:50","7":"11:50","8":"12:50","9":"13:50","10":"14:50","11":"15:50","12":"16:50","13":"17:50","14":"18:50","15":"19:50","16":"20:50","17":"21:50","18":"22:50","19":"23:50","20":"24:50","21":"25:50"}。JSON字符串key为周期号，取值范围为\\[1,288\\]。value为该周期对应的未完成时间，格式为hh:mm。hh的取值范围为\\[0,47\\]，mm的取值范围为\\[0,59\\]。

- 当RemindType（触发条件）为TIMEOUT（运行超时）时，传参格式为1800，单位为秒。即从开始运行起，运行超过30分钟触发报警。',
            'type' => 'string',
            'required' => false,
            'example' => '{"hour":23,"minu":59}',
          ),
        ),
        11 => 
        array (
          'name' => 'AlertUnit',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '报警接收对象的粒度，包括OWNER（任务责任人）和OTHER（指定的人）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'OWNER',
            'default' => '',
            'enum' => 
            array (
              0 => 'OTHER',
              1 => 'OWNER',
            ),
          ),
        ),
        12 => 
        array (
          'name' => 'AlertMethods',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '报警方式，取值如下：
- MAIL：邮件。
- SMS：短信。
<props="intl">可使用短信告警的地域为：新加坡、马来西亚（吉隆坡）、德国（法兰克福）。</props>
<props="china">- PHONE：电话。仅DataWorks专业版及以上版本支持。</props>
- Webhooks（企业微信或飞书机器人），仅当配置 Webhooks 参数后，该报警方式才会生效。

多个报警方式之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'SMS,MAIL',
          ),
        ),
        13 => 
        array (
          'name' => 'AlertTargets',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '- 当AlertUnit（报警接收人）为OWNER（节点任务责任人）时，传空。

- 当AlertUnit（报警接收人）为OTHER（指定的人）时，传入指定用户的阿里云UID。多个阿里云UID之间使用英文逗号（,）分隔，最多支持10个。',
            'type' => 'string',
            'required' => false,
            'example' => '9527952795279527',
          ),
        ),
        14 => 
        array (
          'name' => 'RobotUrls',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '钉钉群机器人的webhook地址，多个webhook地址之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'https://oapi.dingtalk.com/robot/send?access_token=******************************',
          ),
        ),
        15 => 
        array (
          'name' => 'Webhooks',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '企业微信或飞书机器人的webhook地址，多个webhook地址之间使用英文逗号（,）分隔。alertMethods 中需要包含 WEBHOOKS 告警方式。

仅DataWorks企业版支持。
可用地域：华东2（上海）、西南1（成都）、华北3（张家口）、华北2（北京）、华东1（杭州）、华南1（深圳）、中国（香港）、欧洲中部 1（法兰克福）、亚太东南1（新加坡）。',
            'type' => 'string',
            'required' => false,
            'example' => 'https://open.feishu.cn/open-apis/bot/v2/hook/*******',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '请求返回结果',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '创建自定义监控规则成功后，返回的自定义规则ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '1234',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.BaselineNoPermission',
            'errorMessage' => 'You are not authorized to access the baseline.',
          ),
          2 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.ProjectNoPermission',
            'errorMessage' => 'You are not authorized to access the workspace.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          5 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.NoProject',
            'errorMessage' => 'You have not joined any project.',
          ),
          6 => 
          array (
            'errorCode' => 'Invalid.Wkbench.NodeNotExist',
            'errorMessage' => 'The node does not exist.',
          ),
          7 => 
          array (
            'errorCode' => 'Invalid.Wkbench.BaselineNotExist',
            'errorMessage' => 'The baseline does not exist.',
          ),
          8 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.RemindOverlimit',
            'errorMessage' => 'The maximum number of reminders is exceeded.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 1234,\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateRemindResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>1234</Data>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>1031203110005</ErrorCode>\\n</CreateRemindResponse>","errorExample":""}]',
      'title' => '创建自定义报警规则',
      'summary' => '调用CreateRemind创建自定义报警规则。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetRemind' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78286',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRJGWWC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RemindId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '自定义监控规则的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回的数据类型。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFGH-IJKLMNOPQ',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '自定义监控规则的详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'MaxAlertTimes' => 
                  array (
                    'description' => '最大报警次数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '3',
                  ),
                  'RemindUnit' => 
                  array (
                    'description' => '对象的类型，包括NODE（任务节点）、BASELINE（基线）、PROJECT（工作空间）和BIZPROCESS（业务流程）。',
                    'type' => 'string',
                    'example' => 'NODE',
                  ),
                  'AlertInterval' => 
                  array (
                    'description' => '最小报警间隔，单位为秒。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1800',
                  ),
                  'Useflag' => 
                  array (
                    'description' => '自定义监控规则是否开启，包括true（开启）和false（关闭）。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'Founder' => 
                  array (
                    'description' => '自定义监控规则创建人的阿里云UID。',
                    'type' => 'string',
                    'example' => '9527951795****',
                  ),
                  'RemindId' => 
                  array (
                    'description' => '自定义监控规则的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'DndEnd' => 
                  array (
                    'description' => '免打扰截止时间，格式为hh:mm。hh的取值范围为\\[0,23\\]，mm的取值范围为\\[0,59\\]。',
                    'type' => 'string',
                    'example' => '08:00',
                  ),
                  'RemindType' => 
                  array (
                    'description' => '触发条件，包括FINISHED（完成）、UNFINISHED（未完成）、ERROR（出错）、CYCLE_UNFINISHED（周期未完成）和TIMEOUT（运行超时）。',
                    'type' => 'string',
                    'example' => 'FINISHED',
                  ),
                  'AlertUnit' => 
                  array (
                    'description' => '报警接收对象的粒度，包括OWNER（任务责任人）和OTHER（指定的人）。',
                    'type' => 'string',
                    'example' => 'OWNER',
                  ),
                  'DndStart' => 
                  array (
                    'description' => '免打扰起始时间，格式为hh:mm。hh的取值范围为\\[0,23\\]，mm的取值范围为\\[0,59\\]。',
                    'type' => 'string',
                    'example' => '00:00',
                  ),
                  'RemindName' => 
                  array (
                    'description' => '规则的名称。',
                    'type' => 'string',
                    'example' => '规则名称',
                  ),
                  'Detail' => 
                  array (
                    'description' => '- 当RemindType（触发条件）为FINISHED（完成）时，返回空。

- 当RemindType（触发条件）为UNFINISHED（未完成）时，返回格式为{"hour":23,"minu":59}。hour的取值范围为\\[0,47\\]，minu的取值范围为\\[0,59\\]。

- 当RemindType（触发条件）为ERROR（出错）时，返回空。

- 当RemindType（触发条件）为CYCLE_UNFINISHED（周期未完成）时，返回格式为{"1":"05:50","2":"06:50","3":"07:50","4":"08:50","5":"09:50","6":"10:50","7":"11:50","8":"12:50","9":"13:50","10":"14:50","11":"15:50","12":"16:50","13":"17:50","14":"18:50","15":"19:50","16":"20:50","17":"21:50","18":"22:50","19":"23:50","20":"24:50","21":"25:50"}。JSON字符串key为周期号，取值范围为\\[1,288\\]。value为该周期对应的未完成时间，格式为hh:mm。hh的取值范围为\\[0,47\\]，mm的取值范围为\\[0,59\\]。

- 当RemindType（触发条件）为TIMEOUT（运行超时）时，返回格式为1800，单位为秒。即从开始运行起，运行超过30分钟触发报警。',
                    'type' => 'string',
                    'example' => '{"hour":23,"minu":59}',
                  ),
                  'Robots' => 
                  array (
                    'description' => '钉钉群机器人的webhook地址列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回的数据类型。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'WebUrl' => 
                        array (
                          'description' => '钉钉群机器人的webhook地址。',
                          'type' => 'string',
                          'example' => 'https://oapi.dingtalk.com/robot/send?access_token=******************************',
                        ),
                        'AtAll' => 
                        array (
                          'description' => '是否@所有人，包括true（是）和false（否）。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                      ),
                    ),
                  ),
                  'Nodes' => 
                  array (
                    'description' => '当RemindUnit（对象类型）为NODE（任务节点）时，该规则监控的节点列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回的数据类型。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Owner' => 
                        array (
                          'description' => '节点责任人的阿里云UID。',
                          'type' => 'string',
                          'example' => '9527951795****',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点的名称。',
                          'type' => 'string',
                          'example' => '节点名称',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '节点所在工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                      ),
                    ),
                  ),
                  'Baselines' => 
                  array (
                    'description' => '当RemindUnit（对象类型）为BASELINE（基线）时，该规则监控的基线列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回的数据类型。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'BaselineName' => 
                        array (
                          'description' => '基线的名称。',
                          'type' => 'string',
                          'example' => '基线名称',
                        ),
                        'BaselineId' => 
                        array (
                          'description' => '基线的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                      ),
                    ),
                  ),
                  'Projects' => 
                  array (
                    'description' => '当RemindUnit（对象类型）为PROJECT（工作空间）时，该规则监控的工作空间列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回的数据类型。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                      ),
                    ),
                  ),
                  'BizProcesses' => 
                  array (
                    'description' => '当RemindUnit（对象类型）为BIZPROCESS（业务流程）时，该规则监控的业务流程列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回的数据类型。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'BizProcessName' => 
                        array (
                          'description' => '业务流程名称。',
                          'type' => 'string',
                          'example' => '业务流程名称',
                        ),
                        'BizId' => 
                        array (
                          'description' => '业务流程ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '9527',
                        ),
                      ),
                    ),
                  ),
                  'AlertTargets' => 
                  array (
                    'description' => '报警接收人说明。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '- 当AlertUnit（报警接收人）为OWNER（节点任务责任人）时，返回空。

- 当AlertUnit（报警接收人）为OTHER（指定的人）时，返回指定用户的阿里云UID。多个阿里云UID之间使用英文逗号（,）分隔。',
                      'type' => 'string',
                      'example' => '9527952795279527',
                    ),
                  ),
                  'AlertMethods' => 
                  array (
                    'description' => '报警方式。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '报警的方式，取值如下：
- MAIL（邮件）
- SMS（短信）
- <props="intl">可使用短信告警的地域为：新加坡、马来西亚（吉隆坡）、德国（法兰克福）。</props><props="china">PHONE（电话，仅DataWorks专业版及以上版本支持）。</props>
多个报警方式之间使用英文逗号（,）分隔。',
                      'type' => 'string',
                      'example' => 'SMS,MAIL',
                    ),
                  ),
                  'Webhooks' => 
                  array (
                    'description' => 'WebHook信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '企业微信或飞书机器人的WebHook地址，多个WebHook地址之间使用英文逗号（,）分隔。AlertMethods中需要包含WebHook告警方式。
仅DataWorks企业版支持。
可用地域：华东2（上海）、西南1（成都）、华北3（张家口）、华北2（北京）、华东1（杭州）、华南1（深圳）、中国（香港）、欧洲中部 1（法兰克福）、亚太东南1（新加坡）。',
                      'type' => 'string',
                      'example' => 'https://open.feishu.cn/open-apis/bot/v2/hook/*******',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFGH-IJKLMNOPQ\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"MaxAlertTimes\\": 3,\\n    \\"RemindUnit\\": \\"NODE\\",\\n    \\"AlertInterval\\": 1800,\\n    \\"Useflag\\": true,\\n    \\"Founder\\": \\"9527951795****\\",\\n    \\"RemindId\\": 1234,\\n    \\"DndEnd\\": \\"08:00\\",\\n    \\"RemindType\\": \\"FINISHED\\",\\n    \\"AlertUnit\\": \\"OWNER\\",\\n    \\"DndStart\\": \\"00:00\\",\\n    \\"RemindName\\": \\"规则名称\\",\\n    \\"Detail\\": \\"{\\\\\\"hour\\\\\\":23,\\\\\\"minu\\\\\\":59}\\",\\n    \\"Robots\\": [\\n      {\\n        \\"WebUrl\\": \\"https://oapi.dingtalk.com/robot/send?access_token=******************************\\",\\n        \\"AtAll\\": true\\n      }\\n    ],\\n    \\"Nodes\\": [\\n      {\\n        \\"Owner\\": \\"9527951795****\\",\\n        \\"NodeName\\": \\"节点名称\\",\\n        \\"NodeId\\": 1234,\\n        \\"ProjectId\\": 1234\\n      }\\n    ],\\n    \\"Baselines\\": [\\n      {\\n        \\"BaselineName\\": \\"基线名称\\",\\n        \\"BaselineId\\": 1234\\n      }\\n    ],\\n    \\"Projects\\": [\\n      {\\n        \\"ProjectId\\": 1234\\n      }\\n    ],\\n    \\"BizProcesses\\": [\\n      {\\n        \\"BizProcessName\\": \\"业务流程名称\\",\\n        \\"BizId\\": 9527\\n      }\\n    ],\\n    \\"AlertTargets\\": [\\n      \\"9527952795279527\\"\\n    ],\\n    \\"AlertMethods\\": [\\n      \\"SMS,MAIL\\"\\n    ],\\n    \\"Webhooks\\": [\\n      \\"https://open.feishu.cn/open-apis/bot/v2/hook/*******\\"\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetRemindResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFGH-IJKLMNOPQ</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <MaxAlertTimes>3</MaxAlertTimes>\\n        <RemindUnit>NODE</RemindUnit>\\n        <AlertInterval>1800</AlertInterval>\\n        <Useflag>true</Useflag>\\n        <Founder>9527951795****</Founder>\\n        <RemindId>1234</RemindId>\\n        <DndEnd>08:00</DndEnd>\\n        <RemindType>FINISHED</RemindType>\\n        <AlertUnit>OWNER</AlertUnit>\\n        <DndStart>00:00</DndStart>\\n        <RemindName>规则名称</RemindName>\\n        <Detail>{\\"hour\\":23,\\"minu\\":59}</Detail>\\n        <Robots>\\n            <WebUrl>https://oapi.dingtalk.com/robot/send?access_token=******************************</WebUrl>\\n            <AtAll>true</AtAll>\\n        </Robots>\\n        <Nodes>\\n            <Owner>9527951795****</Owner>\\n            <NodeName>节点名称</NodeName>\\n            <NodeId>1234</NodeId>\\n            <ProjectId>1234</ProjectId>\\n        </Nodes>\\n        <Baselines>\\n            <BaselineName>基线名称</BaselineName>\\n            <BaselineId>1234</BaselineId>\\n        </Baselines>\\n        <Projects>\\n            <ProjectId>1234</ProjectId>\\n        </Projects>\\n        <BizProcesses>\\n            <BizProcessName>业务流程名称</BizProcessName>\\n            <BizId>9527</BizId>\\n        </BizProcesses>\\n        <AlertTargets>9527952795279527</AlertTargets>\\n        <AlertMethods>SMS,MAIL</AlertMethods>\\n        <Webhooks>https://open.feishu.cn/open-apis/bot/v2/hook/*******</Webhooks>\\n    </Data>\\n</GetRemindResponse>","errorExample":""}]',
      'title' => '获取自定义监控报警规则详情',
      'summary' => '调用GetRemind接口，获取自定义监控报警规则的详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListReminds' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '78333',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRJGWWC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页的页数。默认值为1，最小值为1，最大值为30。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'Founder',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '创建人的阿里云UID。',
            'type' => 'string',
            'required' => false,
            'example' => '9527952795****',
          ),
        ),
        3 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '规则的对象，任务节点ID。您可以根据任务节点ID搜索覆盖该任务节点的自定义监控规则。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1234',
          ),
        ),
        4 => 
        array (
          'name' => 'RemindTypes',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '触发条件，包括FINISHED（完成）、UNFINISHED（未完成）、ERROR（出错）、CYCLE_UNFINISHED（周期未完成）和TIMEOUT（运行超时）。多个触发条件之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'FINISHED,ERROR',
          ),
        ),
        5 => 
        array (
          'name' => 'AlertTarget',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '报警接收人的阿里云UID。',
            'type' => 'string',
            'required' => false,
            'example' => '9527952795****',
          ),
        ),
        6 => 
        array (
          'name' => 'SearchText',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '搜索规则名称。',
            'type' => 'string',
            'required' => false,
            'example' => '模糊搜索规则名称',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回的自定义监控规则列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前的页数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页的大小。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '自定义监控规则的总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Reminds' => 
                  array (
                    'description' => '自定义监控规则列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '自定义监控规则列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Founder' => 
                        array (
                          'description' => '规则创建人的阿里云UID。',
                          'type' => 'string',
                          'example' => '952795****',
                        ),
                        'RemindId' => 
                        array (
                          'description' => '自定义监控规则的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'AlertUnit' => 
                        array (
                          'description' => '报警接收对象的粒度，包括OWNER（任务责任人）和OTHER（指定的人）。',
                          'type' => 'string',
                          'example' => 'OWNER',
                        ),
                        'RemindType' => 
                        array (
                          'description' => '触发条件，包括FINISHED（完成）、UNFINISHED（未完成）、ERROR（出错）、CYCLE_UNFINISHED（周期未完成）和TIMEOUT（运行超时）。',
                          'type' => 'string',
                          'example' => 'FINISHED',
                        ),
                        'DndEnd' => 
                        array (
                          'description' => '免打扰截止时间，格式为hh:mm。hh的取值范围为\\[0,23\\]，mm的取值范围为\\[0,59\\]。',
                          'type' => 'string',
                          'example' => '08:00',
                        ),
                        'DndStart' => 
                        array (
                          'description' => '免打扰起始时间，格式为hh:mm。hh的取值范围为\\[0,23\\]，mm的取值范围为\\[0,59\\]。',
                          'type' => 'string',
                          'example' => '00:00',
                        ),
                        'RemindUnit' => 
                        array (
                          'description' => '对象的类型，包括NODE（任务节点）、BASELINE（基线）、PROJECT（工作空间）和BIZPROCESS（业务流程）。',
                          'type' => 'string',
                          'example' => 'NODE',
                        ),
                        'Useflag' => 
                        array (
                          'description' => '规则是否开启，包括true（开启）和false（关闭）。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'RemindName' => 
                        array (
                          'description' => '自定义监控规则的名称。',
                          'type' => 'string',
                          'example' => '规则名称',
                        ),
                        'AlertTargets' => 
                        array (
                          'description' => '报警接收人的阿里云UID列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '报警接收人的阿里云UID列表。',
                            'type' => 'string',
                            'example' => '952795****',
                          ),
                        ),
                        'NodeIds' => 
                        array (
                          'description' => '当RemindUnit（对象类型）为NODE（任务节点）时，监控的节点ID列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '当RemindUnit（对象类型）为NODE（任务节点）时，监控的节点ID列表。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1234',
                          ),
                        ),
                        'BizProcessIds' => 
                        array (
                          'description' => '当RemindUnit（对象类型）为BIZPROCESS（业务流程）时，监控的基线ID列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '当RemindUnit（对象类型）为BIZPROCESS（业务流程）时，监控的基线ID列表。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '9527',
                          ),
                        ),
                        'ProjectIds' => 
                        array (
                          'description' => '当RemindUnit（对象类型）为PROJECT（工作空间）时，监控的节点ID列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '当RemindUnit（对象类型）为PROJECT（工作空间）时，监控的节点ID列表。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1234',
                          ),
                        ),
                        'BaselineIds' => 
                        array (
                          'description' => '当RemindUnit（对象类型）为BASELINE（基线）时，监控的基线ID列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '当RemindUnit（对象类型）为BASELINE（基线）时，监控的基线ID列表。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '9527',
                          ),
                        ),
                        'AlertMethods' => 
                        array (
                          'description' => '报警的方式，包括MAIL（邮件）、SMS（短信）和PHONE（电话，仅DataWorks专业版及以上版本支持）。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '报警的方式，包括MAIL（邮件）、SMS（短信）和PHONE（电话，仅DataWorks专业版及以上版本支持）。',
                            'type' => 'string',
                            'example' => 'SMS',
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Reminds\\": [\\n      {\\n        \\"Founder\\": \\"952795****\\",\\n        \\"RemindId\\": 1234,\\n        \\"AlertUnit\\": \\"OWNER\\",\\n        \\"RemindType\\": \\"FINISHED\\",\\n        \\"DndEnd\\": \\"08:00\\",\\n        \\"DndStart\\": \\"00:00\\",\\n        \\"RemindUnit\\": \\"NODE\\",\\n        \\"Useflag\\": true,\\n        \\"RemindName\\": \\"规则名称\\",\\n        \\"AlertTargets\\": [\\n          \\"952795****\\"\\n        ],\\n        \\"NodeIds\\": [\\n          1234\\n        ],\\n        \\"BizProcessIds\\": [\\n          9527\\n        ],\\n        \\"ProjectIds\\": [\\n          1234\\n        ],\\n        \\"BaselineIds\\": [\\n          9527\\n        ],\\n        \\"AlertMethods\\": [\\n          \\"SMS\\"\\n        ]\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListRemindsResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Reminds>\\n            <Founder>952795****</Founder>\\n            <RemindId>1234</RemindId>\\n            <AlertUnit>OWNER</AlertUnit>\\n            <RemindType>FINISHED</RemindType>\\n            <DndEnd>08:00</DndEnd>\\n            <DndStart>00:00</DndStart>\\n            <RemindUnit>NODE</RemindUnit>\\n            <Useflag>true</Useflag>\\n            <RemindName>规则名称</RemindName>\\n            <AlertTargets>952795****</AlertTargets>\\n            <NodeIds>1234</NodeIds>\\n            <BizProcessIds>9527</BizProcessIds>\\n            <ProjectIds>1234</ProjectIds>\\n            <BaselineIds>9527</BaselineIds>\\n            <AlertMethods>SMS</AlertMethods>\\n        </Reminds>\\n    </Data>\\n</ListRemindsResponse>","errorExample":""}]',
      'title' => '获取自定义监控规则列表',
      'summary' => '获取或搜索自定义监控规则列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListTopics' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78338',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BeginTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '起始发现时间，需要使用UTC格式（yyyy-MM-dd\'T\'HH:mm:ssZ）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2019-03-24T00:00:00+0800',
          ),
        ),
        1 => 
        array (
          'name' => 'EndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '截止发现时间，需要使用UTC格式（yyyy-MM-dd\'T\'HH:mm:ssZ）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2019-03-25T23:00:00+0800',
          ),
        ),
        2 => 
        array (
          'name' => 'TopicTypes',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '事件的类型，包括SLOW（变慢）和ERROR（出错）。多个事件类型之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'ERROR,SLOW',
          ),
        ),
        3 => 
        array (
          'name' => 'TopicStatuses',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '事件的状态，包括IGNORE（已忽略）、NEW（新发现）、FIXING（处理中）和RECOVER（已恢复）。多个事件状态之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'IGNORE,NEW,FIXING,RECOVER',
          ),
        ),
        4 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '事件关联的任务节点ID，与参数InstanceId互斥。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1234',
          ),
        ),
        5 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '事件关联的实例ID，与参数NodeId互斥。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '12345',
          ),
        ),
        6 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '事件责任人的阿里云UID。',
            'type' => 'string',
            'required' => false,
            'example' => '952795****',
          ),
        ),
        7 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页的页数。默认值为1，最小值为1，最大值为30。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '30',
            'minimum' => '1',
            'example' => '1',
            'default' => '',
          ),
        ),
        8 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '100',
            'minimum' => '1',
            'example' => '10',
            'default' => '',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回的事件列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前的页数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页的大小。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '事件的总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Topics' => 
                  array (
                    'description' => '事件列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TopicName' => 
                        array (
                          'description' => '事件的名称。',
                          'type' => 'string',
                          'example' => '1234出错',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '任务节点所在工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'NodeOwner' => 
                        array (
                          'description' => '任务节点责任人的阿里云UID',
                          'type' => 'string',
                          'example' => '952795****',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '事件关联的实例ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '12345',
                        ),
                        'FixTime' => 
                        array (
                          'description' => '事件恢复的时间戳。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1553508465000',
                        ),
                        'TopicType' => 
                        array (
                          'description' => '事件的类型，包括SLOW（变慢）和ERROR（出错）。',
                          'type' => 'string',
                          'example' => 'ERROR',
                        ),
                        'TopicStatus' => 
                        array (
                          'description' => '事件的状态，包括IGNORE（已忽略）、NEW（新发现）、FIXING（处理中）和RECOVER（已恢复）。',
                          'type' => 'string',
                          'example' => 'NEW',
                        ),
                        'HappenTime' => 
                        array (
                          'description' => '事件发生的时间戳，事件发生和被发现存在一定的时间差。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1553508465000',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '任务节点的名称。',
                          'type' => 'string',
                          'example' => '节点名称',
                        ),
                        'TopicId' => 
                        array (
                          'description' => '事件的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'AddTime' => 
                        array (
                          'description' => '事件发现的时间戳。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1553524393000',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '事件关联的任务节点ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Topics\\": [\\n      {\\n        \\"TopicName\\": \\"1234出错\\",\\n        \\"ProjectId\\": 1234,\\n        \\"NodeOwner\\": \\"952795****\\",\\n        \\"InstanceId\\": 12345,\\n        \\"FixTime\\": 1553508465000,\\n        \\"TopicType\\": \\"ERROR\\",\\n        \\"TopicStatus\\": \\"NEW\\",\\n        \\"HappenTime\\": 1553508465000,\\n        \\"NodeName\\": \\"节点名称\\",\\n        \\"TopicId\\": 1234,\\n        \\"AddTime\\": 1553524393000,\\n        \\"NodeId\\": 1234\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListTopicsResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Topics>\\n            <TopicName>1234出错</TopicName>\\n            <ProjectId>1234</ProjectId>\\n            <NodeOwner>952795****</NodeOwner>\\n            <InstanceId>12345</InstanceId>\\n            <FixTime>1553508465000</FixTime>\\n            <TopicType>ERROR</TopicType>\\n            <TopicStatus>NEW</TopicStatus>\\n            <HappenTime>1553508465000</HappenTime>\\n            <NodeName>节点名称</NodeName>\\n            <TopicId>1234</TopicId>\\n            <AddTime>1553524393000</AddTime>\\n            <NodeId>1234</NodeId>\\n        </Topics>\\n    </Data>\\n</ListTopicsResponse>","errorExample":""}]',
      'title' => '获取或搜索事件列表',
      'summary' => '调用ListTopics获取或搜索事件列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetTopic' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78289',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TopicId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '事件的ID。您可以调用[listTopics](~~173973~~)获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFGH-IJKLMNOPQ',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '事件的详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'Owner' => 
                  array (
                    'description' => '事件责任人的阿里云UID。',
                    'type' => 'string',
                    'example' => '952795****',
                  ),
                  'TopicName' => 
                  array (
                    'description' => '事件的名称。',
                    'type' => 'string',
                    'example' => '1234出错',
                  ),
                  'BaselineStatus' => 
                  array (
                    'description' => '基线的状态，包括ERROR（异常）、SAFE（安全）、DANGROUS（预警）和OVER（破线）。',
                    'type' => 'string',
                    'example' => 'SAFE',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '事件关联任务节点所在工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'NextAlertTime' => 
                  array (
                    'description' => '下次报警时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553524393000',
                  ),
                  'InstanceId' => 
                  array (
                    'description' => '事件关联的实例ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '12345',
                  ),
                  'FixTime' => 
                  array (
                    'description' => '事件恢复时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553524393000',
                  ),
                  'BaselineInGroupId' => 
                  array (
                    'description' => '最差基线实例的周期号。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'BaselineBuffer' => 
                  array (
                    'description' => '最差基线实例余量，单位为秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '3600',
                  ),
                  'TopicType' => 
                  array (
                    'description' => '事件的类型，包括SLOW（变慢）和ERROR（出错）。',
                    'type' => 'string',
                    'example' => 'ERROR',
                  ),
                  'TopicStatus' => 
                  array (
                    'description' => '事件的状态，包括IGNORE（已忽略）、NEW（新发现）、FIXING（处理中）和RECOVER（已恢复）。',
                    'type' => 'string',
                    'example' => 'FIXING',
                  ),
                  'HappenTime' => 
                  array (
                    'description' => '事件发生的时间戳。事件发生和被发现可能存在时间差。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553524393000',
                  ),
                  'DealTime' => 
                  array (
                    'description' => '最后处理时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553524393000',
                  ),
                  'DealUser' => 
                  array (
                    'description' => '最后处理人的阿里云UID。',
                    'type' => 'string',
                    'example' => '952795****',
                  ),
                  'BaselineName' => 
                  array (
                    'description' => '最差基线实例的基线名称。',
                    'type' => 'string',
                    'example' => '基线名称',
                  ),
                  'BaselineId' => 
                  array (
                    'description' => '最差基线实例的基线ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'NodeName' => 
                  array (
                    'description' => '事件关联的任务节点名称。',
                    'type' => 'string',
                    'example' => '节点名称',
                  ),
                  'AlertTime' => 
                  array (
                    'description' => '首次报警时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553524393000',
                  ),
                  'Buffer' => 
                  array (
                    'description' => '事件的余量，单位为秒。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1200',
                  ),
                  'Assigner' => 
                  array (
                    'description' => '指派人的阿里云UID。',
                    'type' => 'string',
                    'example' => '952795****',
                  ),
                  'TopicId' => 
                  array (
                    'description' => '事件的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'AddTime' => 
                  array (
                    'description' => '事件发现时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1553524393000',
                  ),
                  'NodeId' => 
                  array (
                    'description' => '事件关联的任务节点ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Wkbench.Parameter',
            'errorMessage' => 'The specified parameters are invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Wkbench.ServiceError',
            'errorMessage' => 'An internal error occurred.',
          ),
          4 => 
          array (
            'errorCode' => 'Invalid.Wkbench.TopicNotExist',
            'errorMessage' => 'The topic does not exist.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFGH-IJKLMNOPQ\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"Owner\\": \\"952795****\\",\\n    \\"TopicName\\": \\"1234出错\\",\\n    \\"BaselineStatus\\": \\"SAFE\\",\\n    \\"ProjectId\\": 1234,\\n    \\"NextAlertTime\\": 1553524393000,\\n    \\"InstanceId\\": 12345,\\n    \\"FixTime\\": 1553524393000,\\n    \\"BaselineInGroupId\\": 1,\\n    \\"BaselineBuffer\\": 3600,\\n    \\"TopicType\\": \\"ERROR\\",\\n    \\"TopicStatus\\": \\"FIXING\\",\\n    \\"HappenTime\\": 1553524393000,\\n    \\"DealTime\\": 1553524393000,\\n    \\"DealUser\\": \\"952795****\\",\\n    \\"BaselineName\\": \\"基线名称\\",\\n    \\"BaselineId\\": 1234,\\n    \\"NodeName\\": \\"节点名称\\",\\n    \\"AlertTime\\": 1553524393000,\\n    \\"Buffer\\": 1200,\\n    \\"Assigner\\": \\"952795****\\",\\n    \\"TopicId\\": 1234,\\n    \\"AddTime\\": 1553524393000,\\n    \\"NodeId\\": 1234\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <BaselineId>1234</BaselineId>\\n    <Buffer>1200</Buffer>\\n    <FixTime>1553524393000</FixTime>\\n    <Owner>952795****</Owner>\\n    <InstanceId>12345</InstanceId>\\n    <NodeName>节点名称</NodeName>\\n    <BaselineStatus>SAFE</BaselineStatus>\\n    <ProjectId>1234</ProjectId>\\n    <TopicStatus>FIXING</TopicStatus>\\n    <AddTime>1553524393000</AddTime>\\n    <HappenTime>1553524393000</HappenTime>\\n    <AlertTime>1553524393000</AlertTime>\\n    <BaselineInGroupId>1</BaselineInGroupId>\\n    <TopicName>1234出错</TopicName>\\n    <TopicType>ERROR</TopicType>\\n    <Assigner>9527952795279528</Assigner>\\n    <DealUser>9527952795279528</DealUser>\\n    <NextAlertTime>1553524393000</NextAlertTime>\\n    <BaselineName>基线名称</BaselineName>\\n    <NodeId>1234</NodeId>\\n    <TopicId>1234</TopicId>\\n    <BaselineBuffer>3600</BaselineBuffer>\\n    <DealTime>1553524393000</DealTime>\\n</Data>\\n<ErrorCode>1031203110005</ErrorCode>\\n<ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '获取事件的详情',
      'summary' => '调用GetTopic获取事件的详情。',
      'description' => '****',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetTopicInfluence' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78290',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TopicId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '事件的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '事件影响的基线实例列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'TopicId' => 
                  array (
                    'description' => '事件的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'Influences' => 
                  array (
                    'description' => '影响的基线实例列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '基线的状态，包括ERROR（异常）、SAFE（安全）、DANGROUS（预警）和OVER（破线）。',
                          'type' => 'string',
                          'example' => 'SAFE',
                        ),
                        'Owner' => 
                        array (
                          'description' => '基线责任人的阿里云UID。多个责任人之间使用英文逗号（,）分隔。',
                          'type' => 'string',
                          'example' => '952795****',
                        ),
                        'BaselineName' => 
                        array (
                          'description' => '基线的名称。',
                          'type' => 'string',
                          'example' => '基线名称',
                        ),
                        'BaselineId' => 
                        array (
                          'description' => '基线的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'Bizdate' => 
                        array (
                          'description' => '基线实例的业务日期时间戳。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1553356800000',
                        ),
                        'Buffer' => 
                        array (
                          'description' => '基线实例的余量，单位为秒。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '360',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '基线所在工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'Priority' => 
                        array (
                          'description' => '基线的优先级，取值范围为{1,2,5,7,8}。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'InGroupId' => 
                        array (
                          'description' => '基线实例的周期号。天基线为1，小时基线的取值范围为\\[1,24\\]。

',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Wkbench.ServiceError',
            'errorMessage' => 'An internal error occurred.',
          ),
          4 => 
          array (
            'errorCode' => 'Invalid.Wkbench.Parameter',
            'errorMessage' => 'The specified parameters are invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'Invalid.Wkbench.TopicNotExist',
            'errorMessage' => 'The topic does not exist.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"TopicId\\": 1234,\\n    \\"Influences\\": [\\n      {\\n        \\"Status\\": \\"SAFE\\",\\n        \\"Owner\\": \\"952795****\\",\\n        \\"BaselineName\\": \\"基线名称\\",\\n        \\"BaselineId\\": 1234,\\n        \\"Bizdate\\": 1553356800000,\\n        \\"Buffer\\": 360,\\n        \\"ProjectId\\": 1234,\\n        \\"Priority\\": 1,\\n        \\"InGroupId\\": 1\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetTopicInfluenceResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <TopicId>1234</TopicId>\\n        <Influences>\\n            <Status>SAFE</Status>\\n            <Owner>952795****</Owner>\\n            <BaselineName>基线名称</BaselineName>\\n            <BaselineId>1234</BaselineId>\\n            <Bizdate>1553356800000</Bizdate>\\n            <Buffer>360</Buffer>\\n            <ProjectId>1234</ProjectId>\\n            <Priority>1</Priority>\\n            <InGroupId>1</InGroupId>\\n        </Influences>\\n    </Data>\\n</GetTopicInfluenceResponse>","errorExample":""}]',
      'title' => '获取事件影响的基线实例列表',
      'summary' => '调用GetTopicInfluence获取事件影响的基线实例列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetNode' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78272',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
          1 => 'FEATUREdideVFMENL',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的ID。您可以调用[ListNodes](~~173979~~)接口查看NodeId的相关信息。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'example' => '1234',
            'isFileTransferUrl' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'isFileTransferUrl' => false,
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回实体。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID，用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '节点的详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'SchedulerType' => 
                  array (
                    'description' => '调度的类型，取值如下：
- NORMAL：正常调度任务。
- MANUAL：手动任务，不会被日常调度。
- PAUSE：暂停任务。
- SKIP：空跑任务，被日常调度，但启动调度时直接被置为成功。',
                    'type' => 'string',
                    'example' => 'NORMAL',
                  ),
                  'RepeatInterval' => 
                  array (
                    'description' => '出错后重新调度频率。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '60',
                  ),
                  'Repeatability' => 
                  array (
                    'description' => '是否可以重复运行。',
                    'type' => 'string',
                    'example' => 'true',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'ProgramType' => 
                  array (
                    'description' => '节点的类型。',
                    'type' => 'string',
                    'example' => 'ODPS_SQL',
                  ),
                  'Priority' => 
                  array (
                    'description' => '任务优先级，1/3/5/7/8。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'OwnerId' => 
                  array (
                    'description' => '负责人的ID。',
                    'type' => 'string',
                    'example' => '17366294****',
                  ),
                  'Connection' => 
                  array (
                    'description' => '连接串。',
                    'type' => 'string',
                    'example' => 'odps_source_dev',
                  ),
                  'ParamValues' => 
                  array (
                    'description' => '额外的参数。',
                    'type' => 'string',
                    'example' => 'a=b',
                  ),
                  'RelatedFlowId' => 
                  array (
                    'description' => '关联业务流程ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '123',
                  ),
                  'DqcType' => 
                  array (
                    'description' => ' DQC类型，0表示没有关联dqc，1表示有关联dqc。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'BaselineId' => 
                  array (
                    'description' => '基线ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '123456',
                  ),
                  'Description' => 
                  array (
                    'description' => '节点的描述信息。',
                    'type' => 'string',
                    'example' => 'test',
                  ),
                  'NodeName' => 
                  array (
                    'description' => '节点的名称。',
                    'type' => 'string',
                    'example' => 'sql节点',
                  ),
                  'ResGroupName' => 
                  array (
                    'description' => '资源组的名称。',
                    'type' => 'string',
                    'example' => '默认资源组',
                  ),
                  'BusinessId' => 
                  array (
                    'description' => '业务流程ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '123',
                  ),
                  'DqcDescription' => 
                  array (
                    'description' => 'DQC分区规则串。',
                    'type' => 'string',
                    'example' => '[{"projectName":"test_0923001","tableName":"test_table_001","partition":"ds\\u003d$[yyyymmdd]"},{"projectName":"test_0923001","tableName":"test_table_002","partition":"NOTAPARTITIONTABLE"}]',
                  ),
                  'CronExpress' => 
                  array (
                    'description' => 'cron表达式。',
                    'type' => 'string',
                    'example' => '00 00 00 * * ?',
                  ),
                  'NodeId' => 
                  array (
                    'description' => '节点的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'ResGroupIdentifier' => 
                  array (
                    'description' => '资源组唯一标示。',
                    'type' => 'string',
                    'example' => 'group_123',
                  ),
                  'FileType' => 
                  array (
                    'description' => '文件的代码类型。常用的代码及其对应的文件类型包括6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'FileId' => 
                  array (
                    'type' => 'integer',
                    'format' => 'int64',
                  ),
                  'FileVersion' => 
                  array (
                    'type' => 'integer',
                    'format' => 'int32',
                  ),
                  'DeployDate' => 
                  array (
                    'type' => 'integer',
                    'format' => 'int64',
                  ),
                  'CreateTime' => 
                  array (
                    'type' => 'integer',
                    'format' => 'int64',
                  ),
                  'ModifyTime' => 
                  array (
                    'type' => 'integer',
                    'format' => 'int64',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"SchedulerType\\": \\"NORMAL\\",\\n    \\"RepeatInterval\\": 60,\\n    \\"Repeatability\\": \\"true\\",\\n    \\"ProjectId\\": 1234,\\n    \\"ProgramType\\": \\"ODPS_SQL\\",\\n    \\"Priority\\": 1,\\n    \\"OwnerId\\": \\"17366294****\\",\\n    \\"Connection\\": \\"odps_source_dev\\",\\n    \\"ParamValues\\": \\"a=b\\",\\n    \\"RelatedFlowId\\": 123,\\n    \\"DqcType\\": 1,\\n    \\"BaselineId\\": 123456,\\n    \\"Description\\": \\"test\\",\\n    \\"NodeName\\": \\"sql节点\\",\\n    \\"ResGroupName\\": \\"默认资源组\\",\\n    \\"BusinessId\\": 123,\\n    \\"DqcDescription\\": \\"[{\\\\\\"projectName\\\\\\":\\\\\\"test_0923001\\\\\\",\\\\\\"tableName\\\\\\":\\\\\\"test_table_001\\\\\\",\\\\\\"partition\\\\\\":\\\\\\"ds\\\\\\\\u003d$[yyyymmdd]\\\\\\"},{\\\\\\"projectName\\\\\\":\\\\\\"test_0923001\\\\\\",\\\\\\"tableName\\\\\\":\\\\\\"test_table_002\\\\\\",\\\\\\"partition\\\\\\":\\\\\\"NOTAPARTITIONTABLE\\\\\\"}]\\",\\n    \\"CronExpress\\": \\"00 00 00 * * ?\\",\\n    \\"NodeId\\": 1234,\\n    \\"ResGroupIdentifier\\": \\"group_123\\",\\n    \\"FileType\\": 10,\\n    \\"FileId\\": 0,\\n    \\"FileVersion\\": 0,\\n    \\"DeployDate\\": 0,\\n    \\"CreateTime\\": 0,\\n    \\"ModifyTime\\": 0\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetNodeResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <SchedulerType>NORMAL</SchedulerType>\\n        <RepeatInterval>60</RepeatInterval>\\n        <Repeatability>true</Repeatability>\\n        <ProjectId>1234</ProjectId>\\n        <ProgramType>ODPS_SQL</ProgramType>\\n        <Priority>1</Priority>\\n        <OwnerId>17366294****</OwnerId>\\n        <Connection>odps_source_dev</Connection>\\n        <ParamValues>a=b</ParamValues>\\n        <RelatedFlowId>123</RelatedFlowId>\\n        <DqcType>1</DqcType>\\n        <BaselineId>123456</BaselineId>\\n        <Description>test</Description>\\n        <NodeName>sql节点</NodeName>\\n        <ResGroupName>默认资源组</ResGroupName>\\n        <BusinessId>123</BusinessId>\\n        <DqcDescription>[{\\"projectName\\":\\"test_0923001\\",\\"tableName\\":\\"test_table_001\\",\\"partition\\":\\"ds\\\\u003d$[yyyymmdd]\\"},{\\"projectName\\":\\"test_0923001\\",\\"tableName\\":\\"test_table_002\\",\\"partition\\":\\"NOTAPARTITIONTABLE\\"}]</DqcDescription>\\n        <CronExpress>00 00 00 * * ?</CronExpress>\\n        <NodeId>1234</NodeId>\\n        <ResGroupIdentifier>group_123</ResGroupIdentifier>\\n        <FileType>10</FileType>\\n    </Data>\\n</GetNodeResponse>","errorExample":""}]',
      'title' => '获取节点详情',
      'summary' => '获取节点的详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListNodeInputOrOutput' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78318',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的ID。您可以调用[ListNodes](~~173979~~)接口查看NodeId的相关信息。

',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'example' => '12314567',
            'isFileTransferUrl' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运行的环境，包括DEV（开发环境）和PROD（生产环境）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'isFileTransferUrl' => false,
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        2 => 
        array (
          'name' => 'IoType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '用于指定查询节点为上游节点还是下游节点。取值如下：
- input，上游节点。
- output，下游节点。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'output',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID，用于定位日志，排查问题。
',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The project does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。
',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ProjectNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '输入输出列表。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '输入输出信息。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'TableName' => 
                    array (
                      'description' => '该参数暂不生效，目前无法获取。',
                      'type' => 'string',
                      'example' => 'dwd_xxx_table',
                    ),
                    'Data' => 
                    array (
                      'description' => '输入输出节点名称。',
                      'type' => 'string',
                      'example' => 'xxxx.123141254_out',
                    ),
                    'NodeId' => 
                    array (
                      'description' => '节点ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1234667',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorMessage\\": \\"The project does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ProjectNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": [\\n    {\\n      \\"TableName\\": \\"dwd_xxx_table\\",\\n      \\"Data\\": \\"xxxx.123141254_out\\",\\n      \\"NodeId\\": 1234667\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<ListNodeInputOrOutputResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <ErrorMessage>The project does not exist.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ProjectNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <TableName>dwd_xxx_table</TableName>\\n        <Data>xxxx.123141254_out</Data>\\n        <NodeId>1234667</NodeId>\\n    </Data>\\n</ListNodeInputOrOutputResponse>","errorExample":""}]',
      'title' => '查询上下游节点信息',
      'summary' => '查询当前节点的上下游节点信息。该API只能查询上游或下游的一层节点信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListNodes' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '78320',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '负责人的ID。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '193379****',
          ),
        ),
        1 => 
        array (
          'name' => 'BizName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的名称。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'test_bizName',
          ),
        ),
        2 => 
        array (
          'name' => 'ProgramType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的类型。您可以调用[ListFileType](~~212428~~)查看节点类型。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'ODPS_SQL',
          ),
        ),
        3 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码数。最小值1，最大值100',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        5 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        6 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运行的环境，包括DEV和PROD。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        7 => 
        array (
          'name' => 'NodeName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的名称。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'liux_test_n****',
          ),
        ),
        8 => 
        array (
          'name' => 'SchedulerType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度的类型，取值如下：
- NORMAL：正常调度任务。
- PAUSE：暂停任务。
- SKIP：空跑任务，被日常调度，但启动调度时直接被置为成功。',
            'type' => 'string',
            'required' => false,
            'example' => 'NORMAL',
            'enum' => 
            array (
              0 => 'NORMAL',
              1 => 'MANUAL',
              2 => 'PAUSE',
              3 => 'SKIP',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回实体。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '节点的列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '符合条件的节点总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '66',
                  ),
                  'Nodes' => 
                  array (
                    'description' => '节点的信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回实体。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'SchedulerType' => 
                        array (
                          'description' => '调度的类型，取值如下：
- NORMAL：正常调度任务。
- PAUSE：暂停任务。
- SKIP：空跑任务，被日常调度，但启动调度时直接被置为成功。',
                          'type' => 'string',
                          'example' => 'NORMAL',
                        ),
                        'RepeatInterval' => 
                        array (
                          'description' => '出错后重新调度频率。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '60',
                        ),
                        'Repeatability' => 
                        array (
                          'description' => '是否可以重复运行。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '33671',
                        ),
                        'ProgramType' => 
                        array (
                          'description' => '节点的类型。',
                          'type' => 'string',
                          'example' => 'ODPS_SQL',
                        ),
                        'Priority' => 
                        array (
                          'description' => '优先级，1/3/5/7/8',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'OwnerId' => 
                        array (
                          'description' => '负责人的ID。',
                          'type' => 'string',
                          'example' => '19337906836551',
                        ),
                        'Connection' => 
                        array (
                          'description' => '连接串。',
                          'type' => 'string',
                          'example' => 'odps_source',
                        ),
                        'ParamValues' => 
                        array (
                          'description' => '额外的参数。',
                          'type' => 'string',
                          'example' => 'a=b',
                        ),
                        'RelatedFlowId' => 
                        array (
                          'description' => '关联业务流程ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1231123',
                        ),
                        'DqcType' => 
                        array (
                          'description' => 'DQC类型，0表示没有关联dqc，1表示有关联dqc。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'BaselineId' => 
                        array (
                          'description' => '基线ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123456',
                        ),
                        'Description' => 
                        array (
                          'description' => '节点的描述信息。',
                          'type' => 'string',
                          'example' => 'test',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点的名称。',
                          'type' => 'string',
                          'example' => 'liux_test_n****',
                        ),
                        'ResGroupName' => 
                        array (
                          'description' => '资源组的名称。',
                          'type' => 'string',
                          'example' => '默认资源组',
                        ),
                        'BusinessId' => 
                        array (
                          'description' => '业务流程ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'DqcDescription' => 
                        array (
                          'description' => 'DQC分区规则串。',
                          'type' => 'string',
                          'example' => '[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]',
                        ),
                        'CronExpress' => 
                        array (
                          'description' => 'cron表达式。',
                          'type' => 'string',
                          'example' => '00 00 00 * * ?',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'ResGroupIdentifier' => 
                        array (
                          'description' => '资源组标识',
                          'type' => 'string',
                          'example' => 'group_123',
                        ),
                        'FileType' => 
                        array (
                          'description' => '文件类型',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                        'FileId' => 
                        array (
                          'type' => 'integer',
                          'format' => 'int64',
                        ),
                        'FileVersion' => 
                        array (
                          'type' => 'integer',
                          'format' => 'int32',
                        ),
                        'DeployDate' => 
                        array (
                          'type' => 'integer',
                          'format' => 'int64',
                        ),
                        'CreateTime' => 
                        array (
                          'type' => 'integer',
                          'format' => 'int64',
                        ),
                        'ModifyTime' => 
                        array (
                          'type' => 'integer',
                          'format' => 'int64',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 66,\\n    \\"Nodes\\": [\\n      {\\n        \\"SchedulerType\\": \\"NORMAL\\",\\n        \\"RepeatInterval\\": 60,\\n        \\"Repeatability\\": true,\\n        \\"ProjectId\\": 33671,\\n        \\"ProgramType\\": \\"ODPS_SQL\\",\\n        \\"Priority\\": 1,\\n        \\"OwnerId\\": \\"19337906836551\\",\\n        \\"Connection\\": \\"odps_source\\",\\n        \\"ParamValues\\": \\"a=b\\",\\n        \\"RelatedFlowId\\": 1231123,\\n        \\"DqcType\\": 1,\\n        \\"BaselineId\\": 123456,\\n        \\"Description\\": \\"test\\",\\n        \\"NodeName\\": \\"liux_test_n****\\",\\n        \\"ResGroupName\\": \\"默认资源组\\",\\n        \\"BusinessId\\": 123,\\n        \\"DqcDescription\\": \\"[{\\\\\\"projectName\\\\\\":\\\\\\"ztjy_dim\\\\\\",\\\\\\"tableName\\\\\\":\\\\\\"dim_user_agent_manage_area_a\\\\\\",\\\\\\"partition\\\\\\":\\\\\\"ds\\\\\\\\u003d$[yyyy-mm-dd-1]\\\\\\"}]\\",\\n        \\"CronExpress\\": \\"00 00 00 * * ?\\",\\n        \\"NodeId\\": 1234,\\n        \\"ResGroupIdentifier\\": \\"group_123\\",\\n        \\"FileType\\": 10,\\n        \\"FileId\\": 0,\\n        \\"FileVersion\\": 0,\\n        \\"DeployDate\\": 0,\\n        \\"CreateTime\\": 0,\\n        \\"ModifyTime\\": 0\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListNodesResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>66</TotalCount>\\n        <Nodes>\\n            <SchedulerType>NORMAL</SchedulerType>\\n            <RepeatInterval>60</RepeatInterval>\\n            <Repeatability>true</Repeatability>\\n            <ProjectId>33671</ProjectId>\\n            <ProgramType>ODPS_SQL</ProgramType>\\n            <Priority>1</Priority>\\n            <OwnerId>19337906836551</OwnerId>\\n            <Connection>odps_source</Connection>\\n            <ParamValues>a=b</ParamValues>\\n            <RelatedFlowId>1231123</RelatedFlowId>\\n            <DqcType>1</DqcType>\\n            <BaselineId>123456</BaselineId>\\n            <Description>test</Description>\\n            <NodeName>liux_test_n****</NodeName>\\n            <ResGroupName>默认资源组</ResGroupName>\\n            <BusinessId>123</BusinessId>\\n            <DqcDescription>[{\\"projectName\\":\\"ztjy_dim\\",\\"tableName\\":\\"dim_user_agent_manage_area_a\\",\\"partition\\":\\"ds\\\\u003d$[yyyy-mm-dd-1]\\"}]</DqcDescription>\\n            <CronExpress>00 00 00 * * ?</CronExpress>\\n            <NodeId>1234</NodeId>\\n            <ResGroupIdentifier>group_123</ResGroupIdentifier>\\n            <FileType>10</FileType>\\n        </Nodes>\\n    </Data>\\n</ListNodesResponse>","errorExample":""}]',
      'title' => '获取节点的列表',
      'summary' => '调用ListNodes获取节点的列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetNodeCode' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78274',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
          1 => 'FEATUREdideVFMENL',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'example' => '1234',
            'isFileTransferUrl' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'isFileTransferUrl' => false,
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '节点的代码。',
                'type' => 'string',
                'example' => 'select a;',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"select a;\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\"\\n}","errorExample":""},{"type":"xml","example":"<GetNodeCodeResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>select a;</Data>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n</GetNodeCodeResponse>","errorExample":""}]',
      'title' => '获取节点的代码',
      'summary' => '调用GetNodeCode获取节点的代码。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetInstance' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78249',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例的ID。您可以调用[ListInstances](~~173982~~)获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD（生产环境）和DEV（开发环境）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回实体。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '调度实例失败时的异常信息。',
                'type' => 'string',
                'example' => 'test',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '0',
              ),
              'Data' => 
              array (
                'description' => '实例的详细信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '任务的状态，取值如下：
- NOT_RUN（未运行）
- WAIT_TIME（等待定时时间dueTime或cycleTime到来）
- WAIT_RESOURCE（等待资源）
- RUNNING（运行中）
- CHECKING（下发给数据质量进行数据校检）
- CHECKING_CONDITION（正在进行分支条件校检）
- FAILURE（执行失败）
- SUCCESS（执行成功）',
                    'type' => 'string',
                    'example' => 'NOT_RUN',
                  ),
                  'CycTime' => 
                  array (
                    'description' => '实例的定时时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1590422400000',
                  ),
                  'BeginRunningTime' => 
                  array (
                    'description' => '实例开始运行的时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1590416703313',
                  ),
                  'FinishTime' => 
                  array (
                    'description' => '实例运行的结束时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1590416703313',
                  ),
                  'CreateTime' => 
                  array (
                    'description' => '实例的创建时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1590416703313',
                  ),
                  'DagId' => 
                  array (
                    'description' => '工作流的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '338450167',
                  ),
                  'Priority' => 
                  array (
                    'description' => '实例运行优先级，取值分为1、3、5、7和8。取值越大，优先级越高。默认优先级为1。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'TaskType' => 
                  array (
                    'description' => '实例的调度类型，取值如下：
- NORMAL(0)：正常调度任务。该任务被日常调度。
- MANUAL(1)：手动任务。该任务不会被日常调度。
- PAUSE(2)：冻结任务。该任务被日常调度，但启动调度时直接被置为失败状态。
- SKIP(3)：空跑任务。该任务被日常调度，但启动调度时直接被置为成功状态。
- SKIP_UNCHOOSE(4)：临时工作流中未选择的任务，仅存在于临时工作流中，启动调度时直接被置为成功状态。
- SKIP_CYCLE(5)：未到运行周期的周或月任务。该任务被日常调度，但启动调度时直接被置为成功状态。
- CONDITION_UNCHOOSE(6)：上游实例中有分支（IF）节点，但是该下游节点未被分支节点选中，直接置为空跑任务。
- REALTIME_DEPRECATED(7)：实时生成的已经过期的周期实例，该类型的任务直接被置为成功状态。',
                    'type' => 'string',
                    'example' => 'NORMAL(0)',
                  ),
                  'ParamValues' => 
                  array (
                    'description' => '参数信息。',
                    'type' => 'string',
                    'example' => 'bizdate=$bizdate tbods=$tbods tbdw=$tbdw tbpmic=$tbpmic tbpidx=$tbpidx tbptcif=$tbptcif',
                  ),
                  'Connection' => 
                  array (
                    'description' => '连接串。',
                    'type' => 'string',
                    'example' => 'odps_source',
                  ),
                  'BaselineId' => 
                  array (
                    'description' => '基线ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '123123',
                  ),
                  'DqcType' => 
                  array (
                    'description' => '数据质量DQC类型，取值如下：
- 0表示有关联dqc。
- 1表示没有关联dqc。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'DagType' => 
                  array (
                    'description' => '工作流的类型，取值如下：
- DAILY（日常调度）
- MANUAL（手动任务）
- SMOKE_TEST（冒烟测试）
- SUPPLY_DATA（补数据）',
                    'type' => 'string',
                    'example' => 'DAILY',
                  ),
                  'BusinessId' => 
                  array (
                    'description' => '业务流程ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '123',
                  ),
                  'TaskRerunTime' => 
                  array (
                    'description' => '实例还可以重跑的次数。取值可以为空、以及大于等于0的整数。
- 取值为空，表示该实例对应的节点没有设置重跑次数。
- 取值为0，表示该实例对应的节点不能再重跑。
- 取值为大于0的整数（假设为n），表示该实例对应的节点剩余重跑次数为n。例如，该参数取值为1，则剩余重跑次数为1，取值为2，则剩余重跑次数为2，以此类推。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'ModifyTime' => 
                  array (
                    'description' => '实例的最新修改时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1590416703313',
                  ),
                  'Repeatability' => 
                  array (
                    'description' => '实例是否可以重复执行。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'RepeatInterval' => 
                  array (
                    'description' => '调度任务运行出错后，重新调整调度频率，单位为毫秒（ms）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '60000',
                  ),
                  'InstanceId' => 
                  array (
                    'description' => '实例的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '11713307578',
                  ),
                  'BeginWaitResTime' => 
                  array (
                    'description' => '实例开始等待资源的时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1590416703313',
                  ),
                  'RelatedFlowId' => 
                  array (
                    'description' => '关联的业务流程ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '123123',
                  ),
                  'Bizdate' => 
                  array (
                    'description' => '业务日期。通常为该任务运行时间的前一天。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1590336000000',
                  ),
                  'NodeName' => 
                  array (
                    'description' => '节点的名称。',
                    'type' => 'string',
                    'example' => 'kzh',
                  ),
                  'BeginWaitTimeTime' => 
                  array (
                    'description' => '实例开始等待调度的时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1590416703313',
                  ),
                  'DqcDescription' => 
                  array (
                    'description' => 'DQC分区规则串。',
                    'type' => 'string',
                    'example' => '[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]',
                  ),
                  'NodeId' => 
                  array (
                    'description' => '节点的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '33115',
                  ),
                  'CreateUser' => 
                  array (
                    'description' => '实例创建人。',
                    'type' => 'string',
                    'example' => '111',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorMessage\\": \\"test\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"0\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"NOT_RUN\\",\\n    \\"CycTime\\": 1590422400000,\\n    \\"BeginRunningTime\\": 1590416703313,\\n    \\"FinishTime\\": 1590416703313,\\n    \\"CreateTime\\": 1590416703313,\\n    \\"DagId\\": 338450167,\\n    \\"Priority\\": 1,\\n    \\"TaskType\\": \\"NORMAL(0)\\",\\n    \\"ParamValues\\": \\"bizdate=$bizdate tbods=$tbods tbdw=$tbdw tbpmic=$tbpmic tbpidx=$tbpidx tbptcif=$tbptcif\\",\\n    \\"Connection\\": \\"odps_source\\",\\n    \\"BaselineId\\": 123123,\\n    \\"DqcType\\": 1,\\n    \\"DagType\\": \\"DAILY\\",\\n    \\"BusinessId\\": 123,\\n    \\"TaskRerunTime\\": 0,\\n    \\"ModifyTime\\": 1590416703313,\\n    \\"Repeatability\\": true,\\n    \\"RepeatInterval\\": 60000,\\n    \\"InstanceId\\": 11713307578,\\n    \\"BeginWaitResTime\\": 1590416703313,\\n    \\"RelatedFlowId\\": 123123,\\n    \\"Bizdate\\": 1590336000000,\\n    \\"NodeName\\": \\"kzh\\",\\n    \\"BeginWaitTimeTime\\": 1590416703313,\\n    \\"DqcDescription\\": \\"[{\\\\\\"projectName\\\\\\":\\\\\\"ztjy_dim\\\\\\",\\\\\\"tableName\\\\\\":\\\\\\"dim_user_agent_manage_area_a\\\\\\",\\\\\\"partition\\\\\\":\\\\\\"ds\\\\\\\\u003d$[yyyy-mm-dd-1]\\\\\\"}]\\",\\n    \\"NodeId\\": 33115,\\n    \\"CreateUser\\": \\"111\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetInstanceResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <ErrorMessage>test</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>0</ErrorCode>\\n    <Data>\\n        <Status>NOT_RUN</Status>\\n        <CycTime>1590422400000</CycTime>\\n        <BeginRunningTime>1590416703313</BeginRunningTime>\\n        <FinishTime>1590416703313</FinishTime>\\n        <CreateTime>1590416703313</CreateTime>\\n        <DagId>338450167</DagId>\\n        <Priority>1</Priority>\\n        <TaskType>NORMAL(0)</TaskType>\\n        <ParamValues>bizdate=$bizdate tbods=$tbods tbdw=$tbdw tbpmic=$tbpmic tbpidx=$tbpidx tbptcif=$tbptcif</ParamValues>\\n        <Connection>odps_source</Connection>\\n        <BaselineId>123123</BaselineId>\\n        <DqcType>1</DqcType>\\n        <DagType>DAILY</DagType>\\n        <BusinessId>123</BusinessId>\\n        <TaskRerunTime>0</TaskRerunTime>\\n        <ModifyTime>1590416703313</ModifyTime>\\n        <Repeatability>true</Repeatability>\\n        <RepeatInterval>60000</RepeatInterval>\\n        <InstanceId>11713307578</InstanceId>\\n        <BeginWaitResTime>1590416703313</BeginWaitResTime>\\n        <RelatedFlowId>123123</RelatedFlowId>\\n        <Bizdate>1590336000000</Bizdate>\\n        <NodeName>kzh</NodeName>\\n        <BeginWaitTimeTime>1590416703313</BeginWaitTimeTime>\\n        <DqcDescription>[{\\"projectName\\":\\"ztjy_dim\\",\\"tableName\\":\\"dim_user_agent_manage_area_a\\",\\"partition\\":\\"ds\\\\u003d$[yyyy-mm-dd-1]\\"}]</DqcDescription>\\n        <NodeId>33115</NodeId>\\n        <CreateUser>111</CreateUser>\\n    </Data>\\n</GetInstanceResponse>","errorExample":""}]',
      'title' => '获取实例的详情',
      'summary' => '调用GetInstance接口，获取实例的详细信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListInstances' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '78315',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide4QKMAF',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运行的环境，包括PROD（生产环境）和DEV（开发环境）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的ID。您可以调用[ListNodes](~~173979~~)查看节点ID信息。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '100000000000',
          ),
        ),
        2 => 
        array (
          'name' => 'NodeName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的名称。您可以调用[ListNodes](~~173979~~)查看节点名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'openmr_8****',
          ),
        ),
        3 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '负责人的ID，即工作空间管理员的账号UID。您可登录阿里云控制台后，在账号管理的安全管理中查看账号UID。',
            'type' => 'string',
            'required' => false,
            'example' => '193379****',
          ),
        ),
        4 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。您可以调用[ListProjects](~~178393~~)查看空间ID信息。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12345',
          ),
        ),
        5 => 
        array (
          'name' => 'BizName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的名称。您可以调用[ListBusiness](~~173945~~)查看业务流程信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'test_bizName',
          ),
        ),
        6 => 
        array (
          'name' => 'ProgramType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的类型。您可以调用[ListNodes](~~173979~~)查看节点类型。',
            'type' => 'string',
            'required' => false,
            'example' => 'ODPS_SQL',
          ),
        ),
        7 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码数，用于翻页。最小值为1，最大值为100。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        8 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        9 => 
        array (
          'name' => 'DagId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DagId可以是执行补数据[RunCycleDagNodes](~~212961~~)，冒烟测试[RunSmokeTest](~~212949~~)，手动业务流程[RunManualDagNodes](~~212830~~)等接口返回的DagId。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '11111',
          ),
        ),
        10 => 
        array (
          'name' => 'Bizdate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '获取实例列表的日期，格式为yyyy-MM-dd HH:mm:ss。',
            'type' => 'string',
            'required' => false,
            'example' => '2020-02-02 00:00:00',
          ),
        ),
        11 => 
        array (
          'name' => 'BeginBizdate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '获取实例列表的开始日期，格式为yyyy-MM-dd HH:mm:ss。',
            'type' => 'string',
            'required' => false,
            'example' => '2020-02-02 00:00:00',
          ),
        ),
        12 => 
        array (
          'name' => 'EndBizdate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '获取实例列表的结束日期，格式为yyyy-MM-dd HH:mm:ss。',
            'type' => 'string',
            'required' => false,
            'example' => '2020-02-03 00:00:00',
          ),
        ),
        13 => 
        array (
          'name' => 'Status',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务的状态，取值如下：

- NOT_RUN（未运行）

- WAIT_TIME（等待定时间DueTime或CycTime到来）

- WAIT_RESOURCE（等待资源）

- RUNNING（运行中）
- CHECKING（下发给数据质量进行数据校验）
- CHECKING_CONDITION（正在进行分支条件校验）
- FAILURE（执行失败）
- SUCCESS（执行成功）。',
            'type' => 'string',
            'required' => false,
            'example' => 'NOT_RUN',
            'enum' => 
            array (
              0 => 'SUCCESS',
              1 => 'FAILURE',
              2 => 'WAIT_TRIGGER',
              3 => 'CHECKING',
              4 => 'RUNNING',
              5 => 'WAIT_RESOURCE',
              6 => 'WAIT_TIME',
              7 => 'NOT_RUN',
            ),
          ),
        ),
        14 => 
        array (
          'name' => 'OrderBy',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '返回值的排序规则。取值如下：
- CREATE_TIME_DESC：按照创建时间降序返回
- INSTANCE_ID_DESC：默认值，按照实例ID降序返回。 ',
            'type' => 'string',
            'required' => false,
            'example' => 'INSTANCE_ID_DESC',
            'enum' => 
            array (
              0 => 'INSTANCE_ID_DESC',
              1 => 'CREATE_TIME_DESC',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The project does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ProjectNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '实例的列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大为100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '实例的总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '66',
                  ),
                  'Instances' => 
                  array (
                    'description' => '实例的信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '任务的状态，取值如下：
- NOT_RUN（未运行）
- WAIT_TIME（等待定时时间DueTime或CycTime到来）
- WAIT_RESOURCE（等待资源）
- RUNNING（运行中）
- CHECKING（下发给数据质量进行数据校检）
- CHECKING_CONDITION（正在进行分支条件校检）
- FAILURE（执行失败）
- SUCCESS（执行成功）。',
                          'type' => 'string',
                          'example' => 'NOT_RUN',
                        ),
                        'CycTime' => 
                        array (
                          'description' => '调度任务的运行时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590422400000',
                        ),
                        'BeginRunningTime' => 
                        array (
                          'description' => '实例开始运行的时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590416703313',
                        ),
                        'FinishTime' => 
                        array (
                          'description' => '调度任务的结束时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590416703313',
                        ),
                        'ErrorMessage' => 
                        array (
                          'description' => '实例运行的报错信息。

该字段已废弃，您可以调用[GetInstanceLog](~~173983~~)接口获取执行任务的相关报错信息。',
                          'type' => 'string',
                          'example' => 'error message',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '实例的创建时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590416703313',
                        ),
                        'DagId' => 
                        array (
                          'description' => '工作流的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '33845',
                        ),
                        'Priority' => 
                        array (
                          'description' => '实例运行优先级，取值分为1、3、5、7和8。

取值越大，优先级越高。默认优先级为1。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'TaskType' => 
                        array (
                          'description' => '任务实例的调度类型，取值如下：
- NORMAL(0)：正常调度任务。该任务被日常调度。
- MANUAL(1)：手动任务。该任务不会被日常调度。
- PAUSE(2)：冻结任务。该任务被日常调度，但启动调度时直接被置为失败状态。
- SKIP(3)：空跑任务。该任务被日常调度，但启动调度时直接被置为成功状态。
- SKIP_UNCHOOSE(4)：临时工作流中未选择的任务，仅存在于临时工作流中，启动调度时直接被置为成功状态。
- SKIP_CYCLE(5)：未到运行周期的周或月任务。该任务被日常调度，但启动调度时直接被置为成功状态。
- CONDITION_UNCHOOSE(6)：上游实例中有分支（IF）节点，但是该下游节点未被分支节点选中，直接置为空跑任务。
 REALTIME_DEPRECATED(7)：实时生成的已经过期的周期实例，该类型的任务直接被置为成功状态。',
                          'type' => 'string',
                          'example' => 'NORMAL(0)',
                        ),
                        'ParamValues' => 
                        array (
                          'description' => '参数的信息。',
                          'type' => 'string',
                          'example' => 'bizdate=$bizdate tbods=$tbods',
                        ),
                        'Connection' => 
                        array (
                          'description' => '连接串。',
                          'type' => 'string',
                          'example' => 'odps_source',
                        ),
                        'BaselineId' => 
                        array (
                          'description' => '基线ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123123',
                        ),
                        'DqcType' => 
                        array (
                          'description' => 'DQC类型，取值如下：
- 0表示有关联dqc。
- 1表示没有关联dqc。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'DagType' => 
                        array (
                          'description' => '工作流的类型，取值如下：
- DAILY（日常调度）
- MANUAL（手动任务）
- SMOKE_TEST（冒烟测试）
- SUPPLY_DATA（补数据）',
                          'type' => 'string',
                          'example' => 'DAILY',
                        ),
                        'BusinessId' => 
                        array (
                          'description' => '业务流程ID',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'TaskRerunTime' => 
                        array (
                          'description' => '实例还可以重跑的次数。取值可以为空、以及大于等于0的整数。
- 取值为空，表示该实例对应的节点没有设置重跑次数。
- 取值为0，表示该实例对应的节点不能再重跑。
- 取值为大于0的整数（假设为n），表示该实例对应的节点剩余重跑次数为n。例如，该参数取值为1，则剩余重跑次数为1，取值为2，则剩余重跑次数为2，以此类推。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ModifyTime' => 
                        array (
                          'description' => '调度任务的最新修改时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590416703313',
                        ),
                        'Repeatability' => 
                        array (
                          'description' => '实例任务是否可以重复执行。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'RepeatInterval' => 
                        array (
                          'description' => '调度任务运行出错后，重新调整调度频率，单位为毫秒（ms）。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '60000',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '实例的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'BeginWaitResTime' => 
                        array (
                          'description' => '实例任务开始等待资源的时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590416703313',
                        ),
                        'RelatedFlowId' => 
                        array (
                          'description' => '关联的业务流程ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123456',
                        ),
                        'Bizdate' => 
                        array (
                          'description' => '执行调度任务的日期。通常为该任务运行时间的前一天。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590336000000',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点的名称。',
                          'type' => 'string',
                          'example' => 'kzh',
                        ),
                        'BeginWaitTimeTime' => 
                        array (
                          'description' => '实例任务开始等待调度的时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1590416703313',
                        ),
                        'DqcDescription' => 
                        array (
                          'description' => 'DQC分区规则串。',
                          'type' => 'string',
                          'example' => '[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '33115',
                        ),
                        'CreateUser' => 
                        array (
                          'description' => '触发实例运行的用户。例如，用户Test触发补数据实例运行，则CreateUser为Test。',
                          'type' => 'string',
                          'example' => 'Test',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorMessage\\": \\"The project does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ProjectNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 66,\\n    \\"Instances\\": [\\n      {\\n        \\"Status\\": \\"NOT_RUN\\",\\n        \\"CycTime\\": 1590422400000,\\n        \\"BeginRunningTime\\": 1590416703313,\\n        \\"FinishTime\\": 1590416703313,\\n        \\"ErrorMessage\\": \\"error message\\",\\n        \\"CreateTime\\": 1590416703313,\\n        \\"DagId\\": 33845,\\n        \\"Priority\\": 1,\\n        \\"TaskType\\": \\"NORMAL(0)\\",\\n        \\"ParamValues\\": \\"bizdate=$bizdate tbods=$tbods\\",\\n        \\"Connection\\": \\"odps_source\\",\\n        \\"BaselineId\\": 123123,\\n        \\"DqcType\\": 1,\\n        \\"DagType\\": \\"DAILY\\",\\n        \\"BusinessId\\": 123,\\n        \\"TaskRerunTime\\": 0,\\n        \\"ModifyTime\\": 1590416703313,\\n        \\"Repeatability\\": true,\\n        \\"RepeatInterval\\": 60000,\\n        \\"InstanceId\\": 1234,\\n        \\"BeginWaitResTime\\": 1590416703313,\\n        \\"RelatedFlowId\\": 123456,\\n        \\"Bizdate\\": 1590336000000,\\n        \\"NodeName\\": \\"kzh\\",\\n        \\"BeginWaitTimeTime\\": 1590416703313,\\n        \\"DqcDescription\\": \\"[{\\\\\\"projectName\\\\\\":\\\\\\"ztjy_dim\\\\\\",\\\\\\"tableName\\\\\\":\\\\\\"dim_user_agent_manage_area_a\\\\\\",\\\\\\"partition\\\\\\":\\\\\\"ds\\\\\\\\u003d$[yyyy-mm-dd-1]\\\\\\"}]\\",\\n        \\"NodeId\\": 33115,\\n        \\"CreateUser\\": \\"Test\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListInstancesResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <ErrorMessage>The project does not exist.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ProjectNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>66</TotalCount>\\n        <Instances>\\n            <Status>NOT_RUN</Status>\\n            <CycTime>1590422400000</CycTime>\\n            <BeginRunningTime>1590416703313</BeginRunningTime>\\n            <FinishTime>1590416703313</FinishTime>\\n            <ErrorMessage>error message</ErrorMessage>\\n            <CreateTime>1590416703313</CreateTime>\\n            <DagId>33845</DagId>\\n            <Priority>1</Priority>\\n            <TaskType>NORMAL(0)</TaskType>\\n            <ParamValues>bizdate=$bizdate tbods=$tbods</ParamValues>\\n            <Connection>odps_source</Connection>\\n            <BaselineId>123123</BaselineId>\\n            <DqcType>1</DqcType>\\n            <DagType>DAILY</DagType>\\n            <BusinessId>123</BusinessId>\\n            <TaskRerunTime>0</TaskRerunTime>\\n            <ModifyTime>1590416703313</ModifyTime>\\n            <Repeatability>true</Repeatability>\\n            <RepeatInterval>60000</RepeatInterval>\\n            <InstanceId>1234</InstanceId>\\n            <BeginWaitResTime>1590416703313</BeginWaitResTime>\\n            <RelatedFlowId>123456</RelatedFlowId>\\n            <Bizdate>1590336000000</Bizdate>\\n            <NodeName>kzh</NodeName>\\n            <BeginWaitTimeTime>1590416703313</BeginWaitTimeTime>\\n            <DqcDescription>[{\\"projectName\\":\\"ztjy_dim\\",\\"tableName\\":\\"dim_user_agent_manage_area_a\\",\\"partition\\":\\"ds\\\\u003d$[yyyy-mm-dd-1]\\"}]</DqcDescription>\\n            <NodeId>33115</NodeId>\\n            <CreateUser>Test</CreateUser>\\n        </Instances>\\n    </Data>\\n</ListInstancesResponse>","errorExample":""}]',
      'title' => '获取实例的列表',
      'summary' => '调用ListInstances获取实例的列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetInstanceLog' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78253',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        2 => 
        array (
          'name' => 'InstanceHistoryId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '可以从ListInstanceHistory获取InstanceHistoryId',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '日志的内容。',
                'type' => 'string',
                'example' => 'log_content',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"log_content\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetInstanceLogResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>log_content</Data>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</GetInstanceLogResponse>","errorExample":""}]',
      'title' => '获取实例的日志',
      'summary' => '调用GetInstanceLog获取实例的日志。',
      'description' => '超过7天的实例可能查不到日志数据。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'StopInstance' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78359',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例的ID。您可以调用[ListInstances](~~173982~~)获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '调用停止实例接口后，返回的结果详情。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<StopInstanceResponse>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n</StopInstanceResponse>","errorExample":""}]',
      'title' => '终止实例',
      'summary' => '调用StopInstance终止实例。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'RestartInstance' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78342',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '调用重启实例接口后，返回的结果详情。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'q32ety****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"q32ety****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>q32ety****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>true</Data>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '重启实例',
      'summary' => '调用RestartInstance重启实例。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SetSuccessInstance' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78355',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '调用SetSuccessInstance接口后，是否返回结果详情。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<SetSuccessInstanceResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</SetSuccessInstanceResponse>","errorExample":""}]',
      'title' => '重置失败状态的实例为成功',
      'summary' => '调用SetSuccessInstance，重置失败状态的实例为成功。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SuspendInstance' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78361',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '调用SuspendInstance接口后，返回的结果详情。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0baf87f0159376****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ProjectNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0baf87f0159376****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ProjectNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0baf87f0159376****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>true</Data>\\n<ErrorCode>Invalid.Tenant.ProjectNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '暂停实例',
      'summary' => '调用SuspendInstance暂停实例。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ResumeInstance' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78343',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '调用ResumeInstance接口后，返回的结果详情。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<ResumeInstanceResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</ResumeInstanceResponse>","errorExample":""}]',
      'title' => '恢复暂停状态的实例',
      'summary' => '调用ResumeInstance恢复暂停状态的实例。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'RunCycleDagNodes' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78346',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，PROD表示生产环境，DEV表示开发环境。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'StartBizDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '补数据的起始业务日期。格式为yyyy-MM-dd 00:00:00。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-05-20 00:00:00',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作流的名称。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'xm_test',
            'maxLength' => 128,
          ),
        ),
        3 => 
        array (
          'name' => 'RootNodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '补数据的起始节点ID。您可以通过调用[ListNodes](~~173979~~)接口获取节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        4 => 
        array (
          'name' => 'ExcludeNodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '无需补数据的节点ID列表，在这个列表中的节点会生成空跑实例，空跑实例被调度后会直接运行成功，不会执行脚本内容。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '1234,123465',
          ),
        ),
        5 => 
        array (
          'name' => 'BizBeginTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务的开始时间。仅小时调度任务需要设置该参数，格式为HH:mm:ss，取值范围为 00:00:00~23:59:59。
',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '00:00:00',
          ),
        ),
        6 => 
        array (
          'name' => 'BizEndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务的结束时间。仅小时调度任务需要设置该参数，格式为HH:mm:ss，取值范围为 00:00:00~23:59:59。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '01:00:00',
          ),
        ),
        7 => 
        array (
          'name' => 'Parallelism',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否可以同时对多个节点进行补数据操作。

',
            'type' => 'boolean',
            'required' => true,
            'docRequired' => true,
            'example' => 'false',
          ),
        ),
        8 => 
        array (
          'name' => 'EndBizDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '补数据的结束业务日期。格式为yyyy-MM-dd 00:00:00。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-05-21 00:00:00',
          ),
        ),
        9 => 
        array (
          'name' => 'NodeParams',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '配置为一个JSON字符串，Key为节点ID，Value为参数的实际取值。
',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '{"74324":"a=123 b=456"}',
          ),
        ),
        10 => 
        array (
          'name' => 'IncludeNodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '补数据的节点ID。对多个节点补数据时，多个节点ID使用逗号（,）分隔。您可以通过调用[ListNodes](~~173979~~)接口获取节点ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '74324,74325',
          ),
        ),
        11 => 
        array (
          'name' => 'StartFutureInstanceImmediately',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否立刻运行未来调度时间的实例，如果设置为true，则大于当前时间的实例会立刻运行，否则会等待调度时间',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
            'default' => 'false',
          ),
        ),
        12 => 
        array (
          'name' => 'ConcurrentRuns',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务并行数。取值范围2~10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '10',
            'minimum' => '2',
            'example' => '5',
          ),
        ),
        13 => 
        array (
          'name' => 'AlertType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '告警类型。取值范围：
- SUCCESS：成功告警。
- FAILURE：失败告警。
- SUCCESS_FAILURE：成功或失败皆告警。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'FAILURE',
            'enum' => 
            array (
              0 => 'SUCCESS',
              1 => 'FAILURE',
              2 => 'SUCCESS_FAILURE',
            ),
          ),
        ),
        14 => 
        array (
          'name' => 'AlertNoticeType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '告警通知方式。取值范围：
- SMS：短信。
- MAIL：邮件。
- SMS_MAIL：短信与邮件。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'SMS',
            'enum' => 
            array (
              0 => 'SMS',
              1 => 'MAIL',
              2 => 'SMS_MAIL',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回实体。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。
',
                'type' => 'string',
                'example' => '>E6F0DBDD-5AD****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。
',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '周期任务补数据返回的DagId，可以通过该DagId查到对应的实例。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '工作流ID的列表。
',
                  'type' => 'integer',
                  'format' => 'int64',
                  'example' => '111',
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\">E6F0DBDD-5AD****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": [\\n    111\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<RunCycleDagNodesResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>&gt;E6F0DBDD-5AD****</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>111</Data>\\n</RunCycleDagNodesResponse>","errorExample":""}]',
      'title' => '创建补数据工作流',
      'summary' => '调用RunCycleDagNodes创建补数据工作流。',
      'description' => '补数据相关内容，详情请参见[补数据](~~137937~~)。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'RunSmokeTest' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78348',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD（生产环境）和DEV（开发环境）。
简单模式的工作空间无开发环境，详情请参见[简单模式和标准模式的工作空间](~~85772~~)。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'Bizdate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-05-26 00:00:00',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作流的名称。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'xm_create_test',
            'maxLength' => 128,
          ),
        ),
        3 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的ID。您可以调用[ListNodes](~~173979~~)接口获取节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        4 => 
        array (
          'name' => 'NodeParams',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的参数。配置为一个JSON字符串，Key为节点 ID，Value为参数实际取值。
',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'bizdate=$bizdate tbods=$tbods',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '工作流的ID。
',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '3333333',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。
',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。
',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'false',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 3333333,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": false\\n}","errorExample":""},{"type":"xml","example":"<RunSmokeTestResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>3333333</Data>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>false</Success>\\n</RunSmokeTestResponse>","errorExample":""}]',
      'title' => '运行冒烟测试',
      'summary' => '创建冒烟测试工作流。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListSuccessInstanceAmount' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '78335',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideXLVI81',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '99999999999',
            'minimum' => '2',
            'example' => '9527',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '952795279527ab****',
              ),
              'InstanceStatusTrend' => 
              array (
                'description' => '在业务日期的不同时刻，运行成功的实例数量统计趋势数据。
',
                'type' => 'object',
                'properties' => 
                array (
                  'TodayTrend' => 
                  array (
                    'description' => '业务日期当天的趋势。
',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结构',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TimePoint' => 
                        array (
                          'description' => '时间点。取值范围为00:00～23:00中的整点小时时间，例如00:00、01:00、02:00等等。',
                          'type' => 'string',
                          'example' => '01:00',
                        ),
                        'Count' => 
                        array (
                          'description' => '运行成功的实例数量。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                  'YesterdayTrend' => 
                  array (
                    'description' => '业务日期前一天的趋势。
',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结构。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TimePoint' => 
                        array (
                          'description' => '时间点。取值范围为00:00～23:00中的整点小时时间，例如00:00、01:00、02:00等等。',
                          'type' => 'string',
                          'example' => '01:00',
                        ),
                        'Count' => 
                        array (
                          'description' => '运行成功的实例数量。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                  'AvgTrend' => 
                  array (
                    'description' => '历史平均趋势。
',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结构。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TimePoint' => 
                        array (
                          'description' => '时间点。取值范围为00:00～23:00中的整点小时时间，例如00:00、01:00、02:00等等。',
                          'type' => 'string',
                          'example' => '01:00',
                        ),
                        'Count' => 
                        array (
                          'description' => '运行成功的实例数量。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ResourceNotAuthorized.Api',
            'errorMessage' => 'You are not authorized to access the resources.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.ProjectNoPermission',
            'errorMessage' => 'You are not authorized to access the workspace.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"952795279527ab****\\",\\n  \\"InstanceStatusTrend\\": {\\n    \\"TodayTrend\\": [\\n      {\\n        \\"TimePoint\\": \\"01:00\\",\\n        \\"Count\\": 10\\n      }\\n    ],\\n    \\"YesterdayTrend\\": [\\n      {\\n        \\"TimePoint\\": \\"01:00\\",\\n        \\"Count\\": 10\\n      }\\n    ],\\n    \\"AvgTrend\\": [\\n      {\\n        \\"TimePoint\\": \\"01:00\\",\\n        \\"Count\\": 10\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListSuccessInstanceAmountResponse>\\n    <RequestId>952795279527ab****</RequestId>\\n    <InstanceStatusTrend>\\n        <TodayTrend>\\n            <TimePoint>01:00</TimePoint>\\n            <Count>10</Count>\\n        </TodayTrend>\\n        <YesterdayTrend>\\n            <TimePoint>01:00</TimePoint>\\n            <Count>10</Count>\\n        </YesterdayTrend>\\n        <AvgTrend>\\n            <TimePoint>01:00</TimePoint>\\n            <Count>10</Count>\\n        </AvgTrend>\\n    </InstanceStatusTrend>\\n</ListSuccessInstanceAmountResponse>","errorExample":""}]',
      'title' => '获取运行成功的实例数量',
      'summary' => '获取业务日期当天生成的周期实例任务，在业务日期的不同整点时刻，运行成功的实例数量统计趋势。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListInstanceAmount' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78314',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideXLVI81',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '99999999999',
            'minimum' => '2',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'BeginDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '开始业务日期，精确到天。该参数需要配置为yyyy-MM-dd\'T\'HH:mm:ssZ的UTC格式。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2021-06-13T00:00:00+0800',
          ),
        ),
        2 => 
        array (
          'name' => 'EndDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '结束业务日期，精确到天。该参数需要配置为yyyy-MM-dd\'T\'HH:mm:ssZ的UTC格式。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2021-06-16T00:00:00+0800',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '95279527adhfj****',
              ),
              'InstanceCounts' => 
              array (
                'description' => '周期实例数量在指定时间段的趋势数据。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回数据结构。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Date' => 
                    array (
                      'description' => '获取周期实例数量的业务日期，此处显示业务日期对应的时间戳。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1623772800000',
                    ),
                    'Count' => 
                    array (
                      'description' => '周期实例的数量。
',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '9527',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ResourceNotAuthorized.Api',
            'errorMessage' => 'You are not authorized to access the resources.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.NoProject',
            'errorMessage' => 'You have not joined any project.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"95279527adhfj****\\",\\n  \\"InstanceCounts\\": [\\n    {\\n      \\"Date\\": 1623772800000,\\n      \\"Count\\": 9527\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<ListInstanceAmountResponse>\\n    <RequestId>95279527adhfj****</RequestId>\\n    <InstanceCounts>\\n        <Date>1623772800000</Date>\\n        <Count>9527</Count>\\n    </InstanceCounts>\\n</ListInstanceAmountResponse>","errorExample":""}]',
      'title' => '获取指定时间段周期实例数量趋势',
      'summary' => '获取指定时间段周期实例数量的趋势。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'TopTenElapsedTimeInstance' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78364',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideXLVI81',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '99999999999',
            'minimum' => '2',
            'example' => '100000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '请求返回结果',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。
',
                'type' => 'string',
                'example' => '6347364dadsfadf****',
              ),
              'InstanceConsumeTimeRank' => 
              array (
                'description' => '实例运行时长的排行记录。
',
                'type' => 'object',
                'properties' => 
                array (
                  'UpdateTime' => 
                  array (
                    'description' => '实例运行时长排行更新时间戳。
',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1600963200000',
                  ),
                  'ConsumeTimeRank' => 
                  array (
                    'description' => '实例运行时长的排行数据。
',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '请求返回结果',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Owner' => 
                        array (
                          'description' => '节点责任人的阿里云UID。
',
                          'type' => 'string',
                          'example' => '952795279527',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点的名称。
',
                          'type' => 'string',
                          'example' => '节点名称',
                        ),
                        'BusinessDate' => 
                        array (
                          'description' => '实例运行的业务日期。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1600963200000',
                        ),
                        'ProgramType' => 
                        array (
                          'description' => '任务的类型。
常见的类型如下：
6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '实例ID。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '95279527',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '任务节点的ID。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '9527',
                        ),
                        'Consumed' => 
                        array (
                          'description' => '实例运行时长，单位为s。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1000',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ResourceNotAuthorized.Api',
            'errorMessage' => 'You are not authorized to access the resources.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.ProjectNoPermission',
            'errorMessage' => 'You are not authorized to access the workspace.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"6347364dadsfadf****\\",\\n  \\"InstanceConsumeTimeRank\\": {\\n    \\"UpdateTime\\": 1600963200000,\\n    \\"ConsumeTimeRank\\": [\\n      {\\n        \\"Owner\\": \\"952795279527\\",\\n        \\"NodeName\\": \\"节点名称\\",\\n        \\"BusinessDate\\": 1600963200000,\\n        \\"ProgramType\\": 10,\\n        \\"InstanceId\\": 95279527,\\n        \\"NodeId\\": 9527,\\n        \\"Consumed\\": 1000\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<TopTenElapsedTimeInstanceResponse>\\n    <RequestId>6347364dadsfadf****</RequestId>\\n    <InstanceConsumeTimeRank>\\n        <UpdateTime>1600963200000</UpdateTime>\\n        <ConsumeTimeRank>\\n            <Owner>952795279527</Owner>\\n            <NodeName>节点名称</NodeName>\\n            <BusinessDate>1600963200000</BusinessDate>\\n            <ProgramType>10</ProgramType>\\n            <InstanceId>95279527</InstanceId>\\n            <NodeId>9527</NodeId>\\n            <Consumed>1000</Consumed>\\n        </ConsumeTimeRank>\\n    </InstanceConsumeTimeRank>\\n</TopTenElapsedTimeInstanceResponse>","errorExample":""}]',
      'title' => '获取昨天耗时最长的任务排行',
      'summary' => '获取实例运行时长排行。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'TopTenErrorTimesInstance' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78365',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideXLVI81',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '99999999999',
            'minimum' => '2',
            'example' => '9527',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。
',
                'type' => 'string',
                'example' => '952795279527****',
              ),
              'InstanceErrorRank' => 
              array (
                'description' => '节点出错的排行数据。
',
                'type' => 'object',
                'properties' => 
                array (
                  'UpdateTime' => 
                  array (
                    'description' => '出错排行更新的时间戳。
',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1600963200000',
                  ),
                  'ErrorRank' => 
                  array (
                    'description' => '节点近一个月出错排行数据。
',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结构',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Owner' => 
                        array (
                          'description' => '节点责任人的阿里云UID。
',
                          'type' => 'string',
                          'example' => '952795279527',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点的名称。
',
                          'type' => 'string',
                          'example' => '节点名称',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => 'DataWorks工作空间的ID。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '9527',
                        ),
                        'ProgramType' => 
                        array (
                          'description' => '节点任务的类型。
常用的类型如下：
6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '9527',
                        ),
                        'Count' => 
                        array (
                          'description' => '节点出错的次数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '5',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ResourceNotAuthorized.Api',
            'errorMessage' => 'You are not authorized to access the resources.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.ProjectNoPermission',
            'errorMessage' => 'You are not authorized to access the workspace.',
          ),
          4 => 
          array (
            'errorCode' => 'Invalid.Wkbench.Parameter',
            'errorMessage' => 'The specified parameters are invalid.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"952795279527****\\",\\n  \\"InstanceErrorRank\\": {\\n    \\"UpdateTime\\": 1600963200000,\\n    \\"ErrorRank\\": [\\n      {\\n        \\"Owner\\": \\"952795279527\\",\\n        \\"NodeName\\": \\"节点名称\\",\\n        \\"ProjectId\\": 9527,\\n        \\"ProgramType\\": 10,\\n        \\"NodeId\\": 9527,\\n        \\"Count\\": 5\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<TopTenErrorTimesInstanceResponse>\\n    <RequestId>952795279527****</RequestId>\\n    <InstanceErrorRank>\\n        <UpdateTime>1600963200000</UpdateTime>\\n        <ErrorRank>\\n            <Owner>952795279527</Owner>\\n            <NodeName>节点名称</NodeName>\\n            <ProjectId>9527</ProjectId>\\n            <ProgramType>10</ProgramType>\\n            <NodeId>9527</NodeId>\\n            <Count>5</Count>\\n        </ErrorRank>\\n    </InstanceErrorRank>\\n</TopTenErrorTimesInstanceResponse>","errorExample":""}]',
      'title' => '获取近一个月节点的出错排行',
      'summary' => '获取近一个月节点的出错排行。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetFileTypeStatistic' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78246',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '123465',
            'isFileTransferUrl' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括DEV（开发环境）和PROD（生产环境）。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'isFileTransferUrl' => false,
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求的ID，用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF',
              ),
              'ProgramTypeAndCounts' => 
              array (
                'description' => '节点的类型和数量。
',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Count' => 
                    array (
                      'description' => '节点的数量。
',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '1',
                    ),
                    'ProgramType' => 
                    array (
                      'description' => '节点的类型。
常用的类型如下：
6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。
',
                      'type' => 'string',
                      'example' => 'ODPS_SQL',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF\\",\\n  \\"ProgramTypeAndCounts\\": [\\n    {\\n      \\"Count\\": 1,\\n      \\"ProgramType\\": \\"ODPS_SQL\\"\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<RequestId>SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF</RequestId>\\n<ProgramTypeAndCounts>\\n    <Count>1</Count>\\n    <ProgramType>ODPS_SQL</ProgramType>\\n</ProgramTypeAndCounts>","errorExample":""}]',
      'title' => '获取节点任务类型分布情况',
      'summary' => '获取节点任务类型的分布情况。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetInstanceStatusStatistic' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78255',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '1234',
            'isFileTransferUrl' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运行的环境，包括PROD（生产环境）和DEV（开发环境）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'PROD',
            'isFileTransferUrl' => false,
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        2 => 
        array (
          'name' => 'BizDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '获取不同实例状态数量的业务日期。格式为yyyy-MM-dd。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-01-01',
            'maxLength' => 10,
            'minLength' => 10,
            'isFileTransferUrl' => false,
          ),
        ),
        3 => 
        array (
          'name' => 'SchedulerType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度的类型，取值如下：
- NORMAL：周期调度
- MANUAL：手动调度
- PAUSE：暂停调度
- SKIP：空跑',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'NORMAL',
            'enum' => 
            array (
              0 => 'NORMAL',
              1 => 'MANUAL',
              2 => 'PAUSE',
              3 => 'SKIP',
            ),
          ),
        ),
        4 => 
        array (
          'name' => 'DagType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'Dag Type的类型：
- MANUAL：手动任务工作流
- SMOKE_TEST：冒烟测试工作流
- SUPPLY_DATA：补数据
- BUSINESS_PROCESS_DAG：一次性业务流程工作流',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'MANUAL',
            'enum' => 
            array (
              0 => 'DAILY',
              1 => 'MANUAL',
              2 => 'SMOKE_TEST',
              3 => 'SUPPLY_DATA',
              4 => 'BUSINESS_PROCESS_DAG',
            ),
          ),
        ),
        5 => 
        array (
          'name' => 'SchedulerPeriod',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度周期。
- MINUTE：分钟。
- HOUR：小时。
- DAY：天。
- WEEK：周。
- MONTH：月。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'DAY',
            'enum' => 
            array (
              0 => 'MINUTE',
              1 => 'HOUR',
              2 => 'DAY',
              3 => 'WEEK',
              4 => 'MONTH',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回实体。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID，用于定位日志，排查问题。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'StatusCount' => 
              array (
                'description' => '实例状态的数量统计。
',
                'type' => 'object',
                'properties' => 
                array (
                  'FailureCount' => 
                  array (
                    'description' => '运行失败的实例数量。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'WaitTimeCount' => 
                  array (
                    'description' => '等待运行的实例数量。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'RunningCount' => 
                  array (
                    'description' => '运行中的实例数量。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'SuccessCount' => 
                  array (
                    'description' => '运行成功的实例数量。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '实例的总数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'NotRunCount' => 
                  array (
                    'description' => '未运行的实例数量。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'WaitResCount' => 
                  array (
                    'description' => '等待资源的实例数量。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"StatusCount\\": {\\n    \\"FailureCount\\": 1,\\n    \\"WaitTimeCount\\": 1,\\n    \\"RunningCount\\": 1,\\n    \\"SuccessCount\\": 1,\\n    \\"TotalCount\\": 1,\\n    \\"NotRunCount\\": 1,\\n    \\"WaitResCount\\": 1\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetInstanceStatusStatisticResponse>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <StatusCount>\\n        <FailureCount>1</FailureCount>\\n        <WaitTimeCount>1</WaitTimeCount>\\n        <RunningCount>1</RunningCount>\\n        <SuccessCount>1</SuccessCount>\\n        <TotalCount>1</TotalCount>\\n        <NotRunCount>1</NotRunCount>\\n        <WaitResCount>1</WaitResCount>\\n    </StatusCount>\\n</GetInstanceStatusStatisticResponse>","errorExample":""}]',
      'title' => '获取实例运行状态统计数据',
      'summary' => '用GetInstanceStatusCount获取实例任务不同运行状态的数量统计。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListFileType' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。该参数与ProjectIdentifier参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间名称。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间名称。
该参数与ProjectId参数，二者必须设置其一，用来确定本次API调用操作的DataWorks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求数据的页码数。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的数据条数，最大值为100。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '50',
          ),
        ),
        4 => 
        array (
          'name' => 'Keyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点类型的名称。您可以登录DataWorks控制台，进入数据开发界面，在左侧导航栏查看某类型节点的名称。配置说明如下：
- 支持查看中英文名称，但该参数查看的名称语言需要与Locale参数的语言类型一致。
- 支持模糊搜索。
- 如果不配置该参数，则会返回所有节点类型的名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'ODPS SQL',
          ),
        ),
        5 => 
        array (
          'name' => 'Locale',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '选择查询的语言，支持查询zh-CN和en-US语言的节点类型信息。
',
            'type' => 'string',
            'required' => false,
            'example' => 'zh-CN',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'NodeTypeInfoList' => 
              array (
                'description' => '返回的节点类型信息列表。
',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前数据页的页码。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '当前数据页显示的数据条数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '50',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '满足查询条件的数据总条数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '127',
                  ),
                  'NodeTypeInfo' => 
                  array (
                    'description' => '单个节点类型的信息。
',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'NodeTypeName' => 
                        array (
                          'description' => '节点类型的名称。
常用的代码及名称类型对应关系如下：
6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。',
                          'type' => 'string',
                          'example' => 'ODPS SQL',
                        ),
                        'NodeType' => 
                        array (
                          'description' => '节点类型的Code信息。
常用的代码及名称类型对应关系如下：
6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"NodeTypeInfoList\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 50,\\n    \\"TotalCount\\": 127,\\n    \\"NodeTypeInfo\\": [\\n      {\\n        \\"NodeTypeName\\": \\"ODPS SQL\\",\\n        \\"NodeType\\": 10\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListFileTypeResponse>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <NodeTypeInfoList>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>50</PageSize>\\n        <TotalCount>127</TotalCount>\\n        <NodeTypeInfo>\\n            <NodeTypeName>ODPS SQL</NodeTypeName>\\n            <NodeType>10</NodeType>\\n        </NodeTypeInfo>\\n    </NodeTypeInfoList>\\n</ListFileTypeResponse>","errorExample":""}]',
      'title' => '查询任务节点类型',
      'summary' => '查询任务节点的类型信息，包括类型Code和类型名称。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'RunManualDagNodes' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78347',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideD0YY7B',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度运维中心的环境标识。PROD表示生产环境，DEV表示开发环境。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD或者DEV',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '手动业务流程所属的工作空间英文名称。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'test_workspace',
            'pattern' => '^([^\\x00-\\xff]|[\\w.,;/@\\n-])+$',
          ),
        ),
        2 => 
        array (
          'name' => 'FlowName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '手动业务流程的名称。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'test_workflow',
            'pattern' => '^([^\\x00-\\xff]|[\\w.,;/@\\n-])+$',
          ),
        ),
        3 => 
        array (
          'name' => 'BizDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期的值为小于等于当前日期-1天。例如，今天是2020年11月11日，则业务日期需要是2020年11月10日的00:00:00或者该日期之前的日期。业务日期的时分秒信息均填写00。
StartBizDate与EndBizDate参数配合使用，当前参数与StartBizDate和EndBizDate参数只能配置一个。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '2020-11-11 00:00:00',
          ),
        ),
        4 => 
        array (
          'name' => 'NodeParameters',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '传递手动业务流程执行时的节点参数信息，一个JSON格式： { "<手动业务流程内部的某个节点ID>": "节点的调度参数信息，和数据开发调度配置里面的参数格式保持一致", "<手动业务流程内部的某个节点ID>": "节点的调度参数信息，和数据开发调度配置里面的参数格式保持一致" }',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '{"20000123121": "key1=val2 key2=val2", "20000123124": "kkkk=vvvvv aaaa=bbbb"}',
          ),
        ),
        5 => 
        array (
          'name' => 'DagParameters',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '该参数会同步至本次Dag的所有实例中。如果内部节点（[支持的节点类型](~~147245~~)）的调度参数引用了DagParameters中的业务流程参数，则节点的对应参数值会被替换为DagParameter中的业务流程参数。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '{"kaaaa": "vaaaaa", "kbbbb": "vbbbbb"}',
          ),
        ),
        6 => 
        array (
          'name' => 'IncludeNodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '如果需要运行手动业务流程里的部分节点，可输入相应节点ID。多个节点ID使用逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => '74324,74325',
          ),
        ),
        7 => 
        array (
          'name' => 'ExcludeNodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '如果不需要运行业务流程里的部分节点，可输入相应节点ID。此处输入的节点运行时会生成空跑实例，空跑实例被调度后会直接运行成功，不会执行脚本内容。多个节点ID使用逗号（,）分隔。
ExcludeNodeIds参数需要与IncludeNodeIds参数同时使用，ExcludeNodeIds参数的配置才会生效。',
            'type' => 'string',
            'required' => false,
            'example' => '123,456',
          ),
        ),
        8 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '项目ID',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '123',
          ),
        ),
        9 => 
        array (
          'name' => 'StartBizDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '获取业务开始日期，格式为yyyy-MM-dd HH:mm:ss。
StartBizDate与EndBizDate参数配合使用，并且当前参数与BizDate参数只能配置一个。',
            'type' => 'string',
            'required' => false,
            'example' => '2020-02-02 00:00:00',
          ),
        ),
        10 => 
        array (
          'name' => 'EndBizDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '获取业务结束日期，格式为yyyy-MM-dd HH:mm:ss。
StartBizDate与EndBizDate参数配合使用，并且当前参数与BizDate参数只能配置一个。',
            'type' => 'string',
            'required' => false,
            'example' => '2020-02-03 00:00:00',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'DagId' => 
              array (
                'description' => '手动业务流程运行Dag的实例ID。您可以通过接口和该DagId查询此次手动业务流程运行的内部节点实例的详细信息和状态。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '700000123123141',
              ),
              'RequestId' => 
              array (
                'description' => '请求唯一标识。
',
                'type' => 'string',
                'example' => 'AASFDFSDFG-DFSDF-DFSDFD-SDFSDF',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"DagId\\": 700000123123141,\\n  \\"RequestId\\": \\"AASFDFSDFG-DFSDF-DFSDFD-SDFSDF\\"\\n}","errorExample":""},{"type":"xml","example":"<RunManualDagNodesResponse>\\n    <DagId>700000123123141</DagId>\\n    <RequestId>AASFDFSDFG-DFSDF-DFSDFD-SDFSDF</RequestId>\\n</RunManualDagNodesResponse>","errorExample":""}]',
      'title' => '执行手动业务流程',
      'summary' => '手动业务流程必须已在环境界面提交发布，之后运维中心才会显示对应手动业务流程，您才可以使用该接口。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListManualDagInstances' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '78316',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideVFMENL',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运维中心的调度环境标识，包括PROD（生产环境）和DEV（开发环境）。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'RPOD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '手动业务流程所属的工作空间名称。您可以进入[DataWorks控制台](https://workbench.data.aliyun.com/console)，在工作空间配置页面获取。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'test_workspace',
          ),
        ),
        2 => 
        array (
          'name' => 'DagId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '触发手动业务流程运行的Dag实例ID。您可以调用[RunManualDagNodes](~~212830~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '7000001231241',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID，用于定位日志，排查问题。
',
                'type' => 'string',
                'example' => 'SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF',
              ),
              'Instances' => 
              array (
                'description' => '手动业务流程的内部实例列表。
',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回数据。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Status' => 
                    array (
                      'description' => '实例任务的状态，取值如下：

- NOT_RUN（未运行）
- WAIT_TIME（等待定时时间DueTime或CycleTime到来）
- WAIT_RESOURCE（等待资源）
- RUNNING（运行中）
- CHECKING（下发给数据质量进行数据校检）
- CHECKING_CONDITION（正在进行分支条件校检）
- FAILURE（执行失败）
- SUCCESS（执行成功）',
                      'type' => 'string',
                      'example' => 'SUCCESS',
                    ),
                    'BeginRunningTime' => 
                    array (
                      'description' => ' 实例任务开始运行的时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'BizDate' => 
                    array (
                      'description' => '业务日期。通常为该任务运行时间的前一天。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'CycTime' => 
                    array (
                      'description' => '实例任务的定时时间。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'FinishTime' => 
                    array (
                      'description' => '实例任务运行的结束时间。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'CreateTime' => 
                    array (
                      'description' => '实例任务的创建时间。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'DagId' => 
                    array (
                      'description' => '手动业务流程实例的DagId。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '350850491',
                    ),
                    'InstanceId' => 
                    array (
                      'description' => '内部实例ID。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '11726873619',
                    ),
                    'BeginWaitResTime' => 
                    array (
                      'description' => '实例任务开始等待资源的时间。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'TaskType' => 
                    array (
                      'description' => '实例任务的调度类型，取值如下：

- NORMAL(0)：正常调度任务。该任务被日常调度。
- MANUAL(1)：手动任务。该任务不会被日常调度。
- PAUSE(2)：冻结任务。该任务被日常调度，但启动调度时直接被置为失败状态。
- SKIP(3)：空跑任务。该任务被日常调度，但启动调度时直接被置为成功状态。
- SKIP_UNCHOOSE(4)：临时工作流中未选择的任务，仅存在于临时工作流中，启动调度时直接被置为成功状态。
- SKIP_CYCLE(5)：未到运行周期的周或月任务。该任务被日常调度，但启动调度时直接被置为成功状态。
- CONDITION_UNCHOOSE(6)：上游实例中有分支（IF）节点，但是该下游节点未被分支节点选中，直接置为空跑任务。
- REALTIME_DEPRECATED(7)：实时生成的已经过期的周期实例，该类型的任务直接被置为成功状态。',
                      'type' => 'string',
                      'example' => 'MANUAL',
                    ),
                    'ParamValues' => 
                    array (
                      'description' => '实例的参数信息。
',
                      'type' => 'string',
                      'example' => 'xxx=yyy',
                    ),
                    'DagType' => 
                    array (
                      'description' => '手动业务流程的标识。
',
                      'type' => 'string',
                      'example' => '5',
                    ),
                    'NodeName' => 
                    array (
                      'description' => '节点的名称。
',
                      'type' => 'string',
                      'example' => 'test2',
                    ),
                    'BeginWaitTimeTime' => 
                    array (
                      'description' => '实例任务开始等待调度的时间。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'NodeId' => 
                    array (
                      'description' => '业务流程的内部节点ID。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '37851',
                    ),
                    'ModifyTime' => 
                    array (
                      'description' => '最近一次修改实例任务的时间。
',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'CreateUser' => 
                    array (
                      'description' => '触发实例运行的用户。例如，用户Test触发运行手动执行的业务流程实例，则CreateUser为Test。',
                      'type' => 'string',
                      'example' => 'Test',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF\\",\\n  \\"Instances\\": [\\n    {\\n      \\"Status\\": \\"SUCCESS\\",\\n      \\"BeginRunningTime\\": 1605178414676,\\n      \\"BizDate\\": 1605178414676,\\n      \\"CycTime\\": 1605178414676,\\n      \\"FinishTime\\": 1605178414676,\\n      \\"CreateTime\\": 1605178414676,\\n      \\"DagId\\": 350850491,\\n      \\"InstanceId\\": 11726873619,\\n      \\"BeginWaitResTime\\": 1605178414676,\\n      \\"TaskType\\": \\"MANUAL\\",\\n      \\"ParamValues\\": \\"xxx=yyy\\",\\n      \\"DagType\\": \\"5\\",\\n      \\"NodeName\\": \\"test2\\",\\n      \\"BeginWaitTimeTime\\": 1605178414676,\\n      \\"NodeId\\": 37851,\\n      \\"ModifyTime\\": 1605178414676,\\n      \\"CreateUser\\": \\"Test\\"\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<ListManualDagInstancesResponse>\\n    <RequestId>SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF</RequestId>\\n    <Instances>\\n        <Status>SUCCESS</Status>\\n        <BeginRunningTime>1605178414676</BeginRunningTime>\\n        <BizDate>1605178414676</BizDate>\\n        <CycTime>1605178414676</CycTime>\\n        <FinishTime>1605178414676</FinishTime>\\n        <CreateTime>1605178414676</CreateTime>\\n        <DagId>350850491</DagId>\\n        <InstanceId>11726873619</InstanceId>\\n        <BeginWaitResTime>1605178414676</BeginWaitResTime>\\n        <TaskType>MANUAL</TaskType>\\n        <ParamValues>xxx=yyy</ParamValues>\\n        <DagType>5</DagType>\\n        <NodeName>test2</NodeName>\\n        <BeginWaitTimeTime>1605178414676</BeginWaitTimeTime>\\n        <NodeId>37851</NodeId>\\n        <ModifyTime>1605178414676</ModifyTime>\\n        <CreateUser>Test</CreateUser>\\n    </Instances>\\n</ListManualDagInstancesResponse>","errorExample":""}]',
      'title' => '获取手动执行的业务流程实例的信息',
      'summary' => '获取手动执行的业务流程实例的信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetDag' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78234',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DagId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DagId可以是补数据CreateDagComplement，测试CreateTest，执行手动业务流程CreateManualDag等接口返回的DagId。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'example' => '123141452344525',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度运维环境的标识：PROD表示生产环境，DEV表示开发环境。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回实体。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '7782a299-b291-4fee-8424-cf8058efa8e8',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => 'Dag的详情信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Type' => 
                  array (
                    'description' => 'DAG的类型，包括MANUAL（手动任务工作流）、SMOKE_TEST（冒烟测试工作流）、SUPPLY_DATA（补数据）和BUSINESS_PROCESS_DAG（一次性业务流程工作流）。',
                    'type' => 'string',
                    'example' => 'MANUAL_FLOW',
                  ),
                  'Status' => 
                  array (
                    'description' => 'DAG的状态，包括CREATED（已创建）、RUNNING（运行中）、FAILURE（运行失败）和SUCCESS（运行成功）。
    ',
                    'type' => 'string',
                    'example' => 'FAILURE',
                  ),
                  'FinishTime' => 
                  array (
                    'description' => '结束时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1605052800000',
                  ),
                  'CreateTime' => 
                  array (
                    'description' => '创建时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1605052800000',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '112345',
                  ),
                  'DagId' => 
                  array (
                    'description' => 'DagId。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '351249682',
                  ),
                  'Gmtdate' => 
                  array (
                    'description' => 'Gmtdate。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1605052800000',
                  ),
                  'StartTime' => 
                  array (
                    'description' => '开始时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1605052800000',
                  ),
                  'CreateUser' => 
                  array (
                    'description' => '创建人。',
                    'type' => 'string',
                    'example' => '1736629400048545',
                  ),
                  'Bizdate' => 
                  array (
                    'description' => '业务日期。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1605052800000',
                  ),
                  'Name' => 
                  array (
                    'description' => 'Dag的名称。',
                    'type' => 'string',
                    'example' => 'test_dag',
                  ),
                  'ModifyTime' => 
                  array (
                    'description' => '修改时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1605052800000',
                  ),
                  'OpSeq' => 
                  array (
                    'description' => '操作的标识码。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '123',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"7782a299-b291-4fee-8424-cf8058efa8e8\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"Type\\": \\"MANUAL_FLOW\\",\\n    \\"Status\\": \\"FAILURE\\",\\n    \\"FinishTime\\": 1605052800000,\\n    \\"CreateTime\\": 1605052800000,\\n    \\"ProjectId\\": 112345,\\n    \\"DagId\\": 351249682,\\n    \\"Gmtdate\\": 1605052800000,\\n    \\"StartTime\\": 1605052800000,\\n    \\"CreateUser\\": \\"1736629400048545\\",\\n    \\"Bizdate\\": 1605052800000,\\n    \\"Name\\": \\"test_dag\\",\\n    \\"ModifyTime\\": 1605052800000,\\n    \\"OpSeq\\": 123\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDagResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>7782a299-b291-4fee-8424-cf8058efa8e8</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <Type>MANUAL_FLOW</Type>\\n        <Status>FAILURE</Status>\\n        <FinishTime>1605052800000</FinishTime>\\n        <CreateTime>1605052800000</CreateTime>\\n        <ProjectId>112345</ProjectId>\\n        <DagId>351249682</DagId>\\n        <Gmtdate>1605052800000</Gmtdate>\\n        <StartTime>1605052800000</StartTime>\\n        <CreateUser>1736629400048545</CreateUser>\\n        <Bizdate>1605052800000</Bizdate>\\n        <Name>test_dag</Name>\\n        <ModifyTime>1605052800000</ModifyTime>\\n        <OpSeq>123</OpSeq>\\n    </Data>\\n</GetDagResponse>","errorExample":""}]',
      'title' => '根据DagId获取Dag详情',
      'summary' => '支持查询手动业务流程、手动任务、补数据的Dag详情信息，不支持查询日常调度Dag详情。',
      'description' => 'Dag Type的类型：

-   MANUAL：手动任务工作流
    
- SMOKE_TEST：冒烟测试工作流

- SUPPLY_DATA：补数据

- BUSINESS_PROCESS_DAG：一次性业务流程工作流

Dag Status的类型：

- CREATED：已创建
- RUNNING：运行中
- FAILURE：运行失败
- SUCCESS：运行成功',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListDags' => 
    array (
      'summary' => '根据OpSeq（补数据唯一标识）获取单次补数据的所有Dag详情。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '99773',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'OpSeq',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '补数据唯一标识。您可通过调用[GetDag](~~189753~~)接口获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'minimum' => '2',
            'example' => '123',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度运维环境的标识：PROD表示生产环境，DEV表示开发环境。',
            'type' => 'string',
            'required' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回实体。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '7782a299-b291-4fee-8424-cf8058efa8e8',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => 'Dag的详情信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Dags' => 
                  array (
                    'description' => '返回的实体。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回实体。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Type' => 
                        array (
                          'description' => 'DAG的类型。取值如下：
- MANUAL（手动任务工作流）
- SMOKE_TEST（冒烟测试工作流）
- SUPPLY_DATA（补数据）
- BUSINESS_PROCESS_DAG（一次性业务流程工作流）',
                          'type' => 'string',
                          'example' => 'MANUAL_FLOW',
                        ),
                        'Status' => 
                        array (
                          'description' => 'DAG的状态。取值如下：
- CREATED（已创建）
- RUNNING（运行中）
- FAILURE（运行失败）
- SUCCESS（运行成功）',
                          'type' => 'string',
                          'example' => 'FAILURE',
                        ),
                        'FinishTime' => 
                        array (
                          'description' => '结束时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1605052800000',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '创建时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1605052800000',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '112345',
                        ),
                        'DagId' => 
                        array (
                          'description' => 'DagId。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '351249682',
                        ),
                        'Gmtdate' => 
                        array (
                          'description' => 'Gmtdate。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1605052800000',
                        ),
                        'StartTime' => 
                        array (
                          'description' => '开始时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1605052800000',
                        ),
                        'CreateUser' => 
                        array (
                          'description' => '创建人。',
                          'type' => 'string',
                          'example' => '1736629400048545',
                        ),
                        'Bizdate' => 
                        array (
                          'description' => '业务日期。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1605052800000',
                        ),
                        'Name' => 
                        array (
                          'description' => 'Dag的名称。',
                          'type' => 'string',
                          'example' => 'test_dag',
                        ),
                        'ModifyTime' => 
                        array (
                          'description' => '修改时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1605052800000',
                        ),
                        'OpSeq' => 
                        array (
                          'description' => '操作的标识码。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"7782a299-b291-4fee-8424-cf8058efa8e8\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"Dags\\": [\\n      {\\n        \\"Type\\": \\"MANUAL_FLOW\\",\\n        \\"Status\\": \\"FAILURE\\",\\n        \\"FinishTime\\": 1605052800000,\\n        \\"CreateTime\\": 1605052800000,\\n        \\"ProjectId\\": 112345,\\n        \\"DagId\\": 351249682,\\n        \\"Gmtdate\\": 1605052800000,\\n        \\"StartTime\\": 1605052800000,\\n        \\"CreateUser\\": \\"1736629400048545\\",\\n        \\"Bizdate\\": 1605052800000,\\n        \\"Name\\": \\"test_dag\\",\\n        \\"ModifyTime\\": 1605052800000,\\n        \\"OpSeq\\": 123\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListDagsResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>7782a299-b291-4fee-8424-cf8058efa8e8</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <Dags>\\n            <Type>MANUAL_FLOW</Type>\\n            <Status>FAILURE</Status>\\n            <FinishTime>1605052800000</FinishTime>\\n            <CreateTime>1605052800000</CreateTime>\\n            <ProjectId>112345</ProjectId>\\n            <DagId>351249682</DagId>\\n            <Gmtdate>1605052800000</Gmtdate>\\n            <StartTime>1605052800000</StartTime>\\n            <CreateUser>1736629400048545</CreateUser>\\n            <Bizdate>1605052800000</Bizdate>\\n            <Name>test_dag</Name>\\n            <ModifyTime>1605052800000</ModifyTime>\\n            <OpSeq>123</OpSeq>\\n        </Dags>\\n    </Data>\\n</ListDagsResponse>","errorExample":""}]',
      'title' => '获取单次补数据的所有Dag详情',
      'description' => 'Dag Type的类型：

- MANUAL：手动任务工作流
- SMOKE_TEST：冒烟测试工作流
- SUPPLY_DATA：补数据
- BUSINESS_PROCESS_DAG：一次性业务流程工作流

Dag Status的类型：

- CREATED：已创建
- RUNNING：运行中
- FAILURE：运行失败
- SUCCESS：运行成功',
    ),
    'ListNodesByOutput' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78322',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度运维中心的环境标识，PROD表示生产环境，DEV表示开发环境。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'Outputs',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的输出名称。支持配置多个输出名称，配置多个名称时请使用英文逗号（,）分隔。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'aaaaa.1231412_out,bbbb.12313123_out',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。
',
                'type' => 'string',
                'example' => 'SDFSDFSDF-asdfDFSDF-SDFSDf-SDfSFD',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。
',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回的目标节点信息列表。',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Output' => 
                    array (
                      'description' => '当前节点的输出名称。',
                      'type' => 'string',
                      'example' => 'test_0709_1.630003556_out',
                    ),
                    'NodeList' => 
                    array (
                      'description' => 'input和output对应的节点信息列表。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'type' => 'object',
                        'properties' => 
                        array (
                          'SchedulerType' => 
                          array (
                            'description' => '节点任务的调度类型，取值如下：
- NORMAL：正常调度任务。该任务被日常调度。
- MANUAL：手动任务。该任务不会被日常调度。
- PAUSE：冻结任务。该任务被日常调度，但启动调度时直接被置为失败状态。
- SKIP：空跑任务。该任务被日常调度，但启动调度时直接被置为成功状态。',
                            'type' => 'string',
                            'example' => 'NORMAL',
                          ),
                          'RepeatInterval' => 
                          array (
                            'description' => '节点运行出错后重新调度的频率。
',
                            'type' => 'integer',
                            'format' => 'int32',
                            'example' => '60',
                          ),
                          'Repeatability' => 
                          array (
                            'description' => '是否可以重复运行。
',
                            'type' => 'boolean',
                            'example' => 'true',
                          ),
                          'FileType' => 
                          array (
                            'description' => '节点的类型。
常用的节点类型如下：

6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。

',
                            'type' => 'string',
                            'example' => 'ODPS_SQL',
                          ),
                          'ProjectId' => 
                          array (
                            'description' => '工作空间的ID。
',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '33671',
                          ),
                          'ProgramType' => 
                          array (
                            'description' => '节点的类型。该参数已废弃，节点类型请参考FileType。
',
                            'type' => 'string',
                            'example' => 'ODPS_SQL',
                          ),
                          'Priority' => 
                          array (
                            'description' => '节点运行的优先级，取值分为1、3、5、7和8。取值越大，优先级越高。默认优先级为1。
',
                            'type' => 'integer',
                            'format' => 'int32',
                            'example' => '1',
                          ),
                          'OwnerId' => 
                          array (
                            'description' => '负责人的ID。
',
                            'type' => 'string',
                            'example' => '19337906836551',
                          ),
                          'Connection' => 
                          array (
                            'description' => '数据源名称。',
                            'type' => 'string',
                            'example' => 'odps_source',
                          ),
                          'ParamValues' => 
                          array (
                            'description' => '节点的调度参数。
',
                            'type' => 'string',
                            'example' => 'a=b',
                          ),
                          'RelatedFlowId' => 
                          array (
                            'description' => '关联的业务流程ID。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1235655464',
                          ),
                          'DqcType' => 
                          array (
                            'description' => 'DQC类型，0表示有关联dqc，1表示没有关联dqc。
',
                            'type' => 'integer',
                            'format' => 'int32',
                            'example' => '1',
                          ),
                          'BaselineId' => 
                          array (
                            'description' => '基线ID。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '1235667',
                          ),
                          'Description' => 
                          array (
                            'description' => '节点的描述信息。
',
                            'type' => 'string',
                            'example' => 'test',
                          ),
                          'NodeName' => 
                          array (
                            'description' => '节点的名称。
',
                            'type' => 'string',
                            'example' => 'liux_test_n****',
                          ),
                          'ResGroupName' => 
                          array (
                            'description' => '资源组的名称。
',
                            'type' => 'string',
                            'example' => '默认资源组',
                          ),
                          'DqcDescription' => 
                          array (
                            'description' => 'DQC分区规则串。',
                            'type' => 'string',
                            'example' => '[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]',
                          ),
                          'CronExpress' => 
                          array (
                            'description' => 'cron表达式。
',
                            'type' => 'string',
                            'example' => '00 00 00 * * ?',
                          ),
                          'NodeId' => 
                          array (
                            'description' => '节点的ID。
',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '125677',
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"SDFSDFSDF-asdfDFSDF-SDFSDf-SDfSFD\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": [\\n    {\\n      \\"Output\\": \\"test_0709_1.630003556_out\\",\\n      \\"NodeList\\": [\\n        {\\n          \\"SchedulerType\\": \\"NORMAL\\",\\n          \\"RepeatInterval\\": 60,\\n          \\"Repeatability\\": true,\\n          \\"FileType\\": \\"ODPS_SQL\\",\\n          \\"ProjectId\\": 33671,\\n          \\"ProgramType\\": \\"ODPS_SQL\\",\\n          \\"Priority\\": 1,\\n          \\"OwnerId\\": \\"19337906836551\\",\\n          \\"Connection\\": \\"odps_source\\",\\n          \\"ParamValues\\": \\"a=b\\",\\n          \\"RelatedFlowId\\": 1235655464,\\n          \\"DqcType\\": 1,\\n          \\"BaselineId\\": 1235667,\\n          \\"Description\\": \\"test\\",\\n          \\"NodeName\\": \\"liux_test_n****\\",\\n          \\"ResGroupName\\": \\"默认资源组\\",\\n          \\"DqcDescription\\": \\"[{\\\\\\"projectName\\\\\\":\\\\\\"ztjy_dim\\\\\\",\\\\\\"tableName\\\\\\":\\\\\\"dim_user_agent_manage_area_a\\\\\\",\\\\\\"partition\\\\\\":\\\\\\"ds\\\\\\\\u003d$[yyyy-mm-dd-1]\\\\\\"}]\\",\\n          \\"CronExpress\\": \\"00 00 00 * * ?\\",\\n          \\"NodeId\\": 125677\\n        }\\n      ]\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<ListNodesByOutputResponse>\\n    <RequestId>SDFSDFSDF-asdfDFSDF-SDFSDf-SDfSFD</RequestId>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>\\n        <Output>test_0709_1.630003556_out</Output>\\n        <NodeList>\\n            <BaselineId>1235667</BaselineId>\\n            <ResGroupName>默认资源组</ResGroupName>\\n            <Description>test</Description>\\n            <NodeName>liux_test_n****</NodeName>\\n            <DqcType>1</DqcType>\\n            <Priority>1</Priority>\\n            <ParamValues>a=b</ParamValues>\\n            <Connection>odps_source</Connection>\\n            <ProjectId>33671</ProjectId>\\n            <RelatedFlowId>1235655464</RelatedFlowId>\\n            <SchedulerType>NORMAL</SchedulerType>\\n            <CronExpress>00 00 00 * * ?</CronExpress>\\n            <Repeatability>true</Repeatability>\\n            <OwnerId>19337906836551</OwnerId>\\n            <FileType>ODPS_SQL</FileType>\\n            <DqcDescription>[{\\"projectName\\":\\"ztjy_dim\\",\\"tableName\\":\\"dim_user_agent_manage_area_a\\",\\"partition\\":\\"ds\\\\u003d$[yyyy-mm-dd-1]\\"}]</DqcDescription>\\n            <NodeId>125677</NodeId>\\n            <ProgramType>ODPS_SQL</ProgramType>\\n            <RepeatInterval>60</RepeatInterval>\\n        </NodeList>\\n    </Data>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n</ListNodesByOutputResponse>","errorExample":""}]',
      'title' => '根据节点的输出结果精确查询目标节点',
      'summary' => '根据节点的输出结果精确查询目标节点。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'RunTriggerNode' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
        2 => 'put',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '触发式节点的节点ID。您可参见[ListNodes](~~173979~~)获取节点ID信息。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '-9223372036854775808',
            'example' => '10000011',
          ),
        ),
        1 => 
        array (
          'name' => 'CycleTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '触发式节点对应节点任务的13位的毫秒级定时时间戳。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '-9223372036854775808',
            'example' => '1606200230105',
          ),
        ),
        2 => 
        array (
          'name' => 'BizDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '触发式节点实例所在的业务日期时间戳。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '-9223372036854775808',
            'example' => '1606200230105',
          ),
        ),
        3 => 
        array (
          'name' => 'AppId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '触发式节点所属的DataWorks工作空间ID。工作空间ID可参见[ListProjects](~~178393~~)查询。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '-9223372036854775808',
            'example' => '10001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。

- true：调用成功

- false：调用失败',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '一次请求的唯一标识。',
                'type' => 'string',
                'example' => '9BA675F1-F848-4752-A6E3-92ABA0616005',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ResourceNotAuthorized.Api',
            'errorMessage' => 'You are not authorized to access the resources.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"9BA675F1-F848-4752-A6E3-92ABA0616005\\"\\n}","errorExample":""},{"type":"xml","example":"<RequestId>9BA675F1-F848-4752-A6E3-92ABA0616005</RequestId>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '运行一个触发式节点',
      'summary' => '调用RunTriggerNode运行一个触发式节点。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetNodeParents' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78276',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
          1 => 'FEATUREdideVFMENL',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度运维中心的环境标识。PROD表示生产环境，DEV表示开发环境。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点ID。您可以进入管控台的运维中心界面，查看节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12345456211234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回实体。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => 'asfsdfas-adfasdf-asfas-dfasdf-asdf',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'err',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1060010000000',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回的节点信息列表。
',
                'type' => 'object',
                'properties' => 
                array (
                  'Nodes' => 
                  array (
                    'description' => '节点列表。
',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回实体。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'SchedulerType' => 
                        array (
                          'description' => '调度类型。取值如下：
- NORMAL，正常调度任务。
- MANUAL，手动任务，不会被日常调度。
- PAUSE，暂停任务，被日常调度，但启动调度时直接被置为失败。
- SKIP，空跑任务，被日常调度，但启动调度时直接被置为成功。',
                          'type' => 'string',
                          'example' => 'NORMAL',
                        ),
                        'BaselineId' => 
                        array (
                          'description' => '基线ID。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1244564565',
                        ),
                        'Repeatability' => 
                        array (
                          'description' => '节点任务运行失败是否可重跑。
- true，重跑。
- false，不重跑。
',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点名称。
',
                          'type' => 'string',
                          'example' => 'test_Node',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '节点所在项目空间的ID。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '12315412412',
                        ),
                        'ProgramType' => 
                        array (
                          'description' => '节点类型。',
                          'type' => 'string',
                          'example' => 'ODPS_SQL',
                        ),
                        'Priority' => 
                        array (
                          'description' => '优先级。取值为1~8，数值越大，优先级越高。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '3',
                        ),
                        'OwnerId' => 
                        array (
                          'description' => '节点Owner的DataWorks UID。
',
                          'type' => 'string',
                          'example' => '123124561341251321',
                        ),
                        'CronExpress' => 
                        array (
                          'description' => '定时表达式。用于定时调度执行节点任务。
',
                          'type' => 'string',
                          'example' => '00 00 * * * *',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点ID。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1244564565',
                        ),
                        'StepType' => 
                        array (
                          'type' => 'string',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"asfsdfas-adfasdf-asfas-dfasdf-asdf\\",\\n  \\"ErrorMessage\\": \\"err\\",\\n  \\"ErrorCode\\": \\"1060010000000\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"Nodes\\": [\\n      {\\n        \\"SchedulerType\\": \\"NORMAL\\",\\n        \\"BaselineId\\": 1244564565,\\n        \\"Repeatability\\": true,\\n        \\"NodeName\\": \\"test_Node\\",\\n        \\"ProjectId\\": 12315412412,\\n        \\"ProgramType\\": \\"ODPS_SQL\\",\\n        \\"Priority\\": 3,\\n        \\"OwnerId\\": \\"123124561341251321\\",\\n        \\"CronExpress\\": \\"00 00 * * * *\\",\\n        \\"NodeId\\": 1244564565,\\n        \\"StepType\\": \\"\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetNodeParentsResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>asdfasdfas-adfasdf-asfas-dfasdf-asdf</RequestId>\\n    <ErrorMessage>err</ErrorMessage>\\n    <ErrorCode>1060010000000</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <Nodes>\\n            <SchedulerType>NORMAL</SchedulerType>\\n            <BaselineId>1244564565</BaselineId>\\n            <Repeatability>true</Repeatability>\\n            <NodeName>test_Node</NodeName>\\n            <ProjectId>12315412412</ProjectId>\\n            <ProgramType>ODPS_SQL</ProgramType>\\n            <Priority>3</Priority>\\n            <OwnerId>123124561341251321</OwnerId>\\n            <CronExpress>00 00 * * * *</CronExpress>\\n            <NodeId>1244564565</NodeId>\\n        </Nodes>\\n    </Data>\\n</GetNodeParentsResponse>","errorExample":""}]',
      'title' => '获取节点上游列表',
      'summary' => '调用GetNodeParents获取节点上游列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetNodeChildren' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78273',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
          1 => 'FEATUREdideVFMENL',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度运维中心的环境标识。PROD表示生产环境，DEV表示开发环境。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点ID。您可以进入管控台的运维中心界面，查看节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '123456878',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回实体。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => 'adsfasdf-adf-asdf-asdf-asdfadfasdd',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'err',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1060010000000',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回的节点信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'Nodes' => 
                  array (
                    'description' => '节点列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回实体。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'SchedulerType' => 
                        array (
                          'description' => '调度类型。取值如下：
- NORMAL，正常调度任务。
- MANUAL，手动任务，不会被日常调度。
- PAUSE，暂停任务，被日常调度，但启动调度时直接被置为失败。
- SKIP，空跑任务，被日常调度，但启动调度时直接被置为成功。',
                          'type' => 'string',
                          'example' => 'NORMAL',
                        ),
                        'BaselineId' => 
                        array (
                          'description' => '基线ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '12345656',
                        ),
                        'Repeatability' => 
                        array (
                          'description' => '节点任务运行失败是否可重跑。
- true，重跑。
- false，不重跑。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点名称。',
                          'type' => 'string',
                          'example' => 'test_Node',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '节点所在项目空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '12315412412',
                        ),
                        'ProgramType' => 
                        array (
                          'description' => '节点类型。',
                          'type' => 'string',
                          'example' => 'ODPS_SQL',
                        ),
                        'Priority' => 
                        array (
                          'description' => '优先级。取值为1~8，数值越大，优先级越高。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '3',
                        ),
                        'OwnerId' => 
                        array (
                          'description' => '节点Owner的DataWorks UID。',
                          'type' => 'string',
                          'example' => '123124561341251321',
                        ),
                        'CronExpress' => 
                        array (
                          'description' => '定时表达式。用于定时调度执行节点任务。',
                          'type' => 'string',
                          'example' => '00 00 * * * * ',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1244564565',
                        ),
                        'StepType' => 
                        array (
                          'type' => 'string',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"adsfasdf-adf-asdf-asdf-asdfadfasdd\\",\\n  \\"ErrorMessage\\": \\"err\\",\\n  \\"ErrorCode\\": \\"1060010000000\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"Nodes\\": [\\n      {\\n        \\"SchedulerType\\": \\"NORMAL\\",\\n        \\"BaselineId\\": 12345656,\\n        \\"Repeatability\\": true,\\n        \\"NodeName\\": \\"test_Node\\",\\n        \\"ProjectId\\": 12315412412,\\n        \\"ProgramType\\": \\"ODPS_SQL\\",\\n        \\"Priority\\": 3,\\n        \\"OwnerId\\": \\"123124561341251321\\",\\n        \\"CronExpress\\": \\"00 00 * * * * \\",\\n        \\"NodeId\\": 1244564565,\\n        \\"StepType\\": \\"\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetNodeChildrenResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>adsfasdf-adf-asdf-asdf-asdfadfasdd</RequestId>\\n    <ErrorMessage>err</ErrorMessage>\\n    <ErrorCode>1060010000000</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <Nodes>\\n            <SchedulerType>NORMAL</SchedulerType>\\n            <BaselineId>12345656</BaselineId>\\n            <Repeatability>true</Repeatability>\\n            <NodeName>test_Node</NodeName>\\n            <ProjectId>12315412412</ProjectId>\\n            <ProgramType>ODPS_SQL</ProgramType>\\n            <Priority>3</Priority>\\n            <OwnerId>123124561341251321</OwnerId>\\n            <CronExpress>00 00 * * * * </CronExpress>\\n            <NodeId>1244564565</NodeId>\\n        </Nodes>\\n    </Data>\\n</GetNodeChildrenResponse>","errorExample":""}]',
      'title' => '获取节点下游列表',
      'summary' => '调用GetNodeChildren获取节点下游列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateNodeRunMode' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78378',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运行的环境，包括开发环境（DEV）和生产环境（PRD）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的ID，您可以调用[ListNodes](~~173979~~)接口获取节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        2 => 
        array (
          'name' => 'SchedulerType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '需要对目标节点执行的操作。取值如下：
- 0：表示解冻目标节点。
- 2：表示冻结目标节点。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '0',
            'enum' => 
            array (
              0 => '0',
              1 => '2',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '返回值。取值如下：
- true：表示调用成功。
- false：表示调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\"\\n}","errorExample":""},{"type":"xml","example":"<UpdateNodeRunModeResponse>\\n    <Success>true</Success>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n</UpdateNodeRunModeResponse>","errorExample":""}]',
      'title' => '冻结或解冻目标节点',
      'summary' => '调用UpdateNodeRunMode冻结或解冻目标节点。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateNodeOwner' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78377',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运行的环境，包括开发环境（DEV）和生产环境（PRD）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的ID，您可以调用[ListNodes](~~173979~~)接口获取节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        2 => 
        array (
          'name' => 'UserId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点负责人的阿里云账号ID。您可以登录DataWorks控制台，鼠标悬停至顶部菜单栏右侧的用户头像，查看账号ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '19337906836551',
            'maxLength' => 64,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '返回值。取值如下：
- true：表示调用成功。
- false：表示调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\"\\n}","errorExample":""},{"type":"xml","example":"<UpdateNodeOwnerResponse>\\n    <Success>true</Success>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n</UpdateNodeOwnerResponse>","errorExample":""}]',
      'title' => '修改目标节点负责人',
      'summary' => '修改目标节点的负责人。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateWorkbenchEventResult' => 
    array (
      'summary' => '所属扩展程序的运维中心回调API，当运维中心的流程被扩展程序卡住后,调用UpdateWorkbenchEventResult返回扩展程序的处理结果。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '103198',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'MessageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '订阅OpenEvent后接收到扩展事件的messageId',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '03400b03-b721-4c34-8727-2d6884077091',
          ),
        ),
        1 => 
        array (
          'name' => 'ExtensionCode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '扩展程序的编码',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '58e95e2acd6f408e8707f1bf2591f9e9',
          ),
        ),
        2 => 
        array (
          'name' => 'CheckResult',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '回调结果，OK代表检查成功，FAIL代表检查失败',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'FAIL',
            'enum' => 
            array (
              0 => 'OK',
              1 => 'FAIL',
              2 => 'WARN',
            ),
          ),
        ),
        3 => 
        array (
          'name' => 'CheckResultTip',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '检查失败的原因',
            'type' => 'string',
            'required' => false,
            'example' => 'SQL过长',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => 'Id of the request',
                'type' => 'string',
                'example' => '0bc1ec92159376****',
              ),
              'Success' => 
              array (
                'title' => '成功标识',
                'description' => '成功标识',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0bc1ec92159376****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<UpdateWorkbenchEventResultResponse>\\n    <RequestId>0bc1ec92159376****</RequestId>\\n    <Success>true</Success>\\n</UpdateWorkbenchEventResultResponse>","errorExample":""}]',
      'title' => '更新扩展程序的处理结果',
    ),
    'ListShiftPersonnels' => 
    array (
      'summary' => '获取值班表的值班人员列表。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '140337',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRJGWWC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ShiftScheduleIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '值班表唯一标识。',
            'type' => 'string',
            'required' => true,
            'example' => '2ab6456ada634b2f938ee******9b45b',
          ),
        ),
        1 => 
        array (
          'name' => 'UserType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '值班人查询条件：ALL（全部值班人）、PRIMARY（主值班人）、BACKUP（备值班人）、DESIGNATED_USER（指定人）',
            'type' => 'string',
            'required' => false,
            'example' => 'ALL',
            'default' => 'ALL',
            'enum' => 
            array (
              0 => 'ALL',
              1 => 'PRIMARY',
              2 => 'BACKUP',
              3 => 'DESIGNATED_USER',
            ),
          ),
        ),
        2 => 
        array (
          'name' => 'ShiftPersonUID',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '阿里云账号ID。您可以登录DataWorks控制台，鼠标悬停至顶部菜单栏右侧的用户头像，查看账号ID。',
            'type' => 'string',
            'required' => false,
            'example' => '1933790****551',
          ),
        ),
        3 => 
        array (
          'name' => 'BeginTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '值班人开始时间，时间戳',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1593950832000',
          ),
        ),
        4 => 
        array (
          'name' => 'EndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '值班人结束时间，时间戳',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1593950832000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'API返回结果',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG',
              ),
              'Paging' => 
              array (
                'description' => '分页结果',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码数，用于翻页。最小值为1，最大值为100，默认为1。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '满足条件的数据总条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'ShiftPersons' => 
                  array (
                    'description' => '值班人列表',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '值班人',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ShiftPersonUID' => 
                        array (
                          'description' => '值班人UID',
                          'type' => 'string',
                          'example' => '3726346****',
                        ),
                        'ShiftPersonName' => 
                        array (
                          'description' => '值班人名称',
                          'type' => 'string',
                          'example' => '张三',
                        ),
                        'BeginTime' => 
                        array (
                          'description' => '值班周期开始时间',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1593950832000',
                        ),
                        'EndTime' => 
                        array (
                          'description' => '值班周期结束时间',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1593950832000',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\",\\n  \\"Paging\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"ShiftPersons\\": [\\n      {\\n        \\"ShiftPersonUID\\": \\"3726346****\\",\\n        \\"ShiftPersonName\\": \\"张三\\",\\n        \\"BeginTime\\": 1593950832000,\\n        \\"EndTime\\": 1593950832000\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListShiftPersonnelsResponse>\\n    <RequestId>0000-ABCD-EFG</RequestId>\\n    <Paging>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <ShiftPersons>\\n            <ShiftPersonUID>3726346****</ShiftPersonUID>\\n            <ShiftPersonName>张三</ShiftPersonName>\\n            <StartLong>1593950832000</StartLong>\\n            <EndLong>1593950832000</EndLong>\\n        </ShiftPersons>\\n    </Paging>\\n</ListShiftPersonnelsResponse>","errorExample":""}]',
      'title' => '获取值班表的值班人员列表',
    ),
    'ListShiftSchedules' => 
    array (
      'summary' => '获取运维中心值班表列表。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '140315',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRJGWWC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ShiftScheduleName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '根据关键字模糊查询',
            'type' => 'string',
            'required' => false,
            'example' => '值班表名称关键字',
          ),
        ),
        1 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '阿里云账号ID。您可以登录DataWorks控制台，鼠标悬停至顶部菜单栏右侧的用户头像，查看账号ID。',
            'type' => 'string',
            'required' => false,
            'example' => '1933790683****',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '10',
            'example' => '10',
            'default' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码数，用于翻页。最小值为1，最大值为100，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'API返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'Paging' => 
              array (
                'description' => '分页详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码数，用于翻页。最小值为1，最大值为100。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '数据量总数',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'ShiftSchedules' => 
                  array (
                    'description' => '值班表列表数据',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '值班表',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ShiftScheduleIdentifier' => 
                        array (
                          'description' => '值班表唯一标识，可用来查询值班表值班人员列表',
                          'type' => 'string',
                          'example' => '2ab6456ada634b2f938ee******9b45b',
                        ),
                        'ShiftScheduleName' => 
                        array (
                          'description' => '值班表的名称。',
                          'type' => 'string',
                          'example' => '值班表名称',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"Paging\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"ShiftSchedules\\": [\\n      {\\n        \\"ShiftScheduleIdentifier\\": \\"2ab6456ada634b2f938ee******9b45b\\",\\n        \\"ShiftScheduleName\\": \\"值班表名称\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListShiftSchedulesResponse>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <Paging>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <ShiftSchedules>\\n            <ShiftScheduleIdentifier>2ab6456ada634b2f938ee******9b45b</ShiftScheduleIdentifier>\\n            <ShiftScheduleName>值班表名称</ShiftScheduleName>\\n        </ShiftSchedules>\\n    </Paging>\\n</ListShiftSchedulesResponse>","errorExample":""}]',
      'title' => '获取运维中心值班表列表',
    ),
    'ListInstanceHistory' => 
    array (
      'summary' => '调用ListInstanceHistory，获取所有实例历史记录，任务重跑一次就会生成一条历史记录。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '146270',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例的ID。您可以调用ListInstances获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD（生产环境）和DEV（开发环境），默认获取PROD（生产环境）的实例数据。',
            'type' => 'string',
            'required' => false,
            'example' => 'PROD',
            'default' => 'PROD',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结果',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Instances' => 
              array (
                'description' => '实例列表',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '实例详情',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Status' => 
                    array (
                      'description' => '任务的状态，取值如下：

- NOT_RUN（未运行）
- WAIT_TIME（等待定时时间DueTime或CycTime到来）
- WAIT_RESOURCE（等待资源）
- RUNNING（运行中）
- CHECKING（下发给数据质量进行数据校检）
- CHECKING_CONDITION（正在进行分支条件校检）
- FAILURE（执行失败）
- SUCCESS（执行成功）',
                      'type' => 'string',
                      'example' => 'NOT_RUN',
                    ),
                    'CycTime' => 
                    array (
                      'description' => '调度任务的运行时间，返回时间戳格式。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1590422400000',
                    ),
                    'BeginRunningTime' => 
                    array (
                      'description' => '实例开始运行的时间，返回时间戳格式。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1590416703313',
                    ),
                    'FinishTime' => 
                    array (
                      'description' => '调度任务的结束时间，返回时间戳格式。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1590416703313',
                    ),
                    'ErrorMessage' => 
                    array (
                      'description' => '实例运行的报错信息。该字段已废弃，您可以调用GetInstanceLog接口获取执行任务的相关报错信息。',
                      'type' => 'string',
                      'example' => 'error message',
                    ),
                    'CreateTime' => 
                    array (
                      'description' => '实例的创建时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1590416703313',
                    ),
                    'DagId' => 
                    array (
                      'description' => '工作流的ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '33845',
                    ),
                    'TaskType' => 
                    array (
                      'description' => '任务实例的调度类型，取值如下：

- NORMAL(0)：正常调度任务。该任务被日常调度。
- MANUAL(1)：手动任务。该任务不会被日常调度。
- PAUSE(2)：冻结任务。该任务被日常调度，但启动调度时直接被置为失败状态。
- SKIP(3)：空跑任务。该任务被日常调度，但启动调度时直接被置为成功状态。
- SKIP_UNCHOOSE(4)：临时工作流中未选择的任务，仅存在于临时工作流中，启动调度时直接被置为成功状态。
- SKIP_CYCLE(5)：未到运行周期的周或月任务。该任务被日常调度，但启动调度时直接被置为成功状态。
- CONDITION_UNCHOOSE(6)：上游实例中有分支（IF）节点，但是该下游节点未被分支节点选中，直接置为空跑任务。
- REALTIME_DEPRECATED(7)：实时生成的已经过期的周期实例，该类型的任务直接被置为成功状态。',
                      'type' => 'string',
                      'example' => 'NORMAL(0)',
                    ),
                    'DagType' => 
                    array (
                      'description' => 'DQC类型，取值如下：

- 0表示有关联dqc。
- 1表示没有关联dqc。',
                      'type' => 'string',
                      'example' => '1',
                    ),
                    'ModifyTime' => 
                    array (
                      'description' => '调度任务的最新修改时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1590416703313',
                    ),
                    'InstanceId' => 
                    array (
                      'description' => '实例的ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1234',
                    ),
                    'BeginWaitResTime' => 
                    array (
                      'description' => '实例任务开始等待资源的时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1590416703313',
                    ),
                    'Bizdate' => 
                    array (
                      'description' => '执行调度任务的日期。通常为该任务运行时间的前一天。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1590336000000',
                    ),
                    'NodeName' => 
                    array (
                      'description' => '节点的名称。',
                      'type' => 'string',
                      'example' => 'kzh',
                    ),
                    'BeginWaitTimeTime' => 
                    array (
                      'description' => '实例任务开始等待调度的时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1590416703313',
                    ),
                    'NodeId' => 
                    array (
                      'description' => '节点的ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '33115',
                    ),
                    'InstanceHistoryId' => 
                    array (
                      'description' => '实例的历史档案编号。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"Success\\": true,\\n  \\"Instances\\": [\\n    {\\n      \\"Status\\": \\"NOT_RUN\\",\\n      \\"CycTime\\": 1590422400000,\\n      \\"BeginRunningTime\\": 1590416703313,\\n      \\"FinishTime\\": 1590416703313,\\n      \\"ErrorMessage\\": \\"error message\\",\\n      \\"CreateTime\\": 1590416703313,\\n      \\"DagId\\": 33845,\\n      \\"TaskType\\": \\"NORMAL(0)\\",\\n      \\"DagType\\": \\"1\\",\\n      \\"ModifyTime\\": 1590416703313,\\n      \\"InstanceId\\": 1234,\\n      \\"BeginWaitResTime\\": 1590416703313,\\n      \\"Bizdate\\": 1590336000000,\\n      \\"NodeName\\": \\"kzh\\",\\n      \\"BeginWaitTimeTime\\": 1590416703313,\\n      \\"NodeId\\": 33115,\\n      \\"InstanceHistoryId\\": 1\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<ListInstanceHistoryResponse>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <Success>true</Success>\\n    <Instances>\\n        <Status>NOT_RUN</Status>\\n        <CycTime>1590422400000</CycTime>\\n        <BeginRunningTime>1590416703313</BeginRunningTime>\\n        <FinishTime>1590416703313</FinishTime>\\n        <ErrorMessage>error message</ErrorMessage>\\n        <CreateTime>1590416703313</CreateTime>\\n        <DagId>33845</DagId>\\n        <TaskType>NORMAL(0)</TaskType>\\n        <DagType>1</DagType>\\n        <ModifyTime>1590416703313</ModifyTime>\\n        <InstanceId>1234</InstanceId>\\n        <BeginWaitResTime>1590416703313</BeginWaitResTime>\\n        <Bizdate>1590336000000</Bizdate>\\n        <NodeName>kzh</NodeName>\\n        <BeginWaitTimeTime>1590416703313</BeginWaitTimeTime>\\n        <NodeId>33115</NodeId>\\n        <InstanceHistoryId>1</InstanceHistoryId>\\n    </Instances>\\n</ListInstanceHistoryResponse>","errorExample":""}]',
      'title' => '获取所有实例历史记录',
    ),
    'ListInnerNodes' => 
    array (
      'summary' => '调用ListInnerNodes获取内部节点详情，例如查询组合节点、循环节点等节点类型的内部节点，不支持PAI节点的内部节点查询。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '146118',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7WF1GB',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProgramType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的代码类型。

常用的代码及其对应的文件类型包括6（Shell）、10（ODPS SQL）、11（ODPS MR）、23（数据集成）、24（ODPS Script）、97（PAI）、98（组合节点）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1002（PAI内部节点）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1106（遍历节点（foreach））、1221（PyODPS 3），您可以调用ListNodes查看节点类型。',
            'type' => 'string',
            'required' => false,
            'example' => 'ODPS_SQL',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码数。最小值1，最大值100',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '10',
            'example' => '10',
            'default' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        4 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运行的环境，包括DEV和PROD，默认PROD。',
            'type' => 'string',
            'required' => false,
            'example' => 'PROD',
            'default' => 'PROD',
          ),
        ),
        5 => 
        array (
          'name' => 'NodeName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'liux_test_n****',
          ),
        ),
        6 => 
        array (
          'name' => 'OuterNodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '内部节点所属的组合节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结果',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Paging' => 
              array (
                'description' => '分页信息',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '符合条件的节点总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Nodes' => 
                  array (
                    'description' => '内部节点列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '节点详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'SchedulerType' => 
                        array (
                          'description' => '调度的类型，取值如下：

- NORMAL：正常调度任务。
- MANUAL：手动任务，不会被日常调度。
- PAUSE：暂停任务。
- SKIP：空跑任务，被日常调度，但启动调度时直接被置为成功。',
                          'type' => 'string',
                          'example' => 'NORMAL',
                        ),
                        'RepeatInterval' => 
                        array (
                          'description' => '出错后重新调度频率。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '60',
                        ),
                        'Repeatability' => 
                        array (
                          'description' => '是否可以重复运行。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'ProgramType' => 
                        array (
                          'description' => '节点的类型。',
                          'type' => 'string',
                          'example' => 'ODPS_SQL',
                        ),
                        'Priority' => 
                        array (
                          'description' => '优先级，1/3/5/7/8',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'OwnerId' => 
                        array (
                          'description' => '负责人的ID。',
                          'type' => 'string',
                          'example' => '1933****36551',
                        ),
                        'Connection' => 
                        array (
                          'description' => '连接串。',
                          'type' => 'string',
                          'example' => 'odps_source',
                        ),
                        'ParamValues' => 
                        array (
                          'description' => '额外的参数。',
                          'type' => 'string',
                          'example' => 'a=b',
                        ),
                        'DqcType' => 
                        array (
                          'description' => 'DQC类型，0表示有关联dqc，1表示没有关联dqc。',
                          'type' => 'string',
                          'example' => '1',
                        ),
                        'BaselineId' => 
                        array (
                          'description' => '基线ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'Description' => 
                        array (
                          'description' => '节点的描述信息。',
                          'type' => 'string',
                          'example' => 'test',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点的名称。',
                          'type' => 'string',
                          'example' => 'liux_test_n****',
                        ),
                        'ResGroupName' => 
                        array (
                          'description' => '资源组的名称。',
                          'type' => 'string',
                          'example' => '默认资源组',
                        ),
                        'BusinessId' => 
                        array (
                          'description' => '业务流程ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'DqcDescription' => 
                        array (
                          'description' => 'DQC分区规则串。',
                          'type' => 'string',
                          'example' => '[{"projectName":"ztjy_dim","tableName":"dim_user_agent_manage_area_a","partition":"ds\\u003d$[yyyy-mm-dd-1]"}]',
                        ),
                        'CronExpress' => 
                        array (
                          'description' => 'cron表达式。',
                          'type' => 'string',
                          'example' => '00 00 00 * * ?',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '12',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"Success\\": true,\\n  \\"Paging\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Nodes\\": [\\n      {\\n        \\"SchedulerType\\": \\"NORMAL\\",\\n        \\"RepeatInterval\\": 60,\\n        \\"Repeatability\\": true,\\n        \\"ProjectId\\": 123,\\n        \\"ProgramType\\": \\"ODPS_SQL\\",\\n        \\"Priority\\": 1,\\n        \\"OwnerId\\": \\"1933****36551\\",\\n        \\"Connection\\": \\"odps_source\\",\\n        \\"ParamValues\\": \\"a=b\\",\\n        \\"DqcType\\": \\"1\\",\\n        \\"BaselineId\\": 1234,\\n        \\"Description\\": \\"test\\",\\n        \\"NodeName\\": \\"liux_test_n****\\",\\n        \\"ResGroupName\\": \\"默认资源组\\",\\n        \\"BusinessId\\": 123,\\n        \\"DqcDescription\\": \\"[{\\\\\\"projectName\\\\\\":\\\\\\"ztjy_dim\\\\\\",\\\\\\"tableName\\\\\\":\\\\\\"dim_user_agent_manage_area_a\\\\\\",\\\\\\"partition\\\\\\":\\\\\\"ds\\\\\\\\u003d$[yyyy-mm-dd-1]\\\\\\"}]\\",\\n        \\"CronExpress\\": \\"00 00 00 * * ?\\",\\n        \\"NodeId\\": 12\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListInnerNodesResponse>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <Success>true</Success>\\n    <Paging>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Nodes>\\n            <SchedulerType>NORMAL</SchedulerType>\\n            <RepeatInterval>60</RepeatInterval>\\n            <Repeatability>true</Repeatability>\\n            <ProjectId>123</ProjectId>\\n            <ProgramType>ODPS_SQL</ProgramType>\\n            <Priority>1</Priority>\\n            <OwnerId>19337906836551</OwnerId>\\n            <Connection>odps_source</Connection>\\n            <ParamValues>a=b</ParamValues>\\n            <DqcType>1</DqcType>\\n            <BaselineId>1234</BaselineId>\\n            <Description>test</Description>\\n            <NodeName>liux_test_n****</NodeName>\\n            <ResGroupName>默认资源组</ResGroupName>\\n            <BusinessId>123</BusinessId>\\n            <DqcDescription>[{\\"projectName\\":\\"ztjy_dim\\",\\"tableName\\":\\"dim_user_agent_manage_area_a\\",\\"partition\\":\\"ds\\\\u003d$[yyyy-mm-dd-1]\\"}]</DqcDescription>\\n            <CronExpress>00 00 00 * * ?</CronExpress>\\n            <NodeId>12</NodeId>\\n        </Nodes>\\n    </Paging>\\n</ListInnerNodesResponse>","errorExample":""}]',
      'title' => '获取内部节点列表',
    ),
    'OfflineNode' => 
    array (
      'summary' => '调用OfflineNode下线节点。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的ID。您可以调用[ListNodes](~~173979~~)接口查看NodeId的相关信息。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间ID。您可以通过[ListProjects](~~178393~~)接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '9527',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结果',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"Success\\": \\"true\\"\\n}","errorExample":""},{"type":"xml","example":"<OfflineNodeResponse>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <Success>true</Success>\\n</OfflineNodeResponse>","errorExample":""}]',
      'title' => '下线节点',
    ),
    'GetBaseline' => 
    array (
      'summary' => '根据基线ID获取基线配置。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '158223',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BaselineId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的ID，可以通过 [ListBaselines](~~2261507~~) 获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '123456',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线所监控的项目空间ID，可从 [ListBaselines](~~2261507~~) 获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '10000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<PopBaselineConfigDto>',
            'description' => 'OpenApiResultModel<PopBaselineConfigDto>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功，true - 成功，false - 失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '返回值。',
                'type' => 'object',
                'properties' => 
                array (
                  'BaselineId' => 
                  array (
                    'title' => '基线id',
                    'description' => '基线的id。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1001',
                  ),
                  'BaselineName' => 
                  array (
                    'title' => '基线名',
                    'description' => '基线名。',
                    'type' => 'string',
                    'example' => '测试基线',
                  ),
                  'ProjectId' => 
                  array (
                    'title' => '项目id',
                    'description' => '项目id。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10000',
                  ),
                  'Owner' => 
                  array (
                    'title' => '责任人',
                    'description' => '责任人。',
                    'type' => 'string',
                    'example' => '9527952****',
                  ),
                  'Priority' => 
                  array (
                    'title' => '优先级',
                    'description' => '基线的优先级，取值集合为{1,3,5,7,8}。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'BaselineType' => 
                  array (
                    'title' => '基线类型 (DAILY, HOURLY)',
                    'description' => '基线类型。

- DAILY - 日基线
- HOURLY - 小时基线',
                    'type' => 'string',
                    'example' => 'DAILY',
                  ),
                  'OverTimeSettings' => 
                  array (
                    'title' => '基线承诺时间设置',
                    'description' => '基线承诺时间设置。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '监控周期。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Cycle' => 
                        array (
                          'title' => '周期，取值范围 [1,24]',
                          'description' => '承诺时间对应的周期，天基线是1，小时基线可以配置最多24个周期。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'Time' => 
                        array (
                          'title' => '承诺时间，hh:mm格式，hh的取值范围为[0,47]，mm的取值范围为[0,59]',
                          'description' => '承诺时间，hh:mm格式，hh的取值范围为[0,47]，mm的取值范围为[0,59]。',
                          'type' => 'string',
                          'example' => '00:00',
                        ),
                      ),
                    ),
                  ),
                  'Enabled' => 
                  array (
                    'title' => '是否开启基线',
                    'description' => '是否开启基线。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'NodeIds' => 
                  array (
                    'title' => '基线节点列表',
                    'description' => '基线上游节点列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '节点ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '700003559814',
                    ),
                  ),
                  'AlertEnabled' => 
                  array (
                    'title' => '是否开启告警',
                    'description' => '是否开启告警。

- true - 是
- false - 否',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'AlertMarginThreshold' => 
                  array (
                    'title' => '预警余量，单位为分钟',
                    'description' => '预警余量，单位为分钟。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '60',
                  ),
                  'AlertSettings' => 
                  array (
                    'title' => '告警设置',
                    'description' => '告警设置。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '基线的告警配置。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'AlertType' => 
                        array (
                          'title' => '告警类型，BASELINE / TOPIC',
                          'description' => '告警类型
- BASELINE - 基线
- TOPIC - 事件
',
                          'type' => 'string',
                          'example' => 'BASELINE',
                        ),
                        'AlertMethods' => 
                        array (
                          'title' => '告警方式',
                          'description' => '告警方式列表',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '告警方式。取值如下：
- MAIL - 邮件
- SMS - 短信
- PHONE - 语音 
- DINGROBOTS - 钉钉机器人
- WEBHOOKS - Webhook',
                            'type' => 'string',
                            'example' => 'MAIL',
                          ),
                        ),
                        'SilenceStartTime' => 
                        array (
                          'title' => '静默开始时间',
                          'description' => '静默开始时间，格式为 HH:mm:ss 。',
                          'type' => 'string',
                          'example' => '00:00:00',
                        ),
                        'SilenceEndTime' => 
                        array (
                          'title' => '静默结束时间',
                          'description' => '静默结束时间，格式为 HH:mm:ss 。',
                          'type' => 'string',
                          'example' => '00:00:00',
                        ),
                        'AlertInterval' => 
                        array (
                          'title' => '事件告警间隔',
                          'description' => '事件告警间隔，单位为秒。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '900',
                        ),
                        'AlertMaximum' => 
                        array (
                          'title' => '事件告警最大次数',
                          'description' => '事件告警最大次数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'DingRobots' => 
                        array (
                          'title' => '钉钉机器人列表',
                          'description' => '钉钉机器人列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '钉钉机器人配置。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'WebUrl' => 
                              array (
                                'description' => '钉钉机器人地址。',
                                'type' => 'string',
                                'example' => 'https://oapi.dingtalk.com/robot/send?access_token=xxx',
                              ),
                              'AtAll' => 
                              array (
                                'description' => '是否 @所有人。',
                                'type' => 'boolean',
                                'example' => 'true',
                              ),
                            ),
                          ),
                        ),
                        'Webhooks' => 
                        array (
                          'title' => 'webhook 列表',
                          'description' => 'webhook 列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '企业微信或飞书机器人的webhook地址，多个webhook地址之间使用英文逗号（,）分隔。alertMethods 中需要包含 WEBHOOKS 告警方式。仅DataWorks企业版支持。

可用地域：华东2（上海）、西南1（成都）、华北3（张家口）、华北2（北京）、华东1（杭州）、华南1（深圳）、中国（香港）、欧洲中部 1（法兰克福）、亚太东南1（新加坡）。',
                            'type' => 'string',
                            'example' => 'https://open.feishu.cn/open-apis/bot/v2/hook/xxx',
                          ),
                        ),
                        'TopicTypes' => 
                        array (
                          'title' => '事件告警类型，事件特有配置',
                          'description' => '事件告警类型列表，事件特有配置。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '事件告警类型。

- SLOW - 变慢
- ERROR - 出错',
                            'type' => 'string',
                            'example' => 'SLOW',
                          ),
                        ),
                        'BaselineAlertEnabled' => 
                        array (
                          'title' => '基线告警开关，基线特有配置',
                          'description' => '基线告警开关，基线特有配置。

- true - 开启
- false - 关闭',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'AlertRecipientType' => 
                        array (
                          'title' => '告警接收人类型',
                          'description' => '告警接收人类型。

- OWNER - 任务责任人
- OTHER - 指定的人
- SHIFT_SCHEDULE - 值班表 ',
                          'type' => 'string',
                          'example' => 'OWNER',
                        ),
                        'AlertRecipient' => 
                        array (
                          'title' => '告警接收人详情',
                          'description' => '告警接收人详情。

- AlertRecipientType 为 OWNER：空
- AlertRecipientType 为 SHIFT_SCHEDULE：值班表uid
- AlertRecipientType 为 OTHER: uid列表，多个uid使用英文 , 分割',
                          'type' => 'string',
                          'example' => '123123',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'ecb967ec-c137-48a5-860****',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": {\\n    \\"BaselineId\\": 1001,\\n    \\"BaselineName\\": \\"测试基线\\",\\n    \\"ProjectId\\": 10000,\\n    \\"Owner\\": \\"9527952****\\",\\n    \\"Priority\\": 1,\\n    \\"BaselineType\\": \\"DAILY\\",\\n    \\"OverTimeSettings\\": [\\n      {\\n        \\"Cycle\\": 1,\\n        \\"Time\\": \\"00:00\\"\\n      }\\n    ],\\n    \\"Enabled\\": true,\\n    \\"NodeIds\\": [\\n      700003559814\\n    ],\\n    \\"AlertEnabled\\": true,\\n    \\"AlertMarginThreshold\\": 60,\\n    \\"AlertSettings\\": [\\n      {\\n        \\"AlertType\\": \\"BASELINE\\",\\n        \\"AlertMethods\\": [\\n          \\"MAIL\\"\\n        ],\\n        \\"SilenceStartTime\\": \\"00:00:00\\",\\n        \\"SilenceEndTime\\": \\"00:00:00\\",\\n        \\"AlertInterval\\": 900,\\n        \\"AlertMaximum\\": 1,\\n        \\"DingRobots\\": [\\n          {\\n            \\"WebUrl\\": \\"https://oapi.dingtalk.com/robot/send?access_token=xxx\\",\\n            \\"AtAll\\": true\\n          }\\n        ],\\n        \\"Webhooks\\": [\\n          \\"https://open.feishu.cn/open-apis/bot/v2/hook/xxx\\"\\n        ],\\n        \\"TopicTypes\\": [\\n          \\"SLOW\\"\\n        ],\\n        \\"BaselineAlertEnabled\\": false,\\n        \\"AlertRecipientType\\": \\"OWNER\\",\\n        \\"AlertRecipient\\": \\"123123\\"\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"ecb967ec-c137-48a5-860****\\"\\n}","errorExample":""},{"type":"xml","example":"<GetBaselineResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <ErrorMessage>The specified parameters are invalid</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>\\n        <BaselineId>1001</BaselineId>\\n        <BaselineName>测试基线</BaselineName>\\n        <ProjectId>10000</ProjectId>\\n        <Owner>9527952****</Owner>\\n        <Priority>1</Priority>\\n        <BaselineType>DAILY</BaselineType>\\n        <OverTimeSettings>\\n            <Cycle>1</Cycle>\\n            <Time>00:00</Time>\\n        </OverTimeSettings>\\n        <Enabled>true</Enabled>\\n        <TaskIds>123123</TaskIds>\\n        <AlertEnabled>true</AlertEnabled>\\n        <AlertMarginThreshold>60</AlertMarginThreshold>\\n        <AlertSettings>\\n            <AlertType>BASELINE</AlertType>\\n            <AlertMethods>MAIL</AlertMethods>\\n            <SilenceStartTime>00:00:00</SilenceStartTime>\\n            <SilenceEndTime>00:00:00</SilenceEndTime>\\n            <AlertInterval>900</AlertInterval>\\n            <AlertMaximum>1</AlertMaximum>\\n            <DingRobots>\\n                <WebUrl>https://oapi.dingtalk.com/robot/send?access_token=xxx</WebUrl>\\n                <AtAll>true</AtAll>\\n            </DingRobots>\\n            <Webhooks>https://open.feishu.cn/open-apis/bot/v2/hook/xxx</Webhooks>\\n            <TopicTypes>SLOW</TopicTypes>\\n            <BaselineAlertEnabled>false</BaselineAlertEnabled>\\n            <AlertRecipientType>OWNER</AlertRecipientType>\\n            <AlertRecipient>123123</AlertRecipient>\\n        </AlertSettings>\\n    </Data>\\n    <RequestId>ecb967ec-c137-48a5-860****</RequestId>\\n</GetBaselineResponse>","errorExample":""}]',
      'title' => '获取基线配置',
    ),
    'DeleteBaseline' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '158727',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BaselineId',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线Id',
            'description' => '基线的ID，可以通过 [ListBaselines](~~2261507~~) 获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '项目空间ID',
            'description' => '基线所监控的项目空间ID，可从 ListBaselines 获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '10000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Boolean>',
            'description' => 'OpenApiResultModel<Boolean>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。

- true：调用成功

- false：调用失败',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110000',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'Baseline deletion failed with nodes dependent on baseline',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '是否成功删除。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EF****',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110000\\",\\n  \\"ErrorMessage\\": \\"Baseline deletion failed with nodes dependent on baseline\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0000-ABCD-EF****\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteBaselineResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1031203110000</ErrorCode>\\n    <ErrorMessage>Baseline deletion failed with nodes dependent on baseline</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>0000-ABCD-EF****</RequestId>\\n</DeleteBaselineResponse>","errorExample":""}]',
      'title' => '删除基线配置',
      'summary' => '根据基线ID删除基线配置，只有基线上游没有任何节点的情况下才允许删除。可通过调用UpdateBaseline接口修改基线上游节点。',
    ),
    'ListBaselines' => 
    array (
      'summary' => '该接口用于获取基线列表。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '158237',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '责任人',
            'description' => '责任人',
            'type' => 'string',
            'required' => false,
            'example' => '3726346****',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '项目空间id',
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '123456',
          ),
        ),
        2 => 
        array (
          'name' => 'Priority',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的优先级，取值范围为{1,3,5,7,8}。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'Enable',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '是否开启基线',
            'description' => '是否开启基线，包括true（可用）和false（不可用）。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        4 => 
        array (
          'name' => 'BaselineTypes',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线类型',
            'description' => '基线的类型，包括DAILY（天基线）和HOURLY（小时基线）。多个类型之间使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => false,
            'example' => 'DAILY',
          ),
        ),
        5 => 
        array (
          'name' => 'SearchText',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线名模糊查询',
            'description' => '基线名称的搜索关键字。',
            'type' => 'string',
            'required' => false,
            'example' => 'baselineName',
          ),
        ),
        6 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页查询页码。大于等于1的正整数，默认为1，最大为30。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '1',
          ),
        ),
        7 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '100',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<PopBaselineConfigDto>',
            'description' => 'OpenApiResultModel<PopBaselineConfigDto>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '103630001',
              ),
              'ErrorMessage' => 
              array (
                'description' => '调用失败时，返回的错误信息。',
                'type' => 'string',
                'example' => 'The user does not exist. 276571706358178756',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '返回的基线列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前的页数。',
                    'type' => 'string',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页的大小。',
                    'type' => 'string',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '基线的总数。',
                    'type' => 'string',
                    'example' => '100',
                  ),
                  'Baselines' => 
                  array (
                    'description' => '基线列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '基线配置。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'BaselineId' => 
                        array (
                          'description' => '基线的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '基线所在工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '9527',
                        ),
                        'BaselineType' => 
                        array (
                          'description' => '基线类型，包括DAILY（天基线）和HOURLY（小时基线）。 
',
                          'type' => 'string',
                          'example' => 'DAILY',
                        ),
                        'Priority' => 
                        array (
                          'description' => '基线的优先级，取值范围为{1,2,5,7,8}。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'Owner' => 
                        array (
                          'description' => '基线责任人的阿里云UID。有多个责任人时，使用英文逗号（,）分隔。
',
                          'type' => 'string',
                          'example' => '952795****',
                        ),
                        'BaselineName' => 
                        array (
                          'description' => '基线的名称。',
                          'type' => 'string',
                          'example' => 'BaselineName',
                        ),
                        'Enabled' => 
                        array (
                          'description' => '基线是否开启，包括true（可用）和false（不可用）。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'AlertEnabled' => 
                        array (
                          'description' => '是否开启告警，包括true（开启）和false（关闭）。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'AlertMarginThreshold' => 
                        array (
                          'description' => '基线实例的预警阈值，单位为分钟。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '30',
                        ),
                        'OverTimeSettings' => 
                        array (
                          'description' => '基线承诺时间设置。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '周期配置。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'Cycle' => 
                              array (
                                'description' => '承诺时间对应的周期，天基线为1，小时基线可以配置最多24个周期。',
                                'type' => 'integer',
                                'format' => 'int32',
                                'example' => '1',
                              ),
                              'Time' => 
                              array (
                                'description' => '承诺时间，hh:mm格式，hh的取值范围为\\[0,47\\]，mm的取值范围为\\[0,59\\]。',
                                'type' => 'string',
                                'example' => '00:00',
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一id。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '952795279527ab****',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"103630001\\",\\n  \\"ErrorMessage\\": \\"The user does not exist. 276571706358178756\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": {\\n    \\"PageNumber\\": \\"1\\",\\n    \\"PageSize\\": \\"10\\",\\n    \\"TotalCount\\": \\"100\\",\\n    \\"Baselines\\": [\\n      {\\n        \\"BaselineId\\": 1234,\\n        \\"ProjectId\\": 9527,\\n        \\"BaselineType\\": \\"DAILY\\",\\n        \\"Priority\\": 1,\\n        \\"Owner\\": \\"952795****\\",\\n        \\"BaselineName\\": \\"BaselineName\\",\\n        \\"Enabled\\": true,\\n        \\"AlertEnabled\\": true,\\n        \\"AlertMarginThreshold\\": 30,\\n        \\"OverTimeSettings\\": [\\n          {\\n            \\"Cycle\\": 1,\\n            \\"Time\\": \\"00:00\\"\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"952795279527ab****\\"\\n}","errorExample":""},{"type":"xml","example":"<ListBaselinesResponse>\\n    <Success>true</Success>\\n    <ErrorCode>103630001</ErrorCode>\\n    <ErrorMessage>The user does not exist. 276571706358178756</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Baselines>\\n            <BaselineId>1234</BaselineId>\\n            <ProjectId>9527</ProjectId>\\n            <BaselineType>DAILY</BaselineType>\\n            <Priority>1</Priority>\\n            <Owner>952795****</Owner>\\n            <BaselineName>BaselineName</BaselineName>\\n            <Enabled>true</Enabled>\\n            <AlertEnabled>true</AlertEnabled>\\n            <AlertMarginThreshold>30</AlertMarginThreshold>\\n            <OverTimeSettings>\\n                <Cycle>1</Cycle>\\n                <Time>00:00</Time>\\n            </OverTimeSettings>\\n        </Baselines>\\n    </Data>\\n    <RequestId>952795279527ab****</RequestId>\\n</ListBaselinesResponse>","errorExample":""}]',
      'title' => '获取基线列表',
    ),
    'CreateBaseline' => 
    array (
      'summary' => '该接口用于创建基线。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '158238',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BaselineName',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线名',
            'description' => '基线名称。',
            'type' => 'string',
            'required' => true,
            'example' => 'BaselineName',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '项目id',
            'description' => 'DataWorks工作空间的ID，您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间管理页面查看ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '责任人',
            'description' => '基线责任人的阿里云uid。',
            'type' => 'string',
            'required' => true,
            'example' => '1000000000001',
          ),
        ),
        3 => 
        array (
          'name' => 'Priority',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线优先级',
            'description' => '基线的优先级，取值范围为{1,3,5,7,8}。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '1,3,5,7,8',
          ),
        ),
        4 => 
        array (
          'name' => 'NodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线上游节点列表。',
            'type' => 'string',
            'required' => false,
            'example' => '210001233239,210001236482',
          ),
        ),
        5 => 
        array (
          'name' => 'OvertimeSettings',
          'in' => 'formData',
          'style' => 'repeatList',
          'schema' => 
          array (
            'title' => '基线承诺时间',
            'description' => '基线承诺时间配置。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '周期。',
              'type' => 'object',
              'properties' => 
              array (
                'Cycle' => 
                array (
                  'title' => '周期，取值范围 [1,24]',
                  'description' => '承诺时间对应的周期，天基线需要配置为1，小时基线可以配置最多24个周期。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '1',
                ),
                'Time' => 
                array (
                  'title' => '承诺时间，hh:mm格式，hh的取值范围为[0,47]，mm的取值范围为[0,59]',
                  'description' => '承诺时间，hh:mm格式，hh的取值范围为\\[0,47\\]，mm的取值范围为\\[0,59\\]。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '00:00',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 24,
            'minItems' => 1,
          ),
        ),
        6 => 
        array (
          'name' => 'AlertMarginThreshold',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线预警余量',
            'description' => '基线预警余量，单位为分钟。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '30',
          ),
        ),
        7 => 
        array (
          'name' => 'BaselineType',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线类型 (DAILY, HOURLY)',
            'description' => '基线类型，包括DAILY（天基线）和HOURLY（小时基线）。',
            'type' => 'string',
            'required' => true,
            'example' => 'DAILY',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Long>',
            'description' => 'OpenApiResultModel<Long>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '基线的id。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '100003',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用请求的ID，是由阿里云为该请求生成的唯一标识符，可用于排查和定位问题。',
                'type' => 'string',
                'example' => 'F05080B0-CCE6-5D22-B284-34A51C5D4E28',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"401\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 100003,\\n  \\"RequestId\\": \\"F05080B0-CCE6-5D22-B284-34A51C5D4E28\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateBaselineResponse>\\n    <Success>true</Success>\\n    <ErrorCode>401</ErrorCode>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>100003</Data>\\n    <RequestId>F05080B0-CCE6-5D22-B284-34A51C5D4E28</RequestId>\\n</CreateBaselineResponse>","errorExample":""}]',
      'title' => '创建基线',
    ),
    'UpdateBaseline' => 
    array (
      'summary' => '更新基线',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '158726',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSFSFU4',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BaselineId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的ID, 可通过 [ListBaselines](~~2261507~~) 获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1000010800007',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '项目ID, 可通过 [ListBaselines](~~2261507~~) 获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '2043',
          ),
        ),
        2 => 
        array (
          'name' => 'BaselineName',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线名',
            'description' => '基线名。',
            'type' => 'string',
            'required' => false,
            'example' => 'BaselineName',
          ),
        ),
        3 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '责任人',
            'description' => '基线责任人的阿里云uid。',
            'type' => 'string',
            'required' => false,
            'example' => '3726346****',
          ),
        ),
        4 => 
        array (
          'name' => 'Priority',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线优先级',
            'description' => '基线的优先级，取值范围为{1,3,5,7,8}。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '7',
          ),
        ),
        5 => 
        array (
          'name' => 'NodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线上游节点列表，使用逗号分割，节点较多的情况下，建议在其下游增加虚节点，便于管理。',
            'type' => 'string',
            'required' => false,
            'example' => '1,2,3',
          ),
        ),
        6 => 
        array (
          'name' => 'OvertimeSettings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'title' => '基线承诺时间',
            'description' => '基线承诺时间配置。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '周期。',
              'type' => 'object',
              'properties' => 
              array (
                'Cycle' => 
                array (
                  'title' => '周期，取值范围 [1,24]',
                  'description' => '承诺时间对应的周期，天基线是1，小时基线可以配置最多24个周期。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '1',
                ),
                'Time' => 
                array (
                  'title' => '承诺时间，hh:mm格式，hh的取值范围为[0,47]，mm的取值范围为[0,59]',
                  'description' => '承诺时间，hh:mm格式，hh的取值范围为[0,47]，mm的取值范围为[0,59]。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '00:00',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 24,
          ),
        ),
        7 => 
        array (
          'name' => 'AlertMarginThreshold',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线预警余量',
            'description' => '基线预警余量，单位为分钟。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '30',
          ),
        ),
        8 => 
        array (
          'name' => 'BaselineType',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '基线类型 (DAILY, HOURLY)',
            'description' => '基线类型，包括DAILY（天基线）和HOURLY（小时基线）。',
            'type' => 'string',
            'required' => false,
            'example' => 'DAILY',
          ),
        ),
        9 => 
        array (
          'name' => 'Enabled',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '是否开启基线',
            'description' => '基线是否开启，包括true（可用）和false（不可用）。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        10 => 
        array (
          'name' => 'AlertEnabled',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => '是否开启告警',
            'description' => '是否开启告警，包括true（开启）和false（关闭）。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        11 => 
        array (
          'name' => 'AlertSettings',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'title' => '告警配置',
            'description' => '基线告警配置。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '告警配置。',
              'type' => 'object',
              'properties' => 
              array (
                'AlertType' => 
                array (
                  'title' => '告警类型，BASELINE / TOPIC',
                  'description' => '告警类型，BASELINE - 基线 / TOPIC - 事件。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'BASELINE',
                ),
                'AlertMethods' => 
                array (
                  'title' => '告警方式',
                  'description' => 'MAIL（邮件）
SMS（短信）
PHONE（电话），仅DataWorks专业版及以上版本支持使用电话方式接收报警。
DINGROBOTS（钉钉机器人），仅当配置RobotUrls参数后，该报警方式才会生效。
Webhooks（企业微信或飞书机器人），仅当配置 Webhooks 参数后，该报警方式才会生效。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '报警的方式',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'SMS',
                  ),
                  'required' => false,
                ),
                'SilenceStartTime' => 
                array (
                  'title' => '静默开始时间',
                  'description' => '静默开始时间。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '00:00:00',
                ),
                'SilenceEndTime' => 
                array (
                  'title' => '静默结束时间',
                  'description' => '静默结束时间。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '00:00:00',
                ),
                'AlertInterval' => 
                array (
                  'title' => '事件告警间隔',
                  'description' => '事件告警间隔，单位为秒，最小为900。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'maximum' => '1440',
                  'minimum' => '5',
                  'example' => '1800',
                ),
                'AlertMaximum' => 
                array (
                  'title' => '事件告警最大次数',
                  'description' => '事件告警最大次数，最大为24。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'maximum' => '288',
                  'minimum' => '1',
                  'example' => '1',
                ),
                'DingRobots' => 
                array (
                  'title' => '钉钉机器人列表',
                  'description' => '钉钉机器人列表',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '钉钉机器人配置。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'WebUrl' => 
                      array (
                        'description' => '钉钉群机器人的webhook地址。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'https://oapi.dingtalk.com/robot/send?access_token=xxx	',
                      ),
                      'AtAll' => 
                      array (
                        'description' => '是否@所有人，包括true（是）和false（否）。',
                        'type' => 'boolean',
                        'required' => false,
                        'example' => 'false',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                  'maxItems' => 10,
                ),
                'Webhooks' => 
                array (
                  'title' => 'webhook 列表',
                  'description' => 'webhook 列表。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '企业微信或飞书机器人的webhook地址，多个webhook地址之间使用英文逗号（,）分隔。alertMethods 中需要包含 WEBHOOKS 告警方式。当该参数配置为undefined时，系统会清空WebHook地址。

仅DataWorks企业版支持。
可用地域：华东2（上海）、西南1（成都）、华北3（张家口）、华北2（北京）、华东1（杭州）、华南1（深圳）、中国（香港）、欧洲中部 1（法兰克福）、亚太东南1（新加坡）。',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'https://open.feishu.cn/open-apis/bot/v2/hook/xxx	',
                  ),
                  'required' => false,
                  'maxItems' => 10,
                ),
                'TopicTypes' => 
                array (
                  'title' => '事件告警类型，事件特有配置',
                  'description' => '事件告警类型，事件特有配置。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '事件的类型，包括SLOW（变慢）和ERROR（出错）。多个事件类型之间使用英文逗号（,）分隔。',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'SLOW',
                  ),
                  'required' => false,
                  'maxItems' => 10,
                ),
                'BaselineAlertEnabled' => 
                array (
                  'title' => '基线告警开关，基线特有配置',
                  'description' => '基线告警开关，基线特有配置，包括true（是）和false（否）。',
                  'type' => 'boolean',
                  'required' => false,
                  'example' => 'true',
                ),
                'AlertRecipientType' => 
                array (
                  'title' => '告警接收人类型',
                  'description' => '告警接收人类型，OWNER（任务责任人）/ OTHER（指定的人）/ SHIFT_SCHEDULE（值班表）。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'OWNER',
                ),
                'AlertRecipient' => 
                array (
                  'title' => '告警接收人详情',
                  'description' => '告警接收人详情，指定人：工号列表，值班表：值班表名，责任人：空。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '123123',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
          ),
        ),
        12 => 
        array (
          'name' => 'RemoveNodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '需要从基线上提出的节点ID，多个ID间使用,分隔',
            'type' => 'string',
            'required' => false,
            'example' => '123,456',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Boolean>',
            'description' => 'OpenApiResultModel<Boolean>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '基线是否更新成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用请求的ID，是由阿里云为该请求生成的唯一标识符，可用于排查和定位问题。',
                'type' => 'string',
                'example' => '6E07E90B-D9BC-5D6B-896A-82BA41A34AE1',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"401\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"6E07E90B-D9BC-5D6B-896A-82BA41A34AE1\\"\\n}","errorExample":""},{"type":"xml","example":"<UpdateBaselineResponse>\\n    <Success>true</Success>\\n    <ErrorCode>401</ErrorCode>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>6E07E90B-D9BC-5D6B-896A-82BA41A34AE1</RequestId>\\n</UpdateBaselineResponse>","errorExample":""}]',
      'title' => '修改基线配置',
    ),
    'UpdateQualityFollower' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78379',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideGJ7UNJ',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        1 => 
        array (
          'name' => 'FollowerId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '订阅关系的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        2 => 
        array (
          'name' => 'Follower',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '订阅人。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1912232****',
          ),
        ),
        3 => 
        array (
          'name' => 'AlarmMode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '订阅的方式，包括1（邮件）、2（邮件和短信）、4（钉钉群机器人）、5（钉钉群机器人@ALL）、6（飞书）、7（企业微信）、8（WEBHOOK）和9（电话告警）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '99',
            'minimum' => '0',
            'example' => '2',
            'enum' => 
            array (
              0 => '1',
              1 => '2',
              2 => '4',
              3 => '5',
              4 => '6',
              5 => '7',
              6 => '8',
              7 => '9',
            ),
          ),
        ),
        4 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '	
DataWorks工作空间的ID。您可以进入DataWorks管理控制台获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'example' => '123',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '是否更新成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '576b9457-2cf5-4****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"You have no permission\\",\\n  \\"RequestId\\": \\"576b9457-2cf5-4****\\",\\n  \\"ErrorCode\\": \\"401\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<UpdateQualityFollowerResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>You have no permission</ErrorMessage>\\n    <RequestId>576b9457-2cf5-4****</RequestId>\\n    <ErrorCode>401</ErrorCode>\\n    <Success>true</Success>\\n</UpdateQualityFollowerResponse>","errorExample":""}]',
      'title' => '更新订阅关系',
      'summary' => '调用UpdateQualityFollower更新订阅关系。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateQualityRule' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '78380',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide3WJOKE',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BlockType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '校验规则的强弱。强弱表示规则的重要程度。取值如下：
- 1，表示强规则。
- 0，表示弱规则。
您可以根据实际需求设置重要的规则为强规则。如果使用强规则并触发了红色告警，则会阻塞调度任务。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '1',
            'minimum' => '0',
            'example' => '0',
            'enum' => 
            array (
              0 => '0',
              1 => '1',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'EntityId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式的ID。您可以调用[ListQualityRules](~~173995~~)接口获分区表达式ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '123',
          ),
        ),
        2 => 
        array (
          'name' => 'Comment',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '校验规则的描述信息。',
            'type' => 'string',
            'required' => false,
            'example' => '校验表行数',
            'maxLength' => 512,
          ),
        ),
        3 => 
        array (
          'name' => 'Checker',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '校验器ID。您可以调用[ListQualityRules](~~173995~~)接口获取校验器ID。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '9',
          ),
        ),
        4 => 
        array (
          'name' => 'ExpectValue',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '校验结果的期望值。',
            'type' => 'string',
            'required' => false,
            'example' => '300',
            'maxLength' => 128,
          ),
        ),
        5 => 
        array (
          'name' => 'Id',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '校验规则的ID。您可以调用[ListQualityRules](~~173995~~)接口获取规则ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        6 => 
        array (
          'name' => 'Trend',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '校验结果的趋势。取值如下：
- up，表示上升趋势。
- down，表示下降趋势。
- abs，表示绝对值。',
            'type' => 'string',
            'required' => false,
            'example' => 'up',
          ),
        ),
        7 => 
        array (
          'name' => 'MethodName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '采集样本数据方法的名称。包括avg、count、sum、min、max、count_distinct、user_defined、table_count、table_size、table_dt_load_count、table_dt_refuseload_count、null_value、null_value/table_count、(table_count-count_distinct)/table_count、table_count-count_distinct等。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'table_count',
          ),
        ),
        8 => 
        array (
          'name' => 'Operator',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '比较符。包括>、>=、=、≠、<和<=等。',
            'type' => 'string',
            'required' => false,
            'example' => '>',
            'maxLength' => 128,
          ),
        ),
        9 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间管理页面获取名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        10 => 
        array (
          'name' => 'Property',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '字段的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'id',
            'maxLength' => 128,
            'minLength' => 1,
          ),
        ),
        11 => 
        array (
          'name' => 'PropertyType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '字段的类型。',
            'type' => 'string',
            'required' => false,
            'example' => 'bigint',
            'maxLength' => 128,
          ),
        ),
        12 => 
        array (
          'name' => 'RuleType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '规则的类型：
- 0表示系统创建。
- 1表示用户创建。
- 2表示项目级规则。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '99',
            'minimum' => '0',
            'example' => '0',
          ),
        ),
        13 => 
        array (
          'name' => 'WhereCondition',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '校验任务使用的过滤条件或自定义SQL语句。',
            'type' => 'string',
            'required' => false,
            'example' => 'dt=$[yyyymmdd]',
          ),
        ),
        14 => 
        array (
          'name' => 'CriticalThreshold',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '红色告警阈值。表示与样本预期的偏离程度。您可以根据业务需求自定义该阈值。使用强规则并触发红色阈值，会阻塞调度任务。',
            'type' => 'string',
            'required' => false,
            'example' => '10',
          ),
        ),
        15 => 
        array (
          'name' => 'WarningThreshold',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '橙色告警阈值。表示与样本预期的偏离程度，您可以根据业务需求自定义该阈值。',
            'type' => 'string',
            'required' => false,
            'example' => '5',
          ),
        ),
        16 => 
        array (
          'name' => 'TemplateId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '使用的校验模板的ID。您可以调用[ListQualityRules](~~173995~~)接口获取校验模板的ID。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '7',
          ),
        ),
        17 => 
        array (
          'name' => 'RuleName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '校验规则的名称。',
            'type' => 'string',
            'required' => false,
            'example' => '123',
            'maxLength' => 255,
            'minLength' => 1,
          ),
        ),
        18 => 
        array (
          'name' => 'PredictType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否为动态阈值。取值如下：
- 0，表示非动态阈值。
- 2，表示动态阈值。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '99',
            'minimum' => '0',
            'example' => '0',
          ),
        ),
        19 => 
        array (
          'name' => 'OpenSwitch',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '规则的启用或停用状态，用于控制质量规则是否在生产环境中运行。

- true：在数据质量规则关联产出表数据的调度任务执行时，便会触发质量规则校验。

- false：在数据质量规则关联产出表数据的调度任务执行时，不会触发质量规则校验。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
            'default' => 'true',
          ),
        ),
        20 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks项目空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '26',
          ),
        ),
        21 => 
        array (
          'name' => 'TaskSetting',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '在自定义规则之前插入的变量设置，格式如：x=a,y=b',
            'type' => 'string',
            'required' => false,
            'example' => 'x=a,y=b',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '校验规则是否更新成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于出现错误后排查问题。',
                'type' => 'string',
                'example' => '576b9457-2cf5-4****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '0',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"RequestId\\": \\"576b9457-2cf5-4****\\",\\n  \\"ErrorCode\\": \\"0\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<UpdateQualityRuleResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <RequestId>576b9457-2cf5-4****</RequestId>\\n    <ErrorCode>0</ErrorCode>\\n    <Success>true</Success>\\n</UpdateQualityRuleResponse>","errorExample":""}]',
      'title' => '更新规则',
      'summary' => '调用UpdateQualityRule更新校验规则的信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetQualityRule' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78285',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide3WJOKE',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RuleId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '校验规则的ID。您可以调用[ListQualityRules](~~173995~~)接口查看RuleId的相关信息。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '2147483647',
            'minimum' => '1',
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks项目空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'example' => '12345',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '576b9457-2cf5-4****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '获取的规则信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'BlockType' => 
                  array (
                    'description' => '校验规则的强弱。强弱表示规则的重要程度。取值如下：
- 1，表示强规则。
- 0，表示弱规则。
您可以根据实际需求设置重要的规则为强规则。如果使用强规则并触发了红色告警，则会阻塞调度任务。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'OnDutyAccountName' => 
                  array (
                    'description' => '配置校验规则的阿里云账号名称。',
                    'type' => 'string',
                    'example' => 'test',
                  ),
                  'WarningThreshold' => 
                  array (
                    'description' => '橙色告警阈值。表示与样本预期的偏离程度，您可以根据业务需求自定义该阈值。',
                    'type' => 'string',
                    'example' => '10',
                  ),
                  'Property' => 
                  array (
                    'description' => '规则属性的字段，即被校验数据源表的column名称。',
                    'type' => 'string',
                    'example' => 'id',
                  ),
                  'RuleType' => 
                  array (
                    'description' => '规则的类型。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'Comment' => 
                  array (
                    'description' => '校验规则的描述信息。',
                    'type' => 'string',
                    'example' => '校验主键唯一',
                  ),
                  'OnDuty' => 
                  array (
                    'description' => '配置校验规则的账号ID。',
                    'type' => 'string',
                    'example' => '1822931****',
                  ),
                  'Checker' => 
                  array (
                    'description' => '校验器ID。该字段对应前端的ID标识，需要由pkId转换。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '9',
                  ),
                  'FixCheck' => 
                  array (
                    'description' => '固定值校验。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'MethodId' => 
                  array (
                    'description' => '采集样本数据方法的ID。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '8',
                  ),
                  'CriticalThreshold' => 
                  array (
                    'description' => '红色告警阈值。表示与样本预期的偏离程度。您可以根据业务需求自定义该阈值。使用强规则并触发红色阈值，会阻塞调度任务。',
                    'type' => 'string',
                    'example' => '20',
                  ),
                  'PredictType' => 
                  array (
                    'description' => '是否为动态阈值：
- 0表示非动态阈值。
- 1表示动态阈值规则。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'TemplateName' => 
                  array (
                    'description' => '使用的校验模板的名称。',
                    'type' => 'string',
                    'example' => 'SQL task table rows, 1,7, 30 days fluctuation test',
                  ),
                  'CheckerName' => 
                  array (
                    'description' => '校验器的名称。',
                    'type' => 'string',
                    'example' => 'compared with a fixed value',
                  ),
                  'RuleName' => 
                  array (
                    'description' => '规则的名称。',
                    'type' => 'string',
                    'example' => '查看表波动',
                  ),
                  'MethodName' => 
                  array (
                    'description' => '采集样本数据方法的名称。包括avg、count、sum、min、max、count_distinct、user_defined、table_count、table_size、table_dt_load_count、table_dt_refuseload_count、null_value、null_value/table_count、(table_count-count_distinct)/table_count、table_count-count_distinct等。',
                    'type' => 'string',
                    'example' => 'table_count',
                  ),
                  'EntityId' => 
                  array (
                    'description' => '分区表达式的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '165523',
                  ),
                  'WhereCondition' => 
                  array (
                    'description' => '校验任务使用的过滤条件或自定义SQL语句。',
                    'type' => 'string',
                    'example' => 'id>10',
                  ),
                  'Operator' => 
                  array (
                    'description' => '操作符。',
                    'type' => 'string',
                    'example' => '>=',
                  ),
                  'ExpectValue' => 
                  array (
                    'description' => '期望值。',
                    'type' => 'string',
                    'example' => '30',
                  ),
                  'Trend' => 
                  array (
                    'description' => '校验结果的趋势。',
                    'type' => 'string',
                    'example' => 'abs',
                  ),
                  'TemplateId' => 
                  array (
                    'description' => '使用的校验模板的ID。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '7',
                  ),
                  'Id' => 
                  array (
                    'description' => '规则的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '123232',
                  ),
                  'OpenSwitch' => 
                  array (
                    'description' => '规则是否开启',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'TaskSetting' => 
                  array (
                    'type' => 'string',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"576b9457-2cf5-4****\\",\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"ErrorCode\\": \\"401\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"BlockType\\": 1,\\n    \\"OnDutyAccountName\\": \\"test\\",\\n    \\"WarningThreshold\\": \\"10\\",\\n    \\"Property\\": \\"id\\",\\n    \\"RuleType\\": 0,\\n    \\"Comment\\": \\"校验主键唯一\\",\\n    \\"OnDuty\\": \\"1822931****\\",\\n    \\"Checker\\": 9,\\n    \\"FixCheck\\": true,\\n    \\"MethodId\\": 8,\\n    \\"CriticalThreshold\\": \\"20\\",\\n    \\"PredictType\\": 0,\\n    \\"TemplateName\\": \\"SQL task table rows, 1,7, 30 days fluctuation test\\",\\n    \\"CheckerName\\": \\"compared with a fixed value\\",\\n    \\"RuleName\\": \\"查看表波动\\",\\n    \\"MethodName\\": \\"table_count\\",\\n    \\"EntityId\\": 165523,\\n    \\"WhereCondition\\": \\"id>10\\",\\n    \\"Operator\\": \\">=\\",\\n    \\"ExpectValue\\": \\"30\\",\\n    \\"Trend\\": \\"abs\\",\\n    \\"TemplateId\\": 7,\\n    \\"Id\\": 123232,\\n    \\"OpenSwitch\\": true,\\n    \\"TaskSetting\\": \\"\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetQualityRuleResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>576b9457-2cf5-4****</RequestId>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <ErrorCode>401</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <BlockType>1</BlockType>\\n        <OnDutyAccountName>test</OnDutyAccountName>\\n        <WarningThreshold>10</WarningThreshold>\\n        <Property>id</Property>\\n        <RuleType>0</RuleType>\\n        <Comment>校验主键唯一</Comment>\\n        <OnDuty>1822931****</OnDuty>\\n        <Checker>9</Checker>\\n        <FixCheck>true</FixCheck>\\n        <MethodId>8</MethodId>\\n        <CriticalThreshold>20</CriticalThreshold>\\n        <PredictType>0</PredictType>\\n        <TemplateName>SQL task table rows, 1,7, 30 days fluctuation test</TemplateName>\\n        <CheckerName>compared with a fixed value</CheckerName>\\n        <RuleName>查看表波动</RuleName>\\n        <MethodName>table_count</MethodName>\\n        <EntityId>165523</EntityId>\\n        <WhereCondition>id&gt;10</WhereCondition>\\n        <Operator>&gt;=</Operator>\\n        <ExpectValue>30</ExpectValue>\\n        <Trend>abs</Trend>\\n        <TemplateId>7</TemplateId>\\n        <Id>123232</Id>\\n        <OpenSwitch>true</OpenSwitch>\\n    </Data>\\n</GetQualityRuleResponse>","errorExample":""}]',
      'title' => '获取规则的信息',
      'summary' => '调用GetQualityRule获取校验规则的信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListQualityRules' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78331',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide3WJOKE',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。您可以从数据源配置中获取名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        1 => 
        array (
          'name' => 'EntityId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式的ID。您可以调用[GetQualityEntity](~~174003~~)获取分区表达式ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大为20条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '20',
            'minimum' => '1',
            'example' => '20',
          ),
        ),
        4 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks项目空间ID',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12345',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，用于后续错误排查使用。',
                'type' => 'string',
                'example' => '38cbdef0-f6cf-49****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功，取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '获取的规则列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大为100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '20',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '返回数据总量。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '400',
                  ),
                  'Rules' => 
                  array (
                    'description' => '校验规则的详情。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结构。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'BlockType' => 
                        array (
                          'description' => '校验规则的强弱。强弱表示规则的重要程度。取值如下：
- 1，表示强规则。
- 0，表示弱规则。
您可以根据实际需求设置重要的规则为强规则。如果使用强规则并触发了红色告警，则会阻塞调度任务。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'OnDutyAccountName' => 
                        array (
                          'description' => '配置校验规则的阿里云账号名称。',
                          'type' => 'string',
                          'example' => 'test',
                        ),
                        'Property' => 
                        array (
                          'description' => '字段的名称。',
                          'type' => 'string',
                          'example' => 'id',
                        ),
                        'WarningThreshold' => 
                        array (
                          'description' => '橙色告警阈值。表示与样本预期的偏离程度，您可以根据业务需求自定义该阈值。',
                          'type' => 'string',
                          'example' => '10',
                        ),
                        'TableName' => 
                        array (
                          'description' => '表的名称。',
                          'type' => 'string',
                          'example' => 'dual',
                        ),
                        'OnDuty' => 
                        array (
                          'description' => '配置校验规则的账号ID。',
                          'type' => 'string',
                          'example' => '1912****',
                        ),
                        'Comment' => 
                        array (
                          'description' => '规则的描述信息。',
                          'type' => 'string',
                          'example' => '校验表规则',
                        ),
                        'RuleCheckerRelationId' => 
                        array (
                          'description' => '规则详情的内部关联ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '132323',
                        ),
                        'FixCheck' => 
                        array (
                          'description' => '固定值校验。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'MethodId' => 
                        array (
                          'description' => '采集样本数据方法的ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '21',
                        ),
                        'TemplateName' => 
                        array (
                          'description' => '使用的校验模板的名称。',
                          'type' => 'string',
                          'example' => 'sql任务表行数，1、7、30天波动检测',
                        ),
                        'Trend' => 
                        array (
                          'description' => '校验结果的趋势。',
                          'type' => 'string',
                          'example' => 'abs',
                        ),
                        'HistoryWarningThreshold' => 
                        array (
                          'description' => '历史橙色告警阈值。',
                          'type' => 'string',
                          'example' => 'history max:40%,history min:10%',
                        ),
                        'RuleType' => 
                        array (
                          'description' => '规则的类型：
- 0表示系统创建。
- 1表示用户创建。
- 2表示项目级规则。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'MatchExpression' => 
                        array (
                          'description' => '分区表达式。',
                          'type' => 'string',
                          'example' => 'dt=$[yyyymmdd]',
                        ),
                        'ProjectName' => 
                        array (
                          'description' => '引擎或者数据源的名称。',
                          'type' => 'string',
                          'example' => 'autotest',
                        ),
                        'PropertyKey' => 
                        array (
                          'description' => '用于数据质量前端规则联动，可以忽略。',
                          'type' => 'string',
                          'example' => 'table_count',
                        ),
                        'CriticalThreshold' => 
                        array (
                          'description' => '红色告警阈值。表示与样本预期的偏离程度。您可以根据业务需求自定义该阈值。使用强规则并触发红色阈值，会阻塞调度任务。',
                          'type' => 'string',
                          'example' => '40',
                        ),
                        'HistoryCriticalThreshold' => 
                        array (
                          'description' => '历史红色告警阈值。',
                          'type' => 'string',
                          'example' => 'history max:80%,history min:50%',
                        ),
                        'MethodName' => 
                        array (
                          'description' => '采集样本数据方法的名称。包括avg、count、sum、min、max、count_distinct、user_defined、table_count、table_size、table_dt_load_count、table_dt_refuseload_count、null_value、null_value/table_count、(table_count-count_distinct)/table_count、table_count-count_distinct等。',
                          'type' => 'string',
                          'example' => 'count/table_count',
                        ),
                        'CheckerId' => 
                        array (
                          'description' => '校验器ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '7',
                        ),
                        'EntityId' => 
                        array (
                          'description' => '分区表达式的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'ExpectValue' => 
                        array (
                          'description' => '期望值。',
                          'type' => 'string',
                          'example' => '1000',
                        ),
                        'TemplateId' => 
                        array (
                          'description' => '使用的校验模板的ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '7',
                        ),
                        'Id' => 
                        array (
                          'description' => '规则的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234',
                        ),
                        'RuleName' => 
                        array (
                          'title' => '规则名称',
                          'description' => '规则名称。',
                          'type' => 'string',
                          'example' => 'test',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"38cbdef0-f6cf-49****\\",\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 20,\\n    \\"TotalCount\\": 400,\\n    \\"Rules\\": [\\n      {\\n        \\"BlockType\\": 0,\\n        \\"OnDutyAccountName\\": \\"test\\",\\n        \\"Property\\": \\"id\\",\\n        \\"WarningThreshold\\": \\"10\\",\\n        \\"TableName\\": \\"dual\\",\\n        \\"OnDuty\\": \\"1912****\\",\\n        \\"Comment\\": \\"校验表规则\\",\\n        \\"RuleCheckerRelationId\\": 132323,\\n        \\"FixCheck\\": true,\\n        \\"MethodId\\": 21,\\n        \\"TemplateName\\": \\"sql任务表行数，1、7、30天波动检测\\",\\n        \\"Trend\\": \\"abs\\",\\n        \\"HistoryWarningThreshold\\": \\"history max:40%,history min:10%\\",\\n        \\"RuleType\\": 0,\\n        \\"MatchExpression\\": \\"dt=$[yyyymmdd]\\",\\n        \\"ProjectName\\": \\"autotest\\",\\n        \\"PropertyKey\\": \\"table_count\\",\\n        \\"CriticalThreshold\\": \\"40\\",\\n        \\"HistoryCriticalThreshold\\": \\"history max:80%,history min:50%\\",\\n        \\"MethodName\\": \\"count/table_count\\",\\n        \\"CheckerId\\": 7,\\n        \\"EntityId\\": 1234,\\n        \\"ExpectValue\\": \\"1000\\",\\n        \\"TemplateId\\": 7,\\n        \\"Id\\": 1234,\\n        \\"RuleName\\": \\"test\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListQualityRulesResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>38cbdef0-f6cf-49****</RequestId>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>20</PageSize>\\n        <TotalCount>400</TotalCount>\\n        <Rules>\\n            <BlockType>0</BlockType>\\n            <OnDutyAccountName>test</OnDutyAccountName>\\n            <Property>id</Property>\\n            <WarningThreshold>10</WarningThreshold>\\n            <TableName>dual</TableName>\\n            <OnDuty>1912****</OnDuty>\\n            <Comment>校验表规则</Comment>\\n            <RuleCheckerRelationId>132323</RuleCheckerRelationId>\\n            <FixCheck>true</FixCheck>\\n            <MethodId>21</MethodId>\\n            <TemplateName>sql任务表行数，1、7、30天波动检测</TemplateName>\\n            <Trend>abs</Trend>\\n            <HistoryWarningThreshold>history max:40%,history min:10%</HistoryWarningThreshold>\\n            <RuleType>0</RuleType>\\n            <MatchExpression>dt=$[yyyymmdd]</MatchExpression>\\n            <ProjectName>autotest</ProjectName>\\n            <PropertyKey>table_count</PropertyKey>\\n            <CriticalThreshold>40</CriticalThreshold>\\n            <HistoryCriticalThreshold>history max:80%,history min:50%</HistoryCriticalThreshold>\\n            <MethodName>count/table_count</MethodName>\\n            <CheckerId>7</CheckerId>\\n            <EntityId>1234</EntityId>\\n            <ExpectValue>1000</ExpectValue>\\n            <TemplateId>7</TemplateId>\\n            <Id>1234</Id>\\n            <RuleName>test</RuleName>\\n        </Rules>\\n    </Data>\\n</ListQualityRulesResponse>","errorExample":""}]',
      'title' => '根据分区表达式获取规则列表',
      'summary' => '调用ListQualityRules根据分区表达式获取校验规则列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateQualityRule' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78195',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide3WJOKE',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BlockType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '规则的强弱：0表示弱规则，1表示强规则。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '1',
            'minimum' => '0',
            'example' => '0',
          ),
        ),
        1 => 
        array (
          'name' => 'EntityId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '2147483647',
            'minimum' => '1',
            'example' => '15224',
          ),
        ),
        2 => 
        array (
          'name' => 'Comment',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '规则的描述信息。',
            'type' => 'string',
            'required' => false,
            'example' => '验证',
            'maxLength' => 128,
            'minLength' => 1,
          ),
        ),
        3 => 
        array (
          'name' => 'Checker',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '校验器的ID。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '9',
          ),
        ),
        4 => 
        array (
          'name' => 'ExpectValue',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '期望值。',
            'type' => 'string',
            'required' => false,
            'example' => '0',
          ),
        ),
        5 => 
        array (
          'name' => 'Trend',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '校验结果的趋势。取值如下：
- up，表示上升趋势。
- down，表示下降趋势。
- abs，表示绝对值。',
            'type' => 'string',
            'required' => false,
            'example' => 'abs',
          ),
        ),
        6 => 
        array (
          'name' => 'MethodName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '采样方。如果是自定义SQL，该参数的值为user_defined。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'count/table_count',
          ),
        ),
        7 => 
        array (
          'name' => 'Operator',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '比较符。包括>、>=、=、≠、<和<=等。

> 当Checker=9时，Operator为必选参数。',
            'type' => 'string',
            'required' => false,
            'example' => '>',
          ),
        ),
        8 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        9 => 
        array (
          'name' => 'Property',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '规则的字段。如果是表级别校验，行数为table_count、大小为table_size字段。',
            'type' => 'string',
            'required' => false,
            'example' => 'table_id',
            'maxLength' => 128,
          ),
        ),
        10 => 
        array (
          'name' => 'PropertyType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '字段的类型，表级table，字段级填写bigint等。',
            'type' => 'string',
            'required' => false,
            'example' => 'bigint',
          ),
        ),
        11 => 
        array (
          'name' => 'RuleType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '规则的类型：0表示系统定义、1表示用户自定义、2表示项目级规则。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '99',
            'minimum' => '0',
            'example' => '0',
          ),
        ),
        12 => 
        array (
          'name' => 'WhereCondition',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '过滤条件或自定义SQL。',
            'type' => 'string',
            'required' => false,
            'example' => 'table_id>1',
          ),
        ),
        13 => 
        array (
          'name' => 'CriticalThreshold',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '红色告警阈值。表示与样本预期的偏离程度。您可以根据业务需求自定义该阈值。使用强规则并触发红色阈值，会阻塞调度任务。',
            'type' => 'string',
            'required' => false,
            'example' => '20',
          ),
        ),
        14 => 
        array (
          'name' => 'WarningThreshold',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '橙色告警阈值。表示与样本预期的偏离程度，您可以根据业务需求自定义该阈值。',
            'type' => 'string',
            'required' => false,
            'example' => '10',
          ),
        ),
        15 => 
        array (
          'name' => 'TemplateId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '模板的ID。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'minimum' => '1',
            'example' => '7',
          ),
        ),
        16 => 
        array (
          'name' => 'RuleName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '规则的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
            'maxLength' => 128,
          ),
        ),
        17 => 
        array (
          'name' => 'PredictType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否为动态阈值：0表示非动态阈值、2表示动态阈值规则。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '99',
            'minimum' => '0',
            'example' => '0',
          ),
        ),
        18 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
        19 => 
        array (
          'name' => 'TaskSetting',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '在自定义规则之前插入的变量设置，格式如：x=a,y=b。',
            'type' => 'string',
            'required' => false,
            'example' => 'x=a,y=b',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回参数。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '新建的规则ID。',
                'type' => 'string',
                'example' => '12345',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'ecb967ec-c137-48****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"12345\\",\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"RequestId\\": \\"ecb967ec-c137-48****\\",\\n  \\"ErrorCode\\": \\"401\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<CreateQualityRuleResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>12345</Data>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <RequestId>ecb967ec-c137-48****</RequestId>\\n    <ErrorCode>401</ErrorCode>\\n    <Success>true</Success>\\n</CreateQualityRuleResponse>","errorExample":""}]',
      'title' => '创建质量监控规则',
      'summary' => '调用CreateQualityRule创建质量监控规则。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteQualityFollower' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78214',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideGJ7UNJ',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式所在的引擎或者数据源的名称。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据质量的规则配置页面获取名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        1 => 
        array (
          'name' => 'FollowerId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式的订阅关系ID。您可以调用[GetQualityFollower](~~174000~~)接口获取订阅关系ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间ID。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '是否成功删除分区表达式的订阅用户，取值如下：
- true，删除成功。
- false，删除失败，您可以通过报错信息查询原因，处理问题。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '删除分区表达式订阅用户失败后的报错信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，用于后续错误排查使用。',
                'type' => 'string',
                'example' => '6d739ef6-098a-47****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"RequestId\\": \\"6d739ef6-098a-47****\\",\\n  \\"ErrorCode\\": \\"401\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<DeleteQualityFollowerResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <RequestId>6d739ef6-098a-47****</RequestId>\\n    <ErrorCode>401</ErrorCode>\\n    <Success>true</Success>\\n</DeleteQualityFollowerResponse>","errorExample":""}]',
      'title' => '删除分区表达式的订阅人',
      'summary' => '调用DeleteQualityFollower删除分区表达式的订阅人。',
      'description' => '数据质量是通过分区表达式来确定需要配置的监控规则。通过该规则帮助您第一时间感知源端数据的变更与ETL（Extract Transformation Load）中产生的脏数据，自动拦截问题任务，有效阻断脏数据向下游蔓延。避免任务产出不符合预期的问题数据，影响正常使用和业务决策。您可以通过订阅管理，为分区表达式添加订阅用户，添加后，当该分区表达式的监控规则被触发，则相应用户会收到消息通知，方便您及时发现并处理问题。详情请参见[配置监控规则](~~73690~~)。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteQualityRule' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78216',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide3WJOKE',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        1 => 
        array (
          'name' => 'RuleId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '规则ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks控制台，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '删除是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '6d739ef6-098a-47****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"RequestId\\": \\"6d739ef6-098a-47****\\",\\n  \\"ErrorCode\\": \\"401\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<DeleteQualityRuleResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <RequestId>6d739ef6-098a-47****</RequestId>\\n    <ErrorCode>401</ErrorCode>\\n    <Success>true</Success>\\n</DeleteQualityRuleResponse>","errorExample":""}]',
      'title' => '删除规则',
      'summary' => '调用DeleteQualityRule删除规则。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetQualityFollower' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78284',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideGJ7UNJ',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        1 => 
        array (
          'name' => 'EntityId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'Dataworks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '27',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '38cbdef0-f6cf-49',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '订阅关系的信息。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回数据结构。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'FollowerAccountName' => 
                    array (
                      'description' => '订阅人的阿里云账号名称。',
                      'type' => 'string',
                      'example' => 'test',
                    ),
                    'TableName' => 
                    array (
                      'description' => '分区表的名称。',
                      'type' => 'string',
                      'example' => 'dual',
                    ),
                    'AlarmMode' => 
                    array (
                      'description' => '告警的模式，取值如下：
- 1（邮件）
- 2（邮件和短信）
- 4（钉钉群机器人或hook）
- 5（钉钉群机器人@ALL）',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '1',
                    ),
                    'EntityId' => 
                    array (
                      'description' => '分区表达式的ID。',
                      'type' => 'string',
                      'example' => '1234',
                    ),
                    'ProjectName' => 
                    array (
                      'description' => '引擎或者数据源的名称。',
                      'type' => 'string',
                      'example' => 'autotest',
                    ),
                    'Id' => 
                    array (
                      'description' => '订阅关系的ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '123',
                    ),
                    'Follower' => 
                    array (
                      'description' => '订阅人，用于接收告警信息。',
                      'type' => 'string',
                      'example' => '1234',
                    ),
                    'CreateTime' => 
                    array (
                      'description' => '数据质量规则订阅配置的创建时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1541576644000',
                    ),
                    'ModifyTime' => 
                    array (
                      'description' => '数据质量规则订阅配置的更新时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1541576644000',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"38cbdef0-f6cf-49\\",\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": [\\n    {\\n      \\"FollowerAccountName\\": \\"test\\",\\n      \\"TableName\\": \\"dual\\",\\n      \\"AlarmMode\\": 1,\\n      \\"EntityId\\": \\"1234\\",\\n      \\"ProjectName\\": \\"autotest\\",\\n      \\"Id\\": 123,\\n      \\"Follower\\": \\"1234\\",\\n      \\"CreateTime\\": 1541576644000,\\n      \\"ModifyTime\\": 1541576644000\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<GetQualityFollowerResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>38cbdef0-f6cf-49</RequestId>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <FollowerAccountName>test</FollowerAccountName>\\n        <TableName>dual</TableName>\\n        <AlarmMode>1</AlarmMode>\\n        <EntityId>1234</EntityId>\\n        <ProjectName>autotest</ProjectName>\\n        <Id>123</Id>\\n        <Follower>1234</Follower>\\n        <CreateTime>1541576644000</CreateTime>\\n        <ModifyTime>1541576644000</ModifyTime>\\n    </Data>\\n</GetQualityFollowerResponse>","errorExample":""}]',
      'title' => '获取分区表达式的订阅人',
      'summary' => '调用GetQualityFollower获取分区表达式的订阅人。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateQualityFollower' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78193',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideGJ7UNJ',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        1 => 
        array (
          'name' => 'Follower',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '订阅人的账号ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '123',
          ),
        ),
        2 => 
        array (
          'name' => 'AlarmMode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '订阅的方式，包括1（邮件）、2（邮件和短信）、4（钉钉群机器人）、5（钉钉群机器人@ALL）、6（飞书）、7（企业微信）、8（WEBHOOK）和9（电话告警）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
            'enum' => 
            array (
              0 => '1',
              1 => '2',
              2 => '4',
              3 => '5',
              4 => '6',
              5 => '7',
              6 => '8',
              7 => '9',
            ),
          ),
        ),
        3 => 
        array (
          'name' => 'EntityId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12345',
          ),
        ),
        4 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以进入DataWorks管理控制台获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '123',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP错误码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '新创建的订阅关系ID。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '12345',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'ecb967ec-c137-48****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 12345,\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"RequestId\\": \\"ecb967ec-c137-48****\\",\\n  \\"ErrorCode\\": \\"401\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<CreateQualityFollowerResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>12345</Data>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <RequestId>ecb967ec-c137-48****</RequestId>\\n    <ErrorCode>401</ErrorCode>\\n    <Success>true</Success>\\n</CreateQualityFollowerResponse>","errorExample":""}]',
      'title' => '创建分区表达式的订阅人',
      'summary' => '调用CreateQualityFollower创建分区表达式的订阅人。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteQualityEntity' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78213',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide3WJOKE',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'EntityId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '2147483647',
            'minimum' => '1',
            'example' => '1234',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        2 => 
        array (
          'name' => 'EnvType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的类型。支持EMR、Hologres、AnalyticDB for PostgreSQL、CDH、MaxCompute、Kafka和DataHub数据源。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps',
            'enum' => 
            array (
              0 => 'odps',
              1 => 'emr',
              2 => 'hadoop',
              3 => 'cdh',
              4 => 'hybriddb_for_postgresql',
              5 => 'holodb',
            ),
          ),
        ),
        3 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks项目空间ID',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12345',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP错误码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '调用DeleteQualityEntity接口后，返回的结果详情。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'ecb967ec-c137-48****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"RequestId\\": \\"ecb967ec-c137-48****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"401\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteQualityEntityResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <RequestId>ecb967ec-c137-48****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>401</ErrorCode>\\n</DeleteQualityEntityResponse>","errorExample":""}]',
      'title' => '删除分区表达式',
      'summary' => '调用DeleteQualityEntity删除分区表达式。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetQualityEntity' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78283',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide3WJOKE',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或数据源的名称。您可以从数据源配置中获取名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
            'maxLength' => 1024,
            'minLength' => 1,
          ),
        ),
        1 => 
        array (
          'name' => 'TableName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表名称。您可以调用[GetMetaTablePartition](~~173923~~)查看分区表名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'dual',
            'maxLength' => 128,
            'minLength' => 1,
          ),
        ),
        2 => 
        array (
          'name' => 'EnvType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或数据源的类型。
取值范围：
- cdh
- analyticdb_for_mysql
- odps
- emr
- hadoop
- holodb
- hybriddb_for_postgresql',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'odps',
            'maxLength' => 64,
            'minLength' => 1,
          ),
        ),
        3 => 
        array (
          'name' => 'MatchExpression',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'dt=$[yyyymmdd]',
            'maxLength' => 128,
            'minLength' => 1,
          ),
        ),
        4 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12345',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '6d739ef6-098a-47****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回信息。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回数据详情。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'RelativeNode' => 
                    array (
                      'description' => '分区表达式关联的调度节点信息，包括：
- ProjectName：调度节点所在的项目名称。
- NodeID：调度节点的节点ID。
',
                      'type' => 'string',
                      'example' => '[{"projectName":"xc_DP****","nodeId":7000026****}]',
                    ),
                    'OnDutyAccountName' => 
                    array (
                      'description' => '责任人的阿里云账号名称。',
                      'type' => 'string',
                      'example' => 'test',
                    ),
                    'Task' => 
                    array (
                      'description' => '任务节点。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'TableName' => 
                    array (
                      'description' => '分区表名称。',
                      'type' => 'string',
                      'example' => 'test_dqc_de****',
                    ),
                    'Followers' => 
                    array (
                      'description' => '订阅人，接收告警信息的阿里云账号ID。',
                      'type' => 'string',
                      'example' => '1822931****',
                    ),
                    'OnDuty' => 
                    array (
                      'description' => '责任人，指配置分区表达式的账号ID。',
                      'type' => 'string',
                      'example' => '1822931****',
                    ),
                    'MatchExpression' => 
                    array (
                      'description' => '分区表达式。',
                      'type' => 'string',
                      'example' => 'dt=$[yyyymmdd-1]',
                    ),
                    'CreateTime' => 
                    array (
                      'description' => '创建分区表达式的时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1593964800000',
                    ),
                    'ProjectName' => 
                    array (
                      'description' => '引擎或数据源的名称。',
                      'type' => 'string',
                      'example' => 'autotest',
                    ),
                    'HasRelativeNode' => 
                    array (
                      'description' => '是否关联调度，取值如下：
- true：已关联调度。
- false：未关联调度。',
                      'type' => 'boolean',
                      'example' => 'true',
                    ),
                    'EnvType' => 
                    array (
                      'description' => '引擎或者数据源的类型。',
                      'type' => 'string',
                      'example' => 'odps',
                    ),
                    'EntityLevel' => 
                    array (
                      'description' => '分区表达式的级别，取值如下：
- 0（SQL级别）：指每段SQL语句执行完毕后都会触发DQC执行校验。
- 1（任务级别）：指所有SQL语句均执行完毕后，统一进行校验。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'ModifyUser' => 
                    array (
                      'description' => '更新人，指更新分区表达式的账号ID。',
                      'type' => 'string',
                      'example' => '1822931****',
                    ),
                    'Sql' => 
                    array (
                      'description' => 'SQL级别的分区表达式。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                    'Id' => 
                    array (
                      'description' => '分区表达式ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '4003918',
                    ),
                    'ModifyTime' => 
                    array (
                      'description' => '更新分区表达式的时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1593964800000',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"6d739ef6-098a-47****\\",\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"ErrorCode\\": \\"401\\",\\n  \\"Success\\": true,\\n  \\"Data\\": [\\n    {\\n      \\"RelativeNode\\": \\"[{\\\\\\"projectName\\\\\\":\\\\\\"xc_DP****\\\\\\",\\\\\\"nodeId\\\\\\":7000026****}]\\",\\n      \\"OnDutyAccountName\\": \\"test\\",\\n      \\"Task\\": 0,\\n      \\"TableName\\": \\"test_dqc_de****\\",\\n      \\"Followers\\": \\"1822931****\\",\\n      \\"OnDuty\\": \\"1822931****\\",\\n      \\"MatchExpression\\": \\"dt=$[yyyymmdd-1]\\",\\n      \\"CreateTime\\": 1593964800000,\\n      \\"ProjectName\\": \\"autotest\\",\\n      \\"HasRelativeNode\\": true,\\n      \\"EnvType\\": \\"odps\\",\\n      \\"EntityLevel\\": 0,\\n      \\"ModifyUser\\": \\"1822931****\\",\\n      \\"Sql\\": 0,\\n      \\"Id\\": 4003918,\\n      \\"ModifyTime\\": 1593964800000\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<GetQualityEntityResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>6d739ef6-098a-47****</RequestId>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <ErrorCode>401</ErrorCode>\\n    <Success>true</Success>\\n    <Data>\\n        <RelativeNode>[{\\"projectName\\":\\"xc_DP****\\",\\"nodeId\\":7000026****}]</RelativeNode>\\n        <OnDutyAccountName>test</OnDutyAccountName>\\n        <Task>0</Task>\\n        <TableName>test_dqc_de****</TableName>\\n        <Followers>1822931****</Followers>\\n        <OnDuty>1822931****</OnDuty>\\n        <MatchExpression>dt=$[yyyymmdd-1]</MatchExpression>\\n        <CreateTime>1593964800000</CreateTime>\\n        <ProjectName>autotest</ProjectName>\\n        <HasRelativeNode>true</HasRelativeNode>\\n        <EnvType>odps</EnvType>\\n        <EntityLevel>0</EntityLevel>\\n        <ModifyUser>1822931****</ModifyUser>\\n        <Sql>0</Sql>\\n        <Id>4003918</Id>\\n        <ModifyTime>1593964800000</ModifyTime>\\n    </Data>\\n</GetQualityEntityResponse>","errorExample":""}]',
      'title' => '获取分区表达式',
      'summary' => '调用GetQualityEntity获取分区表达式。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateQualityEntity' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78192',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide3WJOKE',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎的项目名称或者数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        1 => 
        array (
          'name' => 'TableName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '表的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'dual',
            'maxLength' => 128,
            'minLength' => 1,
          ),
        ),
        2 => 
        array (
          'name' => 'EnvType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的类型。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ODPS',
            'maxLength' => 64,
            'minLength' => 1,
            'enum' => 
            array (
              0 => 'odps',
              1 => 'emr',
              2 => 'hadoop',
              3 => 'cdh',
              4 => 'analyticdb_for_mysql',
              5 => 'hybriddb_for_postgresql',
              6 => 'holodb',
            ),
          ),
        ),
        3 => 
        array (
          'name' => 'MatchExpression',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'dt=$[yyyymmdd]',
            'maxLength' => 128,
            'minLength' => 1,
          ),
        ),
        4 => 
        array (
          'name' => 'EntityLevel',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '已废弃。

包括0（SQL完成时校检）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => false,
            'maximum' => '99',
            'minimum' => '0',
            'enumValueTitles' => 
            array (
              0 => '0',
              1 => '1',
            ),
            'example' => '0',
            'enum' => 
            array (
              0 => '0',
              1 => '1',
            ),
          ),
        ),
        5 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以进入DataWorks管理控制台获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '123',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '分区表达式返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP请求错误码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '新创建的分区表达式ID。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '12345',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'Your project is not relative with your account.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '011e1231u3****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 12345,\\n  \\"ErrorMessage\\": \\"Your project is not relative with your account.\\",\\n  \\"RequestId\\": \\"011e1231u3****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"401\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateQualityEntityResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>12345</Data>\\n    <ErrorMessage>Your project is not relative with your account.</ErrorMessage>\\n    <RequestId>011e1231u3****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>401</ErrorCode>\\n</CreateQualityEntityResponse>","errorExample":""}]',
      'title' => '创建数据质量的分区表达式',
      'summary' => '调用CreateQualityEntity创建数据质量的分区表达式。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateQualityRelativeNode' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78194',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide3WJOKE',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'EnvType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的类型。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ODPS',
            'maxLength' => 40,
            'minLength' => 1,
          ),
        ),
        1 => 
        array (
          'name' => 'MatchExpression',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'dt=$[yyyymmdd]',
            'maxLength' => 80,
            'minLength' => 1,
          ),
        ),
        2 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度节点ID，您可以调用[ListNodes](~~173979~~)接口获取节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12321',
          ),
        ),
        3 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '123',
          ),
        ),
        4 => 
        array (
          'name' => 'TargetNodeProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '关联调度的节点项目。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
            'maxLength' => 128,
            'minLength' => 1,
          ),
        ),
        5 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
            'maxLength' => 128,
            'minLength' => 1,
          ),
        ),
        6 => 
        array (
          'name' => 'TableName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '表的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'dual',
            'maxLength' => 128,
            'minLength' => 1,
          ),
        ),
        7 => 
        array (
          'name' => 'TargetNodeProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点所在的项目空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => 'XXX返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP错误码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '是否关联成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'ecb967ec-c137-48****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"RequestId\\": \\"ecb967ec-c137-48****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"401\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateQualityRelativeNodeResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <RequestId>ecb967ec-c137-48****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>401</ErrorCode>\\n</CreateQualityRelativeNodeResponse>","errorExample":""}]',
      'title' => '创建分区表达式关联',
      'summary' => '调用CreateQualityRelativeNode创建分区表达式关联。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteQualityRelativeNode' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'EnvType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的类型。
枚举值：
- cdh
- analyticdb_for_mysql
- odps
- emr
- hadoop
- holodb
- hybriddb_for_postgresql',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ODPS',
            'maxLength' => 40,
            'minLength' => 1,
          ),
        ),
        1 => 
        array (
          'name' => 'MatchExpression',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'dt=$[yyyymmdd]',
            'maxLength' => 80,
            'minLength' => 1,
          ),
        ),
        2 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '156234',
          ),
        ),
        3 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12345',
          ),
        ),
        4 => 
        array (
          'name' => 'TargetNodeProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '关联调度节点的项目。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
            'maxLength' => 512,
            'minLength' => 1,
          ),
        ),
        5 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        6 => 
        array (
          'name' => 'TableName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '表的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'dual',
            'maxLength' => 128,
            'minLength' => 1,
          ),
        ),
        7 => 
        array (
          'name' => 'TargetNodeProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '关联调度节点的项目ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12345',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '关联调度返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP错误码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '删除是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '6d739ef6-098a-47****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"RequestId\\": \\"6d739ef6-098a-47****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"401\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteQualityRelativeNodeResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <RequestId>6d739ef6-098a-47****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>401</ErrorCode>\\n</DeleteQualityRelativeNodeResponse>","errorExample":""}]',
      'title' => '删除调度关联',
      'summary' => '调用DeleteQualityRelativeNode删除调度关联。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListQualityResultsByEntity' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78329',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideGK4B66',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'EntityId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分区表达式ID。您可以调用[GetQualityEntity](~~174003~~)获取分区表达式ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '2147483647',
            'minimum' => '1',
            'example' => '152322134',
          ),
        ),
        1 => 
        array (
          'name' => 'StartDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期起始时间，格式为yyyy-MM-dd HH:mm:ss。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-09-20 00:00:00',
          ),
        ),
        2 => 
        array (
          'name' => 'EndDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期截止时间，格式为yyyy-MM-dd HH:mm:ss。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-09-21 00:00:00',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大20条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '20',
            'minimum' => '1',
            'example' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '2147483647',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        5 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '引擎或者数据源的名称。您可以从数据源配置中获取名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        6 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks项目空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12345',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '校验结果',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'CBA58543-00D4-41****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
              'Data' => 
              array (
                'description' => '校验结果的顶层结构体。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '数据的总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '50',
                  ),
                  'RuleChecks' => 
                  array (
                    'description' => '校验结果的列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '校验结果',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'BlockType' => 
                        array (
                          'description' => '校验规则的强弱。强弱表示规则的重要程度。取值如下：
- 1，表示强规则。
- 0，表示弱规则。
您可以根据实际需求设置重要的规则为强规则。如果使用强规则并触发了红色告警，则会阻塞调度任务。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'WarningThreshold' => 
                        array (
                          'description' => '橙色阈值。表示与样本预期的偏离程度，您可以根据业务需求自定义该阈值。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '0.1',
                        ),
                        'Property' => 
                        array (
                          'description' => '规则属性的字段，即被校验数据源表的column名称。',
                          'type' => 'string',
                          'example' => 'type',
                        ),
                        'TableName' => 
                        array (
                          'description' => '进行校验的表名称。',
                          'type' => 'string',
                          'example' => 'dual',
                        ),
                        'Comment' => 
                        array (
                          'description' => '校验规则的描述。',
                          'type' => 'string',
                          'example' => '规则的描述信息。',
                        ),
                        'CheckResultStatus' => 
                        array (
                          'description' => '校验结果状态参数与产品界面中的状态信息一致，取值有以下几种：
- 0：正常
- 1：橙色告警
- 2：红色告警',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'TemplateName' => 
                        array (
                          'description' => '使用的校验模板的名称。',
                          'type' => 'string',
                          'example' => '字段唯一值个数期望值校验',
                        ),
                        'CheckerName' => 
                        array (
                          'description' => '校验器的名称。',
                          'type' => 'string',
                          'example' => 'fulx',
                        ),
                        'RuleId' => 
                        array (
                          'description' => '规则ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123123232',
                        ),
                        'FixedCheck' => 
                        array (
                          'description' => '是否为固定值校验。取值如下：
- true：是固定值校验。
- false：非固定值校验。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Op' => 
                        array (
                          'description' => '比较符。',
                          'type' => 'string',
                          'example' => '>',
                        ),
                        'UpperValue' => 
                        array (
                          'description' => '预测上限。设置阈值后自动生成。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '25555',
                        ),
                        'ActualExpression' => 
                        array (
                          'description' => '被校验的数据源表的实际分区。',
                          'type' => 'string',
                          'example' => 'ds=20200912',
                        ),
                        'ExternalId' => 
                        array (
                          'description' => '调度任务的节点ID。',
                          'type' => 'string',
                          'example' => '1112323123',
                        ),
                        'TimeCost' => 
                        array (
                          'description' => '执行校验任务花费的时间，单位为秒。',
                          'type' => 'string',
                          'example' => '202',
                        ),
                        'Trend' => 
                        array (
                          'description' => '校验结果的趋势。',
                          'type' => 'string',
                          'example' => 'abs',
                        ),
                        'ExternalType' => 
                        array (
                          'description' => '调度系统的类型。目前仅支持CWF。',
                          'type' => 'string',
                          'example' => 'CWF2',
                        ),
                        'BizDate' => 
                        array (
                          'description' => '业务日期。如果被校验的业务主体为离线数据，则业务日期通常为执行校验操作的前一天。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1600704000000',
                        ),
                        'CheckResult' => 
                        array (
                          'description' => '校验结果参数的结果通常与CheckResultStatus一致，取值有以下几种：
- 0：正常
- 1：橙色告警
- 2：红色告警',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ResultString' => 
                        array (
                          'description' => '校验结果的字符串形式。',
                          'type' => 'string',
                          'example' => 'test',
                        ),
                        'MatchExpression' => 
                        array (
                          'description' => '分区表达式。',
                          'type' => 'string',
                          'example' => 'ds=$[yyyymmdd]',
                        ),
                        'CheckerType' => 
                        array (
                          'description' => '校验类型。取值如下：
- 0，固定值
- 1，波动校验
- 2，动态阈值',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'ProjectName' => 
                        array (
                          'description' => '需要进行数据质量校验的引擎或者数据源名称。',
                          'type' => 'string',
                          'example' => 'autotest',
                        ),
                        'BeginTime' => 
                        array (
                          'description' => '执行校验操作的开始时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1600704000000',
                        ),
                        'DateType' => 
                        array (
                          'description' => '调度周期的类型。通常为YMD，即年任务、月任务、天任务。',
                          'type' => 'string',
                          'example' => 'YMD',
                        ),
                        'CriticalThreshold' => 
                        array (
                          'description' => '红色阈值。表示与样本预期的偏离程度。您可以根据业务需求自定义该阈值。使用强规则并触发红色阈值，会阻塞调度任务。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '0.5',
                        ),
                        'IsPrediction' => 
                        array (
                          'description' => '是否为预测的结果。取值如下：
- true：是预测的结果。
- false：不是预测的结果。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'RuleName' => 
                        array (
                          'description' => '规则的名称。',
                          'type' => 'string',
                          'example' => '规则的名称。',
                        ),
                        'CheckerId' => 
                        array (
                          'description' => '校验器的ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '7',
                        ),
                        'DiscreteCheck' => 
                        array (
                          'description' => '是否为离散校验。取值如下：
- true：是离散校验。
- false：非离散校验。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'EndTime' => 
                        array (
                          'description' => '查询校验结果的截止时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1600704000000',
                        ),
                        'MethodName' => 
                        array (
                          'description' => '采集样本数据的方法。包括avg、count、sum、min、max、count_distinct、user_defined、table_count、table_size、table_dt_load_count、table_dt_refuseload_count、null_value、null_value/table_count、(table_count-count_distinct)/table_count、table_count-count_distinct等。',
                          'type' => 'string',
                          'example' => 'count_distinct',
                        ),
                        'LowerValue' => 
                        array (
                          'description' => '预测结果的下限。根据您设置的阈值自动生成。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '2344',
                        ),
                        'EntityId' => 
                        array (
                          'description' => '分区表达式ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '15432322',
                        ),
                        'WhereCondition' => 
                        array (
                          'description' => '校验任务使用的规则过滤条件。',
                          'type' => 'string',
                          'example' => 'id>0',
                        ),
                        'ExpectValue' => 
                        array (
                          'description' => '期望值。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '200',
                        ),
                        'TemplateId' => 
                        array (
                          'description' => '使用的校验模板的ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '5',
                        ),
                        'TaskId' => 
                        array (
                          'description' => '校验任务的ID。',
                          'type' => 'string',
                          'example' => '16008552981681a0d6****',
                        ),
                        'Id' => 
                        array (
                          'description' => '主键ID。

',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '121212121',
                        ),
                        'ReferenceValue' => 
                        array (
                          'description' => '历史样本值。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '校验结果',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'DiscreteProperty' => 
                              array (
                                'description' => '通过group by分组后的样本字段取值。例如group by性别字段，则DiscreteProperty为男生、女生和null。',
                                'type' => 'string',
                                'example' => '0',
                              ),
                              'Value' => 
                              array (
                                'description' => '校验值。',
                                'type' => 'number',
                                'format' => 'float',
                                'example' => '19',
                              ),
                              'BizDate' => 
                              array (
                                'description' => '业务日期。如果被校验的业务主体为离线数据，则业务日期通常为执行校验操作的前一天。',
                                'type' => 'string',
                                'example' => '2020-12-03',
                              ),
                              'SingleCheckResult' => 
                              array (
                                'description' => '校验结果。',
                                'type' => 'integer',
                                'format' => 'int32',
                                'example' => '0',
                              ),
                              'Threshold' => 
                              array (
                                'description' => '阈值。',
                                'type' => 'number',
                                'format' => 'float',
                                'example' => '0.5',
                              ),
                            ),
                          ),
                        ),
                        'SampleValue' => 
                        array (
                          'description' => '当前使用的样本。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '校验结果',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'DiscreteProperty' => 
                              array (
                                'description' => '通过group by分组后的样本字段取值。例如group by性别字段，则DiscreteProperty为男生、女生和null。',
                                'type' => 'string',
                                'example' => '0',
                              ),
                              'BizDate' => 
                              array (
                                'description' => '业务日期。如果被校验的业务主体为离线数据，则业务日期通常为执行校验操作的前一天。',
                                'type' => 'string',
                                'example' => '2020-12-03',
                              ),
                              'Value' => 
                              array (
                                'description' => '当前样本值。',
                                'type' => 'number',
                                'format' => 'float',
                                'example' => '19',
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"RequestId\\": \\"CBA58543-00D4-41****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"401\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 50,\\n    \\"RuleChecks\\": [\\n      {\\n        \\"BlockType\\": 0,\\n        \\"WarningThreshold\\": 0.1,\\n        \\"Property\\": \\"type\\",\\n        \\"TableName\\": \\"dual\\",\\n        \\"Comment\\": \\"规则的描述信息。\\",\\n        \\"CheckResultStatus\\": 0,\\n        \\"TemplateName\\": \\"字段唯一值个数期望值校验\\",\\n        \\"CheckerName\\": \\"fulx\\",\\n        \\"RuleId\\": 123123232,\\n        \\"FixedCheck\\": false,\\n        \\"Op\\": \\">\\",\\n        \\"UpperValue\\": 25555,\\n        \\"ActualExpression\\": \\"ds=20200912\\",\\n        \\"ExternalId\\": \\"1112323123\\",\\n        \\"TimeCost\\": \\"202\\",\\n        \\"Trend\\": \\"abs\\",\\n        \\"ExternalType\\": \\"CWF2\\",\\n        \\"BizDate\\": 1600704000000,\\n        \\"CheckResult\\": 0,\\n        \\"ResultString\\": \\"test\\",\\n        \\"MatchExpression\\": \\"ds=$[yyyymmdd]\\",\\n        \\"CheckerType\\": 1,\\n        \\"ProjectName\\": \\"autotest\\",\\n        \\"BeginTime\\": 1600704000000,\\n        \\"DateType\\": \\"YMD\\",\\n        \\"CriticalThreshold\\": 0.5,\\n        \\"IsPrediction\\": true,\\n        \\"RuleName\\": \\"规则的名称。\\",\\n        \\"CheckerId\\": 7,\\n        \\"DiscreteCheck\\": true,\\n        \\"EndTime\\": 1600704000000,\\n        \\"MethodName\\": \\"count_distinct\\",\\n        \\"LowerValue\\": 2344,\\n        \\"EntityId\\": 15432322,\\n        \\"WhereCondition\\": \\"id>0\\",\\n        \\"ExpectValue\\": 200,\\n        \\"TemplateId\\": 5,\\n        \\"TaskId\\": \\"16008552981681a0d6****\\",\\n        \\"Id\\": 121212121,\\n        \\"ReferenceValue\\": [\\n          {\\n            \\"DiscreteProperty\\": \\"0\\",\\n            \\"Value\\": 19,\\n            \\"BizDate\\": \\"2020-12-03\\",\\n            \\"SingleCheckResult\\": 0,\\n            \\"Threshold\\": 0.5\\n          }\\n        ],\\n        \\"SampleValue\\": [\\n          {\\n            \\"DiscreteProperty\\": \\"0\\",\\n            \\"BizDate\\": \\"2020-12-03\\",\\n            \\"Value\\": 19\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListQualityResultsByEntityResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <RequestId>CBA58543-00D4-41****</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>401</ErrorCode>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>50</TotalCount>\\n        <RuleChecks>\\n            <BlockType>0</BlockType>\\n            <WarningThreshold>0.1</WarningThreshold>\\n            <Property>type</Property>\\n            <TableName>dual</TableName>\\n            <Comment>规则的描述信息。</Comment>\\n            <CheckResultStatus>0</CheckResultStatus>\\n            <TemplateName>字段唯一值个数期望值校验</TemplateName>\\n            <CheckerName>fulx</CheckerName>\\n            <RuleId>123123232</RuleId>\\n            <FixedCheck>false</FixedCheck>\\n            <Op>&gt;</Op>\\n            <UpperValue>25555</UpperValue>\\n            <ActualExpression>ds=20200912</ActualExpression>\\n            <ExternalId>1112323123</ExternalId>\\n            <TimeCost>202</TimeCost>\\n            <Trend>abs</Trend>\\n            <ExternalType>CWF2</ExternalType>\\n            <BizDate>1600704000000</BizDate>\\n            <CheckResult>0</CheckResult>\\n            <ResultString>test</ResultString>\\n            <MatchExpression>ds=$[yyyymmdd]</MatchExpression>\\n            <CheckerType>1</CheckerType>\\n            <ProjectName>autotest</ProjectName>\\n            <BeginTime>1600704000000</BeginTime>\\n            <DateType>YMD</DateType>\\n            <CriticalThreshold>0.5</CriticalThreshold>\\n            <IsPrediction>true</IsPrediction>\\n            <RuleName>规则的名称。</RuleName>\\n            <CheckerId>7</CheckerId>\\n            <DiscreteCheck>true</DiscreteCheck>\\n            <EndTime>1600704000000</EndTime>\\n            <MethodName>count_distinct</MethodName>\\n            <LowerValue>2344</LowerValue>\\n            <EntityId>15432322</EntityId>\\n            <WhereCondition>id&gt;0</WhereCondition>\\n            <ExpectValue>200</ExpectValue>\\n            <TemplateId>5</TemplateId>\\n            <TaskId>16008552981681a0d6****</TaskId>\\n            <Id>121212121</Id>\\n            <ReferenceValue>\\n                <DiscreteProperty>0</DiscreteProperty>\\n                <Value>19</Value>\\n                <BizDate>2020-12-03</BizDate>\\n                <SingleCheckResult>0</SingleCheckResult>\\n                <Threshold>0.5</Threshold>\\n            </ReferenceValue>\\n            <SampleValue>\\n                <DiscreteProperty>0</DiscreteProperty>\\n                <BizDate>2020-12-03</BizDate>\\n                <Value>19</Value>\\n            </SampleValue>\\n        </RuleChecks>\\n    </Data>\\n</ListQualityResultsByEntityResponse>","errorExample":""}]',
      'title' => '根据分区表达式查询校验历史结果',
      'summary' => '调用ListQualityResultsByEntity，根据分区表达式查询历史校验结果。',
      'description' => '****',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListQualityResultsByRule' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RuleId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '使用的校验规则ID。您可以使用该规则ID与分区表达式等信息进行联合查询。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '2147483647',
            'minimum' => '1',
            'example' => '152322134',
          ),
        ),
        1 => 
        array (
          'name' => 'StartDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期起始时间，格式为yyyy-MM-dd HH:mm:ss。

该参数与EndDate配合使用，二者所取的时间区间不能大于7天。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-09-20 00:00:00',
          ),
        ),
        2 => 
        array (
          'name' => 'EndDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期截止时间，格式为yyyy-MM-dd HH:mm:ss。

该参数与StartDate配合使用，二者所取的时间区间不能大于7天。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-09-22 00:00:00',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '20',
            'minimum' => '1',
            'example' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '2147483647',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        5 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '需要进行数据质量校验的引擎或者数据源名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'autotest',
          ),
        ),
        6 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks项目空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12345',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '校验结果',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'CBA58543-00D4-41****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '401',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '校验结果的顶层结构体。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '数据的总记录数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '200',
                  ),
                  'RuleChecks' => 
                  array (
                    'description' => '校验结果的列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '校验结果',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'BlockType' => 
                        array (
                          'description' => '校验规则的强弱。强弱表示规则的重要程度。取值如下：
- 1，表示强规则。
- 0，表示弱规则。
您可以根据实际需求设置重要的规则为强规则。如果使用强规则并触发了红色告警，则会阻塞调度任务。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'WarningThreshold' => 
                        array (
                          'description' => '橙色阈值。表示与样本预期的偏离程度，您可以根据业务需求自定义该阈值。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '0.1',
                        ),
                        'Property' => 
                        array (
                          'description' => '规则属性的字段，即被校验数据源表的column名称。',
                          'type' => 'string',
                          'example' => 'type',
                        ),
                        'TableName' => 
                        array (
                          'description' => '进行校验的表名称。',
                          'type' => 'string',
                          'example' => 'dual',
                        ),
                        'Comment' => 
                        array (
                          'description' => '校验规则的描述。',
                          'type' => 'string',
                          'example' => '规则的描述信息。',
                        ),
                        'CheckResultStatus' => 
                        array (
                          'description' => '校验结果状态。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '2',
                        ),
                        'TemplateName' => 
                        array (
                          'description' => '使用的校验模板的名称。',
                          'type' => 'string',
                          'example' => '字段唯一值个数期望值校验',
                        ),
                        'CheckerName' => 
                        array (
                          'description' => '校验器的名称。',
                          'type' => 'string',
                          'example' => 'fulx',
                        ),
                        'RuleId' => 
                        array (
                          'description' => '规则ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123421',
                        ),
                        'FixedCheck' => 
                        array (
                          'description' => '是否为固定值校验。取值如下：
- true：是固定值校验。
- false：非固定值校验。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Op' => 
                        array (
                          'description' => '比较符。',
                          'type' => 'string',
                          'example' => '>',
                        ),
                        'UpperValue' => 
                        array (
                          'description' => '预测上限。设置阈值后自动生成。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '22200',
                        ),
                        'ActualExpression' => 
                        array (
                          'description' => '被校验的数据源表的实际分区。',
                          'type' => 'string',
                          'example' => 'ds=20200925',
                        ),
                        'ExternalId' => 
                        array (
                          'description' => '调度任务的节点ID。',
                          'type' => 'string',
                          'example' => '123112232',
                        ),
                        'TimeCost' => 
                        array (
                          'description' => '执行校验任务花费的时间。',
                          'type' => 'string',
                          'example' => '10',
                        ),
                        'Trend' => 
                        array (
                          'description' => '校验结果的趋势。',
                          'type' => 'string',
                          'example' => 'up',
                        ),
                        'ExternalType' => 
                        array (
                          'description' => '调度系统的类型。目前仅支持CWF。',
                          'type' => 'string',
                          'example' => 'CWF2',
                        ),
                        'BizDate' => 
                        array (
                          'description' => '业务日期。如果被校验的业务主体为离线数据，则业务日期通常为执行校验操作的前一天。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1600704000000',
                        ),
                        'CheckResult' => 
                        array (
                          'description' => '校验结果。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '2',
                        ),
                        'ResultString' => 
                        array (
                          'description' => '校验结果的字符串形式。',
                          'type' => 'string',
                          'example' => 'ResultString',
                        ),
                        'MatchExpression' => 
                        array (
                          'description' => '分区表达式。',
                          'type' => 'string',
                          'example' => 'ds=$[yyyymmdd]',
                        ),
                        'CheckerType' => 
                        array (
                          'description' => '校验器的类型。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ProjectName' => 
                        array (
                          'description' => '需要进行数据质量校验的引擎或者数据源名称。',
                          'type' => 'string',
                          'example' => 'autotest',
                        ),
                        'BeginTime' => 
                        array (
                          'description' => '执行校验操作的开始时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1600704000000',
                        ),
                        'DateType' => 
                        array (
                          'description' => '调度周期的类型。通常为YMD，即年任务、月任务、天任务。',
                          'type' => 'string',
                          'example' => 'YMD',
                        ),
                        'CriticalThreshold' => 
                        array (
                          'description' => '红色阈值。表示与样本预期的偏离程度。您可以根据业务需求自定义该阈值。使用强规则并触发红色阈值，会阻塞调度任务。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '0.6',
                        ),
                        'IsPrediction' => 
                        array (
                          'description' => '是否为预测的结果。取值如下：
- true：是预测的结果。
- false：不是预测的结果。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'RuleName' => 
                        array (
                          'description' => '规则的名称。',
                          'type' => 'string',
                          'example' => '规则的名称。',
                        ),
                        'CheckerId' => 
                        array (
                          'description' => '校验器的ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '7',
                        ),
                        'DiscreteCheck' => 
                        array (
                          'description' => '是否为离散校验。取值如下：
- true：是离散校验。
- false：非离散校验。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'EndTime' => 
                        array (
                          'description' => '查询校验结果的截止时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1600704000000',
                        ),
                        'MethodName' => 
                        array (
                          'description' => '采集样本数据的方法。包括avg、count、sum、min、max、count_distinct、user_defined、table_count、table_size、table_dt_load_count、table_dt_refuseload_count、null_value、null_value/table_count、(table_count-count_distinct)/table_count、table_count-count_distinct等。',
                          'type' => 'string',
                          'example' => 'max',
                        ),
                        'LowerValue' => 
                        array (
                          'description' => '预测下限。根据您设置的阈值自动生成。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '2344',
                        ),
                        'EntityId' => 
                        array (
                          'description' => '分区表达式ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '14534343',
                        ),
                        'WhereCondition' => 
                        array (
                          'description' => '校验任务使用的过滤条件。',
                          'type' => 'string',
                          'example' => 'type!=\'type2\'',
                        ),
                        'ExpectValue' => 
                        array (
                          'description' => '期望值。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '90',
                        ),
                        'TemplateId' => 
                        array (
                          'description' => '使用的校验模板的ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '5',
                        ),
                        'TaskId' => 
                        array (
                          'description' => '校验任务的ID。',
                          'type' => 'string',
                          'example' => '16008552981681a0d6****',
                        ),
                        'Id' => 
                        array (
                          'description' => '主键ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '2231123',
                        ),
                        'ReferenceValue' => 
                        array (
                          'description' => '历史样本值。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '校验结果',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'DiscreteProperty' => 
                              array (
                                'description' => '通过group by分组后的样本字段取值。例如group by性别字段，则DiscreteProperty为男生、女生和null。',
                                'type' => 'string',
                                'example' => 'type1',
                              ),
                              'Value' => 
                              array (
                                'description' => '样本值。',
                                'type' => 'number',
                                'format' => 'float',
                                'example' => '20',
                              ),
                              'BizDate' => 
                              array (
                                'description' => '业务日期。如果被校验的业务主体为离线数据，则业务日期通常为执行校验操作的前一天。',
                                'type' => 'string',
                                'example' => '1600704000000',
                              ),
                              'SingleCheckResult' => 
                              array (
                                'description' => '校验结果的字符串。',
                                'type' => 'integer',
                                'format' => 'int32',
                                'example' => '2',
                              ),
                              'Threshold' => 
                              array (
                                'description' => '阈值。',
                                'type' => 'number',
                                'format' => 'float',
                                'example' => '0.2',
                              ),
                            ),
                          ),
                        ),
                        'SampleValue' => 
                        array (
                          'description' => '当前使用的样本。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '校验结果',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'DiscreteProperty' => 
                              array (
                                'description' => '通过group by分组后的样本字段取值。例如group by性别字段，则DiscreteProperty为男生、女生和null。',
                                'type' => 'string',
                                'example' => 'type2',
                              ),
                              'BizDate' => 
                              array (
                                'description' => '业务日期。如果被校验的业务主体为离线数据，则业务日期通常为执行校验操作的前一天。',
                                'type' => 'string',
                                'example' => '1600704000000',
                              ),
                              'Value' => 
                              array (
                                'description' => '样本值。',
                                'type' => 'number',
                                'format' => 'float',
                                'example' => '23',
                              ),
                            ),
                          ),
                        ),
                        'Open' => 
                        array (
                          'description' => '规则是否开启。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"RequestId\\": \\"CBA58543-00D4-41****\\",\\n  \\"ErrorCode\\": \\"401\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 200,\\n    \\"RuleChecks\\": [\\n      {\\n        \\"BlockType\\": 1,\\n        \\"WarningThreshold\\": 0.1,\\n        \\"Property\\": \\"type\\",\\n        \\"TableName\\": \\"dual\\",\\n        \\"Comment\\": \\"规则的描述信息。\\",\\n        \\"CheckResultStatus\\": 2,\\n        \\"TemplateName\\": \\"字段唯一值个数期望值校验\\",\\n        \\"CheckerName\\": \\"fulx\\",\\n        \\"RuleId\\": 123421,\\n        \\"FixedCheck\\": false,\\n        \\"Op\\": \\">\\",\\n        \\"UpperValue\\": 22200,\\n        \\"ActualExpression\\": \\"ds=20200925\\",\\n        \\"ExternalId\\": \\"123112232\\",\\n        \\"TimeCost\\": \\"10\\",\\n        \\"Trend\\": \\"up\\",\\n        \\"ExternalType\\": \\"CWF2\\",\\n        \\"BizDate\\": 1600704000000,\\n        \\"CheckResult\\": 2,\\n        \\"ResultString\\": \\"ResultString\\",\\n        \\"MatchExpression\\": \\"ds=$[yyyymmdd]\\",\\n        \\"CheckerType\\": 0,\\n        \\"ProjectName\\": \\"autotest\\",\\n        \\"BeginTime\\": 1600704000000,\\n        \\"DateType\\": \\"YMD\\",\\n        \\"CriticalThreshold\\": 0.6,\\n        \\"IsPrediction\\": false,\\n        \\"RuleName\\": \\"规则的名称。\\",\\n        \\"CheckerId\\": 7,\\n        \\"DiscreteCheck\\": true,\\n        \\"EndTime\\": 1600704000000,\\n        \\"MethodName\\": \\"max\\",\\n        \\"LowerValue\\": 2344,\\n        \\"EntityId\\": 14534343,\\n        \\"WhereCondition\\": \\"type!=\'type2\'\\",\\n        \\"ExpectValue\\": 90,\\n        \\"TemplateId\\": 5,\\n        \\"TaskId\\": \\"16008552981681a0d6****\\",\\n        \\"Id\\": 2231123,\\n        \\"ReferenceValue\\": [\\n          {\\n            \\"DiscreteProperty\\": \\"type1\\",\\n            \\"Value\\": 20,\\n            \\"BizDate\\": \\"1600704000000\\",\\n            \\"SingleCheckResult\\": 2,\\n            \\"Threshold\\": 0.2\\n          }\\n        ],\\n        \\"SampleValue\\": [\\n          {\\n            \\"DiscreteProperty\\": \\"type2\\",\\n            \\"BizDate\\": \\"1600704000000\\",\\n            \\"Value\\": 23\\n          }\\n        ],\\n        \\"Open\\": true\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListQualityResultsByRuleResponse>\\n    <RequestId>CBA58543-00D4-41****</RequestId>\\n    <QualityResults>\\n        <TotalCount>200</TotalCount>\\n        <PageSize>10</PageSize>\\n        <PageNumber>1</PageNumber>\\n        <RuleChecks>\\n            <Op>&amp;gt;</Op>\\n            <TaskId>16008552981681a0d6****</TaskId>\\n            <EndTime>1600704000000</EndTime>\\n            <DiscreteCheck>true</DiscreteCheck>\\n            <CheckerName>fulx</CheckerName>\\n            <ExpectValue>90</ExpectValue>\\n            <ProjectName>autotest</ProjectName>\\n            <RuleId>123421</RuleId>\\n            <WarningThreshold>0.1</WarningThreshold>\\n            <WhereCondition>type!=\'type2\'</WhereCondition>\\n            <BeginTime>1600704000000</BeginTime>\\n            <CheckResultStatus>2</CheckResultStatus>\\n            <MatchExpression>ds=$[yyyymmdd]</MatchExpression>\\n            <UpperValue>22200</UpperValue>\\n            <IsPrediction>false</IsPrediction>\\n            <CheckResult>2</CheckResult>\\n            <TemplateName>字段唯一值个数期望值校验</TemplateName>\\n            <TimeCost>10</TimeCost>\\n            <FixedCheck>false</FixedCheck>\\n            <MethodName>max</MethodName>\\n            <ResultString>ResultString</ResultString>\\n            <Property>type</Property>\\n            <DateType>YMD</DateType>\\n            <BizDate>1600704000000</BizDate>\\n            <TemplateId>5</TemplateId>\\n            <RuleName>这里是规则名称</RuleName>\\n            <Comment>这里是规则描述信息</Comment>\\n            <CriticalThreshold>0.6</CriticalThreshold>\\n            <ExternalId>123112232</ExternalId>\\n            <Trend>up</Trend>\\n            <CheckerType>0</CheckerType>\\n            <ExternalType>CWF2</ExternalType>\\n            <CheckerId>7</CheckerId>\\n            <EntityId>14534343</EntityId>\\n            <TableName>dual</TableName>\\n            <BlockType>1</BlockType>\\n            <Id>2231123</Id>\\n            <ActualExpression>ds=20200925</ActualExpression>\\n            <LowerValue>2344</LowerValue>\\n        </RuleChecks>\\n        <RuleChecks>\\n            <SampleValue>\\n                <SingleCheckResult>2</SingleCheckResult>\\n                <Value>20</Value>\\n                <BizDate>1600704000000</BizDate>\\n                <DiscreteProperty>type1</DiscreteProperty>\\n                <Threshold>0.2</Threshold>\\n            </SampleValue>\\n            <SampleValue>\\n                <Value>23</Value>\\n                <BizDate>1600704000000</BizDate>\\n                <DiscreteProperty>type2</DiscreteProperty>\\n            </SampleValue>\\n            <ReferenceValue>\\n                <SingleCheckResult>2</SingleCheckResult>\\n                <Value>20</Value>\\n                <BizDate>1600704000000</BizDate>\\n                <DiscreteProperty>type1</DiscreteProperty>\\n                <Threshold>0.2</Threshold>\\n            </ReferenceValue>\\n            <ReferenceValue>\\n                <Value>23</Value>\\n                <BizDate>1600704000000</BizDate>\\n                <DiscreteProperty>type2</DiscreteProperty>\\n            </ReferenceValue>\\n        </RuleChecks>\\n    </QualityResults>\\n</ListQualityResultsByRuleResponse>","errorExample":""}]',
      'title' => '校验数据源质量',
      'summary' => '根据校验规则校验数据源的质量，并查询校验结果。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateDataServiceApi' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78179',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideZZ63WZ',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10001',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'ApiName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的名称，支持汉字、英文、数字和下划线（_），且只能以英文和汉字开头，4~50个字符。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '测试API名称',
          ),
        ),
        3 => 
        array (
          'name' => 'GroupId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '业务流程ID',
          ),
        ),
        4 => 
        array (
          'name' => 'ApiMode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的类型，可选枚举值包括0（向导API）、1（脚本API）和2（注册API）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '0',
          ),
        ),
        5 => 
        array (
          'name' => 'RequestMethod',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的请求方式，可选枚举值包括0（GET）、1（POST）、2（PUT）和3（DELETE）。向导和脚本API支持GET和POST。注册API支持GET、POST、PUT和DELETE。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '0',
          ),
        ),
        6 => 
        array (
          'name' => 'ResponseContentType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的返回数据类型，可选枚举值包括0（JSON）和1（XML）。向导和脚本API支持JSON，注册API支持JSON和XML。

',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '0',
          ),
        ),
        7 => 
        array (
          'name' => 'Timeout',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '超时时间，单位为毫秒（ms），取值范围为(0, 30000]。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
        8 => 
        array (
          'name' => 'VisibleRange',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '可见范围，可选枚举值包括0（工作空间）和1（私有）。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '0',
          ),
        ),
        9 => 
        array (
          'name' => 'Protocols',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的协议，可选枚举值包括0（HTTP）和1（HTTPS）。支持多个值，多个值之间使用英文逗号（,）分隔。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '0,1',
          ),
        ),
        10 => 
        array (
          'name' => 'WizardDetails',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '向导API的详情，请参见[GetDataServiceApi](~~174013~~)接口wizardDetails字段的JSON String。

',
            'type' => 'string',
            'required' => false,
            'example' => '{"isPagedResponse":true,"wizardConnection":{"connectionId":122786,"tableName":"person"},"wizardRequestParameters":[{"columnName":"id","defaultValue":"","exampleValue":"1","isRequiredParameter":true,"parameterDataType":2,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":0}],"wizardResponseParameters":[{"columnName":"id","exampleValue":"11","parameterDataType":2,"parameterDescription":"","parameterName":"id"}]}',
          ),
        ),
        11 => 
        array (
          'name' => 'ScriptDetails',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '脚本API的详情，请参见[GetDataServiceApi](~~174013~~)接口scriptDetails字段的JSON String。',
            'type' => 'string',
            'required' => false,
            'example' => '{"isPagedResponse":false,"script":"select id as id1, name as name1 from person where id=${inputid}","scriptConnection":{"connectionId":122786,"tableName":"person"},"scriptRequestParameters":[{"defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"inputid","parameterOperator":0,"parameterPosition":1}],"scriptResponseParameters":[{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"id1"},{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"name1"}]}',
          ),
        ),
        12 => 
        array (
          'name' => 'RegistrationDetails',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '注册API的详情，请参见[GetDataServiceApi](~~174013~~)接口registrationDetails字段的JSON String。',
            'type' => 'string',
            'required' => false,
            'example' => '{"failedResultSample":"fail","registrationErrorCodes":[{"errorCode":"e1","errorMessage":"msg1","errorSolution":"sol1"},{"errorCode":"e2","errorMessage":"msg2","errorSolution":"sol2"}],"registrationRequestParameters":[{"columnName":"","defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":1},{"columnName":"","defaultValue":"xx","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"cc","parameterOperator":2,"parameterPosition":2}],"serviceContentType":1,"serviceHost":"http://www.baidu.com","servicePath":"/[uid]","serviceRequestBodyDescription":"body","successfulResultSample":"success"}',
          ),
        ),
        13 => 
        array (
          'name' => 'ApiPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的路径，支持英文、数字、下划线（_）和连字符（-），且只能以斜线（/）开头，不能超过200个字符。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '/test/1',
          ),
        ),
        14 => 
        array (
          'name' => 'ApiDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的描述信息。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '测试API描述',
          ),
        ),
        15 => 
        array (
          'name' => 'FolderId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '创建API的目标文件夹ID，业务流程下根文件夹ID等于0，用户自建文件夹ID大于0。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '0',
            'example' => '0',
          ),
        ),
        16 => 
        array (
          'name' => 'SqlMode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '- 0-基础模式。

- 1-mybatis

',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '0',
          ),
        ),
        17 => 
        array (
          'name' => 'ResourceGroupId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '独享资源组ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '3242432423',
          ),
        ),
        18 => 
        array (
          'name' => 'RequestContentType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求数据类型。

- 0：xml

- 1：json

- 2：form',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
            'enum' => 
            array (
              0 => '0',
              1 => '1',
              2 => '2',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '创建的API ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '100003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 100003,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<CreateDataServiceApiResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>100003</Data>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</CreateDataServiceApiResponse>","errorExample":""}]',
      'title' => '创建数据服务API',
      'summary' => '调用CreateDataServiceApi创建数据服务API。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'PublishDataServiceApi' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78339',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideZZ63WZ',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10002',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10001',
          ),
        ),
        2 => 
        array (
          'name' => 'ApiId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '发布是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<PublishDataServiceApiResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</PublishDataServiceApiResponse>","errorExample":""}]',
      'title' => '发布数据服务API',
      'summary' => '调用PublishDataServiceApi发布数据服务API。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteDataServiceApi' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10002',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10001',
          ),
        ),
        2 => 
        array (
          'name' => 'ApiId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据服务API的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '删除是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<DeleteDataServiceApiResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</DeleteDataServiceApiResponse>","errorExample":""}]',
      'title' => '删除数据服务API',
      'summary' => '调用DeleteDataServiceApi删除数据服务API。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListDataServiceApis' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78301',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码，从1开始，默认值为1。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '50',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
        3 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10001',
          ),
        ),
        4 => 
        array (
          'name' => 'ApiNameKeyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API名称的关键词，过滤得到API名称包含该关键词的API。
',
            'type' => 'string',
            'required' => false,
            'example' => '我的API名称',
          ),
        ),
        5 => 
        array (
          'name' => 'ApiPathKeyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API路径的关键词，过滤得到API路径包含该关键词的API。
',
            'type' => 'string',
            'required' => false,
            'example' => '/test/',
          ),
        ),
        6 => 
        array (
          'name' => 'CreatorId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API创建者的阿里云ID，过滤得到该用户创建的API。',
            'type' => 'string',
            'required' => false,
            'example' => '12345',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。
',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '返回开发中API的信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码，和请求中的PageNumber一致。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '总记录数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Apis' => 
                  array (
                    'description' => 'API开发态信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回对象',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Timeout' => 
                        array (
                          'description' => '超时时间，单位为毫秒（ms）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10000',
                        ),
                        'Status' => 
                        array (
                          'description' => 'API的状态，可选枚举值包括0（未发布）和1（已发布）。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ApiId' => 
                        array (
                          'description' => 'API的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10002',
                        ),
                        'ApiMode' => 
                        array (
                          'description' => 'API的类型，可选枚举值包括0（向导API）、1（脚本API）和2（注册API）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                        'ResponseContentType' => 
                        array (
                          'description' => 'API的返回数据类型，可选枚举值包括0（JSON）和1（XML）。向导和脚本API支持JSON，注册API支持JSON和XML。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'CreatorId' => 
                        array (
                          'description' => '创建人的阿里云ID。',
                          'type' => 'string',
                          'example' => '1234567',
                        ),
                        'VisibleRange' => 
                        array (
                          'description' => '可见范围，可选枚举值包括0（工作空间）和1（私有）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ModifiedTime' => 
                        array (
                          'description' => '最新修改时间。
',
                          'type' => 'string',
                          'example' => '2020-06-23T00:21:01+0800',
                        ),
                        'OperatorId' => 
                        array (
                          'description' => '最新编辑人的阿里云ID。',
                          'type' => 'string',
                          'example' => '2345678',
                        ),
                        'GroupId' => 
                        array (
                          'description' => '分组ID。',
                          'type' => 'string',
                          'example' => 'abcde123456789',
                        ),
                        'Description' => 
                        array (
                          'description' => 'API的描述信息。',
                          'type' => 'string',
                          'example' => '测试API描述',
                        ),
                        'FolderId' => 
                        array (
                          'description' => '文件夹ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'RequestMethod' => 
                        array (
                          'description' => 'API的请求方式，可选枚举值包括0（GET）、1（POST）、2（PUT）和3（DELTE）。向导和脚本API支持GET和POST。注册API支持GET、POST、PUT和DELETE。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'CreatedTime' => 
                        array (
                          'description' => '创建时间。
',
                          'type' => 'string',
                          'example' => '2020-06-23T00:21:01+0800',
                        ),
                        'ApiName' => 
                        array (
                          'description' => 'API的名称。
',
                          'type' => 'string',
                          'example' => '我的API名称',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '租户ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                        'ApiPath' => 
                        array (
                          'description' => 'API的路径。
',
                          'type' => 'string',
                          'example' => '/test/1',
                        ),
                        'Protocols' => 
                        array (
                          'description' => '字段列表',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => 'API的协议，多值列表，可选枚举值包括0（HTTP）和1（HTTPS）。
',
                            'type' => 'integer',
                            'format' => 'int32',
                            'example' => '0',
                          ),
                        ),
                        'RegistrationDetails' => 
                        array (
                          'description' => '注册API的详情，只有注册API返回。
',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ServiceHost' => 
                            array (
                              'description' => '后端服务地址。
',
                              'type' => 'string',
                              'example' => 'http://example.aliyundoc.com',
                            ),
                            'ServiceContentType' => 
                            array (
                              'description' => 'API的返回数据类型，可选枚举值包括0（JSON）和1（XML）。向导和脚本API支持JSON，注册API支持JSON和XML。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ServicePath' => 
                            array (
                              'description' => '后端服务路径。
',
                              'type' => 'string',
                              'example' => '/index',
                            ),
                            'SuccessfulResultSample' => 
                            array (
                              'description' => '正常返回示例。
',
                              'type' => 'string',
                              'example' => '{"success": true}',
                            ),
                            'FailedResultSample' => 
                            array (
                              'description' => '错误返回示例。
',
                              'type' => 'string',
                              'example' => '{"success": false}',
                            ),
                            'ServiceRequestBodyDescription' => 
                            array (
                              'description' => '后端请求body内容的描述信息。
',
                              'type' => 'string',
                              'example' => '{"abc":1}',
                            ),
                            'RegistrationErrorCodes' => 
                            array (
                              'description' => '注册API的错误码列表。
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '返回对象',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ErrorMessage' => 
                                  array (
                                    'description' => '错误信息。
',
                                    'type' => 'string',
                                    'example' => 'fail to call',
                                  ),
                                  'ErrorCode' => 
                                  array (
                                    'description' => '错误码。
',
                                    'type' => 'string',
                                    'example' => '1001',
                                  ),
                                  'ErrorSolution' => 
                                  array (
                                    'description' => '错误解决方案。
',
                                    'type' => 'string',
                                    'example' => 'retry',
                                  ),
                                ),
                              ),
                            ),
                            'RegistrationRequestParameters' => 
                            array (
                              'description' => '注册API的请求参数列表。
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '返回对象',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ColumnName' => 
                                  array (
                                    'description' => '绑定的表字段名称，仅向导模式支持。
',
                                    'type' => 'string',
                                    'example' => 'column1',
                                  ),
                                  'ParameterName' => 
                                  array (
                                    'description' => '参数的名称。
',
                                    'type' => 'string',
                                    'example' => 'name1',
                                  ),
                                  'ParameterPosition' => 
                                  array (
                                    'description' => '参数的位置，可选枚举值包括0（Path）、1（Query）、2（Head）和3（Body）。向导和脚本API仅支持Query。注册API中的GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head和Body。
',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ParameterDescription' => 
                                  array (
                                    'description' => '描述的信息。',
                                    'type' => 'string',
                                    'example' => 'description1',
                                  ),
                                  'DefaultValue' => 
                                  array (
                                    'description' => '默认值。
',
                                    'type' => 'string',
                                    'example' => 'default1',
                                  ),
                                  'ParameterOperator' => 
                                  array (
                                    'description' => '运算符，可选枚举值包括0（Equal）、1（Like）、2（Const）和3（In）。向导模式API支持Equal、Like和In，脚本模式API支持Equal，注册API支持Equal和Const。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ParameterDataType' => 
                                  array (
                                    'description' => '
数据类型，可选枚举值：
- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ExampleValue' => 
                                  array (
                                    'description' => '示例值。',
                                    'type' => 'string',
                                    'example' => 'example1',
                                  ),
                                  'IsRequiredParameter' => 
                                  array (
                                    'description' => '是否必填。
',
                                    'type' => 'boolean',
                                    'example' => 'true',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                        'ScriptDetails' => 
                        array (
                          'description' => '脚本API的详情，只有脚本API返回。
',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Script' => 
                            array (
                              'description' => 'SQL脚本。
',
                              'type' => 'string',
                              'example' => 'select a from t',
                            ),
                            'IsPagedResponse' => 
                            array (
                              'description' => '返回是否分页。
',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                            'ScriptRequestParameters' => 
                            array (
                              'description' => '脚本API的请求参数列表。
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '返回对象',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ColumnName' => 
                                  array (
                                    'description' => '绑定的表字段名称，仅向导模式支持。
',
                                    'type' => 'string',
                                    'example' => 'column1',
                                  ),
                                  'ParameterName' => 
                                  array (
                                    'description' => '参数名称',
                                    'type' => 'string',
                                    'example' => 'param1',
                                  ),
                                  'ParameterPosition' => 
                                  array (
                                    'description' => '参数位置，可选枚举值有：

- 0：Path
- 1：Query
- 2：Head
- 3：Body

向导和脚本API，只支持Query；注册API，GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head、Body。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ParameterDescription' => 
                                  array (
                                    'description' => '描述',
                                    'type' => 'string',
                                    'example' => 'description1',
                                  ),
                                  'DefaultValue' => 
                                  array (
                                    'description' => '默认值',
                                    'type' => 'string',
                                    'example' => 'default1',
                                  ),
                                  'ParameterOperator' => 
                                  array (
                                    'description' => '运算符，可选枚举值有：

- 0：Equal
- 1：Like
- 2：Const
- 3：In

向导API支持Equal、Like、In；脚本API支持Equal；注册API支持Equal、Const。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ParameterDataType' => 
                                  array (
                                    'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ExampleValue' => 
                                  array (
                                    'description' => '示例值
',
                                    'type' => 'string',
                                    'example' => 'example1',
                                  ),
                                  'IsRequiredParameter' => 
                                  array (
                                    'description' => '是否必填
',
                                    'type' => 'boolean',
                                    'example' => 'true',
                                  ),
                                ),
                              ),
                            ),
                            'ScriptResponseParameters' => 
                            array (
                              'description' => '脚本API的返回参数列表。
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '返回对象',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ParameterDescription' => 
                                  array (
                                    'description' => '描述',
                                    'type' => 'string',
                                    'example' => 'description2',
                                  ),
                                  'ColumnName' => 
                                  array (
                                    'description' => '绑定的表字段名称，仅向导模式有
',
                                    'type' => 'string',
                                    'example' => 'column2',
                                  ),
                                  'ParameterName' => 
                                  array (
                                    'description' => '参数名称',
                                    'type' => 'string',
                                    'example' => 'param2',
                                  ),
                                  'ParameterDataType' => 
                                  array (
                                    'description' => '数据类型，可选枚举值：
- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ExampleValue' => 
                                  array (
                                    'description' => '示例值
',
                                    'type' => 'string',
                                    'example' => 'example2',
                                  ),
                                ),
                              ),
                            ),
                            'ScriptConnection' => 
                            array (
                              'description' => '脚本API的数据源信息。
',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'TableName' => 
                                array (
                                  'description' => '数据源表的名称。
',
                                  'type' => 'string',
                                  'example' => 't',
                                ),
                                'ConnectionId' => 
                                array (
                                  'description' => '数据源ID。
',
                                  'type' => 'integer',
                                  'format' => 'int64',
                                  'example' => '123',
                                ),
                              ),
                            ),
                          ),
                        ),
                        'WizardDetails' => 
                        array (
                          'description' => '向导API的详情，只有向导API返回。
',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'IsPagedResponse' => 
                            array (
                              'description' => '返回是否分页。
',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                            'WizardRequestParameters' => 
                            array (
                              'description' => '向导API的请求参数列表。
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '返回对象',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ColumnName' => 
                                  array (
                                    'description' => '绑定的表字段名称，仅向导模式支持。
',
                                    'type' => 'string',
                                    'example' => 'column1',
                                  ),
                                  'ParameterName' => 
                                  array (
                                    'description' => '参数名称。
',
                                    'type' => 'string',
                                    'example' => 'param1',
                                  ),
                                  'ParameterPosition' => 
                                  array (
                                    'description' => '参数的位置，可选枚举值包括0（Path）、1（Query）、2（Head）和3（Body）。向导和脚本API仅支持Query。注册API中的GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head和Body。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ParameterDescription' => 
                                  array (
                                    'description' => '描述信息。
',
                                    'type' => 'string',
                                    'example' => 'description1',
                                  ),
                                  'DefaultValue' => 
                                  array (
                                    'description' => '默认值。
',
                                    'type' => 'string',
                                    'example' => 'default1',
                                  ),
                                  'ParameterOperator' => 
                                  array (
                                    'description' => '运算符，可选枚举值包括0（Equal）、1（Like）、2（Const）和3（In）。向导API支持Equal、Like和In，脚本API支持Equal，注册API支持Equal和Const。


',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ParameterDataType' => 
                                  array (
                                    'description' => '数据类型，可选枚举值：
- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ExampleValue' => 
                                  array (
                                    'description' => '示例值。
',
                                    'type' => 'string',
                                    'example' => 'example1',
                                  ),
                                  'IsRequiredParameter' => 
                                  array (
                                    'description' => '是否必填。
',
                                    'type' => 'boolean',
                                    'example' => 'true',
                                  ),
                                ),
                              ),
                            ),
                            'WizardResponseParameters' => 
                            array (
                              'description' => '向导模式的返回参数列表。
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '返回对象',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ParameterDescription' => 
                                  array (
                                    'description' => '描述信息。',
                                    'type' => 'string',
                                    'example' => 'description2',
                                  ),
                                  'ColumnName' => 
                                  array (
                                    'description' => '绑定的表字段名称，仅向导模式支持。
',
                                    'type' => 'string',
                                    'example' => 'column2',
                                  ),
                                  'ParameterName' => 
                                  array (
                                    'description' => '参数的名称。',
                                    'type' => 'string',
                                    'example' => 'param2',
                                  ),
                                  'ParameterDataType' => 
                                  array (
                                    'description' => '数据类型，可选枚举值：
- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ExampleValue' => 
                                  array (
                                    'description' => '示例值。
',
                                    'type' => 'string',
                                    'example' => 'example2',
                                  ),
                                ),
                              ),
                            ),
                            'WizardConnection' => 
                            array (
                              'description' => '向导API的数据源信息。
',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'TableName' => 
                                array (
                                  'description' => '数据源表的名称。
',
                                  'type' => 'string',
                                  'example' => 't',
                                ),
                                'ConnectionId' => 
                                array (
                                  'description' => '数据源ID。
',
                                  'type' => 'integer',
                                  'format' => 'int64',
                                  'example' => '123',
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Apis\\": [\\n      {\\n        \\"Timeout\\": 10000,\\n        \\"Status\\": 0,\\n        \\"ApiId\\": 10002,\\n        \\"ApiMode\\": 0,\\n        \\"ProjectId\\": 10000,\\n        \\"ResponseContentType\\": 0,\\n        \\"CreatorId\\": \\"1234567\\",\\n        \\"VisibleRange\\": 0,\\n        \\"ModifiedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n        \\"OperatorId\\": \\"2345678\\",\\n        \\"GroupId\\": \\"abcde123456789\\",\\n        \\"Description\\": \\"测试API描述\\",\\n        \\"FolderId\\": 0,\\n        \\"RequestMethod\\": 0,\\n        \\"CreatedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n        \\"ApiName\\": \\"我的API名称\\",\\n        \\"TenantId\\": 10000,\\n        \\"ApiPath\\": \\"/test/1\\",\\n        \\"Protocols\\": [\\n          0\\n        ],\\n        \\"RegistrationDetails\\": {\\n          \\"ServiceHost\\": \\"http://example.aliyundoc.com\\",\\n          \\"ServiceContentType\\": 0,\\n          \\"ServicePath\\": \\"/index\\",\\n          \\"SuccessfulResultSample\\": \\"{\\\\\\"success\\\\\\": true}\\",\\n          \\"FailedResultSample\\": \\"{\\\\\\"success\\\\\\": false}\\",\\n          \\"ServiceRequestBodyDescription\\": \\"{\\\\\\"abc\\\\\\":1}\\",\\n          \\"RegistrationErrorCodes\\": [\\n            {\\n              \\"ErrorMessage\\": \\"fail to call\\",\\n              \\"ErrorCode\\": \\"1001\\",\\n              \\"ErrorSolution\\": \\"retry\\"\\n            }\\n          ],\\n          \\"RegistrationRequestParameters\\": [\\n            {\\n              \\"ColumnName\\": \\"column1\\",\\n              \\"ParameterName\\": \\"name1\\",\\n              \\"ParameterPosition\\": 0,\\n              \\"ParameterDescription\\": \\"description1\\",\\n              \\"DefaultValue\\": \\"default1\\",\\n              \\"ParameterOperator\\": 0,\\n              \\"ParameterDataType\\": 0,\\n              \\"ExampleValue\\": \\"example1\\",\\n              \\"IsRequiredParameter\\": true\\n            }\\n          ]\\n        },\\n        \\"ScriptDetails\\": {\\n          \\"Script\\": \\"select a from t\\",\\n          \\"IsPagedResponse\\": true,\\n          \\"ScriptRequestParameters\\": [\\n            {\\n              \\"ColumnName\\": \\"column1\\",\\n              \\"ParameterName\\": \\"param1\\",\\n              \\"ParameterPosition\\": 0,\\n              \\"ParameterDescription\\": \\"description1\\",\\n              \\"DefaultValue\\": \\"default1\\",\\n              \\"ParameterOperator\\": 0,\\n              \\"ParameterDataType\\": 0,\\n              \\"ExampleValue\\": \\"example1\\",\\n              \\"IsRequiredParameter\\": true\\n            }\\n          ],\\n          \\"ScriptResponseParameters\\": [\\n            {\\n              \\"ParameterDescription\\": \\"description2\\",\\n              \\"ColumnName\\": \\"column2\\",\\n              \\"ParameterName\\": \\"param2\\",\\n              \\"ParameterDataType\\": 0,\\n              \\"ExampleValue\\": \\"example2\\"\\n            }\\n          ],\\n          \\"ScriptConnection\\": {\\n            \\"TableName\\": \\"t\\",\\n            \\"ConnectionId\\": 123\\n          }\\n        },\\n        \\"WizardDetails\\": {\\n          \\"IsPagedResponse\\": true,\\n          \\"WizardRequestParameters\\": [\\n            {\\n              \\"ColumnName\\": \\"column1\\",\\n              \\"ParameterName\\": \\"param1\\",\\n              \\"ParameterPosition\\": 0,\\n              \\"ParameterDescription\\": \\"description1\\",\\n              \\"DefaultValue\\": \\"default1\\",\\n              \\"ParameterOperator\\": 0,\\n              \\"ParameterDataType\\": 0,\\n              \\"ExampleValue\\": \\"example1\\",\\n              \\"IsRequiredParameter\\": true\\n            }\\n          ],\\n          \\"WizardResponseParameters\\": [\\n            {\\n              \\"ParameterDescription\\": \\"description2\\",\\n              \\"ColumnName\\": \\"column2\\",\\n              \\"ParameterName\\": \\"param2\\",\\n              \\"ParameterDataType\\": 0,\\n              \\"ExampleValue\\": \\"example2\\"\\n            }\\n          ],\\n          \\"WizardConnection\\": {\\n            \\"TableName\\": \\"t\\",\\n            \\"ConnectionId\\": 123\\n          }\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListDataServiceApisResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Apis>\\n            <Timeout>10000</Timeout>\\n            <Status>0</Status>\\n            <ApiId>10002</ApiId>\\n            <ApiMode>0</ApiMode>\\n            <ProjectId>10000</ProjectId>\\n            <ResponseContentType>0</ResponseContentType>\\n            <CreatorId>1234567</CreatorId>\\n            <VisibleRange>0</VisibleRange>\\n            <ModifiedTime>2020-06-23T00:21:01+0800</ModifiedTime>\\n            <OperatorId>2345678</OperatorId>\\n            <GroupId>abcde123456789</GroupId>\\n            <Description>测试API描述</Description>\\n            <FolderId>0</FolderId>\\n            <RequestMethod>0</RequestMethod>\\n            <CreatedTime>2020-06-23T00:21:01+0800</CreatedTime>\\n            <ApiName>我的API名称</ApiName>\\n            <TenantId>10000</TenantId>\\n            <ApiPath>/test/1</ApiPath>\\n            <Protocols>0</Protocols>\\n            <RegistrationDetails>\\n                <ServiceHost>http://example.aliyundoc.com</ServiceHost>\\n                <ServiceContentType>0</ServiceContentType>\\n                <ServicePath>/index</ServicePath>\\n                <SuccessfulResultSample>{\\"success\\": true}</SuccessfulResultSample>\\n                <FailedResultSample>{\\"success\\": false}</FailedResultSample>\\n                <ServiceRequestBodyDescription>{\\"abc\\":1}</ServiceRequestBodyDescription>\\n                <RegistrationErrorCodes>\\n                    <ErrorMessage>fail to call</ErrorMessage>\\n                    <ErrorCode>1001</ErrorCode>\\n                    <ErrorSolution>retry</ErrorSolution>\\n                </RegistrationErrorCodes>\\n                <RegistrationRequestParameters>\\n                    <ColumnName>column1</ColumnName>\\n                    <ParameterName>name1</ParameterName>\\n                    <ParameterPosition>0</ParameterPosition>\\n                    <ParameterDescription>description1</ParameterDescription>\\n                    <DefaultValue>default1</DefaultValue>\\n                    <ParameterOperator>0</ParameterOperator>\\n                    <ParameterDataType>0</ParameterDataType>\\n                    <ExampleValue>example1</ExampleValue>\\n                    <IsRequiredParameter>true</IsRequiredParameter>\\n                </RegistrationRequestParameters>\\n            </RegistrationDetails>\\n            <ScriptDetails>\\n                <Script>select a from t</Script>\\n                <IsPagedResponse>true</IsPagedResponse>\\n                <ScriptRequestParameters>\\n                    <ColumnName>column1</ColumnName>\\n                    <ParameterName>param1</ParameterName>\\n                    <ParameterPosition>0</ParameterPosition>\\n                    <ParameterDescription>description1</ParameterDescription>\\n                    <DefaultValue>default1</DefaultValue>\\n                    <ParameterOperator>0</ParameterOperator>\\n                    <ParameterDataType>0</ParameterDataType>\\n                    <ExampleValue>example1</ExampleValue>\\n                    <IsRequiredParameter>true</IsRequiredParameter>\\n                </ScriptRequestParameters>\\n                <ScriptResponseParameters>\\n                    <ParameterDescription>description2</ParameterDescription>\\n                    <ColumnName>column2</ColumnName>\\n                    <ParameterName>param2</ParameterName>\\n                    <ParameterDataType>0</ParameterDataType>\\n                    <ExampleValue>example2</ExampleValue>\\n                </ScriptResponseParameters>\\n                <ScriptConnection>\\n                    <TableName>t</TableName>\\n                    <ConnectionId>123</ConnectionId>\\n                </ScriptConnection>\\n            </ScriptDetails>\\n            <WizardDetails>\\n                <IsPagedResponse>true</IsPagedResponse>\\n                <WizardRequestParameters>\\n                    <ColumnName>column1</ColumnName>\\n                    <ParameterName>param1</ParameterName>\\n                    <ParameterPosition>0</ParameterPosition>\\n                    <ParameterDescription>description1</ParameterDescription>\\n                    <DefaultValue>default1</DefaultValue>\\n                    <ParameterOperator>0</ParameterOperator>\\n                    <ParameterDataType>0</ParameterDataType>\\n                    <ExampleValue>example1</ExampleValue>\\n                    <IsRequiredParameter>true</IsRequiredParameter>\\n                </WizardRequestParameters>\\n                <WizardResponseParameters>\\n                    <ParameterDescription>description2</ParameterDescription>\\n                    <ColumnName>column2</ColumnName>\\n                    <ParameterName>param2</ParameterName>\\n                    <ParameterDataType>0</ParameterDataType>\\n                    <ExampleValue>example2</ExampleValue>\\n                </WizardResponseParameters>\\n                <WizardConnection>\\n                    <TableName>t</TableName>\\n                    <ConnectionId>123</ConnectionId>\\n                </WizardConnection>\\n            </WizardDetails>\\n        </Apis>\\n    </Data>\\n</ListDataServiceApisResponse>","errorExample":""}]',
      'title' => '获取数据服务API开发中的信息列表',
      'summary' => '调用ListDataServiceApis获取数据服务API开发中的信息列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' 不同类型API的详情信息通过不同字段返回。向导API使用WizardDetails字段，脚本API使用ScriptDetails字段，注册API使用RegistrationDetails字段。
',
      'extraInfo' => ' ',
    ),
    'GetDataServiceApi' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78235',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10002',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10001',
          ),
        ),
        2 => 
        array (
          'name' => 'ApiId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据服务API的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Timeout' => 
                  array (
                    'description' => '超时时间，单位为毫秒（ms）。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10000',
                  ),
                  'Status' => 
                  array (
                    'description' => 'API的状态，可选枚举值包括0（未发布）和1（已发布）。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'ApiId' => 
                  array (
                    'description' => '数据服务API的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10000',
                  ),
                  'ApiMode' => 
                  array (
                    'description' => 'API的类型，可选枚举值包括0（向导API）、1（脚本API）和2（注册API）。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10001',
                  ),
                  'ResponseContentType' => 
                  array (
                    'description' => 'API的返回数据类型，可选枚举值包括0（JSON）和1（XML）。向导和脚本API支持JSON，注册API支持JSON和XML。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'CreatorId' => 
                  array (
                    'description' => '创建人的阿里云ID。',
                    'type' => 'string',
                    'example' => '1234567',
                  ),
                  'VisibleRange' => 
                  array (
                    'description' => '可见范围，可选枚举值包括0（工作空间）和1（私有）。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'ModifiedTime' => 
                  array (
                    'description' => '最新修改时间。',
                    'type' => 'string',
                    'example' => '2020-06-23T00:21:01+0800',
                  ),
                  'OperatorId' => 
                  array (
                    'description' => '最新编辑人的阿里云ID。',
                    'type' => 'string',
                    'example' => '2345678',
                  ),
                  'GroupId' => 
                  array (
                    'description' => '分组ID。',
                    'type' => 'string',
                    'example' => 'ab123****',
                  ),
                  'Description' => 
                  array (
                    'description' => '描述信息。',
                    'type' => 'string',
                    'example' => '测试API描述',
                  ),
                  'FolderId' => 
                  array (
                    'description' => '文件夹ID',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '0',
                  ),
                  'RequestMethod' => 
                  array (
                    'description' => 'API的请求方式，可选枚举值包括0（GET）、1（POST）、2（PUT）和3（DELETE）。向导和脚本API支持GET和POST。注册API支持GET、POST、PUT和DELETE。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'CreatedTime' => 
                  array (
                    'description' => '创建时间。',
                    'type' => 'string',
                    'example' => '2020-06-23T00:21:01+0800',
                  ),
                  'ApiName' => 
                  array (
                    'description' => 'API的名称。',
                    'type' => 'string',
                    'example' => '测试API名称',
                  ),
                  'TenantId' => 
                  array (
                    'description' => '租户ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10002',
                  ),
                  'ApiPath' => 
                  array (
                    'description' => 'API的路径。',
                    'type' => 'string',
                    'example' => '/test/1',
                  ),
                  'Protocols' => 
                  array (
                    'description' => '字段列表',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => 'API协议，多值列表，可选枚举值包括0（HTTP）和1（HTTPS）。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                  ),
                  'RegistrationDetails' => 
                  array (
                    'description' => '注册API的详情，只有注册API返回。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'ServiceHost' => 
                      array (
                        'description' => '后端服务地址',
                        'type' => 'string',
                        'example' => 'http://example.aliyundoc.com',
                      ),
                      'ServiceContentType' => 
                      array (
                        'description' => 'API返回数据类型，可选枚举值：

- 0：JSON
- 1：XML

向导和脚本API只支持JSON；注册API支持JSON和XML。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '0',
                      ),
                      'ServicePath' => 
                      array (
                        'description' => '后端服务路径',
                        'type' => 'string',
                        'example' => '/index',
                      ),
                      'SuccessfulResultSample' => 
                      array (
                        'description' => '正常返回示例',
                        'type' => 'string',
                        'example' => '{"success": true}',
                      ),
                      'FailedResultSample' => 
                      array (
                        'description' => '错误返回示例。',
                        'type' => 'string',
                        'example' => '{"success": false}',
                      ),
                      'ServiceRequestBodyDescription' => 
                      array (
                        'description' => '后端请求body内容描述',
                        'type' => 'string',
                        'example' => '{"abc":1}',
                      ),
                      'RegistrationErrorCodes' => 
                      array (
                        'description' => '注册API的错误码列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '返回对象',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ErrorMessage' => 
                            array (
                              'description' => '错误信息。',
                              'type' => 'string',
                              'example' => 'fail to call',
                            ),
                            'ErrorCode' => 
                            array (
                              'description' => '错误码。',
                              'type' => 'string',
                              'example' => '1001',
                            ),
                            'ErrorSolution' => 
                            array (
                              'description' => '错误解决方案。',
                              'type' => 'string',
                              'example' => 'retry',
                            ),
                          ),
                        ),
                      ),
                      'RegistrationRequestParameters' => 
                      array (
                        'description' => '注册API的请求参数列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '返回对象',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ColumnName' => 
                            array (
                              'description' => '绑定的表字段名称，仅向导模式支持。',
                              'type' => 'string',
                              'example' => 'column1',
                            ),
                            'ParameterName' => 
                            array (
                              'description' => '参数的名称。',
                              'type' => 'string',
                              'example' => 'name1',
                            ),
                            'ParameterPosition' => 
                            array (
                              'description' => '参数位置，可选枚举值有：

- 0：Path
- 1：Query
- 2：Head
- 3：Body

向导和脚本API，只支持Query；注册API，GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head、Body。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ParameterDescription' => 
                            array (
                              'description' => '描述信息。',
                              'type' => 'string',
                              'example' => 'description1',
                            ),
                            'DefaultValue' => 
                            array (
                              'description' => '默认值。',
                              'type' => 'string',
                              'example' => 'default1',
                            ),
                            'ParameterOperator' => 
                            array (
                              'description' => '运算符，可选枚举值有：

- 0：Equal
- 1：Like
- 2：Const
- 3：In

向导API支持Equal、Like、In；脚本API支持Equal；注册API支持Equal、Const。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ParameterDataType' => 
                            array (
                              'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExampleValue' => 
                            array (
                              'description' => '示例值。',
                              'type' => 'string',
                              'example' => 'example1',
                            ),
                            'IsRequiredParameter' => 
                            array (
                              'description' => '是否必填。',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'ScriptDetails' => 
                  array (
                    'description' => '脚本API的详情，只有脚本API返回。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Script' => 
                      array (
                        'description' => 'SQL脚本。',
                        'type' => 'string',
                        'example' => 'select a from t',
                      ),
                      'IsPagedResponse' => 
                      array (
                        'description' => '返回是否分页。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'ScriptRequestParameters' => 
                      array (
                        'description' => '脚本API的请求参数列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '返回对象',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ColumnName' => 
                            array (
                              'description' => '绑定的表字段名称，仅向导模式支持。',
                              'type' => 'string',
                              'example' => 'column1',
                            ),
                            'ParameterName' => 
                            array (
                              'description' => '参数的名称。',
                              'type' => 'string',
                              'example' => 'param1',
                            ),
                            'ParameterPosition' => 
                            array (
                              'description' => '参数的位置，可选枚举值包括0（Path）、1（Query）、2（Head）和3（Body）。向导和脚本API仅支持Query。注册API中的GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head和Body。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ParameterDescription' => 
                            array (
                              'description' => '描述信息。',
                              'type' => 'string',
                              'example' => 'description1',
                            ),
                            'DefaultValue' => 
                            array (
                              'description' => '默认值。',
                              'type' => 'string',
                              'example' => 'default1',
                            ),
                            'ParameterOperator' => 
                            array (
                              'description' => '运算符，可选枚举值包括0（Equal）、1（Like）、2（Const）和3（In）。向导模式API支持Equal、Like和In，脚本模式API支持Equal，注册API支持Equal和Const。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ParameterDataType' => 
                            array (
                              'description' => '数据类型，可选枚举值：
- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExampleValue' => 
                            array (
                              'description' => '示例值。',
                              'type' => 'string',
                              'example' => 'example1',
                            ),
                            'IsRequiredParameter' => 
                            array (
                              'description' => '是否必填。',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                          ),
                        ),
                      ),
                      'ScriptResponseParameters' => 
                      array (
                        'description' => '脚本API的返回参数列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '返回对象',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ParameterDescription' => 
                            array (
                              'description' => '描述信息。',
                              'type' => 'string',
                              'example' => 'description2',
                            ),
                            'ColumnName' => 
                            array (
                              'description' => '绑定的表字段名称，仅向导模式支持。',
                              'type' => 'string',
                              'example' => 'column2',
                            ),
                            'ParameterName' => 
                            array (
                              'description' => '参数的名称。',
                              'type' => 'string',
                              'example' => 'param2',
                            ),
                            'ParameterDataType' => 
                            array (
                              'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExampleValue' => 
                            array (
                              'description' => '示例值。',
                              'type' => 'string',
                              'example' => 'example2',
                            ),
                          ),
                        ),
                      ),
                      'ScriptConnection' => 
                      array (
                        'description' => '脚本API的数据源信息。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'TableName' => 
                          array (
                            'description' => '数据源表的名称。',
                            'type' => 'string',
                            'example' => 't',
                          ),
                          'ConnectionId' => 
                          array (
                            'description' => '数据源ID。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '123',
                          ),
                        ),
                      ),
                    ),
                  ),
                  'WizardDetails' => 
                  array (
                    'description' => '向导API详情，只有向导API返回。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'IsPagedResponse' => 
                      array (
                        'description' => '返回是否分页。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'WizardRequestParameters' => 
                      array (
                        'description' => '向导API的请求参数列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '返回对象',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ColumnName' => 
                            array (
                              'description' => '绑定的表字段名称，仅向导模式支持。',
                              'type' => 'string',
                              'example' => 'column1',
                            ),
                            'ParameterName' => 
                            array (
                              'description' => '参数的名称。',
                              'type' => 'string',
                              'example' => 'param1',
                            ),
                            'ParameterPosition' => 
                            array (
                              'description' => '参数的位置，可选枚举值包括0（Path）、1（Query）、2（Head）和3（Body）。向导和脚本API仅支持Query。注册API中的GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head和Body。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ParameterDescription' => 
                            array (
                              'description' => '描述信息。',
                              'type' => 'string',
                              'example' => 'description1',
                            ),
                            'DefaultValue' => 
                            array (
                              'description' => '默认值。',
                              'type' => 'string',
                              'example' => 'default1',
                            ),
                            'ParameterOperator' => 
                            array (
                              'description' => '运算符，可选枚举值包括0（Equal）、1（Like）、2（Const）和3（In）。向导模式API支持Equal、Like和In，脚本模式API支持Equal，注册API支持Equal和Const。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ParameterDataType' => 
                            array (
                              'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExampleValue' => 
                            array (
                              'description' => '示例值。',
                              'type' => 'string',
                              'example' => 'example1',
                            ),
                            'IsRequiredParameter' => 
                            array (
                              'description' => '是否必填。',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                          ),
                        ),
                      ),
                      'WizardResponseParameters' => 
                      array (
                        'description' => '向导模式的返回参数列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '返回对象',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ParameterDescription' => 
                            array (
                              'description' => '描述信息。',
                              'type' => 'string',
                              'example' => 'description2',
                            ),
                            'ColumnName' => 
                            array (
                              'description' => '绑定的表字段名称，仅向导模式支持。',
                              'type' => 'string',
                              'example' => 'column2',
                            ),
                            'ParameterName' => 
                            array (
                              'description' => '参数的名称。',
                              'type' => 'string',
                              'example' => 'param2',
                            ),
                            'ParameterDataType' => 
                            array (
                              'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExampleValue' => 
                            array (
                              'description' => '示例值。',
                              'type' => 'string',
                              'example' => 'example2',
                            ),
                          ),
                        ),
                      ),
                      'WizardConnection' => 
                      array (
                        'description' => '向导API的数据源信息。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'TableName' => 
                          array (
                            'description' => '数据源的表名称。',
                            'type' => 'string',
                            'example' => 't',
                          ),
                          'ConnectionId' => 
                          array (
                            'description' => '数据源ID。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '123',
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Data\\": {\\n    \\"Timeout\\": 10000,\\n    \\"Status\\": 0,\\n    \\"ApiId\\": 10000,\\n    \\"ApiMode\\": 0,\\n    \\"ProjectId\\": 10001,\\n    \\"ResponseContentType\\": 0,\\n    \\"CreatorId\\": \\"1234567\\",\\n    \\"VisibleRange\\": 0,\\n    \\"ModifiedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n    \\"OperatorId\\": \\"2345678\\",\\n    \\"GroupId\\": \\"ab123****\\",\\n    \\"Description\\": \\"测试API描述\\",\\n    \\"FolderId\\": 0,\\n    \\"RequestMethod\\": 0,\\n    \\"CreatedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n    \\"ApiName\\": \\"测试API名称\\",\\n    \\"TenantId\\": 10002,\\n    \\"ApiPath\\": \\"/test/1\\",\\n    \\"Protocols\\": [\\n      0\\n    ],\\n    \\"RegistrationDetails\\": {\\n      \\"ServiceHost\\": \\"http://example.aliyundoc.com\\",\\n      \\"ServiceContentType\\": 0,\\n      \\"ServicePath\\": \\"/index\\",\\n      \\"SuccessfulResultSample\\": \\"{\\\\\\"success\\\\\\": true}\\",\\n      \\"FailedResultSample\\": \\"{\\\\\\"success\\\\\\": false}\\",\\n      \\"ServiceRequestBodyDescription\\": \\"{\\\\\\"abc\\\\\\":1}\\",\\n      \\"RegistrationErrorCodes\\": [\\n        {\\n          \\"ErrorMessage\\": \\"fail to call\\",\\n          \\"ErrorCode\\": \\"1001\\",\\n          \\"ErrorSolution\\": \\"retry\\"\\n        }\\n      ],\\n      \\"RegistrationRequestParameters\\": [\\n        {\\n          \\"ColumnName\\": \\"column1\\",\\n          \\"ParameterName\\": \\"name1\\",\\n          \\"ParameterPosition\\": 0,\\n          \\"ParameterDescription\\": \\"description1\\",\\n          \\"DefaultValue\\": \\"default1\\",\\n          \\"ParameterOperator\\": 0,\\n          \\"ParameterDataType\\": 0,\\n          \\"ExampleValue\\": \\"example1\\",\\n          \\"IsRequiredParameter\\": true\\n        }\\n      ]\\n    },\\n    \\"ScriptDetails\\": {\\n      \\"Script\\": \\"select a from t\\",\\n      \\"IsPagedResponse\\": true,\\n      \\"ScriptRequestParameters\\": [\\n        {\\n          \\"ColumnName\\": \\"column1\\",\\n          \\"ParameterName\\": \\"param1\\",\\n          \\"ParameterPosition\\": 0,\\n          \\"ParameterDescription\\": \\"description1\\",\\n          \\"DefaultValue\\": \\"default1\\",\\n          \\"ParameterOperator\\": 0,\\n          \\"ParameterDataType\\": 0,\\n          \\"ExampleValue\\": \\"example1\\",\\n          \\"IsRequiredParameter\\": true\\n        }\\n      ],\\n      \\"ScriptResponseParameters\\": [\\n        {\\n          \\"ParameterDescription\\": \\"description2\\",\\n          \\"ColumnName\\": \\"column2\\",\\n          \\"ParameterName\\": \\"param2\\",\\n          \\"ParameterDataType\\": 0,\\n          \\"ExampleValue\\": \\"example2\\"\\n        }\\n      ],\\n      \\"ScriptConnection\\": {\\n        \\"TableName\\": \\"t\\",\\n        \\"ConnectionId\\": 123\\n      }\\n    },\\n    \\"WizardDetails\\": {\\n      \\"IsPagedResponse\\": true,\\n      \\"WizardRequestParameters\\": [\\n        {\\n          \\"ColumnName\\": \\"column1\\",\\n          \\"ParameterName\\": \\"param1\\",\\n          \\"ParameterPosition\\": 0,\\n          \\"ParameterDescription\\": \\"description1\\",\\n          \\"DefaultValue\\": \\"default1\\",\\n          \\"ParameterOperator\\": 0,\\n          \\"ParameterDataType\\": 0,\\n          \\"ExampleValue\\": \\"example1\\",\\n          \\"IsRequiredParameter\\": true\\n        }\\n      ],\\n      \\"WizardResponseParameters\\": [\\n        {\\n          \\"ParameterDescription\\": \\"description2\\",\\n          \\"ColumnName\\": \\"column2\\",\\n          \\"ParameterName\\": \\"param2\\",\\n          \\"ParameterDataType\\": 0,\\n          \\"ExampleValue\\": \\"example2\\"\\n        }\\n      ],\\n      \\"WizardConnection\\": {\\n        \\"TableName\\": \\"t\\",\\n        \\"ConnectionId\\": 123\\n      }\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDataServiceApiResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>1031203110005</ErrorCode>\\n    <Data>\\n        <Timeout>10000</Timeout>\\n        <Status>0</Status>\\n        <ApiId>10000</ApiId>\\n        <ApiMode>0</ApiMode>\\n        <ProjectId>10001</ProjectId>\\n        <ResponseContentType>0</ResponseContentType>\\n        <CreatorId>1234567</CreatorId>\\n        <VisibleRange>0</VisibleRange>\\n        <ModifiedTime>2020-06-23T00:21:01+0800</ModifiedTime>\\n        <OperatorId>2345678</OperatorId>\\n        <GroupId>ab123****</GroupId>\\n        <Description>测试API描述</Description>\\n        <FolderId>0</FolderId>\\n        <RequestMethod>0</RequestMethod>\\n        <CreatedTime>2020-06-23T00:21:01+0800</CreatedTime>\\n        <ApiName>测试API名称</ApiName>\\n        <TenantId>10002</TenantId>\\n        <ApiPath>/test/1</ApiPath>\\n        <Protocols>0</Protocols>\\n        <RegistrationDetails>\\n            <ServiceHost>http://example.aliyundoc.com</ServiceHost>\\n            <ServiceContentType>0</ServiceContentType>\\n            <ServicePath>/index</ServicePath>\\n            <SuccessfulResultSample>{\\"success\\": true}</SuccessfulResultSample>\\n            <FailedResultSample>{\\"success\\": false}</FailedResultSample>\\n            <ServiceRequestBodyDescription>{\\"abc\\":1}</ServiceRequestBodyDescription>\\n            <RegistrationErrorCodes>\\n                <ErrorMessage>fail to call</ErrorMessage>\\n                <ErrorCode>1001</ErrorCode>\\n                <ErrorSolution>retry</ErrorSolution>\\n            </RegistrationErrorCodes>\\n            <RegistrationRequestParameters>\\n                <ColumnName>column1</ColumnName>\\n                <ParameterName>name1</ParameterName>\\n                <ParameterPosition>0</ParameterPosition>\\n                <ParameterDescription>description1</ParameterDescription>\\n                <DefaultValue>default1</DefaultValue>\\n                <ParameterOperator>0</ParameterOperator>\\n                <ParameterDataType>0</ParameterDataType>\\n                <ExampleValue>example1</ExampleValue>\\n                <IsRequiredParameter>true</IsRequiredParameter>\\n            </RegistrationRequestParameters>\\n        </RegistrationDetails>\\n        <ScriptDetails>\\n            <Script>select a from t</Script>\\n            <IsPagedResponse>true</IsPagedResponse>\\n            <ScriptRequestParameters>\\n                <ColumnName>column1</ColumnName>\\n                <ParameterName>param1</ParameterName>\\n                <ParameterPosition>0</ParameterPosition>\\n                <ParameterDescription>description1</ParameterDescription>\\n                <DefaultValue>default1</DefaultValue>\\n                <ParameterOperator>0</ParameterOperator>\\n                <ParameterDataType>0</ParameterDataType>\\n                <ExampleValue>example1</ExampleValue>\\n                <IsRequiredParameter>true</IsRequiredParameter>\\n            </ScriptRequestParameters>\\n            <ScriptResponseParameters>\\n                <ParameterDescription>description2</ParameterDescription>\\n                <ColumnName>column2</ColumnName>\\n                <ParameterName>param2</ParameterName>\\n                <ParameterDataType>0</ParameterDataType>\\n                <ExampleValue>example2</ExampleValue>\\n            </ScriptResponseParameters>\\n            <ScriptConnection>\\n                <TableName>t</TableName>\\n                <ConnectionId>123</ConnectionId>\\n            </ScriptConnection>\\n        </ScriptDetails>\\n        <WizardDetails>\\n            <IsPagedResponse>true</IsPagedResponse>\\n            <WizardRequestParameters>\\n                <ColumnName>column1</ColumnName>\\n                <ParameterName>param1</ParameterName>\\n                <ParameterPosition>0</ParameterPosition>\\n                <ParameterDescription>description1</ParameterDescription>\\n                <DefaultValue>default1</DefaultValue>\\n                <ParameterOperator>0</ParameterOperator>\\n                <ParameterDataType>0</ParameterDataType>\\n                <ExampleValue>example1</ExampleValue>\\n                <IsRequiredParameter>true</IsRequiredParameter>\\n            </WizardRequestParameters>\\n            <WizardResponseParameters>\\n                <ParameterDescription>description2</ParameterDescription>\\n                <ColumnName>column2</ColumnName>\\n                <ParameterName>param2</ParameterName>\\n                <ParameterDataType>0</ParameterDataType>\\n                <ExampleValue>example2</ExampleValue>\\n            </WizardResponseParameters>\\n            <WizardConnection>\\n                <TableName>t</TableName>\\n                <ConnectionId>123</ConnectionId>\\n            </WizardConnection>\\n        </WizardDetails>\\n    </Data>\\n</GetDataServiceApiResponse>","errorExample":""}]',
      'title' => '查询数据服务API开发态的详情',
      'summary' => '调用GetDataServiceApi查询数据服务API开发态的详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' 不同类型API的详情信息通过不同字段返回。向导API使用WizardDetails字段，脚本API使用ScriptDetails字段，注册API使用RegistrationDetails字段。',
      'extraInfo' => ' ',
    ),
    'UpdateDataServiceApi' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78368',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideZZ63WZ',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10001',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10001',
          ),
        ),
        2 => 
        array (
          'name' => 'ApiId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
        3 => 
        array (
          'name' => 'RequestMethod',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的请求方式，可选枚举值包括0（GET）、1（POST）、2（PUT）和3（DELTE）。向导和脚本API支持GET和POST。注册API支持GET、POST、PUT和DELETE。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '0',
          ),
        ),
        4 => 
        array (
          'name' => 'ResponseContentType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的返回数据类型，可选枚举值包括0（JSON）和1（XML）。向导和脚本API支持JSON，注册API支持JSON和XML。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '0',
          ),
        ),
        5 => 
        array (
          'name' => 'Timeout',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '超时时间，单位为毫秒（ms），取值范围为(0, 30000]。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
        6 => 
        array (
          'name' => 'VisibleRange',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '可见范围，可选枚举值包括0（工作空间）和1（私有）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '0',
          ),
        ),
        7 => 
        array (
          'name' => 'Protocols',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API协议，可选枚举值包括0（HTTP）和1（HTTPS）。支持多值，多个值之间使用英文逗号（,）分隔。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '0,1',
          ),
        ),
        8 => 
        array (
          'name' => 'WizardDetails',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '向导API的详情，请参见[GetDataServiceApi](~~174013~~)接口wizardDetails字段的JSON String。

',
            'type' => 'string',
            'required' => false,
            'example' => '{"isPagedResponse":true,"wizardConnection":{"connectionId":122786,"tableName":"person"},"wizardRequestParameters":[{"columnName":"id","defaultValue":"","exampleValue":"1","isRequiredParameter":true,"parameterDataType":2,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":0}],"wizardResponseParameters":[{"columnName":"id","exampleValue":"11","parameterDataType":2,"parameterDescription":"","parameterName":"id"}]}',
          ),
        ),
        9 => 
        array (
          'name' => 'ScriptDetails',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '脚本API的详情，请参见[GetDataServiceApi](~~174013~~)接口scriptDetails字段的JSON String。
',
            'type' => 'string',
            'required' => false,
            'example' => '{"isPagedResponse":false,"script":"select id as id1, name as name1 from person where id=${inputid}","scriptConnection":{"connectionId":122786,"tableName":"person"},"scriptRequestParameters":[{"defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"inputid","parameterOperator":0,"parameterPosition":1}],"scriptResponseParameters":[{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"id1"},{"exampleValue":"","parameterDataType":0,"parameterDescription":"","parameterName":"name1"}]}',
          ),
        ),
        10 => 
        array (
          'name' => 'RegistrationDetails',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '注册API的详情，请参见[GetDataServiceApi](~~174013~~)接口registrationDetails字段的JSON String。',
            'type' => 'string',
            'required' => false,
            'example' => '{"failedResultSample":"fail","registrationErrorCodes":[{"errorCode":"e1","errorMessage":"msg1","errorSolution":"sol1"},{"errorCode":"e2","errorMessage":"msg2","errorSolution":"sol2"}],"registrationRequestParameters":[{"columnName":"","defaultValue":"","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"id","parameterOperator":0,"parameterPosition":1},{"columnName":"","defaultValue":"xx","exampleValue":"","isRequiredParameter":true,"parameterDataType":0,"parameterDescription":"","parameterName":"cc","parameterOperator":2,"parameterPosition":2}],"serviceContentType":1,"serviceHost":"http://www.baidu.com","servicePath":"/[uid]","serviceRequestBodyDescription":"body","successfulResultSample":"success"}',
          ),
        ),
        11 => 
        array (
          'name' => 'ApiPath',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的路径。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '/test/2',
          ),
        ),
        12 => 
        array (
          'name' => 'ApiDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的描述信息。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '测试API描述',
          ),
        ),
        13 => 
        array (
          'name' => 'ResourceGroupId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '独享资源组ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '3242432423',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '更新API是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<UpdateDataServiceApiResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</UpdateDataServiceApiResponse>","errorExample":""}]',
      'title' => '更新数据服务API开发态的信息',
      'summary' => '调用UpdateDataServiceApi更新数据服务API开发态的信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetDataServicePublishedApi' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78239',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10002',
          ),
        ),
        1 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10003',
          ),
        ),
        2 => 
        array (
          'name' => 'ApiId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。
',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => 'API的最新发布态信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Timeout' => 
                  array (
                    'description' => '超时时间，单位为毫秒（ms）。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10000',
                  ),
                  'Status' => 
                  array (
                    'description' => '	
API的状态，可选枚举值包括0（未发布）和1（已发布）。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'ApiId' => 
                  array (
                    'description' => '数据服务API的ID。
',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10000',
                  ),
                  'ApiMode' => 
                  array (
                    'description' => 'API的类型，可选枚举值包括0（向导API）、1（脚本API）和2（注册API）。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '工作空间的ID。
',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10001',
                  ),
                  'ResponseContentType' => 
                  array (
                    'description' => 'API的返回数据类型，可选枚举值包括0（JSON）和1（XML）。向导和脚本API支持JSON，注册API支持JSON和XML。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'CreatorId' => 
                  array (
                    'description' => '创建人的阿里云ID。
',
                    'type' => 'string',
                    'example' => '1234567',
                  ),
                  'VisibleRange' => 
                  array (
                    'description' => '可见范围，可选枚举值包括0（工作空间）和1（私有）。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'ModifiedTime' => 
                  array (
                    'description' => '最新修改时间。
',
                    'type' => 'string',
                    'example' => '2020-06-23T00:21:01+0800',
                  ),
                  'OperatorId' => 
                  array (
                    'description' => '最新编辑人的阿里云ID。
',
                    'type' => 'string',
                    'example' => '2345678',
                  ),
                  'GroupId' => 
                  array (
                    'description' => '分组ID。
',
                    'type' => 'string',
                    'example' => 'ab12**',
                  ),
                  'Description' => 
                  array (
                    'description' => '描述信息。',
                    'type' => 'string',
                    'example' => '测试API描述',
                  ),
                  'RequestMethod' => 
                  array (
                    'description' => 'API的请求方式，可选枚举值包括0（GET）、1（POST）、2（PUT）和3（DELTE）。向导和脚本API支持GET和POST。注册API支持GET、POST、PUT和DELETE。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'CreatedTime' => 
                  array (
                    'description' => '创建时间。
',
                    'type' => 'string',
                    'example' => '2020-06-23T00:21:01+0800',
                  ),
                  'ApiName' => 
                  array (
                    'description' => 'API的名称。
',
                    'type' => 'string',
                    'example' => '测试API名称',
                  ),
                  'TenantId' => 
                  array (
                    'description' => '租户ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10001',
                  ),
                  'ApiPath' => 
                  array (
                    'description' => 'API的路径。
',
                    'type' => 'string',
                    'example' => '/test/1',
                  ),
                  'Protocols' => 
                  array (
                    'description' => 'API协议，多值列表，可选枚举值包括0（HTTP）和1（HTTPS）。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => 'API协议，多值列表，可选枚举值包括0（HTTP）和1（HTTPS）。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '0',
                    ),
                  ),
                  'RegistrationDetails' => 
                  array (
                    'description' => '注册API详情，只有注册API返回。
',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'ServiceHost' => 
                      array (
                        'description' => '后端服务地址。',
                        'type' => 'string',
                        'example' => 'http://www.abc.com',
                      ),
                      'ServiceContentType' => 
                      array (
                        'description' => 'API的返回数据类型，可选枚举值包括0（JSON）和1（XML）。向导和脚本API支持JSON，注册API支持JSON和XML。
',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '0',
                      ),
                      'ServicePath' => 
                      array (
                        'description' => '后端服务路径。
',
                        'type' => 'string',
                        'example' => '/index',
                      ),
                      'SuccessfulResultSample' => 
                      array (
                        'description' => '正常返回示例。
',
                        'type' => 'string',
                        'example' => '{"success": true}',
                      ),
                      'FailedResultSample' => 
                      array (
                        'description' => '错误返回示例。
',
                        'type' => 'string',
                        'example' => '{"success": false}',
                      ),
                      'ServiceRequestBodyDescription' => 
                      array (
                        'description' => '后端请求body内容的描述。
',
                        'type' => 'string',
                        'example' => '{"abc":1}',
                      ),
                      'RegistrationErrorCodes' => 
                      array (
                        'description' => '注册API的错误码列表。
',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ErrorMessage' => 
                            array (
                              'description' => '错误信息。
',
                              'type' => 'string',
                              'example' => 'The connection does not exist.',
                            ),
                            'ErrorCode' => 
                            array (
                              'description' => '错误码。
',
                              'type' => 'string',
                              'example' => 'Invalid.Tenant.ConnectionNotExists',
                            ),
                            'ErrorSolution' => 
                            array (
                              'description' => '错误解决方案。
',
                              'type' => 'string',
                              'example' => 'retry',
                            ),
                          ),
                        ),
                      ),
                      'RegistrationRequestParameters' => 
                      array (
                        'description' => '注册API的请求参数列表。
',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ParameterName' => 
                            array (
                              'description' => '参数的名称。
',
                              'type' => 'string',
                              'example' => 'name1',
                            ),
                            'ParameterPosition' => 
                            array (
                              'description' => '参数的位置，可选枚举值包括0（Path）、1（Query）、2（Head）和3（Body）。向导和脚本API仅支持Query。注册API中的GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head和Body。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ParameterDescription' => 
                            array (
                              'description' => '描述信息。',
                              'type' => 'string',
                              'example' => 'description1',
                            ),
                            'DefaultValue' => 
                            array (
                              'description' => '默认值。',
                              'type' => 'string',
                              'example' => 'default1',
                            ),
                            'ParameterOperator' => 
                            array (
                              'description' => '运算符，可选枚举值包括0（Equal）、1（Like）、2（Const）和3（In）。向导模式API支持Equal、Like和In，脚本模式API支持Equal，注册API支持Equal和Const。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExampleValue' => 
                            array (
                              'description' => '示例值。
',
                              'type' => 'string',
                              'example' => 'example1',
                            ),
                            'ParameterDataType' => 
                            array (
                              'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'IsRequiredParameter' => 
                            array (
                              'description' => '是否必填。',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'ScriptDetails' => 
                  array (
                    'description' => '脚本API详情，只有脚本API返回。
',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'IsPagedResponse' => 
                      array (
                        'description' => '返回是否分页。
',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'SuccessfulResultSample' => 
                      array (
                        'description' => '正常返回示例。',
                        'type' => 'string',
                        'example' => '{"success": true}',
                      ),
                      'FailedResultSample' => 
                      array (
                        'description' => '错误返回示例。
',
                        'type' => 'string',
                        'example' => '{"success": false}',
                      ),
                      'Script' => 
                      array (
                        'description' => 'SQL脚本。
',
                        'type' => 'string',
                        'example' => 'select a from t',
                      ),
                      'ScriptErrorCodes' => 
                      array (
                        'description' => '脚本API的错误码列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ErrorMessage' => 
                            array (
                              'description' => '错误信息',
                              'type' => 'string',
                              'example' => 'fail to call',
                            ),
                            'ErrorCode' => 
                            array (
                              'description' => '错误码',
                              'type' => 'string',
                              'example' => '1001',
                            ),
                            'ErrorSolution' => 
                            array (
                              'description' => '错误解决方案',
                              'type' => 'string',
                              'example' => 'retry',
                            ),
                          ),
                        ),
                      ),
                      'ScriptRequestParameters' => 
                      array (
                        'description' => '脚本API的请求参数列表。
',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ParameterName' => 
                            array (
                              'description' => '参数名称
',
                              'type' => 'string',
                              'example' => 'param1',
                            ),
                            'ParameterPosition' => 
                            array (
                              'description' => '参数位置，可选枚举值有：

- 0：Path
- 1：Query
- 2：Head
- 3：Body

向导和脚本API，只支持Query；注册API，GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head、Body。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ParameterDescription' => 
                            array (
                              'description' => '描述
',
                              'type' => 'string',
                              'example' => 'description1',
                            ),
                            'DefaultValue' => 
                            array (
                              'description' => '默认值
',
                              'type' => 'string',
                              'example' => 'default1',
                            ),
                            'ParameterOperator' => 
                            array (
                              'description' => '运算符，可选枚举值有：

- 0：Equal
- 1：Like
- 2：Const
- 3：In

向导API支持Equal、Like、In；脚本API支持Equal；注册API支持Equal、Const。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExampleValue' => 
                            array (
                              'description' => '示例值
',
                              'type' => 'string',
                              'example' => 'example1',
                            ),
                            'ParameterDataType' => 
                            array (
                              'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'IsRequiredParameter' => 
                            array (
                              'description' => '是否必填
',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                          ),
                        ),
                      ),
                      'ScriptResponseParameters' => 
                      array (
                        'description' => '脚本API的返回参数列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ParameterDescription' => 
                            array (
                              'description' => '描述信息。
',
                              'type' => 'string',
                              'example' => 'description2',
                            ),
                            'ParameterName' => 
                            array (
                              'description' => '参数的名称。',
                              'type' => 'string',
                              'example' => 'param2',
                            ),
                            'ExampleValue' => 
                            array (
                              'description' => '示例值。',
                              'type' => 'string',
                              'example' => 'example2',
                            ),
                            'ParameterDataType' => 
                            array (
                              'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                          ),
                        ),
                      ),
                      'ScriptConnection' => 
                      array (
                        'description' => '脚本API的数据源信息。
',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'TableName' => 
                          array (
                            'description' => '数据源的表名称。
',
                            'type' => 'string',
                            'example' => 't',
                          ),
                          'ConnectionId' => 
                          array (
                            'description' => '数据源的ID。
',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '123',
                          ),
                        ),
                      ),
                    ),
                  ),
                  'WizardDetails' => 
                  array (
                    'description' => '向导API详情，只有向导API返回。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'IsPagedResponse' => 
                      array (
                        'description' => '返回是否分页。',
                        'type' => 'boolean',
                        'example' => 'true',
                      ),
                      'SuccessfulResultSample' => 
                      array (
                        'description' => '正常返回示例。',
                        'type' => 'string',
                        'example' => '{"success": true}',
                      ),
                      'FailedResultSample' => 
                      array (
                        'description' => '错误返回示例。',
                        'type' => 'string',
                        'example' => '{"success": false}',
                      ),
                      'WizardErrorCodes' => 
                      array (
                        'description' => '向导API的错误码列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ErrorMessage' => 
                            array (
                              'description' => '错误信息。',
                              'type' => 'string',
                              'example' => 'fail to call',
                            ),
                            'ErrorCode' => 
                            array (
                              'description' => '错误码。',
                              'type' => 'string',
                              'example' => '1001',
                            ),
                            'ErrorSolution' => 
                            array (
                              'description' => '错误解决方案。',
                              'type' => 'string',
                              'example' => 'retry',
                            ),
                          ),
                        ),
                      ),
                      'WizardRequestParameters' => 
                      array (
                        'description' => '向导API的请求参数列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ParameterName' => 
                            array (
                              'description' => '参数的名称。',
                              'type' => 'string',
                              'example' => 'param1',
                            ),
                            'ParameterPosition' => 
                            array (
                              'description' => '参数的位置，可选枚举值包括0（Path）、1（Query）、2（Head）和3（Body）。向导和脚本API仅支持Query。注册API中的GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head和Body。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ParameterDescription' => 
                            array (
                              'description' => '描述信息。',
                              'type' => 'string',
                              'example' => 'description1',
                            ),
                            'DefaultValue' => 
                            array (
                              'description' => '默认值。
',
                              'type' => 'string',
                              'example' => 'default1',
                            ),
                            'ParameterOperator' => 
                            array (
                              'description' => '运算符，可选枚举值包括0（Equal）、1（Like）、2（Const）和3（In）。向导模式API支持Equal、Like和In，脚本模式API支持Equal，注册API支持Equal和Const。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ExampleValue' => 
                            array (
                              'description' => '示例值。
',
                              'type' => 'string',
                              'example' => 'example1',
                            ),
                            'ParameterDataType' => 
                            array (
                              'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'IsRequiredParameter' => 
                            array (
                              'description' => '是否必填。
',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                          ),
                        ),
                      ),
                      'WizardResponseParameters' => 
                      array (
                        'description' => '向导API的返回参数列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '向导模式的返回参数列表。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ParameterDescription' => 
                            array (
                              'description' => '描述信息。',
                              'type' => 'string',
                              'example' => 'description2',
                            ),
                            'ParameterName' => 
                            array (
                              'description' => '参数的名称。',
                              'type' => 'string',
                              'example' => 'param2',
                            ),
                            'ExampleValue' => 
                            array (
                              'description' => '示例值。',
                              'type' => 'string',
                              'example' => 'example2',
                            ),
                            'ParameterDataType' => 
                            array (
                              'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                          ),
                        ),
                      ),
                      'WizardConnection' => 
                      array (
                        'description' => '向导API的数据源信息。
',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'TableName' => 
                          array (
                            'description' => '数据源的表名称。',
                            'type' => 'string',
                            'example' => 't',
                          ),
                          'ConnectionId' => 
                          array (
                            'description' => '数据源的ID。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '123',
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"Timeout\\": 10000,\\n    \\"Status\\": 1,\\n    \\"ApiId\\": 10000,\\n    \\"ApiMode\\": 0,\\n    \\"ProjectId\\": 10001,\\n    \\"ResponseContentType\\": 0,\\n    \\"CreatorId\\": \\"1234567\\",\\n    \\"VisibleRange\\": 0,\\n    \\"ModifiedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n    \\"OperatorId\\": \\"2345678\\",\\n    \\"GroupId\\": \\"ab12**\\",\\n    \\"Description\\": \\"测试API描述\\",\\n    \\"RequestMethod\\": 0,\\n    \\"CreatedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n    \\"ApiName\\": \\"测试API名称\\",\\n    \\"TenantId\\": 10001,\\n    \\"ApiPath\\": \\"/test/1\\",\\n    \\"Protocols\\": [\\n      0\\n    ],\\n    \\"RegistrationDetails\\": {\\n      \\"ServiceHost\\": \\"http://www.abc.com\\",\\n      \\"ServiceContentType\\": 0,\\n      \\"ServicePath\\": \\"/index\\",\\n      \\"SuccessfulResultSample\\": \\"{\\\\\\"success\\\\\\": true}\\",\\n      \\"FailedResultSample\\": \\"{\\\\\\"success\\\\\\": false}\\",\\n      \\"ServiceRequestBodyDescription\\": \\"{\\\\\\"abc\\\\\\":1}\\",\\n      \\"RegistrationErrorCodes\\": [\\n        {\\n          \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n          \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n          \\"ErrorSolution\\": \\"retry\\"\\n        }\\n      ],\\n      \\"RegistrationRequestParameters\\": [\\n        {\\n          \\"ParameterName\\": \\"name1\\",\\n          \\"ParameterPosition\\": 0,\\n          \\"ParameterDescription\\": \\"description1\\",\\n          \\"DefaultValue\\": \\"default1\\",\\n          \\"ParameterOperator\\": 0,\\n          \\"ExampleValue\\": \\"example1\\",\\n          \\"ParameterDataType\\": 0,\\n          \\"IsRequiredParameter\\": true\\n        }\\n      ]\\n    },\\n    \\"ScriptDetails\\": {\\n      \\"IsPagedResponse\\": true,\\n      \\"SuccessfulResultSample\\": \\"{\\\\\\"success\\\\\\": true}\\",\\n      \\"FailedResultSample\\": \\"{\\\\\\"success\\\\\\": false}\\",\\n      \\"Script\\": \\"select a from t\\",\\n      \\"ScriptErrorCodes\\": [\\n        {\\n          \\"ErrorMessage\\": \\"fail to call\\",\\n          \\"ErrorCode\\": \\"1001\\",\\n          \\"ErrorSolution\\": \\"retry\\"\\n        }\\n      ],\\n      \\"ScriptRequestParameters\\": [\\n        {\\n          \\"ParameterName\\": \\"param1\\",\\n          \\"ParameterPosition\\": 0,\\n          \\"ParameterDescription\\": \\"description1\\",\\n          \\"DefaultValue\\": \\"default1\\",\\n          \\"ParameterOperator\\": 0,\\n          \\"ExampleValue\\": \\"example1\\",\\n          \\"ParameterDataType\\": 0,\\n          \\"IsRequiredParameter\\": true\\n        }\\n      ],\\n      \\"ScriptResponseParameters\\": [\\n        {\\n          \\"ParameterDescription\\": \\"description2\\",\\n          \\"ParameterName\\": \\"param2\\",\\n          \\"ExampleValue\\": \\"example2\\",\\n          \\"ParameterDataType\\": 0\\n        }\\n      ],\\n      \\"ScriptConnection\\": {\\n        \\"TableName\\": \\"t\\",\\n        \\"ConnectionId\\": 123\\n      }\\n    },\\n    \\"WizardDetails\\": {\\n      \\"IsPagedResponse\\": true,\\n      \\"SuccessfulResultSample\\": \\"{\\\\\\"success\\\\\\": true}\\",\\n      \\"FailedResultSample\\": \\"{\\\\\\"success\\\\\\": false}\\",\\n      \\"WizardErrorCodes\\": [\\n        {\\n          \\"ErrorMessage\\": \\"fail to call\\",\\n          \\"ErrorCode\\": \\"1001\\",\\n          \\"ErrorSolution\\": \\"retry\\"\\n        }\\n      ],\\n      \\"WizardRequestParameters\\": [\\n        {\\n          \\"ParameterName\\": \\"param1\\",\\n          \\"ParameterPosition\\": 0,\\n          \\"ParameterDescription\\": \\"description1\\",\\n          \\"DefaultValue\\": \\"default1\\",\\n          \\"ParameterOperator\\": 0,\\n          \\"ExampleValue\\": \\"example1\\",\\n          \\"ParameterDataType\\": 0,\\n          \\"IsRequiredParameter\\": true\\n        }\\n      ],\\n      \\"WizardResponseParameters\\": [\\n        {\\n          \\"ParameterDescription\\": \\"description2\\",\\n          \\"ParameterName\\": \\"param2\\",\\n          \\"ExampleValue\\": \\"example2\\",\\n          \\"ParameterDataType\\": 0\\n        }\\n      ],\\n      \\"WizardConnection\\": {\\n        \\"TableName\\": \\"t\\",\\n        \\"ConnectionId\\": 123\\n      }\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDataServicePublishedApiResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <Timeout>10000</Timeout>\\n        <Status>1</Status>\\n        <ApiId>10000</ApiId>\\n        <ApiMode>0</ApiMode>\\n        <ProjectId>10001</ProjectId>\\n        <ResponseContentType>0</ResponseContentType>\\n        <CreatorId>1234567</CreatorId>\\n        <VisibleRange>0</VisibleRange>\\n        <ModifiedTime>2020-06-23T00:21:01+0800</ModifiedTime>\\n        <OperatorId>2345678</OperatorId>\\n        <GroupId>ab12**</GroupId>\\n        <Description>测试API描述</Description>\\n        <RequestMethod>0</RequestMethod>\\n        <CreatedTime>2020-06-23T00:21:01+0800</CreatedTime>\\n        <ApiName>测试API名称</ApiName>\\n        <TenantId>10001</TenantId>\\n        <ApiPath>/test/1</ApiPath>\\n        <Protocols>0</Protocols>\\n        <RegistrationDetails>\\n            <ServiceHost>http://www.abc.com</ServiceHost>\\n            <ServiceContentType>0</ServiceContentType>\\n            <ServicePath>/index</ServicePath>\\n            <SuccessfulResultSample>{\\"success\\": true}</SuccessfulResultSample>\\n            <FailedResultSample>{\\"success\\": false}</FailedResultSample>\\n            <ServiceRequestBodyDescription>{\\"abc\\":1}</ServiceRequestBodyDescription>\\n            <RegistrationErrorCodes>\\n                <ErrorMessage>The connection does not exist.</ErrorMessage>\\n                <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n                <ErrorSolution>retry</ErrorSolution>\\n            </RegistrationErrorCodes>\\n            <RegistrationRequestParameters>\\n                <ParameterName>name1</ParameterName>\\n                <ParameterPosition>0</ParameterPosition>\\n                <ParameterDescription>description1</ParameterDescription>\\n                <DefaultValue>default1</DefaultValue>\\n                <ParameterOperator>0</ParameterOperator>\\n                <ExampleValue>example1</ExampleValue>\\n                <ParameterDataType>0</ParameterDataType>\\n                <IsRequiredParameter>true</IsRequiredParameter>\\n            </RegistrationRequestParameters>\\n        </RegistrationDetails>\\n        <ScriptDetails>\\n            <IsPagedResponse>true</IsPagedResponse>\\n            <SuccessfulResultSample>{\\"success\\": true}</SuccessfulResultSample>\\n            <FailedResultSample>{\\"success\\": false}</FailedResultSample>\\n            <Script>select a from t</Script>\\n            <ScriptErrorCodes>\\n                <ErrorMessage>fail to call</ErrorMessage>\\n                <ErrorCode>1001</ErrorCode>\\n                <ErrorSolution>retry</ErrorSolution>\\n            </ScriptErrorCodes>\\n            <ScriptRequestParameters>\\n                <ParameterName>param1</ParameterName>\\n                <ParameterPosition>0</ParameterPosition>\\n                <ParameterDescription>description1</ParameterDescription>\\n                <DefaultValue>default1</DefaultValue>\\n                <ParameterOperator>0</ParameterOperator>\\n                <ExampleValue>example1</ExampleValue>\\n                <ParameterDataType>0</ParameterDataType>\\n                <IsRequiredParameter>true</IsRequiredParameter>\\n            </ScriptRequestParameters>\\n            <ScriptResponseParameters>\\n                <ParameterDescription>description2</ParameterDescription>\\n                <ParameterName>param2</ParameterName>\\n                <ExampleValue>example2</ExampleValue>\\n                <ParameterDataType>0</ParameterDataType>\\n            </ScriptResponseParameters>\\n            <ScriptConnection>\\n                <TableName>t</TableName>\\n                <ConnectionId>123</ConnectionId>\\n            </ScriptConnection>\\n        </ScriptDetails>\\n        <WizardDetails>\\n            <IsPagedResponse>true</IsPagedResponse>\\n            <SuccessfulResultSample>{\\"success\\": true}</SuccessfulResultSample>\\n            <FailedResultSample>{\\"success\\": false}</FailedResultSample>\\n            <WizardErrorCodes>\\n                <ErrorMessage>fail to call</ErrorMessage>\\n                <ErrorCode>1001</ErrorCode>\\n                <ErrorSolution>retry</ErrorSolution>\\n            </WizardErrorCodes>\\n            <WizardRequestParameters>\\n                <ParameterName>param1</ParameterName>\\n                <ParameterPosition>0</ParameterPosition>\\n                <ParameterDescription>description1</ParameterDescription>\\n                <DefaultValue>default1</DefaultValue>\\n                <ParameterOperator>0</ParameterOperator>\\n                <ExampleValue>example1</ExampleValue>\\n                <ParameterDataType>0</ParameterDataType>\\n                <IsRequiredParameter>true</IsRequiredParameter>\\n            </WizardRequestParameters>\\n            <WizardResponseParameters>\\n                <ParameterDescription>description2</ParameterDescription>\\n                <ParameterName>param2</ParameterName>\\n                <ExampleValue>example2</ExampleValue>\\n                <ParameterDataType>0</ParameterDataType>\\n            </WizardResponseParameters>\\n            <WizardConnection>\\n                <TableName>t</TableName>\\n                <ConnectionId>123</ConnectionId>\\n            </WizardConnection>\\n        </WizardDetails>\\n    </Data>\\n</GetDataServicePublishedApiResponse>","errorExample":""}]',
      'title' => '查询数据服务API的发布态信息',
      'summary' => '调用GetDataServicePublishedApi查询数据服务API的发布态信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' 不同类型API的详情信息通过不同字段返回。向导API使用WizardDetails字段，脚本API使用ScriptDetails字段，注册API使用RegistrationDetails字段。
',
      'extraInfo' => ' ',
    ),
    'ListDataServicePublishedApis' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78306',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码，从1开始，默认值为1。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '50',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
        3 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10001',
          ),
        ),
        4 => 
        array (
          'name' => 'ApiNameKeyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API名称的关键词，过滤得到API名称包含该关键词的API。
',
            'type' => 'string',
            'required' => false,
            'example' => '我的API名称',
          ),
        ),
        5 => 
        array (
          'name' => 'ApiPathKeyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API路径的关键词，过滤得到API路径包含该关键词的API。
',
            'type' => 'string',
            'required' => false,
            'example' => '/test/',
          ),
        ),
        6 => 
        array (
          'name' => 'CreatorId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API创建者的阿里云ID，过滤得到该用户创建的API。
',
            'type' => 'string',
            'required' => false,
            'example' => '12345',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。
',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => 'API发布态信息返回。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码，和请求中的PageNumber一致。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Apis' => 
                  array (
                    'description' => 'API发布态信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Timeout' => 
                        array (
                          'description' => '超时时间，单位毫秒ms
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10000',
                        ),
                        'Status' => 
                        array (
                          'description' => 'API的状态，可选枚举值包括0（未发布）和1（已发布）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'ApiId' => 
                        array (
                          'description' => 'API的ID。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10002',
                        ),
                        'ApiMode' => 
                        array (
                          'description' => 'API的类型，可选枚举值包括0（向导API）、1（脚本API）和2（注册API）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                        'ResponseContentType' => 
                        array (
                          'description' => '	
API的返回数据类型，可选枚举值包括0（JSON）和1（XML）。向导和脚本API支持JSON，注册API支持JSON和XML。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'CreatorId' => 
                        array (
                          'description' => '创建人的阿里云ID。
',
                          'type' => 'string',
                          'example' => '1234567',
                        ),
                        'VisibleRange' => 
                        array (
                          'description' => '可见范围，可选枚举值包括0（工作空间）和1（私有）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ModifiedTime' => 
                        array (
                          'description' => '最新修改时间。
',
                          'type' => 'string',
                          'example' => '2020-06-23T00:21:01+0800',
                        ),
                        'OperatorId' => 
                        array (
                          'description' => '最新编辑人阿里云ID
',
                          'type' => 'string',
                          'example' => '2345678',
                        ),
                        'GroupId' => 
                        array (
                          'description' => '分组ID。
',
                          'type' => 'string',
                          'example' => 'ab123',
                        ),
                        'Description' => 
                        array (
                          'description' => '描述信息。',
                          'type' => 'string',
                          'example' => '测试API描述',
                        ),
                        'RequestMethod' => 
                        array (
                          'description' => 'API的请求方式，可选枚举值包括0（GET）、1（POST）、2（PUT）和3（DELTE）。向导和脚本API支持GET和POST。注册API支持GET、POST、PUT和DELETE。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'CreatedTime' => 
                        array (
                          'description' => '创建时间。
',
                          'type' => 'string',
                          'example' => '2020-06-23T00:21:01+0800',
                        ),
                        'ApiName' => 
                        array (
                          'description' => 'API的名称。
',
                          'type' => 'string',
                          'example' => '我的API名称',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '租户ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10001',
                        ),
                        'ApiPath' => 
                        array (
                          'description' => 'API的路径。
',
                          'type' => 'string',
                          'example' => '/test/1',
                        ),
                        'Protocols' => 
                        array (
                          'description' => 'API协议，可选枚举值包括0（HTTP）和1（HTTPS）。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => 'API协议，可选枚举值包括0（HTTP）和1（HTTPS）。',
                            'type' => 'integer',
                            'format' => 'int32',
                            'example' => '0',
                          ),
                        ),
                        'RegistrationDetails' => 
                        array (
                          'description' => '注册API详情，只有注册API返回。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ServiceHost' => 
                            array (
                              'description' => '后端服务地址。
',
                              'type' => 'string',
                              'example' => 'http://www.abc.com',
                            ),
                            'ServiceContentType' => 
                            array (
                              'description' => 'API的返回数据类型，可选枚举值包括0（JSON）和1（XML）。向导和脚本API支持JSON，注册API支持JSON和XML。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'ServicePath' => 
                            array (
                              'description' => '后端服务路径。
',
                              'type' => 'string',
                              'example' => '/index',
                            ),
                            'SuccessfulResultSample' => 
                            array (
                              'description' => '正常返回示例。
',
                              'type' => 'string',
                              'example' => '{"success": true}',
                            ),
                            'FailedResultSample' => 
                            array (
                              'description' => '错误返回示例。
',
                              'type' => 'string',
                              'example' => '{"success": false}',
                            ),
                            'ServiceRequestBodyDescription' => 
                            array (
                              'description' => '后端请求body内容的描述。
',
                              'type' => 'string',
                              'example' => '{"abc":1}',
                            ),
                            'RegistrationErrorCodes' => 
                            array (
                              'description' => '注册API的错误码列表。
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '注册API的错误码列表。
',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ErrorMessage' => 
                                  array (
                                    'description' => '错误信息
',
                                    'type' => 'string',
                                    'example' => 'fail to call',
                                  ),
                                  'ErrorCode' => 
                                  array (
                                    'description' => '错误码
',
                                    'type' => 'string',
                                    'example' => '1001',
                                  ),
                                  'ErrorSolution' => 
                                  array (
                                    'description' => '错误解决方案
',
                                    'type' => 'string',
                                    'example' => 'retry',
                                  ),
                                ),
                              ),
                            ),
                            'RegistrationRequestParameters' => 
                            array (
                              'description' => '注册API的请求参数列表。
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ParameterName' => 
                                  array (
                                    'description' => '参数名称
',
                                    'type' => 'string',
                                    'example' => 'name1',
                                  ),
                                  'ParameterPosition' => 
                                  array (
                                    'description' => '参数位置，可选枚举值有：

- 0：Path
- 1：Query
- 2：Head
- 3：Body

向导和脚本API，只支持Query；注册API，GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head、Body。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ParameterDescription' => 
                                  array (
                                    'description' => '描述',
                                    'type' => 'string',
                                    'example' => 'description1',
                                  ),
                                  'DefaultValue' => 
                                  array (
                                    'description' => '默认值
',
                                    'type' => 'string',
                                    'example' => 'default1',
                                  ),
                                  'ParameterOperator' => 
                                  array (
                                    'description' => '运算符，可选枚举值有：

- 0：Equal
- 1：Like
- 2：Const
- 3：In

向导API支持Equal、Like、In；脚本API支持Equal；注册API支持Equal、Const。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ExampleValue' => 
                                  array (
                                    'description' => '示例值
',
                                    'type' => 'string',
                                    'example' => 'example1',
                                  ),
                                  'ParameterDataType' => 
                                  array (
                                    'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'IsRequiredParameter' => 
                                  array (
                                    'description' => '是否必填
',
                                    'type' => 'boolean',
                                    'example' => 'true',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                        'ScriptDetails' => 
                        array (
                          'description' => '脚本API详情，只有脚本API返回。
',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'IsPagedResponse' => 
                            array (
                              'description' => '返回是否分页
',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                            'SuccessfulResultSample' => 
                            array (
                              'description' => '正常返回示例
',
                              'type' => 'string',
                              'example' => '{"success": true}',
                            ),
                            'FailedResultSample' => 
                            array (
                              'description' => '错误返回示例
',
                              'type' => 'string',
                              'example' => '{"success": false}',
                            ),
                            'Script' => 
                            array (
                              'description' => 'SQL脚本
',
                              'type' => 'string',
                              'example' => 'select a from t',
                            ),
                            'ScriptErrorCodes' => 
                            array (
                              'description' => '脚本API错误码列表
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ErrorMessage' => 
                                  array (
                                    'description' => '错误信息
',
                                    'type' => 'string',
                                    'example' => 'fail to call',
                                  ),
                                  'ErrorCode' => 
                                  array (
                                    'description' => '错误码
',
                                    'type' => 'string',
                                    'example' => '1001',
                                  ),
                                  'ErrorSolution' => 
                                  array (
                                    'description' => '错误解决方案
',
                                    'type' => 'string',
                                    'example' => 'retry',
                                  ),
                                ),
                              ),
                            ),
                            'ScriptRequestParameters' => 
                            array (
                              'description' => '脚本API请求参数列表
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ParameterName' => 
                                  array (
                                    'description' => '参数名称
',
                                    'type' => 'string',
                                    'example' => 'param1',
                                  ),
                                  'ParameterPosition' => 
                                  array (
                                    'description' => '参数位置，可选枚举值有：

- 0：Path
- 1：Query
- 2：Head
- 3：Body

向导和脚本API，只支持Query；注册API，GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head、Body。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ParameterDescription' => 
                                  array (
                                    'description' => '描述
',
                                    'type' => 'string',
                                    'example' => 'description1',
                                  ),
                                  'DefaultValue' => 
                                  array (
                                    'description' => '默认值
',
                                    'type' => 'string',
                                    'example' => 'default1',
                                  ),
                                  'ParameterOperator' => 
                                  array (
                                    'description' => '运算符，可选枚举值有：

- 0：Equal
- 1：Like
- 2：Const
- 3：In

向导API支持Equal、Like、In；脚本API支持Equal；注册API支持Equal、Const。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ExampleValue' => 
                                  array (
                                    'description' => '示例值
',
                                    'type' => 'string',
                                    'example' => 'example1',
                                  ),
                                  'ParameterDataType' => 
                                  array (
                                    'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean

高级脚本还有以下数据类型：

- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'IsRequiredParameter' => 
                                  array (
                                    'description' => '是否必填
',
                                    'type' => 'boolean',
                                    'example' => 'true',
                                  ),
                                ),
                              ),
                            ),
                            'ScriptResponseParameters' => 
                            array (
                              'description' => '脚本API返回参数列表
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ParameterDescription' => 
                                  array (
                                    'description' => '描述
',
                                    'type' => 'string',
                                    'example' => 'description2',
                                  ),
                                  'ParameterName' => 
                                  array (
                                    'description' => '参数名称
',
                                    'type' => 'string',
                                    'example' => 'param2',
                                  ),
                                  'ExampleValue' => 
                                  array (
                                    'description' => '示例值
',
                                    'type' => 'string',
                                    'example' => 'example2',
                                  ),
                                  'ParameterDataType' => 
                                  array (
                                    'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                ),
                              ),
                            ),
                            'ScriptConnection' => 
                            array (
                              'description' => '脚本API数据源信息
',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'TableName' => 
                                array (
                                  'description' => '数据源表名
',
                                  'type' => 'string',
                                  'example' => 't',
                                ),
                                'ConnectionId' => 
                                array (
                                  'description' => '数据源ID
',
                                  'type' => 'integer',
                                  'format' => 'int64',
                                  'example' => '123',
                                ),
                              ),
                            ),
                          ),
                        ),
                        'WizardDetails' => 
                        array (
                          'description' => '向导API详情，只有向导API返回。
',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'IsPagedResponse' => 
                            array (
                              'description' => '返回是否分页。
',
                              'type' => 'boolean',
                              'example' => 'true',
                            ),
                            'SuccessfulResultSample' => 
                            array (
                              'description' => '正常返回示例。
',
                              'type' => 'string',
                              'example' => '{"success": true}',
                            ),
                            'FailedResultSample' => 
                            array (
                              'description' => '错误返回示例。
',
                              'type' => 'string',
                              'example' => '{"success": false}',
                            ),
                            'WizardErrorCodes' => 
                            array (
                              'description' => '向导API的错误码列表。
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ErrorMessage' => 
                                  array (
                                    'description' => '错误信息。
',
                                    'type' => 'string',
                                    'example' => 'fail to call',
                                  ),
                                  'ErrorCode' => 
                                  array (
                                    'description' => '错误码。
',
                                    'type' => 'string',
                                    'example' => '1001',
                                  ),
                                  'ErrorSolution' => 
                                  array (
                                    'description' => '错误解决方案。
',
                                    'type' => 'string',
                                    'example' => 'retry',
                                  ),
                                ),
                              ),
                            ),
                            'WizardRequestParameters' => 
                            array (
                              'description' => '向导API的请求参数列表。
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ParameterName' => 
                                  array (
                                    'description' => '参数的名称。
',
                                    'type' => 'string',
                                    'example' => 'param1',
                                  ),
                                  'ParameterPosition' => 
                                  array (
                                    'description' => '参数的位置，可选枚举值包括0（Path）、1（Query）、2（Head）和3（Body）。向导和脚本API仅支持Query。注册API中的GET、DELETE方法支持Query、Head，PUT、POST方法支持Query、Head和Body。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ParameterDescription' => 
                                  array (
                                    'description' => '描述信息。',
                                    'type' => 'string',
                                    'example' => 'description1',
                                  ),
                                  'DefaultValue' => 
                                  array (
                                    'description' => '默认值。
',
                                    'type' => 'string',
                                    'example' => 'default1',
                                  ),
                                  'ParameterOperator' => 
                                  array (
                                    'description' => '运算符，可选枚举值包括0（Equal）、1（Like）、2（Const）和3（In）。向导模式API支持Equal、Like和In，脚本模式API支持Equal，注册API支持Equal和Const。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'ExampleValue' => 
                                  array (
                                    'description' => '示例值。
',
                                    'type' => 'string',
                                    'example' => 'example1',
                                  ),
                                  'ParameterDataType' => 
                                  array (
                                    'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'IsRequiredParameter' => 
                                  array (
                                    'description' => '是否必填。
',
                                    'type' => 'boolean',
                                    'example' => 'true',
                                  ),
                                ),
                              ),
                            ),
                            'WizardResponseParameters' => 
                            array (
                              'description' => '向导API的返回参数列表。
',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'ParameterDescription' => 
                                  array (
                                    'description' => '描述信息。',
                                    'type' => 'string',
                                    'example' => 'description2',
                                  ),
                                  'ParameterName' => 
                                  array (
                                    'description' => '参数的名称。
',
                                    'type' => 'string',
                                    'example' => 'param2',
                                  ),
                                  'ExampleValue' => 
                                  array (
                                    'description' => '示例值。
',
                                    'type' => 'string',
                                    'example' => 'example2',
                                  ),
                                  'ParameterDataType' => 
                                  array (
                                    'description' => '数据类型，可选枚举值：

- 0：String
- 1：Int
- 2：Long
- 3：Float
- 4：Double
- 5：Boolean
- 6：StringList
- 7：IntList
- 8：LongList
- 9：FloatList
- 10：DoubleList
- 11：BooleanList',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                ),
                              ),
                            ),
                            'WizardConnection' => 
                            array (
                              'description' => '向导API的数据源信息。
',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'TableName' => 
                                array (
                                  'description' => '数据源的表名称。
',
                                  'type' => 'string',
                                  'example' => 't',
                                ),
                                'ConnectionId' => 
                                array (
                                  'description' => '数据源ID。
',
                                  'type' => 'integer',
                                  'format' => 'int64',
                                  'example' => '123',
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Apis\\": [\\n      {\\n        \\"Timeout\\": 10000,\\n        \\"Status\\": 1,\\n        \\"ApiId\\": 10002,\\n        \\"ApiMode\\": 0,\\n        \\"ProjectId\\": 10000,\\n        \\"ResponseContentType\\": 0,\\n        \\"CreatorId\\": \\"1234567\\",\\n        \\"VisibleRange\\": 0,\\n        \\"ModifiedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n        \\"OperatorId\\": \\"2345678\\",\\n        \\"GroupId\\": \\"ab123\\",\\n        \\"Description\\": \\"测试API描述\\",\\n        \\"RequestMethod\\": 0,\\n        \\"CreatedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n        \\"ApiName\\": \\"我的API名称\\",\\n        \\"TenantId\\": 10001,\\n        \\"ApiPath\\": \\"/test/1\\",\\n        \\"Protocols\\": [\\n          0\\n        ],\\n        \\"RegistrationDetails\\": {\\n          \\"ServiceHost\\": \\"http://www.abc.com\\",\\n          \\"ServiceContentType\\": 0,\\n          \\"ServicePath\\": \\"/index\\",\\n          \\"SuccessfulResultSample\\": \\"{\\\\\\"success\\\\\\": true}\\",\\n          \\"FailedResultSample\\": \\"{\\\\\\"success\\\\\\": false}\\",\\n          \\"ServiceRequestBodyDescription\\": \\"{\\\\\\"abc\\\\\\":1}\\",\\n          \\"RegistrationErrorCodes\\": [\\n            {\\n              \\"ErrorMessage\\": \\"fail to call\\",\\n              \\"ErrorCode\\": \\"1001\\",\\n              \\"ErrorSolution\\": \\"retry\\"\\n            }\\n          ],\\n          \\"RegistrationRequestParameters\\": [\\n            {\\n              \\"ParameterName\\": \\"name1\\",\\n              \\"ParameterPosition\\": 0,\\n              \\"ParameterDescription\\": \\"description1\\",\\n              \\"DefaultValue\\": \\"default1\\",\\n              \\"ParameterOperator\\": 0,\\n              \\"ExampleValue\\": \\"example1\\",\\n              \\"ParameterDataType\\": 0,\\n              \\"IsRequiredParameter\\": true\\n            }\\n          ]\\n        },\\n        \\"ScriptDetails\\": {\\n          \\"IsPagedResponse\\": true,\\n          \\"SuccessfulResultSample\\": \\"{\\\\\\"success\\\\\\": true}\\",\\n          \\"FailedResultSample\\": \\"{\\\\\\"success\\\\\\": false}\\",\\n          \\"Script\\": \\"select a from t\\",\\n          \\"ScriptErrorCodes\\": [\\n            {\\n              \\"ErrorMessage\\": \\"fail to call\\",\\n              \\"ErrorCode\\": \\"1001\\",\\n              \\"ErrorSolution\\": \\"retry\\"\\n            }\\n          ],\\n          \\"ScriptRequestParameters\\": [\\n            {\\n              \\"ParameterName\\": \\"param1\\",\\n              \\"ParameterPosition\\": 0,\\n              \\"ParameterDescription\\": \\"description1\\",\\n              \\"DefaultValue\\": \\"default1\\",\\n              \\"ParameterOperator\\": 0,\\n              \\"ExampleValue\\": \\"example1\\",\\n              \\"ParameterDataType\\": 0,\\n              \\"IsRequiredParameter\\": true\\n            }\\n          ],\\n          \\"ScriptResponseParameters\\": [\\n            {\\n              \\"ParameterDescription\\": \\"description2\\",\\n              \\"ParameterName\\": \\"param2\\",\\n              \\"ExampleValue\\": \\"example2\\",\\n              \\"ParameterDataType\\": 0\\n            }\\n          ],\\n          \\"ScriptConnection\\": {\\n            \\"TableName\\": \\"t\\",\\n            \\"ConnectionId\\": 123\\n          }\\n        },\\n        \\"WizardDetails\\": {\\n          \\"IsPagedResponse\\": true,\\n          \\"SuccessfulResultSample\\": \\"{\\\\\\"success\\\\\\": true}\\",\\n          \\"FailedResultSample\\": \\"{\\\\\\"success\\\\\\": false}\\",\\n          \\"WizardErrorCodes\\": [\\n            {\\n              \\"ErrorMessage\\": \\"fail to call\\",\\n              \\"ErrorCode\\": \\"1001\\",\\n              \\"ErrorSolution\\": \\"retry\\"\\n            }\\n          ],\\n          \\"WizardRequestParameters\\": [\\n            {\\n              \\"ParameterName\\": \\"param1\\",\\n              \\"ParameterPosition\\": 0,\\n              \\"ParameterDescription\\": \\"description1\\",\\n              \\"DefaultValue\\": \\"default1\\",\\n              \\"ParameterOperator\\": 0,\\n              \\"ExampleValue\\": \\"example1\\",\\n              \\"ParameterDataType\\": 0,\\n              \\"IsRequiredParameter\\": true\\n            }\\n          ],\\n          \\"WizardResponseParameters\\": [\\n            {\\n              \\"ParameterDescription\\": \\"description2\\",\\n              \\"ParameterName\\": \\"param2\\",\\n              \\"ExampleValue\\": \\"example2\\",\\n              \\"ParameterDataType\\": 0\\n            }\\n          ],\\n          \\"WizardConnection\\": {\\n            \\"TableName\\": \\"t\\",\\n            \\"ConnectionId\\": 123\\n          }\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListDataServicePublishedApisResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Apis>\\n            <Timeout>10000</Timeout>\\n            <Status>1</Status>\\n            <ApiId>10002</ApiId>\\n            <ApiMode>0</ApiMode>\\n            <ProjectId>10000</ProjectId>\\n            <ResponseContentType>0</ResponseContentType>\\n            <CreatorId>1234567</CreatorId>\\n            <VisibleRange>0</VisibleRange>\\n            <ModifiedTime>2020-06-23T00:21:01+0800</ModifiedTime>\\n            <OperatorId>2345678</OperatorId>\\n            <GroupId>ab123</GroupId>\\n            <Description>测试API描述</Description>\\n            <RequestMethod>0</RequestMethod>\\n            <CreatedTime>2020-06-23T00:21:01+0800</CreatedTime>\\n            <ApiName>我的API名称</ApiName>\\n            <TenantId>10001</TenantId>\\n            <ApiPath>/test/1</ApiPath>\\n            <Protocols>0</Protocols>\\n            <RegistrationDetails>\\n                <ServiceHost>http://www.abc.com</ServiceHost>\\n                <ServiceContentType>0</ServiceContentType>\\n                <ServicePath>/index</ServicePath>\\n                <SuccessfulResultSample>{\\"success\\": true}</SuccessfulResultSample>\\n                <FailedResultSample>{\\"success\\": false}</FailedResultSample>\\n                <ServiceRequestBodyDescription>{\\"abc\\":1}</ServiceRequestBodyDescription>\\n                <RegistrationErrorCodes>\\n                    <ErrorMessage>fail to call</ErrorMessage>\\n                    <ErrorCode>1001</ErrorCode>\\n                    <ErrorSolution>retry</ErrorSolution>\\n                </RegistrationErrorCodes>\\n                <RegistrationRequestParameters>\\n                    <ParameterName>name1</ParameterName>\\n                    <ParameterPosition>0</ParameterPosition>\\n                    <ParameterDescription>description1</ParameterDescription>\\n                    <DefaultValue>default1</DefaultValue>\\n                    <ParameterOperator>0</ParameterOperator>\\n                    <ExampleValue>example1</ExampleValue>\\n                    <ParameterDataType>0</ParameterDataType>\\n                    <IsRequiredParameter>true</IsRequiredParameter>\\n                </RegistrationRequestParameters>\\n            </RegistrationDetails>\\n            <ScriptDetails>\\n                <IsPagedResponse>true</IsPagedResponse>\\n                <SuccessfulResultSample>{\\"success\\": true}</SuccessfulResultSample>\\n                <FailedResultSample>{\\"success\\": false}</FailedResultSample>\\n                <Script>select a from t</Script>\\n                <ScriptErrorCodes>\\n                    <ErrorMessage>fail to call</ErrorMessage>\\n                    <ErrorCode>1001</ErrorCode>\\n                    <ErrorSolution>retry</ErrorSolution>\\n                </ScriptErrorCodes>\\n                <ScriptRequestParameters>\\n                    <ParameterName>param1</ParameterName>\\n                    <ParameterPosition>0</ParameterPosition>\\n                    <ParameterDescription>description1</ParameterDescription>\\n                    <DefaultValue>default1</DefaultValue>\\n                    <ParameterOperator>0</ParameterOperator>\\n                    <ExampleValue>example1</ExampleValue>\\n                    <ParameterDataType>0</ParameterDataType>\\n                    <IsRequiredParameter>true</IsRequiredParameter>\\n                </ScriptRequestParameters>\\n                <ScriptResponseParameters>\\n                    <ParameterDescription>description2</ParameterDescription>\\n                    <ParameterName>param2</ParameterName>\\n                    <ExampleValue>example2</ExampleValue>\\n                    <ParameterDataType>0</ParameterDataType>\\n                </ScriptResponseParameters>\\n                <ScriptConnection>\\n                    <TableName>t</TableName>\\n                    <ConnectionId>123</ConnectionId>\\n                </ScriptConnection>\\n            </ScriptDetails>\\n            <WizardDetails>\\n                <IsPagedResponse>true</IsPagedResponse>\\n                <SuccessfulResultSample>{\\"success\\": true}</SuccessfulResultSample>\\n                <FailedResultSample>{\\"success\\": false}</FailedResultSample>\\n                <WizardErrorCodes>\\n                    <ErrorMessage>fail to call</ErrorMessage>\\n                    <ErrorCode>1001</ErrorCode>\\n                    <ErrorSolution>retry</ErrorSolution>\\n                </WizardErrorCodes>\\n                <WizardRequestParameters>\\n                    <ParameterName>param1</ParameterName>\\n                    <ParameterPosition>0</ParameterPosition>\\n                    <ParameterDescription>description1</ParameterDescription>\\n                    <DefaultValue>default1</DefaultValue>\\n                    <ParameterOperator>0</ParameterOperator>\\n                    <ExampleValue>example1</ExampleValue>\\n                    <ParameterDataType>0</ParameterDataType>\\n                    <IsRequiredParameter>true</IsRequiredParameter>\\n                </WizardRequestParameters>\\n                <WizardResponseParameters>\\n                    <ParameterDescription>description2</ParameterDescription>\\n                    <ParameterName>param2</ParameterName>\\n                    <ExampleValue>example2</ExampleValue>\\n                    <ParameterDataType>0</ParameterDataType>\\n                </WizardResponseParameters>\\n                <WizardConnection>\\n                    <TableName>t</TableName>\\n                    <ConnectionId>123</ConnectionId>\\n                </WizardConnection>\\n            </WizardDetails>\\n        </Apis>\\n    </Data>\\n</ListDataServicePublishedApisResponse>","errorExample":""}]',
      'title' => '获取数据服务API的发布态信息列表',
      'summary' => '调用ListDataServicePublishedApis获取数据服务API的发布态信息列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' 不同类型API的详情信息通过不同字段返回。向导API使用WizardDetails字段，脚本API使用ScriptDetails字段，注册API使用RegistrationDetails字段。
',
      'extraInfo' => ' ',
    ),
    'ListDataServiceApiAuthorities' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78300',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码，从1开始，默认值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '50',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => ' 该字段已废弃。租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10001',
          ),
        ),
        4 => 
        array (
          'name' => 'ApiNameKeyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API名称的关键词，通过过滤获取API名称包含该关键词的API。',
            'type' => 'string',
            'required' => false,
            'example' => '我的API名称',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '正常',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'Boolean',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '0',
              ),
              'Data' => 
              array (
                'description' => '授权给他人的API列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码，和请求中的PageNumber一致。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'ApiAuthorizationList' => 
                  array (
                    'description' => '返回数据结构。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结构。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ApiStatus' => 
                        array (
                          'description' => 'API的状态，可选枚举值包括0（未发布）和1（已发布）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ApiId' => 
                        array (
                          'description' => 'API的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10002',
                        ),
                        'ModifiedTime' => 
                        array (
                          'description' => 'API的最近更新时间。',
                          'type' => 'string',
                          'example' => '2020-06-23T00:21:01+0800',
                        ),
                        'GroupId' => 
                        array (
                          'description' => '分组ID。',
                          'type' => 'string',
                          'example' => 'ab123',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                        'CreatorId' => 
                        array (
                          'description' => 'API负责人的阿里云ID。',
                          'type' => 'string',
                          'example' => '12345',
                        ),
                        'CreatedTime' => 
                        array (
                          'description' => 'API的创建时间。',
                          'type' => 'string',
                          'example' => '2020-06-23T00:21:01+0800',
                        ),
                        'ApiName' => 
                        array (
                          'description' => 'API的名称。',
                          'type' => 'string',
                          'example' => '我的API名称',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '租户ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10001',
                        ),
                        'ApiPath' => 
                        array (
                          'description' => 'API的路径。',
                          'type' => 'string',
                          'example' => '/test/1',
                        ),
                        'AuthorizationRecords' => 
                        array (
                          'description' => '授权给他人的授权详情列表。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '返回数据结构。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'EndTime' => 
                              array (
                                'description' => '授权有效期的截止时间。',
                                'type' => 'string',
                                'example' => '2020-06-24T00:21:01+0800',
                              ),
                              'CreatorId' => 
                              array (
                                'description' => 'API负责人的阿里云ID。',
                                'type' => 'string',
                                'example' => '12345',
                              ),
                              'CreatedTime' => 
                              array (
                                'description' => '授权时间。',
                                'type' => 'string',
                                'example' => '2020-06-23T00:21:01+0800',
                              ),
                              'ProjectId' => 
                              array (
                                'description' => '获得授权的工作空间ID。',
                                'type' => 'integer',
                                'format' => 'int64',
                                'example' => '10004',
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"正常\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"0\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"ApiAuthorizationList\\": [\\n      {\\n        \\"ApiStatus\\": 0,\\n        \\"ApiId\\": 10002,\\n        \\"ModifiedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n        \\"GroupId\\": \\"ab123\\",\\n        \\"ProjectId\\": 10000,\\n        \\"CreatorId\\": \\"12345\\",\\n        \\"CreatedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n        \\"ApiName\\": \\"我的API名称\\",\\n        \\"TenantId\\": 10001,\\n        \\"ApiPath\\": \\"/test/1\\",\\n        \\"AuthorizationRecords\\": [\\n          {\\n            \\"EndTime\\": \\"2020-06-24T00:21:01+0800\\",\\n            \\"CreatorId\\": \\"12345\\",\\n            \\"CreatedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n            \\"ProjectId\\": 10004\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListDataServiceApiAuthoritiesResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>正常</ErrorMessage>\\n    <Success>false</Success>\\n    <ErrorCode>0</ErrorCode>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <ApiAuthorizationList>\\n            <ApiStatus>0</ApiStatus>\\n            <ApiId>10002</ApiId>\\n            <ModifiedTime>2020-06-23T00:21:01+0800</ModifiedTime>\\n            <GroupId>ab123</GroupId>\\n            <ProjectId>10000</ProjectId>\\n            <CreatorId>12345</CreatorId>\\n            <CreatedTime>2020-06-23T00:21:01+0800</CreatedTime>\\n            <ApiName>我的API名称</ApiName>\\n            <TenantId>10001</TenantId>\\n            <ApiPath>/test/1</ApiPath>\\n            <AuthorizationRecords>\\n                <EndTime>2020-06-24T00:21:01+0800</EndTime>\\n                <CreatorId>12345</CreatorId>\\n                <CreatedTime>2020-06-23T00:21:01+0800</CreatedTime>\\n                <ProjectId>10004</ProjectId>\\n            </AuthorizationRecords>\\n        </ApiAuthorizationList>\\n    </Data>\\n</ListDataServiceApiAuthoritiesResponse>","errorExample":""}]',
      'title' => '获取授权给他人的API列表',
      'summary' => '调用ListDataServiceApiAuthorities获取授权给他人的API列表。',
    ),
    'ListDataServiceAuthorizedApis' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78303',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码，从1开始，默认值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'minimum' => '1',
            'example' => 'PageNumber',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '50',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '该字段已废弃。租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10001',
          ),
        ),
        4 => 
        array (
          'name' => 'ApiNameKeyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API名称的关键词，通过过滤获取API名称包含该关键词的API。',
            'type' => 'string',
            'required' => false,
            'example' => '我的API名称',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Data' => 
              array (
                'description' => '获得授权的API信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码，和请求中的PageNumber一致。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'ApiAuthorizedList' => 
                  array (
                    'description' => '获得授权的API列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ApiId' => 
                        array (
                          'description' => 'API的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10002',
                        ),
                        'ApiStatus' => 
                        array (
                          'description' => 'API的状态，可选枚举值包括0（未发布）和1（已发布）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'GrantOperatorId' => 
                        array (
                          'description' => '授权者的阿里云ID。',
                          'type' => 'string',
                          'example' => '23456',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                        'CreatorId' => 
                        array (
                          'description' => 'API负责人阿里云ID',
                          'type' => 'string',
                          'example' => '12345',
                        ),
                        'GrantEndTime' => 
                        array (
                          'description' => 'API的授权到期时间。',
                          'type' => 'string',
                          'example' => '2020-06-24T00:21:01+0800',
                        ),
                        'ModifiedTime' => 
                        array (
                          'description' => 'API的最近更新时间。',
                          'type' => 'string',
                          'example' => '2020-06-23T00:21:01+0800',
                        ),
                        'GroupId' => 
                        array (
                          'description' => '分组ID。',
                          'type' => 'string',
                          'example' => 'abcde123456789',
                        ),
                        'GrantCreatedTime' => 
                        array (
                          'description' => 'API的授权时间。',
                          'type' => 'string',
                          'example' => '2020-06-23T00:21:01+0800',
                        ),
                        'CreatedTime' => 
                        array (
                          'description' => 'API的创建时间。',
                          'type' => 'string',
                          'example' => '2020-06-23T00:21:01+0800',
                        ),
                        'ApiName' => 
                        array (
                          'description' => 'API的名称。',
                          'type' => 'string',
                          'example' => '我的API名称',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '租户ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10001',
                        ),
                        'ApiPath' => 
                        array (
                          'description' => 'API的路径。',
                          'type' => 'string',
                          'example' => '/test/1',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"ApiAuthorizedList\\": [\\n      {\\n        \\"ApiId\\": 10002,\\n        \\"ApiStatus\\": 0,\\n        \\"GrantOperatorId\\": \\"23456\\",\\n        \\"ProjectId\\": 10000,\\n        \\"CreatorId\\": \\"12345\\",\\n        \\"GrantEndTime\\": \\"2020-06-24T00:21:01+0800\\",\\n        \\"ModifiedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n        \\"GroupId\\": \\"abcde123456789\\",\\n        \\"GrantCreatedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n        \\"CreatedTime\\": \\"2020-06-23T00:21:01+0800\\",\\n        \\"ApiName\\": \\"我的API名称\\",\\n        \\"TenantId\\": 10001,\\n        \\"ApiPath\\": \\"/test/1\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListDataServiceAuthorizedApisResponse>\\n    <Data>\\n        <ApiAuthorizedList/>\\n    </Data>\\n</ListDataServiceAuthorizedApisResponse>","errorExample":""}]',
      'title' => '获取获得授权的API信息列表',
      'summary' => '调用ListDataServiceAuthorizedApis获取获得授权的API信息列表。',
    ),
    'AbolishDataServiceApi' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78165',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10002',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10001',
          ),
        ),
        2 => 
        array (
          'name' => 'ApiId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据服务API的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '数据服务API是否下线成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<AbolishDataServiceApiResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</AbolishDataServiceApiResponse>","errorExample":""}]',
      'title' => '下线数据服务API',
      'summary' => '调用AbolishDataServiceApi下线数据服务API。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetDataServiceApplication' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78236',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '10002',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10001',
          ),
        ),
        2 => 
        array (
          'name' => 'ApplicationId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'App的ID，可在API网关控制台上查看应用信息。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '正常',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '0',
              ),
              'Data' => 
              array (
                'description' => 'App详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'ApplicationCode' => 
                  array (
                    'description' => 'API调用认证方式一，简单身份认证中的AppCode。
',
                    'type' => 'string',
                    'example' => 'CODE123',
                  ),
                  'ApplicationKey' => 
                  array (
                    'description' => 'API调用认证方式二，加密签名身份认证中的AppKey。',
                    'type' => 'string',
                    'example' => 'KEY123',
                  ),
                  'ApplicationSecret' => 
                  array (
                    'description' => 'API调用认证方式二，加密签名身份认证中的AppSecret。',
                    'type' => 'string',
                    'example' => 'SECRET123',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '关联工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10001',
                  ),
                  'ApplicationName' => 
                  array (
                    'description' => '应用名称。',
                    'type' => 'string',
                    'example' => '测试应用',
                  ),
                  'ApplicationId' => 
                  array (
                    'description' => 'App的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10000',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"ErrorMessage\\": \\"正常\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"0\\",\\n  \\"Data\\": {\\n    \\"ApplicationCode\\": \\"CODE123\\",\\n    \\"ApplicationKey\\": \\"KEY123\\",\\n    \\"ApplicationSecret\\": \\"SECRET123\\",\\n    \\"ProjectId\\": 10001,\\n    \\"ApplicationName\\": \\"测试应用\\",\\n    \\"ApplicationId\\": 10000\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDataServiceApplicationResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <ErrorMessage>正常</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>0</ErrorCode>\\n    <Data>\\n        <ApplicationCode>CODE123</ApplicationCode>\\n        <ApplicationKey>KEY123</ApplicationKey>\\n        <ApplicationSecret>SECRET123</ApplicationSecret>\\n        <ProjectId>10001</ProjectId>\\n        <ApplicationName>测试应用</ApplicationName>\\n        <ApplicationId>10000</ApplicationId>\\n    </Data>\\n</GetDataServiceApplicationResponse>","errorExample":""}]',
      'title' => '查询数据服务App的详情',
      'summary' => '调用GetDataServiceApplication查询数据服务App的详情。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => 'ApplicationCode或ApplicationSecre参数的泄露会威胁您数据服务API资源的安全，本OpenAPI会对ApplicationCode和ApplicationSecre参数进行脱敏后再返回。',
      'extraInfo' => ' ',
    ),
    'ListDataServiceApplications' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78302',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码，从1开始，默认值为1。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '50',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectIdList',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '指定工作空间ID查询应用。支持多值，多值之间使用英文逗号（,）分隔。最少指定1个工作空间ID，最多指定50个工作空间ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '10000,100001',
          ),
        ),
        3 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'example' => '100002',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG***',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => '正常',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。
',
                'type' => 'string',
                'example' => '0',
              ),
              'Data' => 
              array (
                'description' => '查询得到的应用基础信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码，和请求中的PageNumber一致。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '总记录数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Applications' => 
                  array (
                    'description' => '应用的基础信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ApplicationName' => 
                        array (
                          'description' => '应用的名称。',
                          'type' => 'string',
                          'example' => '我的应用',
                        ),
                        'ApplicationId' => 
                        array (
                          'description' => '应用ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '20000',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10000',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-EFG***\\",\\n  \\"ErrorMessage\\": \\"正常\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"0\\",\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Applications\\": [\\n      {\\n        \\"ApplicationName\\": \\"我的应用\\",\\n        \\"ApplicationId\\": 20000,\\n        \\"ProjectId\\": 10000\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListDataServiceApplicationsResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>0000-ABCD-EFG***</RequestId>\\n    <ErrorMessage>正常</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>0</ErrorCode>\\n    <Data>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Applications>\\n            <ApplicationName>我的应用</ApplicationName>\\n            <ApplicationId>20000</ApplicationId>\\n            <ProjectId>10000</ProjectId>\\n        </Applications>\\n    </Data>\\n</ListDataServiceApplicationsResponse>","errorExample":""}]',
      'title' => '获取数据服务应用的基础信息列表',
      'summary' => '调用ListDataServiceApplications获取数据服务应用的基础信息列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateDataServiceFolder' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10002',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10001',
          ),
        ),
        2 => 
        array (
          'name' => 'FolderName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '测试文件夹',
          ),
        ),
        3 => 
        array (
          'name' => 'ParentId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹的目标父文件夹ID。业务流程根文件夹ID等于0，用户创建的文件夹ID大于0。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '0',
            'example' => '0',
          ),
        ),
        4 => 
        array (
          'name' => 'GroupId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹的目标业务流程ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1000abcd',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'FolderId' => 
              array (
                'description' => '创建的文件夹ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '123',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"FolderId\\": 123,\\n  \\"RequestId\\": \\"0000-ABCD-E****\\"\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-E****</RequestId>\\n<FolderId>123</FolderId>","errorExample":""}]',
      'title' => '创建数据服务文件夹',
      'summary' => '调用CreateDataServiceFolder创建数据服务文件夹。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetDataServiceFolder' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78237',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '该字段已废弃。租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10003',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10002',
          ),
        ),
        2 => 
        array (
          'name' => 'FolderId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EF****',
              ),
              'Folder' => 
              array (
                'description' => '文件夹详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'ParentId' => 
                  array (
                    'description' => '父文件夹ID。业务流程下根文件夹ID等于0，用户创建文件夹ID大于0。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '0',
                  ),
                  'ModifiedTime' => 
                  array (
                    'description' => '文件夹的编辑时间。',
                    'type' => 'string',
                    'example' => '2020-09-24T18:37:51+0800',
                  ),
                  'GroupId' => 
                  array (
                    'description' => '文件夹所属业务流程的ID。',
                    'type' => 'string',
                    'example' => 'ds_1234',
                  ),
                  'FolderId' => 
                  array (
                    'description' => '文件夹的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '11',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10001',
                  ),
                  'FolderName' => 
                  array (
                    'description' => '文件夹的名称。',
                    'type' => 'string',
                    'example' => 'test1',
                  ),
                  'CreatedTime' => 
                  array (
                    'description' => '文件夹的创建时间。',
                    'type' => 'string',
                    'example' => '2020-09-24T18:37:51+0800',
                  ),
                  'TenantId' => 
                  array (
                    'description' => '租户ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10002',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EF****\\",\\n  \\"Folder\\": {\\n    \\"ParentId\\": 0,\\n    \\"ModifiedTime\\": \\"2020-09-24T18:37:51+0800\\",\\n    \\"GroupId\\": \\"ds_1234\\",\\n    \\"FolderId\\": 11,\\n    \\"ProjectId\\": 10001,\\n    \\"FolderName\\": \\"test1\\",\\n    \\"CreatedTime\\": \\"2020-09-24T18:37:51+0800\\",\\n    \\"TenantId\\": 10002\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDataServiceFolderResponse>\\n    <RequestId>0000-ABCD-EF****</RequestId>\\n    <Folder>\\n        <ParentId>0</ParentId>\\n        <ModifiedTime>2020-09-24T18:37:51+0800</ModifiedTime>\\n        <GroupId>ds_1234</GroupId>\\n        <FolderId>11</FolderId>\\n        <ProjectId>10001</ProjectId>\\n        <FolderName>test1</FolderName>\\n        <CreatedTime>2020-09-24T18:37:51+0800</CreatedTime>\\n        <TenantId>10002</TenantId>\\n    </Folder>\\n</GetDataServiceFolderResponse>","errorExample":""}]',
      'title' => '查询数据服务文件夹',
      'summary' => '调用GetDataServiceFolder查询数据服务文件夹。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListDataServiceFolders' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78304',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码，从1开始。默认值为1。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '2147483647',
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '50',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10001',
          ),
        ),
        3 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10002',
          ),
        ),
        4 => 
        array (
          'name' => 'GroupId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '指定文件夹所属业务流程的ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'ds_123abc',
          ),
        ),
        5 => 
        array (
          'name' => 'FolderNameKeyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件夹名称关键词，可以进行子串匹配。',
            'type' => 'string',
            'required' => false,
            'example' => '文件夹名称关键词',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EF****',
              ),
              'FolderPagingResult' => 
              array (
                'description' => '文件夹列表的分页结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码，和请求中的PageNumber一致。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '总记录数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Folders' => 
                  array (
                    'description' => '文件夹列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ParentId' => 
                        array (
                          'description' => '父文件夹的ID。业务流程下根文件夹ID等于0，用户创建文件夹ID大于0。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'ModifiedTime' => 
                        array (
                          'description' => '文件夹的编辑时间。
',
                          'type' => 'string',
                          'example' => '2020-09-24T18:37:51+0800',
                        ),
                        'GroupId' => 
                        array (
                          'description' => '文件夹所属业务流程的ID。
',
                          'type' => 'string',
                          'example' => 'ds_1234',
                        ),
                        'FolderId' => 
                        array (
                          'description' => '文件夹的ID。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '11',
                        ),
                        'FolderName' => 
                        array (
                          'description' => '文件夹的名称。
',
                          'type' => 'string',
                          'example' => 'test1',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10001',
                        ),
                        'CreatedTime' => 
                        array (
                          'description' => '文件夹的创建时间。
',
                          'type' => 'string',
                          'example' => '2020-09-24T18:37:51+0800',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '租户ID。
',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10002',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EF****\\",\\n  \\"FolderPagingResult\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Folders\\": [\\n      {\\n        \\"ParentId\\": 0,\\n        \\"ModifiedTime\\": \\"2020-09-24T18:37:51+0800\\",\\n        \\"GroupId\\": \\"ds_1234\\",\\n        \\"FolderId\\": 11,\\n        \\"FolderName\\": \\"test1\\",\\n        \\"ProjectId\\": 10001,\\n        \\"CreatedTime\\": \\"2020-09-24T18:37:51+0800\\",\\n        \\"TenantId\\": 10002\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListDataServiceFoldersResponse>\\n    <RequestId>0000-ABCD-EF****</RequestId>\\n    <FolderPagingResult>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Folders>\\n            <ParentId>0</ParentId>\\n            <ModifiedTime>2020-09-24T18:37:51+0800</ModifiedTime>\\n            <GroupId>ds_1234</GroupId>\\n            <FolderId>11</FolderId>\\n            <FolderName>test1</FolderName>\\n            <ProjectId>10001</ProjectId>\\n            <CreatedTime>2020-09-24T18:37:51+0800</CreatedTime>\\n            <TenantId>10002</TenantId>\\n        </Folders>\\n    </FolderPagingResult>\\n</ListDataServiceFoldersResponse>","errorExample":""}]',
      'title' => '查询数据服务文件夹列表',
      'summary' => '调用ListDataServiceFolders查询数据服务文件夹列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateDataServiceGroup' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78182',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '该字段已废弃。租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10002',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10001',
          ),
        ),
        2 => 
        array (
          'name' => 'ApiGatewayGroupId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程绑定的API网关分组ID，您可以进入API网关控制台分组详情页面进行查看。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1000abcd',
          ),
        ),
        3 => 
        array (
          'name' => 'GroupName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '业务流程名称',
          ),
        ),
        4 => 
        array (
          'name' => 'Description',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的描述。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '测试业务流程',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'GroupId' => 
              array (
                'description' => '创建的业务流程ID。',
                'type' => 'string',
                'example' => 'ds_12345',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EF****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"GroupId\\": \\"ds_12345\\",\\n  \\"RequestId\\": \\"0000-ABCD-EF****\\"\\n}","type":"json"}]',
      'title' => '创建数据服务业务流程',
      'summary' => '调用CreateDataServiceGroup创建数据服务业务流程。',
    ),
    'GetDataServiceGroup' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78238',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '该字段已废弃。租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10001',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10002',
          ),
        ),
        2 => 
        array (
          'name' => 'GroupId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程的ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ds_123abc',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '0000-ABCD-EF****',
              ),
              'Group' => 
              array (
                'description' => '业务流程详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'ModifiedTime' => 
                  array (
                    'description' => '编辑时间。',
                    'type' => 'string',
                    'example' => '2020-09-24T18:37:51+0800',
                  ),
                  'Description' => 
                  array (
                    'description' => '业务流程的描述。',
                    'type' => 'string',
                    'example' => '业务流程描述',
                  ),
                  'GroupName' => 
                  array (
                    'description' => '业务流程名称。',
                    'type' => 'string',
                    'example' => '业务流程名称',
                  ),
                  'GroupId' => 
                  array (
                    'description' => '业务流程ID。',
                    'type' => 'string',
                    'example' => 'ds_123abc',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '工作空间ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10002',
                  ),
                  'ApiGatewayGroupId' => 
                  array (
                    'description' => '业务流程绑定的API网关分组ID。',
                    'type' => 'string',
                    'example' => '100abc',
                  ),
                  'CreatorId' => 
                  array (
                    'description' => '	
创建人UID，部分历史业务流程创建人的UID可能为空。',
                    'type' => 'string',
                    'example' => '10001',
                  ),
                  'CreatedTime' => 
                  array (
                    'description' => '业务流程的创建时间。',
                    'type' => 'string',
                    'example' => '2020-09-24T18:37:51+0800',
                  ),
                  'TenantId' => 
                  array (
                    'description' => '租户ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10003',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EF****\\",\\n  \\"Group\\": {\\n    \\"ModifiedTime\\": \\"2020-09-24T18:37:51+0800\\",\\n    \\"Description\\": \\"业务流程描述\\",\\n    \\"GroupName\\": \\"业务流程名称\\",\\n    \\"GroupId\\": \\"ds_123abc\\",\\n    \\"ProjectId\\": 10002,\\n    \\"ApiGatewayGroupId\\": \\"100abc\\",\\n    \\"CreatorId\\": \\"10001\\",\\n    \\"CreatedTime\\": \\"2020-09-24T18:37:51+0800\\",\\n    \\"TenantId\\": 10003\\n  }\\n}","type":"json"}]',
      'title' => '查询数据服务业务流程',
      'summary' => '调用GetDataServiceGroup查询数据服务业务流程。',
    ),
    'ListDataServiceGroups' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78305',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide7T0EJX',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码，从1开始，默认值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '2147483647',
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '50',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        3 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '该字段已废弃。租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10001',
          ),
        ),
        4 => 
        array (
          'name' => 'GroupNameKeyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程名称关键词，可以进行子串匹配。',
            'type' => 'string',
            'required' => false,
            'example' => '测试业务流程',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。

',
                'type' => 'string',
                'example' => '0000-ABCD-EF****',
              ),
              'GroupPagingResult' => 
              array (
                'description' => '业务流程的分页结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码，和请求中的PageNumber一致。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Groups' => 
                  array (
                    'description' => '业务流程列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ModifiedTime' => 
                        array (
                          'description' => '业务流程的编辑时间。',
                          'type' => 'string',
                          'example' => '2020-09-24T18:37:51+0800',
                        ),
                        'Description' => 
                        array (
                          'description' => '业务流程的描述。',
                          'type' => 'string',
                          'example' => '业务流程描述',
                        ),
                        'GroupName' => 
                        array (
                          'description' => '业务流程名称。',
                          'type' => 'string',
                          'example' => '业务流程名称',
                        ),
                        'GroupId' => 
                        array (
                          'description' => '业务流程的ID。',
                          'type' => 'string',
                          'example' => 'ds_123abc',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10002',
                        ),
                        'ApiGatewayGroupId' => 
                        array (
                          'description' => '业务流程绑定的API网关分组ID。',
                          'type' => 'string',
                          'example' => '100abc',
                        ),
                        'CreatorId' => 
                        array (
                          'description' => '创建人UID，部分历史业务流程的创建人UID可能为空。',
                          'type' => 'string',
                          'example' => '10001',
                        ),
                        'CreatedTime' => 
                        array (
                          'description' => '业务流程的创建时间。',
                          'type' => 'string',
                          'example' => '2020-09-24T18:37:51+0800',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '租户ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '10003',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EF****\\",\\n  \\"GroupPagingResult\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Groups\\": [\\n      {\\n        \\"ModifiedTime\\": \\"2020-09-24T18:37:51+0800\\",\\n        \\"Description\\": \\"业务流程描述\\",\\n        \\"GroupName\\": \\"业务流程名称\\",\\n        \\"GroupId\\": \\"ds_123abc\\",\\n        \\"ProjectId\\": 10002,\\n        \\"ApiGatewayGroupId\\": \\"100abc\\",\\n        \\"CreatorId\\": \\"10001\\",\\n        \\"CreatedTime\\": \\"2020-09-24T18:37:51+0800\\",\\n        \\"TenantId\\": 10003\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListDataServiceGroupsResponse>\\n    <GroupPagingResult>\\n        <Groups/>\\n    </GroupPagingResult>\\n</ListDataServiceGroupsResponse>","errorExample":""}]',
      'title' => '查询数据服务业务流程列表',
      'summary' => '调用ListDataServiceGroups查询数据服务业务流程列表。',
    ),
    'CreateDataServiceApiAuthority' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78180',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideWDSR97',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '1004',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10003',
          ),
        ),
        2 => 
        array (
          'name' => 'ApiId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10001',
          ),
        ),
        3 => 
        array (
          'name' => 'AuthorizedProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '被授权的工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10002',
          ),
        ),
        4 => 
        array (
          'name' => 'EndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '授权有限期结束时间，Unix时间戳，单位为s。例如1600531564，代表北京时间2020-09-20 00:06:04。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '1600531564',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '授权是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EF****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0000-ABCD-EF****\\"\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFo****</RequestId>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '新增数据服务API授权',
      'summary' => '调用CreateDataServiceApiAuthority新增数据服务API授权。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteDataServiceApiAuthority' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78205',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideWDSR97',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => ' 该字段已废弃。租户的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10001',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10002',
          ),
        ),
        2 => 
        array (
          'name' => 'ApiId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10003',
          ),
        ),
        3 => 
        array (
          'name' => 'AuthorizedProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '被取消授权的工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '10004',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '取消授权是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '0000-ABCD-EF****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0000-ABCD-EF****\\"\\n}","type":"json"}]',
      'title' => '取消数据服务API授权',
      'summary' => '调用DeleteDataServiceApiAuthority取消数据服务API授权。',
    ),
    'ListDataServiceApiTest' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ApiId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '测试API Id',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12345',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页大小，最大100',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'description' => '返回消息',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求Id',
                'type' => 'string',
                'example' => 'ESDAFWEA',
              ),
              'Data' => 
              array (
                'description' => '数据列表',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '数据对象',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'TestId' => 
                    array (
                      'description' => '测试Id',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '123',
                    ),
                    'ApiId' => 
                    array (
                      'description' => '测试API Id',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '2343',
                    ),
                    'ParamMap' => 
                    array (
                      'description' => '测试API请求参数',
                      'type' => 'string',
                      'example' => '{"name":"test"}',
                    ),
                    'RetCode' => 
                    array (
                      'description' => '测试API返回code，如果未完成，该数据为空',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '0',
                    ),
                    'RetResult' => 
                    array (
                      'description' => '返回数据',
                      'type' => 'string',
                      'example' => '{"id":2}',
                    ),
                    'CostTime' => 
                    array (
                      'description' => 'API请求花费的时间',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '10',
                    ),
                    'Status' => 
                    array (
                      'description' => '任务是否已经完成，包含：RUNNING，FINISHED',
                      'type' => 'string',
                      'example' => 'FINISHED',
                    ),
                    'CreateTime' => 
                    array (
                      'description' => '任务创建时间',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1651824913000',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"ESDAFWEA\\",\\n  \\"Data\\": [\\n    {\\n      \\"TestId\\": 123,\\n      \\"ApiId\\": 2343,\\n      \\"ParamMap\\": \\"{\\\\\\"name\\\\\\":\\\\\\"test\\\\\\"}\\",\\n      \\"RetCode\\": 0,\\n      \\"RetResult\\": \\"{\\\\\\"id\\\\\\":2}\\",\\n      \\"CostTime\\": 10,\\n      \\"Status\\": \\"FINISHED\\",\\n      \\"CreateTime\\": 1651824913000\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<ListDataServiceApiTestResponse>\\n    <RequestId>ESDAFWEA</RequestId>\\n    <Data>\\n        <TestId>123</TestId>\\n        <ApiId>2343</ApiId>\\n        <ParamMap>{\\"name\\":\\"test\\"}</ParamMap>\\n        <RetCode>0</RetCode>\\n        <RetResult>{\\"id\\":2}</RetResult>\\n        <CostTime>10</CostTime>\\n        <Status>FINISHED</Status>\\n        <CreateTime>1651824913000</CreateTime>\\n    </Data>\\n</ListDataServiceApiTestResponse>","errorExample":""}]',
      'title' => '列出数据服务API测试记录',
      'summary' => '列出数据服务API测试记录，只能查询最近一个月数据。',
    ),
    'TestDataServiceApi' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ApiId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'API Id',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '12343',
          ),
        ),
        1 => 
        array (
          'name' => 'QueryParam',
          'in' => 'formData',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '放在Query里面的请求参数',
            'type' => 'array',
            'items' => 
            array (
              'description' => '请求对象',
              'type' => 'object',
              'properties' => 
              array (
                'ParamKey' => 
                array (
                  'description' => '参数名称',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'name',
                ),
                'ParamValue' => 
                array (
                  'description' => '参数值',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'test',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 500,
          ),
        ),
        2 => 
        array (
          'name' => 'BodyParams',
          'in' => 'formData',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '放在请求Body的参数信息',
            'type' => 'array',
            'items' => 
            array (
              'description' => '请求对象',
              'type' => 'object',
              'properties' => 
              array (
                'ParamKey' => 
                array (
                  'description' => '参数名称',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'name',
                ),
                'ParamValue' => 
                array (
                  'description' => '参数值',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'test',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 500,
          ),
        ),
        3 => 
        array (
          'name' => 'PathParams',
          'in' => 'formData',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '放在Path里面的请求参数',
            'type' => 'array',
            'items' => 
            array (
              'description' => '请求对象',
              'type' => 'object',
              'properties' => 
              array (
                'ParamKey' => 
                array (
                  'description' => '参数名称',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'path1',
                ),
                'ParamValue' => 
                array (
                  'description' => '参数值',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'api',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 500,
          ),
        ),
        4 => 
        array (
          'name' => 'HeadParams',
          'in' => 'formData',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '放在Header里面的请求参数',
            'type' => 'array',
            'items' => 
            array (
              'description' => '请求对象',
              'type' => 'object',
              'properties' => 
              array (
                'ParamKey' => 
                array (
                  'description' => '参数名称',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'requestId',
                ),
                'ParamValue' => 
                array (
                  'description' => '参数值',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'abcd',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 500,
          ),
        ),
        5 => 
        array (
          'name' => 'BodyContent',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求body数据',
            'type' => 'string',
            'required' => false,
            'example' => '{"name":"test"}',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求id',
                'type' => 'string',
                'example' => 'abdsfewe',
              ),
              'Data' => 
              array (
                'description' => '返回对象',
                'type' => 'object',
                'properties' => 
                array (
                  'TestId' => 
                  array (
                    'description' => '测试Id',
                    'type' => 'string',
                    'example' => '232432',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"abdsfewe\\",\\n  \\"Data\\": {\\n    \\"TestId\\": \\"232432\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<TestDataServiceApiResponse>\\n    <RequestId>abdsfewe</RequestId>\\n    <Data>\\n        <TestId>232432</TestId>\\n    </Data>\\n</TestDataServiceApiResponse>","errorExample":""}]',
      'title' => '测试数据服务API',
      'summary' => '测试API，异步测试，需要GetDataServiceApiTest接口获取测试结果。',
    ),
    'GetDataServiceApiTest' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TestId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '测试Id。TestDataServiceApi接口调用以后异步执行，同时返回测试Id。也可以通过ListDataServiceApiTest获取最近的测试Id。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '123434',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'description' => '返回对象',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求Id',
                'type' => 'string',
                'example' => 'adssdsewe',
              ),
              'Data' => 
              array (
                'description' => '返回对象',
                'type' => 'object',
                'properties' => 
                array (
                  'ApiId' => 
                  array (
                    'description' => '测试API Id

',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '12343',
                  ),
                  'ParamMap' => 
                  array (
                    'description' => '测试API请求参数

',
                    'type' => 'string',
                    'example' => '{"name":"test"}',
                  ),
                  'RetCode' => 
                  array (
                    'description' => '	
测试API返回code，如果未完成，该数据为空',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '0',
                  ),
                  'RetResult' => 
                  array (
                    'description' => '返回数据

',
                    'type' => 'string',
                    'example' => '{"id":2}',
                  ),
                  'DebugInfo' => 
                  array (
                    'description' => 'Debug信息',
                    'type' => 'string',
                    'example' => '[<span style=\\"color: #92D581;\\">INFO</span>] [16:15:13.240] resource group is 498774069027041[<span style=\\"color: #92D581;\\">INFO</span>]',
                  ),
                  'CostTime' => 
                  array (
                    'description' => '耗时',
                    'type' => 'string',
                    'example' => '10',
                  ),
                  'NodesDebugInfo' => 
                  array (
                    'description' => '节点Debug信息',
                    'type' => 'string',
                    'example' => '[<span style=\\"color: #92D581;\\">INFO</span>] [16:15:13.240] resource group is 498774069027041[<span style=\\"color: #92D581;\\">INFO</span>]',
                  ),
                  'Status' => 
                  array (
                    'description' => '任务是否已经完成，包含：RUNNING，FINISHED',
                    'type' => 'string',
                    'example' => 'FINISHED',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"adssdsewe\\",\\n  \\"Data\\": {\\n    \\"ApiId\\": 12343,\\n    \\"ParamMap\\": \\"{\\\\\\"name\\\\\\":\\\\\\"test\\\\\\"}\\",\\n    \\"RetCode\\": 0,\\n    \\"RetResult\\": \\"{\\\\\\"id\\\\\\":2}\\",\\n    \\"DebugInfo\\": \\"[<span style=\\\\\\\\\\\\\\"color: #92D581;\\\\\\\\\\\\\\">INFO</span>] [16:15:13.240] resource group is 498774069027041[<span style=\\\\\\\\\\\\\\"color: #92D581;\\\\\\\\\\\\\\">INFO</span>]\\",\\n    \\"CostTime\\": \\"10\\",\\n    \\"NodesDebugInfo\\": \\"[<span style=\\\\\\\\\\\\\\"color: #92D581;\\\\\\\\\\\\\\">INFO</span>] [16:15:13.240] resource group is 498774069027041[<span style=\\\\\\\\\\\\\\"color: #92D581;\\\\\\\\\\\\\\">INFO</span>]\\",\\n    \\"Status\\": \\"FINISHED\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetDataServiceApiTestResponse>\\n    <RequestId>adssdsewe</RequestId>\\n    <Data>\\n        <ApiId>12343</ApiId>\\n        <ParamMap>{\\"name\\":\\"test\\"}</ParamMap>\\n        <RetCode>0</RetCode>\\n        <RetResult>{\\"id\\":2}</RetResult>\\n        <DebugInfo>[&lt;span style=\\\\\\"color: #92D581;\\\\\\"&gt;INFO&lt;/span&gt;] [16:15:13.240] resource group is 498774069027041[&lt;span style=\\\\\\"color: #92D581;\\\\\\"&gt;INFO&lt;/span&gt;]</DebugInfo>\\n        <CostTime>10</CostTime>\\n        <NodesDebugInfo>[&lt;span style=\\\\\\"color: #92D581;\\\\\\"&gt;INFO&lt;/span&gt;] [16:15:13.240] resource group is 498774069027041[&lt;span style=\\\\\\"color: #92D581;\\\\\\"&gt;INFO&lt;/span&gt;]</NodesDebugInfo>\\n        <Status>FINISHED</Status>\\n    </Data>\\n</GetDataServiceApiTestResponse>","errorExample":""}]',
      'title' => '获取API测试结果',
      'summary' => '获取API测试结果。',
    ),
    'SubmitDataServiceApi' => 
    array (
      'summary' => 'SubmitDataServiceApi用于提交数据服务API。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '157978',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideZZ63WZ',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可以登录[数据服务](https://ds-cn-shanghai.data.aliyun.com/)，点击账号名称，查看用户信息，获取租户ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10001',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks管控台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'ApiId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的ID。您可以通过调用[ListDataServiceApis](~~2780261~~)接口获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '12345',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '提交是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<SubmitDataServiceApiResponse>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Success>true</Success>\\n</SubmitDataServiceApiResponse>","errorExample":""}]',
      'title' => '提交数据服务API',
    ),
    'SaveDataServiceApiTestResult' => 
    array (
      'summary' => '该接口用于保存API测试的结果。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '169364',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideNC84FD',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ApiId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'API的ID。您可以通过调用[ListDataServiceApis](~~174012~~)接口获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '417381955954827',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '10001',
          ),
        ),
        2 => 
        array (
          'name' => 'ResultSample',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '非必填参数，API测试成功的结果示例。',
            'type' => 'string',
            'required' => false,
            'example' => '{  "data": {    "totalNum": 0,    "pageSize": 10,    "rows": [],    "pageNum": 1  },  "errCode": 0,  "requestId": "0bc14a561678159140664515*****",  "errMsg": "success",  "apiLog": null}',
          ),
        ),
        3 => 
        array (
          'name' => 'FailResultSample',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '非必填参数，API测试失败的结果示例。',
            'type' => 'string',
            'required' => false,
            'example' => '{  "apiLog": null,  "data": null,  "errCode": 1108110622,  "errMsg": "数据源查询失败",  "requestId": "0bc14a*****5902762031***"}',
          ),
        ),
        4 => 
        array (
          'name' => 'AutoGenerate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否使用系统自动生成结果，如果不传resultSample/failResultSample参数，则使用系统默认生成的。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****	',
              ),
              'Data' => 
              array (
                'description' => '是否成功保存测试结果。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\\\t\\",\\n  \\"Data\\": true,\\n  \\"Success\\": true,\\n  \\"HttpStatusCode\\": 200\\n}","errorExample":""},{"type":"xml","example":"<SaveDataServiceApiTestResultResponse>\\n    <RequestId>0000-ABCD-EFG****\\t</RequestId>\\n    <Data>true</Data>\\n    <Success>true</Success>\\n    <HttpStatusCode>200</HttpStatusCode>\\n</SaveDataServiceApiTestResultResponse>","errorExample":""}]',
      'title' => '保存API测试结果',
    ),
    'UmountDirectory' => 
    array (
      'summary' => '该接口用于将指定内容从数据分析左侧导航目录中移除。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TargetType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '移除数据分析左侧导航的类型，例如，META_ALBUM、元数据-数据专辑。',
            'type' => 'string',
            'required' => false,
            'example' => 'META_ALBUM',
          ),
        ),
        1 => 
        array (
          'name' => 'TargetId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '与TargetType配合使用，为添加到数据分析左侧导航的元素的唯一ID。
例如，TargetType=META_ALBUM，即类型为元数据-数据专辑，则TargetId为元数据-数据专辑的唯一ID，参见：[ListMetaCollections](~~469938~~)#QualifiedName。',
            'type' => 'string',
            'required' => false,
            'example' => 'album.339',
          ),
        ),
        2 => 
        array (
          'name' => 'TargetUserId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户内指定用户的UserId。

- 如果此字段为空，则代表修改自己的目录。
- 如果此字段不为空，则修改此UserId的目录。',
            'type' => 'string',
            'required' => false,
            'example' => '1234567890',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0bc5aa2716455247597991794e65bd',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP请求返回的响应状态码，200表示请求成功。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '成功移除的数据量，例如：
- 0：可能是左侧导航中不存在此数据，所以生效是0条。
- 1：成功移除1条。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'ErrorMessage' => 
              array (
                'description' => '调用失败时，返回的错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。200标识查询任务成功。',
                'type' => 'string',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0bc5aa2716455247597991794e65bd\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 1,\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"200\\"\\n}","errorExample":""},{"type":"xml","example":"<UmountDirectoryResponse>\\n    <RequestId>0bc5aa2716455247597991794e65bd</RequestId>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>1</Data>\\n    <ErrorMessage>You have no permission.</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>200</ErrorCode>\\n</UmountDirectoryResponse>","errorExample":""}]',
      'title' => '从数据分析左侧导航目录中移除内容',
    ),
    'MountDirectory' => 
    array (
      'summary' => '该接口用于将指定内容挂载到数据分析左侧导航目录。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TargetType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '添加到数据分析左侧导航的类型，例如：META_ALBUM，元数据-数据专辑。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
              'META_ALBUM' => '元数据-数据专辑',
            ),
            'example' => 'META_ALBUM',
          ),
        ),
        1 => 
        array (
          'name' => 'TargetId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '与TargetType配合使用，为添加到数据分析左侧导航的元素的唯一ID。
例如，TargetType=META_ALBUM，即类型为元数据-数据专辑，则TargetId为元数据-数据专辑的唯一ID，参见：[ListMetaCollections](~~469938~~)#QualifiedName。',
            'type' => 'string',
            'required' => false,
            'example' => 'album.339',
          ),
        ),
        2 => 
        array (
          'name' => 'TargetUserId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => ' 租户内指定用户的UserId。

- 如果此字段为空，则代表修改自己的目录。
- 如果此字段不为空，则修改此UserId的目录。',
            'type' => 'string',
            'required' => false,
            'example' => '1234567890',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '添加成功的数据量，例如：
- 0：可能是左侧导航中已经存在此数据，所以生效是0条。
- 1：添加成功1条。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => 'C27D4FB9-C59B-5E17-BD6C-1099B9D6A381',
              ),
              'ErrorMessage' => 
              array (
                'description' => '调用失败时，返回的错误信息。',
                'type' => 'string',
                'example' => 'You have no permission.',
              ),
              'Success' => 
              array (
                'description' => '是否调用成功，取值如下：

- true：调用成功。                                 
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。200标识查询任务成功。',
                'type' => 'string',
                'example' => '200',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'BusinessError.Dictionary.MountDictionaryCountOverLimit',
            'errorMessage' => 'The maximum mount limit is 8, and cannot continue to mount.',
          ),
          1 => 
          array (
            'errorCode' => 'BusinessError.Dictionary.InvalidDictionaryOrNoPermission',
            'errorMessage' => 'Albums that do not exist or do not have permission cannot be mounted.',
          ),
          2 => 
          array (
            'errorCode' => 'BusinessError.Dictionary.NoPermissionToUpdateOtherDictionary',
            'errorMessage' => 'You have insufficient permissions, only administrators can modify other people\'s directories.',
          ),
          3 => 
          array (
            'errorCode' => 'BusinessError.Dictionary.InvalidUserId',
            'errorMessage' => 'This user id is illegal.',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 1,\\n  \\"RequestId\\": \\"C27D4FB9-C59B-5E17-BD6C-1099B9D6A381\\",\\n  \\"ErrorMessage\\": \\"You have no permission.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"200\\"\\n}","errorExample":""},{"type":"xml","example":"<MountDirectoryResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>1</Data>\\n    <RequestId>C27D4FB9-C59B-5E17-BD6C-1099B9D6A381</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>200</ErrorCode>\\n</MountDirectoryResponse>","errorExample":""}]',
      'title' => '数据分析左侧导航目录挂载内容',
    ),
    'GetOpSensitiveData' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '  获取访问记录的条件设置。可选的参数如下：
- dbType：数据类型。
- instanceName：实例名称。
- databaseName：数据库名称。
- projectName：项目名称。
- clusterName：集群名称。

示例获取Hologres中ABC实例的abc数据库的敏感数据访问记录：
[  {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"} ]

实际使用时，您需要根据业务使用的引擎进行配置。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '[  {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"},  {"dbType":"ODPS.ODPS","projectName":"adbc"}  ]',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页展示的数据量，最小值为1，最大值为1000。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '1000',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码数。最小值为1，最大值为1000。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '1000',
            'minimum' => '1',
            'example' => '100',
          ),
        ),
        3 => 
        array (
          'name' => 'Date',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '获取访问记录的日期。格式为：yyyyMMdd。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '20210116',
          ),
        ),
        4 => 
        array (
          'name' => 'OpType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户对数据的操作类型。取值如下：
- SQL_SELECT，访问行为。例如，使用SELECT查询数据。
- TUNNEL_DOWNLOAD，导出行为。例如，下载数据。',
            'type' => 'string',
            'required' => false,
            'example' => 'SQL_SELECT',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象',
            'type' => 'object',
            'properties' => 
            array (
              'OpSensitiveData' => 
              array (
                'description' => '返回的敏感数据记录信息。包括totalCount（敏感数据总条数）和opRiskDatas（风险数据列表）。
其中opRiskDatas（风险数据列表）包括：
- sensType：敏感类型。
- sensLevel：敏感级别（数字越大表示敏感程度越高）。
- opType：操作类型。
- sql：操作执行的sql语句。
- opAccount：执行操作的账号。
- opTime：执行操作的时间。',
                'type' => 'string',
                'example' => '"opSensDatas": [       {         "sensLevel": "L4",         "opTime": "2021-02-07 00:14:51",         "opAccount": "ALIYUN$dsg_test",         "sensType": "手机号",         "sql": "select * from dsg_demo.tbl_phonebook where phone_no = &#39;1331111****&#39;;"       }     ],     "totalCount": 6',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Param',
            'errorMessage' => 'The request parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.NoTenant',
            'errorMessage' => 'The tenant information cannot be obtained using user ID.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DQC.BizError',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"OpSensitiveData\\": \\"\\\\\\"opSensDatas\\\\\\": [       {         \\\\\\"sensLevel\\\\\\": \\\\\\"L4\\\\\\",         \\\\\\"opTime\\\\\\": \\\\\\"2021-02-07 00:14:51\\\\\\",         \\\\\\"opAccount\\\\\\": \\\\\\"ALIYUN$dsg_test\\\\\\",         \\\\\\"sensType\\\\\\": \\\\\\"手机号\\\\\\",         \\\\\\"sql\\\\\\": \\\\\\"select * from dsg_demo.tbl_phonebook where phone_no = &#39;1331111****&#39;;\\\\\\"       }     ],     \\\\\\"totalCount\\\\\\": 6\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\"\\n}","errorExample":""},{"type":"xml","example":"<GetOpSensitiveDataResponse>\\n    <OpSensitiveData>\\"opSensDatas\\": [       {         \\"sensLevel\\": \\"L4\\",         \\"opTime\\": \\"2021-02-07 00:14:51\\",         \\"opAccount\\": \\"ALIYUN$dsg_test\\",         \\"sensType\\": \\"手机号\\",         \\"sql\\": \\"select * from dsg_demo.tbl_phonebook where phone_no = &amp;#39;1331111****&amp;#39;;\\"       }     ],     \\"totalCount\\": 6</OpSensitiveData>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n</GetOpSensitiveDataResponse>","errorExample":""}]',
      'title' => '获取敏感数据访问记录',
      'summary' => '获取租户下所有DataWorks工作空间指定日期的敏感数据访问记录。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DesensitizeData' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Data',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '输入的待脱敏数据。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '15365291784',
          ),
        ),
        1 => 
        array (
          'name' => 'SceneCode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '脱敏场景码。您可以进入DataWorks管控台的数据保护伞，在数据脱敏管理页面查看。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '_default_scene_code',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'DesensitizeData' => 
              array (
                'description' => '脱敏后的结果数据。',
                'type' => 'string',
                'example' => '{     "desensData": "**198807120510**"   }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => 'BCA321BA-46C5-40E9-8A08-6******',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.NoTenant',
            'errorMessage' => 'The tenant information cannot be obtained using user ID.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DQC.BizError',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"DesensitizeData\\": \\"{     \\\\\\"desensData\\\\\\": \\\\\\"**198807120510**\\\\\\"   }\\",\\n  \\"RequestId\\": \\"BCA321BA-46C5-40E9-8A08-6******\\"\\n}","errorExample":""},{"type":"xml","example":"<RequestId>BCA321BA-46C5-40E9-8A08-6******</RequestId>\\n<DesensitizeData>{     \\"desensData\\": \\"**198807120510**\\"   }</DesensitizeData>","errorExample":""}]',
      'title' => '数据脱敏',
      'summary' => '输入待脱敏数据，返回脱敏后的结果数据。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetOpRiskData' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页返回的数据量，最大值为1000。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '1000',
            'minimum' => '1',
            'example' => '100',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码数，最小值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '1000',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '获取访问记录的条件设置。可选的参数如下：
- dbType：数据类型。
- instanceName：实例名称。
- databaseName：数据库名称。
- projectName：项目名称。
- clusterName：集群名称。

示例获取Hologres中ABC实例的abc数据库的敏感数据访问记录：
[  {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"} ]

实际使用时，您需要根据业务使用的引擎进行配置。',
            'type' => 'string',
            'required' => false,
            'example' => '[ {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"}, {"dbType":"ODPS.ODPS","projectName":"adbc"} ]',
          ),
        ),
        3 => 
        array (
          'name' => 'Date',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '获取访问记录的日期。格式为：yyyyMMdd。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '20210221',
          ),
        ),
        4 => 
        array (
          'name' => 'RiskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指通过什么方式识别风险类型。取值如下：
- 手工识别。
- 风险规则名称，您可以进入DataWorks的数据保护伞，在风险识别管理页面获取。',
            'type' => 'string',
            'required' => false,
            'example' => '手工识别',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回参数',
            'type' => 'object',
            'properties' => 
            array (
              'RiskData' => 
              array (
                'description' => '返回的有风险的敏感数据信息。包括totalCount（敏感数据总条数）和opRiskDatas（风险数据列表）。
其中opRiskDatas（风险数据列表）包括：
- sensType：敏感类型。
- sensLevel：敏感级别。
- opType：操作类型。
- sql：操作执行的sql语句。
- opAccount：执行操作的账号。
- opTime：执行操作的时间。',
                'type' => 'string',
                'example' => '{     "opRiskDatas": [       {         "riskType": "分级维度,EMR引擎维度and项目维度,EMR引擎项目维度的操作数据,导出方式维度,EMR引擎",         "opTime": "2021-01-04 23:39:13",         "opType": "SQL_SELECT",         "opAccount": "user",         "sensType": "邮箱/姓名/手机号",         "sql": "SELECT * FROM default.jiade_1219_test_create LIMIT 20"       }     ],     "totalCount": 499   }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Param',
            'errorMessage' => 'The request parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.NoTenant',
            'errorMessage' => 'The tenant information cannot be obtained using user ID.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DQC.BizError',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RiskData\\": \\"{     \\\\\\"opRiskDatas\\\\\\": [       {         \\\\\\"riskType\\\\\\": \\\\\\"分级维度,EMR引擎维度and项目维度,EMR引擎项目维度的操作数据,导出方式维度,EMR引擎\\\\\\",         \\\\\\"opTime\\\\\\": \\\\\\"2021-01-04 23:39:13\\\\\\",         \\\\\\"opType\\\\\\": \\\\\\"SQL_SELECT\\\\\\",         \\\\\\"opAccount\\\\\\": \\\\\\"user\\\\\\",         \\\\\\"sensType\\\\\\": \\\\\\"邮箱/姓名/手机号\\\\\\",         \\\\\\"sql\\\\\\": \\\\\\"SELECT * FROM default.jiade_1219_test_create LIMIT 20\\\\\\"       }     ],     \\\\\\"totalCount\\\\\\": 499   }\\",\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\"\\n}","errorExample":""},{"type":"xml","example":"<GetOpRiskDataResponse>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n    <RiskData>{     \\"opRiskDatas\\": [       {         \\"riskType\\": \\"分级维度,EMR引擎维度and项目维度,EMR引擎项目维度的操作数据,导出方式维度,EMR引擎\\",         \\"opTime\\": \\"2021-01-04 23:39:13\\",         \\"opType\\": \\"SQL_SELECT\\",         \\"opAccount\\": \\"user\\",         \\"sensType\\": \\"邮箱/姓名/手机号\\",         \\"sql\\": \\"SELECT * FROM default.jiade_1219_test_create LIMIT 20\\"       }     ],     \\"totalCount\\": 499   }</RiskData>\\n</GetOpRiskDataResponse>","errorExample":""}]',
      'title' => '获取有风险的敏感数据访问记录',
      'summary' => '获取租户下所有DataWorks工作空间指定日期中有风险的敏感数据访问记录。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetSensitiveData' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页返回的数据量，最大值为1000。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '1000',
            'minimum' => '1',
            'example' => '1000',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码数，最小值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '1000',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '获取访问记录的条件设置。可选的参数如下：
- dbType：数据类型。
- instanceName：实例名称。
- databaseName：数据库名称。
- projectName：项目名称。
- clusterName：集群名称。

示例获取Hologres中ABC实例的abc数据库的敏感数据访问记录。实际使用时，您需要根据业务使用的引擎进行配置。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '[ {"dbType":"hologres","instanceName":"ABC","databaseName":"abc"}, {"dbType":"ODPS.ODPS","projectName":"adbc"} ]',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回参数',
            'type' => 'object',
            'properties' => 
            array (
              'SensitiveData' => 
              array (
                'description' => '返回的敏感数据信息。包括totalCount（敏感数据总条数）和sensDatas（敏感数据列表）。
其中sensDatas（敏感数据列表）包括：
- guid：租户元数据的唯一id，例如ODPS.ODPS类型数据的guid由project.table.column组成。
- sensType：敏感类型。
- sensLevel：敏感级别。',
                'type' => 'object',
                'example' => '{      "sensDatas": [       {         "sensLevel": "L1",         "guid": "dsg_demo.animal.dog",         "sensType": "姓名"       }      ],     "totalCount": 2171 }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Param',
            'errorMessage' => 'The request parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.NoTenant',
            'errorMessage' => 'The tenant information cannot be obtained using user ID.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DQC.BizError',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"SensitiveData\\": {\\n    \\"sensDatas\\": [\\n      {\\n        \\"sensLevel\\": \\"L1\\",\\n        \\"guid\\": \\"dsg_demo.animal.dog\\",\\n        \\"sensType\\": \\"姓名\\"\\n      }\\n    ],\\n    \\"totalCount\\": 2171\\n  },\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\"\\n}","errorExample":""},{"type":"xml","example":"<GetSensitiveDataResponse>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n</GetSensitiveDataResponse>","errorExample":""}]',
      'title' => '获取敏感数据',
      'summary' => '调用GetSensitiveData，获取租户下所有DataWorks工作空间的最新敏感数据识别结果。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ScanSensitiveData' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Data',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待识别的数据。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '13900001234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象',
            'type' => 'object',
            'properties' => 
            array (
              'Sensitives' => 
              array (
                'description' => '识别出的敏感数据信息。
sensDatas表示识别出的敏感数据规则列表，包括：
- hitCount：命中率，该数据命中规则的次数。
- ruleName：规则名称。',
                'type' => 'object',
                'example' => '{     "sensDatas": [       {         "hitCount": 1,         "ruleName": "手机号"       }     ]   }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DQC.BizError',
            'errorMessage' => 'An internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Sensitives\\": {\\n    \\"sensDatas\\": [\\n      {\\n        \\"hitCount\\": 1,\\n        \\"ruleName\\": \\"手机号\\"\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\"\\n}","errorExample":""},{"type":"xml","example":"<ScanSensitiveDataResponse>\\n    <RequestId>0000-ABCD-EFG****</RequestId>\\n</ScanSensitiveDataResponse>","errorExample":""}]',
      'title' => '扫描敏感数据',
      'summary' => '调用ScanSensitiveData识别输入数据中是否存在敏感数据。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DsgQuerySensResult' => 
    array (
      'summary' => '该接口用于获取数据保护伞的敏感数据识别结果。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '215091',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideLVJHYR',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
        1 => 
        array (
          'name' => 'DbType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据库类型，取值为：
- **ODPS.ODPS**
- **HOLO.POSTGRES**
- **EMR**',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
              'HOLO.POSTGRES' => 'HOLO',
              'EMR' => 'EMR',
              'ODPS.ODPS' => 'ODPS',
            ),
            'example' => 'ODPS.ODPS',
          ),
        ),
        2 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的名称。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'project',
          ),
        ),
        3 => 
        array (
          'name' => 'SchemaName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'Schema名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'schema',
          ),
        ),
        4 => 
        array (
          'name' => 'Table',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '表名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'table',
          ),
        ),
        5 => 
        array (
          'name' => 'Col',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '字段名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'col',
          ),
        ),
        6 => 
        array (
          'name' => 'NodeName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分类节点名称。',
            'type' => 'string',
            'required' => false,
            'example' => '个人信息',
          ),
        ),
        7 => 
        array (
          'name' => 'Level',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段等级。',
            'type' => 'string',
            'required' => false,
            'example' => '3',
          ),
        ),
        8 => 
        array (
          'name' => 'SensStatus',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '字段敏感状态：

- 1：敏感
- -1：非敏感',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
              1 => '敏感',
              -1 => '非敏感',
            ),
            'example' => '1',
          ),
        ),
        9 => 
        array (
          'name' => 'SensitiveId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段ID。',
            'type' => 'string',
            'required' => false,
            'example' => '10241024',
          ),
        ),
        10 => 
        array (
          'name' => 'SensitiveName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段名称。',
            'type' => 'string',
            'required' => false,
            'example' => '姓名',
          ),
        ),
        11 => 
        array (
          'name' => 'Order',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '排序方式：
- DESC：降序。
- ASC：升序。',
            'type' => 'string',
            'required' => false,
            'enumValueTitles' => 
            array (
              'ASC' => '升序',
              'DESC' => '降序',
            ),
            'example' => 'DESC',
          ),
        ),
        12 => 
        array (
          'name' => 'OrderField',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '用于排序的字段：
- gmt_create
- gmt_modified',
            'type' => 'string',
            'required' => false,
            'example' => 'gmt_create',
          ),
        ),
        13 => 
        array (
          'name' => 'PageNo',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '页码数，最小值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        14 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大为20条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。

',
                'type' => 'string',
                'example' => '400',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'any',
                'example' => '1234',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。
',
                'type' => 'string',
                'example' => '900000001',
              ),
              'DynamicErrorCode' => 
              array (
                'description' => '错误码。取值同ErrorCode。',
                'type' => 'string',
                'example' => '400',
              ),
              'DynamicErrorMessage' => 
              array (
                'description' => '错误信息。取值同ErrorMessage。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"400\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": \\"1234\\",\\n  \\"RequestId\\": \\"900000001\\",\\n  \\"DynamicErrorCode\\": \\"400\\",\\n  \\"DynamicErrorMessage\\": \\"缺少参数\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgQuerySensResultResponse>\\n    <Success>true</Success>\\n    <ErrorCode>400</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>1234</Data>\\n    <RequestId>900000001</RequestId>\\n    <DynamicErrorCode>400</DynamicErrorCode>\\n    <DynamicErrorMessage>缺少参数</DynamicErrorMessage>\\n</DsgQuerySensResultResponse>","errorExample":""}]',
      'title' => '获取敏感数据识别结果',
      'description' => '该API功能对应数据保护伞控制台界面的查询功能，通过与租户ID关联，获取指定租户的敏感数据识别结果。
- 支持根据数据源类型、项目空间等维度进行筛选。
- 支持对某个字段进行升降序排序。
- 支持分页查询。',
    ),
    'QueryDefaultTemplate' => 
    array (
      'summary' => '调用QueryDefaultTemplate接口查询数据保护伞定义的默认分类分级模板。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '212265',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideBVSRMP',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'required' => true,
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'required' => true,
                'example' => '9990030003',
                'default' => 'null',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'required' => true,
                'example' => '参数错误',
                'default' => 'null',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'required' => true,
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '返回的默认分类分级模板数据。JSON格式。',
                'type' => 'any',
                'required' => true,
                'example' => '[{"gmtModified":1709022365000,"fileName":"默认文件","isDelete":false,"isDefaultTemplate":true}]',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'required' => true,
                'example' => '102400001',
                'default' => 'null',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"参数错误\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": \\"[{\\\\\\"gmtModified\\\\\\":1709022365000,\\\\\\"fileName\\\\\\":\\\\\\"默认文件\\\\\\",\\\\\\"isDelete\\\\\\":false,\\\\\\"isDefaultTemplate\\\\\\":true}]\\",\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<QueryDefaultTemplateResponse>\\n    <Success>true</Success>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>参数错误</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>[{\\"gmtModified\\":1709022365000,\\"fileName\\":\\"默认文件\\",\\"isDelete\\":false,\\"isDefaultTemplate\\":true}]</Data>\\n    <RequestId>102400001</RequestId>\\n</QueryDefaultTemplateResponse>","errorExample":""}]',
      'title' => '查询默认分类分级模板',
    ),
    'DsgStopSensIdentify' => 
    array (
      'summary' => '调用DsgStopSensIdentify接口，停止数据保护伞定义的分类分级敏感数据识别任务。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'none',
        'abilityTreeCode' => '213660',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide1B7LSC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
        1 => 
        array (
          'name' => 'JobId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据保护伞的识别任务ID。可通过调用[DsgRunSensIdentify](~~2744039~~)接口获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '1000001',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9990030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '返回数据，布尔型。',
                'type' => 'any',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '10000001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"true\\",\\n  \\"RequestId\\": \\"10000001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgStopSensIdentifyResponse>\\n    <Success>true</Success>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>10000001</RequestId>\\n</DsgStopSensIdentifyResponse>","errorExample":""}]',
      'title' => '停止分类分级敏感数据识别任务',
    ),
    'QuerySensClassification' => 
    array (
      'summary' => '调用QuerySensClassification接口，查询数据保护伞分类分级中的分类节点。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '212270',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideBVSRMP',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TemplateId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据保护伞定义的模板ID。可通过调用[QueryDefaultTemplate](~~2743948~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'e1970541-6cf5-4d23-b101-d5b66f6e1024',
          ),
        ),
        1 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9990030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '返回的数据保护伞分类分级中的分类节点信息。JSON格式。',
                'type' => 'any',
                'example' => '[{         "nodeName": "teset1",         "sensitiveNotNull": true,         "nodeId": "1aac2e35-b437-486b-95c7-a5ae48371024",         "nodeOldId": "1aac2e35-b437-486b-95c7-a5ae48371024",         "parentId": "0"     }]',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '10000001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": \\"[{         \\\\\\"nodeName\\\\\\": \\\\\\"teset1\\\\\\",         \\\\\\"sensitiveNotNull\\\\\\": true,         \\\\\\"nodeId\\\\\\": \\\\\\"1aac2e35-b437-486b-95c7-a5ae48371024\\\\\\",         \\\\\\"nodeOldId\\\\\\": \\\\\\"1aac2e35-b437-486b-95c7-a5ae48371024\\\\\\",         \\\\\\"parentId\\\\\\": \\\\\\"0\\\\\\"     }]\\",\\n  \\"RequestId\\": \\"10000001\\"\\n}","errorExample":""},{"type":"xml","example":"<QuerySensClassificationResponse>\\n    <Success>true</Success>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>[{         \\"nodeName\\": \\"teset1\\",         \\"sensitiveNotNull\\": true,         \\"nodeId\\": \\"1aac2e35-b437-486b-95c7-a5ae48371024\\",         \\"nodeOldId\\": \\"1aac2e35-b437-486b-95c7-a5ae48371024\\",         \\"parentId\\": \\"0\\"     }]</Data>\\n    <RequestId>10000001</RequestId>\\n</QuerySensClassificationResponse>","errorExample":""}]',
      'title' => '查询分类分级中的分类节点',
    ),
    'QuerySensLevel' => 
    array (
      'summary' => '调用QuerySensLevel接口，查询在数据保护伞定义的敏感数据等级。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '212269',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdidePQ4SAC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TemplateId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '数据保护伞定义的模板ID。可通过调用[QueryDefaultTemplate](~~2743948~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'e1970541-6cf5-4d23-b101-d5b66f6e10af',
          ),
        ),
        1 => 
        array (
          'name' => 'tenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9990030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '返回的数据保护伞定义的敏感数据等级。JSON数组格式。',
                'type' => 'any',
                'example' => '[{"level":1,"isSensitive":false,"levelName":"1level"},{"level":2,"isSensitive":false,"levelName":"2level"}]',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '10000001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"[{\\\\\\"level\\\\\\":1,\\\\\\"isSensitive\\\\\\":false,\\\\\\"levelName\\\\\\":\\\\\\"1level\\\\\\"},{\\\\\\"level\\\\\\":2,\\\\\\"isSensitive\\\\\\":false,\\\\\\"levelName\\\\\\":\\\\\\"2level\\\\\\"}]\\",\\n  \\"RequestId\\": \\"10000001\\"\\n}","errorExample":""},{"type":"xml","example":"<QuerySensLevelResponse>\\n    <Success>true</Success>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>[{\\"level\\":1,\\"isSensitive\\":false,\\"levelName\\":\\"1level\\"},{\\"level\\":2,\\"isSensitive\\":false,\\"levelName\\":\\"2level\\"}]</Data>\\n    <RequestId>10000001</RequestId>\\n</QuerySensLevelResponse>","errorExample":""}]',
      'title' => '查询敏感数据等级',
    ),
    'QueryRecognizeRulesType' => 
    array (
      'summary' => '调用QueryRecognizeRulesType接口，查询数据保护伞定义的敏感字段内置识别规则类型。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '212274',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideDCM5VK',
        ),
      ),
      'parameters' => 
      array (
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9990030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '返回的敏感字段内置识别规则类型，JSON格式。',
                'type' => 'any',
                'example' => '{   "HttpStatusCode": 200,   "Data": [     {       "Regular Expression": "1"     },     {       "Recognize Rule": "2"     },     {       "Sample Library": "3"     },     {       "Model": "4"     }   ],   "Success": true }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '10000001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"{   \\\\\\"HttpStatusCode\\\\\\": 200,   \\\\\\"Data\\\\\\": [     {       \\\\\\"Regular Expression\\\\\\": \\\\\\"1\\\\\\"     },     {       \\\\\\"Recognize Rule\\\\\\": \\\\\\"2\\\\\\"     },     {       \\\\\\"Sample Library\\\\\\": \\\\\\"3\\\\\\"     },     {       \\\\\\"Model\\\\\\": \\\\\\"4\\\\\\"     }   ],   \\\\\\"Success\\\\\\": true }\\",\\n  \\"RequestId\\": \\"10000001\\"\\n}","errorExample":""},{"type":"xml","example":"<QueryRecognizeRulesTypeResponse>\\n    <Success>true</Success>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>{   \\"HttpStatusCode\\": 200,   \\"Data\\": [     {       \\"Regular Expression\\": \\"1\\"     },     {       \\"Recognize Rule\\": \\"2\\"     },     {       \\"Sample Library\\": \\"3\\"     },     {       \\"Model\\": \\"4\\"     }   ],   \\"Success\\": true }</Data>\\n    <RequestId>10000001</RequestId>\\n</QueryRecognizeRulesTypeResponse>","errorExample":""}]',
      'title' => '查询敏感字段内置识别规则类型',
    ),
    'DsgRunSensIdentify' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'none',
        'abilityTreeCode' => '212734',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide1B7LSC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
        1 => 
        array (
          'name' => 'EsMetaParams',
          'in' => 'formData',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '指定元数据扫描的参数对象列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '指定元数据扫描的参数对象。',
              'type' => 'object',
              'properties' => 
              array (
                'DbType' => 
                array (
                  'description' => '数据源类型，取值如下：
- ODPS.ODPS
- EMR
- HOLO.POSTGRES',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'ODPS.ODPS',
                ),
                'ClusterId' => 
                array (
                  'description' => '集群ID。根据您自己的数据源集群获取。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '101010',
                ),
                'ProjectName' => 
                array (
                  'description' => 'DataWorks工作空间的名称。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '1666676756691024',
                ),
                'SchemaName' => 
                array (
                  'description' => 'Schema名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'default',
                ),
                'TableName' => 
                array (
                  'description' => '表名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'table1',
                ),
                'TableNameList' => 
                array (
                  'description' => '表名称列表。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '表名称列表内容。',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'table1,table2',
                  ),
                  'required' => false,
                ),
                'User' => 
                array (
                  'description' => '操作者的用户名。建议填写您的阿里云账号名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'xxx-uat',
                ),
                'InstanceId' => 
                array (
                  'description' => '实例ID。根据您的数据源获取。',
                  'type' => 'integer',
                  'format' => 'int64',
                  'required' => false,
                  'example' => 'hgprecn-cn-9lb37k181024',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'DataWorksResult',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9990030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '生成的敏感数据识别任务的任务ID。INT 64类型。',
                'type' => 'any',
                'example' => '1000001',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '10000001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"Success\\": true,\\n  \\"Data\\": \\"1000001\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"RequestId\\": \\"10000001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgRunSensIdentifyResponse>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <Success>true</Success>\\n    <Data>1000001</Data>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <RequestId>10000001</RequestId>\\n</DsgRunSensIdentifyResponse>","errorExample":""}]',
      'title' => ' 启动敏感数据识别任务',
      'summary' => '调用DsgRunSensIdentify接口启动一个数据保护伞的敏感数据识别任务。',
    ),
    'DeleteRecognizeRule' => 
    array (
      'summary' => '调用DeleteRecognizeRule接口，删除在数据保护伞定义的分类分级规则。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '212271',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideDCM5VK',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'SensitiveId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段ID。可通过调用[QuerySensNodeInfo](~~2747189~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => '27f5f5e2-ec60-4567-b1e4-779ac3681024',
          ),
        ),
        1 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9990030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '返回数据：是否删除成功。',
                'type' => 'any',
                'example' => '{   "HttpStatusCode": 200,   "Success": true }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '10000001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
          1 => 
          array (
            'errorCode' => 'SENSITIVEDELETEERROR',
            'errorMessage' => 'The sensitive field is not allowed to delete. Check sensitive field status and binding desensitization rule.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"{   \\\\\\"HttpStatusCode\\\\\\": 200,   \\\\\\"Success\\\\\\": true }\\",\\n  \\"RequestId\\": \\"10000001\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteRecognizeRuleResponse>\\n    <Success>true</Success>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>{   \\"HttpStatusCode\\": 200,   \\"Success\\": true }</Data>\\n    <RequestId>10000001</RequestId>\\n</DeleteRecognizeRuleResponse>","errorExample":""}]',
      'title' => '删除分类分级规则',
    ),
    'QuerySensNodeInfo' => 
    array (
      'summary' => '调用QuerySensNodeInfo接口查询数据保护伞的分类分级识别规则。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '217792',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideDCM5VK',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TemplateId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分类分级模板ID。可通过调用[QueryDefaultTemplate](~~2743948~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => 'e1970541-6cf5-4d23-b101-d5b66f6e1024',
          ),
        ),
        1 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
        2 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分类分级节点ID。可通过调用[QuerySensClassification](~~2746850~~)接口获取，或登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据保护伞界面直接获取。',
            'type' => 'string',
            'required' => false,
            'example' => '0ce67949-0810-400f-a24a-cc5ffafe1024',
          ),
        ),
        3 => 
        array (
          'name' => 'SensitiveName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段名称。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据保护伞界面直接获取。',
            'type' => 'string',
            'required' => false,
            'example' => '身份证',
          ),
        ),
        4 => 
        array (
          'name' => 'PageNo',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页查询页码数。取值：从1开始。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        5 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分页查询每页显示的条数。取值：10~1000，建议大小为10~100。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        6 => 
        array (
          'name' => 'status',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段的状态。取值如下：
- 0：草稿态。
- 1：发布态。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9990030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '返回的JSON格式业务数据。',
                'type' => 'any',
                'example' => '{     "success": true,     "httpStatusCode": 200,     "data": {         "result": [                         {                 "sensitiveName": "证件到期日期",                 "sensitiveId": "fd4ff5a2-9537-43d1-8e4f-1d0b5ffaac12",                 "status": 0,                 "templateName": "内置分类分级模板",                  "keyRuleId": "228248921215042证件到期日期"             }         ],         "totalCount": 1,         "currentPage": 1,         "pageSize": 10     },     "requestId": 10000001 }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '10000001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"{     \\\\\\"success\\\\\\": true,     \\\\\\"httpStatusCode\\\\\\": 200,     \\\\\\"data\\\\\\": {         \\\\\\"result\\\\\\": [                         {                 \\\\\\"sensitiveName\\\\\\": \\\\\\"证件到期日期\\\\\\",                 \\\\\\"sensitiveId\\\\\\": \\\\\\"fd4ff5a2-9537-43d1-8e4f-1d0b5ffaac12\\\\\\",                 \\\\\\"status\\\\\\": 0,                 \\\\\\"templateName\\\\\\": \\\\\\"内置分类分级模板\\\\\\",                  \\\\\\"keyRuleId\\\\\\": \\\\\\"228248921215042证件到期日期\\\\\\"             }         ],         \\\\\\"totalCount\\\\\\": 1,         \\\\\\"currentPage\\\\\\": 1,         \\\\\\"pageSize\\\\\\": 10     },     \\\\\\"requestId\\\\\\": 10000001 }\\",\\n  \\"RequestId\\": \\"10000001\\"\\n}","errorExample":""},{"type":"xml","example":"<QuerySensNodeInfoResponse>\\n    <Success>true</Success>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>{     \\"success\\": true,     \\"httpStatusCode\\": 200,     \\"data\\": {         \\"result\\": [                         {                 \\"sensitiveName\\": \\"证件到期日期\\",                 \\"sensitiveId\\": \\"fd4ff5a2-9537-43d1-8e4f-1d0b5ffaac12\\",                 \\"status\\": 0,                 \\"templateName\\": \\"内置分类分级模板\\",                  \\"keyRuleId\\": \\"228248921215042证件到期日期\\"             }         ],         \\"totalCount\\": 1,         \\"currentPage\\": 1,         \\"pageSize\\": 10     },     \\"requestId\\": 10000001 }</Data>\\n    <RequestId>10000001</RequestId>\\n</QuerySensNodeInfoResponse>","errorExample":""}]',
      'title' => ' 查询分类分级识别规则',
    ),
    'AddRecognizeRule' => 
    array (
      'summary' => '调用AddRecognizeRule接口新增数据保护伞分类分级定义的敏感字段。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '212268',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideBVSRMP',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
        1 => 
        array (
          'name' => 'AccountName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '创建敏感数据识别规则的阿里云用户。此处填写用户名称。',
            'type' => 'string',
            'required' => true,
            'example' => 'dsg-uat',
          ),
        ),
        2 => 
        array (
          'name' => 'SensitiveName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '自定义的敏感字段名称。输入长度小于128的字符串。',
            'type' => 'string',
            'required' => true,
            'example' => '姓名',
          ),
        ),
        3 => 
        array (
          'name' => 'TemplateId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '模板ID。调用[QueryDefaultTemplate](~~2743948~~)接口获取当前默认的模板ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'e1970541-6cf5-4d23-b101-d5b66f6e1024',
          ),
        ),
        4 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分类结点ID。可调用[QuerySensClassification](~~2746850~~)接口获取所有结点ID，选择一个结点新建敏感字段。此处输入所选的结点ID。',
            'type' => 'string',
            'required' => true,
            'example' => '0ce67949-0810-400f-a24a-cc5ffafe1024',
          ),
        ),
        5 => 
        array (
          'name' => 'NodeParent',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分类结点的父结点信息。可调用[QuerySensClassification](~~2746850~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => '客户/个人/个人自然信息/个人基本概况信息',
          ),
        ),
        6 => 
        array (
          'name' => 'Level',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段分级。根据模板定义的分级信息，选择其中一级作为新增敏感字段的等级。例如1~10级。',
            'type' => 'string',
            'required' => true,
            'example' => '1',
          ),
        ),
        7 => 
        array (
          'name' => 'LevelName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分级名称。可调用[QueryDefaultTemplate](~~2743948~~)接口，获取所选分级在模板中对应的分级名称。',
            'type' => 'string',
            'required' => false,
            'example' => '机密',
          ),
        ),
        8 => 
        array (
          'name' => 'SensitiveDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段描述。长度小于128的字符串。',
            'type' => 'string',
            'required' => false,
            'example' => '这是一个识别姓名的敏感字段',
          ),
        ),
        9 => 
        array (
          'name' => 'OperationType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运算类型。取值如下：
- 0：或
- 1：与',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '0',
          ),
        ),
        10 => 
        array (
          'name' => 'RecognizeRulesType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感数据识别规则类型：
- 1：正则表达式。
- 2：内置规则。
- 3：样本库。
- 4：自生成模型。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        11 => 
        array (
          'name' => 'RecognizeRules',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感数据识别规则内容。可调用[QuerySensNodeInfo](~~2747189~~)接口，参考内置规则同字段的配置。',
            'type' => 'string',
            'required' => false,
            'example' => '{"contentRule":{"_clazz":"com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.GenderCond"},"_clazz":"com.alipay.dsg.dal.model.RuleContent"}',
          ),
        ),
        12 => 
        array (
          'name' => 'ContentScan',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '内容识别。可通过调用[QuerySensNodeInfo](~~2747189~~)接口，参考内置规则的同字段配置。',
            'type' => 'string',
            'required' => false,
            'example' => '{"_clazz":"com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.NationalityCond"}',
          ),
        ),
        13 => 
        array (
          'name' => 'HitThreshold',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '命中阈值。若抽样数据中，超过阈值百分比（例如，60%）的数据命中NER模型，则认为命中该敏感字段。取值：0~100之间的整数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '50',
          ),
        ),
        14 => 
        array (
          'name' => 'ColScan',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '字段扫描，仅识别赋值的字段。
- 取值格式：${项目空间}.${表名}.${字段名}或${项目空间}.${SCHEMA}.${表名}.${字段名}。
- 支持*通配符，如default.table.column1*可以匹配default.table.column10等*后面的任意内容。',
            'type' => 'string',
            'required' => false,
            'example' => 'default.qujian.*',
          ),
        ),
        15 => 
        array (
          'name' => 'ColExclude',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '字段排除，即不识别赋值的字段。
- 取值格式：${项目空间}.${表名}.${字段名}或${项目空间}.${SCHEMA}.${表名}.${字段名}。
- 支持*通配符，如default.table.column1*可以匹配default.table.column10等*后面的任意内容。',
            'type' => 'string',
            'required' => false,
            'example' => 'default.qujian.*6',
          ),
        ),
        16 => 
        array (
          'name' => 'CommentScan',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '内容扫描。取值为您的数据资产中每个字段注释信息的文本，支持模糊匹配。',
            'type' => 'string',
            'required' => false,
            'example' => 'test',
          ),
        ),
        17 => 
        array (
          'name' => 'Status',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段的生效状态。取值如下：
- 0：草稿。
- 1：生效。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9990030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '返回结果，JSON格式数据。',
                'type' => 'any',
                'example' => '{   "HttpStatusCode": 200,   "Success": true }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '10000001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"{   \\\\\\"HttpStatusCode\\\\\\": 200,   \\\\\\"Success\\\\\\": true }\\",\\n  \\"RequestId\\": \\"10000001\\"\\n}","errorExample":""},{"type":"xml","example":"<AddRecognizeRuleResponse>\\n    <Success>true</Success>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>{   \\"HttpStatusCode\\": 200,   \\"Success\\": true }</Data>\\n    <RequestId>10000001</RequestId>\\n</AddRecognizeRuleResponse>","errorExample":""}]',
      'title' => '新增分类分级定义的敏感字段',
    ),
    'EditRecognizeRule' => 
    array (
      'summary' => '调用EditRecognizeRule接口编辑数据保护伞分类分级定义的敏感字段。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '212267',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideDCM5VK',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
        1 => 
        array (
          'name' => 'AccountName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '新建敏感数据识别规则的阿里云用户。此处填写用户名称。',
            'type' => 'string',
            'required' => true,
            'example' => 'dsg-uat',
          ),
        ),
        2 => 
        array (
          'name' => 'SensitiveId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段ID。可调用[QuerySensNodeInfo](~~2747189~~)接口获取全量敏感字段ID，或调用[QueryRecognizeRuleDetail](~~2766023~~)接口查询特定敏感字段ID。',
            'type' => 'string',
            'required' => true,
            'example' => '1a928de7-3962-4e07-93ac-e1973baa1024',
          ),
        ),
        3 => 
        array (
          'name' => 'SensitiveName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '自定义的敏感字段名称。输入长度小于128的字符串。',
            'type' => 'string',
            'required' => true,
            'example' => '姓名',
          ),
        ),
        4 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分类结点ID。可调用[QuerySensClassification](~~2746850~~)接口获取所有结点ID，选择一个结点新建敏感字段。此处输入所选的结点ID。',
            'type' => 'string',
            'required' => true,
            'example' => '0ce67949-0810-400f-a24a-cc5ffafe1024',
          ),
        ),
        5 => 
        array (
          'name' => 'NodeParent',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分类结点的父结点信息。可调用[QuerySensClassification](~~2746850~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'example' => '客户/个人/个人自然信息/个人基本概况信息',
          ),
        ),
        6 => 
        array (
          'name' => 'TemplateId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '模板ID。调用[QueryDefaultTemplate](~~2743948~~)接口获取当前默认的模板ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'e1970541-6cf5-4d23-b101-d5b66f6e1024',
          ),
        ),
        7 => 
        array (
          'name' => 'level',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段分级。根据模板定义的分级信息，选择其中一级作为新增敏感字段的等级。例如1~10级。',
            'type' => 'string',
            'required' => true,
            'example' => '1',
          ),
        ),
        8 => 
        array (
          'name' => 'LevelName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '分级名称。可调用[QueryDefaultTemplate](~~2743948~~)接口，获取所选分级在模板中对应的分级名称。',
            'type' => 'string',
            'required' => false,
            'example' => '机密',
          ),
        ),
        9 => 
        array (
          'name' => 'SensitiveDescription',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段描述。长度小于128的字符串。',
            'type' => 'string',
            'required' => false,
            'example' => '这是一个识别姓名的敏感字段',
          ),
        ),
        10 => 
        array (
          'name' => 'Status',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段的生效状态。取值如下：
- 0：草稿。
- 1：生效。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
          ),
        ),
        11 => 
        array (
          'name' => 'OperationType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运算类型。取值如下：
- 0：或
- 1：与',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '0',
          ),
        ),
        12 => 
        array (
          'name' => 'RecognizeRulesType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感数据识别规则类型：
- 1：正则表达式。
- 2：内置规则。
- 3：样本库。
- 4：自生成模型。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        13 => 
        array (
          'name' => 'RecognizeRules',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感数据识别规则内容。可调用[QuerySensNodeInfo](~~2747189~~)接口，参考内置规则同字段的配置。',
            'type' => 'string',
            'required' => false,
            'example' => '{"contentRule":{"_clazz":"com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.GenderCond"},"_clazz":"com.alipay.dsg.dal.model.RuleContent"}',
          ),
        ),
        14 => 
        array (
          'name' => 'ContentScan',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '内容识别。可通过调用[QuerySensNodeInfo](~~2747189~~)接口，参考内置规则的同字段配置。',
            'type' => 'string',
            'required' => false,
            'example' => '{"_clazz":"com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.NationalityCond"}',
          ),
        ),
        15 => 
        array (
          'name' => 'ColScan',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '字段扫描，仅识别赋值的字段。
- 取值格式：${项目空间}.${表名}.${字段名}或${项目空间}.${SCHEMA}.${表名}.${字段名}。
- 支持*通配符，如default.table.column1*可以匹配default.table.column10等*后面的任意内容。',
            'type' => 'string',
            'required' => false,
            'example' => 'default.qujian.*',
          ),
        ),
        16 => 
        array (
          'name' => 'ColExclude',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '字段排除，即不识别赋值的字段。
- 取值格式：${项目空间}.${表名}.${字段名}或${项目空间}.${SCHEMA}.${表名}.${字段名}。
- 支持*通配符，如default.table.column1*可以匹配default.table.column10等*后面的任意内容。',
            'type' => 'string',
            'required' => false,
            'example' => 'default.qujian.*6',
          ),
        ),
        17 => 
        array (
          'name' => 'CommentScan',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '内容扫描。取值为您的数据资产中每个字段注释信息的文本，支持模糊匹配。',
            'type' => 'string',
            'required' => false,
            'example' => 'test',
          ),
        ),
        18 => 
        array (
          'name' => 'HitThreshold',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '命中阈值。若抽样数据中，超过阈值百分比（例如，60%）的数据命中NER模型，则认为命中该敏感字段。取值：0~100之间的整数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '50',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9990030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '返回结果，JSON格式数据。',
                'type' => 'any',
                'example' => '{ "HttpStatusCode": 200, "Success": true }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => '10000001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"{ \\\\\\"HttpStatusCode\\\\\\": 200, \\\\\\"Success\\\\\\": true }\\",\\n  \\"RequestId\\": \\"10000001\\"\\n}","errorExample":""},{"type":"xml","example":"<EditRecognizeRuleResponse>\\n    <Success>true</Success>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>{ \\"HttpStatusCode\\": 200, \\"Success\\": true }</Data>\\n    <RequestId>10000001</RequestId>\\n</EditRecognizeRuleResponse>","errorExample":""}]',
      'title' => '编辑分类分级定义的敏感字段',
    ),
    'QueryRecognizeDataByRuleType' => 
    array (
      'summary' => '调用QueryRecognizeDataByRuleType接口获取数据保护伞的敏感字段识别方式列表。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '212273',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideDCM5VK',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RecognizeRulesType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '识别规则类型。可调用[QueryRecognizeRulesType](~~2746905~~)接口获取规则的类型。
- 1：正则表达式
- 2：内置模型
- 3：样本库
- 4：自生成模型',
            'type' => 'string',
            'required' => true,
            'example' => '2',
          ),
        ),
        1 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'DataWorksResult',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9990030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回数据：JSON格式。',
                'type' => 'any',
                'example' => '[{"custom": false,       "name": "EducationDegree",       "localeName": "EducationDegree",       "templateJsonStr": "{&quot;_clazz&quot;:&quot;com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.EducationDegreeCond&quot;}",       "desc": ""}]',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '10000001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"Success\\": true,\\n  \\"Data\\": \\"[{\\\\\\"custom\\\\\\": false,       \\\\\\"name\\\\\\": \\\\\\"EducationDegree\\\\\\",       \\\\\\"localeName\\\\\\": \\\\\\"EducationDegree\\\\\\",       \\\\\\"templateJsonStr\\\\\\": \\\\\\"{&quot;_clazz&quot;:&quot;com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.EducationDegreeCond&quot;}\\\\\\",       \\\\\\"desc\\\\\\": \\\\\\"\\\\\\"}]\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"10000001\\"\\n}","errorExample":""},{"type":"xml","example":"<QueryRecognizeDataByRuleTypeResponse>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <Success>true</Success>\\n    <Data>[{\\"custom\\": false,       \\"name\\": \\"EducationDegree\\",       \\"localeName\\": \\"EducationDegree\\",       \\"templateJsonStr\\": \\"{&amp;quot;_clazz&amp;quot;:&amp;quot;com.alipay.dsgclient.sdk.dsg.fastscan.engine.cond.EducationDegreeCond&amp;quot;}\\",       \\"desc\\": \\"\\"}]</Data>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>10000001</RequestId>\\n</QueryRecognizeDataByRuleTypeResponse>","errorExample":""}]',
      'title' => '获取敏感字段识别方式列表',
    ),
    'QueryRecognizeRuleDetail' => 
    array (
      'summary' => '调用QueryRecognizeRuleDetail接口查询数据保护伞的指定敏感字段详情。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '212990',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideDCM5VK',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'SensitiveName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '敏感字段名称。可调用[QuerySensNodeInfo](~~2747189~~)接口，或进入[DataWorks控制台](https://workbench.data.aliyun.com/console)，在数据保护伞的分类分级界面获取敏感字段名称。',
            'type' => 'string',
            'required' => true,
            'example' => '姓名',
          ),
        ),
        1 => 
        array (
          'name' => 'TenantId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '租户ID。您可登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入数据开发（DataStudio）页面，单击右上方当前登录用户名称，选择菜单 > 用户信息，获取租户ID。',
            'type' => 'string',
            'required' => true,
            'example' => '10241024',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '9990030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => '缺少参数',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '返回的敏感字段详情，JSON格式。',
                'type' => 'any',
                'example' => '{"nodeName":"单位基本概况","gmtModified":1709017449000,"hitThreshold":30,"sensitiveName":"mobile-yinni","templateId":"8222abeb-9784-4417-b420-0322926d5cbf","recognizeRulesType":2,"delete":false,"bydAccuracy":1,"colScan":"","defineType":1,"ydAccuracy":1,"contentRule":{"contentRule":{},"operationType":0},"nodeParent":"单位/单位基本信息/单位基本概况","level":6,"keyRuleId":"228248921215042mobile-yinni","isDelete":false,"levelName":"6level","sensitive":false,"operationType":0,"sourceName":"dsg-test-zuoyue","nodeId":"bea2fc81-90c9-45f3-b7a9-26d534208a0d","status":1}',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '10000001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'BADPARAMETERS',
            'errorMessage' => 'Parameters are missing or in the wrong format.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"9990030003\\",\\n  \\"ErrorMessage\\": \\"缺少参数\\",\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": \\"{\\\\\\"nodeName\\\\\\":\\\\\\"单位基本概况\\\\\\",\\\\\\"gmtModified\\\\\\":1709017449000,\\\\\\"hitThreshold\\\\\\":30,\\\\\\"sensitiveName\\\\\\":\\\\\\"mobile-yinni\\\\\\",\\\\\\"templateId\\\\\\":\\\\\\"8222abeb-9784-4417-b420-0322926d5cbf\\\\\\",\\\\\\"recognizeRulesType\\\\\\":2,\\\\\\"delete\\\\\\":false,\\\\\\"bydAccuracy\\\\\\":1,\\\\\\"colScan\\\\\\":\\\\\\"\\\\\\",\\\\\\"defineType\\\\\\":1,\\\\\\"ydAccuracy\\\\\\":1,\\\\\\"contentRule\\\\\\":{\\\\\\"contentRule\\\\\\":{},\\\\\\"operationType\\\\\\":0},\\\\\\"nodeParent\\\\\\":\\\\\\"单位/单位基本信息/单位基本概况\\\\\\",\\\\\\"level\\\\\\":6,\\\\\\"keyRuleId\\\\\\":\\\\\\"228248921215042mobile-yinni\\\\\\",\\\\\\"isDelete\\\\\\":false,\\\\\\"levelName\\\\\\":\\\\\\"6level\\\\\\",\\\\\\"sensitive\\\\\\":false,\\\\\\"operationType\\\\\\":0,\\\\\\"sourceName\\\\\\":\\\\\\"dsg-test-zuoyue\\\\\\",\\\\\\"nodeId\\\\\\":\\\\\\"bea2fc81-90c9-45f3-b7a9-26d534208a0d\\\\\\",\\\\\\"status\\\\\\":1}\\",\\n  \\"RequestId\\": \\"10000001\\"\\n}","errorExample":""},{"type":"xml","example":"<QueryRecognizeRuleDetailResponse>\\n    <Success>true</Success>\\n    <ErrorCode>9990030003</ErrorCode>\\n    <ErrorMessage>缺少参数</ErrorMessage>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>{\\"nodeName\\":\\"单位基本概况\\",\\"gmtModified\\":1709017449000,\\"hitThreshold\\":30,\\"sensitiveName\\":\\"mobile-yinni\\",\\"templateId\\":\\"8222abeb-9784-4417-b420-0322926d5cbf\\",\\"recognizeRulesType\\":2,\\"delete\\":false,\\"bydAccuracy\\":1,\\"colScan\\":\\"\\",\\"defineType\\":1,\\"ydAccuracy\\":1,\\"contentRule\\":{\\"contentRule\\":{},\\"operationType\\":0},\\"nodeParent\\":\\"单位/单位基本信息/单位基本概况\\",\\"level\\":6,\\"keyRuleId\\":\\"228248921215042mobile-yinni\\",\\"isDelete\\":false,\\"levelName\\":\\"6level\\",\\"sensitive\\":false,\\"operationType\\":0,\\"sourceName\\":\\"dsg-test-zuoyue\\",\\"nodeId\\":\\"bea2fc81-90c9-45f3-b7a9-26d534208a0d\\",\\"status\\":1}</Data>\\n    <RequestId>10000001</RequestId>\\n</QueryRecognizeRuleDetailResponse>","errorExample":""}]',
      'title' => '查询指定敏感字段详情',
    ),
    'DsgUserGroupGetOdpsRoleGroups' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '220985',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'MaxCompute项目名称。您可通过调用[DsgPlatformQueryProjectsAndSchemaFromMeta](~~2786303~~)接口获取MaxCompute项目列表。',
            'type' => 'string',
            'required' => true,
            'example' => 'test_project',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<List<String>>',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '返回结果数据。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => 'MaxCompute角色名称。',
                  'type' => 'string',
                  'example' => 'test_role',
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'USERGROUP.ACCOUNTLISTSIZE.ERROR',
            'errorMessage' => 'The number of account exceeds the limit.',
          ),
          1 => 
          array (
            'errorCode' => 'USERGROUP.ID.ERROR',
            'errorMessage' => 'The user group ID does not match the tenant or does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'USERGROUP.LISTSIZE.ERROR',
            'errorMessage' => 'The number of user groups exceeds the limit.',
          ),
          3 => 
          array (
            'errorCode' => 'USERGROUP.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          4 => 
          array (
            'errorCode' => 'USERACCOUNT.OWNER.ERROR',
            'errorMessage' => 'User list or owner user does not exist.',
          ),
          5 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": [\\n    \\"test_role\\"\\n  ],\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgUserGroupGetOdpsRoleGroupsResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>test_role</Data>\\n    <RequestId>102400001</RequestId>\\n</DsgUserGroupGetOdpsRoleGroupsResponse>","errorExample":""}]',
      'title' => '查询可选择的MaxCompute角色列表',
      'summary' => '调用DsgUserGroupGetOdpsRoleGroups接口，查询该租户在数据保护伞创建或修改用户组时，用户组成员可选择的MaxCompute角色列表。                                                                                                        ',
    ),
    'DsgDesensPlanAddOrUpdate' => 
    array (
      'summary' => '调用DsgDesensPlanAddOrUpdate接口新建或编辑数据脱敏规则。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219759',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'DesensRules',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '需要新增或编辑的脱敏规则集合。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '脱敏规则信息。',
              'type' => 'object',
              'properties' => 
              array (
                'Id' => 
                array (
                  'description' => '脱敏规则ID。您可调用[DsgDesensPlanQueryList](~~2786578~~)接口查询。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '123',
                ),
                'DataType' => 
                array (
                  'description' => '敏感字段类型。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'phone',
                ),
                'RuleName' => 
                array (
                  'description' => '脱敏规则名称。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'phone_hash',
                ),
                'Status' => 
                array (
                  'description' => '脱敏规则的生效状态。取值如下：
- 0：失效。
- 1：生效。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '1',
                ),
                'SceneIds' => 
                array (
                  'description' => '二级脱敏场景。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '二级脱敏场景ID。此处输入的二级脱敏场景需要未配置DataType参数指定的敏感字段类型脱敏规则。您可调用[DsgSceneQuerySceneListByName](~~2786322~~)查询脱敏场景ID。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'required' => false,
                    'example' => '123',
                  ),
                  'required' => true,
                ),
                'Owner' => 
                array (
                  'description' => '脱敏规则的负责人。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'test_user',
                ),
                'CheckWatermark' => 
                array (
                  'description' => '是否添加水印。取值如下：
- true：是
- false：否',
                  'type' => 'boolean',
                  'required' => false,
                  'example' => 'true',
                ),
                'DesensPlan' => 
                array (
                  'description' => '脱敏规则。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'DesensPlanType' => 
                    array (
                      'description' => '脱敏规则中配置的脱敏方式。取值如下：
- 哈希：hash
- 假名：mapping
- 掩盖：mask
- 字符替换：charreplacement
- 区间变换：intervalselect
- 取整：decimalpoint
- 置空：emptydesens',
                      'type' => 'string',
                      'required' => true,
                      'example' => 'hash',
                    ),
                    'ExtParam' => 
                    array (
                      'description' => '脱敏规则参数。',
                      'type' => 'object',
                      'required' => false,
                      'additionalProperties' => 
                      array (
                        'type' => 'any',
                        'description' => '脱敏规则参数配置，根据您要配置的脱敏规则添加不同参数，具体内容请参见下文示例。',
                        'example' => '{           "algo": "MD5", "salt":6         }',
                      ),
                    ),
                  ),
                  'required' => true,
                ),
              ),
              'required' => false,
            ),
            'required' => true,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Boolean>',
            'description' => 'OpenApiResultModel<Boolean>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
true：调用成功。
false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '新增或编辑的执行结果。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
          1 => 
          array (
            'errorCode' => 'DESENSPLAN.DATATYPE.ERROR',
            'errorMessage' => 'Sensitive type already has a desensitization rule.',
          ),
          2 => 
          array (
            'errorCode' => 'DESENSPLAN.DATATYPENOTEXIST.ERROR',
            'errorMessage' => 'Sensitive type not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'DESENSPLAN.ID.ERROR',
            'errorMessage' => 'Desensitization rule ID does not exist.',
          ),
          4 => 
          array (
            'errorCode' => 'DESENSPLAN.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          5 => 
          array (
            'errorCode' => 'DESENSPLAN.PARAM.ERROR',
            'errorMessage' => 'Desensitization rule parameter error.',
          ),
          6 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENECODE.ERROR',
            'errorMessage' => 'Scene code does not exist.',
          ),
          7 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENEID.ERROR',
            'errorMessage' => 'Scene ID does not exist.',
          ),
          8 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENEIDLEVEL.ERROR',
            'errorMessage' => 'The scene is not a secondary scene.',
          ),
          9 => 
          array (
            'errorCode' => 'DESENSPLAN.SIZE.ERROR',
            'errorMessage' => 'The number of desens plan exceeds the limit.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgDesensPlanAddOrUpdateResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>102400001</RequestId>\\n</DsgDesensPlanAddOrUpdateResponse>","errorExample":""}]',
      'title' => '新建或编辑数据脱敏规则',
      'requestParamsDescription' => 'ExtParam为动态参数，对于不同脱敏规则配置不同，参考示例如下：

```
哈希：
{
    "algo": "MD5",
    "salt": 6
}
假名：
{
    "charset": "Aa",
    "salt": 6
}
掩盖：
{
    "before": 3,
    "after": 4
}
自定义掩盖：
{
    "separatorList": [
        {
            "desens": true,
            "left": 3
        },
        {
            "desens": false,
            "left": 6
        },
        {
            "desens": true,
            "left": -99
        }
    ]
}
样本值字符替换：
{
    "library": "test_library",
    "position": 3
}
固定值字符替换：
{
    "replace": "repData",
    "position": 3
}
随机字符替换：
{
    "replace": "repData"
}
自定义字符替换：
{
    "separatorList": [
        {
            "desensParam": {
                "replace": "repData"
            },
            "left": 3
        },
        {
            "desensParam": {
                "library": "test_library"
            },
            "left": 6
        },
        {
            "desensParam": {
            },
            "left": 99
        }
    ]
}
区间变换：
{
    "intervalselects": [
        {
            "desens": "1",
            "interval": [
                "1",
                "100"
            ]
        }
    ]
}
取整：
{
"point":3
}
置空：
{}
```

具体支持的脱敏方式及相关规则，可参考[DsgQueryDefaultTemplates](~~2786306~~)接口查询。',
    ),
    'DsgPlatformQueryProjectsAndSchemaFromMeta' => 
    array (
      'summary' => '调用DsgPlatformQueryProjectsAndSchemaFromMeta接口，查询当前租户下不同类型的引擎实例列表。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219458',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'EngineName',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '引擎名称',
            'description' => '引擎类型。取值如下：
- ODPS.ODPS
- EMR
- HOLO.POSTGRES',
            'type' => 'string',
            'required' => true,
            'example' => 'EMR',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<List<QueryProjectsAndSchemaFromMetaVO>>',
            'description' => 'OpenApiResultModel<List<QueryProjectsAndSchemaFromMetaVO>>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回数据。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Project' => 
                    array (
                      'description' => '引擎名称。',
                      'type' => 'string',
                      'example' => 'emr_test_project',
                    ),
                    'ClusterId' => 
                    array (
                      'description' => 'EMR集群ID。仅当请求参数EngineName（引擎类型）取值为EMR时，返回数据才会生成该参数。',
                      'type' => 'string',
                      'example' => 'c-12345',
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
          1 => 
          array (
            'errorCode' => 'ENGINE.NOT.ALLOW',
            'errorMessage' => 'engine not allow.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": [\\n    {\\n      \\"Project\\": \\"emr_test_project\\",\\n      \\"ClusterId\\": \\"c-12345\\"\\n    }\\n  ],\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgPlatformQueryProjectsAndSchemaFromMetaResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>\\n        <Project>emr_test_project</Project>\\n        <ClusterId>c-12345</ClusterId>\\n    </Data>\\n    <RequestId>102400001</RequestId>\\n</DsgPlatformQueryProjectsAndSchemaFromMetaResponse>","errorExample":""}]',
      'title' => '查询当前租户下的引擎实例列表',
    ),
    'DsgUserGroupDelete' => 
    array (
      'summary' => '调用DsgUserGroupDelete接口，删除数据保护伞配置的用户组。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219457',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Ids',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '用户组信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '用户组ID。您可调用[DsgUserGroupQueryList](~~2786441~~)接口查询。',
              'type' => 'integer',
              'format' => 'int64',
              'required' => false,
              'example' => '123',
            ),
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Boolean>',
            'description' => 'OpenApiResultModel<Boolean>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '操作结果。取值如下：
- true：删除用户组成功。
- false：删除用户组失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'USERGROUP.ACCOUNTLISTSIZE.ERROR',
            'errorMessage' => 'The number of account exceeds the limit.',
          ),
          1 => 
          array (
            'errorCode' => 'USERGROUP.ID.ERROR',
            'errorMessage' => 'The user group ID does not match the tenant or does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'USERGROUP.LISTSIZE.ERROR',
            'errorMessage' => 'The number of user groups exceeds the limit.',
          ),
          3 => 
          array (
            'errorCode' => 'USERGROUP.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          4 => 
          array (
            'errorCode' => 'USERACCOUNT.OWNER.ERROR',
            'errorMessage' => 'User list or owner user does not exist.',
          ),
          5 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgUserGroupDeleteResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>102400001</RequestId>\\n</DsgUserGroupDeleteResponse>","errorExample":""}]',
      'title' => '删除数据保护伞配置的用户组',
    ),
    'DsgWhiteListDeleteList' => 
    array (
      'summary' => '调用DsgWhiteListDeleteList接口，删除数据保护伞中配置的脱敏白名单。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219462',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Ids',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '白名单ID。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '白名单ID。您可调用[DsgWhiteListQueryList](~~2786508~~)接口获取。',
              'type' => 'integer',
              'format' => 'int32',
              'required' => false,
              'example' => '123',
            ),
            'required' => true,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Boolean>',
            'description' => 'OpenApiResultModel<Boolean>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '操作结果。取值如下：
- true：操作成功。
- false：操作失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'WHITELIST.DESENSID.ERROR',
            'errorMessage' => 'The desensitization rule ID does not match or does not exist with the tenant.',
          ),
          1 => 
          array (
            'errorCode' => 'WHITELIST.ENDTIME.ERROR',
            'errorMessage' => 'end time cannot be earlier than start time.',
          ),
          2 => 
          array (
            'errorCode' => 'WHITELIST.ID.ERROR',
            'errorMessage' => 'The whitelist ID does not match or does not exist with the tenant.',
          ),
          3 => 
          array (
            'errorCode' => 'WHITELIST.MCPROJECT.ERROR',
            'errorMessage' => 'The projectName on the bottom layer desensitization whitelist of MC cannot be empty.',
          ),
          4 => 
          array (
            'errorCode' => 'WHITELIST.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          5 => 
          array (
            'errorCode' => 'WHITELIST.SIZE.ERROR',
            'errorMessage' => 'The number of white list exceeds the limit.',
          ),
          6 => 
          array (
            'errorCode' => 'WHITELIST.STARTTIME.ERROR',
            'errorMessage' => 'start time cannot be earlier than today.',
          ),
          7 => 
          array (
            'errorCode' => 'WHITELIST.TIMEFORMAT.ERROR',
            'errorMessage' => 'The time format is incorrect, please use yyyy MM dd HH: mm: ss format.',
          ),
          8 => 
          array (
            'errorCode' => 'WHITELIST.USERGROUP.ERROR',
            'errorMessage' => 'The user group ID does not match or does not exist with the tenant.',
          ),
          9 => 
          array (
            'errorCode' => 'WHITELIST.USERGROUPEMPTY.ERROR',
            'errorMessage' => 'User group ID cannot be empty.',
          ),
          10 => 
          array (
            'errorCode' => 'WHITELIST.USERGROUPLISTSIZE.ERROR',
            'errorMessage' => 'The number of user group exceeds the limit.',
          ),
          11 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgWhiteListDeleteListResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>102400001</RequestId>\\n</DsgWhiteListDeleteListResponse>","errorExample":""}]',
      'title' => '删除脱敏白名单',
    ),
    'DsgScenedDeleteScene' => 
    array (
      'summary' => '调用DsgScenedDeleteScene接口，删除数据保护伞中已创建的二级脱敏场景。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219460',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Ids',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '二级脱敏场景的ID列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '二级脱敏场景的ID列表。您可调用[DsgSceneQuerySceneListByName](~~2786322~~)接口获取。',
              'type' => 'integer',
              'format' => 'int32',
              'required' => false,
              'example' => '123',
            ),
            'required' => true,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Boolean>',
            'description' => 'OpenApiResultModel<Boolean>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '操作结果。取值如下：
- true：操作成功。
- false：操作失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'DESENSSCENE.ID.ERROR',
            'errorMessage' => 'The desensitization scenario ID does not match or does not exist with the tenant.',
          ),
          1 => 
          array (
            'errorCode' => 'DESENSSCENE.IDLEVEL.ERROR',
            'errorMessage' => 'The desensitization scenario is not a secondary scenario.',
          ),
          2 => 
          array (
            'errorCode' => 'DESENSSCENE.PROJECT.ERROR',
            'errorMessage' => 'The project space does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'DESENSSCENE.SIZE.ERROR',
            'errorMessage' => 'The number of desens scene exceeds the limit.',
          ),
          4 => 
          array (
            'errorCode' => 'DESENSSCENE.UESRGROUP.ERROR',
            'errorMessage' => 'The user group ID does not match the tenant or does not exist.',
          ),
          5 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgScenedDeleteSceneResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>102400001</RequestId>\\n</DsgScenedDeleteSceneResponse>","errorExample":""}]',
      'title' => '删除二级脱敏场景',
    ),
    'DsgDesensPlanDelete' => 
    array (
      'summary' => '调用DsgDesensPlanDelete接口，删除数据保护伞中已创建的脱敏规则。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '219620',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Ids',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '脱敏规则的ID集合。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '脱敏规则ID。您可调用[DsgDesensPlanQueryList](~~2786578~~)接口获取。',
              'type' => 'integer',
              'format' => 'int32',
              'required' => false,
              'example' => '123',
            ),
            'required' => true,
          ),
        ),
        1 => 
        array (
          'name' => 'SceneCode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '脱敏规则所属的一级脱敏场景Code。取值如下：
- 数据开发/数据地图展示脱敏：dataworks_display_desense_code
- MaxCompute引擎层脱敏：maxcompute_desense_code
- MaxCompute引擎层脱敏（新）：maxcompute_new_desense_code
- Hologres引擎层脱敏：hologres_display_desense_code
- 数据集成静态脱敏：dataworks_data_integration_desense_code
- 数据分析展示脱敏：dataworks_analysis_desense_code',
            'type' => 'string',
            'required' => true,
            'example' => 'dataworks_display_desense_code',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Boolean>',
            'description' => 'OpenApiResultModel<Boolean>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '操作结果。取值如下：
- true：操作成功。
- false：操作失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
          1 => 
          array (
            'errorCode' => 'DESENSPLAN.DATATYPE.ERROR',
            'errorMessage' => 'Sensitive type already has a desensitization rule.',
          ),
          2 => 
          array (
            'errorCode' => 'DESENSPLAN.DATATYPENOTEXIST.ERROR',
            'errorMessage' => 'Sensitive type not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'DESENSPLAN.ID.ERROR',
            'errorMessage' => 'Desensitization rule ID does not exist.',
          ),
          4 => 
          array (
            'errorCode' => 'DESENSPLAN.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          5 => 
          array (
            'errorCode' => 'DESENSPLAN.PARAM.ERROR',
            'errorMessage' => 'Desensitization rule parameter error.',
          ),
          6 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENECODE.ERROR',
            'errorMessage' => 'Scene code does not exist.',
          ),
          7 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENEID.ERROR',
            'errorMessage' => 'Scene ID does not exist.',
          ),
          8 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENEIDLEVEL.ERROR',
            'errorMessage' => 'The scene is not a secondary scene.',
          ),
          9 => 
          array (
            'errorCode' => 'DESENSPLAN.SIZE.ERROR',
            'errorMessage' => 'The number of desens plan exceeds the limit.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgDesensPlanDeleteResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>102400001</RequestId>\\n</DsgDesensPlanDeleteResponse>","errorExample":""}]',
      'title' => '删除脱敏规则',
    ),
    'DsgDesensPlanUpdateStatus' => 
    array (
      'summary' => '调用DsgDesensPlanUpdateStatus接口，修改脱敏规则的生效状态。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '219619',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Ids',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '需要修改状态的脱敏规则ID集合。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '脱敏规则ID。您可调用[DsgDesensPlanQueryList](~~2786578~~)接口获取。',
              'type' => 'integer',
              'format' => 'int32',
              'required' => false,
              'example' => '123',
            ),
            'required' => true,
          ),
        ),
        1 => 
        array (
          'name' => 'SceneCode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '脱敏规则所属的一级脱敏场景Code。取值如下：
- 数据开发/数据地图展示脱敏：dataworks_display_desense_code
- MaxCompute引擎层脱敏：maxcompute_desense_code
- MaxCompute引擎层脱敏（新）：maxcompute_new_desense_code
- Hologres引擎层脱敏：hologres_display_desense_code
- 数据集成静态脱敏：dataworks_data_integration_desense_code
- 数据分析展示脱敏：dataworks_analysis_desense_code',
            'type' => 'string',
            'required' => true,
            'example' => 'dataworks_display_desense_code',
          ),
        ),
        2 => 
        array (
          'name' => 'Status',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '脱敏规则的生效状态。取值如下：
- 0：失效。
- 1：生效。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Boolean>',
            'description' => 'OpenApiResultModel<Boolean>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '操作结果。取值如下：
- true：操作成功。
- false：操作失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
          1 => 
          array (
            'errorCode' => 'DESENSPLAN.DATATYPE.ERROR',
            'errorMessage' => 'Sensitive type already has a desensitization rule.',
          ),
          2 => 
          array (
            'errorCode' => 'DESENSPLAN.DATATYPENOTEXIST.ERROR',
            'errorMessage' => 'Sensitive type not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'DESENSPLAN.ID.ERROR',
            'errorMessage' => 'Desensitization rule ID does not exist.',
          ),
          4 => 
          array (
            'errorCode' => 'DESENSPLAN.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          5 => 
          array (
            'errorCode' => 'DESENSPLAN.PARAM.ERROR',
            'errorMessage' => 'Desensitization rule parameter error.',
          ),
          6 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENECODE.ERROR',
            'errorMessage' => 'Scene code does not exist.',
          ),
          7 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENEID.ERROR',
            'errorMessage' => 'Scene ID does not exist.',
          ),
          8 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENEIDLEVEL.ERROR',
            'errorMessage' => 'The scene is not a secondary scene.',
          ),
          9 => 
          array (
            'errorCode' => 'DESENSPLAN.SIZE.ERROR',
            'errorMessage' => 'The number of desens plan exceeds the limit.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgDesensPlanUpdateStatusResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>102400001</RequestId>\\n</DsgDesensPlanUpdateStatusResponse>","errorExample":""}]',
      'title' => '修改脱敏规则的生效状态',
    ),
    'DsgWhiteListQueryList' => 
    array (
      'summary' => '调用DsgWhiteListQueryList接口，查询数据保护伞中配置的脱敏白名单。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219250',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '页码',
            'description' => '分页的页数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '页大小',
            'description' => '每页显示的条数，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'SceneId',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '二级场景Id',
            'description' => '二级脱敏场景ID。您可调用[DsgSceneQuerySceneListByName](~~2786322~~)接口获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '123',
          ),
        ),
        3 => 
        array (
          'name' => 'DataType',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '敏感类型关键字',
            'description' => '敏感字段类型的关键字。',
            'type' => 'string',
            'required' => false,
            'example' => 'phone',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<PagingResultModel<WhiteListQueryListVO>>',
            'description' => 'OpenApiResultModel<PagingResultModel<WhiteListQueryListVO>>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'PageData' => 
              array (
                'description' => '分页数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '分页的页数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '返回的脱敏白名单总条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Data' => 
                  array (
                    'description' => '白名单集合。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Id' => 
                        array (
                          'description' => '脱敏白名单ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'Type' => 
                        array (
                          'description' => '敏感字段类型。',
                          'type' => 'string',
                          'example' => 'phone',
                        ),
                        'UserGroups' => 
                        array (
                          'description' => '用户组名称集合。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '用户组名称。',
                            'type' => 'string',
                            'example' => 'test_group',
                          ),
                        ),
                        'GmtCreate' => 
                        array (
                          'description' => '脱敏白名单的创建时间。',
                          'type' => 'string',
                          'example' => '2024-05-09 15:46:20',
                        ),
                        'GmtModified' => 
                        array (
                          'description' => '脱敏白名单的修改时间。',
                          'type' => 'string',
                          'example' => '2024-05-09 15:46:20',
                        ),
                        'RuleId' => 
                        array (
                          'description' => '脱敏规则ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'SceneId' => 
                        array (
                          'description' => '二级脱敏场景ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'StartTime' => 
                        array (
                          'description' => '脱敏白名单的生效时间，不能早于当前时间。单位为天。',
                          'type' => 'string',
                          'example' => '2024-05-09 15:46:20',
                        ),
                        'EndTime' => 
                        array (
                          'description' => '脱敏白名单的失效时间，不能早于生效时间。单位为天。',
                          'type' => 'string',
                          'example' => '2024-05-10 15:46:20',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'WHITELIST.DESENSID.ERROR',
            'errorMessage' => 'The desensitization rule ID does not match or does not exist with the tenant.',
          ),
          1 => 
          array (
            'errorCode' => 'WHITELIST.ENDTIME.ERROR',
            'errorMessage' => 'end time cannot be earlier than start time.',
          ),
          2 => 
          array (
            'errorCode' => 'WHITELIST.ID.ERROR',
            'errorMessage' => 'The whitelist ID does not match or does not exist with the tenant.',
          ),
          3 => 
          array (
            'errorCode' => 'WHITELIST.MCPROJECT.ERROR',
            'errorMessage' => 'The projectName on the bottom layer desensitization whitelist of MC cannot be empty.',
          ),
          4 => 
          array (
            'errorCode' => 'WHITELIST.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          5 => 
          array (
            'errorCode' => 'WHITELIST.SIZE.ERROR',
            'errorMessage' => 'The number of white list exceeds the limit.',
          ),
          6 => 
          array (
            'errorCode' => 'WHITELIST.STARTTIME.ERROR',
            'errorMessage' => 'start time cannot be earlier than today.',
          ),
          7 => 
          array (
            'errorCode' => 'WHITELIST.TIMEFORMAT.ERROR',
            'errorMessage' => 'The time format is incorrect, please use yyyy MM dd HH: mm: ss format.',
          ),
          8 => 
          array (
            'errorCode' => 'WHITELIST.USERGROUP.ERROR',
            'errorMessage' => 'The user group ID does not match or does not exist with the tenant.',
          ),
          9 => 
          array (
            'errorCode' => 'WHITELIST.USERGROUPEMPTY.ERROR',
            'errorMessage' => 'User group ID cannot be empty.',
          ),
          10 => 
          array (
            'errorCode' => 'WHITELIST.USERGROUPLISTSIZE.ERROR',
            'errorMessage' => 'The number of user group exceeds the limit.',
          ),
          11 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"PageData\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Data\\": [\\n      {\\n        \\"Id\\": 123,\\n        \\"Type\\": \\"phone\\",\\n        \\"UserGroups\\": [\\n          \\"test_group\\"\\n        ],\\n        \\"GmtCreate\\": \\"2024-05-09 15:46:20\\",\\n        \\"GmtModified\\": \\"2024-05-09 15:46:20\\",\\n        \\"RuleId\\": 123,\\n        \\"SceneId\\": 123,\\n        \\"StartTime\\": \\"2024-05-09 15:46:20\\",\\n        \\"EndTime\\": \\"2024-05-10 15:46:20\\"\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgWhiteListQueryListResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <PageData>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Data>\\n            <Id>123</Id>\\n            <Type>phone</Type>\\n            <UserGroups>test_group</UserGroups>\\n            <GmtCreate>2024-05-09 15:46:20</GmtCreate>\\n            <GmtModified>2024-05-09 15:46:20</GmtModified>\\n            <RuleId>123</RuleId>\\n            <SceneId>123</SceneId>\\n            <StartTime>2024-05-09 15:46:20</StartTime>\\n            <EndTime>2024-05-10 15:46:20</EndTime>\\n        </Data>\\n    </PageData>\\n    <RequestId>102400001</RequestId>\\n</DsgWhiteListQueryListResponse>","errorExample":""}]',
      'title' => '查询脱敏白名单',
    ),
    'DsgSceneAddOrUpdateScene' => 
    array (
      'summary' => '调用DsgSceneAddOrUpdateScene接口，新增或编辑二级脱敏场景。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219459',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'scenes',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '二级脱敏场景信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '二级脱敏场景信息。',
              'type' => 'object',
              'properties' => 
              array (
                'id' => 
                array (
                  'description' => '二级脱敏场景ID。
- 不配置该参数：表示当前操作为新增二级脱敏场景。
- 配置该参数：表示编辑指定二级脱敏场景信息。您可调用[DsgSceneQuerySceneListByName](~~2786322~~)接口查询二级脱敏场景ID。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '123',
                ),
                'sceneName' => 
                array (
                  'description' => '二级脱敏场景名称。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'dev_scene',
                ),
                'sceneCode' => 
                array (
                  'description' => '二级脱敏场景所属的一级脱敏场景Code。取值如下：
- 数据开发/数据地图展示脱敏：dataworks_display_desense_code
- MaxCompute引擎层脱敏：maxcompute_desense_code
- MaxCompute引擎层脱敏（新）：maxcompute_new_desense_code
- 数据分析展示脱敏：dataworks_analysis_desense_code',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'dataworks_display_desense_code',
                ),
                'projects' => 
                array (
                  'description' => '脱敏场景生效的引擎信息。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '脱敏场景生效的引擎信息。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'clusterId' => 
                      array (
                        'description' => '若脱敏场景生效的数据范围为EMR引擎，此处需输入EMR集群ID。仅当使用EMR引擎时需配置该参数。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'c-1234',
                      ),
                      'projectName' => 
                      array (
                        'description' => '脱敏场景生效的引擎实例名称。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'dev_project',
                      ),
                      'dbType' => 
                      array (
                        'description' => '脱敏场景生效的引擎类型。取值如下：
- ODPS：ODPS.ODPS
- HOLO：HOLO.POSTGRES
- EMR：EMR',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'ODPS.ODPS',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                ),
                'desc' => 
                array (
                  'description' => '描述。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '测试用场景',
                ),
                'userGroupIds' => 
                array (
                  'description' => '脱敏场景生效的用户组信息。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '脱敏场景生效的用户组ID。您可调用[DsgUserGroupQueryList](~~2786441~~)接口获取。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'required' => false,
                    'example' => '123',
                  ),
                  'required' => false,
                ),
              ),
              'required' => false,
            ),
            'required' => true,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Boolean>',
            'description' => 'OpenApiResultModel<Boolean>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '操作结果。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'DESENSSCENE.ID.ERROR',
            'errorMessage' => 'The desensitization scenario ID does not match or does not exist with the tenant.',
          ),
          1 => 
          array (
            'errorCode' => 'DESENSSCENE.IDLEVEL.ERROR',
            'errorMessage' => 'The desensitization scenario is not a secondary scenario.',
          ),
          2 => 
          array (
            'errorCode' => 'DESENSSCENE.PROJECT.ERROR',
            'errorMessage' => 'The project space does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'DESENSSCENE.SIZE.ERROR',
            'errorMessage' => 'The number of desens scene exceeds the limit.',
          ),
          4 => 
          array (
            'errorCode' => 'DESENSSCENE.UESRGROUP.ERROR',
            'errorMessage' => 'The user group ID does not match the tenant or does not exist.',
          ),
          5 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgSceneAddOrUpdateSceneResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>102400001</RequestId>\\n</DsgSceneAddOrUpdateSceneResponse>","errorExample":""}]',
      'title' => '新增或编辑二级脱敏场景',
    ),
    'DsgSceneQuerySceneListByName' => 
    array (
      'summary' => '调用DsgSceneQuerySceneListByName接口，获取脱敏场景列表。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219224',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'SceneName',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '场景名称关键字',
            'description' => '脱敏场景名称的模糊查询关键字，平台会根据该关键字获取相关脱敏场景信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'dev_',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<List<DsgSceneVO>>',
            'description' => 'OpenApiResultModel<List<DsgSceneVO>>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回数据。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Id' => 
                    array (
                      'description' => '脱敏场景ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '123',
                    ),
                    'SceneCode' => 
                    array (
                      'description' => '一级脱敏场景Code。取值如下：
- 数据开发/数据地图展示脱敏：dataworks_display_desense_code
- MaxCompute引擎层脱敏：maxcompute_desense_code
- MaxCompute引擎层脱敏（新）：maxcompute_new_desense_code
- Hologres引擎层脱敏：hologres_display_desense_code
- 数据集成静态脱敏：dataworks_data_integration_desense_code
- 数据分析展示脱敏：dataworks_analysis_desense_code',
                      'type' => 'string',
                      'example' => 'dataworks_display_desense_code',
                    ),
                    'Desc' => 
                    array (
                      'description' => '脱敏场景描述信息。',
                      'type' => 'string',
                      'example' => '测试用场景',
                    ),
                    'SceneName' => 
                    array (
                      'description' => '脱敏场景名称。',
                      'type' => 'string',
                      'example' => 'test_scene',
                    ),
                    'UserGroups' => 
                    array (
                      'description' => '脱敏场景的用户组名称列表。使用英文逗号（,）隔开。',
                      'type' => 'string',
                      'example' => 'user1,user2',
                    ),
                    'SceneLevel' => 
                    array (
                      'description' => '脱敏场景级别。取值如下：
- 0：一级场景
- 1：二级场景',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '1',
                    ),
                    'Projects' => 
                    array (
                      'description' => '脱敏场景生效的引擎信息。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'description' => '脱敏场景生效的引擎信息。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'DbType' => 
                          array (
                            'description' => '引擎类型。取值如下：
- ODPS：ODPS.ODPS
- HOLO：HOLO.POSTGRES
- EMR：EMR',
                            'type' => 'string',
                            'example' => 'ODPS.ODPS',
                          ),
                          'ProjectName' => 
                          array (
                            'description' => '引擎实例名称。',
                            'type' => 'string',
                            'example' => 'dev_project',
                          ),
                          'ClusterId' => 
                          array (
                            'description' => 'EMR集群ID。仅当脱敏场景生效的数据范围为EMR引擎时，会返回该参数。',
                            'type' => 'string',
                            'example' => 'c-1234',
                          ),
                        ),
                      ),
                    ),
                    'Children' => 
                    array (
                      'description' => '多级脱敏场景参数信息。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'description' => '若存在多级脱敏场景（即脱敏场景存在父子节点嵌套），则此处为嵌套的脱敏场景信息。参数与外层参数相同。',
                        'type' => 'any',
                        'example' => '$ref',
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'DESENSSCENE.ID.ERROR',
            'errorMessage' => 'The desensitization scenario ID does not match or does not exist with the tenant.',
          ),
          1 => 
          array (
            'errorCode' => 'DESENSSCENE.IDLEVEL.ERROR',
            'errorMessage' => 'The desensitization scenario is not a secondary scenario.',
          ),
          2 => 
          array (
            'errorCode' => 'DESENSSCENE.PROJECT.ERROR',
            'errorMessage' => 'The project space does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'DESENSSCENE.SIZE.ERROR',
            'errorMessage' => 'The number of desens scene exceeds the limit.',
          ),
          4 => 
          array (
            'errorCode' => 'DESENSSCENE.UESRGROUP.ERROR',
            'errorMessage' => 'The user group ID does not match the tenant or does not exist.',
          ),
          5 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": [\\n    {\\n      \\"Id\\": 123,\\n      \\"SceneCode\\": \\"dataworks_display_desense_code\\",\\n      \\"Desc\\": \\"测试用场景\\",\\n      \\"SceneName\\": \\"test_scene\\",\\n      \\"UserGroups\\": \\"user1,user2\\",\\n      \\"SceneLevel\\": 1,\\n      \\"Projects\\": [\\n        {\\n          \\"DbType\\": \\"ODPS.ODPS\\",\\n          \\"ProjectName\\": \\"dev_project\\",\\n          \\"ClusterId\\": \\"c-1234\\"\\n        }\\n      ],\\n      \\"Children\\": [\\n        \\"$ref\\"\\n      ]\\n    }\\n  ],\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgSceneQuerySceneListByNameResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>\\n        <Id>123</Id>\\n        <SceneCode>dataworks_display_desense_code</SceneCode>\\n        <Desc>测试用场景</Desc>\\n        <SceneName>test_scene</SceneName>\\n        <UserGroups>user1,user2</UserGroups>\\n        <SceneLevel>1</SceneLevel>\\n        <Projects>\\n            <DbType>ODPS.ODPS</DbType>\\n            <ProjectName>dev_project</ProjectName>\\n            <ClusterId>c-1234</ClusterId>\\n        </Projects>\\n        <Children>$ref</Children>\\n    </Data>\\n    <RequestId>102400001</RequestId>\\n</DsgSceneQuerySceneListByNameResponse>","errorExample":""}]',
      'title' => '获取脱敏场景列表',
    ),
    'DsgUserGroupAddOrUpdate' => 
    array (
      'summary' => '调用DsgUserGroupAddOrUpdate接口，新增或编辑数据保护伞中的用户组。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219456',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'UserGroups',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '用户组信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '用户组信息。',
              'type' => 'object',
              'properties' => 
              array (
                'Id' => 
                array (
                  'description' => '用户组ID。
- 不配置该参数：表示当前操作为新增用户组。
- 配置该参数：表示编辑指定用户组信息。您可调用[DsgUserGroupQueryList](~~2786441~~)接口查询用户组ID。',
                  'type' => 'integer',
                  'format' => 'int64',
                  'required' => false,
                  'example' => '123',
                ),
                'Name' => 
                array (
                  'description' => '用户组名称。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'yun_group',
                ),
                'Owner' => 
                array (
                  'description' => '用户组的负责人。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'user1',
                ),
                'Accounts' => 
                array (
                  'description' => '用户组中的用户列表。
- 基于阿里云账号及RAM角色创建的用户组：可调用[DsgUserGroupQueryUserList](~~2786445~~)接口查询用户列表。
- 基于MaxCompute角色创建的用户组：可调用[DsgUserGroupGetOdpsRoleGroups](~~2785695~~)接口查询用户列表。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '输入用户名或MaxCompute角色。该参数需基于UserGroupType参数的取值配置。',
                    'type' => 'string',
                    'required' => false,
                    'example' => 'user1',
                  ),
                  'required' => true,
                ),
                'ProjectName' => 
                array (
                  'description' => 'MaxCompute项目名称。创建MaxCompute用户组时必须配置该参数。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'dev_project',
                ),
                'UserGroupType' => 
                array (
                  'description' => '用户组类型。取值如下：
- 1：阿里云用户
- 2：RAM角色
- 3：MaxCompute角色',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => true,
                  'example' => '1',
                ),
              ),
              'required' => true,
            ),
            'required' => true,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Boolean>',
            'description' => 'OpenApiResultModel<Boolean>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '操作结果。取值如下：
- true：操作成功。
- false：操作失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'USERGROUP.ACCOUNTLISTSIZE.ERROR',
            'errorMessage' => 'The number of account exceeds the limit.',
          ),
          1 => 
          array (
            'errorCode' => 'USERGROUP.ID.ERROR',
            'errorMessage' => 'The user group ID does not match the tenant or does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'USERGROUP.LISTSIZE.ERROR',
            'errorMessage' => 'The number of user groups exceeds the limit.',
          ),
          3 => 
          array (
            'errorCode' => 'USERGROUP.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          4 => 
          array (
            'errorCode' => 'USERACCOUNT.OWNER.ERROR',
            'errorMessage' => 'User list or owner user does not exist.',
          ),
          5 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgUserGroupAddOrUpdateResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>102400001</RequestId>\\n</DsgUserGroupAddOrUpdateResponse>","errorExample":""}]',
      'title' => '新增或编辑数据保护伞中的用户组',
    ),
    'DsgUserGroupQueryList' => 
    array (
      'summary' => '调用DsgUserGroupQueryList接口，查询数据保护伞的用户组列表。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219454',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '页码',
            'description' => '分页的页码数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '页大小',
            'description' => '每页显示的条数，最大为100。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '用户组名称',
            'description' => '用户组名称关键字。平台会根据该关键字模糊匹配，查询相关用户组信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'yun_group',
          ),
        ),
        3 => 
        array (
          'name' => 'Owner',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '负责人',
            'description' => '用户组的负责人。',
            'type' => 'string',
            'required' => false,
            'example' => 'user1',
          ),
        ),
        4 => 
        array (
          'name' => 'ProjectName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '引擎名称。如需查询MaxCompute用户组信息，可配置该参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'dev_project',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<PagingResultModel<UserGroupQueryListVO>>',
            'description' => 'OpenApiResultModel<PagingResultModel<UserGroupQueryListVO>>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'PageData' => 
              array (
                'description' => '分页数据查询结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '分页的页码数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，最大为100。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '返回的用户组总条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Data' => 
                  array (
                    'description' => '用户组列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '用户组信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Accounts' => 
                        array (
                          'description' => '用户组中的用户名集合。',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '用户名。',
                            'type' => 'string',
                            'example' => 'user1',
                          ),
                        ),
                        'Id' => 
                        array (
                          'description' => '用户组ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '123',
                        ),
                        'GmtCreate' => 
                        array (
                          'description' => '用户组的创建时间。',
                          'type' => 'string',
                          'example' => '2024-05-10 17:14:44',
                        ),
                        'GmtModified' => 
                        array (
                          'description' => '用户组的修改时间。',
                          'type' => 'string',
                          'example' => '2024-05-10 17:14:44',
                        ),
                        'Name' => 
                        array (
                          'description' => '用户组名称。',
                          'type' => 'string',
                          'example' => 'test_group',
                        ),
                        'Owner' => 
                        array (
                          'description' => '用户组负责人。',
                          'type' => 'string',
                          'example' => 'user1',
                        ),
                      ),
                    ),
                    'example' => '{     "accounts": [         "role_project_scheduler"     ],     "gmtCreate": "2024-05-10 15:22:18",     "gmtModified": "2024-05-10 15:22:18",     "id": 1955,     "name": "dsg_fin_test-复制",     "owner": "UAT" }',
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
          1 => 
          array (
            'errorCode' => 'USERGROUP.ACCOUNTLISTSIZE.ERROR',
            'errorMessage' => 'The number of account exceeds the limit.',
          ),
          2 => 
          array (
            'errorCode' => 'USERGROUP.ID.ERROR',
            'errorMessage' => 'The user group ID does not match the tenant or does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'USERGROUP.LISTSIZE.ERROR',
            'errorMessage' => 'The number of user groups exceeds the limit.',
          ),
          4 => 
          array (
            'errorCode' => 'USERGROUP.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          5 => 
          array (
            'errorCode' => 'USERACCOUNT.OWNER.ERROR',
            'errorMessage' => 'User list or owner user does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"PageData\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Data\\": [\\n      {\\n        \\"Accounts\\": [\\n          \\"user1\\"\\n        ],\\n        \\"Id\\": 123,\\n        \\"GmtCreate\\": \\"2024-05-10 17:14:44\\",\\n        \\"GmtModified\\": \\"2024-05-10 17:14:44\\",\\n        \\"Name\\": \\"test_group\\",\\n        \\"Owner\\": \\"user1\\"\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgUserGroupQueryListResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <PageData>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Data>\\n            <Accounts>user1</Accounts>\\n            <Id>123</Id>\\n            <GmtCreate>2024-05-10 17:14:44</GmtCreate>\\n            <GmtModified>2024-05-10 17:14:44</GmtModified>\\n            <Name>test_group</Name>\\n            <Owner>user1</Owner>\\n        </Data>\\n    </PageData>\\n    <RequestId>102400001</RequestId>\\n</DsgUserGroupQueryListResponse>","errorExample":""}]',
      'title' => '查询数据保护伞的用户组列表',
    ),
    'DsgUserGroupQueryUserList' => 
    array (
      'summary' => '调用DsgUserGroupQueryUserList接口，查询当前租户下的用户或角色列表。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219455',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<List<UserGroupQueryUserListVO>>',
            'description' => 'OpenApiResultModel<List<UserGroupQueryUserListVO>>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回的用户信息。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'AccountName' => 
                    array (
                      'description' => '用户名称。',
                      'type' => 'string',
                      'example' => 'user1',
                    ),
                    'YunAccount' => 
                    array (
                      'description' => '阿里云用户名称或RAM角色名称。基于阿里云账号或RAM角色创建用户组时需使用该参数的返回值。',
                      'type' => 'string',
                      'example' => 'user:user1',
                    ),
                    'AccountType' => 
                    array (
                      'description' => '用户类型。取值如下：
- 1~5：表示阿里云用户。
- 6：表示RAM角色。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '2',
                    ),
                    'BaseId' => 
                    array (
                      'description' => '用户ID或角色ID。',
                      'type' => 'string',
                      'example' => '234',
                    ),
                    'ParentAccountId' => 
                    array (
                      'description' => '父用户ID。RAM用户会涉及该参数。',
                      'type' => 'string',
                      'example' => '123',
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'USERGROUP.ACCOUNTLISTSIZE.ERROR',
            'errorMessage' => 'The number of account exceeds the limit.',
          ),
          1 => 
          array (
            'errorCode' => 'USERGROUP.ID.ERROR',
            'errorMessage' => 'The user group ID does not match the tenant or does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'USERGROUP.LISTSIZE.ERROR',
            'errorMessage' => 'The number of user groups exceeds the limit.',
          ),
          3 => 
          array (
            'errorCode' => 'USERGROUP.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          4 => 
          array (
            'errorCode' => 'USERACCOUNT.OWNER.ERROR',
            'errorMessage' => 'User list or owner user does not exist.',
          ),
          5 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": [\\n    {\\n      \\"AccountName\\": \\"user1\\",\\n      \\"YunAccount\\": \\"user:user1\\",\\n      \\"AccountType\\": 2,\\n      \\"BaseId\\": \\"234\\",\\n      \\"ParentAccountId\\": \\"123\\"\\n    }\\n  ],\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgUserGroupQueryUserListResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>\\n        <AccountName>user1</AccountName>\\n        <YunAccount>user:user1</YunAccount>\\n        <AccountType>2</AccountType>\\n        <BaseId>234</BaseId>\\n        <ParentAccountId>123</ParentAccountId>\\n    </Data>\\n    <RequestId>102400001</RequestId>\\n</DsgUserGroupQueryUserListResponse>","errorExample":""}]',
      'title' => '查询当前租户下的用户或角色列表',
    ),
    'DsgDesensPlanQueryList' => 
    array (
      'summary' => '调用DsgDesensPlanQueryList接口，查询数据保护伞的脱敏规则列表。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219758',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页的页数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的数据条数，最大为100。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '10',
          ),
        ),
        2 => 
        array (
          'name' => 'SceneId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '二级脱敏场景ID。您可调用[DsgSceneQuerySceneListByName](~~2786322~~)接口获取。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '123',
          ),
        ),
        3 => 
        array (
          'name' => 'RuleName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '敏感字段名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'phone',
          ),
        ),
        4 => 
        array (
          'name' => 'Owner',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '脱敏规则的负责人。',
            'type' => 'string',
            'required' => false,
            'example' => 'user1',
          ),
        ),
        5 => 
        array (
          'name' => 'Status',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '脱敏规则的生效状态。取值如下：
- 0：失效。
- 1：生效。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<PagingResultModel<DesensPlanQueryListVO>>',
            'description' => 'OpenApiResultModel<PagingResultModel<DesensPlanQueryListVO>>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'PageData' => 
              array (
                'description' => '分页数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的数据条数，最大为100。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '返回的脱敏规则条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'Data' => 
                  array (
                    'description' => '脱敏规则信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '脱敏规则信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Id' => 
                        array (
                          'title' => '脱敏规则id',
                          'description' => '脱敏规则ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123',
                        ),
                        'DataType' => 
                        array (
                          'title' => '敏感类型',
                          'description' => '敏感字段类型。',
                          'type' => 'string',
                          'example' => 'phone',
                        ),
                        'RuleName' => 
                        array (
                          'title' => '脱敏规则名称',
                          'description' => '脱敏规则名称。',
                          'type' => 'string',
                          'example' => 'phone_hash',
                        ),
                        'DesensPlan' => 
                        array (
                          'title' => '脱敏规则详情',
                          'description' => '脱敏规则详情。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'DesensPlanType' => 
                            array (
                              'description' => '脱敏规则类型。',
                              'type' => 'string',
                              'example' => 'hash',
                            ),
                            'ExtParam' => 
                            array (
                              'description' => '脱敏规则参数。参数信息可参考[DsgDesensPlanAddOrUpdate](~~2786295~~)接口文档。',
                              'type' => 'object',
                              'additionalProperties' => 
                              array (
                                'type' => 'any',
                                'example' => '"extParam": {             "algo":"MD5",             "salt":"5"           }',
                                'description' => '脱敏规则参数详情。',
                              ),
                            ),
                          ),
                        ),
                        'Owner' => 
                        array (
                          'title' => '负责人',
                          'description' => '脱敏规则的负责人。',
                          'type' => 'string',
                          'example' => 'user1',
                        ),
                        'GmtCreate' => 
                        array (
                          'title' => '规则创建时间',
                          'description' => '脱敏规则的创建时间。',
                          'type' => 'string',
                          'example' => '2024-05-09 15:46:20',
                        ),
                        'GmtModified' => 
                        array (
                          'title' => '规则修改时间',
                          'description' => '脱敏规则的修改时间。',
                          'type' => 'string',
                          'example' => '2024-05-09 15:46:20',
                        ),
                        'Status' => 
                        array (
                          'title' => '生效状态0/1',
                          'description' => '脱敏规则的生效状态。取值如下：
- 0：失效。
- 1：生效。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'DesensWay' => 
                        array (
                          'title' => '脱敏方式',
                          'description' => '脱敏方式。',
                          'type' => 'string',
                          'example' => 'HASH',
                        ),
                        'DesenMode' => 
                        array (
                          'title' => '脱敏方式类型',
                          'description' => '脱敏方式类型。',
                          'type' => 'string',
                          'example' => 'HASH',
                        ),
                        'DesensRule' => 
                        array (
                          'title' => '脱敏规则',
                          'description' => '脱敏规则。',
                          'type' => 'string',
                          'example' => 'HASH',
                        ),
                        'SceneCode' => 
                        array (
                          'title' => '一级场景code',
                          'description' => '脱敏规则所属的一级脱敏场景Code。取值如下：
- 数据开发/数据地图展示脱敏：dataworks_display_desense_code
- MaxCompute引擎层脱敏：maxcompute_desense_code
- MaxCompute引擎层脱敏（新）：maxcompute_new_desense_code
- Hologres引擎层脱敏：hologres_display_desense_code
- 数据集成静态脱敏：dataworks_data_integration_desense_code
- 数据分析展示脱敏：dataworks_analysis_desense_code',
                          'type' => 'string',
                          'example' => 'dataworks_display_desense_code',
                        ),
                        'CheckWatermark' => 
                        array (
                          'title' => '是否插入水印',
                          'description' => '是否添加水印。取值如下：
- true：添加。
- false：不添加。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'SceneName' => 
                        array (
                          'title' => '二级场景名称',
                          'description' => '脱敏规则所属的二级脱敏场景名称。',
                          'type' => 'string',
                          'example' => 'test_scene',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'DESENSPLAN.DATATYPE.ERROR',
            'errorMessage' => 'Sensitive type already has a desensitization rule.',
          ),
          1 => 
          array (
            'errorCode' => 'DESENSPLAN.DATATYPENOTEXIST.ERROR',
            'errorMessage' => 'Sensitive type not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'DESENSPLAN.ID.ERROR',
            'errorMessage' => 'Desensitization rule ID does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'DESENSPLAN.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          4 => 
          array (
            'errorCode' => 'DESENSPLAN.PARAM.ERROR',
            'errorMessage' => 'Desensitization rule parameter error.',
          ),
          5 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENECODE.ERROR',
            'errorMessage' => 'Scene code does not exist.',
          ),
          6 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENEID.ERROR',
            'errorMessage' => 'Scene ID does not exist.',
          ),
          7 => 
          array (
            'errorCode' => 'DESENSPLAN.SCENEIDLEVEL.ERROR',
            'errorMessage' => 'The scene is not a secondary scene.',
          ),
          8 => 
          array (
            'errorCode' => 'DESENSPLAN.SIZE.ERROR',
            'errorMessage' => 'The number of desens plan exceeds the limit.',
          ),
          9 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"PageData\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 100,\\n    \\"Data\\": [\\n      {\\n        \\"Id\\": 123,\\n        \\"DataType\\": \\"phone\\",\\n        \\"RuleName\\": \\"phone_hash\\",\\n        \\"DesensPlan\\": {\\n          \\"DesensPlanType\\": \\"hash\\",\\n          \\"ExtParam\\": {\\n            \\"key\\": \\"\\\\\\"extParam\\\\\\": {             \\\\\\"algo\\\\\\":\\\\\\"MD5\\\\\\",             \\\\\\"salt\\\\\\":\\\\\\"5\\\\\\"           }\\"\\n          }\\n        },\\n        \\"Owner\\": \\"user1\\",\\n        \\"GmtCreate\\": \\"2024-05-09 15:46:20\\",\\n        \\"GmtModified\\": \\"2024-05-09 15:46:20\\",\\n        \\"Status\\": 1,\\n        \\"DesensWay\\": \\"HASH\\",\\n        \\"DesenMode\\": \\"HASH\\",\\n        \\"DesensRule\\": \\"HASH\\",\\n        \\"SceneCode\\": \\"dataworks_display_desense_code\\",\\n        \\"CheckWatermark\\": true,\\n        \\"SceneName\\": \\"test_scene\\"\\n      }\\n    ]\\n  },\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgDesensPlanQueryListResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <PageData>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>100</TotalCount>\\n        <Data>\\n            <Id>123</Id>\\n            <DataType>phone</DataType>\\n            <RuleName>phone_hash</RuleName>\\n            <DesensPlan>\\n                <DesensPlanType>hash</DesensPlanType>\\n                <ExtParam>\\n                    <key>\\"extParam\\": {             \\"algo\\":\\"MD5\\",             \\"salt\\":\\"5\\"           }</key>\\n                </ExtParam>\\n            </DesensPlan>\\n            <Owner>user1</Owner>\\n            <GmtCreate>2024-05-09 15:46:20</GmtCreate>\\n            <GmtModified>2024-05-09 15:46:20</GmtModified>\\n            <Status>1</Status>\\n            <DesensWay>HASH</DesensWay>\\n            <DesenMode>HASH</DesenMode>\\n            <DesensRule>HASH</DesensRule>\\n            <SceneCode>dataworks_display_desense_code</SceneCode>\\n            <CheckWatermark>true</CheckWatermark>\\n            <SceneName>test_scene</SceneName>\\n        </Data>\\n    </PageData>\\n    <RequestId>102400001</RequestId>\\n</DsgDesensPlanQueryListResponse>","errorExample":""}]',
      'title' => '脱敏规则列表',
    ),
    'DsgWhiteListAddOrUpdate' => 
    array (
      'summary' => '调用DsgWhiteListAddOrUpdate接口，新增或编辑脱敏白名单。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219461',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'WhiteLists',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '白名单集合。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '白名单信息。',
              'type' => 'object',
              'properties' => 
              array (
                'RuleId' => 
                array (
                  'description' => '脱敏规则ID。您可调用[DsgDesensPlanQueryList](~~2786578~~)接口获取。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => true,
                  'example' => '123',
                ),
                'Id' => 
                array (
                  'description' => '脱敏白名单ID。
- 不配置该参数：表示当前操作为新增脱敏白名单。
- 配置该参数：表示编辑指定脱敏白名单信息。您可调用[DsgWhiteListQueryList](~~2786508~~)接口查询白名单ID。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '123',
                ),
                'StartTime' => 
                array (
                  'description' => '脱敏白名单的生效时间。',
                  'type' => 'string',
                  'required' => true,
                  'example' => '2024-04-10 00:00:00',
                ),
                'EndTime' => 
                array (
                  'description' => '脱敏白名单的失效时间。输入null表示白名单永久生效。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'null',
                ),
                'UserGroupIds' => 
                array (
                  'description' => '用户组ID集合。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '用户组ID。您可调用[DsgUserGroupQueryList](~~2786441~~)接口获取。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'required' => false,
                    'example' => '123',
                  ),
                  'required' => true,
                ),
              ),
              'required' => false,
            ),
            'required' => true,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<Boolean>',
            'description' => 'OpenApiResultModel<Boolean>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '操作结果。取值如下：
- true：操作成功。
- false：操作失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'WHITELIST.DESENSID.ERROR',
            'errorMessage' => 'The desensitization rule ID does not match or does not exist with the tenant.',
          ),
          1 => 
          array (
            'errorCode' => 'WHITELIST.ENDTIME.ERROR',
            'errorMessage' => 'end time cannot be earlier than start time.',
          ),
          2 => 
          array (
            'errorCode' => 'WHITELIST.ID.ERROR',
            'errorMessage' => 'The whitelist ID does not match or does not exist with the tenant.',
          ),
          3 => 
          array (
            'errorCode' => 'WHITELIST.MCPROJECT.ERROR',
            'errorMessage' => 'The projectName on the bottom layer desensitization whitelist of MC cannot be empty.',
          ),
          4 => 
          array (
            'errorCode' => 'WHITELIST.PAGESIZE.ERROR',
            'errorMessage' => 'Page size is too large, maximum of 100.',
          ),
          5 => 
          array (
            'errorCode' => 'WHITELIST.SIZE.ERROR',
            'errorMessage' => 'The number of white list exceeds the limit.',
          ),
          6 => 
          array (
            'errorCode' => 'WHITELIST.STARTTIME.ERROR',
            'errorMessage' => 'start time cannot be earlier than today.',
          ),
          7 => 
          array (
            'errorCode' => 'WHITELIST.TIMEFORMAT.ERROR',
            'errorMessage' => 'The time format is incorrect, please use yyyy MM dd HH: mm: ss format.',
          ),
          8 => 
          array (
            'errorCode' => 'WHITELIST.USERGROUP.ERROR',
            'errorMessage' => 'The user group ID does not match or does not exist with the tenant.',
          ),
          9 => 
          array (
            'errorCode' => 'WHITELIST.USERGROUPEMPTY.ERROR',
            'errorMessage' => 'User group ID cannot be empty.',
          ),
          10 => 
          array (
            'errorCode' => 'WHITELIST.USERGROUPLISTSIZE.ERROR',
            'errorMessage' => 'The number of user group exceeds the limit.',
          ),
          11 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgWhiteListAddOrUpdateResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>true</Data>\\n    <RequestId>102400001</RequestId>\\n</DsgWhiteListAddOrUpdateResponse>","errorExample":""}]',
      'title' => '新增或编辑脱敏白名单',
    ),
    'DsgQueryDefaultTemplates' => 
    array (
      'summary' => '调用DsgQueryDefaultTemplates接口，查询可选择的敏感类型模版列表及该模版支持的脱敏规则。您可参考该接口的返回参数配置脱敏规则。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '219249',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZM9W6',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'SceneId',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '二级场景id',
            'description' => '二级脱敏场景ID。您可调用[DsgSceneQuerySceneListByName](~~2786322~~)接口获取。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'example' => '123',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'OpenApiResultModel<List<QueryDefaultTemplatesVO>>',
            'description' => 'OpenApiResultModel<List<QueryDefaultTemplatesVO>>',
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1029030003',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'param error',
              ),
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '400',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回数据。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'DataType' => 
                    array (
                      'description' => '敏感字段类型。',
                      'type' => 'string',
                      'example' => 'phone',
                    ),
                    'DesensPlanTemplate' => 
                    array (
                      'description' => '支持的脱敏方式及参数说明列表。',
                      'type' => 'object',
                      'additionalProperties' => 
                      array (
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Name' => 
                            array (
                              'type' => 'string',
                              'example' => 'hash',
                              'description' => '脱敏方式名称。',
                            ),
                            'SupportWaterMark' => 
                            array (
                              'type' => 'boolean',
                              'example' => 'true',
                              'description' => '是否允许添加水印。取值如下：
- true：允许。
- false：不允许。',
                            ),
                            'ExtParamTemplate' => 
                            array (
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'any',
                                'description' => '支持的脱敏规则及相关参数配置参考，Json格式。
该返回结果仅作为脱敏规则相关参数的解释说明，不能够直接作为用于创建或编辑脱敏规则的输入参数使用。',
                                'example' => '{                     "key": "algo",                     "valueEnum": [                         "MD5",                         "SHA256",                         "SHA512",                         "SM3"                     ],                     "valueType": "string"                 },                 {                     "key": "salt",                     "valueEnum": [                         1,                         2,                         3,                         4,                         5,                         6,                         7,                         8,                         9                     ],                     "valueType": "int"                 }',
                              ),
                              'description' => '脱敏参数及其说明列表。',
                            ),
                          ),
                          'description' => '脱敏方式及参数信息。',
                        ),
                        'description' => '脱敏方式及参数信息。',
                      ),
                    ),
                  ),
                ),
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '102400001',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'DESENSTEMPLATE.SCENE.ERROR',
            'errorMessage' => 'Scene ID does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'DESENSTEMPLATE.SCENELEVEL.ERROR',
            'errorMessage' => 'The scene is not a secondary scene.',
          ),
          2 => 
          array (
            'errorCode' => 'PARAMS.ERROR',
            'errorMessage' => 'param error.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'PERMISSION.DENIED.ERROR',
            'errorMessage' => 'Permission denied',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UNKNOWN.ERROR',
            'errorMessage' => 'unknown error.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1029030003\\",\\n  \\"ErrorMessage\\": \\"param error\\",\\n  \\"HttpStatusCode\\": 400,\\n  \\"Data\\": [\\n    {\\n      \\"DataType\\": \\"phone\\",\\n      \\"DesensPlanTemplate\\": {\\n        \\"key\\": [\\n          {\\n            \\"Name\\": \\"hash\\",\\n            \\"SupportWaterMark\\": true,\\n            \\"ExtParamTemplate\\": [\\n              \\"{                     \\\\\\"key\\\\\\": \\\\\\"algo\\\\\\",                     \\\\\\"valueEnum\\\\\\": [                         \\\\\\"MD5\\\\\\",                         \\\\\\"SHA256\\\\\\",                         \\\\\\"SHA512\\\\\\",                         \\\\\\"SM3\\\\\\"                     ],                     \\\\\\"valueType\\\\\\": \\\\\\"string\\\\\\"                 },                 {                     \\\\\\"key\\\\\\": \\\\\\"salt\\\\\\",                     \\\\\\"valueEnum\\\\\\": [                         1,                         2,                         3,                         4,                         5,                         6,                         7,                         8,                         9                     ],                     \\\\\\"valueType\\\\\\": \\\\\\"int\\\\\\"                 }\\"\\n            ]\\n          }\\n        ]\\n      }\\n    }\\n  ],\\n  \\"RequestId\\": \\"102400001\\"\\n}","errorExample":""},{"type":"xml","example":"<DsgQueryDefaultTemplatesResponse>\\n    <Success>true</Success>\\n    <ErrorCode>1029030003</ErrorCode>\\n    <ErrorMessage>param error</ErrorMessage>\\n    <HttpStatusCode>400</HttpStatusCode>\\n    <Data>\\n        <DataType>phone</DataType>\\n        <DesensPlanTemplate>\\n            <Name>hash</Name>\\n            <SupportWaterMark>true</SupportWaterMark>\\n            <ExtParamTemplate>{                     \\"key\\": \\"algo\\",                     \\"valueEnum\\": [                         \\"MD5\\",                         \\"SHA256\\",                         \\"SHA512\\",                         \\"SM3\\"                     ],                     \\"valueType\\": \\"string\\"                 },                 {                     \\"key\\": \\"salt\\",                     \\"valueEnum\\": [                         1,                         2,                         3,                         4,                         5,                         6,                         7,                         8,                         9                     ],                     \\"valueType\\": \\"int\\"                 }</ExtParamTemplate>\\n        </DesensPlanTemplate>\\n    </Data>\\n    <RequestId>102400001</RequestId>\\n</DsgQueryDefaultTemplatesResponse>","errorExample":""}]',
      'title' => '查询可选择的敏感类型模版列表及详情',
    ),
    'CreateImportMigration' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78187',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks管控台，进入工作空间配置页面获取工作空间ID。
',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'example' => '123456',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '创建的导入任务的名称。项目空间内该名称必须唯一。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'test_import_001',
          ),
        ),
        2 => 
        array (
          'name' => 'PackageType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '导入导出包的类型，取值如下：
- DATAWORKS_MODEL（标准格式）
- DATAWORKS_V2（专有云（V3.6.1-V3.11））
- DATAWORKS_V3（专有云（V3.12及以上））
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DATAWORKS_MODEL',
            'enum' => 
            array (
              0 => 'DATAWORKS_MODEL',
              1 => 'DATAWOKRS_V2',
              2 => 'DATAWORKS_V3',
              3 => 'SPEC',
            ),
          ),
        ),
        3 => 
        array (
          'name' => 'PackageFile',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '导入包文件路径。
**注意：本接口导入文件涉及文件上传。方式调用举例如下：**

```java
        Config config = new Config();
        config.setAccessKeyId(accessId);
        config.setAccessKeySecret(accessKey);
        config.setEndpoint(popEndpoint);
        config.setRegionId(regionId);

        Client client = new Client(config);

        CreateImportMigrationAdvanceRequest request = new CreateImportMigrationAdvanceRequest();
        request.setName("test_migration_api_" + System.currentTimeMillis());
        request.setProjectId(123456L); 
        request.setPackageType("DATAWORKS_MODEL");
        request.setPackageFileObject(new FileInputStream("/home/admin/Downloads/test.zip"));

        RuntimeOptions runtime = new RuntimeOptions();
        CreateImportMigrationResponse response = client.createImportMigrationAdvance(request, runtime);
```',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '/home/admin/xxx/import.zip',
            'isFileTransferUrl' => true,
          ),
        ),
        4 => 
        array (
          'name' => 'ResourceGroupMap',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度资源组和数据集成资源组的映射关系。映射的key和value均为资源组的标识符（identifier）， 格式如下：

```json
{
    "SCHEDULER_RESOURCE_GROUP": {
        "xxx": "yyy"
    },
    "DI_RESOURCE_GROUP": {
        "ccc": "dfdd"
    }
}
```',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '{"SCHEDULER_RESOURCE_GROUP": {"xxx":"yyy"},"DI_RESOURCE_GROUP":{"ccc":"ddd"}}',
          ),
        ),
        5 => 
        array (
          'name' => 'WorkspaceMap',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '用于在执行导入导出操作时，根据该映射关系，修改导入导出包里的输入输出项目空间名称为映射后的项目空间名称。例如，导入时会根据映射关系，把输入输出里的项目空间名称的前缀做相应替换。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '{"test_workspace_src": "test_workspace_target"}',
          ),
        ),
        6 => 
        array (
          'name' => 'CalculateEngineMap',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '导入任务中，导入的源计算引擎到导出的目标计算引擎实例的映射关系。
计算引擎的类型，包括ODPS、EMR、HADOOP_CDH、HOLOGRES等。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '{     "ODPS": {       "zxy_8221431_engine": "wzp_kaifazheban_engine"     },     "EMR": {         "aaaa": "bbb"     }   }',
          ),
        ),
        7 => 
        array (
          'name' => 'CommitRule',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '执行导入操作时，设定的自动提交发布任务的规则。参数如下：
- resourceAutoCommit：资源是否自动提交。true 表示是，false表示否。
- resourceAutoDeploy：资源是否自动发布。true 表示是，false表示否。
- functionAutoCommit：函数是否自动提交。true 表示是，false表示否。
- functionAutoDeploy： 函数是否自动发布。true 表示是，false表示否。
- tableAutoCommitToDev：表是否自动提交到开发环境。true 表示是，false表示否。
- tableAutoCommitToProd：表是否自动提交到生产环境。true 表示是，false表示否。
- ignoreLock：是否自动绕过锁定。true 表示是，false表示否。当任务被其他人编辑锁定时，如果选择绕过锁定，则可以强制更新当前任务。
- fileAutoCommit：文件是否自动提交，true 表示是，false表示否。
- fileAutoDeploy：文件是否自动发布，true 表示是，false表示否。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '{     "resourceAutoCommit": false,     "resourceAutoDeploy": false,     "functionAutoCommit": false,     "functionAutoDeploy": false,     "tableAutoCommitToDev": false,     "tableAutoCommitToProd": false,     "ignoreLock": false,     "fileAutoCommit": false,     "fileAutoDeploy": false   }',
          ),
        ),
        8 => 
        array (
          'name' => 'Description',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '导入导出包的描述信息。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'test description',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '导入导出包ID。作为后续执行导入任务或获取导入任务执行进度的入参。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '123456',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'test error message',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'ADFASDFASDFA-ADFASDF-ASDFADSDF-AFFADS',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '110001123456',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 123456,\\n  \\"ErrorMessage\\": \\"test error message\\",\\n  \\"RequestId\\": \\"ADFASDFASDFA-ADFASDF-ASDFADSDF-AFFADS\\",\\n  \\"ErrorCode\\": \\"110001123456\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<CreateImportMigrationResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>123456</Data>\\n    <ErrorMessage>test error message</ErrorMessage>\\n    <RequestId>ADFASDFASDFA-ADFASDF-ASDFADSDF-AFFADS</RequestId>\\n    <ErrorCode>110001123456</ErrorCode>\\n    <Success>true</Success>\\n</CreateImportMigrationResponse>","errorExample":""}]',
      'title' => '创建导入迁移',
      'summary' => '调用CreateImportMigration创建导入任务，导入任务包含数据源信息、任务、表等对象的DataWorks导入导出包。',
      'description' => '注意：本接口导入文件涉及文件上传，方式调用举例如下：



        Config config = new Config();
        config.setAccessKeyId(accessId);
        config.setAccessKeySecret(accessKey);
        config.setEndpoint(popEndpoint);
        config.setRegionId(regionId);
        
        Client client = new Client(config);

        CreateImportMigrationAdvanceRequest request = new CreateImportMigrationAdvanceRequest();
        request.setName("test_migration_api_" + System.currentTimeMillis());
        request.setProjectId(123456L); 
        request.setPackageType("DATAWORKS_MODEL");
        request.setPackageFileObject(new FileInputStream("/home/admin/Downloads/test.zip"));

        RuntimeOptions runtime = new RuntimeOptions();
        CreateImportMigrationResponse response = client.createImportMigrationAdvance(request, runtime);
        ...
',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetMigrationProcess' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'none',
        'abilityTreeCode' => '78271',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '项目空间的ID。您可以进入DataWorks项目空间的设置页面查看。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'example' => '123456',
          ),
        ),
        1 => 
        array (
          'name' => 'MigrationId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '导入导出包的ID。您可以调用CreateImportMigration接口获取。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '123456',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'SADFSDFSD-SDFSDF-XDXCVX-ESWW',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'test error msg',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '110001123456',
              ),
              'Data' => 
              array (
                'description' => '导入导出任务的进度信息，包括导入导出任务所有步骤的名称和进度状态。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回的任务状态。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'TaskStatus' => 
                    array (
                      'description' => '导入导出任务的步骤运行状态。取值如下：

- INIT，初始状态。
- RUNNING，运行中。
- FAILURE，运行失败。
- SUCCESS，运行成功。',
                      'type' => 'string',
                      'example' => 'SUCCESS',
                    ),
                    'TaskName' => 
                    array (
                      'description' => '导入导出任务的步骤名称。',
                      'type' => 'string',
                      'example' => 'IMPORE_PREPARE',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"SADFSDFSD-SDFSDF-XDXCVX-ESWW\\",\\n  \\"ErrorMessage\\": \\"test error msg\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"110001123456\\",\\n  \\"Data\\": [\\n    {\\n      \\"TaskStatus\\": \\"SUCCESS\\",\\n      \\"TaskName\\": \\"IMPORE_PREPARE\\"\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<GetMigrationProcessResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <RequestId>SADFSDFSD-SDFSDF-XDXCVX-ESWW</RequestId>\\n    <ErrorMessage>test error msg</ErrorMessage>\\n    <Success>true</Success>\\n    <ErrorCode>110001123456</ErrorCode>\\n    <Data>\\n        <TaskStatus>SUCCESS</TaskStatus>\\n        <TaskName>IMPORE_PREPARE</TaskName>\\n    </Data>\\n</GetMigrationProcessResponse>","errorExample":""}]',
      'title' => '获取迁移过程',
      'summary' => '调用GetMigrationProcess获取导入导出任务的进度状态。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'StartMigration' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78357',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '项目空间的ID。您可以进入DataWorks项目空间的设置页面查看。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'example' => '123456',
          ),
        ),
        1 => 
        array (
          'name' => 'MigrationId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '导入导出包的ID。您可以调用[CreateImportMigration](~~206094~~)接口获取导入包ID，调用[CreateExportMigration](~~349325~~)接口获取导出包ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'example' => '123456',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '启动执行导入导出任务的状态信息。
- true，任务启动成功。
- false，任务启动失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'test error msg',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'FSDFSDF-WERWER-XVCX-DSFSDF',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '110001123445',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": true,\\n  \\"ErrorMessage\\": \\"test error msg\\",\\n  \\"RequestId\\": \\"FSDFSDF-WERWER-XVCX-DSFSDF\\",\\n  \\"ErrorCode\\": \\"110001123445\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<StartMigrationResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <Data>true</Data>\\n    <ErrorMessage>test error msg</ErrorMessage>\\n    <RequestId>FSDFSDF-WERWER-XVCX-DSFSDF</RequestId>\\n    <ErrorCode>110001123445</ErrorCode>\\n    <Success>true</Success>\\n</StartMigrationResponse>","errorExample":""}]',
      'title' => '开始迁移',
      'summary' => '调用StartMigration启动执行导入导出任务。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateExportMigration' => 
    array (
      'summary' => '使用CreateExportMigration，新建DataWorks导出任务且仅创建导出任务。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'none',
        'abilityTreeCode' => '86657',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '12345',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '导出任务的名称。

名称必须唯一，即当前DataWorks工作空间中不能存在名称重复的导出任务。',
            'type' => 'string',
            'required' => true,
            'example' => 'test_export_01',
          ),
        ),
        2 => 
        array (
          'name' => 'ExportMode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '任务的导出模式，取值如下：
- FULL：全量导出目标任务。
- INCREMENTAL：从指定的时间点开始，增量导出目标任务。选择该模式时，需要同时配置IncrementalSince参数。',
            'type' => 'string',
            'required' => true,
            'example' => 'FULL',
            'enum' => 
            array (
              0 => 'FULL',
              1 => 'INCREMENTAL',
            ),
          ),
        ),
        3 => 
        array (
          'name' => 'IncrementalSince',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '增量导出目标任务的起始时间。

当ExportMode参数配置为INCREMENTAL时，IncrementalSince参数才生效。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1589904000000',
          ),
        ),
        4 => 
        array (
          'name' => 'ExportObjectStatus',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '导出任务的状态。系统会根据所选状态导出指定状态的任务。取值如下：
- SAVED：保存状态，即导出已保存的任务。
- SUBMITTED：提交状态，即导出已提交的任务。
- DEPLOYED：发布状态，即导出已发布的任务。',
            'type' => 'string',
            'required' => false,
            'example' => 'SAVED',
            'default' => 'SAVED',
            'enum' => 
            array (
              0 => 'SAVED',
              1 => 'SUBMITTED',
              2 => 'DEPLOYED',
            ),
          ),
        ),
        5 => 
        array (
          'name' => 'Description',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '导出任务的描述信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'test',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '34267E2E-0335-1A60-A1F0-ADA530890CBA',
              ),
              'Data' => 
              array (
                'description' => '导出任务的ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '1234',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败，您可以根据请求ID定位具体问题。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"34267E2E-0335-1A60-A1F0-ADA530890CBA\\",\\n  \\"Data\\": 1234,\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<CreateExportMigrationResponse>\\n    <RequestId>34267E2E-0335-1A60-A1F0-ADA530890CBA</RequestId>\\n    <Data>1234</Data>\\n    <Success>true</Success>\\n</CreateExportMigrationResponse>","errorExample":""}]',
      'title' => '创建导出任务',
    ),
    'GetMigrationSummary' => 
    array (
      'summary' => '调用GetMigrationSummary，获取导入导出任务的信息。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'none',
        'abilityTreeCode' => '86668',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'example' => '12345',
          ),
        ),
        1 => 
        array (
          'name' => 'MigrationId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '导入导出任务的ID。

您可以调用[CreateImportMigration](~~2780280~~)接口获取导入任务的ID，调用[CreateExportMigration](~~2780281~~)接口获取导出任务的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '19999A96-71BA-1845-B455-ED620EF4E37F',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：
- true：调用成功。
- false：调用失败。您可以通过请求ID定位问题。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '请求返回的导入导出任务详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'MigrationId' => 
                  array (
                    'description' => '任务的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1234',
                  ),
                  'Name' => 
                  array (
                    'description' => '任务的名称。',
                    'type' => 'string',
                    'example' => 'test_export_01',
                  ),
                  'GmtCreate' => 
                  array (
                    'description' => '任务的创建时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1589904000000',
                  ),
                  'GmtModified' => 
                  array (
                    'description' => '任务的修改时间。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1589904000000',
                  ),
                  'CreateUser' => 
                  array (
                    'description' => '任务创建人的用户ID。',
                    'type' => 'string',
                    'example' => '982293332403****',
                  ),
                  'OpUser' => 
                  array (
                    'description' => '任务操作人的用户ID。',
                    'type' => 'string',
                    'example' => '982293332403****',
                  ),
                  'Status' => 
                  array (
                    'description' => '导入导出任务的执行状态。取值如下：
- INIT：任务为初始状态。
- EDITING：任务在编辑中。
- IMPORTING：任务在导入中。
- IMPORT_ERROR：任务导入失败。
- IMPORT_SUCCESS：任务导入成功。
- EXPORTING：任务在导出中。
- EXPORT_ERROR：任务导出失败。
- EXPORT_SUCCESS：任务导出成功。
- REVOKED：任务被取消。
- PARTIAL_SUCCESS：仅部分任务导入或导出成功。',
                    'type' => 'string',
                    'example' => 'EXPORT_SUCCESS',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '任务所在DataWorks空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '12345',
                  ),
                  'DownloadUrl' => 
                  array (
                    'description' => '导出任务包的下载链接。您可以通过该链接下载导出任务。',
                    'type' => 'string',
                    'example' => 'https://shanghai-xxx-oss.oss-cn-shanghai.aliyuncs.com/pre/store/f10_bf47_b4fa7df0860f.zip?Expires=1639540903&OSSAccessKeyId=XXXXXXeF4Lv5j&Signature=qxxxxx',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"19999A96-71BA-1845-B455-ED620EF4E37F\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"MigrationId\\": 1234,\\n    \\"Name\\": \\"test_export_01\\",\\n    \\"GmtCreate\\": 1589904000000,\\n    \\"GmtModified\\": 1589904000000,\\n    \\"CreateUser\\": \\"982293332403****\\",\\n    \\"OpUser\\": \\"982293332403****\\",\\n    \\"Status\\": \\"EXPORT_SUCCESS\\",\\n    \\"ProjectId\\": 12345,\\n    \\"DownloadUrl\\": \\"https://shanghai-xxx-oss.oss-cn-shanghai.aliyuncs.com/pre/store/f10_bf47_b4fa7df0860f.zip?Expires=1639540903&OSSAccessKeyId=XXXXXXeF4Lv5j&Signature=qxxxxx\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMigrationSummaryResponse>\\n    <RequestId>19999A96-71BA-1845-B455-ED620EF4E37F</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <MigrationId>1234</MigrationId>\\n        <Name>test_export_01</Name>\\n        <GmtCreate>1589904000000</GmtCreate>\\n        <GmtModified>1589904000000</GmtModified>\\n        <CreateUser>982293332403****</CreateUser>\\n        <OpUser>982293332403****</OpUser>\\n        <Status>EXPORT_SUCCESS</Status>\\n        <ProjectId>12345</ProjectId>\\n        <DownloadUrl>https://shanghai-xxx-oss.oss-cn-shanghai.aliyuncs.com/pre/store/f10_bf47_b4fa7df0860f.zip?Expires=1639540903&amp;OSSAccessKeyId=XXXXXXeF4Lv5j&amp;Signature=qxxxxx</DownloadUrl>\\n    </Data>\\n</GetMigrationSummaryResponse>","errorExample":""}]',
      'title' => '获取导入导出任务的信息',
    ),
    'ListMigrations' => 
    array (
      'summary' => '获取导入导出迁移任务列表。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'none',
        'abilityTreeCode' => '134647',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => 'Workspace Id',
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'exclusiveMinimum' => false,
            'example' => '12345',
          ),
        ),
        1 => 
        array (
          'name' => 'MigrationType',
          'in' => 'formData',
          'schema' => 
          array (
            'title' => 'Migration operation type, IMPORT/EXPORT',
            'description' => '迁移任务的操作类型。包括：IMPORT、EXPORT。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'enumValueTitles' => 
            array (
            ),
            'example' => 'IMPORT',
            'enum' => 
            array (
              0 => 'IMPORT',
              1 => 'EXPORT',
            ),
          ),
        ),
        2 => 
        array (
          'name' => 'Owner',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '负责人的ID。',
            'type' => 'string',
            'required' => false,
            'example' => '193379****',
          ),
        ),
        3 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求数据的页码数。默认值：1 ，最大值100
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '每页显示的数据条数，默认值10，最大值为100。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '10',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID，一次请求的唯一标识。',
                'type' => 'string',
                'example' => 'F9198AA3-9010-53D5-9714-DC4461427D3E',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Migrations' => 
                  array (
                    'description' => '迁移任务列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '迁移任务。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Id' => 
                        array (
                          'description' => '主键ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '436064',
                        ),
                        'Name' => 
                        array (
                          'description' => '任务名称。',
                          'type' => 'string',
                          'example' => 'test_task_1638498642279',
                        ),
                        'PackageType' => 
                        array (
                          'description' => '导入导出包的类型，取值如下：
- DWMA（标准格式）
- DATAWORKS_MODEL（标准格式）
- DATAWORKS_V2（专有云（V3.6.1-V3.11））
- DATAWORKS_V3（专有云（V3.12及以上））

DWMA和DATAWORKS_MODEL可通用
',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                          ),
                          'example' => 'DATAWORKS_MODEL',
                        ),
                        'MigrationType' => 
                        array (
                          'description' => '迁移任务的操作类型。

- IMPORT
- EXPORT',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                          ),
                          'example' => 'EXPORT',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '创建时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123124123123123',
                        ),
                        'UpdateTime' => 
                        array (
                          'description' => '更新时间。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '123123123123123',
                        ),
                        'CreateUser' => 
                        array (
                          'description' => '创建人。',
                          'type' => 'string',
                          'example' => '123123****',
                        ),
                        'CreateUserName' => 
                        array (
                          'description' => '创建人名称。',
                          'type' => 'string',
                          'example' => '3h1_test',
                        ),
                        'UpdateUser' => 
                        array (
                          'description' => '更新人。',
                          'type' => 'string',
                          'example' => '1231****',
                        ),
                        'UpdateUserName' => 
                        array (
                          'description' => '更新人名称。',
                          'type' => 'string',
                          'example' => '3h1_test',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '任务所在DataWorks空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '72132',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '租户ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '16307',
                        ),
                        'Status' => 
                        array (
                          'description' => '导入导出迁移任务的执行状态。取值如下：
- INIT：任务为初始状态。
- EDITING：任务在编辑中。
- RUNNING，任务在运行中。
- FAILURE，任务运行失败。
- SUCCESS，任务运行成功。',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                          ),
                          'example' => 'SUCCESS',
                        ),
                        'Message' => 
                        array (
                          'description' => '错误信息。',
                          'type' => 'string',
                          'example' => 'An internal system error occurred. datasource kafka region is not cn-chengdu, can\'t open network for it',
                        ),
                        'DownloadUrl' => 
                        array (
                          'description' => '导出任务包的下载链接。您可以通过该链接下载导出任务。',
                          'type' => 'string',
                          'example' => 'http://geoip-sdk-user.oss-cn-zhangjiakou.aliyuncs.com/product/v1/ipv4/trace/v1.20220424123842.dex?Expires=1650780849&OSSAccessKeyId=XXXXXXeF4Lv5j&Signature=qxxxxx',
                        ),
                        'Description' => 
                        array (
                          'description' => '导出任务的描述信息。',
                          'type' => 'string',
                          'example' => '自动化测试创建',
                        ),
                      ),
                    ),
                  ),
                  'PageNumber' => 
                  array (
                    'description' => '当前的页数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大为50条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '总记录数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '20',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"F9198AA3-9010-53D5-9714-DC4461427D3E\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"Migrations\\": [\\n      {\\n        \\"Id\\": 436064,\\n        \\"Name\\": \\"test_task_1638498642279\\",\\n        \\"PackageType\\": \\"DATAWORKS_MODEL\\",\\n        \\"MigrationType\\": \\"EXPORT\\",\\n        \\"CreateTime\\": 123124123123123,\\n        \\"UpdateTime\\": 123123123123123,\\n        \\"CreateUser\\": \\"123123****\\",\\n        \\"CreateUserName\\": \\"3h1_test\\",\\n        \\"UpdateUser\\": \\"1231****\\",\\n        \\"UpdateUserName\\": \\"3h1_test\\",\\n        \\"ProjectId\\": 72132,\\n        \\"TenantId\\": 16307,\\n        \\"Status\\": \\"SUCCESS\\",\\n        \\"Message\\": \\"An internal system error occurred. datasource kafka region is not cn-chengdu, can\'t open network for it\\",\\n        \\"DownloadUrl\\": \\"http://geoip-sdk-user.oss-cn-zhangjiakou.aliyuncs.com/product/v1/ipv4/trace/v1.20220424123842.dex?Expires=1650780849&OSSAccessKeyId=XXXXXXeF4Lv5j&Signature=qxxxxx\\",\\n        \\"Description\\": \\"自动化测试创建\\"\\n      }\\n    ],\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 20\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListMigrationsResponse>\\n    <RequestId>F9198AA3-9010-53D5-9714-DC4461427D3E</RequestId>\\n    <Success>true</Success>\\n    <Data>\\n        <Migrations>\\n            <Id>436064</Id>\\n            <Name>test_task_1638498642279</Name>\\n            <PackageType>DATAWORKS_MODEL</PackageType>\\n            <MigrationType>EXPORT</MigrationType>\\n            <CreateTime>123124123123123</CreateTime>\\n            <UpdateTime>123123123123123</UpdateTime>\\n            <CreateUser>123123****</CreateUser>\\n            <CreateUserName>3h1_test</CreateUserName>\\n            <UpdateUser>1231****</UpdateUser>\\n            <UpdateUserName>3h1_test</UpdateUserName>\\n            <ProjectId>72132</ProjectId>\\n            <TenantId>16307</TenantId>\\n            <Status>SUCCESS</Status>\\n            <Message>An internal system error occurred. datasource kafka region is not cn-chengdu, can\'t open network for it</Message>\\n            <DownloadUrl>http://geoip-sdk-user.oss-cn-zhangjiakou.aliyuncs.com/product/v1/ipv4/trace/v1.20220424123842.dex?Expires=1650780849&amp;OSSAccessKeyId=XXXXXXeF4Lv5j&amp;Signature=qxxxxx</DownloadUrl>\\n            <Description>自动化测试创建</Description>\\n        </Migrations>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>20</TotalCount>\\n    </Data>\\n</ListMigrationsResponse>","errorExample":""}]',
      'title' => '获取迁移任务列表',
    ),
    'CreatePermissionApplyOrder' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ApplyUserIds',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请权限的阿里云账户UID，当同时为多个账号申请权限时，使用逗号（,）隔开。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '267842600408993176,267842600408993177',
          ),
        ),
        1 => 
        array (
          'name' => 'Deadline',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请权限的到期时间。此处需要输入一个unix时间戳，不输入默认到期时间为2065年1月1日。
如果MaxCompute项目未开启LabelSecurity，或申请的表字段安全等级为0或小于等于申请账号的安全等级时，只能申请永久权限。
您可以进入DataWorks工作空间的管理页面，在MaxCompute引擎的高级配置页面，查看是否启动列级别访问控制。
您可以进入DataWorks工作空间，在数据地图查看字段的安全等级，在成员管理页面查看账号的安全等级。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1617115071885',
          ),
        ),
        2 => 
        array (
          'name' => 'ApplyReason',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请的原因。用于管理员进行评估审批。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'I need to use this table',
          ),
        ),
        3 => 
        array (
          'name' => 'MaxComputeProjectName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请权限的MaxCompute项目名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'aMaxcomputeProjectName',
          ),
        ),
        4 => 
        array (
          'name' => 'WorkspaceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请权限的MaxCompute项目所属的DataWorks工作空间ID，您可以进入DataWorks工作空间配置页面，查询工作空间ID。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '999999',
            'minimum' => '0',
            'example' => '12345',
          ),
        ),
        5 => 
        array (
          'name' => 'OrderType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请单类型。目前仅支持取值为1，表示对象ACL权限申请。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'enum' => 
            array (
              0 => '1',
            ),
          ),
        ),
        6 => 
        array (
          'name' => 'EngineType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请权限的计算引擎类型。目前仅支持取值为odps，表示仅支持申请MaxCompute计算引擎的权限。',
            'type' => 'string',
            'required' => false,
            'example' => 'odps',
            'enum' => 
            array (
              0 => 'odps',
            ),
          ),
        ),
        7 => 
        array (
          'name' => 'ApplyObject',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '申请对象列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '返回对象。',
              'type' => 'object',
              'properties' => 
              array (
                'Actions' => 
                array (
                  'description' => '申请的权限类型，一次申请多种类型权限时使用逗号（,）分隔。目前仅支持申请Select、Describe、Drop、Alter、Update、Download类型。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'Select,Describe',
                ),
                'ColumnMetaList' => 
                array (
                  'description' => '字段对象列表。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '返回对象。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Name' => 
                      array (
                        'description' => '申请目标列的权限，此处输入列名称。如果申请全表的权限，则需要输入表的所有列名。
仅当MaxCompute项目开启了labelSecurity，才可以申请部分列的权限。如果MaxCompute项目没有开启labelSecurity，则只能申请全表的权限。',
                        'type' => 'string',
                        'required' => true,
                        'example' => 'aColumnName',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => true,
                  'maxItems' => 200,
                ),
                'Name' => 
                array (
                  'description' => '申请的对象。目前仅支持申请MaxCompute表的权限，此处需要输入目标表的名称。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'aTableName',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 50,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376****',
              ),
              'FlowId' => 
              array (
                'description' => '流程id列表。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '生成的申请单ID。当同时申请多个对象并且各个对象的审批人不同时，会根据不同的审批人生成多张申请单，此时会返回一个数组。',
                  'type' => 'string',
                  'example' => 'ee276e6e-5d34-46d8-b848-bca7879ed233',
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0bc1ec92159376****\\",\\n  \\"FlowId\\": [\\n    \\"ee276e6e-5d34-46d8-b848-bca7879ed233\\"\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<CreatePermissionApplyOrderResponse>\\n    <RequestId>0bc1ec92159376****</RequestId>\\n    <FlowId>ee276e6e-5d34-46d8-b848-bca7879ed233</FlowId>\\n</CreatePermissionApplyOrderResponse>","errorExample":""}]',
      'title' => '创建权限申请单',
      'summary' => '创建一个权限申请单。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetPermissionApplyOrderDetail' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FlowId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '权限申请单ID。您可以调用[ListPermissionApplyOrders](~~211008~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '48f36729-05f9-4a40-9286-933fd940****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。
',
                'type' => 'string',
                'example' => '0bc1ec92159376****',
              ),
              'ApplyOrderDetail' => 
              array (
                'description' => '申请单详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'ApplyBaseId' => 
                  array (
                    'description' => '提交申请单的阿里云用户UID。',
                    'type' => 'string',
                    'example' => '26784260040899****',
                  ),
                  'ApplyTimestamp' => 
                  array (
                    'description' => '发起申请单的时间，显示为一个unix时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1615284086000',
                  ),
                  'FlowId' => 
                  array (
                    'description' => '申请单ID。',
                    'type' => 'string',
                    'example' => 'ad8da78d-8135-455e-9486-27cf213f****',
                  ),
                  'FlowStatus' => 
                  array (
                    'description' => '申请单的状态。取值如下：
- 1：待审批。
- 2：审批通过，授权成功。
- 3：审批通过，授权失败。
- 4：审批拒绝。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '2',
                  ),
                  'ApproveAccountList' => 
                  array (
                    'description' => '审批申请单的阿里云账号列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结构。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'BaseId' => 
                        array (
                          'description' => '审批申请单的阿里云用户UID。',
                          'type' => 'string',
                          'example' => '182293110403****',
                        ),
                      ),
                    ),
                  ),
                  'GranteeObjectList' => 
                  array (
                    'description' => '申请权限的账号信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结构。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'GranteeType' => 
                        array (
                          'description' => '申请权限的主体类型。目前只支持1（用户）。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'GranteeTypeSub' => 
                        array (
                          'description' => '申请权限的主体子类型，取值如下：
- 101：生产云账号。
- 103：个人云账号。
- 105：代他人申请云账号。
',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '103',
                        ),
                        'GranteeName' => 
                        array (
                          'description' => '申请权限的云账号名称。格式与MaxCompute的账号格式一致。
- 主账号为ALIYUN$+账号名。
- 子账号为RAM$+账号名。',
                          'type' => 'string',
                          'example' => 'RAM$dataworks_3h1_1:StsRamUser(StsRamUser)',
                        ),
                        'GranteeId' => 
                        array (
                          'description' => '申请权限的阿里云用户UID。',
                          'type' => 'string',
                          'example' => '26784260040899****',
                        ),
                      ),
                    ),
                  ),
                  'ApproveContent' => 
                  array (
                    'description' => '申请的具体内容。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'ApplyReason' => 
                      array (
                        'description' => '申请的原因，用于管理员审批参考。',
                        'type' => 'string',
                        'example' => 'I need to use this table',
                      ),
                      'Deadline' => 
                      array (
                        'description' => '申请权限的到期时间。此处显示为一个unix时间戳。
如果MaxCompute项目未开启LabelSecurity，或申请的表字段安全等级为0或小于等于申请账号的安全等级时，只能申请永久权限。',
                        'type' => 'integer',
                        'format' => 'int64',
                        'example' => '1617115071885',
                      ),
                      'OrderType' => 
                      array (
                        'description' => '申请单类型。目前仅支持取值为1，表示对象ACL权限申请。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'example' => '1',
                      ),
                      'ProjectMeta' => 
                      array (
                        'description' => '申请对象所属的项目和工作空间信息。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'MaxComputeProjectName' => 
                          array (
                            'description' => '申请对象所在的MaxCompute项目。',
                            'type' => 'string',
                            'example' => 'aMaxComputeProject',
                          ),
                          'WorkspaceId' => 
                          array (
                            'description' => '申请对象所在的DataWorks工作空间ID。',
                            'type' => 'integer',
                            'format' => 'int32',
                            'example' => '12345',
                          ),
                          'ObjectMetaList' => 
                          array (
                            'description' => '申请对象的详细信息。',
                            'type' => 'array',
                            'items' => 
                            array (
                              'description' => '返回数据结构。',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'ObjectName' => 
                                array (
                                  'description' => '申请的表名。',
                                  'type' => 'string',
                                  'example' => 'aTableName',
                                ),
                                'ColumnMetaList' => 
                                array (
                                  'description' => '申请对象的列字段信息。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '返回数据结构。',
                                    'type' => 'object',
                                    'properties' => 
                                    array (
                                      'ColumnName' => 
                                      array (
                                        'description' => '申请的列名称。',
                                        'type' => 'string',
                                        'example' => 'aColumnName',
                                      ),
                                      'ColumnComment' => 
                                      array (
                                        'description' => '申请的列描述。',
                                        'type' => 'string',
                                        'example' => '字段描述',
                                      ),
                                      'SecurityLevel' => 
                                      array (
                                        'description' => '申请的列安全级别。取值范围为0~9。',
                                        'type' => 'string',
                                        'example' => '9',
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0bc1ec92159376****\\",\\n  \\"ApplyOrderDetail\\": {\\n    \\"ApplyBaseId\\": \\"26784260040899****\\",\\n    \\"ApplyTimestamp\\": 1615284086000,\\n    \\"FlowId\\": \\"ad8da78d-8135-455e-9486-27cf213f****\\",\\n    \\"FlowStatus\\": 2,\\n    \\"ApproveAccountList\\": [\\n      {\\n        \\"BaseId\\": \\"182293110403****\\"\\n      }\\n    ],\\n    \\"GranteeObjectList\\": [\\n      {\\n        \\"GranteeType\\": 1,\\n        \\"GranteeTypeSub\\": 103,\\n        \\"GranteeName\\": \\"RAM$dataworks_3h1_1:StsRamUser(StsRamUser)\\",\\n        \\"GranteeId\\": \\"26784260040899****\\"\\n      }\\n    ],\\n    \\"ApproveContent\\": {\\n      \\"ApplyReason\\": \\"I need to use this table\\",\\n      \\"Deadline\\": 1617115071885,\\n      \\"OrderType\\": 1,\\n      \\"ProjectMeta\\": {\\n        \\"MaxComputeProjectName\\": \\"aMaxComputeProject\\",\\n        \\"WorkspaceId\\": 12345,\\n        \\"ObjectMetaList\\": [\\n          {\\n            \\"ObjectName\\": \\"aTableName\\",\\n            \\"ColumnMetaList\\": [\\n              {\\n                \\"ColumnName\\": \\"aColumnName\\",\\n                \\"ColumnComment\\": \\"字段描述\\",\\n                \\"SecurityLevel\\": \\"9\\"\\n              }\\n            ]\\n          }\\n        ]\\n      }\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetPermissionApplyOrderDetailResponse>\\n    <RequestId>0bc1ec92159376****</RequestId>\\n    <ApplyOrderDetail>\\n        <ApplyBaseId>26784260040899****</ApplyBaseId>\\n        <ApplyTimestamp>1615284086000</ApplyTimestamp>\\n        <FlowId>ad8da78d-8135-455e-9486-27cf213f****</FlowId>\\n        <FlowStatus>2</FlowStatus>\\n        <ApproveAccountList>\\n            <BaseId>182293110403****</BaseId>\\n        </ApproveAccountList>\\n        <GranteeObjectList>\\n            <GranteeType>1</GranteeType>\\n            <GranteeTypeSub>103</GranteeTypeSub>\\n            <GranteeName>RAM$dataworks_3h1_1:StsRamUser(StsRamUser)</GranteeName>\\n            <GranteeId>26784260040899****</GranteeId>\\n        </GranteeObjectList>\\n        <ApproveContent>\\n            <ApplyReason>I need to use this table</ApplyReason>\\n            <Deadline>1617115071885</Deadline>\\n            <OrderType>1</OrderType>\\n            <ProjectMeta>\\n                <MaxComputeProjectName>aMaxComputeProject</MaxComputeProjectName>\\n                <WorkspaceId>12345</WorkspaceId>\\n                <ObjectMetaList>\\n                    <ObjectName>aTableName</ObjectName>\\n                    <ColumnMetaList>\\n                        <ColumnName>aColumnName</ColumnName>\\n                        <ColumnComment>字段描述</ColumnComment>\\n                        <SecurityLevel>9</SecurityLevel>\\n                    </ColumnMetaList>\\n                </ObjectMetaList>\\n            </ProjectMeta>\\n        </ApproveContent>\\n    </ApplyOrderDetail>\\n</GetPermissionApplyOrderDetailResponse>","errorExample":""}]',
      'title' => '查询权限申请单的详细信息',
      'summary' => '查询一个权限申请单的详细信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListPermissionApplyOrders' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FlowStatus',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请单的状态。取值如下：
- 1：待审批。
- 2：审批通过，授权成功。
- 3：审批通过，授权失败。
- 4：审批拒绝。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'enum' => 
            array (
              0 => '0',
              1 => '1',
              2 => '2',
              3 => '3',
              4 => '4',
              5 => '5',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'WorkspaceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请单所属的工作空间ID，不输入则返回所有工作空间的申请单。您可以进入DataWorks工作空间配置页面，查询工作空间ID。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '12345',
          ),
        ),
        2 => 
        array (
          'name' => 'OrderType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请单类型。目前仅支持取值为1，表示对象ACL权限申请。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '1',
            'minimum' => '1',
            'example' => '1',
            'enum' => 
            array (
              0 => '1',
            ),
          ),
        ),
        3 => 
        array (
          'name' => 'MaxComputeProjectName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请单所属的MaxCompute项目名称，不输入则返回所有MaxCompute项目的申请单。',
            'type' => 'string',
            'required' => false,
            'example' => 'aMaxComputeProject',
          ),
        ),
        4 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请单包含的表名称，不输入则返回所有表的申请单。',
            'type' => 'string',
            'required' => false,
            'example' => 'aTableName',
          ),
        ),
        5 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询目标起始时间发起的申请单，配置为一个unix时间戳。不输入则表示查询所有的申请单。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1616200471885',
          ),
        ),
        6 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询目标截至时间的申请单，配置为一个unix时间戳。不输入则表示查询截至当前时间的申请单。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1617200471885',
          ),
        ),
        7 => 
        array (
          'name' => 'EngineType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请单的计算引擎类型。目前仅支持取值为odps，表示仅支持申请MaxCompute计算引擎的权限。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps',
            'enum' => 
            array (
              0 => 'odps',
            ),
          ),
        ),
        8 => 
        array (
          'name' => 'PageNum',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询页码。大于等于1的正整数，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        9 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '100',
          ),
        ),
        10 => 
        array (
          'name' => 'QueryType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '申请单的查询类型。取值如下：
- 0：我提交的申请单。
- 1：由我审批的申请单。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '1',
            'minimum' => '0',
            'example' => '1',
            'enum' => 
            array (
              0 => '0',
              1 => '1',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376****',
              ),
              'ApplyOrders' => 
              array (
                'description' => '权限申请单的分页查询结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'PageNumber' => 
                  array (
                    'description' => '页码。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '返回的权限申请单总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '150',
                  ),
                  'ApplyOrder' => 
                  array (
                    'description' => '权限申请单列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ApplyBaseId' => 
                        array (
                          'description' => '提交申请单的阿里云用户UID。',
                          'type' => 'string',
                          'example' => '267842600408993176',
                        ),
                        'ApplyTimestamp' => 
                        array (
                          'description' => '申请单的提交时间，显示为一个unix时间戳。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1615284086000',
                        ),
                        'FlowId' => 
                        array (
                          'description' => '申请单ID。
',
                          'type' => 'string',
                          'example' => 'ad8da78d-8135-455e-9486-27cf213fc140',
                        ),
                        'FlowStatus' => 
                        array (
                          'description' => '申请单的状态。取值如下：
- 1：待审批。
- 2：审批通过，授权成功。
- 3：审批通过，授权失败。
- 4：审批拒绝。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '2',
                        ),
                        'ApproveContent' => 
                        array (
                          'description' => '申请单的内容。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ApplyReason' => 
                            array (
                              'description' => '申请的原因。用于管理员进行评估审批。',
                              'type' => 'string',
                              'example' => 'I need to use this table',
                            ),
                            'OrderType' => 
                            array (
                              'description' => '申请单类型。目前仅支持取值为1，表示对象ACL权限申请。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                            'ProjectMeta' => 
                            array (
                              'description' => '申请对象的内容。
',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'WorkspaceName' => 
                                array (
                                  'description' => '申请权限的MaxCompute项目所属的DataWorks工作空间名称。',
                                  'type' => 'string',
                                  'example' => 'aWorkspaceName',
                                ),
                                'ObjectMetaList' => 
                                array (
                                  'description' => '申请的对象信息。
',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'type' => 'object',
                                    'properties' => 
                                    array (
                                      'ObjectName' => 
                                      array (
                                        'description' => '申请的表名称。
',
                                        'type' => 'string',
                                        'example' => 'aTableName',
                                      ),
                                      'Actions' => 
                                      array (
                                        'type' => 'array',
                                        'items' => 
                                        array (
                                          'description' => '申请的权限类型，一次申请多种类型权限时使用逗号（,）分隔。目前仅支持申请Select、Describe、Download类型。',
                                          'type' => 'string',
                                          'example' => 'Select,Describe',
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0bc1ec92159376****\\",\\n  \\"ApplyOrders\\": {\\n    \\"PageSize\\": 10,\\n    \\"PageNumber\\": 1,\\n    \\"TotalCount\\": 150,\\n    \\"ApplyOrder\\": [\\n      {\\n        \\"ApplyBaseId\\": \\"267842600408993176\\",\\n        \\"ApplyTimestamp\\": 1615284086000,\\n        \\"FlowId\\": \\"ad8da78d-8135-455e-9486-27cf213fc140\\",\\n        \\"FlowStatus\\": 2,\\n        \\"ApproveContent\\": {\\n          \\"ApplyReason\\": \\"I need to use this table\\",\\n          \\"OrderType\\": 1,\\n          \\"ProjectMeta\\": {\\n            \\"WorkspaceName\\": \\"aWorkspaceName\\",\\n            \\"ObjectMetaList\\": [\\n              {\\n                \\"ObjectName\\": \\"aTableName\\",\\n                \\"Actions\\": [\\n                  \\"Select,Describe\\"\\n                ]\\n              }\\n            ]\\n          }\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc1ec92159376****</RequestId>\\n<ApplyOrders>\\n    <TotalCount>150</TotalCount>\\n    <PageSize>10</PageSize>\\n    <PageNumber>1</PageNumber>\\n    <ApplyOrder>\\n        <ApplyTimestamp>1615284086000</ApplyTimestamp>\\n        <FlowId>ad8da78d-8135-455e-9486-27cf213fc140</FlowId>\\n        <ApplyBaseId>267842600408993176</ApplyBaseId>\\n        <FlowStatus>2</FlowStatus>\\n        <ApproveContent>\\n            <OrderType>1</OrderType>\\n            <ApplyReason>I need to use this table</ApplyReason>\\n            <ProjectMeta>\\n                <WorkspaceName>aWorkspaceName</WorkspaceName>\\n                <ObjectMetaList>\\n                    <ObjectName>aTableName</ObjectName>\\n                    <Actions>Select,Describe</Actions>\\n                </ObjectMetaList>\\n            </ProjectMeta>\\n        </ApproveContent>\\n    </ApplyOrder>\\n</ApplyOrders>","errorExample":""}]',
      'title' => '查询权限申请单列表',
      'summary' => '查询权限申请单列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ApprovePermissionApplyOrder' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FlowId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '审批的申请单ID，您可以调用[ListPermissionApplyOrders](~~211008~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '48f36729-05f9-4a40-9286-933fd940f30a',
          ),
        ),
        1 => 
        array (
          'name' => 'ApproveComment',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '审批的备注信息。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'agree',
          ),
        ),
        2 => 
        array (
          'name' => 'ApproveAction',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行的审批动作，取值如下：
- 1：同意。
- 2：拒绝。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '5',
            'minimum' => '0',
            'enumValueTitles' => 
            array (
            ),
            'example' => '1',
            'enum' => 
            array (
              0 => '0',
              1 => '1',
              2 => '2',
              3 => '3',
              4 => '4',
              5 => '5',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'ApproveSuccess' => 
              array (
                'description' => '审批是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376****',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"ApproveSuccess\\": true,\\n  \\"RequestId\\": \\"0bc1ec92159376****\\"\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc1ec92159376****</RequestId>\\n<ApproveSuccess>true</ApproveSuccess>","errorExample":""}]',
      'title' => '审批权限申请单',
      'summary' => '审批一个权限申请单。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'RevokeColumnPermission' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'WorkspaceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要撤销权限的字段所在的DataWorks工作空间ID。您可以登录DataWorks控制台，进入工作空间配置页面，查询工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999',
            'minimum' => '1',
            'example' => '12345',
          ),
        ),
        1 => 
        array (
          'name' => 'MaxComputeProjectName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要撤销权限的字段所在的MaxCompute项目名称。您可以登录DataWorks控制台，进入工作空间配置页面，查询DataWorks工作空间绑定的MaxCompute项目名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'aMaxcomputeProjectName',
          ),
        ),
        2 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要撤销权限的字段所属的MaxCompute表名称。您可以调用[SearchMetaTables](~~173919~~)接口，获取MaxCompute表名称。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'aTableName',
          ),
        ),
        3 => 
        array (
          'name' => 'Columns',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要撤销权限的字段名称。一次撤销多个字段的权限时，使用逗号（,）分隔。
当前仅支持撤销MaxCompute表字段的权限。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'id,name',
          ),
        ),
        4 => 
        array (
          'name' => 'RevokeUserName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '撤销字段权限的阿里云账号名称。账号格式与MaxCompute的账号格式一致。
- 主账号为ALIYUN$+账号名。
- 子账号为RAM$+账号名。

该参数与RevokeUserId参数配置一个即可。如果同时配置了该参数与RevokeUserId参数，但二者取值不同，则系统会以RevokeUserId参数的配置内容为准。
',
            'type' => 'string',
            'required' => false,
            'example' => 'RAM$dataworks_3h1_1:stsramuser',
          ),
        ),
        5 => 
        array (
          'name' => 'RevokeUserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '撤销字段权限的阿里云账号ID。您可以登录DataWorks控制台，进入安全设置页面获取账号ID。
该参数与RevokeUserName参数配置一个即可。如果同时配置了该参数与RevokeUserName参数，但二者取值不同，则系统会以RevokeUserId参数的配置内容为准。',
            'type' => 'string',
            'required' => false,
            'example' => '267842600408993176',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RevokeSuccess' => 
              array (
                'description' => '撤销操作是否成功。
',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。
',
                'type' => 'string',
                'example' => '0bc1ec92159376****',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RevokeSuccess\\": true,\\n  \\"RequestId\\": \\"0bc1ec92159376****\\"\\n}","errorExample":""},{"type":"xml","example":"<RevokeSuccess>true</RevokeSuccess>\\n<RequestId>0bc1ec92159376****</RequestId>","errorExample":""}]',
      'title' => '撤销用户的字段权限',
      'summary' => '撤销用户的字段权限。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'RevokeTablePermission' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'WorkspaceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要撤销权限的MaxCompute表所属的DataWorks工作空间ID。您可以登录DataWorks控制台，进入工作空间配置页面，查询工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9999999',
            'minimum' => '1',
            'example' => '12345',
          ),
        ),
        1 => 
        array (
          'name' => 'MaxComputeProjectName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要撤销权限的表所在的MaxCompute项目名称。您可以登录DataWorks控制台，进入工作空间配置页面，查询DataWorks工作空间绑定的MaxCompute项目名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'aMaxcomputeProjectName',
          ),
        ),
        2 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要撤销权限的MaxCompute表名称。您可以调用[SearchMetaTables](~~173919~~)接口，获取MaxCompute表名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'aTableName',
          ),
        ),
        3 => 
        array (
          'name' => 'Actions',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要撤销的表的操作权限，一次撤销多种操作权限时使用逗号（,）分隔。
目前仅支持撤销MaxCompute表的Select、Describe、Download等操作权限。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'Select,Describe',
          ),
        ),
        4 => 
        array (
          'name' => 'RevokeUserName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '撤销表权限的云账号名称。账号格式与MaxCompute的账号格式一致。
- 主账号为ALIYUN$+账号名。
- 子账号为RAM$+账号名。

该参数与RevokeUserId参数配置一个即可。如果同时配置了该参数与RevokeUserId参数，但二者取值不同，则系统会以RevokeUserId参数的配置内容为准。
',
            'type' => 'string',
            'required' => false,
            'example' => 'RAM$dataworks_3h1_1:stsramuser',
          ),
        ),
        5 => 
        array (
          'name' => 'RevokeUserId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '撤销表权限的阿里云账号ID。您可以登录DataWorks控制台，进入安全设置页面获取账号ID。
该参数与RevokeUserName参数配置一个即可。如果同时配置了该参数与RevokeUserName参数，但二者取值不同，则系统会以RevokeUserId参数的配置为准。',
            'type' => 'string',
            'required' => false,
            'example' => '267842600408993176',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RevokeSuccess' => 
              array (
                'description' => '撤销操作是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376****',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RevokeSuccess\\": true,\\n  \\"RequestId\\": \\"0bc1ec92159376****\\"\\n}","errorExample":""},{"type":"xml","example":"<RevokeSuccess>true</RevokeSuccess>\\n<RequestId>0bc1ec92159376****</RequestId>","errorExample":""}]',
      'title' => '撤销用户的表权限',
      'summary' => '撤销用户的表权限。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListExtensions' => 
    array (
      'summary' => '拉取开放平台的扩展程序列表。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => 'Id of the request',
                'type' => 'string',
                'example' => '0000-ABCD-EFG',
              ),
              'PagingInfo' => 
              array (
                'description' => '分页信息',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '请求的数据页数，用于翻页。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '满足条件的数据总条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '12',
                  ),
                  'Extensions' => 
                  array (
                    'description' => '扩展程序列表',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '扩展程序详情',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '扩展程序状态：
0：测试中,
1：上线中,
3：禁用中,
4：审批中,
5：审批通过,
6：审批不通过',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ExtensionDesc' => 
                        array (
                          'description' => '扩展程序描述',
                          'type' => 'string',
                          'example' => '这是一个描述',
                        ),
                        'ExtensionName' => 
                        array (
                          'description' => '扩展程序名称',
                          'type' => 'string',
                          'example' => '扩展程序名称',
                        ),
                        'Owner' => 
                        array (
                          'description' => '子账号ID',
                          'type' => 'string',
                          'example' => '2003****',
                        ),
                        'ExtensionCode' => 
                        array (
                          'description' => '唯一的扩展程序码',
                          'type' => 'string',
                          'example' => '扩展程序码',
                        ),
                        'BindEventList' => 
                        array (
                          'description' => '扩展点事件列表',
                          'type' => 'array',
                          'items' => 
                          array (
                            'description' => '事件详情',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'EventName' => 
                              array (
                                'description' => '事件名称',
                                'type' => 'string',
                                'example' => '文件提交前置事件',
                              ),
                              'EventCode' => 
                              array (
                                'description' => '事件码',
                                'type' => 'string',
                                'example' => 'commit-file',
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\",\\n  \\"PagingInfo\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 12,\\n    \\"Extensions\\": [\\n      {\\n        \\"Status\\": 0,\\n        \\"ExtensionDesc\\": \\"这是一个描述\\",\\n        \\"ExtensionName\\": \\"扩展程序名称\\",\\n        \\"Owner\\": \\"2003****\\",\\n        \\"ExtensionCode\\": \\"扩展程序码\\",\\n        \\"BindEventList\\": [\\n          {\\n            \\"EventName\\": \\"文件提交前置事件\\",\\n            \\"EventCode\\": \\"commit-file\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListExtensionsResponse>\\n    <RequestId>0000-ABCD-EFG</RequestId>\\n    <PagingInfo>\\n        <PageNumber>1</PageNumber>\\n        <PageSize>10</PageSize>\\n        <TotalCount>12</TotalCount>\\n        <Extensions>\\n            <Status>0</Status>\\n            <ExtensionDesc>这是一个描述</ExtensionDesc>\\n            <ExtensionName>扩展程序名称</ExtensionName>\\n            <Owner>2003****</Owner>\\n            <ExtensionCode>扩展程序码</ExtensionCode>\\n            <BindEventList>\\n                <EventName>文件提交前置事件</EventName>\\n                <EventCode>commit-file</EventCode>\\n            </BindEventList>\\n        </Extensions>\\n    </PagingInfo>\\n</ListExtensionsResponse>","errorExample":""}]',
      'title' => '获取扩展程序列表',
    ),
    'GetExtension' => 
    array (
      'summary' => '获取某个扩展程序详情。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ExtensionCode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '扩展程序唯一编码。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ce4*********086da5',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG',
              ),
              'Extension' => 
              array (
                'description' => '扩展程序详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'ExtensionCode' => 
                  array (
                    'description' => '扩展程序唯一码。',
                    'type' => 'string',
                    'example' => 'ce4*********086da5',
                  ),
                  'ExtensionName' => 
                  array (
                    'description' => '扩展程序名称。',
                    'type' => 'string',
                    'example' => '扩展程序名称',
                  ),
                  'ExtensionDesc' => 
                  array (
                    'description' => '扩展程序描述。',
                    'type' => 'string',
                    'example' => '这是一个描述',
                  ),
                  'HelpDocUrl' => 
                  array (
                    'description' => '扩展程序帮助文档链接。',
                    'type' => 'string',
                    'example' => 'https://www.aliyun.com/',
                  ),
                  'Status' => 
                  array (
                    'description' => '扩展程序状态： 0：测试中, 1：上线中, 3：禁用中, 4：审批中, 5：审批通过, 6：审批不通过。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'ProjectTesting' => 
                  array (
                    'description' => '测试用的项目空间，当扩展程序处于测试中时，只有测试项目空间可使用。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '13552',
                  ),
                  'DetailUrl' => 
                  array (
                    'description' => '扩展程序详情地址，用来扩展程序使用者查看本次被卡流程的详情。',
                    'type' => 'string',
                    'example' => 'https://www.aliyun.com/',
                  ),
                  'ParameterSetting' => 
                  array (
                    'description' => '参数配置，参考[扩展程序参数配置](~~405354~~)。',
                    'type' => 'string',
                    'example' => 'extension.project.disabled=projectId1,projectId2,projectId3',
                  ),
                  'OptionSetting' => 
                  array (
                    'description' => '选项配置。',
                    'type' => 'string',
                    'example' => '选项配置',
                  ),
                  'BindEventList' => 
                  array (
                    'description' => '扩展点列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '扩展点详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'EventCode' => 
                        array (
                          'description' => '扩展点事件编码。',
                          'type' => 'string',
                          'example' => 'commit-file',
                        ),
                        'EventName' => 
                        array (
                          'description' => '扩展点事件名称。',
                          'type' => 'string',
                          'example' => '文件提交前置事件',
                        ),
                      ),
                    ),
                  ),
                  'EventCategoryList' => 
                  array (
                    'description' => '事件类型列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '事件类型详情。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'CategoryCode' => 
                        array (
                          'description' => '事件类型编码。',
                          'type' => 'string',
                          'example' => 'file-change',
                        ),
                        'CategoryName' => 
                        array (
                          'description' => '事件类型名称。',
                          'type' => 'string',
                          'example' => '文件变更事件',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\",\\n  \\"Extension\\": {\\n    \\"ExtensionCode\\": \\"ce4*********086da5\\",\\n    \\"ExtensionName\\": \\"扩展程序名称\\",\\n    \\"ExtensionDesc\\": \\"这是一个描述\\",\\n    \\"HelpDocUrl\\": \\"https://www.aliyun.com/\\",\\n    \\"Status\\": 0,\\n    \\"ProjectTesting\\": 13552,\\n    \\"DetailUrl\\": \\"https://www.aliyun.com/\\",\\n    \\"ParameterSetting\\": \\"extension.project.disabled=projectId1,projectId2,projectId3\\",\\n    \\"OptionSetting\\": \\"选项配置\\",\\n    \\"BindEventList\\": [\\n      {\\n        \\"EventCode\\": \\"commit-file\\",\\n        \\"EventName\\": \\"文件提交前置事件\\"\\n      }\\n    ],\\n    \\"EventCategoryList\\": [\\n      {\\n        \\"CategoryCode\\": \\"file-change\\",\\n        \\"CategoryName\\": \\"文件变更事件\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetExtensionResponse>\\n    <RequestId>0000-ABCD-EFG</RequestId>\\n    <Extension>\\n        <ExtensionCode>ce4*********086da5</ExtensionCode>\\n        <ExtensionName>扩展程序名称</ExtensionName>\\n        <ExtensionDesc>这是一个描述</ExtensionDesc>\\n        <HelpDocUrl>https://www.aliyun.com/</HelpDocUrl>\\n        <Status>0</Status>\\n        <ProjectTesting>13552</ProjectTesting>\\n        <DetailUrl>https://www.aliyun.com/</DetailUrl>\\n        <ParameterSetting>extension.project.disabled=projectId1,projectId2,projectId3</ParameterSetting>\\n        <OptionSetting>选项配置</OptionSetting>\\n        <BindEventList>\\n            <EventCode>commit-file</EventCode>\\n            <EventName>文件提交前置事件</EventName>\\n        </BindEventList>\\n        <EventCategoryList>\\n            <CategoryCode>file-change</CategoryCode>\\n            <CategoryName>文件变更事件</CategoryName>\\n        </EventCategoryList>\\n    </Extension>\\n</GetExtensionResponse>","errorExample":""}]',
      'title' => '获取扩展程序详情',
    ),
    'GetOptionValueForProject' => 
    array (
      'summary' => '获取扩展程序选项配置在项目空间下的配置。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ExtensionCode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '扩展程序的唯一编码。',
            'type' => 'string',
            'required' => false,
            'example' => 'ce4*********086da5',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'string',
            'required' => false,
            'example' => '234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回数据。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'OptionValue' => 
              array (
                'description' => '返回数据。示例中的cuNumber为自定义的Key。',
                'type' => 'string',
                'example' => '{"cuNumber":"0"}',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"OptionValue\\": \\"{\\\\\\"cuNumber\\\\\\":\\\\\\"0\\\\\\"}\\"\\n}","errorExample":""},{"type":"xml","example":"<GetOptionValueForProjectResponse>\\n    <RequestId>E6F0DBDD-5AD****</RequestId>\\n    <OptionValue>{\\"cuNumber\\":\\"0\\"}</OptionValue>\\n</GetOptionValueForProjectResponse>","errorExample":""}]',
      'title' => '获取扩展程序选项配置在项目空间下的配置',
    ),
    'ListEnabledExtensionsForProject' => 
    array (
      'summary' => '调用ListEnabledExtensionsForProject来获取项目空间下已经开启的扩展程序列表，包含系统扩展程序和自定义扩展程序。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'list',
        'abilityTreeCode' => '158027',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRWC5F7',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'EventCode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '扩展点事件编码。',
            'type' => 'string',
            'required' => true,
            'example' => 'commit-file',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以[登录DataWorks控制台](https://workbench.data.aliyun.com/console?spm=a2c4g.11186623.0.0.6b4d4941azHd2k)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'example' => '10000',
          ),
        ),
        2 => 
        array (
          'name' => 'FileType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件的代码类型。

常用的代码及其对应的文件类型包括6（Shell）、10（ODPS SQL）、11（ODPS MR）、24（ODPS Script）、99（虚拟节点）、221（PyODPS 2）、225（ODPS Spark）、227（EMR Hive）、228（EMR Spark）、229（EMR Spark SQL）、230（EMR MR）、239（OSS对象检查）、257（EMR Shell）、258（EMR Spark Shell）、259（EMR Presto）、260（EMR Impala）、900（实时同步）、1089（跨租户节点）、1091（Hologres开发）、1093（Hologres SQL）、1100（赋值节点）、1221（PyODPS 3）。

您可以调用[ListFileType](~~212428~~)接口，查询文件的代码类型。',
            'type' => 'string',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结果',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求唯一ID',
                'type' => 'string',
                'example' => '4F2CA7ED-27E5-59EA-A8C4-F1F7A1FF0B22',
              ),
              'Extensions' => 
              array (
                'description' => '扩展程序详情',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '扩展程序',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'ExtensionCode' => 
                    array (
                      'description' => '扩展程序唯一编码。',
                      'type' => 'string',
                      'example' => 'a94a8e23bc0b4dfab9a5e4d2f374d645',
                    ),
                    'ExtensionName' => 
                    array (
                      'description' => '扩展程序名称',
                      'type' => 'string',
                      'example' => '不允许使用max_pt函数',
                    ),
                    'TenantId' => 
                    array (
                      'description' => '租户ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '529889518659842',
                    ),
                    'CreateUser' => 
                    array (
                      'description' => '创建人',
                      'type' => 'string',
                      'example' => '3444434343555',
                    ),
                    'ModifyUser' => 
                    array (
                      'description' => '修改人',
                      'type' => 'string',
                      'example' => '34452335611988',
                    ),
                    'ExtensionDesc' => 
                    array (
                      'description' => '扩展程序描述',
                      'type' => 'string',
                      'example' => 'ODPS SQL兼容Spark引擎检测',
                    ),
                    'Owner' => 
                    array (
                      'description' => '责任人ID。',
                      'type' => 'string',
                      'example' => '21323672*******55500',
                    ),
                    'ParameterSetting' => 
                    array (
                      'description' => '参数配置，参考[扩展程序参数配置](~~405354~~)。',
                      'type' => 'string',
                      'example' => 'extension.fileType.23.deploy-file.enabled=true',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"4F2CA7ED-27E5-59EA-A8C4-F1F7A1FF0B22\\",\\n  \\"Extensions\\": [\\n    {\\n      \\"ExtensionCode\\": \\"a94a8e23bc0b4dfab9a5e4d2f374d645\\",\\n      \\"ExtensionName\\": \\"不允许使用max_pt函数\\",\\n      \\"TenantId\\": 529889518659842,\\n      \\"CreateUser\\": \\"3444434343555\\",\\n      \\"ModifyUser\\": \\"34452335611988\\",\\n      \\"ExtensionDesc\\": \\"ODPS SQL兼容Spark引擎检测\\",\\n      \\"Owner\\": \\"21323672*******55500\\",\\n      \\"ParameterSetting\\": \\"extension.fileType.23.deploy-file.enabled=true\\"\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<ListEnabledExtensionsForProjectResponse>\\n    <RequestId>4F2CA7ED-27E5-59EA-A8C4-F1F7A1FF0B22</RequestId>\\n    <Extensions>\\n        <ExtensionCode>a94a8e23bc0b4dfab9a5e4d2f374d645</ExtensionCode>\\n        <ExtensionName>不允许使用max_pt函数</ExtensionName>\\n        <TenantId>529889518659842</TenantId>\\n        <CreateUser>3444434343555</CreateUser>\\n        <ModifyUser>34452335611988</ModifyUser>\\n        <ExtensionDesc>ODPS SQL兼容Spark引擎检测</ExtensionDesc>\\n        <Owner>21323672*******55500</Owner>\\n        <ParameterSetting>extension.fileType.23.deploy-file.enabled=true</ParameterSetting>\\n        <GmtCreate>1660117173</GmtCreate>\\n        <GmtModified>1569308162000</GmtModified>\\n    </Extensions>\\n</ListEnabledExtensionsForProjectResponse>","errorExample":""}]',
      'title' => '获取已经开启的扩展程序列表',
      'description' => 'eventCode取值可参考文档：[扩展事件编码](~~463357~~)。',
    ),
    'CallbackExtension' => 
    array (
      'summary' => '用于在DataWorks平台使用过程中触发扩展点时，通过调用CallbackExtension接口，将扩展程序对扩展点事件的检查结果返回给DataWorks平台。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'none',
        'riskType' => 'none',
        'chargeType' => 'free',
        'abilityTreeCode' => '191317',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRWC5F7',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ExtensionCode',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '扩展程序唯一编码。',
            'type' => 'string',
            'required' => true,
            'example' => '8abcb91f-d266-4073-b907-2ed670378ed1',
          ),
        ),
        1 => 
        array (
          'name' => 'MessageId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks开放消息的消息ID。当触发扩展点事件后，您可以从接收到的事件消息中获取消息ID。

<props="china">消息格式，可参考[消息格式](~~215367~~)。</props>

',
            'type' => 'string',
            'required' => true,
            'example' => '03400b03-b721-4c34-8727-2d6884077091',
          ),
        ),
        2 => 
        array (
          'name' => 'CheckResult',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '扩展程序对本次扩展点事件的检查状态。取值如下：
- OK：扩展程序对本次扩展点事件检查通过。
- FAIL：扩展程序对本次扩展点事件检查不通过。您需要查看并及时处理报错，以免影响后续程序的正常执行。
- WARN：扩展程序对本次扩展点事件检查通过，但存在警告。',
            'type' => 'string',
            'required' => true,
            'example' => 'FAIL',
            'enum' => 
            array (
              0 => 'OK',
              1 => 'FAIL',
              2 => 'WARN',
            ),
          ),
        ),
        3 => 
        array (
          'name' => 'CheckMessage',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '当CheckResult设置为FAIL，提供FAIL原因',
            'type' => 'string',
            'required' => false,
            'example' => '命中xxx规则，请修改后重试',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => '返回结果',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '唯一的请求ID',
                'type' => 'string',
                'example' => '7C352CB7-CD88-50CF-9D0D-E81BDF020E7F',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。取值如下：

true：调用成功。

false：调用失败。',
                'type' => 'string',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"RequestId\\": \\"7C352CB7-CD88-50CF-9D0D-E81BDF020E7F\\",\\n  \\"Success\\": \\"true\\"\\n}","type":"json"}]',
      'title' => '返回扩展程序对扩展点事件的检查结果',
    ),
    'CreateTable' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
        'abilityTreeCode' => '78197',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'IsView',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定创建视图或创建表：
- 0为创建表。
- 1为创建视图。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
          ),
        ),
        1 => 
        array (
          'name' => 'Visibility',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表或工作空间是否可见：
- 0为表和工作空间均不可见。
- 1为表和工作空间均可见。
- 2为仅工作空间可见。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'LifeCycle',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的生命周期，单位为天。默认取值为空，表示永久存储。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'CategoryId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '关联类目的ID。您可以通过[GetMetaCategory](~~173932~~)接口查询可以关联的类目ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '101',
          ),
        ),
        4 => 
        array (
          'name' => 'LogicalLevelId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '逻辑层级ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '101',
          ),
        ),
        5 => 
        array (
          'name' => 'PhysicsLevelId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '物理层级ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '101',
          ),
        ),
        6 => 
        array (
          'name' => 'ExternalTableType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '外部表的存储类型。取值如下：
- 0表示OSS。
- 1表示TableStore。
- 2表示Volume。
- 3表示MySQL。',
            'type' => 'string',
            'required' => false,
            'example' => '0',
          ),
        ),
        7 => 
        array (
          'name' => 'Location',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '外部表的存储地址。',
            'type' => 'string',
            'required' => false,
            'example' => 'location',
          ),
        ),
        8 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '23',
          ),
        ),
        9 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'tableName1',
          ),
        ),
        10 => 
        array (
          'name' => 'Endpoint',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'MaxCompute的Endpoint。',
            'type' => 'string',
            'required' => false,
            'example' => 'odps://abc',
          ),
        ),
        11 => 
        array (
          'name' => 'EnvType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的环境。取值如下：
- 0表示开发环境。
- 1表示生产环境。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        12 => 
        array (
          'name' => 'AppGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'MaxCompute项目的ID，格式为odps.{projectName}。',
            'type' => 'string',
            'required' => false,
            'example' => 'odps.test',
          ),
        ),
        13 => 
        array (
          'name' => 'Comment',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备注信息。',
            'type' => 'string',
            'required' => false,
            'example' => '备注',
          ),
        ),
        14 => 
        array (
          'name' => 'HasPart',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建的MaxCompute表是否为分区表，包括1（是）和0（否）。该字段已废弃，请勿使用。
目前代码会根据Column.N.isPartitionCol参数判断MaxCompute表是否为分区表，当Column.N.isPartitionCol参数取值为true时，则认为MaxCompute表为分区表。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
          ),
        ),
        15 => 
        array (
          'name' => 'ClientToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '保留字段。',
            'type' => 'string',
            'required' => false,
            'example' => '保留字段',
          ),
        ),
        16 => 
        array (
          'name' => 'Schema',
          'in' => 'query',
          'allowEmptyValue' => false,
          'schema' => 
          array (
            'description' => '表Schema信息。在ODPS，当您启动了三层模型时需要填写Schema信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'default',
          ),
        ),
        17 => 
        array (
          'name' => 'Columns',
          'in' => 'formData',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '字段列表，最大支持1000个字段。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '字段对象',
              'type' => 'object',
              'properties' => 
              array (
                'ColumnNameCn' => 
                array (
                  'description' => '字段的中文名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '中文名',
                ),
                'ColumnName' => 
                array (
                  'description' => '字段的名称。
CreateTable API当前最多支持配置1000个字段。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'columnName1',
                ),
                'Comment' => 
                array (
                  'description' => '字段的备注信息。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '备注',
                ),
                'ColumnType' => 
                array (
                  'description' => '字段的类型。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'string',
                ),
                'SeqNumber' => 
                array (
                  'description' => '字段的序列号。您可以指定字段在表中的排序，默认按照创建请求的顺序排序。
如果字段为分区字段，则不支持配置Columns.N.SeqNumber。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '1',
                ),
                'Length' => 
                array (
                  'description' => '字段的长度，详情请参见：<props="intl">[数据类型版本](~~159541~~)</props><props="china">[数据类型版本](~~159541~~)</props>。
',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '10',
                ),
                'IsPartitionCol' => 
                array (
                  'description' => '当前字段是否为分区字段。',
                  'type' => 'boolean',
                  'required' => false,
                  'example' => 'true',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 1000,
          ),
        ),
        18 => 
        array (
          'name' => 'Themes',
          'in' => 'formData',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '字段列表',
            'type' => 'array',
            'items' => 
            array (
              'description' => '返回对象',
              'type' => 'object',
              'properties' => 
              array (
                'ThemeId' => 
                array (
                  'description' => '主题ID。',
                  'type' => 'integer',
                  'format' => 'int64',
                  'required' => false,
                  'maximum' => '9223372036854775807',
                  'minimum' => '1',
                  'example' => '101',
                ),
                'ThemeLevel' => 
                array (
                  'description' => '主题ID对应的主题层级。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '101',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abcdef',
              ),
              'TaskInfo' => 
              array (
                'description' => '请求任务的信息。
请求任务提交成功后，会被分为多个子任务有序执行。当前子任务执行成功后，才会继续执行下一个子任务，所有子任务执行完毕，该请求任务结束。

如下情况，请求任务会终止，您需要根据错误码信息解决问题后重新发起请求任务：
- 请求任务提交失败。
- 请求任务提交成功后，任意子任务执行失败。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '当前执行的子任务的状态信息。取值如下：
- operating表示子任务正在执行中。
- success表示子任务执行成功。
- failure表示子任务执行失败。详细的报错信息请参见Content参数。
',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'NextTaskId' => 
                  array (
                    'description' => '即将执行的子任务ID。如果该字段为空，则表示所有子任务均已结束。',
                    'type' => 'string',
                    'example' => 'abc1',
                  ),
                  'TaskId' => 
                  array (
                    'description' => '当前执行的子任务ID。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'Content' => 
                  array (
                    'description' => '当前子任务的执行状态详细信息。具体如下：
- 执行成功，则显示success。
- 执行失败则显示对应的报错详情。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"abcdef\\",\\n  \\"TaskInfo\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"NextTaskId\\": \\"abc1\\",\\n    \\"TaskId\\": \\"abc\\",\\n    \\"Content\\": \\"success\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<CreateTableResponse>\\n    <TaskInfo>\\n        <Status>success</Status>\\n        <TaskId>abc</TaskId>\\n        <Content>success</Content>\\n        <NextTaskId>abc1</NextTaskId>\\n    </TaskInfo>\\n    <RequestId>abcdef</RequestId>\\n</CreateTableResponse>","errorExample":""}]',
      'title' => '创建一个MaxCompute表或视图',
      'summary' => '调用CreateTable创建一个MaxCompute的表或视图。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteTable' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
        'abilityTreeCode' => '78218',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '101',
          ),
        ),
        1 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'MaxCompute表的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'table1',
          ),
        ),
        2 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '引擎或数据源的类型。
取值范围：
- cdh
- analyticdb_for_mysql
- odps
- emr
- hadoop
- holodb
- hybriddb_for_postgresql',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'maximum' => '1',
            'minimum' => '0',
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'AppGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'MaxCompute项目的唯一标识，格式为odps.{projectName}。',
            'type' => 'string',
            'required' => false,
            'example' => 'odps.test',
          ),
        ),
        4 => 
        array (
          'name' => 'Schema',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表Schema信息。在ODPS，当您启动了三层模型时需要填写Schema信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'default',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abcde',
              ),
              'TaskInfo' => 
              array (
                'description' => '删除表的任务信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '已经结束的任务状态。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'NextTaskId' => 
                  array (
                    'description' => '正在运行的任务ID。',
                    'type' => 'string',
                    'example' => 'abc1',
                  ),
                  'TaskId' => 
                  array (
                    'description' => '已经结束的任务ID。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'Content' => 
                  array (
                    'description' => '任务的内容。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"abcde\\",\\n  \\"TaskInfo\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"NextTaskId\\": \\"abc1\\",\\n    \\"TaskId\\": \\"abc\\",\\n    \\"Content\\": \\"success\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<TaskInfo>\\n    <Status>success</Status>\\n    <TaskId>abc</TaskId>\\n    <Content>success</Content>\\n    <NextTaskId>abc1</NextTaskId>\\n</TaskInfo>\\n<RequestId>abcde</RequestId>","errorExample":""}]',
      'title' => '删除 MaxCompute 表',
      'summary' => '删除MaxCompute表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetDDLJobStatus' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DDL任务的ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'abc',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abc',
              ),
              'Data' => 
              array (
                'description' => '任务的详情。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '任务的状态。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'NextTaskId' => 
                  array (
                    'description' => '正在进行的TaskID。如果为空，说明全部任务已经结束。',
                    'type' => 'string',
                    'example' => 'abc1',
                  ),
                  'TaskId' => 
                  array (
                    'description' => '任务的ID。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'Content' => 
                  array (
                    'description' => '任务的内容。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"abc\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"NextTaskId\\": \\"abc1\\",\\n    \\"TaskId\\": \\"abc\\",\\n    \\"Content\\": \\"success\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>abc</RequestId>\\n<Data>\\n    <Status>success</Status>\\n    <TaskId>abc</TaskId>\\n    <Content>success</Content>\\n    <NextTaskId>abc1</NextTaskId>\\n</Data>","errorExample":""}]',
      'title' => '获取创建表、更新表和删除表的任务状态',
      'summary' => '调用GetDDLJobStatus获取创建表、更新表和删除表的任务状态。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetMetaColumnLineage' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78258',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSYOMAV',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ColumnGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '字段的唯一标识。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name.column_name',
          ),
        ),
        1 => 
        array (
          'name' => 'Direction',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '字段的上下游方向：up表示上游，down表示下游。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'up',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNum',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的ID，针对EMR情况。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        5 => 
        array (
          'name' => 'DatabaseName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库的名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        6 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        7 => 
        array (
          'name' => 'ColumnName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '字段名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        8 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，包括odps或emr。',
            'type' => 'string',
            'required' => false,
            'example' => 'emr',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNum' => 
                  array (
                    'description' => '请求的数据页数，用于翻页。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '字段的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '20',
                  ),
                  'DataEntityList' => 
                  array (
                    'description' => '实例数据列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ColumnGuid' => 
                        array (
                          'description' => '字段的唯一标识。',
                          'type' => 'string',
                          'example' => 'odps.engine_name.table_name.1',
                        ),
                        'ColumnName' => 
                        array (
                          'description' => '字段的名称。',
                          'type' => 'string',
                          'example' => '1',
                        ),
                        'TableName' => 
                        array (
                          'description' => '表名',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                        'DatabaseName' => 
                        array (
                          'description' => '数据库名称',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                        'ClusterId' => 
                        array (
                          'description' => 'emr集群ID',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"PageNum\\": 1,\\n    \\"PageSize\\": 10,\\n    \\"TotalCount\\": 20,\\n    \\"DataEntityList\\": [\\n      {\\n        \\"ColumnGuid\\": \\"odps.engine_name.table_name.1\\",\\n        \\"ColumnName\\": \\"1\\",\\n        \\"TableName\\": \\"abc\\",\\n        \\"DatabaseName\\": \\"abc\\",\\n        \\"ClusterId\\": \\"abc\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc1ec92159376</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <TotalCount>20</TotalCount>\\n    <PageNum>1</PageNum>\\n    <PageSize>10</PageSize>\\n    <DataEntityList>\\n        <ColumnName>1</ColumnName>\\n        <TableName>abc</TableName>\\n        <ColumnGuid>odps.engine_name.table_name.1</ColumnGuid>\\n        <ClusterId>abc</ClusterId>\\n        <DatabaseName>abc</DatabaseName>\\n    </DataEntityList>\\n</Data>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '获取字段的血缘关系',
      'summary' => '调用GetMetaColumnLineage获取字段的血缘关系。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaColumnLineage接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'GetMetaTableFullInfo' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78264',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识。您可以通过调用[GetMetaDBTableList](~~173916~~)，获取表的唯一标识。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNum',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '请求获取的页码数，用于分页。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的ID，您可以登录EMR管理控制台，获取集群ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'C-010A704DA760****',
          ),
        ),
        4 => 
        array (
          'name' => 'DatabaseName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR的数据库名称。您可以通过调用[ListMetaDB](~~185662~~)接口，获取数据库名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        5 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR的表名称。您可以通过调用[GetMetaDBTableList](~~173916~~)接口，获取表名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        6 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，当前仅支持取值为emr。',
            'type' => 'string',
            'required' => false,
            'example' => 'emr',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1411515937****',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'TableName' => 
                  array (
                    'description' => '表的名称。',
                    'type' => 'string',
                    'example' => 'table_name',
                  ),
                  'Comment' => 
                  array (
                    'description' => '表的备注信息。',
                    'type' => 'string',
                    'example' => 'comment',
                  ),
                  'LifeCycle' => 
                  array (
                    'description' => '表的生命周期，单位为天。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '5',
                  ),
                  'CreateTime' => 
                  array (
                    'description' => '创建表的时间。该结果显示为时间戳，您可以根据使用的时区将时间戳转换为相应日期。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1589870293000',
                  ),
                  'ProjectName' => 
                  array (
                    'description' => '表所在工作空间的名称。',
                    'type' => 'string',
                    'example' => 'test',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '表所在工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '22',
                  ),
                  'OwnerId' => 
                  array (
                    'description' => '表所有者的ID。',
                    'type' => 'string',
                    'example' => '123',
                  ),
                  'EnvType' => 
                  array (
                    'description' => '环境类型，取值如下：
- 0表示开发环境的表。
- 1表示生产环境的表。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'LastAccessTime' => 
                  array (
                    'description' => '最后一次访问表的时间。该结果显示为时间戳，您可以根据使用的时区将时间戳转换为相应日期。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1589870294000',
                  ),
                  'DataSize' => 
                  array (
                    'description' => '表占用的存储空间，单位为字节（B）。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '10',
                  ),
                  'LastModifyTime' => 
                  array (
                    'description' => '最后更新表的时间。该结果显示为时间戳，您可以根据使用的时区将时间戳转换为相应日期。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1589870294000',
                  ),
                  'DatabaseName' => 
                  array (
                    'description' => '数据库的名称。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'IsVisible' => 
                  array (
                    'description' => '表是否可见，取值如下：
- 0表示该表对工作空间成员可见。
- 1表示该表对租户内可见。
- 2表示该表在租户间均可见。
- 3表示该表仅对责任人可见。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'TotalColumnCount' => 
                  array (
                    'description' => '字段的总数。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '22',
                  ),
                  'TableGuid' => 
                  array (
                    'description' => '表的唯一标识。',
                    'type' => 'string',
                    'example' => 'odps.engine_name.table_name',
                  ),
                  'PartitionKeys' => 
                  array (
                    'description' => '分区键。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'LastDdlTime' => 
                  array (
                    'description' => '最后变更表结构的时间。该结果显示为时间戳，您可以根据使用的时区将时间戳转换为相应日期。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1589870294000',
                  ),
                  'Location' => 
                  array (
                    'description' => 'Hive表的存储地址。',
                    'type' => 'string',
                    'example' => 'hdfs://localhost:777/user/hadoop/test.txt',
                  ),
                  'ClusterId' => 
                  array (
                    'description' => 'EMR集群的ID。',
                    'type' => 'string',
                    'example' => 'C-010A704DA760****',
                  ),
                  'TenantId' => 
                  array (
                    'description' => '租户ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '12345',
                  ),
                  'Schema' => 
                  array (
                    'type' => 'string',
                  ),
                  'ColumnList' => 
                  array (
                    'description' => '字段列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ColumnName' => 
                        array (
                          'description' => '字段的名称。',
                          'type' => 'string',
                          'example' => '1',
                        ),
                        'ColumnGuid' => 
                        array (
                          'description' => '字段的唯一标识。',
                          'type' => 'string',
                          'example' => 'odps.engine_name.table_name.1',
                        ),
                        'IsPartitionColumn' => 
                        array (
                          'description' => '字段是否为分区字段，取值如下：
- true，是分区字段。
- false，不是分区字段。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'Comment' => 
                        array (
                          'description' => '字段的备注。',
                          'type' => 'string',
                          'example' => 'comment',
                        ),
                        'ColumnType' => 
                        array (
                          'description' => '字段的类型。',
                          'type' => 'string',
                          'example' => 'string',
                        ),
                        'IsPrimaryKey' => 
                        array (
                          'description' => '字段是否为主键，取值如下：
- true，是主键。
- false，不是主键。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Position' => 
                        array (
                          'description' => '字段的排序。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'Caption' => 
                        array (
                          'description' => '字段的描述信息。',
                          'type' => 'string',
                          'example' => 'data comment',
                        ),
                        'IsForeignKey' => 
                        array (
                          'description' => '字段是否为外键，取值如下：
- true，是外键。
- false，不是外键。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
          5 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"RequestId\\": \\"0bc1411515937****\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Data\\": {\\n    \\"TableName\\": \\"table_name\\",\\n    \\"Comment\\": \\"comment\\",\\n    \\"LifeCycle\\": 5,\\n    \\"CreateTime\\": 1589870293000,\\n    \\"ProjectName\\": \\"test\\",\\n    \\"ProjectId\\": 22,\\n    \\"OwnerId\\": \\"123\\",\\n    \\"EnvType\\": 1,\\n    \\"LastAccessTime\\": 1589870294000,\\n    \\"DataSize\\": 10,\\n    \\"LastModifyTime\\": 1589870294000,\\n    \\"DatabaseName\\": \\"abc\\",\\n    \\"IsVisible\\": 1,\\n    \\"TotalColumnCount\\": 22,\\n    \\"TableGuid\\": \\"odps.engine_name.table_name\\",\\n    \\"PartitionKeys\\": \\"abc\\",\\n    \\"LastDdlTime\\": 1589870294000,\\n    \\"Location\\": \\"hdfs://localhost:777/user/hadoop/test.txt\\",\\n    \\"ClusterId\\": \\"C-010A704DA760****\\",\\n    \\"TenantId\\": 12345,\\n    \\"ColumnList\\": [\\n      {\\n        \\"ColumnName\\": \\"1\\",\\n        \\"ColumnGuid\\": \\"odps.engine_name.table_name.1\\",\\n        \\"IsPartitionColumn\\": true,\\n        \\"Comment\\": \\"comment\\",\\n        \\"ColumnType\\": \\"string\\",\\n        \\"IsPrimaryKey\\": false,\\n        \\"Position\\": 1,\\n        \\"Caption\\": \\"data comment\\",\\n        \\"IsForeignKey\\": true\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc1411515937****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <LifeCycle>5</LifeCycle>\\n    <Comment>comment</Comment>\\n    <ProjectName>test</ProjectName>\\n    <ClusterId>abc</ClusterId>\\n    <LastDdlTime>1589870294000</LastDdlTime>\\n    <CreateTime>1589870293000</CreateTime>\\n    <TotalColumnCount>22</TotalColumnCount>\\n    <ProjectId>22</ProjectId>\\n    <DatabaseName>abc</DatabaseName>\\n    <LastModifyTime>1589870294000</LastModifyTime>\\n    <LastAccessTime>1589870294000</LastAccessTime>\\n    <EnvType>1</EnvType>\\n    <TableName>table_name</TableName>\\n    <TableGuid>odps.engine_name.table_name</TableGuid>\\n    <TenantId>12345</TenantId>\\n    <OwnerId>123</OwnerId>\\n    <DataSize>10</DataSize>\\n    <PartitionKeys>abc</PartitionKeys>\\n    <ColumnList>\\n        <ColumnName>1</ColumnName>\\n        <Comment>comment</Comment>\\n        <ColumnGuid>odps.engine_name.table_name.1</ColumnGuid>\\n        <ColumnType>string</ColumnType>\\n        <IsPartitionColumn>true</IsPartitionColumn>\\n        <IsForeignKey>true</IsForeignKey>\\n        <Caption>data comment</Caption>\\n        <IsPrimaryKey>false</IsPrimaryKey>\\n    </ColumnList>\\n    <IsVisible>1</IsVisible>\\n    <Location>hdfs://localhost:777/user/hadoop/test.txt</Location>\\n</Data>\\n<ErrorCode>1031203110005</ErrorCode>\\n<ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '获取表的完整信息（包括字段信息）',
      'summary' => '调用GetMetaTableFullInfo接口，获取表的完整信息（包括字段信息）。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' GetMetaTableFullInfo接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'GetMetaTableLineage' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '78266',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideSYOMAV',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的唯一标识。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
        1 => 
        array (
          'name' => 'Direction',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '字段的上下游方向：up表示上游，down表示下游。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'up',
          ),
        ),
        2 => 
        array (
          'name' => 'NextPrimaryKey',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页的逻辑，请根据请求返回参数HasNext=true和key填写。',
            'type' => 'string',
            'required' => false,
            'example' => 'odps.engine_name.table_name1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'EMR集群的ID，针对EMR情况。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        5 => 
        array (
          'name' => 'DatabaseName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库的名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        6 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表名。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        7 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据类型，包括odps或emr。',
            'type' => 'string',
            'required' => false,
            'example' => 'emr',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'description' => '返回数据结构。',
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1ec92159376',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '业务数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'NextPrimaryKey' => 
                  array (
                    'description' => '分页的逻辑，请根据请求返回参数HasNext=true和key填写。',
                    'type' => 'string',
                    'example' => 'odps.tt.2',
                  ),
                  'HasNext' => 
                  array (
                    'description' => '是否还有下一页。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'DataEntityList' => 
                  array (
                    'description' => '表信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结构。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TableName' => 
                        array (
                          'description' => '表的名称。',
                          'type' => 'string',
                          'example' => 'name',
                        ),
                        'TableGuid' => 
                        array (
                          'description' => '表的唯一标识。',
                          'type' => 'string',
                          'example' => 'odps.tt.name',
                        ),
                        'CreateTimestamp' => 
                        array (
                          'description' => '创建时间',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1638720736000',
                        ),
                        'DatabaseName' => 
                        array (
                          'description' => '数据库名称',
                          'type' => 'string',
                          'example' => 'db1',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Meta.TableNotExist',
            'errorMessage' => 'The table does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.CommonError',
            'errorMessage' => 'The specified parameter is invalid.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.GuidFormat',
            'errorMessage' => 'The GUID format is invalid.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.Illegal',
            'errorMessage' => 'The app guid parameter is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalDate',
            'errorMessage' => 'The date format is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.IllegalPageError',
            'errorMessage' => 'The parameter for paging is invalid.',
          ),
          6 => 
          array (
            'errorCode' => 'InvalidParameter.Meta.NotExist',
            'errorMessage' => 'The object does not exist.',
          ),
          7 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          8 => 
          array (
            'errorCode' => 'InternalError.Meta.NoCalcEngine',
            'errorMessage' => 'An error occurred while retrieving the compute engine based on the MaxCompute project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Activate DataWorks first.',
          ),
          1 => 
          array (
            'errorCode' => 'ResourceNotAuthorized.Api',
            'errorMessage' => 'You are not authorized to access the resources.',
          ),
          2 => 
          array (
            'errorCode' => 'Forbidden.Meta.NoTenant',
            'errorMessage' => 'The user is not the owner of any tenants.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.Meta.TenantTimeOut',
            'errorMessage' => 'Failed to connect to the interface network.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.Meta.Unknown',
            'errorMessage' => 'An unknown error occurred while processing your request.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"0bc1ec92159376\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": {\\n    \\"NextPrimaryKey\\": \\"odps.tt.2\\",\\n    \\"HasNext\\": true,\\n    \\"DataEntityList\\": [\\n      {\\n        \\"TableName\\": \\"name\\",\\n        \\"TableGuid\\": \\"odps.tt.name\\",\\n        \\"CreateTimestamp\\": 1638720736000,\\n        \\"DatabaseName\\": \\"db1\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetMetaTableLineageResponse>\\n    <HttpStatusCode>200</HttpStatusCode>\\n    <ErrorMessage>The connection does not exist.</ErrorMessage>\\n    <RequestId>0bc1ec92159376</RequestId>\\n    <Success>true</Success>\\n    <ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n    <Data>\\n        <NextPrimaryKey>odps.tt.2</NextPrimaryKey>\\n        <HasNext>true</HasNext>\\n        <DataEntityList>\\n            <TableName>name</TableName>\\n            <TableGuid>odps.tt.name</TableGuid>\\n            <CreateTimestamp>1638720736000</CreateTimestamp>\\n            <DatabaseName>db1</DatabaseName>\\n        </DataEntityList>\\n    </Data>\\n</GetMetaTableLineageResponse>","errorExample":""}]',
      'title' => '获取表的血缘关系',
      'summary' => '调用GetMetaTableLineage获取表的血缘关系。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => 'GetMetaTableLineage接口的使用示例Demo请参见[DataWorks OpenAPI示例](https://developer.aliyun.com/article/780879?groupCode=dataworks)。',
    ),
    'UpdateTable' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78382',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideX3KVYR',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'IsView',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否为视图，包括0（否）和1（是）。该字段已废弃，请勿使用。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
          ),
        ),
        1 => 
        array (
          'name' => 'Visibility',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的可见性，包括0（对所有成员不可见）、1（对所有成员可见）和2（对工作空间成员可见）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'LifeCycle',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表的生命周期，单位为天。生命周期为空时，表示永久存储。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'CategoryId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '关联的类目ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '101',
          ),
        ),
        4 => 
        array (
          'name' => 'LogicalLevelId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '逻辑层级ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '101',
          ),
        ),
        5 => 
        array (
          'name' => 'PhysicsLevelId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '物理层级ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '101',
          ),
        ),
        6 => 
        array (
          'name' => 'ExternalTableType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '外表的类型，包括0（OSS）、1（TableStore）、2（Volume）和3（MySQL）。该字段已废弃，请勿使用。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        7 => 
        array (
          'name' => 'Location',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '外表的存储地址。该字段已废弃，请勿使用。',
            'type' => 'string',
            'required' => false,
            'example' => 'location',
          ),
        ),
        8 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录DataWorks控制台获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '101',
          ),
        ),
        9 => 
        array (
          'name' => 'TableName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'MaxCompute表名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'abc',
          ),
        ),
        10 => 
        array (
          'name' => 'Endpoint',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'MaxCompute Endpoint。不填时，默认取项目对应的Endpoint。',
            'type' => 'string',
            'required' => false,
            'example' => 'odps://',
          ),
        ),
        11 => 
        array (
          'name' => 'EnvType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的环境，包括0（开发环境）和1（生产环境）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        12 => 
        array (
          'name' => 'AppGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'MaxCompute项目的唯一标识，格式为odps.{projectName}。',
            'type' => 'string',
            'required' => false,
            'example' => 'odps.test',
          ),
        ),
        13 => 
        array (
          'name' => 'CreateIfNotExists',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表是否存在：
- true：是，表存在。
- false：否，表不存在。

该字段已废弃，请勿使用。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        14 => 
        array (
          'name' => 'HasPart',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要更新的MaxCompute表是否为分区表，包括0（否）和1（是）。该字段已废弃，请勿使用。
目前代码会根据Column.N.isPartitionCol参数判断MaxCompute表是否为分区表，当Column.N.isPartition参数取值为1时，则认为MaxCompute表为分区表。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
          ),
        ),
        15 => 
        array (
          'name' => 'Comment',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '备注信息。',
            'type' => 'string',
            'required' => false,
            'example' => '备注',
          ),
        ),
        16 => 
        array (
          'name' => 'Schema',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '表Schema信息。在ODPS，当您启动了三层模型时需要填写Schema信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'default',
          ),
        ),
        17 => 
        array (
          'name' => 'Columns',
          'in' => 'formData',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '字段列表',
            'type' => 'array',
            'items' => 
            array (
              'description' => '返回对象',
              'type' => 'object',
              'properties' => 
              array (
                'ColumnNameCn' => 
                array (
                  'description' => '字段的中文名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '中文',
                ),
                'ColumnName' => 
                array (
                  'description' => '字段的名称。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'abc',
                ),
                'Comment' => 
                array (
                  'description' => '字段的备注。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '备注',
                ),
                'ColumnType' => 
                array (
                  'description' => '字段的类型，请参见MaxCompute支持的字段类型。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'string',
                ),
                'SeqNumber' => 
                array (
                  'description' => '字段的序号。如果字段为分区字段，则不支持配置Columns.N.SeqNumber。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '1',
                ),
                'Length' => 
                array (
                  'description' => '字段的长度。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '10',
                ),
                'IsPartitionCol' => 
                array (
                  'description' => '是否为分区字段，包括0（否）和1（是）。',
                  'type' => 'boolean',
                  'required' => false,
                  'example' => '0',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
        18 => 
        array (
          'name' => 'Themes',
          'in' => 'formData',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '字段列表',
            'type' => 'array',
            'items' => 
            array (
              'description' => '返回对象',
              'type' => 'object',
              'properties' => 
              array (
                'ThemeId' => 
                array (
                  'description' => '关联的主题ID。',
                  'type' => 'integer',
                  'format' => 'int64',
                  'required' => false,
                  'maximum' => '9223372036854775807',
                  'minimum' => '1',
                  'example' => '101',
                ),
                'ThemeLevel' => 
                array (
                  'description' => '主题ID对应的层级。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '101',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abcde',
              ),
              'TaskInfo' => 
              array (
                'description' => '请求任务的信息。
请求任务提交成功后，会被分为多个子任务有序执行。当前子任务执行成功后，才会继续执行下一个子任务，所有子任务执行完毕，该请求任务结束。如下情况，请求任务会终止，您需要根据错误码信息解决问题后重新发起请求任务：
- 请求任务提交失败。
- 请求任务提交成功后，任意子任务执行失败。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '当前执行的子任务的状态信息。取值如下：
- operating表示子任务正在执行中。
- success表示子任务执行成功。
- failure表示子任务执行失败。详细的报错信息请参见Content参数。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'NextTaskId' => 
                  array (
                    'description' => '即将执行的子任务ID。如果该字段为空，则表示所有子任务均已结束。您可以使用获取到的ID，从[GetDDLJobStatus](~~185659~~)接口查询对应子任务的状态。',
                    'type' => 'string',
                    'example' => 'abc1',
                  ),
                  'TaskId' => 
                  array (
                    'description' => '当前执行的子任务ID。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'Content' => 
                  array (
                    'description' => '当前子任务的执行状态详细信息。具体如下：
- 执行成功，则显示success。
- 执行失败则显示对应的报错详情。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"abcde\\",\\n  \\"TaskInfo\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"NextTaskId\\": \\"abc1\\",\\n    \\"TaskId\\": \\"abc\\",\\n    \\"Content\\": \\"success\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<UpdateTableResponse>\\n    <TaskInfo>\\n        <Status>success</Status>\\n        <TaskId>abc</TaskId>\\n        <Content>success</Content>\\n        <NextTaskId>abc1</NextTaskId>\\n    </TaskInfo>\\n    <RequestId>abcde</RequestId>\\n</UpdateTableResponse>","errorExample":""}]',
      'title' => '更新MaxCompute表',
      'summary' => '调用UpdateTable更新MaxCompute表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateTableAddColumn' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78383',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdideRZEBFC',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TableGuid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'MaxCompute表的唯一标识。格式为odps.projectName.tableName。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'odps.engine_name.table_name',
          ),
        ),
        1 => 
        array (
          'name' => 'Column',
          'in' => 'formData',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '字段列表',
            'type' => 'array',
            'items' => 
            array (
              'description' => '返回对象',
              'type' => 'object',
              'properties' => 
              array (
                'ColumnNameCn' => 
                array (
                  'description' => '字段的中文名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '中文',
                ),
                'ColumnName' => 
                array (
                  'description' => '字段的名称。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'abc',
                ),
                'Comment' => 
                array (
                  'description' => '字段的备注信息。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '备注',
                ),
                'ColumnType' => 
                array (
                  'description' => '字段的类型，请参见MaxCompute支持的字段类型。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'string',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 100,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回对象',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'abc',
              ),
              'TaskInfo' => 
              array (
                'description' => '请求任务的信息。
请求任务提交成功后，会被分为多个子任务有序执行。当前子任务执行成功后，才会继续执行下一个子任务，所有子任务执行完毕，该请求任务结束。如下情况，请求任务会终止，您需要根据错误码信息解决问题后重新发起请求任务：
- 请求任务提交失败。
- 请求任务提交成功后，任意子任务执行失败。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '当前执行的子任务的状态信息。取值如下：
- operating表示子任务正在执行中。
- success表示子任务执行成功。
- failure表示子任务执行失败。详细的报错信息请参见Content参数。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'NextTaskId' => 
                  array (
                    'description' => '即将执行的子任务ID。如果该字段为空，则表示所有子任务均已结束。',
                    'type' => 'string',
                    'example' => 'abc1',
                  ),
                  'TaskId' => 
                  array (
                    'description' => '当前执行的子任务ID。',
                    'type' => 'string',
                    'example' => 'abc2',
                  ),
                  'Content' => 
                  array (
                    'description' => '当前子任务的执行状态详细信息。具体如下：
- 执行成功，则显示success。
- 执行失败则显示对应的报错详情。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"abc\\",\\n  \\"TaskInfo\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"NextTaskId\\": \\"abc1\\",\\n    \\"TaskId\\": \\"abc2\\",\\n    \\"Content\\": \\"success\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<UpdateTableAddColumnResponse>\\n    <TaskInfo>\\n        <Status>success</Status>\\n        <TaskId>abc2</TaskId>\\n        <Content>success</Content>\\n        <NextTaskId>abc1</NextTaskId>\\n    </TaskInfo>\\n    <RequestId>abc</RequestId>\\n</UpdateTableAddColumnResponse>","errorExample":""}]',
      'title' => '更新表的字段信息',
      'summary' => '更新MaxCompute表的字段信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CheckFileDeployment' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
        'abilityTreeCode' => '78171',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREdide4AR6E0',
          1 => 'FEATUREdide8FM783',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'CheckerInstanceId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '文件检查器所属的实例ID。您可以从文件发布检查事件中的CheckerInstanceId获取。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '66_123455623_2',
          ),
        ),
        1 => 
        array (
          'name' => 'Status',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '待发布文件的检查状态，取值如下：
- OK，表示文件检查通过。
- WARN，表示文件检查通过，但是存在警告。
- FAIL，表示文件检查未通过。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'OK',
            'enum' => 
            array (
              0 => 'OK',
              1 => 'FAIL',
              2 => 'WARN',
            ),
          ),
        ),
        2 => 
        array (
          'name' => 'CheckDetailUrl',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '已废弃。',
            'type' => 'string',
            'required' => false,
            'example' => 'https://result.aliyun.com/?checkerInstanceId=',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID，用于后续问题排查。',
                'type' => 'string',
                'example' => '86d5a5ac-0cc0-4c5f-a374-a15713b252ab',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"86d5a5ac-0cc0-4c5f-a374-a15713b252ab\\"\\n}","errorExample":""},{"type":"xml","example":"<RequestId>86d5a5ac-0cc0-4c5f-a374-a15713b252ab</RequestId>","errorExample":""}]',
      'title' => '检查文件部署',
      'summary' => '当您在DataWorks数据开发页面创建的文件提交成功后，文件将进入发布检查状态，DataWorks会将文件发布检查事件返回给您，您需要根据事件内容判断该文件是否可以继续进行发布校验。此时，可以通过将待发布文件的检查结果返回至DataWorks。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListRefDISyncTasks' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
        2 => 
        array (
          'APP' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'DatasourceName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要查看的目标数据源名称。您可以调用[ListDataSources](~~211431~~)接口获取数据源名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'mysql_datasource',
          ),
        ),
        2 => 
        array (
          'name' => 'TaskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所关联的数据集成同步任务的任务类型。取值如下：
- DI_OFFLINE：表示数据集成离线同步任务。
- DI_REALTIME：表示数据集成实时同步任务。

当前仅支持调用ListRefDISyncTasks接口选择查看一种类型的任务，不支持查询同步方案的任务类型',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'DI_OFFLINE',
          ),
        ),
        3 => 
        array (
          'name' => 'RefType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '选择目标数据源作为数据集成同步任务的源端或目的端。取值如下：
- from：目标数据源作为数据集成同步任务的源端。
- to：目标数据源作为数据集成同步任务的目的端。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'from',
          ),
        ),
        4 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码数。最小值1，最大值100',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'minimum' => '1',
            'example' => '11',
            'default' => '1',
          ),
        ),
        5 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的数据条数。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'maximum' => '100000',
            'minimum' => '1',
            'example' => '50',
            'default' => '100',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '返回的数据结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'DISyncTasks' => 
                  array (
                    'description' => '返回数据结果的数组信息。
通常，目标数据源会关联多个数据集成同步任务，调用ListRefDISyncTasks接口查询目标数据源关联的同步任务时，返回的结果为目标数据源所关联的同步任务的数组。如下信息为数组中一个同步任务的信息示例。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '返回数据结果的数组信息。
通常，目标数据源会关联多个数据集成同步任务，调用ListRefDISyncTasks接口查询目标数据源关联的同步任务时，返回的结果为目标数据源所关联的同步任务的数组。如下信息为数组中一个同步任务的信息示例。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'DiSourceDatasource' => 
                        array (
                          'description' => '目标数据源所关联的当前同步任务的源端数据源。
如果当前同步任务存在多个源端数据源，则会以JSON数组的形式返回多个源端数据源。例如，[\\"odps_writer\\", \\"mysql\\"]。
当RefType参数取值为from时，即目标数据源作为数据集成同步任务的源端，则当前参数的返回结果为目标数据源本身。',
                          'type' => 'string',
                          'example' => '[\\"odps_writer\\"]',
                        ),
                        'TaskType' => 
                        array (
                          'description' => '目标数据源所关联的当前数据集成同步任务的任务类型。取值如下：
- DI_OFFLINE：数据集成离线同步任务。
- DI_REALTIME：数据集成实时同步任务。',
                          'type' => 'string',
                          'example' => 'DI_OFFLINE',
                        ),
                        'DiDestinationDatasource' => 
                        array (
                          'description' => '目标数据源所关联的当前同步任务的目的端数据源。
如果当前同步任务存在多个目的端数据源，则会以JSON数组的形式返回多个目的端数据源。例如，[\\"odps_writer\\", \\"mysql\\"]。
当RefType参数取值为to时，即目标数据源作为数据集成同步任务的目的端，则当前参数的返回结果为目标数据源本身。
',
                          'type' => 'string',
                          'example' => '[\\"qcc_polardb2\\"]',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '目标数据源所关联的当前数据集成同步任务的任务名称。',
                          'type' => 'string',
                          'example' => 'abcd1234',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '目标数据源所关联的当前数据集成同步任务的任务ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '100000',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter.File.Existed',
            'errorMessage' => 'The file name already exists.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"DISyncTasks\\": [\\n      {\\n        \\"DiSourceDatasource\\": \\"[\\\\\\\\\\\\\\"odps_writer\\\\\\\\\\\\\\"]\\",\\n        \\"TaskType\\": \\"DI_OFFLINE\\",\\n        \\"DiDestinationDatasource\\": \\"[\\\\\\\\\\\\\\"qcc_polardb2\\\\\\\\\\\\\\"]\\",\\n        \\"NodeName\\": \\"abcd1234\\",\\n        \\"NodeId\\": 100000\\n      }\\n    ]\\n  }\\n}","type":"json"}]',
      'title' => '查看目标数据源所关联的数据集成同步任务',
      'summary' => '查看目标数据源所关联的数据集成同步任务。',
    ),
    'ExportDataSources' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'APP' => 
          array (
          ),
        ),
        2 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所在的DataWorks工作空间ID。您可以调用[ListProjects](~~178393~~)接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待导出的目标数据源名称所包含的关键字。
当前仅支持配置一个关键字。例如，该参数配置为test（即待导出的目标数据源名称所包含的关键字为test），则调用ExportDataSources接口会导出目标工作空间中所有名称包含test的数据源。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'test',
          ),
        ),
        2 => 
        array (
          'name' => 'DataSourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源的类型。常用的类型如下：
- odps
- mysql
- rds
- oss
- sqlserver
- polardb
- oracle
- mongodb
- emr
- postgresql
- analyticdb_for_mysql
- hybriddb_for_postgresql
- holo',
            'type' => 'string',
            'required' => false,
            'example' => 'rds',
          ),
        ),
        3 => 
        array (
          'name' => 'SubType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源的子类型。仅当DataSourceType参数配置为RDS时，该参数生效。

当DataSourceType参数配置为RDS时，该参数可以配置为mysql、sqlserver或postgresql。',
            'type' => 'string',
            'required' => false,
            'example' => 'mysql',
          ),
        ),
        4 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所属的环境。取值如下：
- 0：开发环境。
- 1：生产环境。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        5 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大为100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'example' => '10',
            'default' => '10',
          ),
        ),
        6 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询的页码。取值为大于等于1的正整数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => '此次调用的返回结果状态。取值如下：
- 200：表示此次调用的返回结果成功。
- 其他值：表示此次调用的返回结果异常。您可以根据对应错误码处理相关异常。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc14115159376359****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '批量导出数据源的返回结果。
',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '分页查询的页码。取值为大于等于1的正整数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '10',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的数据条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '返回满足条件的数据源总条数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '100',
                  ),
                  'DataSources' => 
                  array (
                    'description' => '批量导出的数据源的详细信息。
此次调用的返回结果为导出数据源的详细信息数组，如下信息为数组中的一个数据源的详细信息示例。
',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '数据源是否可用。取值如下：
- 1：表示数据源可用。
- 0：表示数据源不可用。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '数据源所属的DataWorks工作空间ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '123',
                        ),
                        'SubType' => 
                        array (
                          'description' => '数据源的子类型。仅当DataSourceType参数配置为RDS时，该参数生效。

当DataSourceType参数配置为RDS时，该参数可以取值为mysql、sqlserver或postgresql。',
                          'type' => 'string',
                          'example' => 'mysql',
                        ),
                        'GmtModified' => 
                        array (
                          'description' => '最近一次修改数据源的时间。格式示例为：Mar 17, 2021 4:09:32 PM。',
                          'type' => 'string',
                          'example' => 'Mar 17, 2021 4:09:32 PM',
                        ),
                        'EnvType' => 
                        array (
                          'description' => '数据源所属的环境。取值如下：
- 0：开发环境。
- 1：生产环境。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'ConnectStatus' => 
                        array (
                          'description' => '数据源与任意独享资源组的连通性状态。取值如下：
- 1：表示数据源至少与一个独享资源组连通。
- 0：表示数据源与所有独享资源组均未连通。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'Sequence' => 
                        array (
                          'description' => '数据源的序列。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '300',
                        ),
                        'Description' => 
                        array (
                          'description' => '数据源的描述信息。',
                          'type' => 'string',
                          'example' => 'a connection',
                        ),
                        'DataSourceType' => 
                        array (
                          'description' => '数据源的类型。常用的类型如下：
- odps
- mysql
- rds
- oss
- sqlserver
- polardb
- oracle
- mongodb
- emr
- postgresql
- analyticdb_for_mysql
- hybriddb_for_postgresql
- holo',
                          'type' => 'string',
                          'example' => 'rds',
                        ),
                        'GmtCreate' => 
                        array (
                          'description' => '数据源的创建时间。格式示例为：Mar 17, 2021 4:09:32 PM。',
                          'type' => 'string',
                          'example' => 'Mar 17, 2021 4:09:32 PM',
                        ),
                        'DefaultEngine' => 
                        array (
                          'description' => '数据源所在的引擎是否为默认引擎。取值如下：
- true：是默认引擎。
- false：不是默认引擎。
',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Shared' => 
                        array (
                          'description' => '数据源是否可以分享。取值如下：
- true：数据源可以分享。
- false：数据源不可以分享。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Operator' => 
                        array (
                          'description' => '操作数据源的用户ID。',
                          'type' => 'string',
                          'example' => '193543050****',
                        ),
                        'Name' => 
                        array (
                          'description' => '数据源的名称。',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                        'Content' => 
                        array (
                          'description' => '数据源的详细配置。',
                          'type' => 'string',
                          'example' => '{"pubEndpoint":"http://service.cn.maxcompute.aliyun.com/api","accessId":"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC","securityToken":null,"endpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","accessKey":"***","name":"PRE_PROJECT_A_engine","project":"PRE_PROJECT_A","vpcEndpoint":"http://service.cn.maxcompute.aliyun-inc.com/api","region":"cn-shanghai","authType":"2"}',
                        ),
                        'Id' => 
                        array (
                          'description' => '数据源的ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'BindingCalcEngineId' => 
                        array (
                          'description' => '数据源所绑定的引擎ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '123',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '数据源所属租户的租户ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234567',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0bc14115159376359****\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 10,\\n    \\"PageSize\\": 1,\\n    \\"TotalCount\\": 100,\\n    \\"DataSources\\": [\\n      {\\n        \\"Status\\": 1,\\n        \\"ProjectId\\": 123,\\n        \\"SubType\\": \\"mysql\\",\\n        \\"GmtModified\\": \\"Mar 17, 2021 4:09:32 PM\\",\\n        \\"EnvType\\": 1,\\n        \\"ConnectStatus\\": 1,\\n        \\"Sequence\\": 300,\\n        \\"Description\\": \\"a connection\\",\\n        \\"DataSourceType\\": \\"rds\\",\\n        \\"GmtCreate\\": \\"Mar 17, 2021 4:09:32 PM\\",\\n        \\"DefaultEngine\\": false,\\n        \\"Shared\\": false,\\n        \\"Operator\\": \\"193543050****\\",\\n        \\"Name\\": \\"abc\\",\\n        \\"Content\\": \\"{\\\\\\"pubEndpoint\\\\\\":\\\\\\"http://service.cn.maxcompute.aliyun.com/api\\\\\\",\\\\\\"accessId\\\\\\":\\\\\\"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC\\\\\\",\\\\\\"securityToken\\\\\\":null,\\\\\\"endpoint\\\\\\":\\\\\\"http://service.cn.maxcompute.aliyun-inc.com/api\\\\\\",\\\\\\"accessKey\\\\\\":\\\\\\"***\\\\\\",\\\\\\"name\\\\\\":\\\\\\"PRE_PROJECT_A_engine\\\\\\",\\\\\\"project\\\\\\":\\\\\\"PRE_PROJECT_A\\\\\\",\\\\\\"vpcEndpoint\\\\\\":\\\\\\"http://service.cn.maxcompute.aliyun-inc.com/api\\\\\\",\\\\\\"region\\\\\\":\\\\\\"cn-shanghai\\\\\\",\\\\\\"authType\\\\\\":\\\\\\"2\\\\\\"}\\",\\n        \\"Id\\": 1,\\n        \\"BindingCalcEngineId\\": 123,\\n        \\"TenantId\\": 1234567\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc14115159376359****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <TotalCount>100</TotalCount>\\n    <PageSize>1</PageSize>\\n    <PageNumber>10</PageNumber>\\n    <DataSources>\\n        <Status>1</Status>\\n        <Operator>193543050****</Operator>\\n        <ConnectStatus>1</ConnectStatus>\\n        <SubType>mysql</SubType>\\n        <Description>a connection</Description>\\n        <BindingCalcEngineId>123</BindingCalcEngineId>\\n        <ProjectId>123</ProjectId>\\n        <GmtModified>Mar 17, 2021 4:09:32 PM</GmtModified>\\n        <Sequence>300</Sequence>\\n        <Shared>false</Shared>\\n        <EnvType>1</EnvType>\\n        <Name>abc</Name>\\n        <DefaultEngine>false</DefaultEngine>\\n        <TenantId>1234567</TenantId>\\n        <GmtCreate>Mar 17, 2021 4:09:32 PM</GmtCreate>\\n        <Content>{\\"pubEndpoint\\":\\"http://service.cn.maxcompute.aliyun.com/api\\",\\"accessId\\":\\"TMP.3KecGjvzy3i8MYfn2BGHgF7EHGyBFZcHm7GgngrABVRyvvKQrfF5kskR36xP361C3dqwbGo7SGYptAeGyiTwHXqLaBUvYC\\",\\"securityToken\\":null,\\"endpoint\\":\\"http://service.cn.maxcompute.aliyun-inc.com/api\\",\\"accessKey\\":\\"***\\",\\"name\\":\\"PRE_PROJECT_A_engine\\",\\"project\\":\\"PRE_PROJECT_A\\",\\"vpcEndpoint\\":\\"http://service.cn.maxcompute.aliyun-inc.com/api\\",\\"region\\":\\"cn-shanghai\\",\\"authType\\":\\"2\\"}</Content>\\n        <DataSourceType>rds</DataSourceType>\\n        <Id>1</Id>\\n    </DataSources>\\n</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '导出数据源列表',
      'summary' => '导出数据源列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ImportDataSources' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'APP' => 
          array (
          ),
        ),
        2 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。您可以登录[DataWorks控制台](https://workbench.data.aliyun.com/console)，进入工作空间配置页面获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'DataSources',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待导入数据源的数据源内容数组。其中Name，DataSourceType，SubType，Description，Content，EnvType参数为必填参数。参数的详情请参见[CreateDataSource](~~211429~~)接口。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '[{"SubType":"","DataSourceType":"mysql","EnvType":1,"Name":"mysql_dms2","Description":"aaa","Content":"{\\"database\\":\\"mysql_chengdu_old\\",\\"password\\":\\"***\\",\\"instanceName\\":\\"rm-2vcrckb37163g7l3w\\",\\"regionId\\":\\"cn-chengdu\\",\\"tag\\":\\"rds\\",\\"rdsOwnerId\\":\\"333\\",\\"username\\":\\"mysql_chengdu2\\"}"},{"SubType":"","DataSourceType":"mysql","EnvType":1,"Name":"mysql_dms2","Description":"aaa","Content":"{\\"database\\":\\"mysql_chengdu_old\\",\\"password\\":\\"***\\",\\"instanceName\\":\\"rm-2vcrckb37163g7l3w\\",\\"regionId\\":\\"cn-chengdu\\",\\"tag\\":\\"rds\\",\\"rdsOwnerId\\":\\"143\\",\\"username\\":\\"mysql_chengdu2\\"}"}]',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Data' => 
              array (
                'description' => '批量导入数据源的返回结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '批量导入数据源的结果状态。取值如下：
- true：表示全部数据源导入成功。
- false：表示部分数据源导入失败，您可以查看Message参数定位失败原因。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'Message' => 
                  array (
                    'description' => '批量导入数据源失败后的原因描述。如果批量导入数据源成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => ' Data source DEV XXX already exists',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Data\\": {\\n    \\"Status\\": true,\\n    \\"Message\\": \\" Data source DEV XXX already exists\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc1411515937635973****</RequestId>\\n<Data>\\n    <Status>true</Status>\\n    <Message> Data source DEV XXX already exists</Message>\\n</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '批量导入本地数据源',
      'summary' => '批量导入本地数据源至目标DataWorks工作空间。',
      'description' => '您可以选择将本地自建的数据源或从其他工作空间导出至本地的数据源，导入至目标DataWorks工作空间。
- 您本地自建的数据源类型必须是DataWorks所支持的数据源类型。DataWorks所支持的数据源类型，详情请参见[DataWorks支持的数据源](~~181656~~)。
- 从其他工作空间导出数据源至本地，详情请参见[ExportDataSources](~~279570~~)接口。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SetDataSourceShare' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
        1 => 
        array (
          'PrivateKey' => 
          array (
          ),
        ),
        2 => 
        array (
          'APP' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => true,
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所在的DataWorks工作空间ID。您可以调用[ListProjects](~~178393~~)接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '10000000000',
            'minimum' => '1',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'DatasourceName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待分享的目标数据源名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'mysql_name',
          ),
        ),
        2 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标数据源所属的环境。取值如下：
- 0：开发环境。
- 1：生产环境。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'ProjectPermissions',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定需要分享目标数据源的DataWorks工作空间。分享后，该工作空间的所有成员均可查看或使用目标数据源。使用JSONARRAY格式。[{"projectId":1000,"permission":"WRITE","sharedName":"PX_DATAHUB1.shared_name"}]，
参数说明如下：
- projectId：需要分享目标数据源的工作空间ID。
- permission：支持READ（读取）和WRITE（写入）两种模式权限。READ（读取）表示指定工作空间的所有成员仅可以读取目标数据源的数据，但是不能修改该数据；WRITE（写入）表示指定工作空间的所有成员可以修改目标数据源的数据。
- sharedName：待分享的数据源名称。',
            'type' => 'string',
            'required' => false,
            'example' => '[{"projectId":1000,"permission":"WRITE","sharedName":"PX_DATAHUB1.shared_name"}]',
          ),
        ),
        4 => 
        array (
          'name' => 'UserPermissions',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定需要分享目标数据源的用户。分享后，该用户可查看或使用目标数据源。使用JSONARRAY格式。[{"projectId":10000,"users":[{"userId":"276184575345452131","permission":"WRITE"}],"sharedName":"PX_DATAHUB1.shared_name"}]，
参数说明如下：
- projectId：指定DataWorks工作空间的ID。表示需要分享目标数据源的用户仅在该工作空间下可查看或使用目标数据源。
- userId：需要分享目标数据源的用户ID。
- permission：支持READ（读取）和WRITE（写入）两种模式权限。READ（读取）表示指定的用户仅可以读取目标数据源的数据，但是不能修改该数据；WRITE（写入）表示指定的用户可以修改目标数据源的数据。
- sharedName：待分享的数据源名称。

ProjectPermissions和UserPermissions如果都为空，则该接口不会做任何修改。如果都不为空，则既会UserPermissions生效，ProjectPermissions也会生效

',
            'type' => 'string',
            'required' => false,
            'example' => '[{"projectId":10000,"users":[{"userId":"276184575345452131","permission":"WRITE"}],"sharedName":"PX_DATAHUB1.shared_name"}]',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Success' => 
              array (
                'description' => '请求是否成功。取值如下：
- true：成功。
- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。用于出现错误后定位日志，排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG	',
              ),
              'Data' => 
              array (
                'description' => '分享目标数据源的返回数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '分享目标数据源的结果状态。取值如下：
- success：表示目标数据源分享成功。
- fail：表示目标数据源分享失败。您可以查看Message参数定位失败原因。',
                    'type' => 'string',
                    'example' => 'success',
                  ),
                  'Message' => 
                  array (
                    'description' => '分享目标数据源失败后的原因描述。如果分享目标数据源成功，则该参数的返回值为空。',
                    'type' => 'string',
                    'example' => 'datasource is wrong',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.DI.Parameter',
            'errorMessage' => 'The parameter is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.DI.NoPrivilege',
            'errorMessage' => 'No access.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.DI.Parameter',
            'errorMessage' => 'A DI internal error occurred.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Success\\": true,\\n  \\"RequestId\\": \\"0000-ABCD-EFG\\\\t\\",\\n  \\"Data\\": {\\n    \\"Status\\": \\"success\\",\\n    \\"Message\\": \\"datasource is wrong\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG\\t</RequestId>\\n<Data>\\n    <Status>success</Status>\\n    <Message>datasource is wrong</Message>\\n</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '分享目标数据源',
      'summary' => '分享目标数据源至指定DataWorks工作空间或指定用户。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateConnection' => 
    array (
      'summary' => '调用CreateConnection创建一个数据源。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源关联的工作空间ID。您可以通过[ListProjects](~~178393~~)接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'abc',
          ),
        ),
        2 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '连接串的描述。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        3 => 
        array (
          'name' => 'ConnectionType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '连接串的类型。常用类型枚举如下：
- odps
- mysql
- rds
- oss
- sqlserver
- polardb
- oracle
- mongodb
- emr
- postgresql
- analyticdb_for_mysql
- hybriddb_for_postgresql
- holo',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'rds',
          ),
        ),
        4 => 
        array (
          'name' => 'SubType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '连接串的子类型，针对某些父类型type下包含子类型的场景。目前有以下组合：
- 父类型：`rds`
- 子类型：`mysql`、`sqlserver`或`postgresql`。',
            'type' => 'string',
            'required' => false,
            'example' => 'mysql',
          ),
        ),
        5 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源所属的环境，包括0（开发环境）和1（生产环境）。

',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        6 => 
        array (
          'name' => 'Content',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的详细信息。部分常用数据源样例如下：
- odps

```
{
  "accessId": "xssssss",
  "accessKey": "xsaxsaxsa",
  "authType": 2,
  "endpoint": "http://service.odps.aliyun.com/api",
  "project": "xsaxsax",
  "tag": "public"
}
```

- mysql

```
{
  "database": "xsaxsa",
  "instanceName": "rm-xsaxsa",
  "password": "xsaxsa",
  "rdsOwnerId": "xasxsa",
  "regionId": "cn-shanghai",
  "tag": "rds",
  "username": "xsaxsa"
}
```

- rds

```
{
  "configType": 1,
  "tag": "rds",
  "database": "xsaxsa",
  "username": "xsaxsa",
  "password": "xssaxsa$32050",
  "instanceName": "rm-xsaxs",
  "rdsOwnerId": "11111111"
}
```

- oss

```
{
  "accessId": "sssssxx",
  "accessKey": "xsaxaxsaxs",
  "bucket": "xsa-xs-xs",
  "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
  "tag": "public"
}
```
- sqlserver

```
{
  "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cn:123;DatabaseName=xsxs-xsxs",
  "password": "sdasda$fs",
  "tag": "public",
  "username": "sxaxacdacdd"
}
```
- polardb

```
{
  "clusterId": "pc-sdadsadsa",
  "database": "dsadsadsa",
  "ownerId": "121212122",
  "password": "sdasdafssa",
  "region": "cn-shanghai",
  "tag": "polardb",
  "username": "asdadsads"
}
```
- oracle

```
{
  "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
  "password": "sxasaxsa",
  "tag": "public",
  "username": "sasfadfa"
}
```

- mongodb

```
{
  "address": "[\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\"]",
  "database": "admin",
  "password": "sadsda@",
  "tag": "public",
  "username": "dsadsadas"
}
```

- emr

```
{
  "accessId": "xsaxsa",
  "emrClusterId": "C-dsads",
  "emrResourceQueueName": "default",
  "emrEndpoint": "emr.aliyuncs.com",
  "accessKey": "dsadsad",
  "emrUserId": "224833315798889783",
  "name": "sasdsadsa",
  "emrAccessMode": "simple",
  "region": "cn-shanghai",
  "authType": "2",
  "emrProjectId": "FP-sdadsad"
}
```

- postgresql

```
{
  "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
  "password": "sdadsads",
  "tag": "public",
  "username": "sdsasda"
}
```

- analyticdb_for_mysql

```
{
  "instanceId": "am-sadsada",
  "database": "xsxsx",
  "username": "xsxsa",
  "password": "asdadsa",
  "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
}
```

- hybriddb_for_postgresql

```
{
  "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
  "database": "xsaxsaxas",
  "password": "xsaxsaxsa@11",
  "instanceId": "gp-xsaxsaxsa",
  "port": "541132",
  "ownerId": "xsaxsaxsas",
  "username": "sadsad"
}
```

- holo

```
{
  "accessId": "xsaxsaxs",
  "accessKey": "xsaxsaxsa",
  "database": "xsaxsaxsa",
  "instanceId": "xsaxa",
  "tag": "aliyun"
}
```

- kafka

```
{
  "instanceId": "xsax-cn-xsaxsa",
  "regionId": "cn-shanghai",
  "tag": "aliyun",
  "ownerId": "1212121212112"
}
```',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '数据源ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '123',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc141151593763****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
          3 => 
          array (
            'errorCode' => 'ConnectionAlreadyExist',
            'errorMessage' => 'The connection with envType %s and name %s already exists.',
          ),
          4 => 
          array (
            'errorCode' => 'DataSource.CheckRamRoleFailure',
            'errorMessage' => 'Failed to check the RAM role. AccountId %s. roleArn %s.',
          ),
          5 => 
          array (
            'errorCode' => 'DataSource.ConnectionStrProperty.PatternNotMatch',
            'errorMessage' => 'The pattern value %s is invalid. The correct pattern is %s.',
          ),
          6 => 
          array (
            'errorCode' => 'Invalid.DataSource.DataSourceTypeNotSupport',
            'errorMessage' => 'The dataSourceType %s and subType %s are not supported.',
          ),
          7 => 
          array (
            'errorCode' => 'Invalid.Param.Odps.EngineIdOrConnectStrEmpty',
            'errorMessage' => 'Either the compute engine ID or the connection string must be specified when data source type is ODPS.',
          ),
          8 => 
          array (
            'errorCode' => 'MissingParam.ConnectionStr.Property',
            'errorMessage' => 'You must specify property %s required by the data source connection string.',
          ),
          9 => 
          array (
            'errorCode' => 'Invalid.DataSource.DataSourceTypeNotExist',
            'errorMessage' => 'The data source type %s does not exist.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": \\"200\\",\\n  \\"Data\\": 123,\\n  \\"RequestId\\": \\"0bc141151593763****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc141151593763****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>123</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '创建一个数据源',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateDagComplement' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'StartBizDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '补数据的起始业务日期。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-05-20 00:00:00',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作流的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'xm_test',
          ),
        ),
        3 => 
        array (
          'name' => 'RootNodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '补数据的起始节点ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        4 => 
        array (
          'name' => 'IncludeNodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '包含的节点ID列表。如果只补一个节点的数据，该节点需要在includeNodeIds中。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '74324,74325',
          ),
        ),
        5 => 
        array (
          'name' => 'ExcludeNodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '可选参数，排除无需补数据的节点ID列表。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => ' 1234',
          ),
        ),
        6 => 
        array (
          'name' => 'BizBeginTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '可选参数，任务的开始时间。小时调度任务需要设置该参数。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '00:00:00',
          ),
        ),
        7 => 
        array (
          'name' => 'BizEndTime',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '可选参数，小时调度任务需要，任务的结束时间',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '23:00:00',
          ),
        ),
        8 => 
        array (
          'name' => 'Parallelism',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '是否可以并发执行。',
            'type' => 'boolean',
            'required' => true,
            'docRequired' => true,
            'example' => 'false',
          ),
        ),
        9 => 
        array (
          'name' => 'EndBizDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '补数据的结束业务日期。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-05-21 00:00:00',
          ),
        ),
        10 => 
        array (
          'name' => 'NodeParams',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '传入一个 json 字符串，Key为节点 ID，Value为参数实际值',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '{74324:"key1=val1 key2=val"}',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Data' => 
              array (
                'description' => '工作流ID的列表。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '工作流ID的列表。',
                  'type' => 'integer',
                  'format' => 'int64',
                  'example' => '111',
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Data\\": [\\n    111\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<RequestId>E6F0DBDD-5AD****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>111</Data>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '创建补数据工作流',
      'summary' => '调用CreateDagComplement创建补数据工作流。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateDagTest' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'Bizdate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-05-26 00:00:00',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作流的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'xm_create_test',
          ),
        ),
        3 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
        4 => 
        array (
          'name' => 'NodeParams',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的参数。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'bizdate=$bizdate tbods=$tbods',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '工作流的ID。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '3333333',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": 3333333,\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>E6F0DBDD-5AD****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>3333333</Data>\\n<ErrorCode>Invalid.Tenant.ConnectionNotExists</ErrorCode>\\n<ErrorMessage>The connection does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '创建冒烟测试工作流',
      'summary' => '调用CreateDagTest创建冒烟测试工作流。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateManualDag' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度运维中心的环境标识。PROD表示生产环境，DEV表示开发环境。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD或者DEV',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '手动业务流程所属的工作空间英文名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'test_workspace',
          ),
        ),
        2 => 
        array (
          'name' => 'FlowName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '手动业务流程的名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'test_workflow',
          ),
        ),
        3 => 
        array (
          'name' => 'BizDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期的值为小于等于当前日期-1天。例如，今天是2020年11月11日，则业务日期需要是2020年11月10日的00:00:00或者该日期之前的日期。业务日期的时分秒信息均填写00。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-11-11 00:00:00',
          ),
        ),
        4 => 
        array (
          'name' => 'NodeParameters',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '传递手动业务流程执行时的节点参数信息，一个JSON格式：
`
{
     "<手动业务流程内部的某个节点ID>": "节点的调度参数信息，和数据开发调度配置里面的参数格式保持一致", 
     "<手动业务流程内部的某个节点ID>": "节点的调度参数信息，和数据开发调度配置里面的参数格式保持一致"
}
`',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '{"20000123121": "key1=val2 key2=val2", "20000123124": "kkkk=vvvvv aaaa=bbbb"}',
          ),
        ),
        5 => 
        array (
          'name' => 'DagParameters',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务流程参数，该参数会同步至本次Dag的所有实例中。如果内部节点的调度参数引用了DagParameters中的业务流程参数，则节点的对应参数值会被替换为DagParameter中的业务流程参数。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '{"kaaaa": "vaaaaa", "kbbbb": "vbbbbb"}',
          ),
        ),
        6 => 
        array (
          'name' => 'IncludeNodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '需要运行的节点ID列表。',
            'type' => 'string',
            'required' => false,
            'example' => '74324,74325',
          ),
        ),
        7 => 
        array (
          'name' => 'ExcludeNodeIds',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '不需要运行的节点ID列表。',
            'type' => 'string',
            'required' => false,
            'example' => '123,456',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回实体。',
            'type' => 'object',
            'properties' => 
            array (
              'DagId' => 
              array (
                'description' => '手动业务流程运行Dag的实例ID。您可以通过接口和该DagId查询此次手动业务流程运行的内部节点实例的详细信息和状态。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '700000123123141',
              ),
              'RequestId' => 
              array (
                'description' => '请求唯一标识。',
                'type' => 'string',
                'example' => 'AASFDFSDFG-DFSDF-DFSDFD-SDFSDF',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"DagId\\": 700000123123141,\\n  \\"RequestId\\": \\"AASFDFSDFG-DFSDF-DFSDFD-SDFSDF\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateManualDagResponse>\\n    <DagId>700000123123141</DagId>\\n    <RequestId>AASFDFSDFG-DFSDF-DFSDFD-SDFSDF</RequestId>\\n</CreateManualDagResponse>","errorExample":""}]',
      'title' => '触发手动业务流程执行',
      'summary' => '手动业务流程必须已经在界面提交发布，运维中心能够找到对应的手动业务流程，才能使用该接口。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteConnection' => 
    array (
      'summary' => '调用DeleteConnection删除一个数据源。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ConnectionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源ID，您可以调用[listConnection](~~173911~~)获取数据源的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '是否成功删除。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1411515937635****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": \\"200\\",\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0bc1411515937635****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc1411515937635****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>true</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '删除一个数据源',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateConnection' => 
    array (
      'methods' => 
      array (
        0 => 'put',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '描述数据源。',
            'type' => 'string',
            'required' => false,
            'example' => 'abc',
          ),
        ),
        1 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源所属的环境，包括0（开发环境）和1（生产环境）。

',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'Content',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的详细信息。部分常用数据源样例如下：
- odps

```
{
  "accessId": "xssssss",
  "accessKey": "xsaxsaxsa",
  "authType": 2,
  "endpoint": "http://service.odps.aliyun.com/api",
  "project": "xsaxsax",
  "tag": "public"
}
```

- mysql

```
{
  "database": "xsaxsa",
  "instanceName": "rm-xsaxsa",
  "password": "xsaxsa",
  "rdsOwnerId": "xasxsa",
  "regionId": "cn-shanghai",
  "tag": "rds",
  "username": "xsaxsa"
}
```

- rds

```
{
  "configType": 1,
  "tag": "rds",
  "database": "xsaxsa",
  "username": "xsaxsa",
  "password": "xssaxsa$32050",
  "instanceName": "rm-xsaxs",
  "rdsOwnerId": "11111111"
}
```

- oss

```
{
  "accessId": "sssssxx",
  "accessKey": "xsaxaxsaxs",
  "bucket": "xsa-xs-xs",
  "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
  "tag": "public"
}
```
- sqlserver

```
{
  "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cn:123;DatabaseName=xsxs-xsxs",
  "password": "sdasda$fs",
  "tag": "public",
  "username": "sxaxacdacdd"
}
```
- polardb

```
{
  "clusterId": "pc-sdadsadsa",
  "database": "dsadsadsa",
  "ownerId": "121212122",
  "password": "sdasdafssa",
  "region": "cn-shanghai",
  "tag": "polardb",
  "username": "asdadsads"
}
```
- oracle

```
{
  "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
  "password": "sxasaxsa",
  "tag": "public",
  "username": "sasfadfa"
}
```

- mongodb

```
{
  "address": "[\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\"]",
  "database": "admin",
  "password": "sadsda@",
  "tag": "public",
  "username": "dsadsadas"
}
```

- emr

```
{
  "accessId": "xsaxsa",
  "emrClusterId": "C-dsads",
  "emrResourceQueueName": "default",
  "emrEndpoint": "emr.aliyuncs.com",
  "accessKey": "dsadsad",
  "emrUserId": "224833315798889783",
  "name": "sasdsadsa",
  "emrAccessMode": "simple",
  "region": "cn-shanghai",
  "authType": "2",
  "emrProjectId": "FP-sdadsad"
}
```

- postgresql

```
{
  "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
  "password": "sdadsads",
  "tag": "public",
  "username": "sdsasda"
}
```

- analyticdb_for_mysql

```
{
  "instanceId": "am-sadsada",
  "database": "xsxsx",
  "username": "xsxsa",
  "password": "asdadsa",
  "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
}
```

- hybriddb_for_postgresql

```
{
  "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
  "database": "xsaxsaxas",
  "password": "xsaxsaxsa@11",
  "instanceId": "gp-xsaxsaxsa",
  "port": "541132",
  "ownerId": "xsaxsaxsas",
  "username": "sadsad"
}
```

- holo

```
{
  "accessId": "xsaxsaxs",
  "accessKey": "xsaxsaxsa",
  "database": "xsaxsaxsa",
  "instanceId": "xsaxa",
  "tag": "aliyun"
}
```

- kafka

```
{
  "instanceId": "xsax-cn-xsaxsa",
  "regionId": "cn-shanghai",
  "tag": "aliyun",
  "ownerId": "1212121212112"
}
```',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => '{"database":"dbname","instanceName":"instancename","password":"password","rdsOwnerId":"123","username":"username"}',
          ),
        ),
        3 => 
        array (
          'name' => 'Status',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的状态，包括ENABLED（正常）和DISABLED（异常）。

',
            'type' => 'string',
            'required' => false,
            'example' => 'ENABLED',
          ),
        ),
        4 => 
        array (
          'name' => 'ConnectionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源ID。您可以通过[ListConnections](~~173911~~)接口获取项目空间下的数据源ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'string',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '请求是否成功更新。

',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc14115159376359****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
          3 => 
          array (
            'errorCode' => 'Invalid.DataSource.DataSourceStatus',
            'errorMessage' => 'The specified dataSourceStatus %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": \\"200\\",\\n  \\"Data\\": true,\\n  \\"RequestId\\": \\"0bc14115159376359****\\",\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc14115159376359****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>true</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '更新一个数据源',
      'summary' => '调用UpdateConnection更新一个数据源。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListConnections' => 
    array (
      'summary' => '调用ListConnections查询数据源列表。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源所在的工作空间ID。您可以通过[ListProjects](~~178393~~)接口获取工作空间ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '76086',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询的数据源名称。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'abc',
          ),
        ),
        2 => 
        array (
          'name' => 'ConnectionType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '连接串的类型。常用类型枚举如下：
- odps
- mysql
- rds
- oss
- sqlserver
- polardb
- oracle
- mongodb
- emr
- postgresql
- analyticdb_for_mysql
- hybriddb_for_postgresql
- holo',
            'type' => 'string',
            'required' => false,
            'example' => 'rds',
          ),
        ),
        3 => 
        array (
          'name' => 'SubType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '连接串的子类型，针对某些父类型type中包含子类型的场景。目前有以下组合：
- 父类型：`rds`
- 子类型：`mysql`、 `sqlserver`或 `postgresql`。',
            'type' => 'string',
            'required' => false,
            'example' => 'mysql',
          ),
        ),
        4 => 
        array (
          'name' => 'Status',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源的状态。
- ENABLED 正常
- DISABLED 禁用',
            'type' => 'string',
            'required' => false,
            'example' => 'ENABLED',
          ),
        ),
        5 => 
        array (
          'name' => 'EnvType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据源所属的环境，包括0（开发环境）和1（生产环境）。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        6 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数，默认为10条，最大100条。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        7 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询页码。取值为大于等于1的正整数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc14115159376359****',
              ),
              'Success' => 
              array (
                'description' => '请求是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '连接串的分页查询结果。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '页码。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '每页显示的条数，默认为10条，最大100条。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '20',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '数据源的总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '3',
                  ),
                  'Connections' => 
                  array (
                    'description' => '连接串列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '数据源的状态。
- 1 正常
- 2 禁用',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'ConnectionType' => 
                        array (
                          'description' => '数据源的类型。常用类型枚举如下：
- odps
- mysql
- rds
- oss
- sqlserver
- polardb
- oracle
- mongodb
- emr
- postgresql
- analyticdb_for_mysql
- hybriddb_for_postgresql
- holo',
                          'type' => 'string',
                          'example' => 'mysql',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => '数据源关联的工作空间ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '123',
                        ),
                        'SubType' => 
                        array (
                          'description' => '数据源的子类型。针对某些父类型type中包含子类型的场景。目前有以下组合：
- 父类型：`rds`
- 子类型：`mysql`、`sqlserver`或`postgresql`。',
                          'type' => 'string',
                          'example' => 'mysql',
                        ),
                        'GmtModified' => 
                        array (
                          'description' => '修改数据源的时间。时间格式示例为Mar 17, 2021 4:09:32 PM。',
                          'type' => 'string',
                          'example' => 'Mar 17, 2021 4:09:32 PM',
                        ),
                        'EnvType' => 
                        array (
                          'description' => '数据源所在的环境。
- 0  开发环境
- 1 生产环境',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'ConnectStatus' => 
                        array (
                          'description' => '数据源的状态。
- 1  正常
- 2 禁用',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'Sequence' => 
                        array (
                          'description' => '排序字段。数据源按此字段从大到小排序。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '300',
                        ),
                        'Description' => 
                        array (
                          'description' => '描述数据源。',
                          'type' => 'string',
                          'example' => 'a connection',
                        ),
                        'GmtCreate' => 
                        array (
                          'description' => '创建数据源的时间。时间格式示例为Mar 17, 2021 4:09:32 PM。',
                          'type' => 'string',
                          'example' => 'Mar 17, 2021 4:09:32 PM',
                        ),
                        'DefaultEngine' => 
                        array (
                          'description' => '数据源关联的引擎是否为同类型下的默认引擎。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Shared' => 
                        array (
                          'description' => '是否为共享的数据源。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Operator' => 
                        array (
                          'description' => '最近一次修改数据源的阿里云用户ID。

',
                          'type' => 'string',
                          'example' => '193543050****',
                        ),
                        'Name' => 
                        array (
                          'description' => '数据源的名称。',
                          'type' => 'string',
                          'example' => 'abc',
                        ),
                        'Content' => 
                        array (
                          'description' => '数据源的详细信息。部分常用数据源样例如下：
- odps

```
{
  "accessId": "xssssss",
  "accessKey": "xsaxsaxsa",
  "authType": 2,
  "endpoint": "http://service.odps.aliyun.com/api",
  "project": "xsaxsax",
  "tag": "public"
}
```

- mysql

```
{
  "database": "xsaxsa",
  "instanceName": "rm-xsaxsa",
  "password": "xsaxsa",
  "rdsOwnerId": "xasxsa",
  "regionId": "cn-shanghai",
  "tag": "rds",
  "username": "xsaxsa"
}
```

- rds

```
{
  "configType": 1,
  "tag": "rds",
  "database": "xsaxsa",
  "username": "xsaxsa",
  "password": "xssaxsa$32050",
  "instanceName": "rm-xsaxs",
  "rdsOwnerId": "11111111"
}
```

- oss

```
{
  "accessId": "sssssxx",
  "accessKey": "xsaxaxsaxs",
  "bucket": "xsa-xs-xs",
  "endpoint": "http://oss-cn-shanghai.aliyuncs.com",
  "tag": "public"
}
```
- sqlserver

```
{
  "jdbcUrl": "jdbc:sqlserver://xsaxsa-xsaxsa.database.xxx.cn:123;DatabaseName=xsxs-xsxs",
  "password": "sdasda$fs",
  "tag": "public",
  "username": "sxaxacdacdd"
}
```
- polardb

```
{
  "clusterId": "pc-sdadsadsa",
  "database": "dsadsadsa",
  "ownerId": "121212122",
  "password": "sdasdafssa",
  "region": "cn-shanghai",
  "tag": "polardb",
  "username": "asdadsads"
}
```
- oracle

```
{
  "jdbcUrl": "jdbc:oracle:saaa:@xxxxx:1521:PROD",
  "password": "sxasaxsa",
  "tag": "public",
  "username": "sasfadfa"
}
```

- mongodb

```
{
  "address": "[\\"xsaxxsa.mongodb.rds.aliyuncs.com:3717\\"]",
  "database": "admin",
  "password": "sadsda@",
  "tag": "public",
  "username": "dsadsadas"
}
```

- emr

```
{
  "accessId": "xsaxsa",
  "emrClusterId": "C-dsads",
  "emrResourceQueueName": "default",
  "emrEndpoint": "emr.aliyuncs.com",
  "accessKey": "dsadsad",
  "emrUserId": "224833315798889783",
  "name": "sasdsadsa",
  "emrAccessMode": "simple",
  "region": "cn-shanghai",
  "authType": "2",
  "emrProjectId": "FP-sdadsad"
}
```

- postgresql

```
{
  "jdbcUrl": "jdbc:postgresql://xxxx:1921/ssss",
  "password": "sdadsads",
  "tag": "public",
  "username": "sdsasda"
}
```

- analyticdb_for_mysql

```
{
  "instanceId": "am-sadsada",
  "database": "xsxsx",
  "username": "xsxsa",
  "password": "asdadsa",
  "connectionString": "am-xssxsxs.ads.aliyuncs.com:3306"
}
```

- hybriddb_for_postgresql

```
{
  "connectionString": "gp-xsaxsaxa-master.gpdbmaster.rds.aliyuncs.com",
  "database": "xsaxsaxas",
  "password": "xsaxsaxsa@11",
  "instanceId": "gp-xsaxsaxsa",
  "port": "541132",
  "ownerId": "xsaxsaxsas",
  "username": "sadsad"
}
```

- holo

```
{
  "accessId": "xsaxsaxs",
  "accessKey": "xsaxsaxsa",
  "database": "xsaxsaxsa",
  "instanceId": "xsaxa",
  "tag": "aliyun"
}
```

- kafka

```
{
  "instanceId": "xsax-cn-xsaxsa",
  "regionId": "cn-shanghai",
  "tag": "aliyun",
  "ownerId": "1212121212112"
}
```',
                          'type' => 'string',
                          'example' => '{\\"database\\":\\"xxx\\",\\"instanceName\\":\\"xxx\\",\\"password\\":\\"xxx\\",\\"rdsOwnerId\\":\\"xxx\\",\\"tag\\":\\"rds\\",\\"username\\":\\"xxx\\"}',
                        ),
                        'Id' => 
                        array (
                          'description' => '数据源ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'BindingCalcEngineId' => 
                        array (
                          'description' => '数据源关联的计算引擎ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '123',
                        ),
                        'TenantId' => 
                        array (
                          'description' => '租户ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1234567',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0bc14115159376359****\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 20,\\n    \\"TotalCount\\": 3,\\n    \\"Connections\\": [\\n      {\\n        \\"Status\\": 1,\\n        \\"ConnectionType\\": \\"mysql\\",\\n        \\"ProjectId\\": 123,\\n        \\"SubType\\": \\"mysql\\",\\n        \\"GmtModified\\": \\"Mar 17, 2021 4:09:32 PM\\",\\n        \\"EnvType\\": 1,\\n        \\"ConnectStatus\\": 1,\\n        \\"Sequence\\": 300,\\n        \\"Description\\": \\"a connection\\",\\n        \\"GmtCreate\\": \\"Mar 17, 2021 4:09:32 PM\\",\\n        \\"DefaultEngine\\": false,\\n        \\"Shared\\": false,\\n        \\"Operator\\": \\"193543050****\\",\\n        \\"Name\\": \\"abc\\",\\n        \\"Content\\": \\"{\\\\\\\\\\\\\\"database\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"xxx\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"instanceName\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"xxx\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"password\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"xxx\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"rdsOwnerId\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"xxx\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"tag\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"rds\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"xxx\\\\\\\\\\\\\\"}\\",\\n        \\"Id\\": 1,\\n        \\"BindingCalcEngineId\\": 123,\\n        \\"TenantId\\": 1234567\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0bc14115159****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <Connections>\\n        <Operator>193543050****</Operator>\\n        <Status>1</Status>\\n        <ConnectStatus>1</ConnectStatus>\\n        <Description>a connection</Description>\\n        <SubType>mysql</SubType>\\n        <BindingCalcEngineId>123</BindingCalcEngineId>\\n        <ConnectionType>mysql</ConnectionType>\\n        <GmtModified>Oct 10, 2019 3:42:53 PM</GmtModified>\\n        <ProjectId>123</ProjectId>\\n        <Sequence>300</Sequence>\\n        <Shared>false</Shared>\\n        <EnvType>1</EnvType>\\n        <DefaultEngine>false</DefaultEngine>\\n        <Name>abc</Name>\\n        <GmtCreate>Oct 10, 2019 3:42:53 PM</GmtCreate>\\n        <TenantId>1234567</TenantId>\\n        <Content>{\\\\\\"database\\\\\\":\\\\\\"xxx\\\\\\",\\\\\\"instanceName\\\\\\":\\\\\\"xxx\\\\\\",\\\\\\"password\\\\\\":\\\\\\"xxx\\\\\\",\\\\\\"rdsOwnerId\\\\\\":\\\\\\"xxx\\\\\\",\\\\\\"tag\\\\\\":\\\\\\"rds\\\\\\",\\\\\\"username\\\\\\":\\\\\\"xxx\\\\\\"}</Content>\\n        <Id>1</Id>\\n    </Connections>\\n    <TotalCount>3</TotalCount>\\n    <PageSize>20</PageSize>\\n    <PageNumber>1</PageNumber>\\n</Data>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '查询数据源列表',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetProjectDetail' => 
    array (
      'summary' => '查询一个DataWorks工作空间的信息。',
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '27',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0bc1411515937635973****',
              ),
              'Success' => 
              array (
                'description' => '是否成功查询工作空间的信息。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '工作空间的描述信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '工作空间的状态。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                  'ResidentArea' => 
                  array (
                    'description' => '工作空间的类型：private为私有区，swap为交换区。',
                    'type' => 'string',
                    'example' => 'private',
                  ),
                  'ProjectId' => 
                  array (
                    'description' => '工作空间的ID。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '27',
                  ),
                  'ProjectIdentifier' => 
                  array (
                    'description' => '工作空间的标识。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'ProjectName' => 
                  array (
                    'description' => '工作空间的显示名称。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'IsAllowDownload' => 
                  array (
                    'description' => '是否允许下载。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'ProjectMode' => 
                  array (
                    'description' => '工作空间模式：简单工作空间模式为2，标准工作空间模式为3。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'ProjectDescription' => 
                  array (
                    'description' => '工作空间的描述。',
                    'type' => 'string',
                    'example' => 'abc',
                  ),
                  'GmtModified' => 
                  array (
                    'description' => '修改工作空间的时间。',
                    'type' => 'string',
                    'example' => 'Dec 3, 2019 9:12:20 PM',
                  ),
                  'ProjectOwnerBaseId' => 
                  array (
                    'description' => '工作空间所有者的阿里云ID。',
                    'type' => 'string',
                    'example' => '18229311****',
                  ),
                  'DevelopmentType' => 
                  array (
                    'description' => '项目开发类型，目前均为4。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '4',
                  ),
                  'DefaultDiResourceGroupIdentifier' => 
                  array (
                    'description' => '默认节点的数据集成资源组标识。',
                    'type' => 'string',
                    'example' => 'group_280749521****',
                  ),
                  'GmtCreate' => 
                  array (
                    'description' => '创建工作空间的时间。',
                    'type' => 'string',
                    'example' => 'Oct 10, 2019 3:42:53 PM',
                  ),
                  'SchedulerMaxRetryTimes' => 
                  array (
                    'description' => '默认出错自动重跑的次数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '3',
                  ),
                  'ProtectedMode' => 
                  array (
                    'description' => '工作空间是否开启了保护模式。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'TenantId' => 
                  array (
                    'description' => '租户ID。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '280749521950784',
                  ),
                  'SchedulerRetryInterval' => 
                  array (
                    'description' => '默认出错自动重跑的时间间隔。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '120000',
                  ),
                  'EnvTypes' => 
                  array (
                    'description' => '工作空间包含的环境：简单模式只有生产环境（PROD），标准模式包含开发环境（DEV）和生产环境（PROD）。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '工作空间包含的环境：简单模式只有生产环境（PROD），标准模式包含开发环境（DEV）和生产环境（PROD）。',
                      'type' => 'string',
                      'example' => '["PROD"]',
                    ),
                  ),
                  'ResourceManagerResourceGroupId' => 
                  array (
                    'description' => '资源组ID。',
                    'type' => 'string',
                    'example' => 'rg-acfmzbn7pti3zfa',
                  ),
                  'Tags' => 
                  array (
                    'description' => '标签信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '标签信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Key' => 
                        array (
                          'description' => '标签键。',
                          'type' => 'string',
                          'example' => 'Env',
                        ),
                        'Value' => 
                        array (
                          'description' => '标签值。',
                          'type' => 'string',
                          'example' => 'Test',
                        ),
                      ),
                    ),
                  ),
                  'DisableDevelopment' => 
                  array (
                    'description' => '是否禁用开发角色，取值如下：
 - **false**：默认值，开启开发角色。
 -  **true**：禁用开发角色。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'UseProxyOdpsAccount' => 
                  array (
                    'description' => '访问MaxCompute引擎是否使用代理账号。',
                    'type' => 'boolean',
                    'example' => 'true',
                  ),
                  'TablePrivacyMode' => 
                  array (
                    'description' => 'MaxCompute表的可见性权限，取值如下：
- 0，租户内用户不可见MaxCompute表。
- 1，租户内用户可见MaxCompute表。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'IsDefault' => 
                  array (
                    'description' => '是否为默认工作空间，取值如下：
- 1，是。
- 0，否。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.ConnectionNotExists',
            'errorMessage' => 'The connection does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.ProjectNotExists',
            'errorMessage' => 'The project does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInProject',
            'errorMessage' => 'The user is not in the project.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserIsNotProjectOwnerOrAdmin',
            'errorMessage' => 'The user is not a project administrator or owner.',
          ),
          1 => 
          array (
            'errorCode' => 'Invalid.Tenant.UserNotInTenant',
            'errorMessage' => 'The user is not in tenant.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0bc1411515937635973****\\",\\n  \\"Success\\": true,\\n  \\"Data\\": {\\n    \\"Status\\": 0,\\n    \\"ResidentArea\\": \\"private\\",\\n    \\"ProjectId\\": 27,\\n    \\"ProjectIdentifier\\": \\"abc\\",\\n    \\"ProjectName\\": \\"abc\\",\\n    \\"IsAllowDownload\\": 1,\\n    \\"ProjectMode\\": 1,\\n    \\"ProjectDescription\\": \\"abc\\",\\n    \\"GmtModified\\": \\"Dec 3, 2019 9:12:20 PM\\",\\n    \\"ProjectOwnerBaseId\\": \\"18229311****\\",\\n    \\"DevelopmentType\\": 4,\\n    \\"DefaultDiResourceGroupIdentifier\\": \\"group_280749521****\\",\\n    \\"GmtCreate\\": \\"Oct 10, 2019 3:42:53 PM\\",\\n    \\"SchedulerMaxRetryTimes\\": 3,\\n    \\"ProtectedMode\\": 1,\\n    \\"TenantId\\": 280749521950784,\\n    \\"SchedulerRetryInterval\\": 120000,\\n    \\"EnvTypes\\": [\\n      \\"[\\\\\\"PROD\\\\\\"]\\"\\n    ],\\n    \\"ResourceManagerResourceGroupId\\": \\"rg-acfmzbn7pti3zfa\\",\\n    \\"Tags\\": [\\n      {\\n        \\"Key\\": \\"Env\\",\\n        \\"Value\\": \\"Test\\"\\n      }\\n    ],\\n    \\"DisableDevelopment\\": true,\\n    \\"UseProxyOdpsAccount\\": true,\\n    \\"TablePrivacyMode\\": 1,\\n    \\"IsDefault\\": 1\\n  }\\n}","errorExample":""},{"type":"xml","example":"<data>\\n    <appkey/>\\n    <baseProject>false</baseProject>\\n    <defaultDiResourceGroupIdentifier>group_280749521****</defaultDiResourceGroupIdentifier>\\n    <destination>28</destination>\\n    <devStorageQuota>64</devStorageQuota>\\n    <developmentType>4</developmentType>\\n    <disableDevelopment>false</disableDevelopment>\\n    <envTypes>PROD</envTypes>\\n    <gmtCreate>Oct 10, 2019 3:42:53 PM</gmtCreate>\\n    <gmtModified>Dec 3, 2019 9:12:20 PM</gmtModified>\\n    <isAllowDownload>1</isAllowDownload>\\n    <isDefault>0</isDefault>\\n    <maxFlowNode>30</maxFlowNode>\\n    <prodStorageQuota>64</prodStorageQuota>\\n    <projectId>27</projectId>\\n    <projectIdentifier>abc</projectIdentifier>\\n    <projectMode>2</projectMode>\\n    <projectName>abc</projectName>\\n    <projectOwnerBaseId>18229311****</projectOwnerBaseId>\\n    <protectedMode>1</protectedMode>\\n    <residentArea>private</residentArea>\\n    <schedulerMaxRetryTimes>3</schedulerMaxRetryTimes>\\n    <schedulerRetryInterval>120000</schedulerRetryInterval>\\n    <status>0</status>\\n    <tablePrivacyMode>0</tablePrivacyMode>\\n    <tenantId>280749521950784</tenantId>\\n    <useProxyOdpsAccount>false</useProxyOdpsAccount>\\n</data>\\n<httpStatusCode>200</httpStatusCode>\\n<requestId>0bc1ec9b15973****</requestId>\\n<success>true</success>","errorExample":""}]',
      'title' => '查询工作空间信息',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListNodeIO' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'NodeId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的ID。您可参见[ListNodes](~~173979~~)查看NodeId相关信息。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'minimum' => '2',
            'example' => '1234',
            'isFileTransferUrl' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运行的环境，包括DEV（开发环境）和PROD（生产环境）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'isFileTransferUrl' => false,
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        2 => 
        array (
          'name' => 'IoType',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '指定查询节点为上游节点还是下游节点。包括input和output。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'output',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID，用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The project does not exist.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ProjectNotExists',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '上下游信息。',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'TableName' => 
                    array (
                      'description' => '输入或输出表的表名。',
                      'type' => 'string',
                      'example' => 'dataworks_a.datastudio_tenant_waitres_alarm',
                    ),
                    'Data' => 
                    array (
                      'description' => '输入或输出名称。',
                      'type' => 'string',
                      'example' => 'dataworks_a.1234_out',
                    ),
                    'NodeId' => 
                    array (
                      'description' => '节点ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '123123',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ErrorMessage\\": \\"The project does not exist.\\",\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ProjectNotExists\\",\\n  \\"Success\\": true,\\n  \\"Data\\": [\\n    {\\n      \\"TableName\\": \\"dataworks_a.datastudio_tenant_waitres_alarm\\",\\n      \\"Data\\": \\"dataworks_a.1234_out\\",\\n      \\"NodeId\\": 123123\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<RequestId>E6F0DBDD-5AD****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <NodeId>123123</NodeId>\\n    <TableName>dataworks_a.datastudio_tenant_waitres_alarm</TableName>\\n    <Data>dataworks_a.1234_out</Data>\\n</Data>\\n<ErrorCode>Invalid.Tenant.ProjectNotExists</ErrorCode>\\n<ErrorMessage>The project does not exist.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '查询上下游节点信息',
      'summary' => '查询上下游节点的信息，只能查询一层。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetInstanceStatusCount' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '1234',
            'isFileTransferUrl' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运行的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'isFileTransferUrl' => false,
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        2 => 
        array (
          'name' => 'BizDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '实例的业务日期。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-01-01',
            'isFileTransferUrl' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID，用于定位日志，排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'StatusCount' => 
              array (
                'description' => '实例的状态统计。',
                'type' => 'object',
                'properties' => 
                array (
                  'FailureCount' => 
                  array (
                    'description' => '失败实例的数量。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'WaitTimeCount' => 
                  array (
                    'description' => '满足条件开始等待运行的实例数量。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'RunningCount' => 
                  array (
                    'description' => '运行中实例的数量。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'SuccessCount' => 
                  array (
                    'description' => '成功实例的数量。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '实例的总数。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'NotRunCount' => 
                  array (
                    'description' => '未运行实例的数量。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'WaitResCount' => 
                  array (
                    'description' => '等待资源实例的数量。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"StatusCount\\": {\\n    \\"FailureCount\\": 1,\\n    \\"WaitTimeCount\\": 1,\\n    \\"RunningCount\\": 1,\\n    \\"SuccessCount\\": 1,\\n    \\"TotalCount\\": 1,\\n    \\"NotRunCount\\": 1,\\n    \\"WaitResCount\\": 1\\n  }\\n}","errorExample":""},{"type":"xml","example":"<StatusCount>\\n    <TotalCount>1</TotalCount>\\n    <RunningCount>1</RunningCount>\\n    <FailureCount>1</FailureCount>\\n    <WaitResCount>1</WaitResCount>\\n    <NotRunCount>1</NotRunCount>\\n    <SuccessCount>1</SuccessCount>\\n    <WaitTimeCount>1</WaitTimeCount>\\n</StatusCount>\\n<RequestId>0000-ABCD-EFG****</RequestId>","errorExample":""}]',
      'title' => '获取实例不同状态的数量统计',
      'summary' => '调用GetInstanceStatusCount获取实例不同状态的数量统计。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListProgramTypeCount' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '9223372036854775807',
            'minimum' => '1',
            'example' => '1234',
            'isFileTransferUrl' => false,
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '工作空间的环境，包括PROD和DEV。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'isFileTransferUrl' => false,
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求的ID，用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'E6F0DBDD-5AD****',
              ),
              'ProgramTypeAndCounts' => 
              array (
                'description' => '节点的类型和数量。',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Count' => 
                    array (
                      'description' => '节点的数量。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '3',
                    ),
                    'ProgramType' => 
                    array (
                      'description' => '节点的类型。',
                      'type' => 'string',
                      'example' => 'ODPS_SQL',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"E6F0DBDD-5AD****\\",\\n  \\"ProgramTypeAndCounts\\": [\\n    {\\n      \\"Count\\": 3,\\n      \\"ProgramType\\": \\"ODPS_SQL\\"\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<RequestId>E6F0DBDD-5AD****</RequestId>\\n<ProgramTypeAndCounts>\\n    <ProgramType>ODPS_SQL</ProgramType>\\n    <Count>3</Count>\\n</ProgramTypeAndCounts>","errorExample":""}]',
      'title' => '获取节点任务类型的分布',
      'summary' => '调用ListProgramTypeCount获取节点任务类型的分布。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetManualDagInstances' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '运维中心的调度环境标识，包括PROD（生产环境）和DEV（开发环境）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'RPOD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectName',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '手动业务流程所属的工作空间名称。您可以进入DataWorks管控台，在工作空间配置页面获取。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'test_workspace',
          ),
        ),
        2 => 
        array (
          'name' => 'DagId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '触发手动业务流程运行的Dag实例ID。您可以调用[CreateManualDag](~~189728~~)接口获取。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '7000001231241',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回实体。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求的唯一标识。',
                'type' => 'string',
                'example' => 'SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF',
              ),
              'Instances' => 
              array (
                'description' => '手动业务流程的内部实例列表。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '返回实体。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Status' => 
                    array (
                      'description' => '实例任务的状态，取值如下：
- NOT_RUN（未运行）
- WAIT_TIME（等待定时时间dueTime或cycleTime到来）
- WAIT_RESOURCE（等待资源）
- RUNNING（运行中）
- CHECKING（下发给数据质量进行数据校检）
- CHECKING_CONDITION（正在进行分支条件校检）
- FAILURE（执行失败）
- SUCCESS（执行成功）',
                      'type' => 'string',
                      'example' => 'WAIT_TIME',
                    ),
                    'BeginRunningTime' => 
                    array (
                      'description' => '实例任务开始运行的时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'BizDate' => 
                    array (
                      'description' => '业务日期。通常为该任务运行时间的前一天。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'CycTime' => 
                    array (
                      'description' => '实例任务的定时时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'FinishTime' => 
                    array (
                      'description' => '实例任务运行的结束时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'CreateTime' => 
                    array (
                      'description' => '实例任务的创建时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'DagId' => 
                    array (
                      'description' => '手动业务流程实例的DagId。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '350850491',
                    ),
                    'InstanceId' => 
                    array (
                      'description' => '内部实例ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '11726873619',
                    ),
                    'BeginWaitResTime' => 
                    array (
                      'description' => '实例任务开始等待资源的时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'TaskType' => 
                    array (
                      'description' => '实例任务的调度类型，取值如下：
- NORMAL(0)：正常调度任务。该任务被日常调度。
- MANUAL(1)：手动任务。该任务不会被日常调度。
- PAUSE(2)：暂停任务。该任务被日常调度，但启动调度时直接被置为失败状态。
- SKIP(3)：空跑任务。该任务被日常调度，但启动调度时直接被置为成功状态。
- SKIP_UNCHOOSE(4)：临时工作流中未选择的任务，仅存在于临时工作流中，启动调度时直接被置为成功状态。
- SKIP_CYCLE(5)：未到运行周期的周或月任务。该任务被日常调度，但启动调度时直接被置为成功状态。
- CONDITION_UNCHOOSE(6)：上游实例中有分支（IF）节点，但是该下游节点未被分支节点选中，直接置为空跑任务。
- REALTIME_DEPRECATED(7)：实时生成的已经过期的周期实例，该类型的任务直接被置为成功状态。
',
                      'type' => 'string',
                      'example' => 'NORMAL(0)',
                    ),
                    'ParamValues' => 
                    array (
                      'description' => '实例的参数信息。',
                      'type' => 'string',
                      'example' => 'xxx',
                    ),
                    'DagType' => 
                    array (
                      'description' => '手动业务流程的类型。',
                      'type' => 'string',
                      'example' => '5',
                    ),
                    'NodeName' => 
                    array (
                      'description' => '节点名称。',
                      'type' => 'string',
                      'example' => 'test2',
                    ),
                    'BeginWaitTimeTime' => 
                    array (
                      'description' => '实例任务开始等待调度的时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'NodeId' => 
                    array (
                      'description' => '业务流程的内部节点ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '37851',
                    ),
                    'ModifyTime' => 
                    array (
                      'description' => '实例任务最新的修改时间。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1605178414676',
                    ),
                    'CreateUser' => 
                    array (
                      'description' => '操作人。',
                      'type' => 'string',
                      'example' => 'xxx',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF\\",\\n  \\"Instances\\": [\\n    {\\n      \\"Status\\": \\"WAIT_TIME\\",\\n      \\"BeginRunningTime\\": 1605178414676,\\n      \\"BizDate\\": 1605178414676,\\n      \\"CycTime\\": 1605178414676,\\n      \\"FinishTime\\": 1605178414676,\\n      \\"CreateTime\\": 1605178414676,\\n      \\"DagId\\": 350850491,\\n      \\"InstanceId\\": 11726873619,\\n      \\"BeginWaitResTime\\": 1605178414676,\\n      \\"TaskType\\": \\"NORMAL(0)\\",\\n      \\"ParamValues\\": \\"xxx\\",\\n      \\"DagType\\": \\"5\\",\\n      \\"NodeName\\": \\"test2\\",\\n      \\"BeginWaitTimeTime\\": 1605178414676,\\n      \\"NodeId\\": 37851,\\n      \\"ModifyTime\\": 1605178414676,\\n      \\"CreateUser\\": \\"xxx\\"\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<GetManualDagInstancesResponse>\\n    <RequestId>SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF</RequestId>\\n    <Instances>\\n        <Status>WAIT_TIME</Status>\\n        <BeginRunningTime>1605178414676</BeginRunningTime>\\n        <BizDate>1605178414676</BizDate>\\n        <CycTime>1605178414676</CycTime>\\n        <FinishTime>1605178414676</FinishTime>\\n        <CreateTime>1605178414676</CreateTime>\\n        <DagId>350850491</DagId>\\n        <InstanceId>11726873619</InstanceId>\\n        <BeginWaitResTime>1605178414676</BeginWaitResTime>\\n        <TaskType>NORMAL(0)</TaskType>\\n        <ParamValues>xxx</ParamValues>\\n        <DagType>5</DagType>\\n        <NodeName>test2</NodeName>\\n        <BeginWaitTimeTime>1605178414676</BeginWaitTimeTime>\\n        <NodeId>37851</NodeId>\\n        <ModifyTime>1605178414676</ModifyTime>\\n        <CreateUser>xxx</CreateUser>\\n    </Instances>\\n</GetManualDagInstancesResponse>","errorExample":""}]',
      'title' => '获取手动业务流程执行实例的信息',
      'summary' => '调用GetManualDagInstances，获取手动执行的业务流程实例的信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SearchNodesByOutput' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectEnv',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '调度运维中心环境标识：PROD表示生产环境，DEV表示开发环境。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PROD',
            'enum' => 
            array (
              0 => 'PROD',
              1 => 'DEV',
            ),
          ),
        ),
        1 => 
        array (
          'name' => 'Outputs',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点的输出串。支持多个值，多个值时请使用英文逗号（,）分隔。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'aaaaa.1231412_out,bbbb.12313123_out',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP状态码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'Data' => 
              array (
                'description' => '返回数据为一个Map，Key是用户输入的每个output，Value是output对应的节点信息。',
                'type' => 'object',
                'example' => '{ "test_0709_1.630003558_out": {  "nodeId": 21673,             "nodeName": "hour_sql",             "ownerId": 123123123124,             "cronExpress": "00 00 00-23/2 * * ?",             "repeatability": true,             "programType": "ODPS_SQL",             "projectId": 11111,             "schedulerType": "NORMAL",             "priority": 1,             "baselineId": 20001721,             "connection": "odps_first"         },         "test_0709_1.630003556_out": {             "nodeId": 21671,             "nodeName": "start",             "ownerId": 123141231231,             "cronExpress": "00 */10 00-23 * * ?",             "repeatability": true,             "programType": "VIRTUAL",             "projectId": 1111,             "schedulerType": "NORMAL",             "priority": 1,             "baselineId": 20001721         }     }',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。',
                'type' => 'string',
                'example' => 'The connection does not exist.',
              ),
              'RequestId' => 
              array (
                'description' => '请求的ID。用于定位日志，排查问题。',
                'type' => 'string',
                'example' => 'SDFSDFSDF-asdfDFSDF-SDFSDf-SDfSFD',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => 'Invalid.Tenant.ConnectionNotExists',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"Data\\": {\\n    \\"test_0709_1.630003558_out\\": {\\n      \\"nodeId\\": 21673,\\n      \\"nodeName\\": \\"hour_sql\\",\\n      \\"ownerId\\": 123123123124,\\n      \\"cronExpress\\": \\"00 00 00-23/2 * * ?\\",\\n      \\"repeatability\\": true,\\n      \\"programType\\": \\"ODPS_SQL\\",\\n      \\"projectId\\": 11111,\\n      \\"schedulerType\\": \\"NORMAL\\",\\n      \\"priority\\": 1,\\n      \\"baselineId\\": 20001721,\\n      \\"connection\\": \\"odps_first\\"\\n    },\\n    \\"test_0709_1.630003556_out\\": {\\n      \\"nodeId\\": 21671,\\n      \\"nodeName\\": \\"start\\",\\n      \\"ownerId\\": 123141231231,\\n      \\"cronExpress\\": \\"00 */10 00-23 * * ?\\",\\n      \\"repeatability\\": true,\\n      \\"programType\\": \\"VIRTUAL\\",\\n      \\"projectId\\": 1111,\\n      \\"schedulerType\\": \\"NORMAL\\",\\n      \\"priority\\": 1,\\n      \\"baselineId\\": 20001721\\n    }\\n  },\\n  \\"ErrorMessage\\": \\"The connection does not exist.\\",\\n  \\"RequestId\\": \\"SDFSDFSDF-asdfDFSDF-SDFSDf-SDfSFD\\",\\n  \\"Success\\": true,\\n  \\"ErrorCode\\": \\"Invalid.Tenant.ConnectionNotExists\\"\\n}","errorExample":""},{"type":"xml","example":"<success>true</success>\\n<httpStatusCode>200</httpStatusCode>\\n<data>\\n    <test_0709_1.630003558_out>\\n        <nodeId>21673</nodeId>\\n        <nodeName>hour_sql</nodeName>\\n        <ownerId>123123123124</ownerId>\\n        <cronExpress>00 00 00-23/2 * * ?</cronExpress>\\n        <repeatability>true</repeatability>\\n        <programType>ODPS_SQL</programType>\\n        <projectId>11111</projectId>\\n        <schedulerType>NORMAL</schedulerType>\\n        <priority>1</priority>\\n        <baselineId>20001721</baselineId>\\n        <connection>odps_first</connection>\\n    </test_0709_1.630003558_out>\\n    <test_0709_1.630003556_out>\\n        <nodeId>21671</nodeId>\\n        <nodeName>start</nodeName>\\n        <ownerId>123141231231</ownerId>\\n        <cronExpress>00 */10 00-23 * * ?</cronExpress>\\n        <repeatability>true</repeatability>\\n        <programType>VIRTUAL</programType>\\n        <projectId>1111</projectId>\\n        <schedulerType>NORMAL</schedulerType>\\n        <priority>1</priority>\\n        <baselineId>20001721</baselineId>\\n    </test_0709_1.630003556_out>\\n</data>","errorExample":""}]',
      'title' => '根据输出精确查询节点',
      'summary' => '调用SearchNodesByOutput，根据输出精确查询节点。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetNodeTypeListInfo' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'Dataworks工作空间的ID，您可以单击页面右上角的小扳手图标，进入工作空间管理页面进行查看。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'docRequired' => true,
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'ProjectIdentifier',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'Dataworks工作空间的唯一标识符，即数据开发页面顶部切换工作空间处的英文标识。该参数与ProjectId参数二者必须设置其一，以确定本次API调用操作的Dataworks工作空间。',
            'type' => 'string',
            'required' => false,
            'example' => 'dw_project',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNumber',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求的数据页数，用于翻页。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '100',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '请求的数据页大小，最大值为100。
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '100',
            'minimum' => '0',
            'example' => '50',
          ),
        ),
        4 => 
        array (
          'name' => 'Keyword',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '节点类型的名称，您可以在DataStudio目录树中看到某个节点类型的名称，支持中英文，与locale需要对齐。支持模糊搜索，不填的情况下返回所有节点类型。',
            'type' => 'string',
            'required' => false,
            'example' => 'ODPS SQ',
          ),
        ),
        5 => 
        array (
          'name' => 'Locale',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '语言筛选，支持zh-CN和en-US。',
            'type' => 'string',
            'required' => false,
            'example' => 'zh-CN',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。',
                'type' => 'string',
                'example' => '0000-ABCD-EFG****',
              ),
              'NodeTypeInfoList' => 
              array (
                'description' => '符合条件的节点类型信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'PageNumber' => 
                  array (
                    'description' => '当前数据页的页码。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '1',
                  ),
                  'PageSize' => 
                  array (
                    'description' => '当前数据页的大小。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '50',
                  ),
                  'TotalCount' => 
                  array (
                    'description' => '满足查询条件的数据总条数。
',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '127',
                  ),
                  'NodeTypeInfo' => 
                  array (
                    'description' => '单个节点类型的信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'NodeTypeName' => 
                        array (
                          'description' => '节点类型的名称。',
                          'type' => 'string',
                          'example' => 'ODPS SQL',
                        ),
                        'NodeType' => 
                        array (
                          'description' => '节点类型Type（数字）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0000-ABCD-EFG****\\",\\n  \\"NodeTypeInfoList\\": {\\n    \\"PageNumber\\": 1,\\n    \\"PageSize\\": 50,\\n    \\"TotalCount\\": 127,\\n    \\"NodeTypeInfo\\": [\\n      {\\n        \\"NodeTypeName\\": \\"ODPS SQL\\",\\n        \\"NodeType\\": 10\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-EFG****</RequestId>\\n<NodeTypeInfoList>\\n    <TotalCount>127</TotalCount>\\n    <PageSize>50</PageSize>\\n    <PageNumber>1</PageNumber>\\n    <NodeTypeInfo>\\n        <NodeTypeName>ODPS SQL</NodeTypeName>\\n        <NodeType>10</NodeType>\\n    </NodeTypeInfo>\\n</NodeTypeInfoList>","errorExample":""}]',
      'title' => '查询节点类型信息',
      'summary' => '查询节点类型信息，包括类型Code和类型名称。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetNodeOnBaseline' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BaselineId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '基线的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'example' => '1234',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'HttpStatusCode' => 
              array (
                'description' => 'HTTP返回码。
',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '200',
              ),
              'RequestId' => 
              array (
                'description' => '本次调用的唯一ID。出现错误后，您可以根据该ID排查问题。
',
                'type' => 'string',
                'example' => '0000-ABCD-E****',
              ),
              'ErrorMessage' => 
              array (
                'description' => '错误信息。
',
                'type' => 'string',
                'example' => 'The specified parameters are invalid.',
              ),
              'ErrorCode' => 
              array (
                'description' => '错误码。',
                'type' => 'string',
                'example' => '1031203110005',
              ),
              'Success' => 
              array (
                'description' => '调用是否成功。',
                'type' => 'string',
                'example' => 'true',
              ),
              'Data' => 
              array (
                'description' => '基线上的节点列表。',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Owner' => 
                    array (
                      'description' => '节点责任人的阿里云UID。',
                      'type' => 'string',
                      'example' => '9527952****',
                    ),
                    'NodeName' => 
                    array (
                      'description' => '节点的名称。',
                      'type' => 'string',
                      'example' => '节点名称',
                    ),
                    'NodeId' => 
                    array (
                      'description' => '节点的ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1234',
                    ),
                    'ProjectId' => 
                    array (
                      'description' => '节点所在工作空间的ID。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1234',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.BaselineNoPermission',
            'errorMessage' => 'You are not authorized to access the baseline.',
          ),
          2 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.ProjectNoPermission',
            'errorMessage' => 'You are not authorized to access the workspace.',
          ),
          3 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          5 => 
          array (
            'errorCode' => 'InternalError.Wkbench.ServiceError',
            'errorMessage' => 'An internal error occurred.',
          ),
          6 => 
          array (
            'errorCode' => 'Invalid.Wkbench.Parameter',
            'errorMessage' => 'The specified parameters are invalid.',
          ),
          7 => 
          array (
            'errorCode' => 'Invalid.Wkbench.BaselineNotExist',
            'errorMessage' => 'The baseline does not exist.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"HttpStatusCode\\": 200,\\n  \\"RequestId\\": \\"0000-ABCD-E****\\",\\n  \\"ErrorMessage\\": \\"The specified parameters are invalid.\\",\\n  \\"ErrorCode\\": \\"1031203110005\\",\\n  \\"Success\\": \\"true\\",\\n  \\"Data\\": [\\n    {\\n      \\"Owner\\": \\"9527952****\\",\\n      \\"NodeName\\": \\"节点名称\\",\\n      \\"NodeId\\": 1234,\\n      \\"ProjectId\\": 1234\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<RequestId>0000-ABCD-E****</RequestId>\\n<HttpStatusCode>200</HttpStatusCode>\\n<Data>\\n    <Owner>9527952****</Owner>\\n    <NodeName>节点名称</NodeName>\\n    <NodeId>1234</NodeId>\\n    <ProjectId>1234</ProjectId>\\n</Data>\\n<ErrorCode>1031203110005</ErrorCode>\\n<ErrorMessage>The specified parameters are invalid.</ErrorMessage>\\n<Success>true</Success>","errorExample":""}]',
      'title' => '获取基线上的节点',
      'summary' => '调用GetNodeOnBaseline获取基线上的节点。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetSuccessInstanceTrend' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '99999999999',
            'minimum' => '2',
            'example' => '9527',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '每次请求生成的唯一标识。',
                'type' => 'string',
                'example' => '952795279527ab****',
              ),
              'InstanceStatusTrend' => 
              array (
                'description' => '分时段实例状态的统计趋势。',
                'type' => 'object',
                'properties' => 
                array (
                  'TodayTrend' => 
                  array (
                    'description' => '今日趋势。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TimePoint' => 
                        array (
                          'description' => '时间点，分别为00:00～23:00。

',
                          'type' => 'string',
                          'example' => '01:00',
                        ),
                        'Count' => 
                        array (
                          'description' => '实例的数量。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                  'YesterdayTrend' => 
                  array (
                    'description' => '昨日的趋势。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TimePoint' => 
                        array (
                          'description' => '时间点，分别为00:00～23:00。
',
                          'type' => 'string',
                          'example' => '01:00',
                        ),
                        'Count' => 
                        array (
                          'description' => '实例的数量。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                  'AvgTrend' => 
                  array (
                    'description' => '历史平均趋势。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'TimePoint' => 
                        array (
                          'description' => '时间点，分别为00:00～23:00。',
                          'type' => 'string',
                          'example' => '01:00',
                        ),
                        'Count' => 
                        array (
                          'description' => '实例的数量。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ResourceNotAuthorized.Api',
            'errorMessage' => 'You are not authorized to access the resources.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.ProjectNoPermission',
            'errorMessage' => 'You are not authorized to access the workspace.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"952795279527ab****\\",\\n  \\"InstanceStatusTrend\\": {\\n    \\"TodayTrend\\": [\\n      {\\n        \\"TimePoint\\": \\"01:00\\",\\n        \\"Count\\": 10\\n      }\\n    ],\\n    \\"YesterdayTrend\\": [\\n      {\\n        \\"TimePoint\\": \\"01:00\\",\\n        \\"Count\\": 10\\n      }\\n    ],\\n    \\"AvgTrend\\": [\\n      {\\n        \\"TimePoint\\": \\"01:00\\",\\n        \\"Count\\": 10\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>952795279527ab****</RequestId>\\n<InstanceStatusTrend>\\n    <YesterdayTrend>\\n        <TimePoint>01:00</TimePoint>\\n        <Count>10</Count>\\n    </YesterdayTrend>\\n    <YesterdayTrend>\\n        <TimePoint>01:00</TimePoint>\\n        <Count>10</Count>\\n    </YesterdayTrend>\\n    <YesterdayTrend>\\n        <TimePoint>01:00</TimePoint>\\n        <Count>10</Count>\\n    </YesterdayTrend>\\n    <AvgTrend>\\n        <TimePoint>01:00</TimePoint>\\n        <Count>10</Count>\\n    </AvgTrend>\\n    <AvgTrend>\\n        <TimePoint>01:00</TimePoint>\\n        <Count>10</Count>\\n    </AvgTrend>\\n    <AvgTrend>\\n        <TimePoint>01:00</TimePoint>\\n        <Count>10</Count>\\n    </AvgTrend>\\n    <TodayTrend>\\n        <TimePoint>01:00</TimePoint>\\n        <Count>10</Count>\\n    </TodayTrend>\\n    <TodayTrend>\\n        <TimePoint>01:00</TimePoint>\\n        <Count>10</Count>\\n    </TodayTrend>\\n    <TodayTrend>\\n        <TimePoint>01:00</TimePoint>\\n        <Count>10</Count>\\n    </TodayTrend>\\n</InstanceStatusTrend>","errorExample":""}]',
      'title' => '获取当天任务分时段的统计趋势',
      'summary' => '调用GetSuccessInstanceTrend获取当天任务分时段的统计趋势。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetInstanceCountTrend' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '99999999999',
            'minimum' => '2',
            'example' => '10000',
          ),
        ),
        1 => 
        array (
          'name' => 'BeginDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '起始业务日期，精确到天。您需要使用yyyy-MM-dd\'T\'HH:mm:ssZ的UTC格式。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-04-02T00:00:00+0800',
          ),
        ),
        2 => 
        array (
          'name' => 'EndDate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '截止业务日期，精确到天。您需要使用yyyy-MM-dd\'T\'HH:mm:ssZ的UTC格式。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-09-10T00:00:00+0800',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '每次请求生成的唯一标识。',
                'type' => 'string',
                'example' => '95279527adhfj****',
              ),
              'InstanceCounts' => 
              array (
                'description' => '实例数量趋势数据。',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Date' => 
                    array (
                      'description' => '业务日期对应的时间戳。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1600963200000',
                    ),
                    'Count' => 
                    array (
                      'description' => '实例的数量。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '9527',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ResourceNotAuthorized.Api',
            'errorMessage' => 'You are not authorized to access the resources.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.NoProject',
            'errorMessage' => 'You have not joined any project.',
          ),
          4 => 
          array (
            'errorCode' => 'Invalid.Wkbench.Parameter',
            'errorMessage' => 'The specified parameters are invalid.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"95279527adhfj****\\",\\n  \\"InstanceCounts\\": [\\n    {\\n      \\"Date\\": 1600963200000,\\n      \\"Count\\": 9527\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<RequestId>95279527adhfj****</RequestId>\\n<InstanceCounts>\\n    <Count>9527</Count>\\n    <Date>1600963200000</Date>\\n</InstanceCounts>","errorExample":""}]',
      'title' => '获取周期实例数量的趋势',
      'summary' => '调用GetInstanceCountTrend获取周期实例数量的趋势。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetInstanceConsumeTimeRank' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '99999999999',
            'minimum' => '2',
            'example' => '100000',
          ),
        ),
        1 => 
        array (
          'name' => 'Bizdate',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => '业务日期，精确到天。您需要使用yyyy-MM-dd\'T\'HH:mm:ssZ的UTC格式。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2020-09-21T00:00:00+0800',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '每次请求生成的唯一标识。',
                'type' => 'string',
                'example' => '6347364dadsfadf****',
              ),
              'InstanceConsumeTimeRank' => 
              array (
                'description' => '实例运行时长的排行记录。',
                'type' => 'object',
                'properties' => 
                array (
                  'UpdateTime' => 
                  array (
                    'description' => '排行更新时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1600963200000',
                  ),
                  'ConsumeTimeRank' => 
                  array (
                    'description' => '实例运行时长的排行数据。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Owner' => 
                        array (
                          'description' => '节点责任人的阿里云UID。',
                          'type' => 'string',
                          'example' => '952795279527',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点的名称。',
                          'type' => 'string',
                          'example' => '节点名称',
                        ),
                        'Bizdate' => 
                        array (
                          'description' => '实例运行的业务日期。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1600963200000',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '实例ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '95279527',
                        ),
                        'PrgType' => 
                        array (
                          'description' => '任务的类型。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '任务节点的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '9527',
                        ),
                        'Consumed' => 
                        array (
                          'description' => '实例运行时长，单位为s。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1000',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ResourceNotAuthorized.Api',
            'errorMessage' => 'You are not authorized to access the resources.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.ProjectNoPermission',
            'errorMessage' => 'You are not authorized to access the workspace.',
          ),
          4 => 
          array (
            'errorCode' => 'Invalid.Wkbench.Parameter',
            'errorMessage' => 'The specified parameters are invalid.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"6347364dadsfadf****\\",\\n  \\"InstanceConsumeTimeRank\\": {\\n    \\"UpdateTime\\": 1600963200000,\\n    \\"ConsumeTimeRank\\": [\\n      {\\n        \\"Owner\\": \\"952795279527\\",\\n        \\"NodeName\\": \\"节点名称\\",\\n        \\"Bizdate\\": 1600963200000,\\n        \\"InstanceId\\": 95279527,\\n        \\"PrgType\\": 10,\\n        \\"NodeId\\": 9527,\\n        \\"Consumed\\": 1000\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>6347364dadsfadf****</RequestId>\\n<InstanceConsumeTimeRank>\\n    <ConsumeTimeRank>\\n        <PrgType>10</PrgType>\\n        <Owner>952795279527</Owner>\\n        <NodeName>节点名称</NodeName>\\n        <InstanceId>95279527</InstanceId>\\n        <NodeId>9527</NodeId>\\n        <Consumed>1000</Consumed>\\n        <Bizdate>1600963200000</Bizdate>\\n    </ConsumeTimeRank>\\n    <UpdateTime>1600963200000</UpdateTime>\\n</InstanceConsumeTimeRank>","errorExample":""}]',
      'title' => '获取实例运行时长排行',
      'summary' => '调用GetInstanceConsumeTimeRank获取实例运行时长排行。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetInstanceErrorRank' => 
    array (
      'methods' => 
      array (
        0 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => true,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ProjectId',
          'in' => 'formData',
          'schema' => 
          array (
            'description' => 'DataWorks工作空间的ID。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => true,
            'docRequired' => true,
            'maximum' => '99999999999',
            'minimum' => '2',
            'example' => '9527',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '每次请求生成的唯一标识。',
                'type' => 'string',
                'example' => '952795279527****',
              ),
              'InstanceErrorRank' => 
              array (
                'description' => '节点出错的排行数据。',
                'type' => 'object',
                'properties' => 
                array (
                  'UpdateTime' => 
                  array (
                    'description' => '出错排行更新的时间戳。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '1600963200000',
                  ),
                  'ErrorRank' => 
                  array (
                    'description' => '节点近一个月出错排行数据。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Owner' => 
                        array (
                          'description' => '节点责任人的阿里云UID。',
                          'type' => 'string',
                          'example' => '952795279527',
                        ),
                        'NodeName' => 
                        array (
                          'description' => '节点的名称。',
                          'type' => 'string',
                          'example' => '节点名称',
                        ),
                        'ProjectId' => 
                        array (
                          'description' => 'DataWorks工作空间的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '9527',
                        ),
                        'NodeId' => 
                        array (
                          'description' => '节点的ID。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '9527',
                        ),
                        'Count' => 
                        array (
                          'description' => '节点出错的次数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '5',
                        ),
                        'PrgType' => 
                        array (
                          'description' => '节点任务的类型。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ResourceNotAuthorized.Api',
            'errorMessage' => 'You are not authorized to access the resources.',
          ),
          1 => 
          array (
            'errorCode' => 'Forbidden.Access',
            'errorMessage' => 'Access is forbidden. Please first activate DataWorks Enterprise Edition or Flagship Edition.',
          ),
        ),
        429 => 
        array (
          0 => 
          array (
            'errorCode' => 'Throttling.Api',
            'errorMessage' => 'The request for this resource has exceeded your available limit.',
          ),
          1 => 
          array (
            'errorCode' => 'Throttling.Api.Risk',
            'errorMessage' => 'The request for this resource has exceeded your daily available limit.',
          ),
          2 => 
          array (
            'errorCode' => 'Throttling.Resource',
            'errorMessage' => 'You have reached the limit for the resource. Please contact us by submitting a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'Throttling.System',
            'errorMessage' => 'The DataWorks system is busy. Try again later.',
          ),
          4 => 
          array (
            'errorCode' => 'Throttling.User',
            'errorMessage' => 'Your request is too frequent. Try again later.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'Forbidden.Not.Server',
            'errorMessage' => 'The dataworksAPI service is not available in this area. Please try it in another area.',
          ),
          1 => 
          array (
            'errorCode' => 'InternalError.System',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          2 => 
          array (
            'errorCode' => 'InternalError.UserId.Missing',
            'errorMessage' => 'An internal system error occurred. Try again later.',
          ),
          3 => 
          array (
            'errorCode' => 'Forbidden.Wkbench.ProjectNoPermission',
            'errorMessage' => 'You are not authorized to access the workspace.',
          ),
          4 => 
          array (
            'errorCode' => 'Invalid.Wkbench.Parameter',
            'errorMessage' => 'The specified parameters are invalid.',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"952795279527****\\",\\n  \\"InstanceErrorRank\\": {\\n    \\"UpdateTime\\": 1600963200000,\\n    \\"ErrorRank\\": [\\n      {\\n        \\"Owner\\": \\"952795279527\\",\\n        \\"NodeName\\": \\"节点名称\\",\\n        \\"ProjectId\\": 9527,\\n        \\"NodeId\\": 9527,\\n        \\"Count\\": 5,\\n        \\"PrgType\\": 10\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<RequestId>952795279527****</RequestId>\\n<InstanceErrorRank>\\n    <ErrorRank>\\n        <PrgType>10</PrgType>\\n        <Owner>952795279527</Owner>\\n        <NodeName>节点名称</NodeName>\\n        <NodeId>9527</NodeId>\\n        <ProjectId>9527</ProjectId>\\n        <Count>5</Count>\\n    </ErrorRank>\\n    <UpdateTime>1600963200000</UpdateTime>\\n</InstanceErrorRank>","errorExample":""}]',
      'title' => '获取近一个月节点的出错排行',
      'summary' => '调用GetInstanceErrorRank获取近一个月节点的出错排行。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
  ),
  'endpoints' => 
  array (
    0 => 
    array (
      'regionId' => 'ap-northeast-1',
      'endpoint' => 'dataworks.ap-northeast-1.aliyuncs.com',
    ),
    1 => 
    array (
      'regionId' => 'ap-south-1',
      'endpoint' => 'dataworks.ap-south-1.aliyuncs.com',
    ),
    2 => 
    array (
      'regionId' => 'ap-southeast-1',
      'endpoint' => 'dataworks.ap-southeast-1.aliyuncs.com',
    ),
    3 => 
    array (
      'regionId' => 'ap-southeast-2',
      'endpoint' => 'dataworks.ap-southeast-2.aliyuncs.com',
    ),
    4 => 
    array (
      'regionId' => 'ap-southeast-3',
      'endpoint' => 'dataworks.ap-southeast-3.aliyuncs.com',
    ),
    5 => 
    array (
      'regionId' => 'ap-southeast-5',
      'endpoint' => 'dataworks.ap-southeast-5.aliyuncs.com',
    ),
    6 => 
    array (
      'regionId' => 'cn-beijing',
      'endpoint' => 'dataworks.cn-beijing.aliyuncs.com',
    ),
    7 => 
    array (
      'regionId' => 'cn-chengdu',
      'endpoint' => 'dataworks.cn-chengdu.aliyuncs.com',
    ),
    8 => 
    array (
      'regionId' => 'cn-hangzhou',
      'endpoint' => 'dataworks.cn-hangzhou.aliyuncs.com',
    ),
    9 => 
    array (
      'regionId' => 'cn-hongkong',
      'endpoint' => 'dataworks.cn-hongkong.aliyuncs.com',
    ),
    10 => 
    array (
      'regionId' => 'cn-huhehaote',
      'endpoint' => 'dataworks.aliyuncs.com',
    ),
    11 => 
    array (
      'regionId' => 'cn-qingdao',
      'endpoint' => 'dataworks.aliyuncs.com',
    ),
    12 => 
    array (
      'regionId' => 'cn-shanghai',
      'endpoint' => 'dataworks.cn-shanghai.aliyuncs.com',
    ),
    13 => 
    array (
      'regionId' => 'cn-shenzhen',
      'endpoint' => 'dataworks.cn-shenzhen.aliyuncs.com',
    ),
    14 => 
    array (
      'regionId' => 'cn-zhangjiakou',
      'endpoint' => 'dataworks.cn-zhangjiakou.aliyuncs.com',
    ),
    15 => 
    array (
      'regionId' => 'eu-central-1',
      'endpoint' => 'dataworks.eu-central-1.aliyuncs.com',
    ),
    16 => 
    array (
      'regionId' => 'eu-west-1',
      'endpoint' => 'dataworks.eu-west-1.aliyuncs.com',
    ),
    17 => 
    array (
      'regionId' => 'me-east-1',
      'endpoint' => 'dataworks.me-east-1.aliyuncs.com',
    ),
    18 => 
    array (
      'regionId' => 'us-east-1',
      'endpoint' => 'dataworks.us-east-1.aliyuncs.com',
    ),
    19 => 
    array (
      'regionId' => 'us-west-1',
      'endpoint' => 'dataworks.us-west-1.aliyuncs.com',
    ),
    20 => 
    array (
      'regionId' => 'cn-hangzhou-finance',
      'endpoint' => 'dataworks.aliyuncs.com',
    ),
    21 => 
    array (
      'regionId' => 'cn-shenzhen-finance-1',
      'endpoint' => 'dataworks.aliyuncs.com',
    ),
    22 => 
    array (
      'regionId' => 'cn-shanghai-finance-1',
      'endpoint' => 'dataworks.cn-shanghai-finance-1.aliyuncs.com',
    ),
    23 => 
    array (
      'regionId' => 'cn-north-2-gov-1',
      'endpoint' => 'dataworks.aliyuncs.com',
    ),
  ),
);