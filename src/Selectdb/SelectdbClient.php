<?php

declare(strict_types=1);

namespace Dew\Acs\Selectdb;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createServiceLinkedRoleForSelectDB(array $arguments = [])
 * @method \Http\Promise\Promise createServiceLinkedRoleForSelectDBAsync($arguments = [])
 * @method \Dew\Acs\Result checkServiceLinkedRole(array $arguments = [])
 * @method \Http\Promise\Promise checkServiceLinkedRoleAsync($arguments = [])
 * @method \Dew\Acs\Result checkCreateDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise checkCreateDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise createDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result resetAccountPassword(array $arguments = [])
 * @method \Http\Promise\Promise resetAccountPasswordAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBInstanceNetInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeDBInstanceNetInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeSecurityIPList(array $arguments = [])
 * @method \Http\Promise\Promise describeSecurityIPListAsync($arguments = [])
 * @method \Dew\Acs\Result modifySecurityIPList(array $arguments = [])
 * @method \Http\Promise\Promise modifySecurityIPListAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBInstanceAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBInstanceAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeDBInstanceEngineVersion(array $arguments = [])
 * @method \Http\Promise\Promise upgradeDBInstanceEngineVersionAsync($arguments = [])
 * @method \Dew\Acs\Result allocateInstancePublicConnection(array $arguments = [])
 * @method \Http\Promise\Promise allocateInstancePublicConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result releaseInstancePublicConnection(array $arguments = [])
 * @method \Http\Promise\Promise releaseInstancePublicConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDBInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createDBClusterBinding(array $arguments = [])
 * @method \Http\Promise\Promise createDBClusterBindingAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDBClusterBinding(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBClusterBindingAsync($arguments = [])
 * @method \Dew\Acs\Result createDBCluster(array $arguments = [])
 * @method \Http\Promise\Promise createDBClusterAsync($arguments = [])
 * @method \Dew\Acs\Result getCreateBEClusterInquiry(array $arguments = [])
 * @method \Http\Promise\Promise getCreateBEClusterInquiryAsync($arguments = [])
 * @method \Dew\Acs\Result getModifyBEClusterInquiry(array $arguments = [])
 * @method \Http\Promise\Promise getModifyBEClusterInquiryAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBCluster(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBClusterAsync($arguments = [])
 * @method \Dew\Acs\Result modifyBEClusterAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyBEClusterAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result stopBECluster(array $arguments = [])
 * @method \Http\Promise\Promise stopBEClusterAsync($arguments = [])
 * @method \Dew\Acs\Result startBECluster(array $arguments = [])
 * @method \Http\Promise\Promise startBEClusterAsync($arguments = [])
 * @method \Dew\Acs\Result restartDBCluster(array $arguments = [])
 * @method \Http\Promise\Promise restartDBClusterAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDBCluster(array $arguments = [])
 * @method \Http\Promise\Promise deleteDBClusterAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBClusterConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeDBClusterConfigAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDBClusterConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyDBClusterConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBClusterConfigChangeLogs(array $arguments = [])
 * @method \Http\Promise\Promise describeDBClusterConfigChangeLogsAsync($arguments = [])
 * @method \Dew\Acs\Result describeAllDBInstanceClass(array $arguments = [])
 * @method \Http\Promise\Promise describeAllDBInstanceClassAsync($arguments = [])
 * @method \Dew\Acs\Result modifyElasticRule(array $arguments = [])
 * @method \Http\Promise\Promise modifyElasticRuleAsync($arguments = [])
 * @method \Dew\Acs\Result describeElasticRules(array $arguments = [])
 * @method \Http\Promise\Promise describeElasticRulesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteElasticRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteElasticRuleAsync($arguments = [])
 * @method \Dew\Acs\Result enDisableScalingRules(array $arguments = [])
 * @method \Http\Promise\Promise enDisableScalingRulesAsync($arguments = [])
 * @method \Dew\Acs\Result createElasticRule(array $arguments = [])
 * @method \Http\Promise\Promise createElasticRuleAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDBClusterStorageLimitation(array $arguments = [])
 * @method \Http\Promise\Promise describeDBClusterStorageLimitationAsync($arguments = [])
 */
final class SelectdbClient extends AcsClient
{
    //
}
