<?php

declare(strict_types=1);

namespace Dew\Acs\Dms;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createAirflowLoginToken(array $arguments = [])
 * @method \Http\Promise\Promise createAirflowLoginTokenAsync($arguments = [])
 * @method \Dew\Acs\Result createAirflow(array $arguments = [])
 * @method \Http\Promise\Promise createAirflowAsync($arguments = [])
 * @method \Dew\Acs\Result updateAirflow(array $arguments = [])
 * @method \Http\Promise\Promise updateAirflowAsync($arguments = [])
 * @method \Dew\Acs\Result getAirflow(array $arguments = [])
 * @method \Http\Promise\Promise getAirflowAsync($arguments = [])
 * @method \Dew\Acs\Result listAirflows(array $arguments = [])
 * @method \Http\Promise\Promise listAirflowsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAirflow(array $arguments = [])
 * @method \Http\Promise\Promise deleteAirflowAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeDatabase(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result getDataLakeDatabase(array $arguments = [])
 * @method \Http\Promise\Promise getDataLakeDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeCatalog(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeCatalogAsync($arguments = [])
 * @method \Dew\Acs\Result getDataLakeCatalog(array $arguments = [])
 * @method \Http\Promise\Promise getDataLakeCatalogAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeTablebaseInfo(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeTablebaseInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getDataLakeTable(array $arguments = [])
 * @method \Http\Promise\Promise getDataLakeTableAsync($arguments = [])
 * @method \Dew\Acs\Result batchCreateDataLakePartitions(array $arguments = [])
 * @method \Http\Promise\Promise batchCreateDataLakePartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataLakeTable(array $arguments = [])
 * @method \Http\Promise\Promise updateDataLakeTableAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataLakePartition(array $arguments = [])
 * @method \Http\Promise\Promise updateDataLakePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataLakeDatabase(array $arguments = [])
 * @method \Http\Promise\Promise updateDataLakeDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeTableName(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeTableNameAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeTable(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeTableAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakePartitionName(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakePartitionNameAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakePartitionByFilter(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakePartitionByFilterAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakePartition(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result getDataLakePartition(array $arguments = [])
 * @method \Http\Promise\Promise getDataLakePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataLakeTable(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataLakeTableAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataLakePartition(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataLakePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataLakeDatabase(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataLakeDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result createDataLakeTable(array $arguments = [])
 * @method \Http\Promise\Promise createDataLakeTableAsync($arguments = [])
 * @method \Dew\Acs\Result createDataLakePartition(array $arguments = [])
 * @method \Http\Promise\Promise createDataLakePartitionAsync($arguments = [])
 * @method \Dew\Acs\Result createDataLakeDatabase(array $arguments = [])
 * @method \Http\Promise\Promise createDataLakeDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result batchUpdateDataLakePartitions(array $arguments = [])
 * @method \Http\Promise\Promise batchUpdateDataLakePartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeleteDataLakePartitions(array $arguments = [])
 * @method \Http\Promise\Promise batchDeleteDataLakePartitionsAsync($arguments = [])
 * @method \Dew\Acs\Result createDataLakeFunction(array $arguments = [])
 * @method \Http\Promise\Promise createDataLakeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result getDataLakeFunction(array $arguments = [])
 * @method \Http\Promise\Promise getDataLakeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataLakeFunction(array $arguments = [])
 * @method \Http\Promise\Promise updateDataLakeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataLakeFunction(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataLakeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeFunction(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLakeFunctionName(array $arguments = [])
 * @method \Http\Promise\Promise listDataLakeFunctionNameAsync($arguments = [])
 * @method \Dew\Acs\Result getNotebookAndSubmitTask(array $arguments = [])
 * @method \Http\Promise\Promise getNotebookAndSubmitTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getNotebookTaskStatus(array $arguments = [])
 * @method \Http\Promise\Promise getNotebookTaskStatusAsync($arguments = [])
 */
final class DmsClient extends AcsClient
{
    //
}
