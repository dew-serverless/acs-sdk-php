<?php

declare(strict_types=1);

namespace Dew\Acs\Eci;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result createContainerGroup(array $arguments = [])
 * @method \Http\Promise\Promise createContainerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateContainerGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateContainerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeContainerGroups(array $arguments = [])
 * @method \Http\Promise\Promise describeContainerGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeContainerGroupStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeContainerGroupStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeContainerGroupEvents(array $arguments = [])
 * @method \Http\Promise\Promise describeContainerGroupEventsAsync($arguments = [])
 * @method \Dew\Acs\Result resizeContainerGroupVolume(array $arguments = [])
 * @method \Http\Promise\Promise resizeContainerGroupVolumeAsync($arguments = [])
 * @method \Dew\Acs\Result restartContainerGroup(array $arguments = [])
 * @method \Http\Promise\Promise restartContainerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteContainerGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteContainerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result execContainerCommand(array $arguments = [])
 * @method \Http\Promise\Promise execContainerCommandAsync($arguments = [])
 * @method \Dew\Acs\Result describeContainerLog(array $arguments = [])
 * @method \Http\Promise\Promise describeContainerLogAsync($arguments = [])
 * @method \Dew\Acs\Result commitContainer(array $arguments = [])
 * @method \Http\Promise\Promise commitContainerAsync($arguments = [])
 * @method \Dew\Acs\Result describeCommitContainerTask(array $arguments = [])
 * @method \Http\Promise\Promise describeCommitContainerTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createImageCache(array $arguments = [])
 * @method \Http\Promise\Promise createImageCacheAsync($arguments = [])
 * @method \Dew\Acs\Result deleteImageCache(array $arguments = [])
 * @method \Http\Promise\Promise deleteImageCacheAsync($arguments = [])
 * @method \Dew\Acs\Result updateImageCache(array $arguments = [])
 * @method \Http\Promise\Promise updateImageCacheAsync($arguments = [])
 * @method \Dew\Acs\Result describeImageCaches(array $arguments = [])
 * @method \Http\Promise\Promise describeImageCachesAsync($arguments = [])
 * @method \Dew\Acs\Result createDataCache(array $arguments = [])
 * @method \Http\Promise\Promise createDataCacheAsync($arguments = [])
 * @method \Dew\Acs\Result describeDataCaches(array $arguments = [])
 * @method \Http\Promise\Promise describeDataCachesAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataCache(array $arguments = [])
 * @method \Http\Promise\Promise updateDataCacheAsync($arguments = [])
 * @method \Dew\Acs\Result copyDataCache(array $arguments = [])
 * @method \Http\Promise\Promise copyDataCacheAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataCache(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataCacheAsync($arguments = [])
 * @method \Dew\Acs\Result createVirtualNode(array $arguments = [])
 * @method \Http\Promise\Promise createVirtualNodeAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVirtualNode(array $arguments = [])
 * @method \Http\Promise\Promise deleteVirtualNodeAsync($arguments = [])
 * @method \Dew\Acs\Result updateVirtualNode(array $arguments = [])
 * @method \Http\Promise\Promise updateVirtualNodeAsync($arguments = [])
 * @method \Dew\Acs\Result describeVirtualNodes(array $arguments = [])
 * @method \Http\Promise\Promise describeVirtualNodesAsync($arguments = [])
 * @method \Dew\Acs\Result describeContainerGroupMetric(array $arguments = [])
 * @method \Http\Promise\Promise describeContainerGroupMetricAsync($arguments = [])
 * @method \Dew\Acs\Result describeMultiContainerGroupMetric(array $arguments = [])
 * @method \Http\Promise\Promise describeMultiContainerGroupMetricAsync($arguments = [])
 * @method \Dew\Acs\Result createInstanceOpsTask(array $arguments = [])
 * @method \Http\Promise\Promise createInstanceOpsTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceOpsRecords(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceOpsRecordsAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listUsage(array $arguments = [])
 * @method \Http\Promise\Promise listUsageAsync($arguments = [])
 * @method \Dew\Acs\Result describeContainerGroupPrice(array $arguments = [])
 * @method \Http\Promise\Promise describeContainerGroupPriceAsync($arguments = [])
 * @method \Dew\Acs\Result describeAvailableResource(array $arguments = [])
 * @method \Http\Promise\Promise describeAvailableResourceAsync($arguments = [])
 */
final class EciClient extends AcsClient
{
    //
}
