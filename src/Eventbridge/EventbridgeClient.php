<?php

declare(strict_types=1);

namespace Dew\Acs\Eventbridge;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createEventBus(array $arguments = [])
 * @method \Http\Promise\Promise createEventBusAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEventBus(array $arguments = [])
 * @method \Http\Promise\Promise deleteEventBusAsync($arguments = [])
 * @method \Dew\Acs\Result updateEventBus(array $arguments = [])
 * @method \Http\Promise\Promise updateEventBusAsync($arguments = [])
 * @method \Dew\Acs\Result getEventBus(array $arguments = [])
 * @method \Http\Promise\Promise getEventBusAsync($arguments = [])
 * @method \Dew\Acs\Result listEventBuses(array $arguments = [])
 * @method \Http\Promise\Promise listEventBusesAsync($arguments = [])
 * @method \Dew\Acs\Result queryEvent(array $arguments = [])
 * @method \Http\Promise\Promise queryEventAsync($arguments = [])
 * @method \Dew\Acs\Result queryEventTraces(array $arguments = [])
 * @method \Http\Promise\Promise queryEventTracesAsync($arguments = [])
 * @method \Dew\Acs\Result queryTracedEventByEventId(array $arguments = [])
 * @method \Http\Promise\Promise queryTracedEventByEventIdAsync($arguments = [])
 * @method \Dew\Acs\Result queryTracedEvents(array $arguments = [])
 * @method \Http\Promise\Promise queryTracedEventsAsync($arguments = [])
 * @method \Dew\Acs\Result listAliyunOfficialEventSources(array $arguments = [])
 * @method \Http\Promise\Promise listAliyunOfficialEventSourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listUserDefinedEventSources(array $arguments = [])
 * @method \Http\Promise\Promise listUserDefinedEventSourcesAsync($arguments = [])
 * @method \Dew\Acs\Result createEventSource(array $arguments = [])
 * @method \Http\Promise\Promise createEventSourceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEventSource(array $arguments = [])
 * @method \Http\Promise\Promise deleteEventSourceAsync($arguments = [])
 * @method \Dew\Acs\Result updateEventSource(array $arguments = [])
 * @method \Http\Promise\Promise updateEventSourceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTargets(array $arguments = [])
 * @method \Http\Promise\Promise deleteTargetsAsync($arguments = [])
 * @method \Dew\Acs\Result putTargets(array $arguments = [])
 * @method \Http\Promise\Promise putTargetsAsync($arguments = [])
 * @method \Dew\Acs\Result createRule(array $arguments = [])
 * @method \Http\Promise\Promise createRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteRuleAsync($arguments = [])
 * @method \Dew\Acs\Result disableRule(array $arguments = [])
 * @method \Http\Promise\Promise disableRuleAsync($arguments = [])
 * @method \Dew\Acs\Result enableRule(array $arguments = [])
 * @method \Http\Promise\Promise enableRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateRule(array $arguments = [])
 * @method \Http\Promise\Promise updateRuleAsync($arguments = [])
 * @method \Dew\Acs\Result getRule(array $arguments = [])
 * @method \Http\Promise\Promise getRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listRules(array $arguments = [])
 * @method \Http\Promise\Promise listRulesAsync($arguments = [])
 * @method \Dew\Acs\Result listEventStreamings(array $arguments = [])
 * @method \Http\Promise\Promise listEventStreamingsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEventStreaming(array $arguments = [])
 * @method \Http\Promise\Promise deleteEventStreamingAsync($arguments = [])
 * @method \Dew\Acs\Result pauseEventStreaming(array $arguments = [])
 * @method \Http\Promise\Promise pauseEventStreamingAsync($arguments = [])
 * @method \Dew\Acs\Result startEventStreaming(array $arguments = [])
 * @method \Http\Promise\Promise startEventStreamingAsync($arguments = [])
 * @method \Dew\Acs\Result getEventStreaming(array $arguments = [])
 * @method \Http\Promise\Promise getEventStreamingAsync($arguments = [])
 * @method \Dew\Acs\Result updateEventStreaming(array $arguments = [])
 * @method \Http\Promise\Promise updateEventStreamingAsync($arguments = [])
 * @method \Dew\Acs\Result createEventStreaming(array $arguments = [])
 * @method \Http\Promise\Promise createEventStreamingAsync($arguments = [])
 * @method \Dew\Acs\Result updateApiDestination(array $arguments = [])
 * @method \Http\Promise\Promise updateApiDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result createApiDestination(array $arguments = [])
 * @method \Http\Promise\Promise createApiDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result createConnection(array $arguments = [])
 * @method \Http\Promise\Promise createConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteApiDestination(array $arguments = [])
 * @method \Http\Promise\Promise deleteApiDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConnection(array $arguments = [])
 * @method \Http\Promise\Promise deleteConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result getApiDestination(array $arguments = [])
 * @method \Http\Promise\Promise getApiDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result getConnection(array $arguments = [])
 * @method \Http\Promise\Promise getConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result listApiDestinations(array $arguments = [])
 * @method \Http\Promise\Promise listApiDestinationsAsync($arguments = [])
 * @method \Dew\Acs\Result listConnections(array $arguments = [])
 * @method \Http\Promise\Promise listConnectionsAsync($arguments = [])
 * @method \Dew\Acs\Result updateConnection(array $arguments = [])
 * @method \Http\Promise\Promise updateConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result createServiceLinkedRoleForProduct(array $arguments = [])
 * @method \Http\Promise\Promise createServiceLinkedRoleForProductAsync($arguments = [])
 * @method \Dew\Acs\Result listTargets(array $arguments = [])
 * @method \Http\Promise\Promise listTargetsAsync($arguments = [])
 * @method \Dew\Acs\Result testEventPattern(array $arguments = [])
 * @method \Http\Promise\Promise testEventPatternAsync($arguments = [])
 * @method \Dew\Acs\Result eventCenterQueryEvents(array $arguments = [])
 * @method \Http\Promise\Promise eventCenterQueryEventsAsync($arguments = [])
 * @method \Dew\Acs\Result checkServiceLinkedRoleForProduct(array $arguments = [])
 * @method \Http\Promise\Promise checkServiceLinkedRoleForProductAsync($arguments = [])
 * @method \Dew\Acs\Result testEventSourceConfig(array $arguments = [])
 * @method \Http\Promise\Promise testEventSourceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result discoverEventSource(array $arguments = [])
 * @method \Http\Promise\Promise discoverEventSourceAsync($arguments = [])
 */
final class EventbridgeClient extends AcsClient
{
    //
}
