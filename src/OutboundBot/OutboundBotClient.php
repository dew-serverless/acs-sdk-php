<?php

declare(strict_types=1);

namespace Dew\Acs\OutboundBot;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createInstance(array $arguments = [])
 * @method \Http\Promise\Promise createInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstance(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result listInstances(array $arguments = [])
 * @method \Http\Promise\Promise listInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstance(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createGlobalQuestion(array $arguments = [])
 * @method \Http\Promise\Promise createGlobalQuestionAsync($arguments = [])
 * @method \Dew\Acs\Result createIntent(array $arguments = [])
 * @method \Http\Promise\Promise createIntentAsync($arguments = [])
 * @method \Dew\Acs\Result createScript(array $arguments = [])
 * @method \Http\Promise\Promise createScriptAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGlobalQuestion(array $arguments = [])
 * @method \Http\Promise\Promise deleteGlobalQuestionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScript(array $arguments = [])
 * @method \Http\Promise\Promise deleteScriptAsync($arguments = [])
 * @method \Dew\Acs\Result modifyGlobalQuestion(array $arguments = [])
 * @method \Http\Promise\Promise modifyGlobalQuestionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyScript(array $arguments = [])
 * @method \Http\Promise\Promise modifyScriptAsync($arguments = [])
 * @method \Dew\Acs\Result modifyScriptVoiceConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyScriptVoiceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTTSConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyTTSConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeGlobalQuestion(array $arguments = [])
 * @method \Http\Promise\Promise describeGlobalQuestionAsync($arguments = [])
 * @method \Dew\Acs\Result describeScript(array $arguments = [])
 * @method \Http\Promise\Promise describeScriptAsync($arguments = [])
 * @method \Dew\Acs\Result describeScriptVoiceConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeScriptVoiceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listScripts(array $arguments = [])
 * @method \Http\Promise\Promise listScriptsAsync($arguments = [])
 * @method \Dew\Acs\Result listScriptVoiceConfigs(array $arguments = [])
 * @method \Http\Promise\Promise listScriptVoiceConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result listTags(array $arguments = [])
 * @method \Http\Promise\Promise listTagsAsync($arguments = [])
 * @method \Dew\Acs\Result queryScriptsByStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryScriptsByStatusAsync($arguments = [])
 * @method \Dew\Acs\Result listDialogueFlows(array $arguments = [])
 * @method \Http\Promise\Promise listDialogueFlowsAsync($arguments = [])
 * @method \Dew\Acs\Result publishScript(array $arguments = [])
 * @method \Http\Promise\Promise publishScriptAsync($arguments = [])
 * @method \Dew\Acs\Result publishScriptForDebug(array $arguments = [])
 * @method \Http\Promise\Promise publishScriptForDebugAsync($arguments = [])
 * @method \Dew\Acs\Result rollbackScript(array $arguments = [])
 * @method \Http\Promise\Promise rollbackScriptAsync($arguments = [])
 * @method \Dew\Acs\Result submitScriptReview(array $arguments = [])
 * @method \Http\Promise\Promise submitScriptReviewAsync($arguments = [])
 * @method \Dew\Acs\Result withdrawScriptReview(array $arguments = [])
 * @method \Http\Promise\Promise withdrawScriptReviewAsync($arguments = [])
 * @method \Dew\Acs\Result exportScript(array $arguments = [])
 * @method \Http\Promise\Promise exportScriptAsync($arguments = [])
 * @method \Dew\Acs\Result inflightTaskTimeout(array $arguments = [])
 * @method \Http\Promise\Promise inflightTaskTimeoutAsync($arguments = [])
 * @method \Dew\Acs\Result taskPreparing(array $arguments = [])
 * @method \Http\Promise\Promise taskPreparingAsync($arguments = [])
 * @method \Dew\Acs\Result duplicateScript(array $arguments = [])
 * @method \Http\Promise\Promise duplicateScriptAsync($arguments = [])
 * @method \Dew\Acs\Result describeTTSConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeTTSConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeTTSDemo(array $arguments = [])
 * @method \Http\Promise\Promise describeTTSDemoAsync($arguments = [])
 * @method \Dew\Acs\Result createJobGroup(array $arguments = [])
 * @method \Http\Promise\Promise createJobGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeJobGroup(array $arguments = [])
 * @method \Http\Promise\Promise describeJobGroupAsync($arguments = [])
 * @method \Dew\Acs\Result modifyJobGroup(array $arguments = [])
 * @method \Http\Promise\Promise modifyJobGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listJobGroups(array $arguments = [])
 * @method \Http\Promise\Promise listJobGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result listJobGroupsAsync(array $arguments = [])
 * @method \Http\Promise\Promise listJobGroupsAsyncAsync($arguments = [])
 * @method \Dew\Acs\Result deleteJobGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteJobGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createBatchJobs(array $arguments = [])
 * @method \Http\Promise\Promise createBatchJobsAsync($arguments = [])
 * @method \Dew\Acs\Result startJob(array $arguments = [])
 * @method \Http\Promise\Promise startJobAsync($arguments = [])
 * @method \Dew\Acs\Result modifyBatchJobs(array $arguments = [])
 * @method \Http\Promise\Promise modifyBatchJobsAsync($arguments = [])
 * @method \Dew\Acs\Result describeJob(array $arguments = [])
 * @method \Http\Promise\Promise describeJobAsync($arguments = [])
 * @method \Dew\Acs\Result listJobs(array $arguments = [])
 * @method \Http\Promise\Promise listJobsAsync($arguments = [])
 * @method \Dew\Acs\Result queryJobs(array $arguments = [])
 * @method \Http\Promise\Promise queryJobsAsync($arguments = [])
 * @method \Dew\Acs\Result listJobsByGroup(array $arguments = [])
 * @method \Http\Promise\Promise listJobsByGroupAsync($arguments = [])
 * @method \Dew\Acs\Result cancelJobs(array $arguments = [])
 * @method \Http\Promise\Promise cancelJobsAsync($arguments = [])
 * @method \Dew\Acs\Result resumeJobs(array $arguments = [])
 * @method \Http\Promise\Promise resumeJobsAsync($arguments = [])
 * @method \Dew\Acs\Result submitBatchJobs(array $arguments = [])
 * @method \Http\Promise\Promise submitBatchJobsAsync($arguments = [])
 * @method \Dew\Acs\Result suspendJobs(array $arguments = [])
 * @method \Http\Promise\Promise suspendJobsAsync($arguments = [])
 * @method \Dew\Acs\Result downloadRecording(array $arguments = [])
 * @method \Http\Promise\Promise downloadRecordingAsync($arguments = [])
 * @method \Dew\Acs\Result createTag(array $arguments = [])
 * @method \Http\Promise\Promise createTagAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTagGroups(array $arguments = [])
 * @method \Http\Promise\Promise modifyTagGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeTagHitsSummary(array $arguments = [])
 * @method \Http\Promise\Promise describeTagHitsSummaryAsync($arguments = [])
 * @method \Dew\Acs\Result createAnnotationMission(array $arguments = [])
 * @method \Http\Promise\Promise createAnnotationMissionAsync($arguments = [])
 * @method \Dew\Acs\Result saveAnnotationMissionTagInfoList(array $arguments = [])
 * @method \Http\Promise\Promise saveAnnotationMissionTagInfoListAsync($arguments = [])
 * @method \Dew\Acs\Result saveAnnotationMissionSessionList(array $arguments = [])
 * @method \Http\Promise\Promise saveAnnotationMissionSessionListAsync($arguments = [])
 * @method \Dew\Acs\Result getAnnotationMissionTagInfoList(array $arguments = [])
 * @method \Http\Promise\Promise getAnnotationMissionTagInfoListAsync($arguments = [])
 * @method \Dew\Acs\Result modifyAnnotationMission(array $arguments = [])
 * @method \Http\Promise\Promise modifyAnnotationMissionAsync($arguments = [])
 * @method \Dew\Acs\Result listAnnotationMissionSession(array $arguments = [])
 * @method \Http\Promise\Promise listAnnotationMissionSessionAsync($arguments = [])
 * @method \Dew\Acs\Result listAnnotationMission(array $arguments = [])
 * @method \Http\Promise\Promise listAnnotationMissionAsync($arguments = [])
 * @method \Dew\Acs\Result getAnnotationMissionSummary(array $arguments = [])
 * @method \Http\Promise\Promise getAnnotationMissionSummaryAsync($arguments = [])
 * @method \Dew\Acs\Result createDialogueFlow(array $arguments = [])
 * @method \Http\Promise\Promise createDialogueFlowAsync($arguments = [])
 * @method \Dew\Acs\Result createOutboundCallNumber(array $arguments = [])
 * @method \Http\Promise\Promise createOutboundCallNumberAsync($arguments = [])
 * @method \Dew\Acs\Result deleteOutboundCallNumber(array $arguments = [])
 * @method \Http\Promise\Promise deleteOutboundCallNumberAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDialogueFlow(array $arguments = [])
 * @method \Http\Promise\Promise deleteDialogueFlowAsync($arguments = [])
 * @method \Dew\Acs\Result modifyOutboundCallNumber(array $arguments = [])
 * @method \Http\Promise\Promise modifyOutboundCallNumberAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDialogueFlow(array $arguments = [])
 * @method \Http\Promise\Promise modifyDialogueFlowAsync($arguments = [])
 * @method \Dew\Acs\Result listOutboundCallNumbers(array $arguments = [])
 * @method \Http\Promise\Promise listOutboundCallNumbersAsync($arguments = [])
 * @method \Dew\Acs\Result listScriptPublishHistories(array $arguments = [])
 * @method \Http\Promise\Promise listScriptPublishHistoriesAsync($arguments = [])
 * @method \Dew\Acs\Result listGlobalQuestions(array $arguments = [])
 * @method \Http\Promise\Promise listGlobalQuestionsAsync($arguments = [])
 * @method \Dew\Acs\Result assignJobs(array $arguments = [])
 * @method \Http\Promise\Promise assignJobsAsync($arguments = [])
 * @method \Dew\Acs\Result submitRecording(array $arguments = [])
 * @method \Http\Promise\Promise submitRecordingAsync($arguments = [])
 * @method \Dew\Acs\Result dialogue(array $arguments = [])
 * @method \Http\Promise\Promise dialogueAsync($arguments = [])
 * @method \Dew\Acs\Result recordFailure(array $arguments = [])
 * @method \Http\Promise\Promise recordFailureAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIntent(array $arguments = [])
 * @method \Http\Promise\Promise deleteIntentAsync($arguments = [])
 * @method \Dew\Acs\Result modifyIntent(array $arguments = [])
 * @method \Http\Promise\Promise modifyIntentAsync($arguments = [])
 * @method \Dew\Acs\Result describeIntent(array $arguments = [])
 * @method \Http\Promise\Promise describeIntentAsync($arguments = [])
 * @method \Dew\Acs\Result listIntents(array $arguments = [])
 * @method \Http\Promise\Promise listIntentsAsync($arguments = [])
 * @method \Dew\Acs\Result createBatchRepeatJob(array $arguments = [])
 * @method \Http\Promise\Promise createBatchRepeatJobAsync($arguments = [])
 * @method \Dew\Acs\Result createJobDataParsingTask(array $arguments = [])
 * @method \Http\Promise\Promise createJobDataParsingTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createJobGroupExportTask(array $arguments = [])
 * @method \Http\Promise\Promise createJobGroupExportTaskAsync($arguments = [])
 * @method \Dew\Acs\Result deleteContactBlockList(array $arguments = [])
 * @method \Http\Promise\Promise deleteContactBlockListAsync($arguments = [])
 * @method \Dew\Acs\Result deleteContactWhiteList(array $arguments = [])
 * @method \Http\Promise\Promise deleteContactWhiteListAsync($arguments = [])
 * @method \Dew\Acs\Result describeDialogueNodeStatistics(array $arguments = [])
 * @method \Http\Promise\Promise describeDialogueNodeStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDsReports(array $arguments = [])
 * @method \Http\Promise\Promise describeDsReportsAsync($arguments = [])
 * @method \Dew\Acs\Result describeGroupExecutingInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeGroupExecutingInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeIntentStatistics(array $arguments = [])
 * @method \Http\Promise\Promise describeIntentStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result describeJobDataParsingTaskProgress(array $arguments = [])
 * @method \Http\Promise\Promise describeJobDataParsingTaskProgressAsync($arguments = [])
 * @method \Dew\Acs\Result describeJobGroupExportTaskProgress(array $arguments = [])
 * @method \Http\Promise\Promise describeJobGroupExportTaskProgressAsync($arguments = [])
 * @method \Dew\Acs\Result getAsrServerInfo(array $arguments = [])
 * @method \Http\Promise\Promise getAsrServerInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getAfterAnswerDelayPlayback(array $arguments = [])
 * @method \Http\Promise\Promise getAfterAnswerDelayPlaybackAsync($arguments = [])
 * @method \Dew\Acs\Result getEffectiveDays(array $arguments = [])
 * @method \Http\Promise\Promise getEffectiveDaysAsync($arguments = [])
 * @method \Dew\Acs\Result queryJobsWithResult(array $arguments = [])
 * @method \Http\Promise\Promise queryJobsWithResultAsync($arguments = [])
 * @method \Dew\Acs\Result saveAfterAnswerDelayPlayback(array $arguments = [])
 * @method \Http\Promise\Promise saveAfterAnswerDelayPlaybackAsync($arguments = [])
 * @method \Dew\Acs\Result saveBaseStrategyPeriod(array $arguments = [])
 * @method \Http\Promise\Promise saveBaseStrategyPeriodAsync($arguments = [])
 * @method \Dew\Acs\Result saveContactBlockList(array $arguments = [])
 * @method \Http\Promise\Promise saveContactBlockListAsync($arguments = [])
 * @method \Dew\Acs\Result saveContactWhiteList(array $arguments = [])
 * @method \Http\Promise\Promise saveContactWhiteListAsync($arguments = [])
 * @method \Dew\Acs\Result saveEffectiveDays(array $arguments = [])
 * @method \Http\Promise\Promise saveEffectiveDaysAsync($arguments = [])
 * @method \Dew\Acs\Result saveMaxAttemptsPerDay(array $arguments = [])
 * @method \Http\Promise\Promise saveMaxAttemptsPerDayAsync($arguments = [])
 * @method \Dew\Acs\Result suspendCall(array $arguments = [])
 * @method \Http\Promise\Promise suspendCallAsync($arguments = [])
 * @method \Dew\Acs\Result suspendCallWithFile(array $arguments = [])
 * @method \Http\Promise\Promise suspendCallWithFileAsync($arguments = [])
 * @method \Dew\Acs\Result changeResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise changeResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getTaskByUuid(array $arguments = [])
 * @method \Http\Promise\Promise getTaskByUuidAsync($arguments = [])
 * @method \Dew\Acs\Result listResourceTags(array $arguments = [])
 * @method \Http\Promise\Promise listResourceTagsAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result getConcurrentConversationQuota(array $arguments = [])
 * @method \Http\Promise\Promise getConcurrentConversationQuotaAsync($arguments = [])
 * @method \Dew\Acs\Result getCurrentConcurrency(array $arguments = [])
 * @method \Http\Promise\Promise getCurrentConcurrencyAsync($arguments = [])
 * @method \Dew\Acs\Result terminateCall(array $arguments = [])
 * @method \Http\Promise\Promise terminateCallAsync($arguments = [])
 * @method \Dew\Acs\Result listDownloadTasks(array $arguments = [])
 * @method \Http\Promise\Promise listDownloadTasksAsync($arguments = [])
 * @method \Dew\Acs\Result createDownloadUrl(array $arguments = [])
 * @method \Http\Promise\Promise createDownloadUrlAsync($arguments = [])
 * @method \Dew\Acs\Result searchTask(array $arguments = [])
 * @method \Http\Promise\Promise searchTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createNumberDistrictInfoParsingTask(array $arguments = [])
 * @method \Http\Promise\Promise createNumberDistrictInfoParsingTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createNumberDistrictInfoDownloadUrl(array $arguments = [])
 * @method \Http\Promise\Promise createNumberDistrictInfoDownloadUrlAsync($arguments = [])
 * @method \Dew\Acs\Result getNumberDistrictInfoTemplateDownloadUrl(array $arguments = [])
 * @method \Http\Promise\Promise getNumberDistrictInfoTemplateDownloadUrlAsync($arguments = [])
 * @method \Dew\Acs\Result applyNumberDistrictInfoParsingResult(array $arguments = [])
 * @method \Http\Promise\Promise applyNumberDistrictInfoParsingResultAsync($arguments = [])
 * @method \Dew\Acs\Result dismissNumberDistrictInfoParsingResult(array $arguments = [])
 * @method \Http\Promise\Promise dismissNumberDistrictInfoParsingResultAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAllNumberDistrictInfo(array $arguments = [])
 * @method \Http\Promise\Promise deleteAllNumberDistrictInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeNumberDistrictInfoStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeNumberDistrictInfoStatusAsync($arguments = [])
 * @method \Dew\Acs\Result listChatbotInstances(array $arguments = [])
 * @method \Http\Promise\Promise listChatbotInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result createInstanceBindNumber(array $arguments = [])
 * @method \Http\Promise\Promise createInstanceBindNumberAsync($arguments = [])
 * @method \Dew\Acs\Result createTaskExportTask(array $arguments = [])
 * @method \Http\Promise\Promise createTaskExportTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describeTenantBindNumber(array $arguments = [])
 * @method \Http\Promise\Promise describeTenantBindNumberAsync($arguments = [])
 * @method \Dew\Acs\Result listAllTenantBindNumberBinding(array $arguments = [])
 * @method \Http\Promise\Promise listAllTenantBindNumberBindingAsync($arguments = [])
 * @method \Dew\Acs\Result generateUploadUrl(array $arguments = [])
 * @method \Http\Promise\Promise generateUploadUrlAsync($arguments = [])
 * @method \Dew\Acs\Result uploadScriptRecording(array $arguments = [])
 * @method \Http\Promise\Promise uploadScriptRecordingAsync($arguments = [])
 * @method \Dew\Acs\Result downloadScriptRecording(array $arguments = [])
 * @method \Http\Promise\Promise downloadScriptRecordingAsync($arguments = [])
 * @method \Dew\Acs\Result listScriptRecording(array $arguments = [])
 * @method \Http\Promise\Promise listScriptRecordingAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScriptRecording(array $arguments = [])
 * @method \Http\Promise\Promise deleteScriptRecordingAsync($arguments = [])
 * @method \Dew\Acs\Result listSchedulerInstances(array $arguments = [])
 * @method \Http\Promise\Promise listSchedulerInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result queryScriptWaveforms(array $arguments = [])
 * @method \Http\Promise\Promise queryScriptWaveformsAsync($arguments = [])
 * @method \Dew\Acs\Result importScript(array $arguments = [])
 * @method \Http\Promise\Promise importScriptAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScriptWaveform(array $arguments = [])
 * @method \Http\Promise\Promise deleteScriptWaveformAsync($arguments = [])
 * @method \Dew\Acs\Result createScriptWaveform(array $arguments = [])
 * @method \Http\Promise\Promise createScriptWaveformAsync($arguments = [])
 */
final class OutboundBotClient extends AcsClient
{
    //
}
