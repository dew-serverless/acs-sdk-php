<?php

declare(strict_types=1);

namespace Dew\Acs\Sls;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createProject(array $arguments = [])
 * @method \Http\Promise\Promise createProjectAsync($arguments = [])
 * @method \Dew\Acs\Result createDomain(array $arguments = [])
 * @method \Http\Promise\Promise createDomainAsync($arguments = [])
 * @method \Dew\Acs\Result createLogging(array $arguments = [])
 * @method \Http\Promise\Promise createLoggingAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProject(array $arguments = [])
 * @method \Http\Promise\Promise deleteProjectAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLogging(array $arguments = [])
 * @method \Http\Promise\Promise deleteLoggingAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDomain(array $arguments = [])
 * @method \Http\Promise\Promise deleteDomainAsync($arguments = [])
 * @method \Dew\Acs\Result updateProject(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectAsync($arguments = [])
 * @method \Dew\Acs\Result updateLogging(array $arguments = [])
 * @method \Http\Promise\Promise updateLoggingAsync($arguments = [])
 * @method \Dew\Acs\Result putProjectTransferAcceleration(array $arguments = [])
 * @method \Http\Promise\Promise putProjectTransferAccelerationAsync($arguments = [])
 * @method \Dew\Acs\Result getProject(array $arguments = [])
 * @method \Http\Promise\Promise getProjectAsync($arguments = [])
 * @method \Dew\Acs\Result listProject(array $arguments = [])
 * @method \Http\Promise\Promise listProjectAsync($arguments = [])
 * @method \Dew\Acs\Result getProjectLogs(array $arguments = [])
 * @method \Http\Promise\Promise getProjectLogsAsync($arguments = [])
 * @method \Dew\Acs\Result getLogging(array $arguments = [])
 * @method \Http\Promise\Promise getLoggingAsync($arguments = [])
 * @method \Dew\Acs\Result listDomains(array $arguments = [])
 * @method \Http\Promise\Promise listDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result createLogStore(array $arguments = [])
 * @method \Http\Promise\Promise createLogStoreAsync($arguments = [])
 * @method \Dew\Acs\Result createIndex(array $arguments = [])
 * @method \Http\Promise\Promise createIndexAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLogStore(array $arguments = [])
 * @method \Http\Promise\Promise deleteLogStoreAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIndex(array $arguments = [])
 * @method \Http\Promise\Promise deleteIndexAsync($arguments = [])
 * @method \Dew\Acs\Result putWebtracking(array $arguments = [])
 * @method \Http\Promise\Promise putWebtrackingAsync($arguments = [])
 * @method \Dew\Acs\Result updateLogStore(array $arguments = [])
 * @method \Http\Promise\Promise updateLogStoreAsync($arguments = [])
 * @method \Dew\Acs\Result updateIndex(array $arguments = [])
 * @method \Http\Promise\Promise updateIndexAsync($arguments = [])
 * @method \Dew\Acs\Result splitShard(array $arguments = [])
 * @method \Http\Promise\Promise splitShardAsync($arguments = [])
 * @method \Dew\Acs\Result updateLogStoreMeteringMode(array $arguments = [])
 * @method \Http\Promise\Promise updateLogStoreMeteringModeAsync($arguments = [])
 * @method \Dew\Acs\Result mergeShard(array $arguments = [])
 * @method \Http\Promise\Promise mergeShardAsync($arguments = [])
 * @method \Dew\Acs\Result listLogStores(array $arguments = [])
 * @method \Http\Promise\Promise listLogStoresAsync($arguments = [])
 * @method \Dew\Acs\Result getLogStore(array $arguments = [])
 * @method \Http\Promise\Promise getLogStoreAsync($arguments = [])
 * @method \Dew\Acs\Result getIndex(array $arguments = [])
 * @method \Http\Promise\Promise getIndexAsync($arguments = [])
 * @method \Dew\Acs\Result listShards(array $arguments = [])
 * @method \Http\Promise\Promise listShardsAsync($arguments = [])
 * @method \Dew\Acs\Result getLogs(array $arguments = [])
 * @method \Http\Promise\Promise getLogsAsync($arguments = [])
 * @method \Dew\Acs\Result getCursor(array $arguments = [])
 * @method \Http\Promise\Promise getCursorAsync($arguments = [])
 * @method \Dew\Acs\Result getContextLogs(array $arguments = [])
 * @method \Http\Promise\Promise getContextLogsAsync($arguments = [])
 * @method \Dew\Acs\Result getHistograms(array $arguments = [])
 * @method \Http\Promise\Promise getHistogramsAsync($arguments = [])
 * @method \Dew\Acs\Result getCursorTime(array $arguments = [])
 * @method \Http\Promise\Promise getCursorTimeAsync($arguments = [])
 * @method \Dew\Acs\Result getLogsV2(array $arguments = [])
 * @method \Http\Promise\Promise getLogsV2Async($arguments = [])
 * @method \Dew\Acs\Result pullLogs(array $arguments = [])
 * @method \Http\Promise\Promise pullLogsAsync($arguments = [])
 * @method \Dew\Acs\Result putLogs(array $arguments = [])
 * @method \Http\Promise\Promise putLogsAsync($arguments = [])
 * @method \Dew\Acs\Result getLogStoreMeteringMode(array $arguments = [])
 * @method \Http\Promise\Promise getLogStoreMeteringModeAsync($arguments = [])
 * @method \Dew\Acs\Result listMetricStores(array $arguments = [])
 * @method \Http\Promise\Promise listMetricStoresAsync($arguments = [])
 * @method \Dew\Acs\Result createMetricStore(array $arguments = [])
 * @method \Http\Promise\Promise createMetricStoreAsync($arguments = [])
 * @method \Dew\Acs\Result deleteMetricStore(array $arguments = [])
 * @method \Http\Promise\Promise deleteMetricStoreAsync($arguments = [])
 * @method \Dew\Acs\Result updateMetricStore(array $arguments = [])
 * @method \Http\Promise\Promise updateMetricStoreAsync($arguments = [])
 * @method \Dew\Acs\Result updateMetricStoreMeteringMode(array $arguments = [])
 * @method \Http\Promise\Promise updateMetricStoreMeteringModeAsync($arguments = [])
 * @method \Dew\Acs\Result getMetricStore(array $arguments = [])
 * @method \Http\Promise\Promise getMetricStoreAsync($arguments = [])
 * @method \Dew\Acs\Result getMetricStoreMeteringMode(array $arguments = [])
 * @method \Http\Promise\Promise getMetricStoreMeteringModeAsync($arguments = [])
 * @method \Dew\Acs\Result createStoreView(array $arguments = [])
 * @method \Http\Promise\Promise createStoreViewAsync($arguments = [])
 * @method \Dew\Acs\Result deleteStoreView(array $arguments = [])
 * @method \Http\Promise\Promise deleteStoreViewAsync($arguments = [])
 * @method \Dew\Acs\Result updateStoreView(array $arguments = [])
 * @method \Http\Promise\Promise updateStoreViewAsync($arguments = [])
 * @method \Dew\Acs\Result getStoreView(array $arguments = [])
 * @method \Http\Promise\Promise getStoreViewAsync($arguments = [])
 * @method \Dew\Acs\Result getStoreViewIndex(array $arguments = [])
 * @method \Http\Promise\Promise getStoreViewIndexAsync($arguments = [])
 * @method \Dew\Acs\Result listStoreViews(array $arguments = [])
 * @method \Http\Promise\Promise listStoreViewsAsync($arguments = [])
 * @method \Dew\Acs\Result createMachineGroup(array $arguments = [])
 * @method \Http\Promise\Promise createMachineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteMachineGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteMachineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result removeConfigFromMachineGroup(array $arguments = [])
 * @method \Http\Promise\Promise removeConfigFromMachineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result applyConfigToMachineGroup(array $arguments = [])
 * @method \Http\Promise\Promise applyConfigToMachineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateMachineGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateMachineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateMachineGroupMachine(array $arguments = [])
 * @method \Http\Promise\Promise updateMachineGroupMachineAsync($arguments = [])
 * @method \Dew\Acs\Result listMachineGroup(array $arguments = [])
 * @method \Http\Promise\Promise listMachineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listMachines(array $arguments = [])
 * @method \Http\Promise\Promise listMachinesAsync($arguments = [])
 * @method \Dew\Acs\Result getMachineGroup(array $arguments = [])
 * @method \Http\Promise\Promise getMachineGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getAppliedConfigs(array $arguments = [])
 * @method \Http\Promise\Promise getAppliedConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result getAppliedMachineGroups(array $arguments = [])
 * @method \Http\Promise\Promise getAppliedMachineGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result createConfig(array $arguments = [])
 * @method \Http\Promise\Promise createConfigAsync($arguments = [])
 * @method \Dew\Acs\Result createLogtailPipelineConfig(array $arguments = [])
 * @method \Http\Promise\Promise createLogtailPipelineConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLogtailPipelineConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteLogtailPipelineConfigAsync($arguments = [])
 * @method \Dew\Acs\Result updateConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateConfigAsync($arguments = [])
 * @method \Dew\Acs\Result updateLogtailPipelineConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateLogtailPipelineConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getConfig(array $arguments = [])
 * @method \Http\Promise\Promise getConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listConfig(array $arguments = [])
 * @method \Http\Promise\Promise listConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getLogtailPipelineConfig(array $arguments = [])
 * @method \Http\Promise\Promise getLogtailPipelineConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listLogtailPipelineConfig(array $arguments = [])
 * @method \Http\Promise\Promise listLogtailPipelineConfigAsync($arguments = [])
 * @method \Dew\Acs\Result createDashboard(array $arguments = [])
 * @method \Http\Promise\Promise createDashboardAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDashboard(array $arguments = [])
 * @method \Http\Promise\Promise deleteDashboardAsync($arguments = [])
 * @method \Dew\Acs\Result updateDashboard(array $arguments = [])
 * @method \Http\Promise\Promise updateDashboardAsync($arguments = [])
 * @method \Dew\Acs\Result getDashboard(array $arguments = [])
 * @method \Http\Promise\Promise getDashboardAsync($arguments = [])
 * @method \Dew\Acs\Result listDashboard(array $arguments = [])
 * @method \Http\Promise\Promise listDashboardAsync($arguments = [])
 * @method \Dew\Acs\Result createConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise createConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result consumerGroupUpdateCheckPoint(array $arguments = [])
 * @method \Http\Promise\Promise consumerGroupUpdateCheckPointAsync($arguments = [])
 * @method \Dew\Acs\Result updateConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result consumerGroupHeartBeat(array $arguments = [])
 * @method \Http\Promise\Promise consumerGroupHeartBeatAsync($arguments = [])
 * @method \Dew\Acs\Result listConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise listConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getCheckPoint(array $arguments = [])
 * @method \Http\Promise\Promise getCheckPointAsync($arguments = [])
 * @method \Dew\Acs\Result createOssExternalStore(array $arguments = [])
 * @method \Http\Promise\Promise createOssExternalStoreAsync($arguments = [])
 * @method \Dew\Acs\Result createRdsExternalStore(array $arguments = [])
 * @method \Http\Promise\Promise createRdsExternalStoreAsync($arguments = [])
 * @method \Dew\Acs\Result deleteExternalStore(array $arguments = [])
 * @method \Http\Promise\Promise deleteExternalStoreAsync($arguments = [])
 * @method \Dew\Acs\Result updateRdsExternalStore(array $arguments = [])
 * @method \Http\Promise\Promise updateRdsExternalStoreAsync($arguments = [])
 * @method \Dew\Acs\Result updateOssExternalStore(array $arguments = [])
 * @method \Http\Promise\Promise updateOssExternalStoreAsync($arguments = [])
 * @method \Dew\Acs\Result getExternalStore(array $arguments = [])
 * @method \Http\Promise\Promise getExternalStoreAsync($arguments = [])
 * @method \Dew\Acs\Result createSavedSearch(array $arguments = [])
 * @method \Http\Promise\Promise createSavedSearchAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSavedSearch(array $arguments = [])
 * @method \Http\Promise\Promise deleteSavedSearchAsync($arguments = [])
 * @method \Dew\Acs\Result updateSavedSearch(array $arguments = [])
 * @method \Http\Promise\Promise updateSavedSearchAsync($arguments = [])
 * @method \Dew\Acs\Result listSavedSearch(array $arguments = [])
 * @method \Http\Promise\Promise listSavedSearchAsync($arguments = [])
 * @method \Dew\Acs\Result getSavedSearch(array $arguments = [])
 * @method \Http\Promise\Promise getSavedSearchAsync($arguments = [])
 * @method \Dew\Acs\Result createAlert(array $arguments = [])
 * @method \Http\Promise\Promise createAlertAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAlert(array $arguments = [])
 * @method \Http\Promise\Promise deleteAlertAsync($arguments = [])
 * @method \Dew\Acs\Result updateAlert(array $arguments = [])
 * @method \Http\Promise\Promise updateAlertAsync($arguments = [])
 * @method \Dew\Acs\Result enableAlert(array $arguments = [])
 * @method \Http\Promise\Promise enableAlertAsync($arguments = [])
 * @method \Dew\Acs\Result disableAlert(array $arguments = [])
 * @method \Http\Promise\Promise disableAlertAsync($arguments = [])
 * @method \Dew\Acs\Result getAlert(array $arguments = [])
 * @method \Http\Promise\Promise getAlertAsync($arguments = [])
 * @method \Dew\Acs\Result listAlerts(array $arguments = [])
 * @method \Http\Promise\Promise listAlertsAsync($arguments = [])
 * @method \Dew\Acs\Result createOSSIngestion(array $arguments = [])
 * @method \Http\Promise\Promise createOSSIngestionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteOSSIngestion(array $arguments = [])
 * @method \Http\Promise\Promise deleteOSSIngestionAsync($arguments = [])
 * @method \Dew\Acs\Result updateOSSIngestion(array $arguments = [])
 * @method \Http\Promise\Promise updateOSSIngestionAsync($arguments = [])
 * @method \Dew\Acs\Result startOSSIngestion(array $arguments = [])
 * @method \Http\Promise\Promise startOSSIngestionAsync($arguments = [])
 * @method \Dew\Acs\Result stopOSSIngestion(array $arguments = [])
 * @method \Http\Promise\Promise stopOSSIngestionAsync($arguments = [])
 * @method \Dew\Acs\Result getOSSIngestion(array $arguments = [])
 * @method \Http\Promise\Promise getOSSIngestionAsync($arguments = [])
 * @method \Dew\Acs\Result listOSSIngestions(array $arguments = [])
 * @method \Http\Promise\Promise listOSSIngestionsAsync($arguments = [])
 * @method \Dew\Acs\Result createOSSExport(array $arguments = [])
 * @method \Http\Promise\Promise createOSSExportAsync($arguments = [])
 * @method \Dew\Acs\Result createOSSHDFSExport(array $arguments = [])
 * @method \Http\Promise\Promise createOSSHDFSExportAsync($arguments = [])
 * @method \Dew\Acs\Result deleteOSSExport(array $arguments = [])
 * @method \Http\Promise\Promise deleteOSSExportAsync($arguments = [])
 * @method \Dew\Acs\Result deleteOSSHDFSExport(array $arguments = [])
 * @method \Http\Promise\Promise deleteOSSHDFSExportAsync($arguments = [])
 * @method \Dew\Acs\Result updateOSSExport(array $arguments = [])
 * @method \Http\Promise\Promise updateOSSExportAsync($arguments = [])
 * @method \Dew\Acs\Result startOSSExport(array $arguments = [])
 * @method \Http\Promise\Promise startOSSExportAsync($arguments = [])
 * @method \Dew\Acs\Result stopOSSExport(array $arguments = [])
 * @method \Http\Promise\Promise stopOSSExportAsync($arguments = [])
 * @method \Dew\Acs\Result getOSSExport(array $arguments = [])
 * @method \Http\Promise\Promise getOSSExportAsync($arguments = [])
 * @method \Dew\Acs\Result updateOSSHDFSExport(array $arguments = [])
 * @method \Http\Promise\Promise updateOSSHDFSExportAsync($arguments = [])
 * @method \Dew\Acs\Result startOSSHDFSExport(array $arguments = [])
 * @method \Http\Promise\Promise startOSSHDFSExportAsync($arguments = [])
 * @method \Dew\Acs\Result stopOSSHDFSExport(array $arguments = [])
 * @method \Http\Promise\Promise stopOSSHDFSExportAsync($arguments = [])
 * @method \Dew\Acs\Result listOSSExports(array $arguments = [])
 * @method \Http\Promise\Promise listOSSExportsAsync($arguments = [])
 * @method \Dew\Acs\Result getOSSHDFSExport(array $arguments = [])
 * @method \Http\Promise\Promise getOSSHDFSExportAsync($arguments = [])
 * @method \Dew\Acs\Result listOSSHDFSExports(array $arguments = [])
 * @method \Http\Promise\Promise listOSSHDFSExportsAsync($arguments = [])
 * @method \Dew\Acs\Result createETL(array $arguments = [])
 * @method \Http\Promise\Promise createETLAsync($arguments = [])
 * @method \Dew\Acs\Result deleteETL(array $arguments = [])
 * @method \Http\Promise\Promise deleteETLAsync($arguments = [])
 * @method \Dew\Acs\Result updateETL(array $arguments = [])
 * @method \Http\Promise\Promise updateETLAsync($arguments = [])
 * @method \Dew\Acs\Result startETL(array $arguments = [])
 * @method \Http\Promise\Promise startETLAsync($arguments = [])
 * @method \Dew\Acs\Result stopETL(array $arguments = [])
 * @method \Http\Promise\Promise stopETLAsync($arguments = [])
 * @method \Dew\Acs\Result listETLs(array $arguments = [])
 * @method \Http\Promise\Promise listETLsAsync($arguments = [])
 * @method \Dew\Acs\Result getETL(array $arguments = [])
 * @method \Http\Promise\Promise getETLAsync($arguments = [])
 * @method \Dew\Acs\Result createScheduledSQL(array $arguments = [])
 * @method \Http\Promise\Promise createScheduledSQLAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScheduledSQL(array $arguments = [])
 * @method \Http\Promise\Promise deleteScheduledSQLAsync($arguments = [])
 * @method \Dew\Acs\Result updateScheduledSQL(array $arguments = [])
 * @method \Http\Promise\Promise updateScheduledSQLAsync($arguments = [])
 * @method \Dew\Acs\Result enableScheduledSQL(array $arguments = [])
 * @method \Http\Promise\Promise enableScheduledSQLAsync($arguments = [])
 * @method \Dew\Acs\Result disableScheduledSQL(array $arguments = [])
 * @method \Http\Promise\Promise disableScheduledSQLAsync($arguments = [])
 * @method \Dew\Acs\Result listScheduledSQLs(array $arguments = [])
 * @method \Http\Promise\Promise listScheduledSQLsAsync($arguments = [])
 * @method \Dew\Acs\Result getScheduledSQL(array $arguments = [])
 * @method \Http\Promise\Promise getScheduledSQLAsync($arguments = [])
 * @method \Dew\Acs\Result createDownloadJob(array $arguments = [])
 * @method \Http\Promise\Promise createDownloadJobAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDownloadJob(array $arguments = [])
 * @method \Http\Promise\Promise deleteDownloadJobAsync($arguments = [])
 * @method \Dew\Acs\Result getDownloadJob(array $arguments = [])
 * @method \Http\Promise\Promise getDownloadJobAsync($arguments = [])
 * @method \Dew\Acs\Result listDownloadJobs(array $arguments = [])
 * @method \Http\Promise\Promise listDownloadJobsAsync($arguments = [])
 * @method \Dew\Acs\Result createAnnotationLabel(array $arguments = [])
 * @method \Http\Promise\Promise createAnnotationLabelAsync($arguments = [])
 * @method \Dew\Acs\Result putAnnotationData(array $arguments = [])
 * @method \Http\Promise\Promise putAnnotationDataAsync($arguments = [])
 * @method \Dew\Acs\Result createAnnotationDataSet(array $arguments = [])
 * @method \Http\Promise\Promise createAnnotationDataSetAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAnnotationLabel(array $arguments = [])
 * @method \Http\Promise\Promise deleteAnnotationLabelAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAnnotationData(array $arguments = [])
 * @method \Http\Promise\Promise deleteAnnotationDataAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAnnotationDataSet(array $arguments = [])
 * @method \Http\Promise\Promise deleteAnnotationDataSetAsync($arguments = [])
 * @method \Dew\Acs\Result updateAnnotationLabel(array $arguments = [])
 * @method \Http\Promise\Promise updateAnnotationLabelAsync($arguments = [])
 * @method \Dew\Acs\Result updateAnnotationDataSet(array $arguments = [])
 * @method \Http\Promise\Promise updateAnnotationDataSetAsync($arguments = [])
 * @method \Dew\Acs\Result getAnnotationLabel(array $arguments = [])
 * @method \Http\Promise\Promise getAnnotationLabelAsync($arguments = [])
 * @method \Dew\Acs\Result listAnnotationLabels(array $arguments = [])
 * @method \Http\Promise\Promise listAnnotationLabelsAsync($arguments = [])
 * @method \Dew\Acs\Result getAnnotationData(array $arguments = [])
 * @method \Http\Promise\Promise getAnnotationDataAsync($arguments = [])
 * @method \Dew\Acs\Result listAnnotationData(array $arguments = [])
 * @method \Http\Promise\Promise listAnnotationDataAsync($arguments = [])
 * @method \Dew\Acs\Result getAnnotationDataSet(array $arguments = [])
 * @method \Http\Promise\Promise getAnnotationDataSetAsync($arguments = [])
 * @method \Dew\Acs\Result listAnnotationDataSets(array $arguments = [])
 * @method \Http\Promise\Promise listAnnotationDataSetsAsync($arguments = [])
 * @method \Dew\Acs\Result getMLServiceResults(array $arguments = [])
 * @method \Http\Promise\Promise getMLServiceResultsAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result putProjectPolicy(array $arguments = [])
 * @method \Http\Promise\Promise putProjectPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProjectPolicy(array $arguments = [])
 * @method \Http\Promise\Promise deleteProjectPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getProjectPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getProjectPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result changeResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise changeResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result upsertCollectionPolicy(array $arguments = [])
 * @method \Http\Promise\Promise upsertCollectionPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCollectionPolicy(array $arguments = [])
 * @method \Http\Promise\Promise deleteCollectionPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listCollectionPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listCollectionPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result getCollectionPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getCollectionPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result createSqlInstance(array $arguments = [])
 * @method \Http\Promise\Promise createSqlInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result updateSqlInstance(array $arguments = [])
 * @method \Http\Promise\Promise updateSqlInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getSqlInstance(array $arguments = [])
 * @method \Http\Promise\Promise getSqlInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result openSlsService(array $arguments = [])
 * @method \Http\Promise\Promise openSlsServiceAsync($arguments = [])
 * @method \Dew\Acs\Result getSlsService(array $arguments = [])
 * @method \Http\Promise\Promise getSlsServiceAsync($arguments = [])
 * @method \Dew\Acs\Result createTicket(array $arguments = [])
 * @method \Http\Promise\Promise createTicketAsync($arguments = [])
 * @method \Dew\Acs\Result refreshToken(array $arguments = [])
 * @method \Http\Promise\Promise refreshTokenAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 */
final class SlsClient extends AcsClient
{
    use ManagesLogs;
}
