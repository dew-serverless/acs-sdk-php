<?php

declare(strict_types=1);

namespace Dew\Acs\Oss;

use Dew\Acs\AcsClient;
use Dew\Acs\DocsStack;
use Dew\Acs\OpenApi\Api;
use Override;

/**
 * @method \Dew\Acs\Result listBuckets(array $arguments = [])
 * @method \Http\Promise\Promise listBucketsAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketStat(array $arguments = [])
 * @method \Http\Promise\Promise getBucketStatAsync($arguments = [])
 * @method \Dew\Acs\Result putBucket(array $arguments = [])
 * @method \Http\Promise\Promise putBucketAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucket(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketAsync($arguments = [])
 * @method \Dew\Acs\Result listObjects(array $arguments = [])
 * @method \Http\Promise\Promise listObjectsAsync($arguments = [])
 * @method \Dew\Acs\Result listObjectsV2(array $arguments = [])
 * @method \Http\Promise\Promise listObjectsV2Async($arguments = [])
 * @method \Dew\Acs\Result getBucketInfo(array $arguments = [])
 * @method \Http\Promise\Promise getBucketInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketLocation(array $arguments = [])
 * @method \Http\Promise\Promise getBucketLocationAsync($arguments = [])
 * @method \Dew\Acs\Result listAccessPoints(array $arguments = [])
 * @method \Http\Promise\Promise listAccessPointsAsync($arguments = [])
 * @method \Dew\Acs\Result getAccessPoint(array $arguments = [])
 * @method \Http\Promise\Promise getAccessPointAsync($arguments = [])
 * @method \Dew\Acs\Result getAccessPointPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getAccessPointPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccessPointPolicy(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccessPointPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result putAccessPointPolicy(array $arguments = [])
 * @method \Http\Promise\Promise putAccessPointPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccessPoint(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccessPointAsync($arguments = [])
 * @method \Dew\Acs\Result createAccessPoint(array $arguments = [])
 * @method \Http\Promise\Promise createAccessPointAsync($arguments = [])
 * @method \Dew\Acs\Result initiateBucketWorm(array $arguments = [])
 * @method \Http\Promise\Promise initiateBucketWormAsync($arguments = [])
 * @method \Dew\Acs\Result abortBucketWorm(array $arguments = [])
 * @method \Http\Promise\Promise abortBucketWormAsync($arguments = [])
 * @method \Dew\Acs\Result completeBucketWorm(array $arguments = [])
 * @method \Http\Promise\Promise completeBucketWormAsync($arguments = [])
 * @method \Dew\Acs\Result extendBucketWorm(array $arguments = [])
 * @method \Http\Promise\Promise extendBucketWormAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketWorm(array $arguments = [])
 * @method \Http\Promise\Promise getBucketWormAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketAcl(array $arguments = [])
 * @method \Http\Promise\Promise putBucketAclAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketAcl(array $arguments = [])
 * @method \Http\Promise\Promise getBucketAclAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketLifecycle(array $arguments = [])
 * @method \Http\Promise\Promise putBucketLifecycleAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketLifecycle(array $arguments = [])
 * @method \Http\Promise\Promise getBucketLifecycleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucketLifecycle(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketLifecycleAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketTransferAcceleration(array $arguments = [])
 * @method \Http\Promise\Promise putBucketTransferAccelerationAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketTransferAcceleration(array $arguments = [])
 * @method \Http\Promise\Promise getBucketTransferAccelerationAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketVersioning(array $arguments = [])
 * @method \Http\Promise\Promise putBucketVersioningAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketVersioning(array $arguments = [])
 * @method \Http\Promise\Promise getBucketVersioningAsync($arguments = [])
 * @method \Dew\Acs\Result listObjectVersions(array $arguments = [])
 * @method \Http\Promise\Promise listObjectVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketPolicy(array $arguments = [])
 * @method \Http\Promise\Promise putBucketPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getBucketPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucketPolicy(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketPolicyStatus(array $arguments = [])
 * @method \Http\Promise\Promise getBucketPolicyStatusAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketRtc(array $arguments = [])
 * @method \Http\Promise\Promise putBucketRtcAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketReplication(array $arguments = [])
 * @method \Http\Promise\Promise putBucketReplicationAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketReplication(array $arguments = [])
 * @method \Http\Promise\Promise getBucketReplicationAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketReplicationLocation(array $arguments = [])
 * @method \Http\Promise\Promise getBucketReplicationLocationAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketReplicationProgress(array $arguments = [])
 * @method \Http\Promise\Promise getBucketReplicationProgressAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucketReplication(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketReplicationAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketInventory(array $arguments = [])
 * @method \Http\Promise\Promise putBucketInventoryAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketInventory(array $arguments = [])
 * @method \Http\Promise\Promise getBucketInventoryAsync($arguments = [])
 * @method \Dew\Acs\Result listBucketInventory(array $arguments = [])
 * @method \Http\Promise\Promise listBucketInventoryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucketInventory(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketInventoryAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketLogging(array $arguments = [])
 * @method \Http\Promise\Promise putBucketLoggingAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketLogging(array $arguments = [])
 * @method \Http\Promise\Promise getBucketLoggingAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucketLogging(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketLoggingAsync($arguments = [])
 * @method \Dew\Acs\Result putUserDefinedLogFieldsConfig(array $arguments = [])
 * @method \Http\Promise\Promise putUserDefinedLogFieldsConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getUserDefinedLogFieldsConfig(array $arguments = [])
 * @method \Http\Promise\Promise getUserDefinedLogFieldsConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserDefinedLogFieldsConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserDefinedLogFieldsConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketWebsite(array $arguments = [])
 * @method \Http\Promise\Promise getBucketWebsiteAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketWebsite(array $arguments = [])
 * @method \Http\Promise\Promise putBucketWebsiteAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucketWebsite(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketWebsiteAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketReferer(array $arguments = [])
 * @method \Http\Promise\Promise putBucketRefererAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketReferer(array $arguments = [])
 * @method \Http\Promise\Promise getBucketRefererAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketTags(array $arguments = [])
 * @method \Http\Promise\Promise putBucketTagsAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketTags(array $arguments = [])
 * @method \Http\Promise\Promise getBucketTagsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucketTags(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketTagsAsync($arguments = [])
 * @method \Dew\Acs\Result listBucketDataRedundancyTransition(array $arguments = [])
 * @method \Http\Promise\Promise listBucketDataRedundancyTransitionAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketDataRedundancyTransition(array $arguments = [])
 * @method \Http\Promise\Promise getBucketDataRedundancyTransitionAsync($arguments = [])
 * @method \Dew\Acs\Result createBucketDataRedundancyTransition(array $arguments = [])
 * @method \Http\Promise\Promise createBucketDataRedundancyTransitionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucketDataRedundancyTransition(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketDataRedundancyTransitionAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketEncryption(array $arguments = [])
 * @method \Http\Promise\Promise putBucketEncryptionAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketEncryption(array $arguments = [])
 * @method \Http\Promise\Promise getBucketEncryptionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucketEncryption(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketEncryptionAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketRequestPayment(array $arguments = [])
 * @method \Http\Promise\Promise putBucketRequestPaymentAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketRequestPayment(array $arguments = [])
 * @method \Http\Promise\Promise getBucketRequestPaymentAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketCors(array $arguments = [])
 * @method \Http\Promise\Promise putBucketCorsAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketCors(array $arguments = [])
 * @method \Http\Promise\Promise getBucketCorsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucketCors(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketCorsAsync($arguments = [])
 * @method \Dew\Acs\Result optionObject(array $arguments = [])
 * @method \Http\Promise\Promise optionObjectAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketAccessMonitor(array $arguments = [])
 * @method \Http\Promise\Promise putBucketAccessMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketAccessMonitor(array $arguments = [])
 * @method \Http\Promise\Promise getBucketAccessMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result getMetaQueryStatus(array $arguments = [])
 * @method \Http\Promise\Promise getMetaQueryStatusAsync($arguments = [])
 * @method \Dew\Acs\Result closeMetaQuery(array $arguments = [])
 * @method \Http\Promise\Promise closeMetaQueryAsync($arguments = [])
 * @method \Dew\Acs\Result doMetaQuery(array $arguments = [])
 * @method \Http\Promise\Promise doMetaQueryAsync($arguments = [])
 * @method \Dew\Acs\Result openMetaQuery(array $arguments = [])
 * @method \Http\Promise\Promise openMetaQueryAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserAntiDDosInfo(array $arguments = [])
 * @method \Http\Promise\Promise updateUserAntiDDosInfoAsync($arguments = [])
 * @method \Dew\Acs\Result updateBucketAntiDDosInfo(array $arguments = [])
 * @method \Http\Promise\Promise updateBucketAntiDDosInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listBucketAntiDDosInfo(array $arguments = [])
 * @method \Http\Promise\Promise listBucketAntiDDosInfoAsync($arguments = [])
 * @method \Dew\Acs\Result initUserAntiDDosInfo(array $arguments = [])
 * @method \Http\Promise\Promise initUserAntiDDosInfoAsync($arguments = [])
 * @method \Dew\Acs\Result initBucketAntiDDosInfo(array $arguments = [])
 * @method \Http\Promise\Promise initBucketAntiDDosInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getUserAntiDDosInfo(array $arguments = [])
 * @method \Http\Promise\Promise getUserAntiDDosInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise getBucketResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise putBucketResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result putCname(array $arguments = [])
 * @method \Http\Promise\Promise putCnameAsync($arguments = [])
 * @method \Dew\Acs\Result listCname(array $arguments = [])
 * @method \Http\Promise\Promise listCnameAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCname(array $arguments = [])
 * @method \Http\Promise\Promise deleteCnameAsync($arguments = [])
 * @method \Dew\Acs\Result getCnameToken(array $arguments = [])
 * @method \Http\Promise\Promise getCnameTokenAsync($arguments = [])
 * @method \Dew\Acs\Result createCnameToken(array $arguments = [])
 * @method \Http\Promise\Promise createCnameTokenAsync($arguments = [])
 * @method \Dew\Acs\Result putStyle(array $arguments = [])
 * @method \Http\Promise\Promise putStyleAsync($arguments = [])
 * @method \Dew\Acs\Result listStyle(array $arguments = [])
 * @method \Http\Promise\Promise listStyleAsync($arguments = [])
 * @method \Dew\Acs\Result getStyle(array $arguments = [])
 * @method \Http\Promise\Promise getStyleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteStyle(array $arguments = [])
 * @method \Http\Promise\Promise deleteStyleAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketHttpsConfig(array $arguments = [])
 * @method \Http\Promise\Promise getBucketHttpsConfigAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketHttpsConfig(array $arguments = [])
 * @method \Http\Promise\Promise putBucketHttpsConfigAsync($arguments = [])
 * @method \Dew\Acs\Result createAccessPointForObjectProcess(array $arguments = [])
 * @method \Http\Promise\Promise createAccessPointForObjectProcessAsync($arguments = [])
 * @method \Dew\Acs\Result getAccessPointForObjectProcess(array $arguments = [])
 * @method \Http\Promise\Promise getAccessPointForObjectProcessAsync($arguments = [])
 * @method \Dew\Acs\Result listAccessPointsForObjectProcess(array $arguments = [])
 * @method \Http\Promise\Promise listAccessPointsForObjectProcessAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccessPointForObjectProcess(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccessPointForObjectProcessAsync($arguments = [])
 * @method \Dew\Acs\Result getAccessPointConfigForObjectProcess(array $arguments = [])
 * @method \Http\Promise\Promise getAccessPointConfigForObjectProcessAsync($arguments = [])
 * @method \Dew\Acs\Result putAccessPointConfigForObjectProcess(array $arguments = [])
 * @method \Http\Promise\Promise putAccessPointConfigForObjectProcessAsync($arguments = [])
 * @method \Dew\Acs\Result putAccessPointPolicyForObjectProcess(array $arguments = [])
 * @method \Http\Promise\Promise putAccessPointPolicyForObjectProcessAsync($arguments = [])
 * @method \Dew\Acs\Result getAccessPointPolicyForObjectProcess(array $arguments = [])
 * @method \Http\Promise\Promise getAccessPointPolicyForObjectProcessAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccessPointPolicyForObjectProcess(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccessPointPolicyForObjectProcessAsync($arguments = [])
 * @method \Dew\Acs\Result getPublicAccessBlock(array $arguments = [])
 * @method \Http\Promise\Promise getPublicAccessBlockAsync($arguments = [])
 * @method \Dew\Acs\Result putPublicAccessBlock(array $arguments = [])
 * @method \Http\Promise\Promise putPublicAccessBlockAsync($arguments = [])
 * @method \Dew\Acs\Result deletePublicAccessBlock(array $arguments = [])
 * @method \Http\Promise\Promise deletePublicAccessBlockAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketPublicAccessBlock(array $arguments = [])
 * @method \Http\Promise\Promise getBucketPublicAccessBlockAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketPublicAccessBlock(array $arguments = [])
 * @method \Http\Promise\Promise putBucketPublicAccessBlockAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBucketPublicAccessBlock(array $arguments = [])
 * @method \Http\Promise\Promise deleteBucketPublicAccessBlockAsync($arguments = [])
 * @method \Dew\Acs\Result getAccessPointPublicAccessBlock(array $arguments = [])
 * @method \Http\Promise\Promise getAccessPointPublicAccessBlockAsync($arguments = [])
 * @method \Dew\Acs\Result putAccessPointPublicAccessBlock(array $arguments = [])
 * @method \Http\Promise\Promise putAccessPointPublicAccessBlockAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccessPointPublicAccessBlock(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccessPointPublicAccessBlockAsync($arguments = [])
 * @method \Dew\Acs\Result getBucketArchiveDirectRead(array $arguments = [])
 * @method \Http\Promise\Promise getBucketArchiveDirectReadAsync($arguments = [])
 * @method \Dew\Acs\Result putBucketArchiveDirectRead(array $arguments = [])
 * @method \Http\Promise\Promise putBucketArchiveDirectReadAsync($arguments = [])
 * @method \Dew\Acs\Result putObject(array $arguments = [])
 * @method \Http\Promise\Promise putObjectAsync($arguments = [])
 * @method \Dew\Acs\Result copyObject(array $arguments = [])
 * @method \Http\Promise\Promise copyObjectAsync($arguments = [])
 * @method \Dew\Acs\Result getObject(array $arguments = [])
 * @method \Http\Promise\Promise getObjectAsync($arguments = [])
 * @method \Dew\Acs\Result appendObject(array $arguments = [])
 * @method \Http\Promise\Promise appendObjectAsync($arguments = [])
 * @method \Dew\Acs\Result deleteObject(array $arguments = [])
 * @method \Http\Promise\Promise deleteObjectAsync($arguments = [])
 * @method \Dew\Acs\Result headObject(array $arguments = [])
 * @method \Http\Promise\Promise headObjectAsync($arguments = [])
 * @method \Dew\Acs\Result getObjectMeta(array $arguments = [])
 * @method \Http\Promise\Promise getObjectMetaAsync($arguments = [])
 * @method \Dew\Acs\Result restoreObject(array $arguments = [])
 * @method \Http\Promise\Promise restoreObjectAsync($arguments = [])
 * @method \Dew\Acs\Result cleanRestoredObject(array $arguments = [])
 * @method \Http\Promise\Promise cleanRestoredObjectAsync($arguments = [])
 * @method \Dew\Acs\Result selectObject(array $arguments = [])
 * @method \Http\Promise\Promise selectObjectAsync($arguments = [])
 * @method \Dew\Acs\Result createSelectObjectMeta(array $arguments = [])
 * @method \Http\Promise\Promise createSelectObjectMetaAsync($arguments = [])
 * @method \Dew\Acs\Result initiateMultipartUpload(array $arguments = [])
 * @method \Http\Promise\Promise initiateMultipartUploadAsync($arguments = [])
 * @method \Dew\Acs\Result uploadPart(array $arguments = [])
 * @method \Http\Promise\Promise uploadPartAsync($arguments = [])
 * @method \Dew\Acs\Result completeMultipartUpload(array $arguments = [])
 * @method \Http\Promise\Promise completeMultipartUploadAsync($arguments = [])
 * @method \Dew\Acs\Result uploadPartCopy(array $arguments = [])
 * @method \Http\Promise\Promise uploadPartCopyAsync($arguments = [])
 * @method \Dew\Acs\Result abortMultipartUpload(array $arguments = [])
 * @method \Http\Promise\Promise abortMultipartUploadAsync($arguments = [])
 * @method \Dew\Acs\Result listMultipartUploads(array $arguments = [])
 * @method \Http\Promise\Promise listMultipartUploadsAsync($arguments = [])
 * @method \Dew\Acs\Result listParts(array $arguments = [])
 * @method \Http\Promise\Promise listPartsAsync($arguments = [])
 * @method \Dew\Acs\Result putObjectAcl(array $arguments = [])
 * @method \Http\Promise\Promise putObjectAclAsync($arguments = [])
 * @method \Dew\Acs\Result getObjectAcl(array $arguments = [])
 * @method \Http\Promise\Promise getObjectAclAsync($arguments = [])
 * @method \Dew\Acs\Result putSymlink(array $arguments = [])
 * @method \Http\Promise\Promise putSymlinkAsync($arguments = [])
 * @method \Dew\Acs\Result getSymlink(array $arguments = [])
 * @method \Http\Promise\Promise getSymlinkAsync($arguments = [])
 * @method \Dew\Acs\Result putObjectTagging(array $arguments = [])
 * @method \Http\Promise\Promise putObjectTaggingAsync($arguments = [])
 * @method \Dew\Acs\Result getObjectTagging(array $arguments = [])
 * @method \Http\Promise\Promise getObjectTaggingAsync($arguments = [])
 * @method \Dew\Acs\Result deleteObjectTagging(array $arguments = [])
 * @method \Http\Promise\Promise deleteObjectTaggingAsync($arguments = [])
 * @method \Dew\Acs\Result putLiveChannel(array $arguments = [])
 * @method \Http\Promise\Promise putLiveChannelAsync($arguments = [])
 * @method \Dew\Acs\Result listLiveChannel(array $arguments = [])
 * @method \Http\Promise\Promise listLiveChannelAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLiveChannel(array $arguments = [])
 * @method \Http\Promise\Promise deleteLiveChannelAsync($arguments = [])
 * @method \Dew\Acs\Result putLiveChannelStatus(array $arguments = [])
 * @method \Http\Promise\Promise putLiveChannelStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getLiveChannelInfo(array $arguments = [])
 * @method \Http\Promise\Promise getLiveChannelInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getLiveChannelHistory(array $arguments = [])
 * @method \Http\Promise\Promise getLiveChannelHistoryAsync($arguments = [])
 * @method \Dew\Acs\Result getLiveChannelStat(array $arguments = [])
 * @method \Http\Promise\Promise getLiveChannelStatAsync($arguments = [])
 * @method \Dew\Acs\Result getVodPlaylist(array $arguments = [])
 * @method \Http\Promise\Promise getVodPlaylistAsync($arguments = [])
 * @method \Dew\Acs\Result postVodPlaylist(array $arguments = [])
 * @method \Http\Promise\Promise postVodPlaylistAsync($arguments = [])
 */
final class OssClient extends AcsClient
{
    public function urlToDownload(string $bucket, string $object, int $expires = 900): string
    {
        return $this->signUrl('GET', $bucket, $object, $expires);
    }

    /**
     * @param  array<string, string>  $headers
     */
    public function urlToUpload(string $bucket, string $object, int $expires = 900, array $headers = []): string
    {
        return $this->signUrl('PUT', $bucket, $object, $expires, $headers);
    }

    /**
     * @param  'GET'|'PUT'  $method
     * @param  array<string, string>  $headers
     */
    private function signUrl(string $method, string $bucket, string $key, int $expires, array $headers = []): string
    {
        $request = $this->requestFactory->createRequest(
            $method, $this->uriFactory->createUri(sprintf('https://%s.%s/%s',
                $bucket, $this->endpoint, $key
            ))
        );

        if ($headers !== []) {
            foreach ($headers as $name => $value) {
                $request = $request->withHeader($name, $value);
            }
        }

        $signer = new V4SignatureOnUrl();
        $signer->setArguments([
            'bucket' => $bucket,
            'key' => $key,
            'expires' => $expires,
        ]);

        $request = $signer->signRequest($request, $this->config);

        return (string) $request->getUri();
    }

    /**
     * {@inheritDoc}
     */
    #[Override]
    protected function newDocsStack(Api $api, array $arguments): DocsStack
    {
        return parent::newDocsStack($api, $arguments)
            ->signing(new EnsureContentLengthExists());
    }
}
