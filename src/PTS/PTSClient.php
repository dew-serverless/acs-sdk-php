<?php

declare(strict_types=1);

namespace Dew\Acs\PTS;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createPtsSceneBaseLineFromReport(array $arguments = [])
 * @method \Http\Promise\Promise createPtsSceneBaseLineFromReportAsync($arguments = [])
 * @method \Dew\Acs\Result deletePtsSceneBaseLine(array $arguments = [])
 * @method \Http\Promise\Promise deletePtsSceneBaseLineAsync($arguments = [])
 * @method \Dew\Acs\Result updatePtsSceneBaseLine(array $arguments = [])
 * @method \Http\Promise\Promise updatePtsSceneBaseLineAsync($arguments = [])
 * @method \Dew\Acs\Result getPtsSceneBaseLine(array $arguments = [])
 * @method \Http\Promise\Promise getPtsSceneBaseLineAsync($arguments = [])
 * @method \Dew\Acs\Result listPtsReports(array $arguments = [])
 * @method \Http\Promise\Promise listPtsReportsAsync($arguments = [])
 * @method \Dew\Acs\Result getPtsReportDetails(array $arguments = [])
 * @method \Http\Promise\Promise getPtsReportDetailsAsync($arguments = [])
 * @method \Dew\Acs\Result getPtsReportsBySceneId(array $arguments = [])
 * @method \Http\Promise\Promise getPtsReportsBySceneIdAsync($arguments = [])
 * @method \Dew\Acs\Result getPtsDebugSampleLogs(array $arguments = [])
 * @method \Http\Promise\Promise getPtsDebugSampleLogsAsync($arguments = [])
 * @method \Dew\Acs\Result startDebugPtsScene(array $arguments = [])
 * @method \Http\Promise\Promise startDebugPtsSceneAsync($arguments = [])
 * @method \Dew\Acs\Result startPtsScene(array $arguments = [])
 * @method \Http\Promise\Promise startPtsSceneAsync($arguments = [])
 * @method \Dew\Acs\Result stopDebugPtsScene(array $arguments = [])
 * @method \Http\Promise\Promise stopDebugPtsSceneAsync($arguments = [])
 * @method \Dew\Acs\Result stopPtsScene(array $arguments = [])
 * @method \Http\Promise\Promise stopPtsSceneAsync($arguments = [])
 * @method \Dew\Acs\Result getPtsSceneRunningData(array $arguments = [])
 * @method \Http\Promise\Promise getPtsSceneRunningDataAsync($arguments = [])
 * @method \Dew\Acs\Result getPtsSceneRunningStatus(array $arguments = [])
 * @method \Http\Promise\Promise getPtsSceneRunningStatusAsync($arguments = [])
 * @method \Dew\Acs\Result adjustPtsSceneSpeed(array $arguments = [])
 * @method \Http\Promise\Promise adjustPtsSceneSpeedAsync($arguments = [])
 * @method \Dew\Acs\Result createPtsScene(array $arguments = [])
 * @method \Http\Promise\Promise createPtsSceneAsync($arguments = [])
 * @method \Dew\Acs\Result savePtsScene(array $arguments = [])
 * @method \Http\Promise\Promise savePtsSceneAsync($arguments = [])
 * @method \Dew\Acs\Result deletePtsScene(array $arguments = [])
 * @method \Http\Promise\Promise deletePtsSceneAsync($arguments = [])
 * @method \Dew\Acs\Result deletePtsScenes(array $arguments = [])
 * @method \Http\Promise\Promise deletePtsScenesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyPtsScene(array $arguments = [])
 * @method \Http\Promise\Promise modifyPtsSceneAsync($arguments = [])
 * @method \Dew\Acs\Result getPtsScene(array $arguments = [])
 * @method \Http\Promise\Promise getPtsSceneAsync($arguments = [])
 * @method \Dew\Acs\Result listPtsScene(array $arguments = [])
 * @method \Http\Promise\Promise listPtsSceneAsync($arguments = [])
 * @method \Dew\Acs\Result getJMeterReportDetails(array $arguments = [])
 * @method \Http\Promise\Promise getJMeterReportDetailsAsync($arguments = [])
 * @method \Dew\Acs\Result getJMeterLogs(array $arguments = [])
 * @method \Http\Promise\Promise getJMeterLogsAsync($arguments = [])
 * @method \Dew\Acs\Result getJMeterSampleMetrics(array $arguments = [])
 * @method \Http\Promise\Promise getJMeterSampleMetricsAsync($arguments = [])
 * @method \Dew\Acs\Result getJMeterSamplingLogs(array $arguments = [])
 * @method \Http\Promise\Promise getJMeterSamplingLogsAsync($arguments = [])
 * @method \Dew\Acs\Result listJMeterReports(array $arguments = [])
 * @method \Http\Promise\Promise listJMeterReportsAsync($arguments = [])
 * @method \Dew\Acs\Result startDebuggingJMeterScene(array $arguments = [])
 * @method \Http\Promise\Promise startDebuggingJMeterSceneAsync($arguments = [])
 * @method \Dew\Acs\Result startTestingJMeterScene(array $arguments = [])
 * @method \Http\Promise\Promise startTestingJMeterSceneAsync($arguments = [])
 * @method \Dew\Acs\Result stopDebuggingJMeterScene(array $arguments = [])
 * @method \Http\Promise\Promise stopDebuggingJMeterSceneAsync($arguments = [])
 * @method \Dew\Acs\Result stopTestingJMeterScene(array $arguments = [])
 * @method \Http\Promise\Promise stopTestingJMeterSceneAsync($arguments = [])
 * @method \Dew\Acs\Result getJMeterSceneRunningData(array $arguments = [])
 * @method \Http\Promise\Promise getJMeterSceneRunningDataAsync($arguments = [])
 * @method \Dew\Acs\Result adjustJMeterSceneSpeed(array $arguments = [])
 * @method \Http\Promise\Promise adjustJMeterSceneSpeedAsync($arguments = [])
 * @method \Dew\Acs\Result removeOpenJMeterScene(array $arguments = [])
 * @method \Http\Promise\Promise removeOpenJMeterSceneAsync($arguments = [])
 * @method \Dew\Acs\Result saveOpenJMeterScene(array $arguments = [])
 * @method \Http\Promise\Promise saveOpenJMeterSceneAsync($arguments = [])
 * @method \Dew\Acs\Result getOpenJMeterScene(array $arguments = [])
 * @method \Http\Promise\Promise getOpenJMeterSceneAsync($arguments = [])
 * @method \Dew\Acs\Result listOpenJMeterScenes(array $arguments = [])
 * @method \Http\Promise\Promise listOpenJMeterScenesAsync($arguments = [])
 * @method \Dew\Acs\Result removeEnv(array $arguments = [])
 * @method \Http\Promise\Promise removeEnvAsync($arguments = [])
 * @method \Dew\Acs\Result saveEnv(array $arguments = [])
 * @method \Http\Promise\Promise saveEnvAsync($arguments = [])
 * @method \Dew\Acs\Result listEnvs(array $arguments = [])
 * @method \Http\Promise\Promise listEnvsAsync($arguments = [])
 * @method \Dew\Acs\Result getAllRegions(array $arguments = [])
 * @method \Http\Promise\Promise getAllRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result getUserVpcs(array $arguments = [])
 * @method \Http\Promise\Promise getUserVpcsAsync($arguments = [])
 * @method \Dew\Acs\Result getUserVpcSecurityGroup(array $arguments = [])
 * @method \Http\Promise\Promise getUserVpcSecurityGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getUserVpcVSwitch(array $arguments = [])
 * @method \Http\Promise\Promise getUserVpcVSwitchAsync($arguments = [])
 */
final class PTSClient extends AcsClient
{
    //
}
