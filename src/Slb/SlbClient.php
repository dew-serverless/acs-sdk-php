<?php

declare(strict_types=1);

namespace Dew\Acs\Slb;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result describeAvailableResource(array $arguments = [])
 * @method \Http\Promise\Promise describeAvailableResourceAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeZones(array $arguments = [])
 * @method \Http\Promise\Promise describeZonesAsync($arguments = [])
 * @method \Dew\Acs\Result createLoadBalancer(array $arguments = [])
 * @method \Http\Promise\Promise createLoadBalancerAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLoadBalancer(array $arguments = [])
 * @method \Http\Promise\Promise deleteLoadBalancerAsync($arguments = [])
 * @method \Dew\Acs\Result modifyLoadBalancerInstanceSpec(array $arguments = [])
 * @method \Http\Promise\Promise modifyLoadBalancerInstanceSpecAsync($arguments = [])
 * @method \Dew\Acs\Result modifyLoadBalancerInternetSpec(array $arguments = [])
 * @method \Http\Promise\Promise modifyLoadBalancerInternetSpecAsync($arguments = [])
 * @method \Dew\Acs\Result modifyLoadBalancerPayType(array $arguments = [])
 * @method \Http\Promise\Promise modifyLoadBalancerPayTypeAsync($arguments = [])
 * @method \Dew\Acs\Result setLoadBalancerDeleteProtection(array $arguments = [])
 * @method \Http\Promise\Promise setLoadBalancerDeleteProtectionAsync($arguments = [])
 * @method \Dew\Acs\Result setLoadBalancerModificationProtection(array $arguments = [])
 * @method \Http\Promise\Promise setLoadBalancerModificationProtectionAsync($arguments = [])
 * @method \Dew\Acs\Result setLoadBalancerName(array $arguments = [])
 * @method \Http\Promise\Promise setLoadBalancerNameAsync($arguments = [])
 * @method \Dew\Acs\Result setLoadBalancerStatus(array $arguments = [])
 * @method \Http\Promise\Promise setLoadBalancerStatusAsync($arguments = [])
 * @method \Dew\Acs\Result modifyLoadBalancerInstanceChargeType(array $arguments = [])
 * @method \Http\Promise\Promise modifyLoadBalancerInstanceChargeTypeAsync($arguments = [])
 * @method \Dew\Acs\Result describeLoadBalancerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeLoadBalancerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeLoadBalancers(array $arguments = [])
 * @method \Http\Promise\Promise describeLoadBalancersAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLoadBalancerListener(array $arguments = [])
 * @method \Http\Promise\Promise deleteLoadBalancerListenerAsync($arguments = [])
 * @method \Dew\Acs\Result startLoadBalancerListener(array $arguments = [])
 * @method \Http\Promise\Promise startLoadBalancerListenerAsync($arguments = [])
 * @method \Dew\Acs\Result stopLoadBalancerListener(array $arguments = [])
 * @method \Http\Promise\Promise stopLoadBalancerListenerAsync($arguments = [])
 * @method \Dew\Acs\Result describeLoadBalancerListeners(array $arguments = [])
 * @method \Http\Promise\Promise describeLoadBalancerListenersAsync($arguments = [])
 * @method \Dew\Acs\Result createLoadBalancerTCPListener(array $arguments = [])
 * @method \Http\Promise\Promise createLoadBalancerTCPListenerAsync($arguments = [])
 * @method \Dew\Acs\Result setLoadBalancerTCPListenerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise setLoadBalancerTCPListenerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeLoadBalancerTCPListenerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeLoadBalancerTCPListenerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result createLoadBalancerUDPListener(array $arguments = [])
 * @method \Http\Promise\Promise createLoadBalancerUDPListenerAsync($arguments = [])
 * @method \Dew\Acs\Result setLoadBalancerUDPListenerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise setLoadBalancerUDPListenerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeLoadBalancerUDPListenerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeLoadBalancerUDPListenerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result createLoadBalancerHTTPListener(array $arguments = [])
 * @method \Http\Promise\Promise createLoadBalancerHTTPListenerAsync($arguments = [])
 * @method \Dew\Acs\Result setLoadBalancerHTTPListenerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise setLoadBalancerHTTPListenerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeLoadBalancerHTTPListenerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeLoadBalancerHTTPListenerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result createLoadBalancerHTTPSListener(array $arguments = [])
 * @method \Http\Promise\Promise createLoadBalancerHTTPSListenerAsync($arguments = [])
 * @method \Dew\Acs\Result setLoadBalancerHTTPSListenerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise setLoadBalancerHTTPSListenerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeLoadBalancerHTTPSListenerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeLoadBalancerHTTPSListenerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result createRules(array $arguments = [])
 * @method \Http\Promise\Promise createRulesAsync($arguments = [])
 * @method \Dew\Acs\Result setRule(array $arguments = [])
 * @method \Http\Promise\Promise setRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRules(array $arguments = [])
 * @method \Http\Promise\Promise deleteRulesAsync($arguments = [])
 * @method \Dew\Acs\Result describeRuleAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeRuleAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeRules(array $arguments = [])
 * @method \Http\Promise\Promise describeRulesAsync($arguments = [])
 * @method \Dew\Acs\Result addBackendServers(array $arguments = [])
 * @method \Http\Promise\Promise addBackendServersAsync($arguments = [])
 * @method \Dew\Acs\Result describeHealthStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeHealthStatusAsync($arguments = [])
 * @method \Dew\Acs\Result removeBackendServers(array $arguments = [])
 * @method \Http\Promise\Promise removeBackendServersAsync($arguments = [])
 * @method \Dew\Acs\Result setBackendServers(array $arguments = [])
 * @method \Http\Promise\Promise setBackendServersAsync($arguments = [])
 * @method \Dew\Acs\Result createVServerGroup(array $arguments = [])
 * @method \Http\Promise\Promise createVServerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVServerGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteVServerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result setVServerGroupAttribute(array $arguments = [])
 * @method \Http\Promise\Promise setVServerGroupAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeVServerGroups(array $arguments = [])
 * @method \Http\Promise\Promise describeVServerGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeVServerGroupAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeVServerGroupAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result addVServerGroupBackendServers(array $arguments = [])
 * @method \Http\Promise\Promise addVServerGroupBackendServersAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVServerGroupBackendServers(array $arguments = [])
 * @method \Http\Promise\Promise modifyVServerGroupBackendServersAsync($arguments = [])
 * @method \Dew\Acs\Result removeVServerGroupBackendServers(array $arguments = [])
 * @method \Http\Promise\Promise removeVServerGroupBackendServersAsync($arguments = [])
 * @method \Dew\Acs\Result createMasterSlaveServerGroup(array $arguments = [])
 * @method \Http\Promise\Promise createMasterSlaveServerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteMasterSlaveServerGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteMasterSlaveServerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeMasterSlaveServerGroupAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeMasterSlaveServerGroupAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeMasterSlaveServerGroups(array $arguments = [])
 * @method \Http\Promise\Promise describeMasterSlaveServerGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCACertificate(array $arguments = [])
 * @method \Http\Promise\Promise deleteCACertificateAsync($arguments = [])
 * @method \Dew\Acs\Result deleteServerCertificate(array $arguments = [])
 * @method \Http\Promise\Promise deleteServerCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result setCACertificateName(array $arguments = [])
 * @method \Http\Promise\Promise setCACertificateNameAsync($arguments = [])
 * @method \Dew\Acs\Result setServerCertificateName(array $arguments = [])
 * @method \Http\Promise\Promise setServerCertificateNameAsync($arguments = [])
 * @method \Dew\Acs\Result describeCACertificates(array $arguments = [])
 * @method \Http\Promise\Promise describeCACertificatesAsync($arguments = [])
 * @method \Dew\Acs\Result describeServerCertificates(array $arguments = [])
 * @method \Http\Promise\Promise describeServerCertificatesAsync($arguments = [])
 * @method \Dew\Acs\Result uploadCACertificate(array $arguments = [])
 * @method \Http\Promise\Promise uploadCACertificateAsync($arguments = [])
 * @method \Dew\Acs\Result uploadServerCertificate(array $arguments = [])
 * @method \Http\Promise\Promise uploadServerCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result createDomainExtension(array $arguments = [])
 * @method \Http\Promise\Promise createDomainExtensionAsync($arguments = [])
 * @method \Dew\Acs\Result setDomainExtensionAttribute(array $arguments = [])
 * @method \Http\Promise\Promise setDomainExtensionAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDomainExtension(array $arguments = [])
 * @method \Http\Promise\Promise deleteDomainExtensionAsync($arguments = [])
 * @method \Dew\Acs\Result describeDomainExtensionAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeDomainExtensionAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeDomainExtensions(array $arguments = [])
 * @method \Http\Promise\Promise describeDomainExtensionsAsync($arguments = [])
 * @method \Dew\Acs\Result createTLSCipherPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createTLSCipherPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTLSCipherPolicy(array $arguments = [])
 * @method \Http\Promise\Promise deleteTLSCipherPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result setTLSCipherPolicyAttribute(array $arguments = [])
 * @method \Http\Promise\Promise setTLSCipherPolicyAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listTLSCipherPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listTLSCipherPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result createAccessControlList(array $arguments = [])
 * @method \Http\Promise\Promise createAccessControlListAsync($arguments = [])
 * @method \Dew\Acs\Result addAccessControlListEntry(array $arguments = [])
 * @method \Http\Promise\Promise addAccessControlListEntryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccessControlList(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccessControlListAsync($arguments = [])
 * @method \Dew\Acs\Result setAccessControlListAttribute(array $arguments = [])
 * @method \Http\Promise\Promise setAccessControlListAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeAccessControlListAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeAccessControlListAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeAccessControlLists(array $arguments = [])
 * @method \Http\Promise\Promise describeAccessControlListsAsync($arguments = [])
 * @method \Dew\Acs\Result removeAccessControlListEntry(array $arguments = [])
 * @method \Http\Promise\Promise removeAccessControlListEntryAsync($arguments = [])
 * @method \Dew\Acs\Result setListenerAccessControlStatus(array $arguments = [])
 * @method \Http\Promise\Promise setListenerAccessControlStatusAsync($arguments = [])
 * @method \Dew\Acs\Result removeListenerWhiteListItem(array $arguments = [])
 * @method \Http\Promise\Promise removeListenerWhiteListItemAsync($arguments = [])
 * @method \Dew\Acs\Result addListenerWhiteListItem(array $arguments = [])
 * @method \Http\Promise\Promise addListenerWhiteListItemAsync($arguments = [])
 * @method \Dew\Acs\Result describeListenerAccessControlAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeListenerAccessControlAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result addTags(array $arguments = [])
 * @method \Http\Promise\Promise addTagsAsync($arguments = [])
 * @method \Dew\Acs\Result describeTags(array $arguments = [])
 * @method \Http\Promise\Promise describeTagsAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result removeTags(array $arguments = [])
 * @method \Http\Promise\Promise removeTagsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccessLogsDownloadAttribute(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccessLogsDownloadAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result setAccessLogsDownloadAttribute(array $arguments = [])
 * @method \Http\Promise\Promise setAccessLogsDownloadAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeAccessLogsDownloadAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeAccessLogsDownloadAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result enableHighDefinationMonitor(array $arguments = [])
 * @method \Http\Promise\Promise enableHighDefinationMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result modifyHighDefinationMonitor(array $arguments = [])
 * @method \Http\Promise\Promise modifyHighDefinationMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result describeHighDefinationMonitor(array $arguments = [])
 * @method \Http\Promise\Promise describeHighDefinationMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result moveResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise moveResourceGroupAsync($arguments = [])
 */
final class SlbClient extends AcsClient
{
    //
}
