<?php

declare(strict_types=1);

namespace Dew\Acs\Ess;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createScalingGroup(array $arguments = [])
 * @method \Http\Promise\Promise createScalingGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScalingGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteScalingGroupAsync($arguments = [])
 * @method \Dew\Acs\Result modifyScalingGroup(array $arguments = [])
 * @method \Http\Promise\Promise modifyScalingGroupAsync($arguments = [])
 * @method \Dew\Acs\Result enableScalingGroup(array $arguments = [])
 * @method \Http\Promise\Promise enableScalingGroupAsync($arguments = [])
 * @method \Dew\Acs\Result disableScalingGroup(array $arguments = [])
 * @method \Http\Promise\Promise disableScalingGroupAsync($arguments = [])
 * @method \Dew\Acs\Result setGroupDeletionProtection(array $arguments = [])
 * @method \Http\Promise\Promise setGroupDeletionProtectionAsync($arguments = [])
 * @method \Dew\Acs\Result attachLoadBalancers(array $arguments = [])
 * @method \Http\Promise\Promise attachLoadBalancersAsync($arguments = [])
 * @method \Dew\Acs\Result detachLoadBalancers(array $arguments = [])
 * @method \Http\Promise\Promise detachLoadBalancersAsync($arguments = [])
 * @method \Dew\Acs\Result detachDBInstances(array $arguments = [])
 * @method \Http\Promise\Promise detachDBInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result attachDBInstances(array $arguments = [])
 * @method \Http\Promise\Promise attachDBInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result attachVServerGroups(array $arguments = [])
 * @method \Http\Promise\Promise attachVServerGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result detachVServerGroups(array $arguments = [])
 * @method \Http\Promise\Promise detachVServerGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeScalingGroups(array $arguments = [])
 * @method \Http\Promise\Promise describeScalingGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeScalingInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeScalingInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result describeScalingActivities(array $arguments = [])
 * @method \Http\Promise\Promise describeScalingActivitiesAsync($arguments = [])
 * @method \Dew\Acs\Result describeScalingActivityDetail(array $arguments = [])
 * @method \Http\Promise\Promise describeScalingActivityDetailAsync($arguments = [])
 * @method \Dew\Acs\Result describeLimitation(array $arguments = [])
 * @method \Http\Promise\Promise describeLimitationAsync($arguments = [])
 * @method \Dew\Acs\Result verifyAuthentication(array $arguments = [])
 * @method \Http\Promise\Promise verifyAuthenticationAsync($arguments = [])
 * @method \Dew\Acs\Result suspendProcesses(array $arguments = [])
 * @method \Http\Promise\Promise suspendProcessesAsync($arguments = [])
 * @method \Dew\Acs\Result resumeProcesses(array $arguments = [])
 * @method \Http\Promise\Promise resumeProcessesAsync($arguments = [])
 * @method \Dew\Acs\Result verifyUser(array $arguments = [])
 * @method \Http\Promise\Promise verifyUserAsync($arguments = [])
 * @method \Dew\Acs\Result createScalingConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise createScalingConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScalingConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise deleteScalingConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result modifyScalingConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise modifyScalingConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result describeScalingConfigurations(array $arguments = [])
 * @method \Http\Promise\Promise describeScalingConfigurationsAsync($arguments = [])
 * @method \Dew\Acs\Result deactivateScalingConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise deactivateScalingConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result createScalingRule(array $arguments = [])
 * @method \Http\Promise\Promise createScalingRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScalingRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteScalingRuleAsync($arguments = [])
 * @method \Dew\Acs\Result modifyScalingRule(array $arguments = [])
 * @method \Http\Promise\Promise modifyScalingRuleAsync($arguments = [])
 * @method \Dew\Acs\Result describeScalingRules(array $arguments = [])
 * @method \Http\Promise\Promise describeScalingRulesAsync($arguments = [])
 * @method \Dew\Acs\Result attachInstances(array $arguments = [])
 * @method \Http\Promise\Promise attachInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result detachInstances(array $arguments = [])
 * @method \Http\Promise\Promise detachInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result executeScalingRule(array $arguments = [])
 * @method \Http\Promise\Promise executeScalingRuleAsync($arguments = [])
 * @method \Dew\Acs\Result removeInstances(array $arguments = [])
 * @method \Http\Promise\Promise removeInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result createScheduledTask(array $arguments = [])
 * @method \Http\Promise\Promise createScheduledTaskAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScheduledTask(array $arguments = [])
 * @method \Http\Promise\Promise deleteScheduledTaskAsync($arguments = [])
 * @method \Dew\Acs\Result modifyScheduledTask(array $arguments = [])
 * @method \Http\Promise\Promise modifyScheduledTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describeScheduledTasks(array $arguments = [])
 * @method \Http\Promise\Promise describeScheduledTasksAsync($arguments = [])
 * @method \Dew\Acs\Result createLifecycleHook(array $arguments = [])
 * @method \Http\Promise\Promise createLifecycleHookAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLifecycleHook(array $arguments = [])
 * @method \Http\Promise\Promise deleteLifecycleHookAsync($arguments = [])
 * @method \Dew\Acs\Result modifyLifecycleHook(array $arguments = [])
 * @method \Http\Promise\Promise modifyLifecycleHookAsync($arguments = [])
 * @method \Dew\Acs\Result describeLifecycleActions(array $arguments = [])
 * @method \Http\Promise\Promise describeLifecycleActionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeLifecycleHooks(array $arguments = [])
 * @method \Http\Promise\Promise describeLifecycleHooksAsync($arguments = [])
 * @method \Dew\Acs\Result recordLifecycleActionHeartbeat(array $arguments = [])
 * @method \Http\Promise\Promise recordLifecycleActionHeartbeatAsync($arguments = [])
 * @method \Dew\Acs\Result completeLifecycleAction(array $arguments = [])
 * @method \Http\Promise\Promise completeLifecycleActionAsync($arguments = [])
 * @method \Dew\Acs\Result createNotificationConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise createNotificationConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNotificationConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise deleteNotificationConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result modifyNotificationConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise modifyNotificationConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result describeNotificationConfigurations(array $arguments = [])
 * @method \Http\Promise\Promise describeNotificationConfigurationsAsync($arguments = [])
 * @method \Dew\Acs\Result describeNotificationTypes(array $arguments = [])
 * @method \Http\Promise\Promise describeNotificationTypesAsync($arguments = [])
 * @method \Dew\Acs\Result setInstancesProtection(array $arguments = [])
 * @method \Http\Promise\Promise setInstancesProtectionAsync($arguments = [])
 * @method \Dew\Acs\Result setInstanceHealth(array $arguments = [])
 * @method \Http\Promise\Promise setInstanceHealthAsync($arguments = [])
 * @method \Dew\Acs\Result enterStandby(array $arguments = [])
 * @method \Http\Promise\Promise enterStandbyAsync($arguments = [])
 * @method \Dew\Acs\Result exitStandby(array $arguments = [])
 * @method \Http\Promise\Promise exitStandbyAsync($arguments = [])
 * @method \Dew\Acs\Result rebalanceInstances(array $arguments = [])
 * @method \Http\Promise\Promise rebalanceInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagKeys(array $arguments = [])
 * @method \Http\Promise\Promise listTagKeysAsync($arguments = [])
 * @method \Dew\Acs\Result listTagValues(array $arguments = [])
 * @method \Http\Promise\Promise listTagValuesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result createAlarm(array $arguments = [])
 * @method \Http\Promise\Promise createAlarmAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAlarm(array $arguments = [])
 * @method \Http\Promise\Promise deleteAlarmAsync($arguments = [])
 * @method \Dew\Acs\Result disableAlarm(array $arguments = [])
 * @method \Http\Promise\Promise disableAlarmAsync($arguments = [])
 * @method \Dew\Acs\Result enableAlarm(array $arguments = [])
 * @method \Http\Promise\Promise enableAlarmAsync($arguments = [])
 * @method \Dew\Acs\Result modifyAlarm(array $arguments = [])
 * @method \Http\Promise\Promise modifyAlarmAsync($arguments = [])
 * @method \Dew\Acs\Result describeAlarms(array $arguments = [])
 * @method \Http\Promise\Promise describeAlarmsAsync($arguments = [])
 * @method \Dew\Acs\Result attachAlbServerGroups(array $arguments = [])
 * @method \Http\Promise\Promise attachAlbServerGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result createEciScalingConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise createEciScalingConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEciScalingConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise deleteEciScalingConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result describeEciScalingConfigurations(array $arguments = [])
 * @method \Http\Promise\Promise describeEciScalingConfigurationsAsync($arguments = [])
 * @method \Dew\Acs\Result detachAlbServerGroups(array $arguments = [])
 * @method \Http\Promise\Promise detachAlbServerGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result modifyEciScalingConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise modifyEciScalingConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result scaleWithAdjustment(array $arguments = [])
 * @method \Http\Promise\Promise scaleWithAdjustmentAsync($arguments = [])
 * @method \Dew\Acs\Result changeResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise changeResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result attachServerGroups(array $arguments = [])
 * @method \Http\Promise\Promise attachServerGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result detachServerGroups(array $arguments = [])
 * @method \Http\Promise\Promise detachServerGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describePatternTypes(array $arguments = [])
 * @method \Http\Promise\Promise describePatternTypesAsync($arguments = [])
 * @method \Dew\Acs\Result describeScalingGroupDetail(array $arguments = []) {@since 2022-02-22}
 * @method \Http\Promise\Promise describeScalingGroupDetailAsync($arguments = []) {@since 2022-02-22}
 * @method \Dew\Acs\Result applyScalingGroup(array $arguments = []) {@since 2022-02-22}
 * @method \Http\Promise\Promise applyScalingGroupAsync($arguments = []) {@since 2022-02-22}
 * @method \Dew\Acs\Result describeEciScalingConfigurationDetail(array $arguments = []) {@since 2022-02-22}
 * @method \Http\Promise\Promise describeEciScalingConfigurationDetailAsync($arguments = []) {@since 2022-02-22}
 * @method \Dew\Acs\Result applyEciScalingConfiguration(array $arguments = []) {@since 2022-02-22}
 * @method \Http\Promise\Promise applyEciScalingConfigurationAsync($arguments = []) {@since 2022-02-22}
 * @method \Dew\Acs\Result describeAlertConfiguration(array $arguments = []) {@since 2022-02-22}
 * @method \Http\Promise\Promise describeAlertConfigurationAsync($arguments = []) {@since 2022-02-22}
 * @method \Dew\Acs\Result modifyAlertConfiguration(array $arguments = []) {@since 2022-02-22}
 * @method \Http\Promise\Promise modifyAlertConfigurationAsync($arguments = []) {@since 2022-02-22}
 */
final class EssClient extends AcsClient
{
    //
}
