<?php

declare(strict_types=1);

namespace Dew\Acs\Schedulerx2;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result createNamespace(array $arguments = [])
 * @method \Http\Promise\Promise createNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result listNamespaces(array $arguments = [])
 * @method \Http\Promise\Promise listNamespacesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNamespace(array $arguments = [])
 * @method \Http\Promise\Promise deleteNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result updateNamespace(array $arguments = [])
 * @method \Http\Promise\Promise updateNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result createAppGroup(array $arguments = [])
 * @method \Http\Promise\Promise createAppGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getAppGroup(array $arguments = [])
 * @method \Http\Promise\Promise getAppGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAppGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteAppGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateAppGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateAppGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listGroups(array $arguments = [])
 * @method \Http\Promise\Promise listGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result getWorkerList(array $arguments = [])
 * @method \Http\Promise\Promise getWorkerListAsync($arguments = [])
 * @method \Dew\Acs\Result createWorkflow(array $arguments = [])
 * @method \Http\Promise\Promise createWorkflowAsync($arguments = [])
 * @method \Dew\Acs\Result updateWorkflow(array $arguments = [])
 * @method \Http\Promise\Promise updateWorkflowAsync($arguments = [])
 * @method \Dew\Acs\Result updateWorkflowDag(array $arguments = [])
 * @method \Http\Promise\Promise updateWorkflowDagAsync($arguments = [])
 * @method \Dew\Acs\Result executeWorkflow(array $arguments = [])
 * @method \Http\Promise\Promise executeWorkflowAsync($arguments = [])
 * @method \Dew\Acs\Result deleteWorkflow(array $arguments = [])
 * @method \Http\Promise\Promise deleteWorkflowAsync($arguments = [])
 * @method \Dew\Acs\Result disableWorkflow(array $arguments = [])
 * @method \Http\Promise\Promise disableWorkflowAsync($arguments = [])
 * @method \Dew\Acs\Result enableWorkflow(array $arguments = [])
 * @method \Http\Promise\Promise enableWorkflowAsync($arguments = [])
 * @method \Dew\Acs\Result getWorkFlow(array $arguments = [])
 * @method \Http\Promise\Promise getWorkFlowAsync($arguments = [])
 * @method \Dew\Acs\Result getWorkflowInstance(array $arguments = [])
 * @method \Http\Promise\Promise getWorkflowInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkflowInstance(array $arguments = [])
 * @method \Http\Promise\Promise listWorkflowInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result setWfInstanceSuccess(array $arguments = [])
 * @method \Http\Promise\Promise setWfInstanceSuccessAsync($arguments = [])
 * @method \Dew\Acs\Result createJob(array $arguments = [])
 * @method \Http\Promise\Promise createJobAsync($arguments = [])
 * @method \Dew\Acs\Result deleteJob(array $arguments = [])
 * @method \Http\Promise\Promise deleteJobAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeleteJobs(array $arguments = [])
 * @method \Http\Promise\Promise batchDeleteJobsAsync($arguments = [])
 * @method \Dew\Acs\Result updateJob(array $arguments = [])
 * @method \Http\Promise\Promise updateJobAsync($arguments = [])
 * @method \Dew\Acs\Result disableJob(array $arguments = [])
 * @method \Http\Promise\Promise disableJobAsync($arguments = [])
 * @method \Dew\Acs\Result batchEnableJobs(array $arguments = [])
 * @method \Http\Promise\Promise batchEnableJobsAsync($arguments = [])
 * @method \Dew\Acs\Result batchDisableJobs(array $arguments = [])
 * @method \Http\Promise\Promise batchDisableJobsAsync($arguments = [])
 * @method \Dew\Acs\Result enableJob(array $arguments = [])
 * @method \Http\Promise\Promise enableJobAsync($arguments = [])
 * @method \Dew\Acs\Result getJobInfo(array $arguments = [])
 * @method \Http\Promise\Promise getJobInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listJobs(array $arguments = [])
 * @method \Http\Promise\Promise listJobsAsync($arguments = [])
 * @method \Dew\Acs\Result executeJob(array $arguments = [])
 * @method \Http\Promise\Promise executeJobAsync($arguments = [])
 * @method \Dew\Acs\Result designateWorkers(array $arguments = [])
 * @method \Http\Promise\Promise designateWorkersAsync($arguments = [])
 * @method \Dew\Acs\Result rerunJob(array $arguments = [])
 * @method \Http\Promise\Promise rerunJobAsync($arguments = [])
 * @method \Dew\Acs\Result updateJobScript(array $arguments = [])
 * @method \Http\Promise\Promise updateJobScriptAsync($arguments = [])
 * @method \Dew\Acs\Result listJobScriptHistory(array $arguments = [])
 * @method \Http\Promise\Promise listJobScriptHistoryAsync($arguments = [])
 * @method \Dew\Acs\Result readSchedulerxDesignateInfo(array $arguments = [])
 * @method \Http\Promise\Promise readSchedulerxDesignateInfoAsync($arguments = [])
 * @method \Dew\Acs\Result readSchedulerxDesignateDetail(array $arguments = [])
 * @method \Http\Promise\Promise readSchedulerxDesignateDetailAsync($arguments = [])
 * @method \Dew\Acs\Result manageSchedulerxJobSync(array $arguments = [])
 * @method \Http\Promise\Promise manageSchedulerxJobSyncAsync($arguments = [])
 * @method \Dew\Acs\Result stopInstance(array $arguments = [])
 * @method \Http\Promise\Promise stopInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getJobInstance(array $arguments = [])
 * @method \Http\Promise\Promise getJobInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getJobInstanceList(array $arguments = [])
 * @method \Http\Promise\Promise getJobInstanceListAsync($arguments = [])
 * @method \Dew\Acs\Result retryJobInstance(array $arguments = [])
 * @method \Http\Promise\Promise retryJobInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result setJobInstanceSuccess(array $arguments = [])
 * @method \Http\Promise\Promise setJobInstanceSuccessAsync($arguments = [])
 * @method \Dew\Acs\Result grantPermission(array $arguments = [])
 * @method \Http\Promise\Promise grantPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result revokePermission(array $arguments = [])
 * @method \Http\Promise\Promise revokePermissionAsync($arguments = [])
 * @method \Dew\Acs\Result getLog(array $arguments = [])
 * @method \Http\Promise\Promise getLogAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRouteStrategy(array $arguments = [])
 * @method \Http\Promise\Promise deleteRouteStrategyAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeleteRouteStrategy(array $arguments = [])
 * @method \Http\Promise\Promise batchDeleteRouteStrategyAsync($arguments = [])
 * @method \Dew\Acs\Result createRouteStrategy(array $arguments = [])
 * @method \Http\Promise\Promise createRouteStrategyAsync($arguments = [])
 * @method \Dew\Acs\Result getOverview(array $arguments = [])
 * @method \Http\Promise\Promise getOverviewAsync($arguments = [])
 */
final class Schedulerx2Client extends AcsClient
{
    //
}
