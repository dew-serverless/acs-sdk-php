<?php

declare(strict_types=1);

namespace Dew\Acs\YundunBastionhost;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result describeInstanceAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result configInstanceSecurityGroups(array $arguments = [])
 * @method \Http\Promise\Promise configInstanceSecurityGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result configInstanceWhiteList(array $arguments = [])
 * @method \Http\Promise\Promise configInstanceWhiteListAsync($arguments = [])
 * @method \Dew\Acs\Result startInstance(array $arguments = [])
 * @method \Http\Promise\Promise startInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result enableInstancePublicAccess(array $arguments = [])
 * @method \Http\Promise\Promise enableInstancePublicAccessAsync($arguments = [])
 * @method \Dew\Acs\Result disableInstancePublicAccess(array $arguments = [])
 * @method \Http\Promise\Promise disableInstancePublicAccessAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result moveResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise moveResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result addInstanceRdMember(array $arguments = [])
 * @method \Http\Promise\Promise addInstanceRdMemberAsync($arguments = [])
 * @method \Dew\Acs\Result listInstanceRdMembers(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceRdMembersAsync($arguments = [])
 * @method \Dew\Acs\Result removeInstanceRdMember(array $arguments = [])
 * @method \Http\Promise\Promise removeInstanceRdMemberAsync($arguments = [])
 * @method \Dew\Acs\Result listTagKeys(array $arguments = [])
 * @method \Http\Promise\Promise listTagKeysAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result createHost(array $arguments = [])
 * @method \Http\Promise\Promise createHostAsync($arguments = [])
 * @method \Dew\Acs\Result getHost(array $arguments = [])
 * @method \Http\Promise\Promise getHostAsync($arguments = [])
 * @method \Dew\Acs\Result listHosts(array $arguments = [])
 * @method \Http\Promise\Promise listHostsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteHost(array $arguments = [])
 * @method \Http\Promise\Promise deleteHostAsync($arguments = [])
 * @method \Dew\Acs\Result modifyHostsPort(array $arguments = [])
 * @method \Http\Promise\Promise modifyHostsPortAsync($arguments = [])
 * @method \Dew\Acs\Result modifyHostsActiveAddressType(array $arguments = [])
 * @method \Http\Promise\Promise modifyHostsActiveAddressTypeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyHost(array $arguments = [])
 * @method \Http\Promise\Promise modifyHostAsync($arguments = [])
 * @method \Dew\Acs\Result createDatabase(array $arguments = [])
 * @method \Http\Promise\Promise createDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDatabase(array $arguments = [])
 * @method \Http\Promise\Promise modifyDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result getDatabase(array $arguments = [])
 * @method \Http\Promise\Promise getDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result listDatabases(array $arguments = [])
 * @method \Http\Promise\Promise listDatabasesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDatabase(array $arguments = [])
 * @method \Http\Promise\Promise deleteDatabaseAsync($arguments = [])
 * @method \Dew\Acs\Result createNetworkDomain(array $arguments = [])
 * @method \Http\Promise\Promise createNetworkDomainAsync($arguments = [])
 * @method \Dew\Acs\Result getNetworkDomain(array $arguments = [])
 * @method \Http\Promise\Promise getNetworkDomainAsync($arguments = [])
 * @method \Dew\Acs\Result listNetworkDomains(array $arguments = [])
 * @method \Http\Promise\Promise listNetworkDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNetworkDomain(array $arguments = [])
 * @method \Http\Promise\Promise deleteNetworkDomainAsync($arguments = [])
 * @method \Dew\Acs\Result modifyNetworkDomain(array $arguments = [])
 * @method \Http\Promise\Promise modifyNetworkDomainAsync($arguments = [])
 * @method \Dew\Acs\Result moveHostsToNetworkDomain(array $arguments = [])
 * @method \Http\Promise\Promise moveHostsToNetworkDomainAsync($arguments = [])
 * @method \Dew\Acs\Result moveDatabasesToNetworkDomain(array $arguments = [])
 * @method \Http\Promise\Promise moveDatabasesToNetworkDomainAsync($arguments = [])
 * @method \Dew\Acs\Result createHostAccount(array $arguments = [])
 * @method \Http\Promise\Promise createHostAccountAsync($arguments = [])
 * @method \Dew\Acs\Result getHostAccount(array $arguments = [])
 * @method \Http\Promise\Promise getHostAccountAsync($arguments = [])
 * @method \Dew\Acs\Result listHostAccounts(array $arguments = [])
 * @method \Http\Promise\Promise listHostAccountsAsync($arguments = [])
 * @method \Dew\Acs\Result modifyHostAccount(array $arguments = [])
 * @method \Http\Promise\Promise modifyHostAccountAsync($arguments = [])
 * @method \Dew\Acs\Result deleteHostAccount(array $arguments = [])
 * @method \Http\Promise\Promise deleteHostAccountAsync($arguments = [])
 * @method \Dew\Acs\Result resetHostAccountCredential(array $arguments = [])
 * @method \Http\Promise\Promise resetHostAccountCredentialAsync($arguments = [])
 * @method \Dew\Acs\Result createDatabaseAccount(array $arguments = [])
 * @method \Http\Promise\Promise createDatabaseAccountAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDatabaseAccount(array $arguments = [])
 * @method \Http\Promise\Promise modifyDatabaseAccountAsync($arguments = [])
 * @method \Dew\Acs\Result getDatabaseAccount(array $arguments = [])
 * @method \Http\Promise\Promise getDatabaseAccountAsync($arguments = [])
 * @method \Dew\Acs\Result listDatabaseAccounts(array $arguments = [])
 * @method \Http\Promise\Promise listDatabaseAccountsAsync($arguments = [])
 * @method \Dew\Acs\Result listDatabaseAccountsForUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise listDatabaseAccountsForUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDatabaseAccount(array $arguments = [])
 * @method \Http\Promise\Promise deleteDatabaseAccountAsync($arguments = [])
 * @method \Dew\Acs\Result createUser(array $arguments = [])
 * @method \Http\Promise\Promise createUserAsync($arguments = [])
 * @method \Dew\Acs\Result getUser(array $arguments = [])
 * @method \Http\Promise\Promise getUserAsync($arguments = [])
 * @method \Dew\Acs\Result listUsers(array $arguments = [])
 * @method \Http\Promise\Promise listUsersAsync($arguments = [])
 * @method \Dew\Acs\Result modifyUser(array $arguments = [])
 * @method \Http\Promise\Promise modifyUserAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUser(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserAsync($arguments = [])
 * @method \Dew\Acs\Result createUserPublicKey(array $arguments = [])
 * @method \Http\Promise\Promise createUserPublicKeyAsync($arguments = [])
 * @method \Dew\Acs\Result listUserPublicKeys(array $arguments = [])
 * @method \Http\Promise\Promise listUserPublicKeysAsync($arguments = [])
 * @method \Dew\Acs\Result modifyUserPublicKey(array $arguments = [])
 * @method \Http\Promise\Promise modifyUserPublicKeyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserPublicKey(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserPublicKeyAsync($arguments = [])
 * @method \Dew\Acs\Result lockUsers(array $arguments = [])
 * @method \Http\Promise\Promise lockUsersAsync($arguments = [])
 * @method \Dew\Acs\Result unlockUsers(array $arguments = [])
 * @method \Http\Promise\Promise unlockUsersAsync($arguments = [])
 * @method \Dew\Acs\Result createUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise createUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise getUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listUserGroups(array $arguments = [])
 * @method \Http\Promise\Promise listUserGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result modifyUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise modifyUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result addUsersToGroup(array $arguments = [])
 * @method \Http\Promise\Promise addUsersToGroupAsync($arguments = [])
 * @method \Dew\Acs\Result removeUsersFromGroup(array $arguments = [])
 * @method \Http\Promise\Promise removeUsersFromGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createHostGroup(array $arguments = [])
 * @method \Http\Promise\Promise createHostGroupAsync($arguments = [])
 * @method \Dew\Acs\Result addDatabasesToGroup(array $arguments = [])
 * @method \Http\Promise\Promise addDatabasesToGroupAsync($arguments = [])
 * @method \Dew\Acs\Result addHostsToGroup(array $arguments = [])
 * @method \Http\Promise\Promise addHostsToGroupAsync($arguments = [])
 * @method \Dew\Acs\Result removeDatabasesFromGroup(array $arguments = [])
 * @method \Http\Promise\Promise removeDatabasesFromGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteHostGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteHostGroupAsync($arguments = [])
 * @method \Dew\Acs\Result removeHostsFromGroup(array $arguments = [])
 * @method \Http\Promise\Promise removeHostsFromGroupAsync($arguments = [])
 * @method \Dew\Acs\Result modifyHostGroup(array $arguments = [])
 * @method \Http\Promise\Promise modifyHostGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getHostGroup(array $arguments = [])
 * @method \Http\Promise\Promise getHostGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listHostGroups(array $arguments = [])
 * @method \Http\Promise\Promise listHostGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result attachHostAccountsToUser(array $arguments = [])
 * @method \Http\Promise\Promise attachHostAccountsToUserAsync($arguments = [])
 * @method \Dew\Acs\Result listHostsForUser(array $arguments = [])
 * @method \Http\Promise\Promise listHostsForUserAsync($arguments = [])
 * @method \Dew\Acs\Result listHostAccountsForUser(array $arguments = [])
 * @method \Http\Promise\Promise listHostAccountsForUserAsync($arguments = [])
 * @method \Dew\Acs\Result detachHostAccountsFromUser(array $arguments = [])
 * @method \Http\Promise\Promise detachHostAccountsFromUserAsync($arguments = [])
 * @method \Dew\Acs\Result detachHostAccountsFromUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise detachHostAccountsFromUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result detachHostGroupAccountsFromUser(array $arguments = [])
 * @method \Http\Promise\Promise detachHostGroupAccountsFromUserAsync($arguments = [])
 * @method \Dew\Acs\Result attachHostAccountsToUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise attachHostAccountsToUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result detachHostGroupAccountsFromUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise detachHostGroupAccountsFromUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result attachHostGroupAccountsToUser(array $arguments = [])
 * @method \Http\Promise\Promise attachHostGroupAccountsToUserAsync($arguments = [])
 * @method \Dew\Acs\Result attachHostGroupAccountsToUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise attachHostGroupAccountsToUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listHostAccountsForUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise listHostAccountsForUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listHostGroupAccountNamesForUser(array $arguments = [])
 * @method \Http\Promise\Promise listHostGroupAccountNamesForUserAsync($arguments = [])
 * @method \Dew\Acs\Result listHostGroupAccountNamesForUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise listHostGroupAccountNamesForUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listHostGroupsForUser(array $arguments = [])
 * @method \Http\Promise\Promise listHostGroupsForUserAsync($arguments = [])
 * @method \Dew\Acs\Result listHostGroupsForUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise listHostGroupsForUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listHostsForUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise listHostsForUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result attachDatabaseAccountsToUser(array $arguments = [])
 * @method \Http\Promise\Promise attachDatabaseAccountsToUserAsync($arguments = [])
 * @method \Dew\Acs\Result listDatabasesForUser(array $arguments = [])
 * @method \Http\Promise\Promise listDatabasesForUserAsync($arguments = [])
 * @method \Dew\Acs\Result detachDatabaseAccountsFromUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise detachDatabaseAccountsFromUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listDatabaseAccountsForUser(array $arguments = [])
 * @method \Http\Promise\Promise listDatabaseAccountsForUserAsync($arguments = [])
 * @method \Dew\Acs\Result detachDatabaseAccountsFromUser(array $arguments = [])
 * @method \Http\Promise\Promise detachDatabaseAccountsFromUserAsync($arguments = [])
 * @method \Dew\Acs\Result attachDatabaseAccountsToUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise attachDatabaseAccountsToUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listDatabasesForUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise listDatabasesForUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listOperationDatabases(array $arguments = [])
 * @method \Http\Promise\Promise listOperationDatabasesAsync($arguments = [])
 * @method \Dew\Acs\Result listOperationHosts(array $arguments = [])
 * @method \Http\Promise\Promise listOperationHostsAsync($arguments = [])
 * @method \Dew\Acs\Result listOperationHostAccounts(array $arguments = [])
 * @method \Http\Promise\Promise listOperationHostAccountsAsync($arguments = [])
 * @method \Dew\Acs\Result listOperationDatabaseAccounts(array $arguments = [])
 * @method \Http\Promise\Promise listOperationDatabaseAccountsAsync($arguments = [])
 * @method \Dew\Acs\Result generateAssetOperationToken(array $arguments = [])
 * @method \Http\Promise\Promise generateAssetOperationTokenAsync($arguments = [])
 * @method \Dew\Acs\Result renewAssetOperationToken(array $arguments = [])
 * @method \Http\Promise\Promise renewAssetOperationTokenAsync($arguments = [])
 * @method \Dew\Acs\Result createOperationTicket(array $arguments = [])
 * @method \Http\Promise\Promise createOperationTicketAsync($arguments = [])
 * @method \Dew\Acs\Result createRule(array $arguments = [])
 * @method \Http\Promise\Promise createRuleAsync($arguments = [])
 * @method \Dew\Acs\Result modifyRule(array $arguments = [])
 * @method \Http\Promise\Promise modifyRuleAsync($arguments = [])
 * @method \Dew\Acs\Result getRule(array $arguments = [])
 * @method \Http\Promise\Promise getRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listRules(array $arguments = [])
 * @method \Http\Promise\Promise listRulesAsync($arguments = [])
 * @method \Dew\Acs\Result enableRule(array $arguments = [])
 * @method \Http\Promise\Promise enableRuleAsync($arguments = [])
 * @method \Dew\Acs\Result disableRule(array $arguments = [])
 * @method \Http\Promise\Promise disableRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result modifyPolicy(array $arguments = [])
 * @method \Http\Promise\Promise modifyPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result getPolicyAssetScope(array $arguments = [])
 * @method \Http\Promise\Promise getPolicyAssetScopeAsync($arguments = [])
 * @method \Dew\Acs\Result setPolicyProtocolConfig(array $arguments = [])
 * @method \Http\Promise\Promise setPolicyProtocolConfigAsync($arguments = [])
 * @method \Dew\Acs\Result setPolicyCommandConfig(array $arguments = [])
 * @method \Http\Promise\Promise setPolicyCommandConfigAsync($arguments = [])
 * @method \Dew\Acs\Result setPolicyIPAclConfig(array $arguments = [])
 * @method \Http\Promise\Promise setPolicyIPAclConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getPolicyUserScope(array $arguments = [])
 * @method \Http\Promise\Promise getPolicyUserScopeAsync($arguments = [])
 * @method \Dew\Acs\Result setPolicyAccessTimeRangeConfig(array $arguments = [])
 * @method \Http\Promise\Promise setPolicyAccessTimeRangeConfigAsync($arguments = [])
 * @method \Dew\Acs\Result setPolicyAssetScope(array $arguments = [])
 * @method \Http\Promise\Promise setPolicyAssetScopeAsync($arguments = [])
 * @method \Dew\Acs\Result setPolicyUserScope(array $arguments = [])
 * @method \Http\Promise\Promise setPolicyUserScopeAsync($arguments = [])
 * @method \Dew\Acs\Result setPolicyApprovalConfig(array $arguments = [])
 * @method \Http\Promise\Promise setPolicyApprovalConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deletePolicy(array $arguments = [])
 * @method \Http\Promise\Promise deletePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listApproveCommands(array $arguments = [])
 * @method \Http\Promise\Promise listApproveCommandsAsync($arguments = [])
 * @method \Dew\Acs\Result acceptApproveCommand(array $arguments = [])
 * @method \Http\Promise\Promise acceptApproveCommandAsync($arguments = [])
 * @method \Dew\Acs\Result rejectApproveCommand(array $arguments = [])
 * @method \Http\Promise\Promise rejectApproveCommandAsync($arguments = [])
 * @method \Dew\Acs\Result listOperationTickets(array $arguments = [])
 * @method \Http\Promise\Promise listOperationTicketsAsync($arguments = [])
 * @method \Dew\Acs\Result acceptOperationTicket(array $arguments = [])
 * @method \Http\Promise\Promise acceptOperationTicketAsync($arguments = [])
 * @method \Dew\Acs\Result rejectOperationTicket(array $arguments = [])
 * @method \Http\Promise\Promise rejectOperationTicketAsync($arguments = [])
 * @method \Dew\Acs\Result createHostShareKey(array $arguments = [])
 * @method \Http\Promise\Promise createHostShareKeyAsync($arguments = [])
 * @method \Dew\Acs\Result getHostShareKey(array $arguments = [])
 * @method \Http\Promise\Promise getHostShareKeyAsync($arguments = [])
 * @method \Dew\Acs\Result listHostShareKeys(array $arguments = [])
 * @method \Http\Promise\Promise listHostShareKeysAsync($arguments = [])
 * @method \Dew\Acs\Result listHostAccountsForHostShareKey(array $arguments = [])
 * @method \Http\Promise\Promise listHostAccountsForHostShareKeyAsync($arguments = [])
 * @method \Dew\Acs\Result modifyHostShareKey(array $arguments = [])
 * @method \Http\Promise\Promise modifyHostShareKeyAsync($arguments = [])
 * @method \Dew\Acs\Result attachHostAccountsToHostShareKey(array $arguments = [])
 * @method \Http\Promise\Promise attachHostAccountsToHostShareKeyAsync($arguments = [])
 * @method \Dew\Acs\Result detachHostAccountsFromHostShareKey(array $arguments = [])
 * @method \Http\Promise\Promise detachHostAccountsFromHostShareKeyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteHostShareKey(array $arguments = [])
 * @method \Http\Promise\Promise deleteHostShareKeyAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceADAuthServer(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceADAuthServerAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceADAuthServer(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceADAuthServerAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceTwoFactor(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceTwoFactorAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceTwoFactor(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceTwoFactorAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceLDAPAuthServer(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceLDAPAuthServerAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceLDAPAuthServer(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceLDAPAuthServerAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceStoreInfo(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceStoreInfoAsync($arguments = [])
 * @method \Dew\Acs\Result createExportConfigJob(array $arguments = [])
 * @method \Http\Promise\Promise createExportConfigJobAsync($arguments = [])
 * @method \Dew\Acs\Result getExportConfigJob(array $arguments = [])
 * @method \Http\Promise\Promise getExportConfigJobAsync($arguments = [])
 * @method \Dew\Acs\Result verifyInstanceLDAPAuthServer(array $arguments = [])
 * @method \Http\Promise\Promise verifyInstanceLDAPAuthServerAsync($arguments = [])
 * @method \Dew\Acs\Result verifyInstanceADAuthServer(array $arguments = [])
 * @method \Http\Promise\Promise verifyInstanceADAuthServerAsync($arguments = [])
 */
final class YundunBastionhostClient extends AcsClient
{
    //
}
