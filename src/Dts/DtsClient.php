<?php

declare(strict_types=1);

namespace Dew\Acs\Dts;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result describeDTSIP(array $arguments = [])
 * @method \Http\Promise\Promise describeDTSIPAsync($arguments = [])
 * @method \Dew\Acs\Result describeEndpointSwitchStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeEndpointSwitchStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeInitializationStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeInitializationStatusAsync($arguments = [])
 * @method \Dew\Acs\Result shieldPrecheck(array $arguments = [])
 * @method \Http\Promise\Promise shieldPrecheckAsync($arguments = [])
 * @method \Dew\Acs\Result createMigrationJob(array $arguments = [])
 * @method \Http\Promise\Promise createMigrationJobAsync($arguments = [])
 * @method \Dew\Acs\Result deleteMigrationJob(array $arguments = [])
 * @method \Http\Promise\Promise deleteMigrationJobAsync($arguments = [])
 * @method \Dew\Acs\Result startMigrationJob(array $arguments = [])
 * @method \Http\Promise\Promise startMigrationJobAsync($arguments = [])
 * @method \Dew\Acs\Result stopMigrationJob(array $arguments = [])
 * @method \Http\Promise\Promise stopMigrationJobAsync($arguments = [])
 * @method \Dew\Acs\Result suspendMigrationJob(array $arguments = [])
 * @method \Http\Promise\Promise suspendMigrationJobAsync($arguments = [])
 * @method \Dew\Acs\Result configureMigrationJob(array $arguments = [])
 * @method \Http\Promise\Promise configureMigrationJobAsync($arguments = [])
 * @method \Dew\Acs\Result describeMigrationJobDetail(array $arguments = [])
 * @method \Http\Promise\Promise describeMigrationJobDetailAsync($arguments = [])
 * @method \Dew\Acs\Result describeMigrationJobs(array $arguments = [])
 * @method \Http\Promise\Promise describeMigrationJobsAsync($arguments = [])
 * @method \Dew\Acs\Result describeMigrationJobStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeMigrationJobStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeConnectionStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeConnectionStatusAsync($arguments = [])
 * @method \Dew\Acs\Result configureSubscription(array $arguments = [])
 * @method \Http\Promise\Promise configureSubscriptionAsync($arguments = [])
 * @method \Dew\Acs\Result createConsumerChannel(array $arguments = [])
 * @method \Http\Promise\Promise createConsumerChannelAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConsumerChannel(array $arguments = [])
 * @method \Http\Promise\Promise deleteConsumerChannelAsync($arguments = [])
 * @method \Dew\Acs\Result modifyConsumerChannel(array $arguments = [])
 * @method \Http\Promise\Promise modifyConsumerChannelAsync($arguments = [])
 * @method \Dew\Acs\Result describeConsumerChannel(array $arguments = [])
 * @method \Http\Promise\Promise describeConsumerChannelAsync($arguments = [])
 * @method \Dew\Acs\Result createConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise createConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result modifyConsumerGroupPassword(array $arguments = [])
 * @method \Http\Promise\Promise modifyConsumerGroupPasswordAsync($arguments = [])
 * @method \Dew\Acs\Result describeConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise describeConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createSubscriptionInstance(array $arguments = [])
 * @method \Http\Promise\Promise createSubscriptionInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSubscriptionInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteSubscriptionInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result startSubscriptionInstance(array $arguments = [])
 * @method \Http\Promise\Promise startSubscriptionInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifySubscriptionObject(array $arguments = [])
 * @method \Http\Promise\Promise modifySubscriptionObjectAsync($arguments = [])
 * @method \Dew\Acs\Result modifyConsumptionTimestamp(array $arguments = [])
 * @method \Http\Promise\Promise modifyConsumptionTimestampAsync($arguments = [])
 * @method \Dew\Acs\Result describeSubscriptionInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeSubscriptionInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result describeSubscriptionInstanceStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeSubscriptionInstanceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result configureSubscriptionInstance(array $arguments = [])
 * @method \Http\Promise\Promise configureSubscriptionInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createSynchronizationJob(array $arguments = [])
 * @method \Http\Promise\Promise createSynchronizationJobAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSynchronizationJob(array $arguments = [])
 * @method \Http\Promise\Promise deleteSynchronizationJobAsync($arguments = [])
 * @method \Dew\Acs\Result startSynchronizationJob(array $arguments = [])
 * @method \Http\Promise\Promise startSynchronizationJobAsync($arguments = [])
 * @method \Dew\Acs\Result modifySynchronizationObject(array $arguments = [])
 * @method \Http\Promise\Promise modifySynchronizationObjectAsync($arguments = [])
 * @method \Dew\Acs\Result describeSynchronizationJobReplicatorCompare(array $arguments = [])
 * @method \Http\Promise\Promise describeSynchronizationJobReplicatorCompareAsync($arguments = [])
 * @method \Dew\Acs\Result describeSynchronizationJobs(array $arguments = [])
 * @method \Http\Promise\Promise describeSynchronizationJobsAsync($arguments = [])
 * @method \Dew\Acs\Result describeSynchronizationJobStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeSynchronizationJobStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeSynchronizationJobStatusList(array $arguments = [])
 * @method \Http\Promise\Promise describeSynchronizationJobStatusListAsync($arguments = [])
 * @method \Dew\Acs\Result describeSynchronizationObjectModifyStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeSynchronizationObjectModifyStatusAsync($arguments = [])
 * @method \Dew\Acs\Result suspendSynchronizationJob(array $arguments = [])
 * @method \Http\Promise\Promise suspendSynchronizationJobAsync($arguments = [])
 * @method \Dew\Acs\Result resetSynchronizationJob(array $arguments = [])
 * @method \Http\Promise\Promise resetSynchronizationJobAsync($arguments = [])
 * @method \Dew\Acs\Result configureSynchronizationJobReplicatorCompare(array $arguments = [])
 * @method \Http\Promise\Promise configureSynchronizationJobReplicatorCompareAsync($arguments = [])
 * @method \Dew\Acs\Result configureSynchronizationJob(array $arguments = [])
 * @method \Http\Promise\Promise configureSynchronizationJobAsync($arguments = [])
 * @method \Dew\Acs\Result switchSynchronizationEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise switchSynchronizationEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result describeMigrationJobAlert(array $arguments = [])
 * @method \Http\Promise\Promise describeMigrationJobAlertAsync($arguments = [])
 * @method \Dew\Acs\Result describeSynchronizationJobAlert(array $arguments = [])
 * @method \Http\Promise\Promise describeSynchronizationJobAlertAsync($arguments = [])
 * @method \Dew\Acs\Result describeSubscriptionInstanceAlert(array $arguments = [])
 * @method \Http\Promise\Promise describeSubscriptionInstanceAlertAsync($arguments = [])
 * @method \Dew\Acs\Result configureMigrationJobAlert(array $arguments = [])
 * @method \Http\Promise\Promise configureMigrationJobAlertAsync($arguments = [])
 * @method \Dew\Acs\Result configureSynchronizationJobAlert(array $arguments = [])
 * @method \Http\Promise\Promise configureSynchronizationJobAlertAsync($arguments = [])
 * @method \Dew\Acs\Result configureSubscriptionInstanceAlert(array $arguments = [])
 * @method \Http\Promise\Promise configureSubscriptionInstanceAlertAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDtsJob(array $arguments = [])
 * @method \Http\Promise\Promise deleteDtsJobAsync($arguments = [])
 * @method \Dew\Acs\Result configureDtsJob(array $arguments = [])
 * @method \Http\Promise\Promise configureDtsJobAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDtsJob(array $arguments = [])
 * @method \Http\Promise\Promise modifyDtsJobAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDtsJobName(array $arguments = [])
 * @method \Http\Promise\Promise modifyDtsJobNameAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDtsJobPassword(array $arguments = [])
 * @method \Http\Promise\Promise modifyDtsJobPasswordAsync($arguments = [])
 * @method \Dew\Acs\Result resetDtsJob(array $arguments = [])
 * @method \Http\Promise\Promise resetDtsJobAsync($arguments = [])
 * @method \Dew\Acs\Result startDtsJob(array $arguments = [])
 * @method \Http\Promise\Promise startDtsJobAsync($arguments = [])
 * @method \Dew\Acs\Result stopDtsJob(array $arguments = [])
 * @method \Http\Promise\Promise stopDtsJobAsync($arguments = [])
 * @method \Dew\Acs\Result suspendDtsJob(array $arguments = [])
 * @method \Http\Promise\Promise suspendDtsJobAsync($arguments = [])
 * @method \Dew\Acs\Result describeDtsJobDetail(array $arguments = [])
 * @method \Http\Promise\Promise describeDtsJobDetailAsync($arguments = [])
 * @method \Dew\Acs\Result describeDtsJobs(array $arguments = [])
 * @method \Http\Promise\Promise describeDtsJobsAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result convertInstanceResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise convertInstanceResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result countJobByCondition(array $arguments = [])
 * @method \Http\Promise\Promise countJobByConditionAsync($arguments = [])
 * @method \Dew\Acs\Result createDtsInstance(array $arguments = [])
 * @method \Http\Promise\Promise createDtsInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createJobMonitorRule(array $arguments = [])
 * @method \Http\Promise\Promise createJobMonitorRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDtsJobs(array $arguments = [])
 * @method \Http\Promise\Promise deleteDtsJobsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDtsServiceLog(array $arguments = [])
 * @method \Http\Promise\Promise describeDtsServiceLogAsync($arguments = [])
 * @method \Dew\Acs\Result describeJobMonitorRule(array $arguments = [])
 * @method \Http\Promise\Promise describeJobMonitorRuleAsync($arguments = [])
 * @method \Dew\Acs\Result describePreCheckStatus(array $arguments = [])
 * @method \Http\Promise\Promise describePreCheckStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeSubscriptionMeta(array $arguments = [])
 * @method \Http\Promise\Promise describeSubscriptionMetaAsync($arguments = [])
 * @method \Dew\Acs\Result describeTagKeys(array $arguments = [])
 * @method \Http\Promise\Promise describeTagKeysAsync($arguments = [])
 * @method \Dew\Acs\Result describeTagValues(array $arguments = [])
 * @method \Http\Promise\Promise describeTagValuesAsync($arguments = [])
 * @method \Dew\Acs\Result initDtsRdsInstance(array $arguments = [])
 * @method \Http\Promise\Promise initDtsRdsInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifySubscription(array $arguments = [])
 * @method \Http\Promise\Promise modifySubscriptionAsync($arguments = [])
 * @method \Dew\Acs\Result renewInstance(array $arguments = [])
 * @method \Http\Promise\Promise renewInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result skipPreCheck(array $arguments = [])
 * @method \Http\Promise\Promise skipPreCheckAsync($arguments = [])
 * @method \Dew\Acs\Result startDtsJobs(array $arguments = [])
 * @method \Http\Promise\Promise startDtsJobsAsync($arguments = [])
 * @method \Dew\Acs\Result stopDtsJobs(array $arguments = [])
 * @method \Http\Promise\Promise stopDtsJobsAsync($arguments = [])
 * @method \Dew\Acs\Result summaryJobDetail(array $arguments = [])
 * @method \Http\Promise\Promise summaryJobDetailAsync($arguments = [])
 * @method \Dew\Acs\Result suspendDtsJobs(array $arguments = [])
 * @method \Http\Promise\Promise suspendDtsJobsAsync($arguments = [])
 * @method \Dew\Acs\Result transferInstanceClass(array $arguments = [])
 * @method \Http\Promise\Promise transferInstanceClassAsync($arguments = [])
 * @method \Dew\Acs\Result transferPayType(array $arguments = [])
 * @method \Http\Promise\Promise transferPayTypeAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeTwoWay(array $arguments = [])
 * @method \Http\Promise\Promise upgradeTwoWayAsync($arguments = [])
 * @method \Dew\Acs\Result whiteIpList(array $arguments = [])
 * @method \Http\Promise\Promise whiteIpListAsync($arguments = [])
 * @method \Dew\Acs\Result describeDtsEtlJobVersionInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeDtsEtlJobVersionInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeEtlJobLogs(array $arguments = [])
 * @method \Http\Promise\Promise describeEtlJobLogsAsync($arguments = [])
 * @method \Dew\Acs\Result createDedicatedClusterMonitorRule(array $arguments = [])
 * @method \Http\Promise\Promise createDedicatedClusterMonitorRuleAsync($arguments = [])
 * @method \Dew\Acs\Result describeClusterOperateLogs(array $arguments = [])
 * @method \Http\Promise\Promise describeClusterOperateLogsAsync($arguments = [])
 * @method \Dew\Acs\Result describeClusterUsedUtilization(array $arguments = [])
 * @method \Http\Promise\Promise describeClusterUsedUtilizationAsync($arguments = [])
 * @method \Dew\Acs\Result describeDedicatedClusterMonitorRule(array $arguments = [])
 * @method \Http\Promise\Promise describeDedicatedClusterMonitorRuleAsync($arguments = [])
 * @method \Dew\Acs\Result describeDedicatedCluster(array $arguments = [])
 * @method \Http\Promise\Promise describeDedicatedClusterAsync($arguments = [])
 * @method \Dew\Acs\Result describeMetricList(array $arguments = [])
 * @method \Http\Promise\Promise describeMetricListAsync($arguments = [])
 * @method \Dew\Acs\Result listDedicatedCluster(array $arguments = [])
 * @method \Http\Promise\Promise listDedicatedClusterAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDtsJobDedicatedCluster(array $arguments = [])
 * @method \Http\Promise\Promise modifyDtsJobDedicatedClusterAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDedicatedCluster(array $arguments = [])
 * @method \Http\Promise\Promise modifyDedicatedClusterAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDtsJobDuLimit(array $arguments = [])
 * @method \Http\Promise\Promise modifyDtsJobDuLimitAsync($arguments = [])
 * @method \Dew\Acs\Result stopDedicatedCluster(array $arguments = [])
 * @method \Http\Promise\Promise stopDedicatedClusterAsync($arguments = [])
 * @method \Dew\Acs\Result describeDataCheckTableDiffDetails(array $arguments = [])
 * @method \Http\Promise\Promise describeDataCheckTableDiffDetailsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDataCheckTableDetails(array $arguments = [])
 * @method \Http\Promise\Promise describeDataCheckTableDetailsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDataCheckReportUrl(array $arguments = [])
 * @method \Http\Promise\Promise describeDataCheckReportUrlAsync($arguments = [])
 * @method \Dew\Acs\Result describeCheckJobs(array $arguments = [])
 * @method \Http\Promise\Promise describeCheckJobsAsync($arguments = [])
 * @method \Dew\Acs\Result switchPhysicalDtsJobToCloud(array $arguments = [])
 * @method \Http\Promise\Promise switchPhysicalDtsJobToCloudAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDynamicConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyDynamicConfigAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDtsJobConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyDtsJobConfigAsync($arguments = [])
 * @method \Dew\Acs\Result startReverseWriter(array $arguments = [])
 * @method \Http\Promise\Promise startReverseWriterAsync($arguments = [])
 * @method \Dew\Acs\Result createReverseDtsJob(array $arguments = [])
 * @method \Http\Promise\Promise createReverseDtsJobAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDtsJobEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise modifyDtsJobEndpointAsync($arguments = [])
 */
final class DtsClient extends AcsClient
{
    //
}
