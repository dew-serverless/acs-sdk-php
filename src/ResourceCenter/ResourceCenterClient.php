<?php

declare(strict_types=1);

namespace Dew\Acs\ResourceCenter;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result enableResourceCenter(array $arguments = [])
 * @method \Http\Promise\Promise enableResourceCenterAsync($arguments = [])
 * @method \Dew\Acs\Result getResourceCenterServiceStatus(array $arguments = [])
 * @method \Http\Promise\Promise getResourceCenterServiceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result disableResourceCenter(array $arguments = [])
 * @method \Http\Promise\Promise disableResourceCenterAsync($arguments = [])
 * @method \Dew\Acs\Result searchResources(array $arguments = [])
 * @method \Http\Promise\Promise searchResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result getResourceConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getResourceConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result listTagValues(array $arguments = [])
 * @method \Http\Promise\Promise listTagValuesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagKeys(array $arguments = [])
 * @method \Http\Promise\Promise listTagKeysAsync($arguments = [])
 * @method \Dew\Acs\Result listResourceTypes(array $arguments = [])
 * @method \Http\Promise\Promise listResourceTypesAsync($arguments = [])
 * @method \Dew\Acs\Result getResourceCounts(array $arguments = [])
 * @method \Http\Promise\Promise getResourceCountsAsync($arguments = [])
 * @method \Dew\Acs\Result enableMultiAccountResourceCenter(array $arguments = [])
 * @method \Http\Promise\Promise enableMultiAccountResourceCenterAsync($arguments = [])
 * @method \Dew\Acs\Result disableMultiAccountResourceCenter(array $arguments = [])
 * @method \Http\Promise\Promise disableMultiAccountResourceCenterAsync($arguments = [])
 * @method \Dew\Acs\Result getMultiAccountResourceCenterServiceStatus(array $arguments = [])
 * @method \Http\Promise\Promise getMultiAccountResourceCenterServiceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result searchMultiAccountResources(array $arguments = [])
 * @method \Http\Promise\Promise searchMultiAccountResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result getMultiAccountResourceConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getMultiAccountResourceConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result listMultiAccountResourceGroups(array $arguments = [])
 * @method \Http\Promise\Promise listMultiAccountResourceGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result listMultiAccountTagKeys(array $arguments = [])
 * @method \Http\Promise\Promise listMultiAccountTagKeysAsync($arguments = [])
 * @method \Dew\Acs\Result listMultiAccountTagValues(array $arguments = [])
 * @method \Http\Promise\Promise listMultiAccountTagValuesAsync($arguments = [])
 * @method \Dew\Acs\Result listExampleQueries(array $arguments = [])
 * @method \Http\Promise\Promise listExampleQueriesAsync($arguments = [])
 * @method \Dew\Acs\Result getExampleQuery(array $arguments = [])
 * @method \Http\Promise\Promise getExampleQueryAsync($arguments = [])
 * @method \Dew\Acs\Result createSavedQuery(array $arguments = [])
 * @method \Http\Promise\Promise createSavedQueryAsync($arguments = [])
 * @method \Dew\Acs\Result getSavedQuery(array $arguments = [])
 * @method \Http\Promise\Promise getSavedQueryAsync($arguments = [])
 * @method \Dew\Acs\Result listSavedQueries(array $arguments = [])
 * @method \Http\Promise\Promise listSavedQueriesAsync($arguments = [])
 * @method \Dew\Acs\Result updateSavedQuery(array $arguments = [])
 * @method \Http\Promise\Promise updateSavedQueryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSavedQuery(array $arguments = [])
 * @method \Http\Promise\Promise deleteSavedQueryAsync($arguments = [])
 * @method \Dew\Acs\Result executeSQLQuery(array $arguments = [])
 * @method \Http\Promise\Promise executeSQLQueryAsync($arguments = [])
 * @method \Dew\Acs\Result executeMultiAccountSQLQuery(array $arguments = [])
 * @method \Http\Promise\Promise executeMultiAccountSQLQueryAsync($arguments = [])
 * @method \Dew\Acs\Result createFilter(array $arguments = [])
 * @method \Http\Promise\Promise createFilterAsync($arguments = [])
 * @method \Dew\Acs\Result updateFilter(array $arguments = [])
 * @method \Http\Promise\Promise updateFilterAsync($arguments = [])
 * @method \Dew\Acs\Result listFilters(array $arguments = [])
 * @method \Http\Promise\Promise listFiltersAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFilter(array $arguments = [])
 * @method \Http\Promise\Promise deleteFilterAsync($arguments = [])
 * @method \Dew\Acs\Result associateDefaultFilter(array $arguments = [])
 * @method \Http\Promise\Promise associateDefaultFilterAsync($arguments = [])
 * @method \Dew\Acs\Result disassociateDefaultFilter(array $arguments = [])
 * @method \Http\Promise\Promise disassociateDefaultFilterAsync($arguments = [])
 * @method \Dew\Acs\Result listMultiAccountResourceRelationships(array $arguments = [])
 * @method \Http\Promise\Promise listMultiAccountResourceRelationshipsAsync($arguments = [])
 * @method \Dew\Acs\Result listResourceRelationships(array $arguments = [])
 * @method \Http\Promise\Promise listResourceRelationshipsAsync($arguments = [])
 */
final class ResourceCenterClient extends AcsClient
{
    //
}
