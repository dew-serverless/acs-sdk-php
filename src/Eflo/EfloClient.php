<?php

declare(strict_types=1);

namespace Dew\Acs\Eflo;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createVpd(array $arguments = [])
 * @method \Http\Promise\Promise createVpdAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpd(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpdAsync($arguments = [])
 * @method \Dew\Acs\Result updateVpd(array $arguments = [])
 * @method \Http\Promise\Promise updateVpdAsync($arguments = [])
 * @method \Dew\Acs\Result getVpd(array $arguments = [])
 * @method \Http\Promise\Promise getVpdAsync($arguments = [])
 * @method \Dew\Acs\Result listVpds(array $arguments = [])
 * @method \Http\Promise\Promise listVpdsAsync($arguments = [])
 * @method \Dew\Acs\Result associateVpdCidrBlock(array $arguments = [])
 * @method \Http\Promise\Promise associateVpdCidrBlockAsync($arguments = [])
 * @method \Dew\Acs\Result unAssociateVpdCidrBlock(array $arguments = [])
 * @method \Http\Promise\Promise unAssociateVpdCidrBlockAsync($arguments = [])
 * @method \Dew\Acs\Result createVpdGrantRule(array $arguments = [])
 * @method \Http\Promise\Promise createVpdGrantRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpdGrantRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpdGrantRuleAsync($arguments = [])
 * @method \Dew\Acs\Result getVpdGrantRule(array $arguments = [])
 * @method \Http\Promise\Promise getVpdGrantRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listVpdGrantRules(array $arguments = [])
 * @method \Http\Promise\Promise listVpdGrantRulesAsync($arguments = [])
 * @method \Dew\Acs\Result getVpdRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise getVpdRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result listVpdRouteEntries(array $arguments = [])
 * @method \Http\Promise\Promise listVpdRouteEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result createSubnet(array $arguments = [])
 * @method \Http\Promise\Promise createSubnetAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSubnet(array $arguments = [])
 * @method \Http\Promise\Promise deleteSubnetAsync($arguments = [])
 * @method \Dew\Acs\Result getSubnet(array $arguments = [])
 * @method \Http\Promise\Promise getSubnetAsync($arguments = [])
 * @method \Dew\Acs\Result updateSubnet(array $arguments = [])
 * @method \Http\Promise\Promise updateSubnetAsync($arguments = [])
 * @method \Dew\Acs\Result listSubnets(array $arguments = [])
 * @method \Http\Promise\Promise listSubnetsAsync($arguments = [])
 * @method \Dew\Acs\Result initializeVcc(array $arguments = [])
 * @method \Http\Promise\Promise initializeVccAsync($arguments = [])
 * @method \Dew\Acs\Result describeSlr(array $arguments = [])
 * @method \Http\Promise\Promise describeSlrAsync($arguments = [])
 * @method \Dew\Acs\Result createVcc(array $arguments = [])
 * @method \Http\Promise\Promise createVccAsync($arguments = [])
 * @method \Dew\Acs\Result updateVcc(array $arguments = [])
 * @method \Http\Promise\Promise updateVccAsync($arguments = [])
 * @method \Dew\Acs\Result getVcc(array $arguments = [])
 * @method \Http\Promise\Promise getVccAsync($arguments = [])
 * @method \Dew\Acs\Result listVccs(array $arguments = [])
 * @method \Http\Promise\Promise listVccsAsync($arguments = [])
 * @method \Dew\Acs\Result listVccFlowInfos(array $arguments = [])
 * @method \Http\Promise\Promise listVccFlowInfosAsync($arguments = [])
 * @method \Dew\Acs\Result retryVcc(array $arguments = [])
 * @method \Http\Promise\Promise retryVccAsync($arguments = [])
 * @method \Dew\Acs\Result createVccGrantRule(array $arguments = [])
 * @method \Http\Promise\Promise createVccGrantRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVccGrantRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteVccGrantRuleAsync($arguments = [])
 * @method \Dew\Acs\Result getVccGrantRule(array $arguments = [])
 * @method \Http\Promise\Promise getVccGrantRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listVccGrantRules(array $arguments = [])
 * @method \Http\Promise\Promise listVccGrantRulesAsync($arguments = [])
 * @method \Dew\Acs\Result createVccRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise createVccRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVccRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise deleteVccRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result getVccRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise getVccRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result listVccRouteEntries(array $arguments = [])
 * @method \Http\Promise\Promise listVccRouteEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result createElasticNetworkInterface(array $arguments = [])
 * @method \Http\Promise\Promise createElasticNetworkInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteElasticNetworkInterface(array $arguments = [])
 * @method \Http\Promise\Promise deleteElasticNetworkInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result getElasticNetworkInterface(array $arguments = [])
 * @method \Http\Promise\Promise getElasticNetworkInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result listElasticNetworkInterfaces(array $arguments = [])
 * @method \Http\Promise\Promise listElasticNetworkInterfacesAsync($arguments = [])
 * @method \Dew\Acs\Result updateElasticNetworkInterface(array $arguments = [])
 * @method \Http\Promise\Promise updateElasticNetworkInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result attachElasticNetworkInterface(array $arguments = [])
 * @method \Http\Promise\Promise attachElasticNetworkInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result detachElasticNetworkInterface(array $arguments = [])
 * @method \Http\Promise\Promise detachElasticNetworkInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result assignLeniPrivateIpAddress(array $arguments = [])
 * @method \Http\Promise\Promise assignLeniPrivateIpAddressAsync($arguments = [])
 * @method \Dew\Acs\Result unassignLeniPrivateIpAddress(array $arguments = [])
 * @method \Http\Promise\Promise unassignLeniPrivateIpAddressAsync($arguments = [])
 * @method \Dew\Acs\Result getLeniPrivateIpAddress(array $arguments = [])
 * @method \Http\Promise\Promise getLeniPrivateIpAddressAsync($arguments = [])
 * @method \Dew\Acs\Result updateLeniPrivateIpAddress(array $arguments = [])
 * @method \Http\Promise\Promise updateLeniPrivateIpAddressAsync($arguments = [])
 * @method \Dew\Acs\Result listLeniPrivateIpAddresses(array $arguments = [])
 * @method \Http\Promise\Promise listLeniPrivateIpAddressesAsync($arguments = [])
 * @method \Dew\Acs\Result getNetworkInterface(array $arguments = [])
 * @method \Http\Promise\Promise getNetworkInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result listNetworkInterfaces(array $arguments = [])
 * @method \Http\Promise\Promise listNetworkInterfacesAsync($arguments = [])
 * @method \Dew\Acs\Result listLniPrivateIpAddress(array $arguments = [])
 * @method \Http\Promise\Promise listLniPrivateIpAddressAsync($arguments = [])
 * @method \Dew\Acs\Result assignPrivateIpAddress(array $arguments = [])
 * @method \Http\Promise\Promise assignPrivateIpAddressAsync($arguments = [])
 * @method \Dew\Acs\Result unAssignPrivateIpAddress(array $arguments = [])
 * @method \Http\Promise\Promise unAssignPrivateIpAddressAsync($arguments = [])
 * @method \Dew\Acs\Result getLniPrivateIpAddress(array $arguments = [])
 * @method \Http\Promise\Promise getLniPrivateIpAddressAsync($arguments = [])
 * @method \Dew\Acs\Result createEr(array $arguments = [])
 * @method \Http\Promise\Promise createErAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEr(array $arguments = [])
 * @method \Http\Promise\Promise deleteErAsync($arguments = [])
 * @method \Dew\Acs\Result getEr(array $arguments = [])
 * @method \Http\Promise\Promise getErAsync($arguments = [])
 * @method \Dew\Acs\Result listErs(array $arguments = [])
 * @method \Http\Promise\Promise listErsAsync($arguments = [])
 * @method \Dew\Acs\Result updateEr(array $arguments = [])
 * @method \Http\Promise\Promise updateErAsync($arguments = [])
 * @method \Dew\Acs\Result createErAttachment(array $arguments = [])
 * @method \Http\Promise\Promise createErAttachmentAsync($arguments = [])
 * @method \Dew\Acs\Result deleteErAttachment(array $arguments = [])
 * @method \Http\Promise\Promise deleteErAttachmentAsync($arguments = [])
 * @method \Dew\Acs\Result updateErAttachment(array $arguments = [])
 * @method \Http\Promise\Promise updateErAttachmentAsync($arguments = [])
 * @method \Dew\Acs\Result getErAttachment(array $arguments = [])
 * @method \Http\Promise\Promise getErAttachmentAsync($arguments = [])
 * @method \Dew\Acs\Result listErAttachments(array $arguments = [])
 * @method \Http\Promise\Promise listErAttachmentsAsync($arguments = [])
 * @method \Dew\Acs\Result updateErRouteMap(array $arguments = [])
 * @method \Http\Promise\Promise updateErRouteMapAsync($arguments = [])
 * @method \Dew\Acs\Result listErRouteMaps(array $arguments = [])
 * @method \Http\Promise\Promise listErRouteMapsAsync($arguments = [])
 * @method \Dew\Acs\Result getErRouteMap(array $arguments = [])
 * @method \Http\Promise\Promise getErRouteMapAsync($arguments = [])
 * @method \Dew\Acs\Result deleteErRouteMap(array $arguments = [])
 * @method \Http\Promise\Promise deleteErRouteMapAsync($arguments = [])
 * @method \Dew\Acs\Result createErRouteMap(array $arguments = [])
 * @method \Http\Promise\Promise createErRouteMapAsync($arguments = [])
 * @method \Dew\Acs\Result getErRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise getErRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result listErRouteEntries(array $arguments = [])
 * @method \Http\Promise\Promise listErRouteEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result listInstancesByNcd(array $arguments = [])
 * @method \Http\Promise\Promise listInstancesByNcdAsync($arguments = [])
 * @method \Dew\Acs\Result queryInstanceNcd(array $arguments = [])
 * @method \Http\Promise\Promise queryInstanceNcdAsync($arguments = [])
 * @method \Dew\Acs\Result getFabricTopology(array $arguments = [])
 * @method \Http\Promise\Promise getFabricTopologyAsync($arguments = [])
 * @method \Dew\Acs\Result getNodeInfoForPod(array $arguments = [])
 * @method \Http\Promise\Promise getNodeInfoForPodAsync($arguments = [])
 * @method \Dew\Acs\Result listNodeInfosForPod(array $arguments = [])
 * @method \Http\Promise\Promise listNodeInfosForPodAsync($arguments = [])
 * @method \Dew\Acs\Result getDestinationCidrBlock(array $arguments = [])
 * @method \Http\Promise\Promise getDestinationCidrBlockAsync($arguments = [])
 * @method \Dew\Acs\Result refundVcc(array $arguments = [])
 * @method \Http\Promise\Promise refundVccAsync($arguments = [])
 * @method \Dew\Acs\Result switchVccConnection(array $arguments = [])
 * @method \Http\Promise\Promise switchVccConnectionAsync($arguments = [])
 */
final class EfloClient extends AcsClient
{
    //
}
