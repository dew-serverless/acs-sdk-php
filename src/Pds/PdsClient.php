<?php

declare(strict_types=1);

namespace Dew\Acs\Pds;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createDomain(array $arguments = [])
 * @method \Http\Promise\Promise createDomainAsync($arguments = [])
 * @method \Dew\Acs\Result getDomain(array $arguments = [])
 * @method \Http\Promise\Promise getDomainAsync($arguments = [])
 * @method \Dew\Acs\Result updateDomain(array $arguments = [])
 * @method \Http\Promise\Promise updateDomainAsync($arguments = [])
 * @method \Dew\Acs\Result listDomains(array $arguments = [])
 * @method \Http\Promise\Promise listDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result searchDomains(array $arguments = [])
 * @method \Http\Promise\Promise searchDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDomain(array $arguments = [])
 * @method \Http\Promise\Promise deleteDomainAsync($arguments = [])
 * @method \Dew\Acs\Result authorize(array $arguments = [])
 * @method \Http\Promise\Promise authorizeAsync($arguments = [])
 * @method \Dew\Acs\Result token(array $arguments = [])
 * @method \Http\Promise\Promise tokenAsync($arguments = [])
 * @method \Dew\Acs\Result getLinkInfoByUserId(array $arguments = [])
 * @method \Http\Promise\Promise getLinkInfoByUserIdAsync($arguments = [])
 * @method \Dew\Acs\Result linkAccount(array $arguments = [])
 * @method \Http\Promise\Promise linkAccountAsync($arguments = [])
 * @method \Dew\Acs\Result getLinkInfo(array $arguments = [])
 * @method \Http\Promise\Promise getLinkInfoAsync($arguments = [])
 * @method \Dew\Acs\Result unLinkAccount(array $arguments = [])
 * @method \Http\Promise\Promise unLinkAccountAsync($arguments = [])
 * @method \Dew\Acs\Result createGroup(array $arguments = [])
 * @method \Http\Promise\Promise createGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getGroup(array $arguments = [])
 * @method \Http\Promise\Promise getGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listGroup(array $arguments = [])
 * @method \Http\Promise\Promise listGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteGroupAsync($arguments = [])
 * @method \Dew\Acs\Result addGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise addGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result removeGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise removeGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result listGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise listGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result createUser(array $arguments = [])
 * @method \Http\Promise\Promise createUserAsync($arguments = [])
 * @method \Dew\Acs\Result importUser(array $arguments = [])
 * @method \Http\Promise\Promise importUserAsync($arguments = [])
 * @method \Dew\Acs\Result updateUser(array $arguments = [])
 * @method \Http\Promise\Promise updateUserAsync($arguments = [])
 * @method \Dew\Acs\Result getUser(array $arguments = [])
 * @method \Http\Promise\Promise getUserAsync($arguments = [])
 * @method \Dew\Acs\Result listUser(array $arguments = [])
 * @method \Http\Promise\Promise listUserAsync($arguments = [])
 * @method \Dew\Acs\Result searchUser(array $arguments = [])
 * @method \Http\Promise\Promise searchUserAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUser(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserAsync($arguments = [])
 * @method \Dew\Acs\Result createDrive(array $arguments = [])
 * @method \Http\Promise\Promise createDriveAsync($arguments = [])
 * @method \Dew\Acs\Result updateDrive(array $arguments = [])
 * @method \Http\Promise\Promise updateDriveAsync($arguments = [])
 * @method \Dew\Acs\Result getDrive(array $arguments = [])
 * @method \Http\Promise\Promise getDriveAsync($arguments = [])
 * @method \Dew\Acs\Result listDrive(array $arguments = [])
 * @method \Http\Promise\Promise listDriveAsync($arguments = [])
 * @method \Dew\Acs\Result getDefaultDrive(array $arguments = [])
 * @method \Http\Promise\Promise getDefaultDriveAsync($arguments = [])
 * @method \Dew\Acs\Result listMyDrives(array $arguments = [])
 * @method \Http\Promise\Promise listMyDrivesAsync($arguments = [])
 * @method \Dew\Acs\Result searchDrive(array $arguments = [])
 * @method \Http\Promise\Promise searchDriveAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDrive(array $arguments = [])
 * @method \Http\Promise\Promise deleteDriveAsync($arguments = [])
 * @method \Dew\Acs\Result createFile(array $arguments = [])
 * @method \Http\Promise\Promise createFileAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFile(array $arguments = [])
 * @method \Http\Promise\Promise deleteFileAsync($arguments = [])
 * @method \Dew\Acs\Result updateFile(array $arguments = [])
 * @method \Http\Promise\Promise updateFileAsync($arguments = [])
 * @method \Dew\Acs\Result searchFile(array $arguments = [])
 * @method \Http\Promise\Promise searchFileAsync($arguments = [])
 * @method \Dew\Acs\Result listFile(array $arguments = [])
 * @method \Http\Promise\Promise listFileAsync($arguments = [])
 * @method \Dew\Acs\Result getFile(array $arguments = [])
 * @method \Http\Promise\Promise getFileAsync($arguments = [])
 * @method \Dew\Acs\Result downloadFile(array $arguments = [])
 * @method \Http\Promise\Promise downloadFileAsync($arguments = [])
 * @method \Dew\Acs\Result getUploadUrl(array $arguments = [])
 * @method \Http\Promise\Promise getUploadUrlAsync($arguments = [])
 * @method \Dew\Acs\Result listUploadedParts(array $arguments = [])
 * @method \Http\Promise\Promise listUploadedPartsAsync($arguments = [])
 * @method \Dew\Acs\Result completeFile(array $arguments = [])
 * @method \Http\Promise\Promise completeFileAsync($arguments = [])
 * @method \Dew\Acs\Result moveFile(array $arguments = [])
 * @method \Http\Promise\Promise moveFileAsync($arguments = [])
 * @method \Dew\Acs\Result copyFile(array $arguments = [])
 * @method \Http\Promise\Promise copyFileAsync($arguments = [])
 * @method \Dew\Acs\Result getDownloadUrl(array $arguments = [])
 * @method \Http\Promise\Promise getDownloadUrlAsync($arguments = [])
 * @method \Dew\Acs\Result filePutUserTags(array $arguments = [])
 * @method \Http\Promise\Promise filePutUserTagsAsync($arguments = [])
 * @method \Dew\Acs\Result fileDeleteUserTags(array $arguments = [])
 * @method \Http\Promise\Promise fileDeleteUserTagsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRevision(array $arguments = [])
 * @method \Http\Promise\Promise deleteRevisionAsync($arguments = [])
 * @method \Dew\Acs\Result updateRevision(array $arguments = [])
 * @method \Http\Promise\Promise updateRevisionAsync($arguments = [])
 * @method \Dew\Acs\Result restoreRevision(array $arguments = [])
 * @method \Http\Promise\Promise restoreRevisionAsync($arguments = [])
 * @method \Dew\Acs\Result listRevision(array $arguments = [])
 * @method \Http\Promise\Promise listRevisionAsync($arguments = [])
 * @method \Dew\Acs\Result getRevision(array $arguments = [])
 * @method \Http\Promise\Promise getRevisionAsync($arguments = [])
 * @method \Dew\Acs\Result scanFile(array $arguments = [])
 * @method \Http\Promise\Promise scanFileAsync($arguments = [])
 * @method \Dew\Acs\Result listDelta(array $arguments = [])
 * @method \Http\Promise\Promise listDeltaAsync($arguments = [])
 * @method \Dew\Acs\Result deltaGetLastCursor(array $arguments = [])
 * @method \Http\Promise\Promise deltaGetLastCursorAsync($arguments = [])
 * @method \Dew\Acs\Result listReceivedFile(array $arguments = [])
 * @method \Http\Promise\Promise listReceivedFileAsync($arguments = [])
 * @method \Dew\Acs\Result listMyGroupDrive(array $arguments = [])
 * @method \Http\Promise\Promise listMyGroupDriveAsync($arguments = [])
 * @method \Dew\Acs\Result fileRemovePermission(array $arguments = [])
 * @method \Http\Promise\Promise fileRemovePermissionAsync($arguments = [])
 * @method \Dew\Acs\Result fileAddPermission(array $arguments = [])
 * @method \Http\Promise\Promise fileAddPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result fileListPermission(array $arguments = [])
 * @method \Http\Promise\Promise fileListPermissionAsync($arguments = [])
 * @method \Dew\Acs\Result listAssignment(array $arguments = [])
 * @method \Http\Promise\Promise listAssignmentAsync($arguments = [])
 * @method \Dew\Acs\Result assignRole(array $arguments = [])
 * @method \Http\Promise\Promise assignRoleAsync($arguments = [])
 * @method \Dew\Acs\Result cancelAssignRole(array $arguments = [])
 * @method \Http\Promise\Promise cancelAssignRoleAsync($arguments = [])
 * @method \Dew\Acs\Result createShareLink(array $arguments = [])
 * @method \Http\Promise\Promise createShareLinkAsync($arguments = [])
 * @method \Dew\Acs\Result updateShareLink(array $arguments = [])
 * @method \Http\Promise\Promise updateShareLinkAsync($arguments = [])
 * @method \Dew\Acs\Result searchShareLink(array $arguments = [])
 * @method \Http\Promise\Promise searchShareLinkAsync($arguments = [])
 * @method \Dew\Acs\Result cancelShareLink(array $arguments = [])
 * @method \Http\Promise\Promise cancelShareLinkAsync($arguments = [])
 * @method \Dew\Acs\Result listShareLink(array $arguments = [])
 * @method \Http\Promise\Promise listShareLinkAsync($arguments = [])
 * @method \Dew\Acs\Result getShareLink(array $arguments = [])
 * @method \Http\Promise\Promise getShareLinkAsync($arguments = [])
 * @method \Dew\Acs\Result getShareLinkByAnonymous(array $arguments = [])
 * @method \Http\Promise\Promise getShareLinkByAnonymousAsync($arguments = [])
 * @method \Dew\Acs\Result getShareLinkToken(array $arguments = [])
 * @method \Http\Promise\Promise getShareLinkTokenAsync($arguments = [])
 * @method \Dew\Acs\Result trashFile(array $arguments = [])
 * @method \Http\Promise\Promise trashFileAsync($arguments = [])
 * @method \Dew\Acs\Result clearRecyclebin(array $arguments = [])
 * @method \Http\Promise\Promise clearRecyclebinAsync($arguments = [])
 * @method \Dew\Acs\Result listRecyclebin(array $arguments = [])
 * @method \Http\Promise\Promise listRecyclebinAsync($arguments = [])
 * @method \Dew\Acs\Result restoreFile(array $arguments = [])
 * @method \Http\Promise\Promise restoreFileAsync($arguments = [])
 * @method \Dew\Acs\Result updateFacegroup(array $arguments = [])
 * @method \Http\Promise\Promise updateFacegroupAsync($arguments = [])
 * @method \Dew\Acs\Result listTags(array $arguments = [])
 * @method \Http\Promise\Promise listTagsAsync($arguments = [])
 * @method \Dew\Acs\Result listAddressGroups(array $arguments = [])
 * @method \Http\Promise\Promise listAddressGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result listFacegroups(array $arguments = [])
 * @method \Http\Promise\Promise listFacegroupsAsync($arguments = [])
 * @method \Dew\Acs\Result searchAddressGroups(array $arguments = [])
 * @method \Http\Promise\Promise searchAddressGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result removeFaceGroupFile(array $arguments = [])
 * @method \Http\Promise\Promise removeFaceGroupFileAsync($arguments = [])
 * @method \Dew\Acs\Result createStory(array $arguments = [])
 * @method \Http\Promise\Promise createStoryAsync($arguments = [])
 * @method \Dew\Acs\Result createCustomizedStory(array $arguments = [])
 * @method \Http\Promise\Promise createCustomizedStoryAsync($arguments = [])
 * @method \Dew\Acs\Result searchStories(array $arguments = [])
 * @method \Http\Promise\Promise searchStoriesAsync($arguments = [])
 * @method \Dew\Acs\Result getStory(array $arguments = [])
 * @method \Http\Promise\Promise getStoryAsync($arguments = [])
 * @method \Dew\Acs\Result updateStory(array $arguments = [])
 * @method \Http\Promise\Promise updateStoryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteStory(array $arguments = [])
 * @method \Http\Promise\Promise deleteStoryAsync($arguments = [])
 * @method \Dew\Acs\Result addStoryFiles(array $arguments = [])
 * @method \Http\Promise\Promise addStoryFilesAsync($arguments = [])
 * @method \Dew\Acs\Result removeStoryFiles(array $arguments = [])
 * @method \Http\Promise\Promise removeStoryFilesAsync($arguments = [])
 * @method \Dew\Acs\Result createSimilarImageClusterTask(array $arguments = [])
 * @method \Http\Promise\Promise createSimilarImageClusterTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getTaskStatus(array $arguments = [])
 * @method \Http\Promise\Promise getTaskStatusAsync($arguments = [])
 * @method \Dew\Acs\Result searchSimilarImageClusters(array $arguments = [])
 * @method \Http\Promise\Promise searchSimilarImageClustersAsync($arguments = [])
 * @method \Dew\Acs\Result getAsyncTask(array $arguments = [])
 * @method \Http\Promise\Promise getAsyncTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getVideoPreviewPlayMeta(array $arguments = [])
 * @method \Http\Promise\Promise getVideoPreviewPlayMetaAsync($arguments = [])
 * @method \Dew\Acs\Result getVideoPreviewPlayInfo(array $arguments = [])
 * @method \Http\Promise\Promise getVideoPreviewPlayInfoAsync($arguments = [])
 * @method \Dew\Acs\Result createIdentityToBenefitPkgMapping(array $arguments = [])
 * @method \Http\Promise\Promise createIdentityToBenefitPkgMappingAsync($arguments = [])
 * @method \Dew\Acs\Result updateIdentityToBenefitPkgMapping(array $arguments = [])
 * @method \Http\Promise\Promise updateIdentityToBenefitPkgMappingAsync($arguments = [])
 * @method \Dew\Acs\Result getIdentityToBenefitPkgMapping(array $arguments = [])
 * @method \Http\Promise\Promise getIdentityToBenefitPkgMappingAsync($arguments = [])
 * @method \Dew\Acs\Result listIdentityToBenefitPkgMapping(array $arguments = [])
 * @method \Http\Promise\Promise listIdentityToBenefitPkgMappingAsync($arguments = [])
 * @method \Dew\Acs\Result investigateFile(array $arguments = [])
 * @method \Http\Promise\Promise investigateFileAsync($arguments = [])
 * @method \Dew\Acs\Result csiGetFileInfo(array $arguments = [])
 * @method \Http\Promise\Promise csiGetFileInfoAsync($arguments = [])
 * @method \Dew\Acs\Result batch(array $arguments = [])
 * @method \Http\Promise\Promise batchAsync($arguments = [])
 * @method \Dew\Acs\Result getDomainQuota(array $arguments = [])
 * @method \Http\Promise\Promise getDomainQuotaAsync($arguments = [])
 * @method \Dew\Acs\Result groupUpdateName(array $arguments = [])
 * @method \Http\Promise\Promise groupUpdateNameAsync($arguments = [])
 * @method \Dew\Acs\Result innerSignIn(array $arguments = [])
 * @method \Http\Promise\Promise innerSignInAsync($arguments = [])
 * @method \Dew\Acs\Result selectDomain(array $arguments = [])
 * @method \Http\Promise\Promise selectDomainAsync($arguments = [])
 */
final class PdsClient extends AcsClient
{
    //
}
