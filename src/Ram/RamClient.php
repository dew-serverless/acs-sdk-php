<?php

declare(strict_types=1);

namespace Dew\Acs\Ram;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createUser(array $arguments = [])
 * @method \Http\Promise\Promise createUserAsync($arguments = [])
 * @method \Dew\Acs\Result getUser(array $arguments = [])
 * @method \Http\Promise\Promise getUserAsync($arguments = [])
 * @method \Dew\Acs\Result updateUser(array $arguments = [])
 * @method \Http\Promise\Promise updateUserAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUser(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserAsync($arguments = [])
 * @method \Dew\Acs\Result listUsers(array $arguments = [])
 * @method \Http\Promise\Promise listUsersAsync($arguments = [])
 * @method \Dew\Acs\Result createLoginProfile(array $arguments = [])
 * @method \Http\Promise\Promise createLoginProfileAsync($arguments = [])
 * @method \Dew\Acs\Result getLoginProfile(array $arguments = [])
 * @method \Http\Promise\Promise getLoginProfileAsync($arguments = [])
 * @method \Dew\Acs\Result updateLoginProfile(array $arguments = [])
 * @method \Http\Promise\Promise updateLoginProfileAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLoginProfile(array $arguments = [])
 * @method \Http\Promise\Promise deleteLoginProfileAsync($arguments = [])
 * @method \Dew\Acs\Result changePassword(array $arguments = [])
 * @method \Http\Promise\Promise changePasswordAsync($arguments = [])
 * @method \Dew\Acs\Result createAccessKey(array $arguments = [])
 * @method \Http\Promise\Promise createAccessKeyAsync($arguments = [])
 * @method \Dew\Acs\Result updateAccessKey(array $arguments = [])
 * @method \Http\Promise\Promise updateAccessKeyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccessKey(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccessKeyAsync($arguments = [])
 * @method \Dew\Acs\Result listAccessKeys(array $arguments = [])
 * @method \Http\Promise\Promise listAccessKeysAsync($arguments = [])
 * @method \Dew\Acs\Result getAccessKeyLastUsed(array $arguments = [])
 * @method \Http\Promise\Promise getAccessKeyLastUsedAsync($arguments = [])
 * @method \Dew\Acs\Result createVirtualMFADevice(array $arguments = [])
 * @method \Http\Promise\Promise createVirtualMFADeviceAsync($arguments = [])
 * @method \Dew\Acs\Result getUserMFAInfo(array $arguments = [])
 * @method \Http\Promise\Promise getUserMFAInfoAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVirtualMFADevice(array $arguments = [])
 * @method \Http\Promise\Promise deleteVirtualMFADeviceAsync($arguments = [])
 * @method \Dew\Acs\Result listVirtualMFADevices(array $arguments = [])
 * @method \Http\Promise\Promise listVirtualMFADevicesAsync($arguments = [])
 * @method \Dew\Acs\Result bindMFADevice(array $arguments = [])
 * @method \Http\Promise\Promise bindMFADeviceAsync($arguments = [])
 * @method \Dew\Acs\Result unbindMFADevice(array $arguments = [])
 * @method \Http\Promise\Promise unbindMFADeviceAsync($arguments = [])
 * @method \Dew\Acs\Result createGroup(array $arguments = [])
 * @method \Http\Promise\Promise createGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getGroup(array $arguments = [])
 * @method \Http\Promise\Promise getGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listGroups(array $arguments = [])
 * @method \Http\Promise\Promise listGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result listGroupsForUser(array $arguments = [])
 * @method \Http\Promise\Promise listGroupsForUserAsync($arguments = [])
 * @method \Dew\Acs\Result listUsersForGroup(array $arguments = [])
 * @method \Http\Promise\Promise listUsersForGroupAsync($arguments = [])
 * @method \Dew\Acs\Result addUserToGroup(array $arguments = [])
 * @method \Http\Promise\Promise addUserToGroupAsync($arguments = [])
 * @method \Dew\Acs\Result removeUserFromGroup(array $arguments = [])
 * @method \Http\Promise\Promise removeUserFromGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createRole(array $arguments = [])
 * @method \Http\Promise\Promise createRoleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRole(array $arguments = [])
 * @method \Http\Promise\Promise deleteRoleAsync($arguments = [])
 * @method \Dew\Acs\Result updateRole(array $arguments = [])
 * @method \Http\Promise\Promise updateRoleAsync($arguments = [])
 * @method \Dew\Acs\Result getRole(array $arguments = [])
 * @method \Http\Promise\Promise getRoleAsync($arguments = [])
 * @method \Dew\Acs\Result listRoles(array $arguments = [])
 * @method \Http\Promise\Promise listRolesAsync($arguments = [])
 * @method \Dew\Acs\Result createPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result updatePolicyDescription(array $arguments = [])
 * @method \Http\Promise\Promise updatePolicyDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result deletePolicy(array $arguments = [])
 * @method \Http\Promise\Promise deletePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result createPolicyVersion(array $arguments = [])
 * @method \Http\Promise\Promise createPolicyVersionAsync($arguments = [])
 * @method \Dew\Acs\Result getPolicyVersion(array $arguments = [])
 * @method \Http\Promise\Promise getPolicyVersionAsync($arguments = [])
 * @method \Dew\Acs\Result deletePolicyVersion(array $arguments = [])
 * @method \Http\Promise\Promise deletePolicyVersionAsync($arguments = [])
 * @method \Dew\Acs\Result listPolicyVersions(array $arguments = [])
 * @method \Http\Promise\Promise listPolicyVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result setDefaultPolicyVersion(array $arguments = [])
 * @method \Http\Promise\Promise setDefaultPolicyVersionAsync($arguments = [])
 * @method \Dew\Acs\Result attachPolicyToUser(array $arguments = [])
 * @method \Http\Promise\Promise attachPolicyToUserAsync($arguments = [])
 * @method \Dew\Acs\Result detachPolicyFromUser(array $arguments = [])
 * @method \Http\Promise\Promise detachPolicyFromUserAsync($arguments = [])
 * @method \Dew\Acs\Result attachPolicyToGroup(array $arguments = [])
 * @method \Http\Promise\Promise attachPolicyToGroupAsync($arguments = [])
 * @method \Dew\Acs\Result detachPolicyFromGroup(array $arguments = [])
 * @method \Http\Promise\Promise detachPolicyFromGroupAsync($arguments = [])
 * @method \Dew\Acs\Result attachPolicyToRole(array $arguments = [])
 * @method \Http\Promise\Promise attachPolicyToRoleAsync($arguments = [])
 * @method \Dew\Acs\Result detachPolicyFromRole(array $arguments = [])
 * @method \Http\Promise\Promise detachPolicyFromRoleAsync($arguments = [])
 * @method \Dew\Acs\Result listPoliciesForUser(array $arguments = [])
 * @method \Http\Promise\Promise listPoliciesForUserAsync($arguments = [])
 * @method \Dew\Acs\Result listPoliciesForGroup(array $arguments = [])
 * @method \Http\Promise\Promise listPoliciesForGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listPoliciesForRole(array $arguments = [])
 * @method \Http\Promise\Promise listPoliciesForRoleAsync($arguments = [])
 * @method \Dew\Acs\Result listEntitiesForPolicy(array $arguments = [])
 * @method \Http\Promise\Promise listEntitiesForPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result setAccountAlias(array $arguments = [])
 * @method \Http\Promise\Promise setAccountAliasAsync($arguments = [])
 * @method \Dew\Acs\Result getAccountAlias(array $arguments = [])
 * @method \Http\Promise\Promise getAccountAliasAsync($arguments = [])
 * @method \Dew\Acs\Result clearAccountAlias(array $arguments = [])
 * @method \Http\Promise\Promise clearAccountAliasAsync($arguments = [])
 * @method \Dew\Acs\Result setPasswordPolicy(array $arguments = [])
 * @method \Http\Promise\Promise setPasswordPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getPasswordPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getPasswordPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result setSecurityPreference(array $arguments = [])
 * @method \Http\Promise\Promise setSecurityPreferenceAsync($arguments = [])
 * @method \Dew\Acs\Result getSecurityPreference(array $arguments = [])
 * @method \Http\Promise\Promise getSecurityPreferenceAsync($arguments = [])
 * @method \Dew\Acs\Result decodeDiagnosticMessage(array $arguments = [])
 * @method \Http\Promise\Promise decodeDiagnosticMessageAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 */
final class RamClient extends AcsClient
{
    //
}
