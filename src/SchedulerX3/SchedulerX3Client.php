<?php

declare(strict_types=1);

namespace Dew\Acs\SchedulerX3;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createCluster(array $arguments = [])
 * @method \Http\Promise\Promise createClusterAsync($arguments = [])
 * @method \Dew\Acs\Result updateCluster(array $arguments = [])
 * @method \Http\Promise\Promise updateClusterAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCluster(array $arguments = [])
 * @method \Http\Promise\Promise deleteClusterAsync($arguments = [])
 * @method \Dew\Acs\Result getCluster(array $arguments = [])
 * @method \Http\Promise\Promise getClusterAsync($arguments = [])
 * @method \Dew\Acs\Result listClusters(array $arguments = [])
 * @method \Http\Promise\Promise listClustersAsync($arguments = [])
 * @method \Dew\Acs\Result createApp(array $arguments = [])
 * @method \Http\Promise\Promise createAppAsync($arguments = [])
 * @method \Dew\Acs\Result updateApp(array $arguments = [])
 * @method \Http\Promise\Promise updateAppAsync($arguments = [])
 * @method \Dew\Acs\Result deleteApp(array $arguments = [])
 * @method \Http\Promise\Promise deleteAppAsync($arguments = [])
 * @method \Dew\Acs\Result listApps(array $arguments = [])
 * @method \Http\Promise\Promise listAppsAsync($arguments = [])
 * @method \Dew\Acs\Result listAppNames(array $arguments = [])
 * @method \Http\Promise\Promise listAppNamesAsync($arguments = [])
 * @method \Dew\Acs\Result listLables(array $arguments = [])
 * @method \Http\Promise\Promise listLablesAsync($arguments = [])
 * @method \Dew\Acs\Result listExecutors(array $arguments = [])
 * @method \Http\Promise\Promise listExecutorsAsync($arguments = [])
 * @method \Dew\Acs\Result createJob(array $arguments = [])
 * @method \Http\Promise\Promise createJobAsync($arguments = [])
 * @method \Dew\Acs\Result updateJob(array $arguments = [])
 * @method \Http\Promise\Promise updateJobAsync($arguments = [])
 * @method \Dew\Acs\Result deleteJobs(array $arguments = [])
 * @method \Http\Promise\Promise deleteJobsAsync($arguments = [])
 * @method \Dew\Acs\Result operateEnableJobs(array $arguments = [])
 * @method \Http\Promise\Promise operateEnableJobsAsync($arguments = [])
 * @method \Dew\Acs\Result operateDisableJobs(array $arguments = [])
 * @method \Http\Promise\Promise operateDisableJobsAsync($arguments = [])
 * @method \Dew\Acs\Result operateRerunJob(array $arguments = [])
 * @method \Http\Promise\Promise operateRerunJobAsync($arguments = [])
 * @method \Dew\Acs\Result listJobs(array $arguments = [])
 * @method \Http\Promise\Promise listJobsAsync($arguments = [])
 * @method \Dew\Acs\Result getDesigateInfo(array $arguments = [])
 * @method \Http\Promise\Promise getDesigateInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getJobExecution(array $arguments = [])
 * @method \Http\Promise\Promise getJobExecutionAsync($arguments = [])
 * @method \Dew\Acs\Result operateStopJobExecution(array $arguments = [])
 * @method \Http\Promise\Promise operateStopJobExecutionAsync($arguments = [])
 * @method \Dew\Acs\Result operateDesignateExecutors(array $arguments = [])
 * @method \Http\Promise\Promise operateDesignateExecutorsAsync($arguments = [])
 * @method \Dew\Acs\Result operateRetryJobExecution(array $arguments = [])
 * @method \Http\Promise\Promise operateRetryJobExecutionAsync($arguments = [])
 * @method \Dew\Acs\Result operateExecuteJob(array $arguments = [])
 * @method \Http\Promise\Promise operateExecuteJobAsync($arguments = [])
 * @method \Dew\Acs\Result getJobExecutionProgress(array $arguments = [])
 * @method \Http\Promise\Promise getJobExecutionProgressAsync($arguments = [])
 * @method \Dew\Acs\Result getJobExecutionThreadDump(array $arguments = [])
 * @method \Http\Promise\Promise getJobExecutionThreadDumpAsync($arguments = [])
 * @method \Dew\Acs\Result listJobExecutions(array $arguments = [])
 * @method \Http\Promise\Promise listJobExecutionsAsync($arguments = [])
 * @method \Dew\Acs\Result getLogEvent(array $arguments = [])
 * @method \Http\Promise\Promise getLogEventAsync($arguments = [])
 * @method \Dew\Acs\Result importJobs(array $arguments = [])
 * @method \Http\Promise\Promise importJobsAsync($arguments = [])
 * @method \Dew\Acs\Result listRegions(array $arguments = [])
 * @method \Http\Promise\Promise listRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result listRegionZone(array $arguments = [])
 * @method \Http\Promise\Promise listRegionZoneAsync($arguments = [])
 * @method \Dew\Acs\Result listCalendarNames(array $arguments = [])
 * @method \Http\Promise\Promise listCalendarNamesAsync($arguments = [])
 * @method \Dew\Acs\Result listScheduleEvent(array $arguments = [])
 * @method \Http\Promise\Promise listScheduleEventAsync($arguments = [])
 * @method \Dew\Acs\Result listAlarmEvent(array $arguments = [])
 * @method \Http\Promise\Promise listAlarmEventAsync($arguments = [])
 * @method \Dew\Acs\Result listScheduleTimes(array $arguments = [])
 * @method \Http\Promise\Promise listScheduleTimesAsync($arguments = [])
 * @method \Dew\Acs\Result importCalendar(array $arguments = [])
 * @method \Http\Promise\Promise importCalendarAsync($arguments = [])
 * @method \Dew\Acs\Result exportJobs(array $arguments = [])
 * @method \Http\Promise\Promise exportJobsAsync($arguments = [])
 * @method \Dew\Acs\Result getLog(array $arguments = [])
 * @method \Http\Promise\Promise getLogAsync($arguments = [])
 */
final class SchedulerX3Client extends AcsClient
{
    //
}
