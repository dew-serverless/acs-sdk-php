<?php

declare(strict_types=1);

namespace Dew\Acs\QuickbiPublic;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result addUser(array $arguments = [])
 * @method \Http\Promise\Promise addUserAsync($arguments = [])
 * @method \Dew\Acs\Result batchAddFeishuUsers(array $arguments = [])
 * @method \Http\Promise\Promise batchAddFeishuUsersAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUser(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserAsync($arguments = [])
 * @method \Dew\Acs\Result updateUser(array $arguments = [])
 * @method \Http\Promise\Promise updateUserAsync($arguments = [])
 * @method \Dew\Acs\Result queryUserList(array $arguments = [])
 * @method \Http\Promise\Promise queryUserListAsync($arguments = [])
 * @method \Dew\Acs\Result queryUserInfoByUserId(array $arguments = [])
 * @method \Http\Promise\Promise queryUserInfoByUserIdAsync($arguments = [])
 * @method \Dew\Acs\Result queryUserInfoByAccount(array $arguments = [])
 * @method \Http\Promise\Promise queryUserInfoByAccountAsync($arguments = [])
 * @method \Dew\Acs\Result createUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise createUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result addUserGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise addUserGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result addUserGroupMembers(array $arguments = [])
 * @method \Http\Promise\Promise addUserGroupMembersAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserGroupMembers(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserGroupMembersAsync($arguments = [])
 * @method \Dew\Acs\Result withdrawAllUserGroups(array $arguments = [])
 * @method \Http\Promise\Promise withdrawAllUserGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateUserGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getUserGroupInfo(array $arguments = [])
 * @method \Http\Promise\Promise getUserGroupInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listByUserGroupId(array $arguments = [])
 * @method \Http\Promise\Promise listByUserGroupIdAsync($arguments = [])
 * @method \Dew\Acs\Result listUserGroupsByUserId(array $arguments = [])
 * @method \Http\Promise\Promise listUserGroupsByUserIdAsync($arguments = [])
 * @method \Dew\Acs\Result queryUserGroupListByParentId(array $arguments = [])
 * @method \Http\Promise\Promise queryUserGroupListByParentIdAsync($arguments = [])
 * @method \Dew\Acs\Result queryUserGroupMember(array $arguments = [])
 * @method \Http\Promise\Promise queryUserGroupMemberAsync($arguments = [])
 * @method \Dew\Acs\Result addUserTagMeta(array $arguments = [])
 * @method \Http\Promise\Promise addUserTagMetaAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserTagMeta(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserTagMetaAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserTagValue(array $arguments = [])
 * @method \Http\Promise\Promise updateUserTagValueAsync($arguments = [])
 * @method \Dew\Acs\Result queryUserTagMetaList(array $arguments = [])
 * @method \Http\Promise\Promise queryUserTagMetaListAsync($arguments = [])
 * @method \Dew\Acs\Result queryUserTagValueList(array $arguments = [])
 * @method \Http\Promise\Promise queryUserTagValueListAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserTagMeta(array $arguments = [])
 * @method \Http\Promise\Promise updateUserTagMetaAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkspaceRoleUsers(array $arguments = [])
 * @method \Http\Promise\Promise listWorkspaceRoleUsersAsync($arguments = [])
 * @method \Dew\Acs\Result queryWorkspaceRoleConfig(array $arguments = [])
 * @method \Http\Promise\Promise queryWorkspaceRoleConfigAsync($arguments = [])
 * @method \Dew\Acs\Result queryOrganizationRoleConfig(array $arguments = [])
 * @method \Http\Promise\Promise queryOrganizationRoleConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listWorkspaceRoles(array $arguments = [])
 * @method \Http\Promise\Promise listWorkspaceRolesAsync($arguments = [])
 * @method \Dew\Acs\Result listOrganizationRoles(array $arguments = [])
 * @method \Http\Promise\Promise listOrganizationRolesAsync($arguments = [])
 * @method \Dew\Acs\Result listOrganizationRoleUsers(array $arguments = [])
 * @method \Http\Promise\Promise listOrganizationRoleUsersAsync($arguments = [])
 * @method \Dew\Acs\Result addShareReport(array $arguments = [])
 * @method \Http\Promise\Promise addShareReportAsync($arguments = [])
 * @method \Dew\Acs\Result cancelReportShare(array $arguments = [])
 * @method \Http\Promise\Promise cancelReportShareAsync($arguments = [])
 * @method \Dew\Acs\Result querySharesToUserList(array $arguments = [])
 * @method \Http\Promise\Promise querySharesToUserListAsync($arguments = [])
 * @method \Dew\Acs\Result queryShareList(array $arguments = [])
 * @method \Http\Promise\Promise queryShareListAsync($arguments = [])
 * @method \Dew\Acs\Result authorizeMenu(array $arguments = [])
 * @method \Http\Promise\Promise authorizeMenuAsync($arguments = [])
 * @method \Dew\Acs\Result cancelAuthorizationMenu(array $arguments = [])
 * @method \Http\Promise\Promise cancelAuthorizationMenuAsync($arguments = [])
 * @method \Dew\Acs\Result changeVisibilityModel(array $arguments = [])
 * @method \Http\Promise\Promise changeVisibilityModelAsync($arguments = [])
 * @method \Dew\Acs\Result listPortalMenus(array $arguments = [])
 * @method \Http\Promise\Promise listPortalMenusAsync($arguments = [])
 * @method \Dew\Acs\Result listPortalMenuAuthorization(array $arguments = [])
 * @method \Http\Promise\Promise listPortalMenuAuthorizationAsync($arguments = [])
 * @method \Dew\Acs\Result setDataLevelPermissionRuleConfig(array $arguments = [])
 * @method \Http\Promise\Promise setDataLevelPermissionRuleConfigAsync($arguments = [])
 * @method \Dew\Acs\Result addDataLevelPermissionRuleUsers(array $arguments = [])
 * @method \Http\Promise\Promise addDataLevelPermissionRuleUsersAsync($arguments = [])
 * @method \Dew\Acs\Result addDataLevelPermissionWhiteList(array $arguments = [])
 * @method \Http\Promise\Promise addDataLevelPermissionWhiteListAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataLevelRuleConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataLevelRuleConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataLevelPermissionRuleUsers(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataLevelPermissionRuleUsersAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataLevelPermissionStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateDataLevelPermissionStatusAsync($arguments = [])
 * @method \Dew\Acs\Result setDataLevelPermissionExtraConfig(array $arguments = [])
 * @method \Http\Promise\Promise setDataLevelPermissionExtraConfigAsync($arguments = [])
 * @method \Dew\Acs\Result setDataLevelPermissionWhiteList(array $arguments = [])
 * @method \Http\Promise\Promise setDataLevelPermissionWhiteListAsync($arguments = [])
 * @method \Dew\Acs\Result queryDatasetSwitchInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryDatasetSwitchInfoAsync($arguments = [])
 * @method \Dew\Acs\Result listCubeDataLevelPermissionConfig(array $arguments = [])
 * @method \Http\Promise\Promise listCubeDataLevelPermissionConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listDataLevelPermissionWhiteList(array $arguments = [])
 * @method \Http\Promise\Promise listDataLevelPermissionWhiteListAsync($arguments = [])
 * @method \Dew\Acs\Result queryApprovalInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryApprovalInfoAsync($arguments = [])
 * @method \Dew\Acs\Result resultCallback(array $arguments = [])
 * @method \Http\Promise\Promise resultCallbackAsync($arguments = [])
 * @method \Dew\Acs\Result updateEmbeddedStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateEmbeddedStatusAsync($arguments = [])
 * @method \Dew\Acs\Result queryWorksByOrganization(array $arguments = [])
 * @method \Http\Promise\Promise queryWorksByOrganizationAsync($arguments = [])
 * @method \Dew\Acs\Result queryWorksByWorkspace(array $arguments = [])
 * @method \Http\Promise\Promise queryWorksByWorkspaceAsync($arguments = [])
 * @method \Dew\Acs\Result queryReadableResourcesListByUserId(array $arguments = [])
 * @method \Http\Promise\Promise queryReadableResourcesListByUserIdAsync($arguments = [])
 * @method \Dew\Acs\Result checkReadable(array $arguments = [])
 * @method \Http\Promise\Promise checkReadableAsync($arguments = [])
 * @method \Dew\Acs\Result queryEmbeddedInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryEmbeddedInfoAsync($arguments = [])
 * @method \Dew\Acs\Result queryEmbeddedStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryEmbeddedStatusAsync($arguments = [])
 * @method \Dew\Acs\Result queryWorks(array $arguments = [])
 * @method \Http\Promise\Promise queryWorksAsync($arguments = [])
 * @method \Dew\Acs\Result queryWorksBloodRelationship(array $arguments = [])
 * @method \Http\Promise\Promise queryWorksBloodRelationshipAsync($arguments = [])
 * @method \Dew\Acs\Result queryComponentPerformance(array $arguments = [])
 * @method \Http\Promise\Promise queryComponentPerformanceAsync($arguments = [])
 * @method \Dew\Acs\Result queryReportPerformance(array $arguments = [])
 * @method \Http\Promise\Promise queryReportPerformanceAsync($arguments = [])
 * @method \Dew\Acs\Result getWorksEmbedList(array $arguments = [])
 * @method \Http\Promise\Promise getWorksEmbedListAsync($arguments = [])
 * @method \Dew\Acs\Result dataSetBlood(array $arguments = [])
 * @method \Http\Promise\Promise dataSetBloodAsync($arguments = [])
 * @method \Dew\Acs\Result dataSourceBlood(array $arguments = [])
 * @method \Http\Promise\Promise dataSourceBloodAsync($arguments = [])
 * @method \Dew\Acs\Result modifyApiDatasourceParameters(array $arguments = [])
 * @method \Http\Promise\Promise modifyApiDatasourceParametersAsync($arguments = [])
 * @method \Dew\Acs\Result listApiDatasource(array $arguments = [])
 * @method \Http\Promise\Promise listApiDatasourceAsync($arguments = [])
 * @method \Dew\Acs\Result queryDatasetInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryDatasetInfoAsync($arguments = [])
 * @method \Dew\Acs\Result queryDatasetDetailInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryDatasetDetailInfoAsync($arguments = [])
 * @method \Dew\Acs\Result queryDatasetList(array $arguments = [])
 * @method \Http\Promise\Promise queryDatasetListAsync($arguments = [])
 * @method \Dew\Acs\Result allotDatasetAccelerationTask(array $arguments = [])
 * @method \Http\Promise\Promise allotDatasetAccelerationTaskAsync($arguments = [])
 * @method \Dew\Acs\Result queryCubePerformance(array $arguments = [])
 * @method \Http\Promise\Promise queryCubePerformanceAsync($arguments = [])
 * @method \Dew\Acs\Result queryCubeOptimization(array $arguments = [])
 * @method \Http\Promise\Promise queryCubeOptimizationAsync($arguments = [])
 * @method \Dew\Acs\Result addUserToWorkspace(array $arguments = [])
 * @method \Http\Promise\Promise addUserToWorkspaceAsync($arguments = [])
 * @method \Dew\Acs\Result addWorkspaceUsers(array $arguments = [])
 * @method \Http\Promise\Promise addWorkspaceUsersAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserFromWorkspace(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserFromWorkspaceAsync($arguments = [])
 * @method \Dew\Acs\Result updateWorkspaceUsersRole(array $arguments = [])
 * @method \Http\Promise\Promise updateWorkspaceUsersRoleAsync($arguments = [])
 * @method \Dew\Acs\Result updateWorkspaceUserRole(array $arguments = [])
 * @method \Http\Promise\Promise updateWorkspaceUserRoleAsync($arguments = [])
 * @method \Dew\Acs\Result queryWorkspaceUserList(array $arguments = [])
 * @method \Http\Promise\Promise queryWorkspaceUserListAsync($arguments = [])
 * @method \Dew\Acs\Result queryOrganizationWorkspaceList(array $arguments = [])
 * @method \Http\Promise\Promise queryOrganizationWorkspaceListAsync($arguments = [])
 * @method \Dew\Acs\Result queryUserRoleInfoInWorkspace(array $arguments = [])
 * @method \Http\Promise\Promise queryUserRoleInfoInWorkspaceAsync($arguments = [])
 * @method \Dew\Acs\Result saveFavorites(array $arguments = [])
 * @method \Http\Promise\Promise saveFavoritesAsync($arguments = [])
 * @method \Dew\Acs\Result cancelCollection(array $arguments = [])
 * @method \Http\Promise\Promise cancelCollectionAsync($arguments = [])
 * @method \Dew\Acs\Result listCollections(array $arguments = [])
 * @method \Http\Promise\Promise listCollectionsAsync($arguments = [])
 * @method \Dew\Acs\Result listFavoriteReports(array $arguments = [])
 * @method \Http\Promise\Promise listFavoriteReportsAsync($arguments = [])
 * @method \Dew\Acs\Result listRecentViewReports(array $arguments = [])
 * @method \Http\Promise\Promise listRecentViewReportsAsync($arguments = [])
 * @method \Dew\Acs\Result listSharedReports(array $arguments = [])
 * @method \Http\Promise\Promise listSharedReportsAsync($arguments = [])
 * @method \Dew\Acs\Result manualRunMailTask(array $arguments = [])
 * @method \Http\Promise\Promise manualRunMailTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getMailTaskStatus(array $arguments = [])
 * @method \Http\Promise\Promise getMailTaskStatusAsync($arguments = [])
 * @method \Dew\Acs\Result queryData(array $arguments = [])
 * @method \Http\Promise\Promise queryDataAsync($arguments = [])
 * @method \Dew\Acs\Result queryDataServiceList(array $arguments = [])
 * @method \Http\Promise\Promise queryDataServiceListAsync($arguments = [])
 * @method \Dew\Acs\Result queryDataService(array $arguments = [])
 * @method \Http\Promise\Promise queryDataServiceAsync($arguments = [])
 * @method \Dew\Acs\Result createTicket(array $arguments = [])
 * @method \Http\Promise\Promise createTicketAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTicket(array $arguments = [])
 * @method \Http\Promise\Promise deleteTicketAsync($arguments = [])
 * @method \Dew\Acs\Result delayTicketExpireTime(array $arguments = [])
 * @method \Http\Promise\Promise delayTicketExpireTimeAsync($arguments = [])
 * @method \Dew\Acs\Result updateTicketNum(array $arguments = [])
 * @method \Http\Promise\Promise updateTicketNumAsync($arguments = [])
 * @method \Dew\Acs\Result queryTicketInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryTicketInfoAsync($arguments = [])
 * @method \Dew\Acs\Result createTicket4Copilot(array $arguments = [])
 * @method \Http\Promise\Promise createTicket4CopilotAsync($arguments = [])
 * @method \Dew\Acs\Result modifyCopilotEmbedConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyCopilotEmbedConfigAsync($arguments = [])
 * @method \Dew\Acs\Result queryCopilotEmbedConfig(array $arguments = [])
 * @method \Http\Promise\Promise queryCopilotEmbedConfigAsync($arguments = [])
 * @method \Dew\Acs\Result queryDataRange(array $arguments = [])
 * @method \Http\Promise\Promise queryDataRangeAsync($arguments = [])
 * @method \Dew\Acs\Result smartqQueryAbility(array $arguments = [])
 * @method \Http\Promise\Promise smartqQueryAbilityAsync($arguments = [])
 * @method \Dew\Acs\Result queryAuditLog(array $arguments = [])
 * @method \Http\Promise\Promise queryAuditLogAsync($arguments = [])
 */
final class QuickbiPublicClient extends AcsClient
{
    //
}
