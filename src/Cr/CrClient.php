<?php

declare(strict_types=1);

namespace Dew\Acs\Cr;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result updateArtifactLifecycleRule(array $arguments = [])
 * @method \Http\Promise\Promise updateArtifactLifecycleRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listArtifactLifecycleRule(array $arguments = [])
 * @method \Http\Promise\Promise listArtifactLifecycleRuleAsync($arguments = [])
 * @method \Dew\Acs\Result getArtifactLifecycleRule(array $arguments = [])
 * @method \Http\Promise\Promise getArtifactLifecycleRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteArtifactLifecycleRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteArtifactLifecycleRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createArtifactLifecycleRule(array $arguments = [])
 * @method \Http\Promise\Promise createArtifactLifecycleRuleAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result getInstance(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceUsage(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceUsageAsync($arguments = [])
 * @method \Dew\Acs\Result listInstanceRegion(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceRegionAsync($arguments = [])
 * @method \Dew\Acs\Result listInstance(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceCount(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceCountAsync($arguments = [])
 * @method \Dew\Acs\Result createInstanceVpcEndpointLinkedVpc(array $arguments = [])
 * @method \Http\Promise\Promise createInstanceVpcEndpointLinkedVpcAsync($arguments = [])
 * @method \Dew\Acs\Result createInstanceEndpointAclPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createInstanceEndpointAclPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteInstanceEndpointAclPolicy(array $arguments = [])
 * @method \Http\Promise\Promise deleteInstanceEndpointAclPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteInstanceVpcEndpointLinkedVpc(array $arguments = [])
 * @method \Http\Promise\Promise deleteInstanceVpcEndpointLinkedVpcAsync($arguments = [])
 * @method \Dew\Acs\Result updateInstanceEndpointStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateInstanceEndpointStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result listInstanceEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceVpcEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceVpcEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result createRepoSyncTaskByRule(array $arguments = [])
 * @method \Http\Promise\Promise createRepoSyncTaskByRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createRepoSyncRule(array $arguments = [])
 * @method \Http\Promise\Promise createRepoSyncRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createRepoSyncTask(array $arguments = [])
 * @method \Http\Promise\Promise createRepoSyncTaskAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRepoSyncRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteRepoSyncRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listRepoSyncTask(array $arguments = [])
 * @method \Http\Promise\Promise listRepoSyncTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listRepoSyncRule(array $arguments = [])
 * @method \Http\Promise\Promise listRepoSyncRuleAsync($arguments = [])
 * @method \Dew\Acs\Result getRepoSyncTask(array $arguments = [])
 * @method \Http\Promise\Promise getRepoSyncTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createNamespace(array $arguments = [])
 * @method \Http\Promise\Promise createNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNamespace(array $arguments = [])
 * @method \Http\Promise\Promise deleteNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result updateNamespace(array $arguments = [])
 * @method \Http\Promise\Promise updateNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result getNamespace(array $arguments = [])
 * @method \Http\Promise\Promise getNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result listNamespace(array $arguments = [])
 * @method \Http\Promise\Promise listNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result createRepository(array $arguments = [])
 * @method \Http\Promise\Promise createRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRepository(array $arguments = [])
 * @method \Http\Promise\Promise deleteRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result updateRepository(array $arguments = [])
 * @method \Http\Promise\Promise updateRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result listRepository(array $arguments = [])
 * @method \Http\Promise\Promise listRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result getRepository(array $arguments = [])
 * @method \Http\Promise\Promise getRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result createRepoTag(array $arguments = [])
 * @method \Http\Promise\Promise createRepoTagAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRepoTag(array $arguments = [])
 * @method \Http\Promise\Promise deleteRepoTagAsync($arguments = [])
 * @method \Dew\Acs\Result listRepoTag(array $arguments = [])
 * @method \Http\Promise\Promise listRepoTagAsync($arguments = [])
 * @method \Dew\Acs\Result getRepoTagLayers(array $arguments = [])
 * @method \Http\Promise\Promise getRepoTagLayersAsync($arguments = [])
 * @method \Dew\Acs\Result getRepoTagManifest(array $arguments = [])
 * @method \Http\Promise\Promise getRepoTagManifestAsync($arguments = [])
 * @method \Dew\Acs\Result getRepoTag(array $arguments = [])
 * @method \Http\Promise\Promise getRepoTagAsync($arguments = [])
 * @method \Dew\Acs\Result createRepoTagScanTask(array $arguments = [])
 * @method \Http\Promise\Promise createRepoTagScanTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getRepoTagScanStatus(array $arguments = [])
 * @method \Http\Promise\Promise getRepoTagScanStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getRepoTagScanSummary(array $arguments = [])
 * @method \Http\Promise\Promise getRepoTagScanSummaryAsync($arguments = [])
 * @method \Dew\Acs\Result listRepoTagScanResult(array $arguments = [])
 * @method \Http\Promise\Promise listRepoTagScanResultAsync($arguments = [])
 * @method \Dew\Acs\Result createArtifactBuildRule(array $arguments = [])
 * @method \Http\Promise\Promise createArtifactBuildRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createBuildRecordByRule(array $arguments = [])
 * @method \Http\Promise\Promise createBuildRecordByRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createRepoBuildRule(array $arguments = [])
 * @method \Http\Promise\Promise createRepoBuildRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createRepoSourceCodeRepo(array $arguments = [])
 * @method \Http\Promise\Promise createRepoSourceCodeRepoAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRepoBuildRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteRepoBuildRuleAsync($arguments = [])
 * @method \Dew\Acs\Result cancelRepoBuildRecord(array $arguments = [])
 * @method \Http\Promise\Promise cancelRepoBuildRecordAsync($arguments = [])
 * @method \Dew\Acs\Result updateRepoBuildRule(array $arguments = [])
 * @method \Http\Promise\Promise updateRepoBuildRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateRepoSourceCodeRepo(array $arguments = [])
 * @method \Http\Promise\Promise updateRepoSourceCodeRepoAsync($arguments = [])
 * @method \Dew\Acs\Result listRepoBuildRecordLog(array $arguments = [])
 * @method \Http\Promise\Promise listRepoBuildRecordLogAsync($arguments = [])
 * @method \Dew\Acs\Result listRepoBuildRule(array $arguments = [])
 * @method \Http\Promise\Promise listRepoBuildRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listRepoBuildRecord(array $arguments = [])
 * @method \Http\Promise\Promise listRepoBuildRecordAsync($arguments = [])
 * @method \Dew\Acs\Result getRepoBuildRecordStatus(array $arguments = [])
 * @method \Http\Promise\Promise getRepoBuildRecordStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getRepoBuildRecord(array $arguments = [])
 * @method \Http\Promise\Promise getRepoBuildRecordAsync($arguments = [])
 * @method \Dew\Acs\Result getRepoSourceCodeRepo(array $arguments = [])
 * @method \Http\Promise\Promise getRepoSourceCodeRepoAsync($arguments = [])
 * @method \Dew\Acs\Result createRepoTrigger(array $arguments = [])
 * @method \Http\Promise\Promise createRepoTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRepoTrigger(array $arguments = [])
 * @method \Http\Promise\Promise deleteRepoTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result updateRepoTrigger(array $arguments = [])
 * @method \Http\Promise\Promise updateRepoTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result listRepoTrigger(array $arguments = [])
 * @method \Http\Promise\Promise listRepoTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result createChartNamespace(array $arguments = [])
 * @method \Http\Promise\Promise createChartNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteChartNamespace(array $arguments = [])
 * @method \Http\Promise\Promise deleteChartNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result updateChartNamespace(array $arguments = [])
 * @method \Http\Promise\Promise updateChartNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result getChartNamespace(array $arguments = [])
 * @method \Http\Promise\Promise getChartNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result listChartNamespace(array $arguments = [])
 * @method \Http\Promise\Promise listChartNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result createChartRepository(array $arguments = [])
 * @method \Http\Promise\Promise createChartRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteChartRepository(array $arguments = [])
 * @method \Http\Promise\Promise deleteChartRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result updateChartRepository(array $arguments = [])
 * @method \Http\Promise\Promise updateChartRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result listChartRepository(array $arguments = [])
 * @method \Http\Promise\Promise listChartRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result getChartRepository(array $arguments = [])
 * @method \Http\Promise\Promise getChartRepositoryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteChartRelease(array $arguments = [])
 * @method \Http\Promise\Promise deleteChartReleaseAsync($arguments = [])
 * @method \Dew\Acs\Result listChartRelease(array $arguments = [])
 * @method \Http\Promise\Promise listChartReleaseAsync($arguments = [])
 * @method \Dew\Acs\Result getAuthorizationToken(array $arguments = [])
 * @method \Http\Promise\Promise getAuthorizationTokenAsync($arguments = [])
 * @method \Dew\Acs\Result resetLoginPassword(array $arguments = [])
 * @method \Http\Promise\Promise resetLoginPasswordAsync($arguments = [])
 * @method \Dew\Acs\Result cancelArtifactBuildTask(array $arguments = [])
 * @method \Http\Promise\Promise cancelArtifactBuildTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getArtifactBuildTask(array $arguments = [])
 * @method \Http\Promise\Promise getArtifactBuildTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listArtifactBuildTaskLog(array $arguments = [])
 * @method \Http\Promise\Promise listArtifactBuildTaskLogAsync($arguments = [])
 * @method \Dew\Acs\Result createChain(array $arguments = [])
 * @method \Http\Promise\Promise createChainAsync($arguments = [])
 * @method \Dew\Acs\Result deleteChain(array $arguments = [])
 * @method \Http\Promise\Promise deleteChainAsync($arguments = [])
 * @method \Dew\Acs\Result updateChain(array $arguments = [])
 * @method \Http\Promise\Promise updateChainAsync($arguments = [])
 * @method \Dew\Acs\Result getChain(array $arguments = [])
 * @method \Http\Promise\Promise getChainAsync($arguments = [])
 * @method \Dew\Acs\Result listChain(array $arguments = [])
 * @method \Http\Promise\Promise listChainAsync($arguments = [])
 * @method \Dew\Acs\Result listChainInstance(array $arguments = [])
 * @method \Http\Promise\Promise listChainInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEventCenterRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteEventCenterRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateEventCenterRule(array $arguments = [])
 * @method \Http\Promise\Promise updateEventCenterRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listEventCenterRecord(array $arguments = [])
 * @method \Http\Promise\Promise listEventCenterRecordAsync($arguments = [])
 * @method \Dew\Acs\Result listEventCenterRuleName(array $arguments = [])
 * @method \Http\Promise\Promise listEventCenterRuleNameAsync($arguments = [])
 * @method \Dew\Acs\Result changeResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise changeResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createBuildRecordByRecord(array $arguments = [])
 * @method \Http\Promise\Promise createBuildRecordByRecordAsync($arguments = [])
 * @method \Dew\Acs\Result getArtifactBuildRule(array $arguments = [])
 * @method \Http\Promise\Promise getArtifactBuildRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listScanBaselineByTask(array $arguments = [])
 * @method \Http\Promise\Promise listScanBaselineByTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listScanMaliciousFileByTask(array $arguments = [])
 * @method \Http\Promise\Promise listScanMaliciousFileByTaskAsync($arguments = [])
 */
final class CrClient extends AcsClient
{
    //
}
