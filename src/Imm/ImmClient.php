<?php

declare(strict_types=1);

namespace Dew\Acs\Imm;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result listRegions(array $arguments = [])
 * @method \Http\Promise\Promise listRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result createProject(array $arguments = [])
 * @method \Http\Promise\Promise createProjectAsync($arguments = [])
 * @method \Dew\Acs\Result updateProject(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectAsync($arguments = [])
 * @method \Dew\Acs\Result getProject(array $arguments = [])
 * @method \Http\Promise\Promise getProjectAsync($arguments = [])
 * @method \Dew\Acs\Result listProjects(array $arguments = [])
 * @method \Http\Promise\Promise listProjectsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProject(array $arguments = [])
 * @method \Http\Promise\Promise deleteProjectAsync($arguments = [])
 * @method \Dew\Acs\Result createDataset(array $arguments = [])
 * @method \Http\Promise\Promise createDatasetAsync($arguments = [])
 * @method \Dew\Acs\Result updateDataset(array $arguments = [])
 * @method \Http\Promise\Promise updateDatasetAsync($arguments = [])
 * @method \Dew\Acs\Result getDataset(array $arguments = [])
 * @method \Http\Promise\Promise getDatasetAsync($arguments = [])
 * @method \Dew\Acs\Result listDatasets(array $arguments = [])
 * @method \Http\Promise\Promise listDatasetsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataset(array $arguments = [])
 * @method \Http\Promise\Promise deleteDatasetAsync($arguments = [])
 * @method \Dew\Acs\Result indexFileMeta(array $arguments = [])
 * @method \Http\Promise\Promise indexFileMetaAsync($arguments = [])
 * @method \Dew\Acs\Result batchIndexFileMeta(array $arguments = [])
 * @method \Http\Promise\Promise batchIndexFileMetaAsync($arguments = [])
 * @method \Dew\Acs\Result updateFileMeta(array $arguments = [])
 * @method \Http\Promise\Promise updateFileMetaAsync($arguments = [])
 * @method \Dew\Acs\Result batchUpdateFileMeta(array $arguments = [])
 * @method \Http\Promise\Promise batchUpdateFileMetaAsync($arguments = [])
 * @method \Dew\Acs\Result getFileMeta(array $arguments = [])
 * @method \Http\Promise\Promise getFileMetaAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetFileMeta(array $arguments = [])
 * @method \Http\Promise\Promise batchGetFileMetaAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFileMeta(array $arguments = [])
 * @method \Http\Promise\Promise deleteFileMetaAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeleteFileMeta(array $arguments = [])
 * @method \Http\Promise\Promise batchDeleteFileMetaAsync($arguments = [])
 * @method \Dew\Acs\Result simpleQuery(array $arguments = [])
 * @method \Http\Promise\Promise simpleQueryAsync($arguments = [])
 * @method \Dew\Acs\Result semanticQuery(array $arguments = [])
 * @method \Http\Promise\Promise semanticQueryAsync($arguments = [])
 * @method \Dew\Acs\Result fuzzyQuery(array $arguments = [])
 * @method \Http\Promise\Promise fuzzyQueryAsync($arguments = [])
 * @method \Dew\Acs\Result createFigureClusteringTask(array $arguments = [])
 * @method \Http\Promise\Promise createFigureClusteringTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createFigureClustersMergingTask(array $arguments = [])
 * @method \Http\Promise\Promise createFigureClustersMergingTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getFigureCluster(array $arguments = [])
 * @method \Http\Promise\Promise getFigureClusterAsync($arguments = [])
 * @method \Dew\Acs\Result queryFigureClusters(array $arguments = [])
 * @method \Http\Promise\Promise queryFigureClustersAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetFigureCluster(array $arguments = [])
 * @method \Http\Promise\Promise batchGetFigureClusterAsync($arguments = [])
 * @method \Dew\Acs\Result updateFigureCluster(array $arguments = [])
 * @method \Http\Promise\Promise updateFigureClusterAsync($arguments = [])
 * @method \Dew\Acs\Result searchImageFigureCluster(array $arguments = [])
 * @method \Http\Promise\Promise searchImageFigureClusterAsync($arguments = [])
 * @method \Dew\Acs\Result createFacesSearchingTask(array $arguments = [])
 * @method \Http\Promise\Promise createFacesSearchingTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createLocationDateClusteringTask(array $arguments = [])
 * @method \Http\Promise\Promise createLocationDateClusteringTaskAsync($arguments = [])
 * @method \Dew\Acs\Result queryLocationDateClusters(array $arguments = [])
 * @method \Http\Promise\Promise queryLocationDateClustersAsync($arguments = [])
 * @method \Dew\Acs\Result updateLocationDateCluster(array $arguments = [])
 * @method \Http\Promise\Promise updateLocationDateClusterAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLocationDateCluster(array $arguments = [])
 * @method \Http\Promise\Promise deleteLocationDateClusterAsync($arguments = [])
 * @method \Dew\Acs\Result createStory(array $arguments = [])
 * @method \Http\Promise\Promise createStoryAsync($arguments = [])
 * @method \Dew\Acs\Result queryStories(array $arguments = [])
 * @method \Http\Promise\Promise queryStoriesAsync($arguments = [])
 * @method \Dew\Acs\Result getStory(array $arguments = [])
 * @method \Http\Promise\Promise getStoryAsync($arguments = [])
 * @method \Dew\Acs\Result createCustomizedStory(array $arguments = [])
 * @method \Http\Promise\Promise createCustomizedStoryAsync($arguments = [])
 * @method \Dew\Acs\Result updateStory(array $arguments = [])
 * @method \Http\Promise\Promise updateStoryAsync($arguments = [])
 * @method \Dew\Acs\Result addStoryFiles(array $arguments = [])
 * @method \Http\Promise\Promise addStoryFilesAsync($arguments = [])
 * @method \Dew\Acs\Result removeStoryFiles(array $arguments = [])
 * @method \Http\Promise\Promise removeStoryFilesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteStory(array $arguments = [])
 * @method \Http\Promise\Promise deleteStoryAsync($arguments = [])
 * @method \Dew\Acs\Result createSimilarImageClusteringTask(array $arguments = [])
 * @method \Http\Promise\Promise createSimilarImageClusteringTaskAsync($arguments = [])
 * @method \Dew\Acs\Result querySimilarImageClusters(array $arguments = [])
 * @method \Http\Promise\Promise querySimilarImageClustersAsync($arguments = [])
 * @method \Dew\Acs\Result createBinding(array $arguments = [])
 * @method \Http\Promise\Promise createBindingAsync($arguments = [])
 * @method \Dew\Acs\Result getBinding(array $arguments = [])
 * @method \Http\Promise\Promise getBindingAsync($arguments = [])
 * @method \Dew\Acs\Result listBindings(array $arguments = [])
 * @method \Http\Promise\Promise listBindingsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBinding(array $arguments = [])
 * @method \Http\Promise\Promise deleteBindingAsync($arguments = [])
 * @method \Dew\Acs\Result attachOSSBucket(array $arguments = [])
 * @method \Http\Promise\Promise attachOSSBucketAsync($arguments = [])
 * @method \Dew\Acs\Result detachOSSBucket(array $arguments = [])
 * @method \Http\Promise\Promise detachOSSBucketAsync($arguments = [])
 * @method \Dew\Acs\Result getOSSBucketAttachment(array $arguments = [])
 * @method \Http\Promise\Promise getOSSBucketAttachmentAsync($arguments = [])
 * @method \Dew\Acs\Result encodeBlindWatermark(array $arguments = [])
 * @method \Http\Promise\Promise encodeBlindWatermarkAsync($arguments = [])
 * @method \Dew\Acs\Result createDecodeBlindWatermarkTask(array $arguments = [])
 * @method \Http\Promise\Promise createDecodeBlindWatermarkTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getDecodeBlindWatermarkResult(array $arguments = [])
 * @method \Http\Promise\Promise getDecodeBlindWatermarkResultAsync($arguments = [])
 * @method \Dew\Acs\Result detectImageLabels(array $arguments = [])
 * @method \Http\Promise\Promise detectImageLabelsAsync($arguments = [])
 * @method \Dew\Acs\Result detectImageScore(array $arguments = [])
 * @method \Http\Promise\Promise detectImageScoreAsync($arguments = [])
 * @method \Dew\Acs\Result detectImageCodes(array $arguments = [])
 * @method \Http\Promise\Promise detectImageCodesAsync($arguments = [])
 * @method \Dew\Acs\Result detectImageFaces(array $arguments = [])
 * @method \Http\Promise\Promise detectImageFacesAsync($arguments = [])
 * @method \Dew\Acs\Result detectImageCropping(array $arguments = [])
 * @method \Http\Promise\Promise detectImageCroppingAsync($arguments = [])
 * @method \Dew\Acs\Result addImageMosaic(array $arguments = [])
 * @method \Http\Promise\Promise addImageMosaicAsync($arguments = [])
 * @method \Dew\Acs\Result createImageToPDFTask(array $arguments = [])
 * @method \Http\Promise\Promise createImageToPDFTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createImageSplicingTask(array $arguments = [])
 * @method \Http\Promise\Promise createImageSplicingTaskAsync($arguments = [])
 * @method \Dew\Acs\Result compareImageFaces(array $arguments = [])
 * @method \Http\Promise\Promise compareImageFacesAsync($arguments = [])
 * @method \Dew\Acs\Result detectImageBodies(array $arguments = [])
 * @method \Http\Promise\Promise detectImageBodiesAsync($arguments = [])
 * @method \Dew\Acs\Result detectImageCars(array $arguments = [])
 * @method \Http\Promise\Promise detectImageCarsAsync($arguments = [])
 * @method \Dew\Acs\Result createMediaConvertTask(array $arguments = [])
 * @method \Http\Promise\Promise createMediaConvertTaskAsync($arguments = [])
 * @method \Dew\Acs\Result detectMediaMeta(array $arguments = [])
 * @method \Http\Promise\Promise detectMediaMetaAsync($arguments = [])
 * @method \Dew\Acs\Result createVideoLabelClassificationTask(array $arguments = [])
 * @method \Http\Promise\Promise createVideoLabelClassificationTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getVideoLabelClassificationResult(array $arguments = [])
 * @method \Http\Promise\Promise getVideoLabelClassificationResultAsync($arguments = [])
 * @method \Dew\Acs\Result generateVideoPlaylist(array $arguments = [])
 * @method \Http\Promise\Promise generateVideoPlaylistAsync($arguments = [])
 * @method \Dew\Acs\Result generateWebofficeToken(array $arguments = [])
 * @method \Http\Promise\Promise generateWebofficeTokenAsync($arguments = [])
 * @method \Dew\Acs\Result refreshWebofficeToken(array $arguments = [])
 * @method \Http\Promise\Promise refreshWebofficeTokenAsync($arguments = [])
 * @method \Dew\Acs\Result createOfficeConversionTask(array $arguments = [])
 * @method \Http\Promise\Promise createOfficeConversionTaskAsync($arguments = [])
 * @method \Dew\Acs\Result extractDocumentText(array $arguments = [])
 * @method \Http\Promise\Promise extractDocumentTextAsync($arguments = [])
 * @method \Dew\Acs\Result createFileCompressionTask(array $arguments = [])
 * @method \Http\Promise\Promise createFileCompressionTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createArchiveFileInspectionTask(array $arguments = [])
 * @method \Http\Promise\Promise createArchiveFileInspectionTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createFileUncompressionTask(array $arguments = [])
 * @method \Http\Promise\Promise createFileUncompressionTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createCompressPointCloudTask(array $arguments = [])
 * @method \Http\Promise\Promise createCompressPointCloudTaskAsync($arguments = [])
 * @method \Dew\Acs\Result detectTextAnomaly(array $arguments = [])
 * @method \Http\Promise\Promise detectTextAnomalyAsync($arguments = [])
 * @method \Dew\Acs\Result createImageModerationTask(array $arguments = [])
 * @method \Http\Promise\Promise createImageModerationTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createVideoModerationTask(array $arguments = [])
 * @method \Http\Promise\Promise createVideoModerationTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getImageModerationResult(array $arguments = [])
 * @method \Http\Promise\Promise getImageModerationResultAsync($arguments = [])
 * @method \Dew\Acs\Result getVideoModerationResult(array $arguments = [])
 * @method \Http\Promise\Promise getVideoModerationResultAsync($arguments = [])
 * @method \Dew\Acs\Result getTask(array $arguments = [])
 * @method \Http\Promise\Promise getTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listTasks(array $arguments = [])
 * @method \Http\Promise\Promise listTasksAsync($arguments = [])
 * @method \Dew\Acs\Result createTrigger(array $arguments = [])
 * @method \Http\Promise\Promise createTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result suspendTrigger(array $arguments = [])
 * @method \Http\Promise\Promise suspendTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result resumeTrigger(array $arguments = [])
 * @method \Http\Promise\Promise resumeTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result updateTrigger(array $arguments = [])
 * @method \Http\Promise\Promise updateTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result getTrigger(array $arguments = [])
 * @method \Http\Promise\Promise getTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result listTriggers(array $arguments = [])
 * @method \Http\Promise\Promise listTriggersAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTrigger(array $arguments = [])
 * @method \Http\Promise\Promise deleteTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result createBatch(array $arguments = [])
 * @method \Http\Promise\Promise createBatchAsync($arguments = [])
 * @method \Dew\Acs\Result suspendBatch(array $arguments = [])
 * @method \Http\Promise\Promise suspendBatchAsync($arguments = [])
 * @method \Dew\Acs\Result resumeBatch(array $arguments = [])
 * @method \Http\Promise\Promise resumeBatchAsync($arguments = [])
 * @method \Dew\Acs\Result updateBatch(array $arguments = [])
 * @method \Http\Promise\Promise updateBatchAsync($arguments = [])
 * @method \Dew\Acs\Result listBatches(array $arguments = [])
 * @method \Http\Promise\Promise listBatchesAsync($arguments = [])
 * @method \Dew\Acs\Result getBatch(array $arguments = [])
 * @method \Http\Promise\Promise getBatchAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBatch(array $arguments = [])
 * @method \Http\Promise\Promise deleteBatchAsync($arguments = [])
 * @method \Dew\Acs\Result detectImageTexts(array $arguments = [])
 * @method \Http\Promise\Promise detectImageTextsAsync($arguments = [])
 */
final class ImmClient extends AcsClient
{
    //
}
