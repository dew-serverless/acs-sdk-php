<?php

declare(strict_types=1);

namespace Dew\Acs\Iot;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result batchGrayMigrationDevice(array $arguments = [])
 * @method \Http\Promise\Promise batchGrayMigrationDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result createProduct(array $arguments = [])
 * @method \Http\Promise\Promise createProductAsync($arguments = [])
 * @method \Dew\Acs\Result queryProduct(array $arguments = [])
 * @method \Http\Promise\Promise queryProductAsync($arguments = [])
 * @method \Dew\Acs\Result queryProductList(array $arguments = [])
 * @method \Http\Promise\Promise queryProductListAsync($arguments = [])
 * @method \Dew\Acs\Result updateProduct(array $arguments = [])
 * @method \Http\Promise\Promise updateProductAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProduct(array $arguments = [])
 * @method \Http\Promise\Promise deleteProductAsync($arguments = [])
 * @method \Dew\Acs\Result createProductTags(array $arguments = [])
 * @method \Http\Promise\Promise createProductTagsAsync($arguments = [])
 * @method \Dew\Acs\Result updateProductTags(array $arguments = [])
 * @method \Http\Promise\Promise updateProductTagsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProductTags(array $arguments = [])
 * @method \Http\Promise\Promise deleteProductTagsAsync($arguments = [])
 * @method \Dew\Acs\Result listProductTags(array $arguments = [])
 * @method \Http\Promise\Promise listProductTagsAsync($arguments = [])
 * @method \Dew\Acs\Result listProductByTags(array $arguments = [])
 * @method \Http\Promise\Promise listProductByTagsAsync($arguments = [])
 * @method \Dew\Acs\Result updateProductFilterConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateProductFilterConfigAsync($arguments = [])
 * @method \Dew\Acs\Result queryProductCertInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryProductCertInfoAsync($arguments = [])
 * @method \Dew\Acs\Result setProductCertInfo(array $arguments = [])
 * @method \Http\Promise\Promise setProductCertInfoAsync($arguments = [])
 * @method \Dew\Acs\Result releaseProduct(array $arguments = [])
 * @method \Http\Promise\Promise releaseProductAsync($arguments = [])
 * @method \Dew\Acs\Result cancelReleaseProduct(array $arguments = [])
 * @method \Http\Promise\Promise cancelReleaseProductAsync($arguments = [])
 * @method \Dew\Acs\Result registerDevice(array $arguments = [])
 * @method \Http\Promise\Promise registerDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result queryClientIds(array $arguments = [])
 * @method \Http\Promise\Promise queryClientIdsAsync($arguments = [])
 * @method \Dew\Acs\Result transformClientId(array $arguments = [])
 * @method \Http\Promise\Promise transformClientIdAsync($arguments = [])
 * @method \Dew\Acs\Result deleteClientIds(array $arguments = [])
 * @method \Http\Promise\Promise deleteClientIdsAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceInfoAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceDetail(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceDetailAsync($arguments = [])
 * @method \Dew\Acs\Result batchQueryDeviceDetail(array $arguments = [])
 * @method \Http\Promise\Promise batchQueryDeviceDetailAsync($arguments = [])
 * @method \Dew\Acs\Result queryDevice(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDevice(array $arguments = [])
 * @method \Http\Promise\Promise deleteDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result getDeviceStatus(array $arguments = [])
 * @method \Http\Promise\Promise getDeviceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetDeviceState(array $arguments = [])
 * @method \Http\Promise\Promise batchGetDeviceStateAsync($arguments = [])
 * @method \Dew\Acs\Result disableThing(array $arguments = [])
 * @method \Http\Promise\Promise disableThingAsync($arguments = [])
 * @method \Dew\Acs\Result enableThing(array $arguments = [])
 * @method \Http\Promise\Promise enableThingAsync($arguments = [])
 * @method \Dew\Acs\Result resetThing(array $arguments = [])
 * @method \Http\Promise\Promise resetThingAsync($arguments = [])
 * @method \Dew\Acs\Result batchCheckDeviceNames(array $arguments = [])
 * @method \Http\Promise\Promise batchCheckDeviceNamesAsync($arguments = [])
 * @method \Dew\Acs\Result batchRegisterDeviceWithApplyId(array $arguments = [])
 * @method \Http\Promise\Promise batchRegisterDeviceWithApplyIdAsync($arguments = [])
 * @method \Dew\Acs\Result batchRegisterDevice(array $arguments = [])
 * @method \Http\Promise\Promise batchRegisterDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result batchUpdateDeviceNickname(array $arguments = [])
 * @method \Http\Promise\Promise batchUpdateDeviceNicknameAsync($arguments = [])
 * @method \Dew\Acs\Result queryBatchRegisterDeviceStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryBatchRegisterDeviceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result queryPageByApplyId(array $arguments = [])
 * @method \Http\Promise\Promise queryPageByApplyIdAsync($arguments = [])
 * @method \Dew\Acs\Result getGatewayBySubDevice(array $arguments = [])
 * @method \Http\Promise\Promise getGatewayBySubDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceProp(array $arguments = [])
 * @method \Http\Promise\Promise queryDevicePropAsync($arguments = [])
 * @method \Dew\Acs\Result saveDeviceProp(array $arguments = [])
 * @method \Http\Promise\Promise saveDevicePropAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDeviceProp(array $arguments = [])
 * @method \Http\Promise\Promise deleteDevicePropAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceByTags(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceByTagsAsync($arguments = [])
 * @method \Dew\Acs\Result getThingTopo(array $arguments = [])
 * @method \Http\Promise\Promise getThingTopoAsync($arguments = [])
 * @method \Dew\Acs\Result notifyAddThingTopo(array $arguments = [])
 * @method \Http\Promise\Promise notifyAddThingTopoAsync($arguments = [])
 * @method \Dew\Acs\Result batchAddThingTopo(array $arguments = [])
 * @method \Http\Promise\Promise batchAddThingTopoAsync($arguments = [])
 * @method \Dew\Acs\Result removeThingTopo(array $arguments = [])
 * @method \Http\Promise\Promise removeThingTopoAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceStatistics(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result queryLoRaJoinPermissions(array $arguments = [])
 * @method \Http\Promise\Promise queryLoRaJoinPermissionsAsync($arguments = [])
 * @method \Dew\Acs\Result createLoRaNodesTask(array $arguments = [])
 * @method \Http\Promise\Promise createLoRaNodesTaskAsync($arguments = [])
 * @method \Dew\Acs\Result getLoraNodesTask(array $arguments = [])
 * @method \Http\Promise\Promise getLoraNodesTaskAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceFileList(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceFileListAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceFile(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceFileAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDeviceFile(array $arguments = [])
 * @method \Http\Promise\Promise deleteDeviceFileAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceCert(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceCertAsync($arguments = [])
 * @method \Dew\Acs\Result queryCertUrlByApplyId(array $arguments = [])
 * @method \Http\Promise\Promise queryCertUrlByApplyIdAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceByStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceByStatusAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceBySQL(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceBySQLAsync($arguments = [])
 * @method \Dew\Acs\Result importDevice(array $arguments = [])
 * @method \Http\Promise\Promise importDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result batchImportDevice(array $arguments = [])
 * @method \Http\Promise\Promise batchImportDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result queryImportedDeviceByApplyId(array $arguments = [])
 * @method \Http\Promise\Promise queryImportedDeviceByApplyIdAsync($arguments = [])
 * @method \Dew\Acs\Result batchCheckImportDevice(array $arguments = [])
 * @method \Http\Promise\Promise batchCheckImportDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result batchImportVehicleDevice(array $arguments = [])
 * @method \Http\Promise\Promise batchImportVehicleDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result batchCheckVehicleDevice(array $arguments = [])
 * @method \Http\Promise\Promise batchCheckVehicleDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result queryVehicleDevice(array $arguments = [])
 * @method \Http\Promise\Promise queryVehicleDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result createDeviceDistributeJob(array $arguments = [])
 * @method \Http\Promise\Promise createDeviceDistributeJobAsync($arguments = [])
 * @method \Dew\Acs\Result createProductDistributeJob(array $arguments = [])
 * @method \Http\Promise\Promise createProductDistributeJobAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceDistributeDetail(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceDistributeDetailAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceDistributeJob(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceDistributeJobAsync($arguments = [])
 * @method \Dew\Acs\Result listDeviceDistributeJob(array $arguments = [])
 * @method \Http\Promise\Promise listDeviceDistributeJobAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDeviceDistributeJob(array $arguments = [])
 * @method \Http\Promise\Promise deleteDeviceDistributeJobAsync($arguments = [])
 * @method \Dew\Acs\Result listDistributedDevice(array $arguments = [])
 * @method \Http\Promise\Promise listDistributedDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result listDistributedProduct(array $arguments = [])
 * @method \Http\Promise\Promise listDistributedProductAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceProvisioning(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceProvisioningAsync($arguments = [])
 * @method \Dew\Acs\Result createDeviceTunnel(array $arguments = [])
 * @method \Http\Promise\Promise createDeviceTunnelAsync($arguments = [])
 * @method \Dew\Acs\Result closeDeviceTunnel(array $arguments = [])
 * @method \Http\Promise\Promise closeDeviceTunnelAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDeviceTunnel(array $arguments = [])
 * @method \Http\Promise\Promise deleteDeviceTunnelAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceTunnel(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceTunnelAsync($arguments = [])
 * @method \Dew\Acs\Result createDeviceGroup(array $arguments = [])
 * @method \Http\Promise\Promise createDeviceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createDeviceDynamicGroup(array $arguments = [])
 * @method \Http\Promise\Promise createDeviceDynamicGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateDeviceGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateDeviceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDeviceGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteDeviceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDeviceDynamicGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteDeviceDynamicGroupAsync($arguments = [])
 * @method \Dew\Acs\Result batchAddDeviceGroupRelations(array $arguments = [])
 * @method \Http\Promise\Promise batchAddDeviceGroupRelationsAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeleteDeviceGroupRelations(array $arguments = [])
 * @method \Http\Promise\Promise batchDeleteDeviceGroupRelationsAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceGroupInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceGroupInfoAsync($arguments = [])
 * @method \Dew\Acs\Result queryDynamicGroupDevices(array $arguments = [])
 * @method \Http\Promise\Promise queryDynamicGroupDevicesAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceGroupList(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceGroupListAsync($arguments = [])
 * @method \Dew\Acs\Result setDeviceGroupTags(array $arguments = [])
 * @method \Http\Promise\Promise setDeviceGroupTagsAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceGroupTagList(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceGroupTagListAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceGroupByDevice(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceGroupByDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result querySuperDeviceGroup(array $arguments = [])
 * @method \Http\Promise\Promise querySuperDeviceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceListByDeviceGroup(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceListByDeviceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceGroupByTags(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceGroupByTagsAsync($arguments = [])
 * @method \Dew\Acs\Result createThingModel(array $arguments = [])
 * @method \Http\Promise\Promise createThingModelAsync($arguments = [])
 * @method \Dew\Acs\Result updateThingModel(array $arguments = [])
 * @method \Http\Promise\Promise updateThingModelAsync($arguments = [])
 * @method \Dew\Acs\Result queryThingModel(array $arguments = [])
 * @method \Http\Promise\Promise queryThingModelAsync($arguments = [])
 * @method \Dew\Acs\Result copyThingModel(array $arguments = [])
 * @method \Http\Promise\Promise copyThingModelAsync($arguments = [])
 * @method \Dew\Acs\Result publishThingModel(array $arguments = [])
 * @method \Http\Promise\Promise publishThingModelAsync($arguments = [])
 * @method \Dew\Acs\Result deleteThingModel(array $arguments = [])
 * @method \Http\Promise\Promise deleteThingModelAsync($arguments = [])
 * @method \Dew\Acs\Result listThingTemplates(array $arguments = [])
 * @method \Http\Promise\Promise listThingTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result getThingTemplate(array $arguments = [])
 * @method \Http\Promise\Promise getThingTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result listThingModelVersion(array $arguments = [])
 * @method \Http\Promise\Promise listThingModelVersionAsync($arguments = [])
 * @method \Dew\Acs\Result getThingModelTsl(array $arguments = [])
 * @method \Http\Promise\Promise getThingModelTslAsync($arguments = [])
 * @method \Dew\Acs\Result importThingModelTsl(array $arguments = [])
 * @method \Http\Promise\Promise importThingModelTslAsync($arguments = [])
 * @method \Dew\Acs\Result queryThingModelPublished(array $arguments = [])
 * @method \Http\Promise\Promise queryThingModelPublishedAsync($arguments = [])
 * @method \Dew\Acs\Result getThingModelTslPublished(array $arguments = [])
 * @method \Http\Promise\Promise getThingModelTslPublishedAsync($arguments = [])
 * @method \Dew\Acs\Result queryThingModelExtendConfig(array $arguments = [])
 * @method \Http\Promise\Promise queryThingModelExtendConfigAsync($arguments = [])
 * @method \Dew\Acs\Result queryThingModelExtendConfigPublished(array $arguments = [])
 * @method \Http\Promise\Promise queryThingModelExtendConfigPublishedAsync($arguments = [])
 * @method \Dew\Acs\Result createThingScript(array $arguments = [])
 * @method \Http\Promise\Promise createThingScriptAsync($arguments = [])
 * @method \Dew\Acs\Result updateThingScript(array $arguments = [])
 * @method \Http\Promise\Promise updateThingScriptAsync($arguments = [])
 * @method \Dew\Acs\Result getThingScript(array $arguments = [])
 * @method \Http\Promise\Promise getThingScriptAsync($arguments = [])
 * @method \Dew\Acs\Result setDeviceProperty(array $arguments = [])
 * @method \Http\Promise\Promise setDevicePropertyAsync($arguments = [])
 * @method \Dew\Acs\Result setDevicesProperty(array $arguments = [])
 * @method \Http\Promise\Promise setDevicesPropertyAsync($arguments = [])
 * @method \Dew\Acs\Result invokeThingService(array $arguments = [])
 * @method \Http\Promise\Promise invokeThingServiceAsync($arguments = [])
 * @method \Dew\Acs\Result invokeThingsService(array $arguments = [])
 * @method \Http\Promise\Promise invokeThingsServiceAsync($arguments = [])
 * @method \Dew\Acs\Result queryDevicePropertyData(array $arguments = [])
 * @method \Http\Promise\Promise queryDevicePropertyDataAsync($arguments = [])
 * @method \Dew\Acs\Result queryDevicePropertiesData(array $arguments = [])
 * @method \Http\Promise\Promise queryDevicePropertiesDataAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceEventData(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceEventDataAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceServiceData(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceServiceDataAsync($arguments = [])
 * @method \Dew\Acs\Result setDeviceDesiredProperty(array $arguments = [])
 * @method \Http\Promise\Promise setDeviceDesiredPropertyAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceDesiredProperty(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceDesiredPropertyAsync($arguments = [])
 * @method \Dew\Acs\Result queryDevicePropertyStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryDevicePropertyStatusAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceOriginalPropertyStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceOriginalPropertyStatusAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceOriginalPropertyData(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceOriginalPropertyDataAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceOriginalEventData(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceOriginalEventDataAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceOriginalServiceData(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceOriginalServiceDataAsync($arguments = [])
 * @method \Dew\Acs\Result clearDeviceDesiredProperty(array $arguments = [])
 * @method \Http\Promise\Promise clearDeviceDesiredPropertyAsync($arguments = [])
 * @method \Dew\Acs\Result createJob(array $arguments = [])
 * @method \Http\Promise\Promise createJobAsync($arguments = [])
 * @method \Dew\Acs\Result generateFileUploadURL(array $arguments = [])
 * @method \Http\Promise\Promise generateFileUploadURLAsync($arguments = [])
 * @method \Dew\Acs\Result updateJob(array $arguments = [])
 * @method \Http\Promise\Promise updateJobAsync($arguments = [])
 * @method \Dew\Acs\Result queryJob(array $arguments = [])
 * @method \Http\Promise\Promise queryJobAsync($arguments = [])
 * @method \Dew\Acs\Result listJob(array $arguments = [])
 * @method \Http\Promise\Promise listJobAsync($arguments = [])
 * @method \Dew\Acs\Result cancelJob(array $arguments = [])
 * @method \Http\Promise\Promise cancelJobAsync($arguments = [])
 * @method \Dew\Acs\Result deleteJob(array $arguments = [])
 * @method \Http\Promise\Promise deleteJobAsync($arguments = [])
 * @method \Dew\Acs\Result listTask(array $arguments = [])
 * @method \Http\Promise\Promise listTaskAsync($arguments = [])
 * @method \Dew\Acs\Result queryTask(array $arguments = [])
 * @method \Http\Promise\Promise queryTaskAsync($arguments = [])
 * @method \Dew\Acs\Result queryJobStatistics(array $arguments = [])
 * @method \Http\Promise\Promise queryJobStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result rerunJob(array $arguments = [])
 * @method \Http\Promise\Promise rerunJobAsync($arguments = [])
 * @method \Dew\Acs\Result createProductTopic(array $arguments = [])
 * @method \Http\Promise\Promise createProductTopicAsync($arguments = [])
 * @method \Dew\Acs\Result updateProductTopic(array $arguments = [])
 * @method \Http\Promise\Promise updateProductTopicAsync($arguments = [])
 * @method \Dew\Acs\Result queryProductTopic(array $arguments = [])
 * @method \Http\Promise\Promise queryProductTopicAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProductTopic(array $arguments = [])
 * @method \Http\Promise\Promise deleteProductTopicAsync($arguments = [])
 * @method \Dew\Acs\Result createTopicRouteTable(array $arguments = [])
 * @method \Http\Promise\Promise createTopicRouteTableAsync($arguments = [])
 * @method \Dew\Acs\Result queryTopicRouteTable(array $arguments = [])
 * @method \Http\Promise\Promise queryTopicRouteTableAsync($arguments = [])
 * @method \Dew\Acs\Result queryTopicReverseRouteTable(array $arguments = [])
 * @method \Http\Promise\Promise queryTopicReverseRouteTableAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTopicRouteTable(array $arguments = [])
 * @method \Http\Promise\Promise deleteTopicRouteTableAsync($arguments = [])
 * @method \Dew\Acs\Result createRule(array $arguments = [])
 * @method \Http\Promise\Promise createRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createRuleAction(array $arguments = [])
 * @method \Http\Promise\Promise createRuleActionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRuleAction(array $arguments = [])
 * @method \Http\Promise\Promise deleteRuleActionAsync($arguments = [])
 * @method \Dew\Acs\Result getRule(array $arguments = [])
 * @method \Http\Promise\Promise getRuleAsync($arguments = [])
 * @method \Dew\Acs\Result getRuleAction(array $arguments = [])
 * @method \Http\Promise\Promise getRuleActionAsync($arguments = [])
 * @method \Dew\Acs\Result listRule(array $arguments = [])
 * @method \Http\Promise\Promise listRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listRuleActions(array $arguments = [])
 * @method \Http\Promise\Promise listRuleActionsAsync($arguments = [])
 * @method \Dew\Acs\Result startRule(array $arguments = [])
 * @method \Http\Promise\Promise startRuleAsync($arguments = [])
 * @method \Dew\Acs\Result stopRule(array $arguments = [])
 * @method \Http\Promise\Promise stopRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateRule(array $arguments = [])
 * @method \Http\Promise\Promise updateRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateRuleAction(array $arguments = [])
 * @method \Http\Promise\Promise updateRuleActionAsync($arguments = [])
 * @method \Dew\Acs\Result createParser(array $arguments = [])
 * @method \Http\Promise\Promise createParserAsync($arguments = [])
 * @method \Dew\Acs\Result updateParser(array $arguments = [])
 * @method \Http\Promise\Promise updateParserAsync($arguments = [])
 * @method \Dew\Acs\Result listParser(array $arguments = [])
 * @method \Http\Promise\Promise listParserAsync($arguments = [])
 * @method \Dew\Acs\Result getParser(array $arguments = [])
 * @method \Http\Promise\Promise getParserAsync($arguments = [])
 * @method \Dew\Acs\Result deleteParser(array $arguments = [])
 * @method \Http\Promise\Promise deleteParserAsync($arguments = [])
 * @method \Dew\Acs\Result createParserDataSource(array $arguments = [])
 * @method \Http\Promise\Promise createParserDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result updateParserDataSource(array $arguments = [])
 * @method \Http\Promise\Promise updateParserDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result listParserDataSource(array $arguments = [])
 * @method \Http\Promise\Promise listParserDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result getParserDataSource(array $arguments = [])
 * @method \Http\Promise\Promise getParserDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteParserDataSource(array $arguments = [])
 * @method \Http\Promise\Promise deleteParserDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result createDataSourceItem(array $arguments = [])
 * @method \Http\Promise\Promise createDataSourceItemAsync($arguments = [])
 * @method \Dew\Acs\Result listDataSourceItem(array $arguments = [])
 * @method \Http\Promise\Promise listDataSourceItemAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataSourceItem(array $arguments = [])
 * @method \Http\Promise\Promise deleteDataSourceItemAsync($arguments = [])
 * @method \Dew\Acs\Result createDestination(array $arguments = [])
 * @method \Http\Promise\Promise createDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result updateDestination(array $arguments = [])
 * @method \Http\Promise\Promise updateDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result listDestination(array $arguments = [])
 * @method \Http\Promise\Promise listDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDestination(array $arguments = [])
 * @method \Http\Promise\Promise deleteDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result getDestination(array $arguments = [])
 * @method \Http\Promise\Promise getDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result attachParserDataSource(array $arguments = [])
 * @method \Http\Promise\Promise attachParserDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result attachDestination(array $arguments = [])
 * @method \Http\Promise\Promise attachDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result detachParserDataSource(array $arguments = [])
 * @method \Http\Promise\Promise detachParserDataSourceAsync($arguments = [])
 * @method \Dew\Acs\Result detachDestination(array $arguments = [])
 * @method \Http\Promise\Promise detachDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result listParserDestination(array $arguments = [])
 * @method \Http\Promise\Promise listParserDestinationAsync($arguments = [])
 * @method \Dew\Acs\Result publishScript(array $arguments = [])
 * @method \Http\Promise\Promise publishScriptAsync($arguments = [])
 * @method \Dew\Acs\Result saveScript(array $arguments = [])
 * @method \Http\Promise\Promise saveScriptAsync($arguments = [])
 * @method \Dew\Acs\Result startParser(array $arguments = [])
 * @method \Http\Promise\Promise startParserAsync($arguments = [])
 * @method \Dew\Acs\Result stopParser(array $arguments = [])
 * @method \Http\Promise\Promise stopParserAsync($arguments = [])
 * @method \Dew\Acs\Result listAnalyticsData(array $arguments = [])
 * @method \Http\Promise\Promise listAnalyticsDataAsync($arguments = [])
 * @method \Dew\Acs\Result writeDevicesHotStorageData(array $arguments = [])
 * @method \Http\Promise\Promise writeDevicesHotStorageDataAsync($arguments = [])
 * @method \Dew\Acs\Result queryDevicesHotStorageDataStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryDevicesHotStorageDataStatusAsync($arguments = [])
 * @method \Dew\Acs\Result queryDevicesHotStorageData(array $arguments = [])
 * @method \Http\Promise\Promise queryDevicesHotStorageDataAsync($arguments = [])
 * @method \Dew\Acs\Result resetDeviceTimeline(array $arguments = [])
 * @method \Http\Promise\Promise resetDeviceTimelineAsync($arguments = [])
 * @method \Dew\Acs\Result createDataAPIService(array $arguments = [])
 * @method \Http\Promise\Promise createDataAPIServiceAsync($arguments = [])
 * @method \Dew\Acs\Result getDataAPIServiceDetail(array $arguments = [])
 * @method \Http\Promise\Promise getDataAPIServiceDetailAsync($arguments = [])
 * @method \Dew\Acs\Result invokeDataAPIService(array $arguments = [])
 * @method \Http\Promise\Promise invokeDataAPIServiceAsync($arguments = [])
 * @method \Dew\Acs\Result addDataForApiSource(array $arguments = [])
 * @method \Http\Promise\Promise addDataForApiSourceAsync($arguments = [])
 * @method \Dew\Acs\Result batchAddDataForApiSource(array $arguments = [])
 * @method \Http\Promise\Promise batchAddDataForApiSourceAsync($arguments = [])
 * @method \Dew\Acs\Result createDownloadDataJob(array $arguments = [])
 * @method \Http\Promise\Promise createDownloadDataJobAsync($arguments = [])
 * @method \Dew\Acs\Result getDownloadFile(array $arguments = [])
 * @method \Http\Promise\Promise getDownloadFileAsync($arguments = [])
 * @method \Dew\Acs\Result batchPub(array $arguments = [])
 * @method \Http\Promise\Promise batchPubAsync($arguments = [])
 * @method \Dew\Acs\Result pub(array $arguments = [])
 * @method \Http\Promise\Promise pubAsync($arguments = [])
 * @method \Dew\Acs\Result pubBroadcast(array $arguments = [])
 * @method \Http\Promise\Promise pubBroadcastAsync($arguments = [])
 * @method \Dew\Acs\Result rRpc(array $arguments = [])
 * @method \Http\Promise\Promise rRpcAsync($arguments = [])
 * @method \Dew\Acs\Result asyncRRpc(array $arguments = [])
 * @method \Http\Promise\Promise asyncRRpcAsync($arguments = [])
 * @method \Dew\Acs\Result queryMessageInfo(array $arguments = [])
 * @method \Http\Promise\Promise queryMessageInfoAsync($arguments = [])
 * @method \Dew\Acs\Result subscribeTopic(array $arguments = [])
 * @method \Http\Promise\Promise subscribeTopicAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceSubTopic(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceSubTopicAsync($arguments = [])
 * @method \Dew\Acs\Result updateTopicConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateTopicConfigAsync($arguments = [])
 * @method \Dew\Acs\Result createSubscribeRelation(array $arguments = [])
 * @method \Http\Promise\Promise createSubscribeRelationAsync($arguments = [])
 * @method \Dew\Acs\Result updateSubscribeRelation(array $arguments = [])
 * @method \Http\Promise\Promise updateSubscribeRelationAsync($arguments = [])
 * @method \Dew\Acs\Result querySubscribeRelation(array $arguments = [])
 * @method \Http\Promise\Promise querySubscribeRelationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSubscribeRelation(array $arguments = [])
 * @method \Http\Promise\Promise deleteSubscribeRelationAsync($arguments = [])
 * @method \Dew\Acs\Result createConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise createConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result queryConsumerGroupByGroupId(array $arguments = [])
 * @method \Http\Promise\Promise queryConsumerGroupByGroupIdAsync($arguments = [])
 * @method \Dew\Acs\Result queryConsumerGroupList(array $arguments = [])
 * @method \Http\Promise\Promise queryConsumerGroupListAsync($arguments = [])
 * @method \Dew\Acs\Result queryConsumerGroupStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryConsumerGroupStatusAsync($arguments = [])
 * @method \Dew\Acs\Result resetConsumerGroupPosition(array $arguments = [])
 * @method \Http\Promise\Promise resetConsumerGroupPositionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createConsumerGroupSubscribeRelation(array $arguments = [])
 * @method \Http\Promise\Promise createConsumerGroupSubscribeRelationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConsumerGroupSubscribeRelation(array $arguments = [])
 * @method \Http\Promise\Promise deleteConsumerGroupSubscribeRelationAsync($arguments = [])
 * @method \Dew\Acs\Result getDeviceShadow(array $arguments = [])
 * @method \Http\Promise\Promise getDeviceShadowAsync($arguments = [])
 * @method \Dew\Acs\Result updateDeviceShadow(array $arguments = [])
 * @method \Http\Promise\Promise updateDeviceShadowAsync($arguments = [])
 * @method \Dew\Acs\Result generateOTAUploadURL(array $arguments = [])
 * @method \Http\Promise\Promise generateOTAUploadURLAsync($arguments = [])
 * @method \Dew\Acs\Result generateDeviceNameListURL(array $arguments = [])
 * @method \Http\Promise\Promise generateDeviceNameListURLAsync($arguments = [])
 * @method \Dew\Acs\Result createOTAFirmware(array $arguments = [])
 * @method \Http\Promise\Promise createOTAFirmwareAsync($arguments = [])
 * @method \Dew\Acs\Result modifyOTAFirmware(array $arguments = [])
 * @method \Http\Promise\Promise modifyOTAFirmwareAsync($arguments = [])
 * @method \Dew\Acs\Result deleteOTAFirmware(array $arguments = [])
 * @method \Http\Promise\Promise deleteOTAFirmwareAsync($arguments = [])
 * @method \Dew\Acs\Result listOTAFirmware(array $arguments = [])
 * @method \Http\Promise\Promise listOTAFirmwareAsync($arguments = [])
 * @method \Dew\Acs\Result queryOTAFirmware(array $arguments = [])
 * @method \Http\Promise\Promise queryOTAFirmwareAsync($arguments = [])
 * @method \Dew\Acs\Result createOTAVerifyJob(array $arguments = [])
 * @method \Http\Promise\Promise createOTAVerifyJobAsync($arguments = [])
 * @method \Dew\Acs\Result createOTAStaticUpgradeJob(array $arguments = [])
 * @method \Http\Promise\Promise createOTAStaticUpgradeJobAsync($arguments = [])
 * @method \Dew\Acs\Result createOTADynamicUpgradeJob(array $arguments = [])
 * @method \Http\Promise\Promise createOTADynamicUpgradeJobAsync($arguments = [])
 * @method \Dew\Acs\Result listOTAJobByFirmware(array $arguments = [])
 * @method \Http\Promise\Promise listOTAJobByFirmwareAsync($arguments = [])
 * @method \Dew\Acs\Result listOTAJobByDevice(array $arguments = [])
 * @method \Http\Promise\Promise listOTAJobByDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result listOTATaskByJob(array $arguments = [])
 * @method \Http\Promise\Promise listOTATaskByJobAsync($arguments = [])
 * @method \Dew\Acs\Result queryOTAJob(array $arguments = [])
 * @method \Http\Promise\Promise queryOTAJobAsync($arguments = [])
 * @method \Dew\Acs\Result cancelOTAStrategyByJob(array $arguments = [])
 * @method \Http\Promise\Promise cancelOTAStrategyByJobAsync($arguments = [])
 * @method \Dew\Acs\Result cancelOTATaskByJob(array $arguments = [])
 * @method \Http\Promise\Promise cancelOTATaskByJobAsync($arguments = [])
 * @method \Dew\Acs\Result cancelOTATaskByDevice(array $arguments = [])
 * @method \Http\Promise\Promise cancelOTATaskByDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result createOTAModule(array $arguments = [])
 * @method \Http\Promise\Promise createOTAModuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateOTAModule(array $arguments = [])
 * @method \Http\Promise\Promise updateOTAModuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteOTAModule(array $arguments = [])
 * @method \Http\Promise\Promise deleteOTAModuleAsync($arguments = [])
 * @method \Dew\Acs\Result listOTAModuleByProduct(array $arguments = [])
 * @method \Http\Promise\Promise listOTAModuleByProductAsync($arguments = [])
 * @method \Dew\Acs\Result confirmOTATask(array $arguments = [])
 * @method \Http\Promise\Promise confirmOTATaskAsync($arguments = [])
 * @method \Dew\Acs\Result listOTAUnfinishedTaskByDevice(array $arguments = [])
 * @method \Http\Promise\Promise listOTAUnfinishedTaskByDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result reupgradeOTATask(array $arguments = [])
 * @method \Http\Promise\Promise reupgradeOTATaskAsync($arguments = [])
 * @method \Dew\Acs\Result listOTAModuleVersionsByDevice(array $arguments = [])
 * @method \Http\Promise\Promise listOTAModuleVersionsByDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result openIotService(array $arguments = [])
 * @method \Http\Promise\Promise openIotServiceAsync($arguments = [])
 * @method \Dew\Acs\Result bindLicenseProduct(array $arguments = [])
 * @method \Http\Promise\Promise bindLicenseProductAsync($arguments = [])
 * @method \Dew\Acs\Result unbindLicenseProduct(array $arguments = [])
 * @method \Http\Promise\Promise unbindLicenseProductAsync($arguments = [])
 * @method \Dew\Acs\Result bindLicenseDevice(array $arguments = [])
 * @method \Http\Promise\Promise bindLicenseDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result checkBindLicenseDeviceProgress(array $arguments = [])
 * @method \Http\Promise\Promise checkBindLicenseDeviceProgressAsync($arguments = [])
 * @method \Dew\Acs\Result queryLicenseDeviceList(array $arguments = [])
 * @method \Http\Promise\Promise queryLicenseDeviceListAsync($arguments = [])
 * @method \Dew\Acs\Result reBindLicenseDevice(array $arguments = [])
 * @method \Http\Promise\Promise reBindLicenseDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result importDTData(array $arguments = [])
 * @method \Http\Promise\Promise importDTDataAsync($arguments = [])
 * @method \Dew\Acs\Result printByTemplate(array $arguments = [])
 * @method \Http\Promise\Promise printByTemplateAsync($arguments = [])
 * @method \Dew\Acs\Result gisQueryDeviceLocation(array $arguments = [])
 * @method \Http\Promise\Promise gisQueryDeviceLocationAsync($arguments = [])
 * @method \Dew\Acs\Result gisSearchDeviceTrace(array $arguments = [])
 * @method \Http\Promise\Promise gisSearchDeviceTraceAsync($arguments = [])
 * @method \Dew\Acs\Result createSpeech(array $arguments = [])
 * @method \Http\Promise\Promise createSpeechAsync($arguments = [])
 * @method \Dew\Acs\Result updateSpeech(array $arguments = [])
 * @method \Http\Promise\Promise updateSpeechAsync($arguments = [])
 * @method \Dew\Acs\Result querySpeechLicenseAvailableQuota(array $arguments = [])
 * @method \Http\Promise\Promise querySpeechLicenseAvailableQuotaAsync($arguments = [])
 * @method \Dew\Acs\Result getSpeechVoice(array $arguments = [])
 * @method \Http\Promise\Promise getSpeechVoiceAsync($arguments = [])
 * @method \Dew\Acs\Result testSpeech(array $arguments = [])
 * @method \Http\Promise\Promise testSpeechAsync($arguments = [])
 * @method \Dew\Acs\Result querySpeech(array $arguments = [])
 * @method \Http\Promise\Promise querySpeechAsync($arguments = [])
 * @method \Dew\Acs\Result querySpeechList(array $arguments = [])
 * @method \Http\Promise\Promise querySpeechListAsync($arguments = [])
 * @method \Dew\Acs\Result pushSpeech(array $arguments = [])
 * @method \Http\Promise\Promise pushSpeechAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSpeech(array $arguments = [])
 * @method \Http\Promise\Promise deleteSpeechAsync($arguments = [])
 * @method \Dew\Acs\Result querySolutionDeviceGroupPage(array $arguments = [])
 * @method \Http\Promise\Promise querySolutionDeviceGroupPageAsync($arguments = [])
 * @method \Dew\Acs\Result querySpeechPushJob(array $arguments = [])
 * @method \Http\Promise\Promise querySpeechPushJobAsync($arguments = [])
 * @method \Dew\Acs\Result querySpeechPushJobDevice(array $arguments = [])
 * @method \Http\Promise\Promise querySpeechPushJobDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result querySpeechPushJobSpeech(array $arguments = [])
 * @method \Http\Promise\Promise querySpeechPushJobSpeechAsync($arguments = [])
 * @method \Dew\Acs\Result speechByCombination(array $arguments = [])
 * @method \Http\Promise\Promise speechByCombinationAsync($arguments = [])
 * @method \Dew\Acs\Result syncSpeechByCombination(array $arguments = [])
 * @method \Http\Promise\Promise syncSpeechByCombinationAsync($arguments = [])
 * @method \Dew\Acs\Result speechBySynthesis(array $arguments = [])
 * @method \Http\Promise\Promise speechBySynthesisAsync($arguments = [])
 * @method \Dew\Acs\Result querySpeechDevice(array $arguments = [])
 * @method \Http\Promise\Promise querySpeechDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result queryDeviceSpeech(array $arguments = [])
 * @method \Http\Promise\Promise queryDeviceSpeechAsync($arguments = [])
 * @method \Dew\Acs\Result getSpeechDeviceDetail(array $arguments = [])
 * @method \Http\Promise\Promise getSpeechDeviceDetailAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDeviceSpeech(array $arguments = [])
 * @method \Http\Promise\Promise deleteDeviceSpeechAsync($arguments = [])
 * @method \Dew\Acs\Result getShareTaskByDeviceOpen(array $arguments = [])
 * @method \Http\Promise\Promise getShareTaskByDeviceOpenAsync($arguments = [])
 * @method \Dew\Acs\Result getShareSpeechModelAudio(array $arguments = [])
 * @method \Http\Promise\Promise getShareSpeechModelAudioAsync($arguments = [])
 * @method \Dew\Acs\Result getSpeechLicenseDeviceStatistics(array $arguments = [])
 * @method \Http\Promise\Promise getSpeechLicenseDeviceStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result querySpeechLicenseDeviceList(array $arguments = [])
 * @method \Http\Promise\Promise querySpeechLicenseDeviceListAsync($arguments = [])
 * @method \Dew\Acs\Result addShareTaskDevice(array $arguments = [])
 * @method \Http\Promise\Promise addShareTaskDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteShareTaskDevice(array $arguments = [])
 * @method \Http\Promise\Promise deleteShareTaskDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result queryProjectShareDeviceList(array $arguments = [])
 * @method \Http\Promise\Promise queryProjectShareDeviceListAsync($arguments = [])
 * @method \Dew\Acs\Result queryShareTaskDeviceList(array $arguments = [])
 * @method \Http\Promise\Promise queryShareTaskDeviceListAsync($arguments = [])
 * @method \Dew\Acs\Result shareSpeechByCombination(array $arguments = [])
 * @method \Http\Promise\Promise shareSpeechByCombinationAsync($arguments = [])
 * @method \Dew\Acs\Result pageQuerySharedSpeechOpen(array $arguments = [])
 * @method \Http\Promise\Promise pageQuerySharedSpeechOpenAsync($arguments = [])
 * @method \Dew\Acs\Result countSpeechBroadcastHour(array $arguments = [])
 * @method \Http\Promise\Promise countSpeechBroadcastHourAsync($arguments = [])
 * @method \Dew\Acs\Result pageQuerySpeechBroadcastHour(array $arguments = [])
 * @method \Http\Promise\Promise pageQuerySpeechBroadcastHourAsync($arguments = [])
 * @method \Dew\Acs\Result createSharePromotionActivity(array $arguments = [])
 * @method \Http\Promise\Promise createSharePromotionActivityAsync($arguments = [])
 * @method \Dew\Acs\Result querySharePromotionActivityAuditResult(array $arguments = [])
 * @method \Http\Promise\Promise querySharePromotionActivityAuditResultAsync($arguments = [])
 * @method \Dew\Acs\Result addDeviceToSharePromotion(array $arguments = [])
 * @method \Http\Promise\Promise addDeviceToSharePromotionAsync($arguments = [])
 * @method \Dew\Acs\Result createSharePromotionSpeechModel(array $arguments = [])
 * @method \Http\Promise\Promise createSharePromotionSpeechModelAsync($arguments = [])
 * @method \Dew\Acs\Result queryShareProductNameByProductKey(array $arguments = [])
 * @method \Http\Promise\Promise queryShareProductNameByProductKeyAsync($arguments = [])
 * @method \Dew\Acs\Result createSoundCode(array $arguments = [])
 * @method \Http\Promise\Promise createSoundCodeAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSoundCode(array $arguments = [])
 * @method \Http\Promise\Promise deleteSoundCodeAsync($arguments = [])
 * @method \Dew\Acs\Result querySoundCodeList(array $arguments = [])
 * @method \Http\Promise\Promise querySoundCodeListAsync($arguments = [])
 * @method \Dew\Acs\Result getSoundCodeAudio(array $arguments = [])
 * @method \Http\Promise\Promise getSoundCodeAudioAsync($arguments = [])
 * @method \Dew\Acs\Result createSoundCodeSchedule(array $arguments = [])
 * @method \Http\Promise\Promise createSoundCodeScheduleAsync($arguments = [])
 * @method \Dew\Acs\Result updateSoundCodeSchedule(array $arguments = [])
 * @method \Http\Promise\Promise updateSoundCodeScheduleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSoundCodeSchedule(array $arguments = [])
 * @method \Http\Promise\Promise deleteSoundCodeScheduleAsync($arguments = [])
 * @method \Dew\Acs\Result querySoundCodeScheduleList(array $arguments = [])
 * @method \Http\Promise\Promise querySoundCodeScheduleListAsync($arguments = [])
 * @method \Dew\Acs\Result getSoundCodeSchedule(array $arguments = [])
 * @method \Http\Promise\Promise getSoundCodeScheduleAsync($arguments = [])
 * @method \Dew\Acs\Result updateSchedulePeriod(array $arguments = [])
 * @method \Http\Promise\Promise updateSchedulePeriodAsync($arguments = [])
 * @method \Dew\Acs\Result createSchedulePeriod(array $arguments = [])
 * @method \Http\Promise\Promise createSchedulePeriodAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSchedulePeriod(array $arguments = [])
 * @method \Http\Promise\Promise deleteSchedulePeriodAsync($arguments = [])
 * @method \Dew\Acs\Result querySchedulePeriodList(array $arguments = [])
 * @method \Http\Promise\Promise querySchedulePeriodListAsync($arguments = [])
 * @method \Dew\Acs\Result createSoundCodeLabel(array $arguments = [])
 * @method \Http\Promise\Promise createSoundCodeLabelAsync($arguments = [])
 * @method \Dew\Acs\Result updateSoundCodeLabel(array $arguments = [])
 * @method \Http\Promise\Promise updateSoundCodeLabelAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSoundCodeLabel(array $arguments = [])
 * @method \Http\Promise\Promise deleteSoundCodeLabelAsync($arguments = [])
 * @method \Dew\Acs\Result querySoundCodeLabelList(array $arguments = [])
 * @method \Http\Promise\Promise querySoundCodeLabelListAsync($arguments = [])
 * @method \Dew\Acs\Result batchCreateSoundCodeLabel(array $arguments = [])
 * @method \Http\Promise\Promise batchCreateSoundCodeLabelAsync($arguments = [])
 * @method \Dew\Acs\Result batchCreateSoundCodeLabelWithLabels(array $arguments = [])
 * @method \Http\Promise\Promise batchCreateSoundCodeLabelWithLabelsAsync($arguments = [])
 * @method \Dew\Acs\Result querySoundCodeLabelBatchList(array $arguments = [])
 * @method \Http\Promise\Promise querySoundCodeLabelBatchListAsync($arguments = [])
 * @method \Dew\Acs\Result querySoundCodeLabelBatchFailedResult(array $arguments = [])
 * @method \Http\Promise\Promise querySoundCodeLabelBatchFailedResultAsync($arguments = [])
 * @method \Dew\Acs\Result packageSoundCodeLabelBatchAudio(array $arguments = [])
 * @method \Http\Promise\Promise packageSoundCodeLabelBatchAudioAsync($arguments = [])
 * @method \Dew\Acs\Result retrySoundCodeLabelBatch(array $arguments = [])
 * @method \Http\Promise\Promise retrySoundCodeLabelBatchAsync($arguments = [])
 * @method \Dew\Acs\Result updateSoundCode(array $arguments = [])
 * @method \Http\Promise\Promise updateSoundCodeAsync($arguments = [])
 * @method \Dew\Acs\Result createSceneRule(array $arguments = [])
 * @method \Http\Promise\Promise createSceneRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSceneRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteSceneRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateSceneRule(array $arguments = [])
 * @method \Http\Promise\Promise updateSceneRuleAsync($arguments = [])
 * @method \Dew\Acs\Result getSceneRule(array $arguments = [])
 * @method \Http\Promise\Promise getSceneRuleAsync($arguments = [])
 * @method \Dew\Acs\Result querySceneRule(array $arguments = [])
 * @method \Http\Promise\Promise querySceneRuleAsync($arguments = [])
 * @method \Dew\Acs\Result enableSceneRule(array $arguments = [])
 * @method \Http\Promise\Promise enableSceneRuleAsync($arguments = [])
 * @method \Dew\Acs\Result disableSceneRule(array $arguments = [])
 * @method \Http\Promise\Promise disableSceneRuleAsync($arguments = [])
 * @method \Dew\Acs\Result triggerSceneRule(array $arguments = [])
 * @method \Http\Promise\Promise triggerSceneRuleAsync($arguments = [])
 * @method \Dew\Acs\Result querySummarySceneRuleLog(array $arguments = [])
 * @method \Http\Promise\Promise querySummarySceneRuleLogAsync($arguments = [])
 * @method \Dew\Acs\Result queryDetailSceneRuleLog(array $arguments = [])
 * @method \Http\Promise\Promise queryDetailSceneRuleLogAsync($arguments = [])
 * @method \Dew\Acs\Result createEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise createEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result updateEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise updateEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise getEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result queryEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise queryEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result bindGatewayToEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise bindGatewayToEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result queryEdgeInstanceGateway(array $arguments = [])
 * @method \Http\Promise\Promise queryEdgeInstanceGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result bindDriverToEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise bindDriverToEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result unbindDriverFromEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise unbindDriverFromEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result queryEdgeInstanceDriver(array $arguments = [])
 * @method \Http\Promise\Promise queryEdgeInstanceDriverAsync($arguments = [])
 * @method \Dew\Acs\Result setEdgeInstanceDriverConfigs(array $arguments = [])
 * @method \Http\Promise\Promise setEdgeInstanceDriverConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result clearEdgeInstanceDriverConfigs(array $arguments = [])
 * @method \Http\Promise\Promise clearEdgeInstanceDriverConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetEdgeInstanceDriverConfigs(array $arguments = [])
 * @method \Http\Promise\Promise batchGetEdgeInstanceDriverConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result batchBindDeviceToEdgeInstanceWithDriver(array $arguments = [])
 * @method \Http\Promise\Promise batchBindDeviceToEdgeInstanceWithDriverAsync($arguments = [])
 * @method \Dew\Acs\Result batchUnbindDeviceFromEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise batchUnbindDeviceFromEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result queryEdgeInstanceDevice(array $arguments = [])
 * @method \Http\Promise\Promise queryEdgeInstanceDeviceAsync($arguments = [])
 * @method \Dew\Acs\Result batchSetEdgeInstanceDeviceConfig(array $arguments = [])
 * @method \Http\Promise\Promise batchSetEdgeInstanceDeviceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result batchClearEdgeInstanceDeviceConfig(array $arguments = [])
 * @method \Http\Promise\Promise batchClearEdgeInstanceDeviceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetEdgeInstanceDeviceConfig(array $arguments = [])
 * @method \Http\Promise\Promise batchGetEdgeInstanceDeviceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result createEdgeInstanceDeployment(array $arguments = [])
 * @method \Http\Promise\Promise createEdgeInstanceDeploymentAsync($arguments = [])
 * @method \Dew\Acs\Result closeEdgeInstanceDeployment(array $arguments = [])
 * @method \Http\Promise\Promise closeEdgeInstanceDeploymentAsync($arguments = [])
 * @method \Dew\Acs\Result getEdgeInstanceDeployment(array $arguments = [])
 * @method \Http\Promise\Promise getEdgeInstanceDeploymentAsync($arguments = [])
 * @method \Dew\Acs\Result queryEdgeInstanceHistoricDeployment(array $arguments = [])
 * @method \Http\Promise\Promise queryEdgeInstanceHistoricDeploymentAsync($arguments = [])
 * @method \Dew\Acs\Result createEdgeDriver(array $arguments = [])
 * @method \Http\Promise\Promise createEdgeDriverAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEdgeDriver(array $arguments = [])
 * @method \Http\Promise\Promise deleteEdgeDriverAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetEdgeDriver(array $arguments = [])
 * @method \Http\Promise\Promise batchGetEdgeDriverAsync($arguments = [])
 * @method \Dew\Acs\Result queryEdgeDriver(array $arguments = [])
 * @method \Http\Promise\Promise queryEdgeDriverAsync($arguments = [])
 * @method \Dew\Acs\Result createEdgeDriverVersion(array $arguments = [])
 * @method \Http\Promise\Promise createEdgeDriverVersionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEdgeDriverVersion(array $arguments = [])
 * @method \Http\Promise\Promise deleteEdgeDriverVersionAsync($arguments = [])
 * @method \Dew\Acs\Result updateEdgeDriverVersion(array $arguments = [])
 * @method \Http\Promise\Promise updateEdgeDriverVersionAsync($arguments = [])
 * @method \Dew\Acs\Result getEdgeDriverVersion(array $arguments = [])
 * @method \Http\Promise\Promise getEdgeDriverVersionAsync($arguments = [])
 * @method \Dew\Acs\Result queryEdgeDriverVersion(array $arguments = [])
 * @method \Http\Promise\Promise queryEdgeDriverVersionAsync($arguments = [])
 * @method \Dew\Acs\Result createEdgeOssPreSignedAddress(array $arguments = [])
 * @method \Http\Promise\Promise createEdgeOssPreSignedAddressAsync($arguments = [])
 * @method \Dew\Acs\Result bindApplicationToEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise bindApplicationToEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result unbindApplicationFromEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise unbindApplicationFromEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createEdgeInstanceChannel(array $arguments = [])
 * @method \Http\Promise\Promise createEdgeInstanceChannelAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeleteEdgeInstanceChannel(array $arguments = [])
 * @method \Http\Promise\Promise batchDeleteEdgeInstanceChannelAsync($arguments = [])
 * @method \Dew\Acs\Result updateEdgeInstanceChannel(array $arguments = [])
 * @method \Http\Promise\Promise updateEdgeInstanceChannelAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetEdgeInstanceChannel(array $arguments = [])
 * @method \Http\Promise\Promise batchGetEdgeInstanceChannelAsync($arguments = [])
 * @method \Dew\Acs\Result queryEdgeInstanceChannel(array $arguments = [])
 * @method \Http\Promise\Promise queryEdgeInstanceChannelAsync($arguments = [])
 * @method \Dew\Acs\Result batchSetEdgeInstanceDeviceChannel(array $arguments = [])
 * @method \Http\Promise\Promise batchSetEdgeInstanceDeviceChannelAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetEdgeInstanceDeviceChannel(array $arguments = [])
 * @method \Http\Promise\Promise batchGetEdgeInstanceDeviceChannelAsync($arguments = [])
 * @method \Dew\Acs\Result queryEdgeInstanceDeviceByDriver(array $arguments = [])
 * @method \Http\Promise\Promise queryEdgeInstanceDeviceByDriverAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetEdgeInstanceDeviceDriver(array $arguments = [])
 * @method \Http\Promise\Promise batchGetEdgeInstanceDeviceDriverAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetDeviceBindStatus(array $arguments = [])
 * @method \Http\Promise\Promise batchGetDeviceBindStatusAsync($arguments = [])
 * @method \Dew\Acs\Result replaceEdgeInstanceGateway(array $arguments = [])
 * @method \Http\Promise\Promise replaceEdgeInstanceGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result releaseEdgeDriverVersion(array $arguments = [])
 * @method \Http\Promise\Promise releaseEdgeDriverVersionAsync($arguments = [])
 * @method \Dew\Acs\Result bindRoleToEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise bindRoleToEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result unbindRoleFromEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise unbindRoleFromEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result bindSceneRuleToEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise bindSceneRuleToEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result unbindSceneRuleFromEdgeInstance(array $arguments = [])
 * @method \Http\Promise\Promise unbindSceneRuleFromEdgeInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result queryEdgeInstanceSceneRule(array $arguments = [])
 * @method \Http\Promise\Promise queryEdgeInstanceSceneRuleAsync($arguments = [])
 * @method \Dew\Acs\Result enableDeviceTunnel(array $arguments = [])
 * @method \Http\Promise\Promise enableDeviceTunnelAsync($arguments = [])
 * @method \Dew\Acs\Result getDeviceTunnelStatus(array $arguments = [])
 * @method \Http\Promise\Promise getDeviceTunnelStatusAsync($arguments = [])
 * @method \Dew\Acs\Result disableDeviceTunnel(array $arguments = [])
 * @method \Http\Promise\Promise disableDeviceTunnelAsync($arguments = [])
 * @method \Dew\Acs\Result getDeviceTunnelShareStatus(array $arguments = [])
 * @method \Http\Promise\Promise getDeviceTunnelShareStatusAsync($arguments = [])
 * @method \Dew\Acs\Result enableDeviceTunnelShare(array $arguments = [])
 * @method \Http\Promise\Promise enableDeviceTunnelShareAsync($arguments = [])
 * @method \Dew\Acs\Result disableDeviceTunnelShare(array $arguments = [])
 * @method \Http\Promise\Promise disableDeviceTunnelShareAsync($arguments = [])
 * @method \Dew\Acs\Result refreshDeviceTunnelSharePassword(array $arguments = [])
 * @method \Http\Promise\Promise refreshDeviceTunnelSharePasswordAsync($arguments = [])
 * @method \Dew\Acs\Result createEdgeInstanceMessageRouting(array $arguments = [])
 * @method \Http\Promise\Promise createEdgeInstanceMessageRoutingAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEdgeInstanceMessageRouting(array $arguments = [])
 * @method \Http\Promise\Promise deleteEdgeInstanceMessageRoutingAsync($arguments = [])
 * @method \Dew\Acs\Result updateEdgeInstanceMessageRouting(array $arguments = [])
 * @method \Http\Promise\Promise updateEdgeInstanceMessageRoutingAsync($arguments = [])
 * @method \Dew\Acs\Result getEdgeInstanceMessageRouting(array $arguments = [])
 * @method \Http\Promise\Promise getEdgeInstanceMessageRoutingAsync($arguments = [])
 * @method \Dew\Acs\Result queryEdgeInstanceMessageRouting(array $arguments = [])
 * @method \Http\Promise\Promise queryEdgeInstanceMessageRoutingAsync($arguments = [])
 * @method \Dew\Acs\Result batchBindProductsIntoProject(array $arguments = [])
 * @method \Http\Promise\Promise batchBindProductsIntoProjectAsync($arguments = [])
 * @method \Dew\Acs\Result batchUnbindProjectProducts(array $arguments = [])
 * @method \Http\Promise\Promise batchUnbindProjectProductsAsync($arguments = [])
 * @method \Dew\Acs\Result batchBindDevicesIntoProject(array $arguments = [])
 * @method \Http\Promise\Promise batchBindDevicesIntoProjectAsync($arguments = [])
 * @method \Dew\Acs\Result batchUnbindProjectDevices(array $arguments = [])
 * @method \Http\Promise\Promise batchUnbindProjectDevicesAsync($arguments = [])
 * @method \Dew\Acs\Result queryStudioProjectList(array $arguments = [])
 * @method \Http\Promise\Promise queryStudioProjectListAsync($arguments = [])
 * @method \Dew\Acs\Result setStudioProjectCooperation(array $arguments = [])
 * @method \Http\Promise\Promise setStudioProjectCooperationAsync($arguments = [])
 * @method \Dew\Acs\Result queryStudioAppList(array $arguments = [])
 * @method \Http\Promise\Promise queryStudioAppListAsync($arguments = [])
 * @method \Dew\Acs\Result queryStudioAppPageListOpen(array $arguments = [])
 * @method \Http\Promise\Promise queryStudioAppPageListOpenAsync($arguments = [])
 * @method \Dew\Acs\Result queryStudioAppDomainListOpen(array $arguments = [])
 * @method \Http\Promise\Promise queryStudioAppDomainListOpenAsync($arguments = [])
 * @method \Dew\Acs\Result deleteStudioAppDomainOpen(array $arguments = [])
 * @method \Http\Promise\Promise deleteStudioAppDomainOpenAsync($arguments = [])
 * @method \Dew\Acs\Result createStudioAppDomainOpen(array $arguments = [])
 * @method \Http\Promise\Promise createStudioAppDomainOpenAsync($arguments = [])
 * @method \Dew\Acs\Result setupStudioAppAuthModeOpen(array $arguments = [])
 * @method \Http\Promise\Promise setupStudioAppAuthModeOpenAsync($arguments = [])
 * @method \Dew\Acs\Result getStudioAppTokenOpen(array $arguments = [])
 * @method \Http\Promise\Promise getStudioAppTokenOpenAsync($arguments = [])
 * @method \Dew\Acs\Result refreshStudioAppTokenOpen(array $arguments = [])
 * @method \Http\Promise\Promise refreshStudioAppTokenOpenAsync($arguments = [])
 * @method \Dew\Acs\Result publishStudioApp(array $arguments = [])
 * @method \Http\Promise\Promise publishStudioAppAsync($arguments = [])
 * @method \Dew\Acs\Result testSwitch(array $arguments = [])
 * @method \Http\Promise\Promise testSwitchAsync($arguments = [])
 * @method \Dew\Acs\Result createTopicConfig(array $arguments = [])
 * @method \Http\Promise\Promise createTopicConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTopicConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteTopicConfigAsync($arguments = [])
 * @method \Dew\Acs\Result queryTopicConfig(array $arguments = [])
 * @method \Http\Promise\Promise queryTopicConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUserDefineTableDataByPrimaryKey(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserDefineTableDataByPrimaryKeyAsync($arguments = [])
 * @method \Dew\Acs\Result addPowerStation(array $arguments = [])
 * @method \Http\Promise\Promise addPowerStationAsync($arguments = [])
 * @method \Dew\Acs\Result deletePowerStation(array $arguments = [])
 * @method \Http\Promise\Promise deletePowerStationAsync($arguments = [])
 * @method \Dew\Acs\Result listPowerStation(array $arguments = [])
 * @method \Http\Promise\Promise listPowerStationAsync($arguments = [])
 * @method \Dew\Acs\Result modifyPowerStation(array $arguments = [])
 * @method \Http\Promise\Promise modifyPowerStationAsync($arguments = [])
 * @method \Dew\Acs\Result startPTDetection(array $arguments = [])
 * @method \Http\Promise\Promise startPTDetectionAsync($arguments = [])
 * @method \Dew\Acs\Result updateOTAJob(array $arguments = [])
 * @method \Http\Promise\Promise updateOTAJobAsync($arguments = [])
 * @method \Dew\Acs\Result queryCustomTimelineTableStatus(array $arguments = [])
 * @method \Http\Promise\Promise queryCustomTimelineTableStatusAsync($arguments = [])
 * @method \Dew\Acs\Result copyThingModelAsync(array $arguments = [])
 * @method \Http\Promise\Promise copyThingModelAsyncAsync($arguments = [])
 * @method \Dew\Acs\Result getThingModelStatusInner(array $arguments = [])
 * @method \Http\Promise\Promise getThingModelStatusInnerAsync($arguments = [])
 * @method \Dew\Acs\Result publishThingModelAsync(array $arguments = [])
 * @method \Http\Promise\Promise publishThingModelAsyncAsync($arguments = [])
 * @method \Dew\Acs\Result publishThingModelAsyncInner(array $arguments = [])
 * @method \Http\Promise\Promise publishThingModelAsyncInnerAsync($arguments = [])
 * @method \Dew\Acs\Result unsubscribeTopic(array $arguments = [])
 * @method \Http\Promise\Promise unsubscribeTopicAsync($arguments = [])
 */
final class IotClient extends AcsClient
{
    //
}
