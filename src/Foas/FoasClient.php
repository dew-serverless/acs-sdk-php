<?php

declare(strict_types=1);

namespace Dew\Acs\Foas;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createCluster(array $arguments = [])
 * @method \Http\Promise\Promise createClusterAsync($arguments = [])
 * @method \Dew\Acs\Result createCellClusterOrder(array $arguments = [])
 * @method \Http\Promise\Promise createCellClusterOrderAsync($arguments = [])
 * @method \Dew\Acs\Result createPackage(array $arguments = [])
 * @method \Http\Promise\Promise createPackageAsync($arguments = [])
 * @method \Dew\Acs\Result modifyMasterSpec(array $arguments = [])
 * @method \Http\Promise\Promise modifyMasterSpecAsync($arguments = [])
 * @method \Dew\Acs\Result updateAutoScaleConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateAutoScaleConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getClusterMetrics(array $arguments = [])
 * @method \Http\Promise\Promise getClusterMetricsAsync($arguments = [])
 * @method \Dew\Acs\Result getClusterQueueInfo(array $arguments = [])
 * @method \Http\Promise\Promise getClusterQueueInfoAsync($arguments = [])
 * @method \Dew\Acs\Result getClusterResource(array $arguments = [])
 * @method \Http\Promise\Promise getClusterResourceAsync($arguments = [])
 * @method \Dew\Acs\Result listCluster(array $arguments = [])
 * @method \Http\Promise\Promise listClusterAsync($arguments = [])
 * @method \Dew\Acs\Result getClusterDetails(array $arguments = [])
 * @method \Http\Promise\Promise getClusterDetailsAsync($arguments = [])
 * @method \Dew\Acs\Result getClusterEngineVersions(array $arguments = [])
 * @method \Http\Promise\Promise getClusterEngineVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result getRawPlanJson(array $arguments = [])
 * @method \Http\Promise\Promise getRawPlanJsonAsync($arguments = [])
 * @method \Dew\Acs\Result expandCluster(array $arguments = [])
 * @method \Http\Promise\Promise expandClusterAsync($arguments = [])
 * @method \Dew\Acs\Result shrinkCluster(array $arguments = [])
 * @method \Http\Promise\Promise shrinkClusterAsync($arguments = [])
 * @method \Dew\Acs\Result destroyCluster(array $arguments = [])
 * @method \Http\Promise\Promise destroyClusterAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceState(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceStateAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceConfig(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceDetail(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceDetailAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceExceptions(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceExceptionsAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceFinalState(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceFinalStateAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceHistoryAutoScalePlanContent(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceHistoryAutoScalePlanContentAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceHistoryAutoScalePlanList(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceHistoryAutoScalePlanListAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceMetric(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceMetricAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceResource(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceResourceAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceRunSummary(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceRunSummaryAsync($arguments = [])
 * @method \Dew\Acs\Result listInstance(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getInstance(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceCheckpoint(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceCheckpointAsync($arguments = [])
 * @method \Dew\Acs\Result batchGetInstanceRunSummary(array $arguments = [])
 * @method \Http\Promise\Promise batchGetInstanceRunSummaryAsync($arguments = [])
 * @method \Dew\Acs\Result createFolder(array $arguments = [])
 * @method \Http\Promise\Promise createFolderAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFolder(array $arguments = [])
 * @method \Http\Promise\Promise deleteFolderAsync($arguments = [])
 * @method \Dew\Acs\Result getFolder(array $arguments = [])
 * @method \Http\Promise\Promise getFolderAsync($arguments = [])
 * @method \Dew\Acs\Result listChildFolder(array $arguments = [])
 * @method \Http\Promise\Promise listChildFolderAsync($arguments = [])
 * @method \Dew\Acs\Result mVFolder(array $arguments = [])
 * @method \Http\Promise\Promise mVFolderAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result deletePackage(array $arguments = [])
 * @method \Http\Promise\Promise deletePackageAsync($arguments = [])
 * @method \Dew\Acs\Result updatePackage(array $arguments = [])
 * @method \Http\Promise\Promise updatePackageAsync($arguments = [])
 * @method \Dew\Acs\Result getRefPackageJob(array $arguments = [])
 * @method \Http\Promise\Promise getRefPackageJobAsync($arguments = [])
 * @method \Dew\Acs\Result listPackage(array $arguments = [])
 * @method \Http\Promise\Promise listPackageAsync($arguments = [])
 * @method \Dew\Acs\Result createProject(array $arguments = [])
 * @method \Http\Promise\Promise createProjectAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProject(array $arguments = [])
 * @method \Http\Promise\Promise deleteProjectAsync($arguments = [])
 * @method \Dew\Acs\Result updateProject(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectAsync($arguments = [])
 * @method \Dew\Acs\Result updateProjectConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getProject(array $arguments = [])
 * @method \Http\Promise\Promise getProjectAsync($arguments = [])
 * @method \Dew\Acs\Result listProject(array $arguments = [])
 * @method \Http\Promise\Promise listProjectAsync($arguments = [])
 * @method \Dew\Acs\Result createQueue(array $arguments = [])
 * @method \Http\Promise\Promise createQueueAsync($arguments = [])
 * @method \Dew\Acs\Result deleteQueue(array $arguments = [])
 * @method \Http\Promise\Promise deleteQueueAsync($arguments = [])
 * @method \Dew\Acs\Result updateQueue(array $arguments = [])
 * @method \Http\Promise\Promise updateQueueAsync($arguments = [])
 * @method \Dew\Acs\Result listProjectBindQueue(array $arguments = [])
 * @method \Http\Promise\Promise listProjectBindQueueAsync($arguments = [])
 * @method \Dew\Acs\Result listProjectBindQueueResource(array $arguments = [])
 * @method \Http\Promise\Promise listProjectBindQueueResourceAsync($arguments = [])
 * @method \Dew\Acs\Result bindQueue(array $arguments = [])
 * @method \Http\Promise\Promise bindQueueAsync($arguments = [])
 * @method \Dew\Acs\Result unbindQueue(array $arguments = [])
 * @method \Http\Promise\Promise unbindQueueAsync($arguments = [])
 * @method \Dew\Acs\Result createJob(array $arguments = [])
 * @method \Http\Promise\Promise createJobAsync($arguments = [])
 * @method \Dew\Acs\Result deleteJob(array $arguments = [])
 * @method \Http\Promise\Promise deleteJobAsync($arguments = [])
 * @method \Dew\Acs\Result startJob(array $arguments = [])
 * @method \Http\Promise\Promise startJobAsync($arguments = [])
 * @method \Dew\Acs\Result updateJob(array $arguments = [])
 * @method \Http\Promise\Promise updateJobAsync($arguments = [])
 * @method \Dew\Acs\Result getJob(array $arguments = [])
 * @method \Http\Promise\Promise getJobAsync($arguments = [])
 * @method \Dew\Acs\Result listJob(array $arguments = [])
 * @method \Http\Promise\Promise listJobAsync($arguments = [])
 * @method \Dew\Acs\Result getJobLatestAutoScalePlan(array $arguments = [])
 * @method \Http\Promise\Promise getJobLatestAutoScalePlanAsync($arguments = [])
 * @method \Dew\Acs\Result commitJob(array $arguments = [])
 * @method \Http\Promise\Promise commitJobAsync($arguments = [])
 * @method \Dew\Acs\Result offlineJob(array $arguments = [])
 * @method \Http\Promise\Promise offlineJobAsync($arguments = [])
 * @method \Dew\Acs\Result validateJob(array $arguments = [])
 * @method \Http\Promise\Promise validateJobAsync($arguments = [])
 * @method \Dew\Acs\Result calcPlanJsonResource(array $arguments = [])
 * @method \Http\Promise\Promise calcPlanJsonResourceAsync($arguments = [])
 * @method \Dew\Acs\Result checkRawPlanJson(array $arguments = [])
 * @method \Http\Promise\Promise checkRawPlanJsonAsync($arguments = [])
 */
final class FoasClient extends AcsClient
{
    //
}
