<?php

declare(strict_types=1);

namespace Dew\Acs\Alikafka;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createPostPayOrder(array $arguments = [])
 * @method \Http\Promise\Promise createPostPayOrderAsync($arguments = [])
 * @method \Dew\Acs\Result createPostPayInstance(array $arguments = [])
 * @method \Http\Promise\Promise createPostPayInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createPrePayOrder(array $arguments = [])
 * @method \Http\Promise\Promise createPrePayOrderAsync($arguments = [])
 * @method \Dew\Acs\Result createPrePayInstance(array $arguments = [])
 * @method \Http\Promise\Promise createPrePayInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result startInstance(array $arguments = [])
 * @method \Http\Promise\Promise startInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceName(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceNameAsync($arguments = [])
 * @method \Dew\Acs\Result enableAutoGroupCreation(array $arguments = [])
 * @method \Http\Promise\Promise enableAutoGroupCreationAsync($arguments = [])
 * @method \Dew\Acs\Result enableAutoTopicCreation(array $arguments = [])
 * @method \Http\Promise\Promise enableAutoTopicCreationAsync($arguments = [])
 * @method \Dew\Acs\Result updateAllowedIp(array $arguments = [])
 * @method \Http\Promise\Promise updateAllowedIpAsync($arguments = [])
 * @method \Dew\Acs\Result updateInstanceConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateInstanceConfigAsync($arguments = [])
 * @method \Dew\Acs\Result changeResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise changeResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceList(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceListAsync($arguments = [])
 * @method \Dew\Acs\Result getAllowedIpList(array $arguments = [])
 * @method \Http\Promise\Promise getAllowedIpListAsync($arguments = [])
 * @method \Dew\Acs\Result getAllInstanceIdList(array $arguments = [])
 * @method \Http\Promise\Promise getAllInstanceIdListAsync($arguments = [])
 * @method \Dew\Acs\Result upgradePostPayOrder(array $arguments = [])
 * @method \Http\Promise\Promise upgradePostPayOrderAsync($arguments = [])
 * @method \Dew\Acs\Result upgradePrePayOrder(array $arguments = [])
 * @method \Http\Promise\Promise upgradePrePayOrderAsync($arguments = [])
 * @method \Dew\Acs\Result convertPostPayOrder(array $arguments = [])
 * @method \Http\Promise\Promise convertPostPayOrderAsync($arguments = [])
 * @method \Dew\Acs\Result upgradeInstanceVersion(array $arguments = [])
 * @method \Http\Promise\Promise upgradeInstanceVersionAsync($arguments = [])
 * @method \Dew\Acs\Result releaseInstance(array $arguments = [])
 * @method \Http\Promise\Promise releaseInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result stopInstance(array $arguments = [])
 * @method \Http\Promise\Promise stopInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result reopenInstance(array $arguments = [])
 * @method \Http\Promise\Promise reopenInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createScheduledScalingRule(array $arguments = [])
 * @method \Http\Promise\Promise createScheduledScalingRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScheduledScalingRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteScheduledScalingRuleAsync($arguments = [])
 * @method \Dew\Acs\Result modifyScheduledScalingRule(array $arguments = [])
 * @method \Http\Promise\Promise modifyScheduledScalingRuleAsync($arguments = [])
 * @method \Dew\Acs\Result getAutoScalingConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise getAutoScalingConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result getKafkaClientIp(array $arguments = [])
 * @method \Http\Promise\Promise getKafkaClientIpAsync($arguments = [])
 * @method \Dew\Acs\Result getTopicSubscribeStatus(array $arguments = [])
 * @method \Http\Promise\Promise getTopicSubscribeStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createTopic(array $arguments = [])
 * @method \Http\Promise\Promise createTopicAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTopic(array $arguments = [])
 * @method \Http\Promise\Promise deleteTopicAsync($arguments = [])
 * @method \Dew\Acs\Result modifyPartitionNum(array $arguments = [])
 * @method \Http\Promise\Promise modifyPartitionNumAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTopicRemark(array $arguments = [])
 * @method \Http\Promise\Promise modifyTopicRemarkAsync($arguments = [])
 * @method \Dew\Acs\Result updateTopicConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateTopicConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getTopicList(array $arguments = [])
 * @method \Http\Promise\Promise getTopicListAsync($arguments = [])
 * @method \Dew\Acs\Result getTopicStatus(array $arguments = [])
 * @method \Http\Promise\Promise getTopicStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getQuotaTip(array $arguments = [])
 * @method \Http\Promise\Promise getQuotaTipAsync($arguments = [])
 * @method \Dew\Acs\Result queryMessage(array $arguments = [])
 * @method \Http\Promise\Promise queryMessageAsync($arguments = [])
 * @method \Dew\Acs\Result createConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise createConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConsumerGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteConsumerGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateConsumerOffset(array $arguments = [])
 * @method \Http\Promise\Promise updateConsumerOffsetAsync($arguments = [])
 * @method \Dew\Acs\Result getConsumerList(array $arguments = [])
 * @method \Http\Promise\Promise getConsumerListAsync($arguments = [])
 * @method \Dew\Acs\Result getConsumerProgress(array $arguments = [])
 * @method \Http\Promise\Promise getConsumerProgressAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result createSaslUser(array $arguments = [])
 * @method \Http\Promise\Promise createSaslUserAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSaslUser(array $arguments = [])
 * @method \Http\Promise\Promise deleteSaslUserAsync($arguments = [])
 * @method \Dew\Acs\Result describeSaslUsers(array $arguments = [])
 * @method \Http\Promise\Promise describeSaslUsersAsync($arguments = [])
 * @method \Dew\Acs\Result createAcl(array $arguments = [])
 * @method \Http\Promise\Promise createAclAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAcl(array $arguments = [])
 * @method \Http\Promise\Promise deleteAclAsync($arguments = [])
 * @method \Dew\Acs\Result describeAcls(array $arguments = [])
 * @method \Http\Promise\Promise describeAclsAsync($arguments = [])
 * @method \Dew\Acs\Result describeAclResourceName(array $arguments = [])
 * @method \Http\Promise\Promise describeAclResourceNameAsync($arguments = [])
 */
final class AlikafkaClient extends AcsClient
{
    //
}
