<?php

declare(strict_types=1);

namespace Dew\Acs\IaCService;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createModule(array $arguments = [])
 * @method \Http\Promise\Promise createModuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateModuleAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateModuleAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listModules(array $arguments = [])
 * @method \Http\Promise\Promise listModulesAsync($arguments = [])
 * @method \Dew\Acs\Result getModule(array $arguments = [])
 * @method \Http\Promise\Promise getModuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteModule(array $arguments = [])
 * @method \Http\Promise\Promise deleteModuleAsync($arguments = [])
 * @method \Dew\Acs\Result createModuleVersion(array $arguments = [])
 * @method \Http\Promise\Promise createModuleVersionAsync($arguments = [])
 * @method \Dew\Acs\Result getModuleVersion(array $arguments = [])
 * @method \Http\Promise\Promise getModuleVersionAsync($arguments = [])
 * @method \Dew\Acs\Result listModuleVersion(array $arguments = [])
 * @method \Http\Promise\Promise listModuleVersionAsync($arguments = [])
 * @method \Dew\Acs\Result createTask(array $arguments = [])
 * @method \Http\Promise\Promise createTaskAsync($arguments = [])
 * @method \Dew\Acs\Result updateTaskAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateTaskAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listTasks(array $arguments = [])
 * @method \Http\Promise\Promise listTasksAsync($arguments = [])
 * @method \Dew\Acs\Result getTask(array $arguments = [])
 * @method \Http\Promise\Promise getTaskAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTask(array $arguments = [])
 * @method \Http\Promise\Promise deleteTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createJob(array $arguments = [])
 * @method \Http\Promise\Promise createJobAsync($arguments = [])
 * @method \Dew\Acs\Result operateJob(array $arguments = [])
 * @method \Http\Promise\Promise operateJobAsync($arguments = [])
 * @method \Dew\Acs\Result listJobs(array $arguments = [])
 * @method \Http\Promise\Promise listJobsAsync($arguments = [])
 * @method \Dew\Acs\Result getJob(array $arguments = [])
 * @method \Http\Promise\Promise getJobAsync($arguments = [])
 * @method \Dew\Acs\Result createResourceExportTask(array $arguments = [])
 * @method \Http\Promise\Promise createResourceExportTaskAsync($arguments = [])
 * @method \Dew\Acs\Result updateResourceExportTaskAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateResourceExportTaskAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listResourceExportTasks(array $arguments = [])
 * @method \Http\Promise\Promise listResourceExportTasksAsync($arguments = [])
 * @method \Dew\Acs\Result getResourceExportTask(array $arguments = [])
 * @method \Http\Promise\Promise getResourceExportTaskAsync($arguments = [])
 * @method \Dew\Acs\Result cancelResourceExportTask(array $arguments = [])
 * @method \Http\Promise\Promise cancelResourceExportTaskAsync($arguments = [])
 * @method \Dew\Acs\Result executeResourceExportTask(array $arguments = [])
 * @method \Http\Promise\Promise executeResourceExportTaskAsync($arguments = [])
 * @method \Dew\Acs\Result deleteResourceExportTask(array $arguments = [])
 * @method \Http\Promise\Promise deleteResourceExportTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listResourceExportTaskVersions(array $arguments = [])
 * @method \Http\Promise\Promise listResourceExportTaskVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result createRegistryNamespace(array $arguments = [])
 * @method \Http\Promise\Promise createRegistryNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result updateRegistryNamespaceAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateRegistryNamespaceAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listRegistryNamespaces(array $arguments = [])
 * @method \Http\Promise\Promise listRegistryNamespacesAsync($arguments = [])
 * @method \Dew\Acs\Result getRegistryNamespace(array $arguments = [])
 * @method \Http\Promise\Promise getRegistryNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRegistryNamespace(array $arguments = [])
 * @method \Http\Promise\Promise deleteRegistryNamespaceAsync($arguments = [])
 * @method \Dew\Acs\Result addSharedAccounts(array $arguments = [])
 * @method \Http\Promise\Promise addSharedAccountsAsync($arguments = [])
 * @method \Dew\Acs\Result removeSharedAccounts(array $arguments = [])
 * @method \Http\Promise\Promise removeSharedAccountsAsync($arguments = [])
 * @method \Dew\Acs\Result createRegistryModule(array $arguments = [])
 * @method \Http\Promise\Promise createRegistryModuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateRegistryModuleAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateRegistryModuleAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listRegistryModules(array $arguments = [])
 * @method \Http\Promise\Promise listRegistryModulesAsync($arguments = [])
 * @method \Dew\Acs\Result getRegistryModule(array $arguments = [])
 * @method \Http\Promise\Promise getRegistryModuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRegistryModule(array $arguments = [])
 * @method \Http\Promise\Promise deleteRegistryModuleAsync($arguments = [])
 * @method \Dew\Acs\Result publishRegistryModuleVersion(array $arguments = [])
 * @method \Http\Promise\Promise publishRegistryModuleVersionAsync($arguments = [])
 * @method \Dew\Acs\Result listRegistryModuleVersions(array $arguments = [])
 * @method \Http\Promise\Promise listRegistryModuleVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result getRegistryModuleVersion(array $arguments = [])
 * @method \Http\Promise\Promise getRegistryModuleVersionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRegistryModuleVersion(array $arguments = [])
 * @method \Http\Promise\Promise deleteRegistryModuleVersionAsync($arguments = [])
 * @method \Dew\Acs\Result listTerraformProviderVersions(array $arguments = [])
 * @method \Http\Promise\Promise listTerraformProviderVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result listProducts(array $arguments = [])
 * @method \Http\Promise\Promise listProductsAsync($arguments = [])
 * @method \Dew\Acs\Result listResourceTypes(array $arguments = [])
 * @method \Http\Promise\Promise listResourceTypesAsync($arguments = [])
 * @method \Dew\Acs\Result getResourceType(array $arguments = [])
 * @method \Http\Promise\Promise getResourceTypeAsync($arguments = [])
 * @method \Dew\Acs\Result updateExplorerModuleAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateExplorerModuleAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result validateModule(array $arguments = [])
 * @method \Http\Promise\Promise validateModuleAsync($arguments = [])
 * @method \Dew\Acs\Result executeRegistryModule(array $arguments = [])
 * @method \Http\Promise\Promise executeRegistryModuleAsync($arguments = [])
 * @method \Dew\Acs\Result executeTerraformApply(array $arguments = [])
 * @method \Http\Promise\Promise executeTerraformApplyAsync($arguments = [])
 * @method \Dew\Acs\Result executeTerraformDestroy(array $arguments = [])
 * @method \Http\Promise\Promise executeTerraformDestroyAsync($arguments = [])
 * @method \Dew\Acs\Result getExecuteState(array $arguments = [])
 * @method \Http\Promise\Promise getExecuteStateAsync($arguments = [])
 * @method \Dew\Acs\Result executeTerraformPlan(array $arguments = [])
 * @method \Http\Promise\Promise executeTerraformPlanAsync($arguments = [])
 * @method \Dew\Acs\Result listExplorerRegistryModuleVersions(array $arguments = [])
 * @method \Http\Promise\Promise listExplorerRegistryModuleVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result listExplorerRegistryModules(array $arguments = [])
 * @method \Http\Promise\Promise listExplorerRegistryModulesAsync($arguments = [])
 * @method \Dew\Acs\Result listExplorerRegistryModuleExamples(array $arguments = [])
 * @method \Http\Promise\Promise listExplorerRegistryModuleExamplesAsync($arguments = [])
 * @method \Dew\Acs\Result createProject(array $arguments = [])
 * @method \Http\Promise\Promise createProjectAsync($arguments = [])
 * @method \Dew\Acs\Result updateProject(array $arguments = [])
 * @method \Http\Promise\Promise updateProjectAsync($arguments = [])
 * @method \Dew\Acs\Result listProject(array $arguments = [])
 * @method \Http\Promise\Promise listProjectAsync($arguments = [])
 * @method \Dew\Acs\Result getProject(array $arguments = [])
 * @method \Http\Promise\Promise getProjectAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProject(array $arguments = [])
 * @method \Http\Promise\Promise deleteProjectAsync($arguments = [])
 * @method \Dew\Acs\Result createGroup(array $arguments = [])
 * @method \Http\Promise\Promise createGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getGroup(array $arguments = [])
 * @method \Http\Promise\Promise getGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listGroup(array $arguments = [])
 * @method \Http\Promise\Promise listGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteGroupAsync($arguments = [])
 * @method \Dew\Acs\Result associateGroup(array $arguments = [])
 * @method \Http\Promise\Promise associateGroupAsync($arguments = [])
 * @method \Dew\Acs\Result dissociateGroup(array $arguments = [])
 * @method \Http\Promise\Promise dissociateGroupAsync($arguments = [])
 */
final class IaCServiceClient extends AcsClient
{
    //
}
