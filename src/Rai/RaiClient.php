<?php

declare(strict_types=1);

namespace Dew\Acs\Rai;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result listModelCategory(array $arguments = [])
 * @method \Http\Promise\Promise listModelCategoryAsync($arguments = [])
 * @method \Dew\Acs\Result createModelInstance(array $arguments = [])
 * @method \Http\Promise\Promise createModelInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result updateModelInstance(array $arguments = [])
 * @method \Http\Promise\Promise updateModelInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result listModelInstance(array $arguments = [])
 * @method \Http\Promise\Promise listModelInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getModelInstanceInfo(array $arguments = [])
 * @method \Http\Promise\Promise getModelInstanceInfoAsync($arguments = [])
 * @method \Dew\Acs\Result deleteModelInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteModelInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modelInputContentSyncDetect(array $arguments = [])
 * @method \Http\Promise\Promise modelInputContentSyncDetectAsync($arguments = [])
 * @method \Dew\Acs\Result modelOutputContentSyncDetect(array $arguments = [])
 * @method \Http\Promise\Promise modelOutputContentSyncDetectAsync($arguments = [])
 * @method \Dew\Acs\Result modelInputContentAsyncDetect(array $arguments = [])
 * @method \Http\Promise\Promise modelInputContentAsyncDetectAsync($arguments = [])
 * @method \Dew\Acs\Result modelOutputContentAsyncDetect(array $arguments = [])
 * @method \Http\Promise\Promise modelOutputContentAsyncDetectAsync($arguments = [])
 * @method \Dew\Acs\Result getModelInputContentDetectResult(array $arguments = [])
 * @method \Http\Promise\Promise getModelInputContentDetectResultAsync($arguments = [])
 * @method \Dew\Acs\Result getModelOutputContentDetectResult(array $arguments = [])
 * @method \Http\Promise\Promise getModelOutputContentDetectResultAsync($arguments = [])
 * @method \Dew\Acs\Result getPolicyDefaultOptions(array $arguments = [])
 * @method \Http\Promise\Promise getPolicyDefaultOptionsAsync($arguments = [])
 * @method \Dew\Acs\Result createPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result updatePolicy(array $arguments = [])
 * @method \Http\Promise\Promise updatePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listPolicy(array $arguments = [])
 * @method \Http\Promise\Promise listPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getPolicyInfo(array $arguments = [])
 * @method \Http\Promise\Promise getPolicyInfoAsync($arguments = [])
 * @method \Dew\Acs\Result deletePolicy(array $arguments = [])
 * @method \Http\Promise\Promise deletePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result createWordGroup(array $arguments = [])
 * @method \Http\Promise\Promise createWordGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateWordGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateWordGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listWordGroup(array $arguments = [])
 * @method \Http\Promise\Promise listWordGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getWordGroup(array $arguments = [])
 * @method \Http\Promise\Promise getWordGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteWordGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteWordGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createTopic(array $arguments = [])
 * @method \Http\Promise\Promise createTopicAsync($arguments = [])
 * @method \Dew\Acs\Result updateTopic(array $arguments = [])
 * @method \Http\Promise\Promise updateTopicAsync($arguments = [])
 * @method \Dew\Acs\Result listTopic(array $arguments = [])
 * @method \Http\Promise\Promise listTopicAsync($arguments = [])
 * @method \Dew\Acs\Result getTopic(array $arguments = [])
 * @method \Http\Promise\Promise getTopicAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTopic(array $arguments = [])
 * @method \Http\Promise\Promise deleteTopicAsync($arguments = [])
 * @method \Dew\Acs\Result contentSyncDetect(array $arguments = [])
 * @method \Http\Promise\Promise contentSyncDetectAsync($arguments = [])
 * @method \Dew\Acs\Result contentAsyncDetect(array $arguments = [])
 * @method \Http\Promise\Promise contentAsyncDetectAsync($arguments = [])
 * @method \Dew\Acs\Result getContentDetectResult(array $arguments = [])
 * @method \Http\Promise\Promise getContentDetectResultAsync($arguments = [])
 * @method \Dew\Acs\Result batchContentSyncDetect(array $arguments = [])
 * @method \Http\Promise\Promise batchContentSyncDetectAsync($arguments = [])
 * @method \Dew\Acs\Result batchContentAsyncDetect(array $arguments = [])
 * @method \Http\Promise\Promise batchContentAsyncDetectAsync($arguments = [])
 * @method \Dew\Acs\Result registerAccount(array $arguments = [])
 * @method \Http\Promise\Promise registerAccountAsync($arguments = [])
 * @method \Dew\Acs\Result checkAccount(array $arguments = [])
 * @method \Http\Promise\Promise checkAccountAsync($arguments = [])
 */
final class RaiClient extends AcsClient
{
    //
}
