<?php

declare(strict_types=1);

namespace Dew\Acs\Vpc;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result createVpc(array $arguments = [])
 * @method \Http\Promise\Promise createVpcAsync($arguments = [])
 * @method \Dew\Acs\Result createDefaultVpc(array $arguments = [])
 * @method \Http\Promise\Promise createDefaultVpcAsync($arguments = [])
 * @method \Dew\Acs\Result grantInstanceToCen(array $arguments = [])
 * @method \Http\Promise\Promise grantInstanceToCenAsync($arguments = [])
 * @method \Dew\Acs\Result associateVpcCidrBlock(array $arguments = [])
 * @method \Http\Promise\Promise associateVpcCidrBlockAsync($arguments = [])
 * @method \Dew\Acs\Result allocateVpcIpv6Cidr(array $arguments = [])
 * @method \Http\Promise\Promise allocateVpcIpv6CidrAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpc(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpcAsync($arguments = [])
 * @method \Dew\Acs\Result revokeInstanceFromCen(array $arguments = [])
 * @method \Http\Promise\Promise revokeInstanceFromCenAsync($arguments = [])
 * @method \Dew\Acs\Result unassociateVpcCidrBlock(array $arguments = [])
 * @method \Http\Promise\Promise unassociateVpcCidrBlockAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVpcAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyVpcAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result enableVpcClassicLink(array $arguments = [])
 * @method \Http\Promise\Promise enableVpcClassicLinkAsync($arguments = [])
 * @method \Dew\Acs\Result disableVpcClassicLink(array $arguments = [])
 * @method \Http\Promise\Promise disableVpcClassicLinkAsync($arguments = [])
 * @method \Dew\Acs\Result deletionProtection(array $arguments = [])
 * @method \Http\Promise\Promise deletionProtectionAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpcs(array $arguments = [])
 * @method \Http\Promise\Promise describeVpcsAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpcAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeVpcAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeGrantRulesToCen(array $arguments = [])
 * @method \Http\Promise\Promise describeGrantRulesToCenAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVRouterAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyVRouterAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeVRouters(array $arguments = [])
 * @method \Http\Promise\Promise describeVRoutersAsync($arguments = [])
 * @method \Dew\Acs\Result listVSwitchCidrReservations(array $arguments = [])
 * @method \Http\Promise\Promise listVSwitchCidrReservationsAsync($arguments = [])
 * @method \Dew\Acs\Result createVSwitchCidrReservation(array $arguments = [])
 * @method \Http\Promise\Promise createVSwitchCidrReservationAsync($arguments = [])
 * @method \Dew\Acs\Result getVSwitchCidrReservationUsage(array $arguments = [])
 * @method \Http\Promise\Promise getVSwitchCidrReservationUsageAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVSwitchCidrReservationAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyVSwitchCidrReservationAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result createVSwitch(array $arguments = [])
 * @method \Http\Promise\Promise createVSwitchAsync($arguments = [])
 * @method \Dew\Acs\Result createDefaultVSwitch(array $arguments = [])
 * @method \Http\Promise\Promise createDefaultVSwitchAsync($arguments = [])
 * @method \Dew\Acs\Result checkCanAllocateVpcPrivateIpAddress(array $arguments = [])
 * @method \Http\Promise\Promise checkCanAllocateVpcPrivateIpAddressAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVSwitch(array $arguments = [])
 * @method \Http\Promise\Promise deleteVSwitchAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVSwitchAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyVSwitchAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeVSwitches(array $arguments = [])
 * @method \Http\Promise\Promise describeVSwitchesAsync($arguments = [])
 * @method \Dew\Acs\Result describeVSwitchAttributes(array $arguments = [])
 * @method \Http\Promise\Promise describeVSwitchAttributesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVSwitchCidrReservation(array $arguments = [])
 * @method \Http\Promise\Promise deleteVSwitchCidrReservationAsync($arguments = [])
 * @method \Dew\Acs\Result createRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise createRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result createRouteEntries(array $arguments = [])
 * @method \Http\Promise\Promise createRouteEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result createRouteTable(array $arguments = [])
 * @method \Http\Promise\Promise createRouteTableAsync($arguments = [])
 * @method \Dew\Acs\Result associateRouteTable(array $arguments = [])
 * @method \Http\Promise\Promise associateRouteTableAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise deleteRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRouteEntries(array $arguments = [])
 * @method \Http\Promise\Promise deleteRouteEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRouteTable(array $arguments = [])
 * @method \Http\Promise\Promise deleteRouteTableAsync($arguments = [])
 * @method \Dew\Acs\Result unassociateRouteTable(array $arguments = [])
 * @method \Http\Promise\Promise unassociateRouteTableAsync($arguments = [])
 * @method \Dew\Acs\Result modifyRouteTableAttributes(array $arguments = [])
 * @method \Http\Promise\Promise modifyRouteTableAttributesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise modifyRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result getVpcRouteEntrySummary(array $arguments = [])
 * @method \Http\Promise\Promise getVpcRouteEntrySummaryAsync($arguments = [])
 * @method \Dew\Acs\Result describeRouteTables(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise describeRouteTablesAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result describeRouteEntryList(array $arguments = [])
 * @method \Http\Promise\Promise describeRouteEntryListAsync($arguments = [])
 * @method \Dew\Acs\Result describeRouteTableList(array $arguments = [])
 * @method \Http\Promise\Promise describeRouteTableListAsync($arguments = [])
 * @method \Dew\Acs\Result listVpcPublishedRouteEntries(array $arguments = [])
 * @method \Http\Promise\Promise listVpcPublishedRouteEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result publishVpcRouteEntries(array $arguments = [])
 * @method \Http\Promise\Promise publishVpcRouteEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result withdrawVpcPublishedRouteEntries(array $arguments = [])
 * @method \Http\Promise\Promise withdrawVpcPublishedRouteEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result createVpcPrefixList(array $arguments = [])
 * @method \Http\Promise\Promise createVpcPrefixListAsync($arguments = [])
 * @method \Dew\Acs\Result retryVpcPrefixListAssociation(array $arguments = [])
 * @method \Http\Promise\Promise retryVpcPrefixListAssociationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpcPrefixList(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpcPrefixListAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVpcPrefixList(array $arguments = [])
 * @method \Http\Promise\Promise modifyVpcPrefixListAsync($arguments = [])
 * @method \Dew\Acs\Result listPrefixLists(array $arguments = [])
 * @method \Http\Promise\Promise listPrefixListsAsync($arguments = [])
 * @method \Dew\Acs\Result getVpcPrefixListAssociations(array $arguments = [])
 * @method \Http\Promise\Promise getVpcPrefixListAssociationsAsync($arguments = [])
 * @method \Dew\Acs\Result getVpcPrefixListEntries(array $arguments = [])
 * @method \Http\Promise\Promise getVpcPrefixListEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result createDhcpOptionsSet(array $arguments = [])
 * @method \Http\Promise\Promise createDhcpOptionsSetAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDhcpOptionsSet(array $arguments = [])
 * @method \Http\Promise\Promise deleteDhcpOptionsSetAsync($arguments = [])
 * @method \Dew\Acs\Result attachDhcpOptionsSetToVpc(array $arguments = [])
 * @method \Http\Promise\Promise attachDhcpOptionsSetToVpcAsync($arguments = [])
 * @method \Dew\Acs\Result detachDhcpOptionsSetFromVpc(array $arguments = [])
 * @method \Http\Promise\Promise detachDhcpOptionsSetFromVpcAsync($arguments = [])
 * @method \Dew\Acs\Result replaceVpcDhcpOptionsSet(array $arguments = [])
 * @method \Http\Promise\Promise replaceVpcDhcpOptionsSetAsync($arguments = [])
 * @method \Dew\Acs\Result updateDhcpOptionsSetAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateDhcpOptionsSetAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result getDhcpOptionsSet(array $arguments = [])
 * @method \Http\Promise\Promise getDhcpOptionsSetAsync($arguments = [])
 * @method \Dew\Acs\Result listDhcpOptionsSets(array $arguments = [])
 * @method \Http\Promise\Promise listDhcpOptionsSetsAsync($arguments = [])
 * @method \Dew\Acs\Result openFlowLogService(array $arguments = [])
 * @method \Http\Promise\Promise openFlowLogServiceAsync($arguments = [])
 * @method \Dew\Acs\Result createFlowLog(array $arguments = [])
 * @method \Http\Promise\Promise createFlowLogAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFlowLog(array $arguments = [])
 * @method \Http\Promise\Promise deleteFlowLogAsync($arguments = [])
 * @method \Dew\Acs\Result modifyFlowLogAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyFlowLogAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result activeFlowLog(array $arguments = [])
 * @method \Http\Promise\Promise activeFlowLogAsync($arguments = [])
 * @method \Dew\Acs\Result deactiveFlowLog(array $arguments = [])
 * @method \Http\Promise\Promise deactiveFlowLogAsync($arguments = [])
 * @method \Dew\Acs\Result getFlowLogServiceStatus(array $arguments = [])
 * @method \Http\Promise\Promise getFlowLogServiceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeFlowLogs(array $arguments = [])
 * @method \Http\Promise\Promise describeFlowLogsAsync($arguments = [])
 * @method \Dew\Acs\Result associateNetworkAcl(array $arguments = [])
 * @method \Http\Promise\Promise associateNetworkAclAsync($arguments = [])
 * @method \Dew\Acs\Result createNetworkAcl(array $arguments = [])
 * @method \Http\Promise\Promise createNetworkAclAsync($arguments = [])
 * @method \Dew\Acs\Result copyNetworkAclEntries(array $arguments = [])
 * @method \Http\Promise\Promise copyNetworkAclEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNetworkAcl(array $arguments = [])
 * @method \Http\Promise\Promise deleteNetworkAclAsync($arguments = [])
 * @method \Dew\Acs\Result unassociateNetworkAcl(array $arguments = [])
 * @method \Http\Promise\Promise unassociateNetworkAclAsync($arguments = [])
 * @method \Dew\Acs\Result modifyNetworkAclAttributes(array $arguments = [])
 * @method \Http\Promise\Promise modifyNetworkAclAttributesAsync($arguments = [])
 * @method \Dew\Acs\Result updateNetworkAclEntries(array $arguments = [])
 * @method \Http\Promise\Promise updateNetworkAclEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result describeNetworkAclAttributes(array $arguments = [])
 * @method \Http\Promise\Promise describeNetworkAclAttributesAsync($arguments = [])
 * @method \Dew\Acs\Result describeNetworkAcls(array $arguments = [])
 * @method \Http\Promise\Promise describeNetworkAclsAsync($arguments = [])
 * @method \Dew\Acs\Result createHaVip(array $arguments = [])
 * @method \Http\Promise\Promise createHaVipAsync($arguments = [])
 * @method \Dew\Acs\Result associateHaVip(array $arguments = [])
 * @method \Http\Promise\Promise associateHaVipAsync($arguments = [])
 * @method \Dew\Acs\Result deleteHaVip(array $arguments = [])
 * @method \Http\Promise\Promise deleteHaVipAsync($arguments = [])
 * @method \Dew\Acs\Result unassociateHaVip(array $arguments = [])
 * @method \Http\Promise\Promise unassociateHaVipAsync($arguments = [])
 * @method \Dew\Acs\Result modifyHaVipAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyHaVipAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeHaVips(array $arguments = [])
 * @method \Http\Promise\Promise describeHaVipsAsync($arguments = [])
 * @method \Dew\Acs\Result createTrafficMirrorFilterRules(array $arguments = [])
 * @method \Http\Promise\Promise createTrafficMirrorFilterRulesAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTrafficMirrorFilterRules(array $arguments = [])
 * @method \Http\Promise\Promise deleteTrafficMirrorFilterRulesAsync($arguments = [])
 * @method \Dew\Acs\Result updateTrafficMirrorFilterRuleAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateTrafficMirrorFilterRuleAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result createTrafficMirrorFilter(array $arguments = [])
 * @method \Http\Promise\Promise createTrafficMirrorFilterAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTrafficMirrorFilter(array $arguments = [])
 * @method \Http\Promise\Promise deleteTrafficMirrorFilterAsync($arguments = [])
 * @method \Dew\Acs\Result updateTrafficMirrorFilterAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateTrafficMirrorFilterAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listTrafficMirrorFilters(array $arguments = [])
 * @method \Http\Promise\Promise listTrafficMirrorFiltersAsync($arguments = [])
 * @method \Dew\Acs\Result addSourcesToTrafficMirrorSession(array $arguments = [])
 * @method \Http\Promise\Promise addSourcesToTrafficMirrorSessionAsync($arguments = [])
 * @method \Dew\Acs\Result createTrafficMirrorSession(array $arguments = [])
 * @method \Http\Promise\Promise createTrafficMirrorSessionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTrafficMirrorSession(array $arguments = [])
 * @method \Http\Promise\Promise deleteTrafficMirrorSessionAsync($arguments = [])
 * @method \Dew\Acs\Result updateTrafficMirrorSessionAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateTrafficMirrorSessionAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listTrafficMirrorSessions(array $arguments = [])
 * @method \Http\Promise\Promise listTrafficMirrorSessionsAsync($arguments = [])
 * @method \Dew\Acs\Result removeSourcesFromTrafficMirrorSession(array $arguments = [])
 * @method \Http\Promise\Promise removeSourcesFromTrafficMirrorSessionAsync($arguments = [])
 * @method \Dew\Acs\Result openTrafficMirrorService(array $arguments = [])
 * @method \Http\Promise\Promise openTrafficMirrorServiceAsync($arguments = [])
 * @method \Dew\Acs\Result getTrafficMirrorServiceStatus(array $arguments = [])
 * @method \Http\Promise\Promise getTrafficMirrorServiceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result openPublicIpAddressPoolService(array $arguments = [])
 * @method \Http\Promise\Promise openPublicIpAddressPoolServiceAsync($arguments = [])
 * @method \Dew\Acs\Result getPublicIpAddressPoolServiceStatus(array $arguments = [])
 * @method \Http\Promise\Promise getPublicIpAddressPoolServiceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result createPublicIpAddressPool(array $arguments = [])
 * @method \Http\Promise\Promise createPublicIpAddressPoolAsync($arguments = [])
 * @method \Dew\Acs\Result addPublicIpAddressPoolCidrBlock(array $arguments = [])
 * @method \Http\Promise\Promise addPublicIpAddressPoolCidrBlockAsync($arguments = [])
 * @method \Dew\Acs\Result deletePublicIpAddressPool(array $arguments = [])
 * @method \Http\Promise\Promise deletePublicIpAddressPoolAsync($arguments = [])
 * @method \Dew\Acs\Result deletePublicIpAddressPoolCidrBlock(array $arguments = [])
 * @method \Http\Promise\Promise deletePublicIpAddressPoolCidrBlockAsync($arguments = [])
 * @method \Dew\Acs\Result modifyEipAddressAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyEipAddressAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result setHighDefinitionMonitorLogStatus(array $arguments = [])
 * @method \Http\Promise\Promise setHighDefinitionMonitorLogStatusAsync($arguments = [])
 * @method \Dew\Acs\Result updatePublicIpAddressPoolAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updatePublicIpAddressPoolAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeEipAddresses(array $arguments = [])
 * @method \Http\Promise\Promise describeEipAddressesAsync($arguments = [])
 * @method \Dew\Acs\Result describeEipSegment(array $arguments = [])
 * @method \Http\Promise\Promise describeEipSegmentAsync($arguments = [])
 * @method \Dew\Acs\Result describeEipGatewayInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeEipGatewayInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describePublicIpAddress(array $arguments = [])
 * @method \Http\Promise\Promise describePublicIpAddressAsync($arguments = [])
 * @method \Dew\Acs\Result describeEipMonitorData(array $arguments = [])
 * @method \Http\Promise\Promise describeEipMonitorDataAsync($arguments = [])
 * @method \Dew\Acs\Result describeHighDefinitionMonitorLogAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeHighDefinitionMonitorLogAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listPublicIpAddressPools(array $arguments = [])
 * @method \Http\Promise\Promise listPublicIpAddressPoolsAsync($arguments = [])
 * @method \Dew\Acs\Result listPublicIpAddressPoolCidrBlocks(array $arguments = [])
 * @method \Http\Promise\Promise listPublicIpAddressPoolCidrBlocksAsync($arguments = [])
 * @method \Dew\Acs\Result allocateEipAddress(array $arguments = [])
 * @method \Http\Promise\Promise allocateEipAddressAsync($arguments = [])
 * @method \Dew\Acs\Result allocateEipAddressPro(array $arguments = [])
 * @method \Http\Promise\Promise allocateEipAddressProAsync($arguments = [])
 * @method \Dew\Acs\Result releaseEipAddress(array $arguments = [])
 * @method \Http\Promise\Promise releaseEipAddressAsync($arguments = [])
 * @method \Dew\Acs\Result allocateEipSegmentAddress(array $arguments = [])
 * @method \Http\Promise\Promise allocateEipSegmentAddressAsync($arguments = [])
 * @method \Dew\Acs\Result releaseEipSegmentAddress(array $arguments = [])
 * @method \Http\Promise\Promise releaseEipSegmentAddressAsync($arguments = [])
 * @method \Dew\Acs\Result associateEipAddress(array $arguments = [])
 * @method \Http\Promise\Promise associateEipAddressAsync($arguments = [])
 * @method \Dew\Acs\Result associateEipAddressBatch(array $arguments = [])
 * @method \Http\Promise\Promise associateEipAddressBatchAsync($arguments = [])
 * @method \Dew\Acs\Result unassociateEipAddress(array $arguments = [])
 * @method \Http\Promise\Promise unassociateEipAddressAsync($arguments = [])
 * @method \Dew\Acs\Result createCommonBandwidthPackage(array $arguments = [])
 * @method \Http\Promise\Promise createCommonBandwidthPackageAsync($arguments = [])
 * @method \Dew\Acs\Result addCommonBandwidthPackageIp(array $arguments = [])
 * @method \Http\Promise\Promise addCommonBandwidthPackageIpAsync($arguments = [])
 * @method \Dew\Acs\Result addCommonBandwidthPackageIps(array $arguments = [])
 * @method \Http\Promise\Promise addCommonBandwidthPackageIpsAsync($arguments = [])
 * @method \Dew\Acs\Result removeCommonBandwidthPackageIp(array $arguments = [])
 * @method \Http\Promise\Promise removeCommonBandwidthPackageIpAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCommonBandwidthPackage(array $arguments = [])
 * @method \Http\Promise\Promise deleteCommonBandwidthPackageAsync($arguments = [])
 * @method \Dew\Acs\Result modifyCommonBandwidthPackageAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyCommonBandwidthPackageAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyCommonBandwidthPackageSpec(array $arguments = [])
 * @method \Http\Promise\Promise modifyCommonBandwidthPackageSpecAsync($arguments = [])
 * @method \Dew\Acs\Result describeCommonBandwidthPackages(array $arguments = [])
 * @method \Http\Promise\Promise describeCommonBandwidthPackagesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyCommonBandwidthPackageIpBandwidth(array $arguments = [])
 * @method \Http\Promise\Promise modifyCommonBandwidthPackageIpBandwidthAsync($arguments = [])
 * @method \Dew\Acs\Result cancelCommonBandwidthPackageIpBandwidth(array $arguments = [])
 * @method \Http\Promise\Promise cancelCommonBandwidthPackageIpBandwidthAsync($arguments = [])
 * @method \Dew\Acs\Result describe95Traffic(array $arguments = [])
 * @method \Http\Promise\Promise describe95TrafficAsync($arguments = [])
 * @method \Dew\Acs\Result createVirtualPhysicalConnection(array $arguments = [])
 * @method \Http\Promise\Promise createVirtualPhysicalConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result updateVirtualPhysicalConnection(array $arguments = [])
 * @method \Http\Promise\Promise updateVirtualPhysicalConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result listVirtualPhysicalConnections(array $arguments = [])
 * @method \Http\Promise\Promise listVirtualPhysicalConnectionsAsync($arguments = [])
 * @method \Dew\Acs\Result openPhysicalConnectionService(array $arguments = [])
 * @method \Http\Promise\Promise openPhysicalConnectionServiceAsync($arguments = [])
 * @method \Dew\Acs\Result createPhysicalConnection(array $arguments = [])
 * @method \Http\Promise\Promise createPhysicalConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result applyPhysicalConnectionLOA(array $arguments = [])
 * @method \Http\Promise\Promise applyPhysicalConnectionLOAAsync($arguments = [])
 * @method \Dew\Acs\Result secondApplyPhysicalConnectionLOA(array $arguments = [])
 * @method \Http\Promise\Promise secondApplyPhysicalConnectionLOAAsync($arguments = [])
 * @method \Dew\Acs\Result createPhysicalConnectionSetupOrder(array $arguments = [])
 * @method \Http\Promise\Promise createPhysicalConnectionSetupOrderAsync($arguments = [])
 * @method \Dew\Acs\Result createPhysicalConnectionOccupancyOrder(array $arguments = [])
 * @method \Http\Promise\Promise createPhysicalConnectionOccupancyOrderAsync($arguments = [])
 * @method \Dew\Acs\Result createHighReliablePhysicalConnection(array $arguments = [])
 * @method \Http\Promise\Promise createHighReliablePhysicalConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result createVpconnFromVbr(array $arguments = [])
 * @method \Http\Promise\Promise createVpconnFromVbrAsync($arguments = [])
 * @method \Dew\Acs\Result deletePhysicalConnection(array $arguments = [])
 * @method \Http\Promise\Promise deletePhysicalConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result cancelPhysicalConnection(array $arguments = [])
 * @method \Http\Promise\Promise cancelPhysicalConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyPhysicalConnectionAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyPhysicalConnectionAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result enablePhysicalConnection(array $arguments = [])
 * @method \Http\Promise\Promise enablePhysicalConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result terminatePhysicalConnection(array $arguments = [])
 * @method \Http\Promise\Promise terminatePhysicalConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result recoverPhysicalConnection(array $arguments = [])
 * @method \Http\Promise\Promise recoverPhysicalConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result attachVbrToVpconn(array $arguments = [])
 * @method \Http\Promise\Promise attachVbrToVpconnAsync($arguments = [])
 * @method \Dew\Acs\Result getPhysicalConnectionServiceStatus(array $arguments = [])
 * @method \Http\Promise\Promise getPhysicalConnectionServiceStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeAccessPoints(array $arguments = [])
 * @method \Http\Promise\Promise describeAccessPointsAsync($arguments = [])
 * @method \Dew\Acs\Result confirmPhysicalConnection(array $arguments = [])
 * @method \Http\Promise\Promise confirmPhysicalConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result describePhysicalConnections(array $arguments = [])
 * @method \Http\Promise\Promise describePhysicalConnectionsAsync($arguments = [])
 * @method \Dew\Acs\Result completePhysicalConnectionLOA(array $arguments = [])
 * @method \Http\Promise\Promise completePhysicalConnectionLOAAsync($arguments = [])
 * @method \Dew\Acs\Result describePhysicalConnectionLOA(array $arguments = [])
 * @method \Http\Promise\Promise describePhysicalConnectionLOAAsync($arguments = [])
 * @method \Dew\Acs\Result listGeographicSubRegions(array $arguments = [])
 * @method \Http\Promise\Promise listGeographicSubRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result listBusinessAccessPoints(array $arguments = [])
 * @method \Http\Promise\Promise listBusinessAccessPointsAsync($arguments = [])
 * @method \Dew\Acs\Result createFailoverTestJob(array $arguments = [])
 * @method \Http\Promise\Promise createFailoverTestJobAsync($arguments = [])
 * @method \Dew\Acs\Result startFailoverTestJob(array $arguments = [])
 * @method \Http\Promise\Promise startFailoverTestJobAsync($arguments = [])
 * @method \Dew\Acs\Result stopFailoverTestJob(array $arguments = [])
 * @method \Http\Promise\Promise stopFailoverTestJobAsync($arguments = [])
 * @method \Dew\Acs\Result updateFailoverTestJob(array $arguments = [])
 * @method \Http\Promise\Promise updateFailoverTestJobAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFailoverTestJob(array $arguments = [])
 * @method \Http\Promise\Promise deleteFailoverTestJobAsync($arguments = [])
 * @method \Dew\Acs\Result describeFailoverTestJob(array $arguments = [])
 * @method \Http\Promise\Promise describeFailoverTestJobAsync($arguments = [])
 * @method \Dew\Acs\Result describeFailoverTestJobs(array $arguments = [])
 * @method \Http\Promise\Promise describeFailoverTestJobsAsync($arguments = [])
 * @method \Dew\Acs\Result describeExpressConnectTrafficQosRule(array $arguments = [])
 * @method \Http\Promise\Promise describeExpressConnectTrafficQosRuleAsync($arguments = [])
 * @method \Dew\Acs\Result describeExpressConnectTrafficQosQueue(array $arguments = [])
 * @method \Http\Promise\Promise describeExpressConnectTrafficQosQueueAsync($arguments = [])
 * @method \Dew\Acs\Result describeExpressConnectTrafficQos(array $arguments = [])
 * @method \Http\Promise\Promise describeExpressConnectTrafficQosAsync($arguments = [])
 * @method \Dew\Acs\Result deleteExpressConnectTrafficQosQueue(array $arguments = [])
 * @method \Http\Promise\Promise deleteExpressConnectTrafficQosQueueAsync($arguments = [])
 * @method \Dew\Acs\Result deleteExpressConnectTrafficQos(array $arguments = [])
 * @method \Http\Promise\Promise deleteExpressConnectTrafficQosAsync($arguments = [])
 * @method \Dew\Acs\Result deleteExpressConnectTrafficQosRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteExpressConnectTrafficQosRuleAsync($arguments = [])
 * @method \Dew\Acs\Result modifyExpressConnectTrafficQos(array $arguments = [])
 * @method \Http\Promise\Promise modifyExpressConnectTrafficQosAsync($arguments = [])
 * @method \Dew\Acs\Result modifyExpressConnectTrafficQosQueue(array $arguments = [])
 * @method \Http\Promise\Promise modifyExpressConnectTrafficQosQueueAsync($arguments = [])
 * @method \Dew\Acs\Result modifyExpressConnectTrafficQosRule(array $arguments = [])
 * @method \Http\Promise\Promise modifyExpressConnectTrafficQosRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createExpressConnectTrafficQos(array $arguments = [])
 * @method \Http\Promise\Promise createExpressConnectTrafficQosAsync($arguments = [])
 * @method \Dew\Acs\Result createExpressConnectTrafficQosQueue(array $arguments = [])
 * @method \Http\Promise\Promise createExpressConnectTrafficQosQueueAsync($arguments = [])
 * @method \Dew\Acs\Result createExpressConnectTrafficQosRule(array $arguments = [])
 * @method \Http\Promise\Promise createExpressConnectTrafficQosRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createVbrHa(array $arguments = [])
 * @method \Http\Promise\Promise createVbrHaAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVbrHa(array $arguments = [])
 * @method \Http\Promise\Promise deleteVbrHaAsync($arguments = [])
 * @method \Dew\Acs\Result describeVbrHa(array $arguments = [])
 * @method \Http\Promise\Promise describeVbrHaAsync($arguments = [])
 * @method \Dew\Acs\Result createVirtualBorderRouter(array $arguments = [])
 * @method \Http\Promise\Promise createVirtualBorderRouterAsync($arguments = [])
 * @method \Dew\Acs\Result associatePhysicalConnectionToVirtualBorderRouter(array $arguments = [])
 * @method \Http\Promise\Promise associatePhysicalConnectionToVirtualBorderRouterAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVirtualBorderRouter(array $arguments = [])
 * @method \Http\Promise\Promise deleteVirtualBorderRouterAsync($arguments = [])
 * @method \Dew\Acs\Result unassociatePhysicalConnectionFromVirtualBorderRouter(array $arguments = [])
 * @method \Http\Promise\Promise unassociatePhysicalConnectionFromVirtualBorderRouterAsync($arguments = [])
 * @method \Dew\Acs\Result updateVirtualBorderBandwidth(array $arguments = [])
 * @method \Http\Promise\Promise updateVirtualBorderBandwidthAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVirtualBorderRouterAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyVirtualBorderRouterAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result terminateVirtualBorderRouter(array $arguments = [])
 * @method \Http\Promise\Promise terminateVirtualBorderRouterAsync($arguments = [])
 * @method \Dew\Acs\Result recoverVirtualBorderRouter(array $arguments = [])
 * @method \Http\Promise\Promise recoverVirtualBorderRouterAsync($arguments = [])
 * @method \Dew\Acs\Result describeVirtualBorderRouters(array $arguments = [])
 * @method \Http\Promise\Promise describeVirtualBorderRoutersAsync($arguments = [])
 * @method \Dew\Acs\Result describeVirtualBorderRoutersForPhysicalConnection(array $arguments = [])
 * @method \Http\Promise\Promise describeVirtualBorderRoutersForPhysicalConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result addBgpNetwork(array $arguments = [])
 * @method \Http\Promise\Promise addBgpNetworkAsync($arguments = [])
 * @method \Dew\Acs\Result createBgpGroup(array $arguments = [])
 * @method \Http\Promise\Promise createBgpGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createBgpPeer(array $arguments = [])
 * @method \Http\Promise\Promise createBgpPeerAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBgpGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteBgpGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBgpNetwork(array $arguments = [])
 * @method \Http\Promise\Promise deleteBgpNetworkAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBgpPeer(array $arguments = [])
 * @method \Http\Promise\Promise deleteBgpPeerAsync($arguments = [])
 * @method \Dew\Acs\Result modifyBgpGroupAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyBgpGroupAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyBgpPeerAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyBgpPeerAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeBgpGroups(array $arguments = [])
 * @method \Http\Promise\Promise describeBgpGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result describeBgpNetworks(array $arguments = [])
 * @method \Http\Promise\Promise describeBgpNetworksAsync($arguments = [])
 * @method \Dew\Acs\Result describeBgpPeers(array $arguments = [])
 * @method \Http\Promise\Promise describeBgpPeersAsync($arguments = [])
 * @method \Dew\Acs\Result createNatGateway(array $arguments = [])
 * @method \Http\Promise\Promise createNatGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNatGateway(array $arguments = [])
 * @method \Http\Promise\Promise deleteNatGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result modifyNatGatewayAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyNatGatewayAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyNatGatewaySpec(array $arguments = [])
 * @method \Http\Promise\Promise modifyNatGatewaySpecAsync($arguments = [])
 * @method \Dew\Acs\Result describeNatGateways(array $arguments = [])
 * @method \Http\Promise\Promise describeNatGatewaysAsync($arguments = [])
 * @method \Dew\Acs\Result getNatGatewayAttribute(array $arguments = [])
 * @method \Http\Promise\Promise getNatGatewayAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listEnhanhcedNatGatewayAvailableZones(array $arguments = [])
 * @method \Http\Promise\Promise listEnhanhcedNatGatewayAvailableZonesAsync($arguments = [])
 * @method \Dew\Acs\Result updateNatGatewayNatType(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise updateNatGatewayNatTypeAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result convertBandwidthPackage(array $arguments = [])
 * @method \Http\Promise\Promise convertBandwidthPackageAsync($arguments = [])
 * @method \Dew\Acs\Result enableNatGatewayEcsMetric(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise enableNatGatewayEcsMetricAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result disableNatGatewayEcsMetric(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise disableNatGatewayEcsMetricAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result describeNatGatewayAssociateNetworkInterfaces(array $arguments = [])
 * @method \Http\Promise\Promise describeNatGatewayAssociateNetworkInterfacesAsync($arguments = [])
 * @method \Dew\Acs\Result vpcDescribeVpcNatGatewayNetworkInterfaceQuota(array $arguments = [])
 * @method \Http\Promise\Promise vpcDescribeVpcNatGatewayNetworkInterfaceQuotaAsync($arguments = [])
 * @method \Dew\Acs\Result createSnatEntry(array $arguments = [])
 * @method \Http\Promise\Promise createSnatEntryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSnatEntry(array $arguments = [])
 * @method \Http\Promise\Promise deleteSnatEntryAsync($arguments = [])
 * @method \Dew\Acs\Result modifySnatEntry(array $arguments = [])
 * @method \Http\Promise\Promise modifySnatEntryAsync($arguments = [])
 * @method \Dew\Acs\Result describeSnatTableEntries(array $arguments = [])
 * @method \Http\Promise\Promise describeSnatTableEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result createForwardEntry(array $arguments = [])
 * @method \Http\Promise\Promise createForwardEntryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteForwardEntry(array $arguments = [])
 * @method \Http\Promise\Promise deleteForwardEntryAsync($arguments = [])
 * @method \Dew\Acs\Result modifyForwardEntry(array $arguments = [])
 * @method \Http\Promise\Promise modifyForwardEntryAsync($arguments = [])
 * @method \Dew\Acs\Result describeForwardTableEntries(array $arguments = [])
 * @method \Http\Promise\Promise describeForwardTableEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result createFullNatEntry(array $arguments = [])
 * @method \Http\Promise\Promise createFullNatEntryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFullNatEntry(array $arguments = [])
 * @method \Http\Promise\Promise deleteFullNatEntryAsync($arguments = [])
 * @method \Dew\Acs\Result modifyFullNatEntryAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyFullNatEntryAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listFullNatEntries(array $arguments = [])
 * @method \Http\Promise\Promise listFullNatEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result createNatIp(array $arguments = [])
 * @method \Http\Promise\Promise createNatIpAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNatIp(array $arguments = [])
 * @method \Http\Promise\Promise deleteNatIpAsync($arguments = [])
 * @method \Dew\Acs\Result modifyNatIpAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyNatIpAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listNatIps(array $arguments = [])
 * @method \Http\Promise\Promise listNatIpsAsync($arguments = [])
 * @method \Dew\Acs\Result createNatIpCidr(array $arguments = [])
 * @method \Http\Promise\Promise createNatIpCidrAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNatIpCidr(array $arguments = [])
 * @method \Http\Promise\Promise deleteNatIpCidrAsync($arguments = [])
 * @method \Dew\Acs\Result modifyNatIpCidrAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyNatIpCidrAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listNatIpCidrs(array $arguments = [])
 * @method \Http\Promise\Promise listNatIpCidrsAsync($arguments = [])
 * @method \Dew\Acs\Result createIpv4Gateway(array $arguments = [])
 * @method \Http\Promise\Promise createIpv4GatewayAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIpv4Gateway(array $arguments = [])
 * @method \Http\Promise\Promise deleteIpv4GatewayAsync($arguments = [])
 * @method \Dew\Acs\Result enableVpcIpv4Gateway(array $arguments = [])
 * @method \Http\Promise\Promise enableVpcIpv4GatewayAsync($arguments = [])
 * @method \Dew\Acs\Result updateIpv4GatewayAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateIpv4GatewayAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result updateGatewayRouteTableEntryAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateGatewayRouteTableEntryAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listIpv4Gateways(array $arguments = [])
 * @method \Http\Promise\Promise listIpv4GatewaysAsync($arguments = [])
 * @method \Dew\Acs\Result getIpv4GatewayAttribute(array $arguments = [])
 * @method \Http\Promise\Promise getIpv4GatewayAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listGatewayRouteTableEntries(array $arguments = [])
 * @method \Http\Promise\Promise listGatewayRouteTableEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result associateRouteTableWithGateway(array $arguments = [])
 * @method \Http\Promise\Promise associateRouteTableWithGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result dissociateRouteTableFromGateway(array $arguments = [])
 * @method \Http\Promise\Promise dissociateRouteTableFromGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result createVpnGateway(array $arguments = [])
 * @method \Http\Promise\Promise createVpnGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result associateVpnGatewayWithCertificate(array $arguments = [])
 * @method \Http\Promise\Promise associateVpnGatewayWithCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpnGateway(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpnGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result dissociateVpnGatewayWithCertificate(array $arguments = [])
 * @method \Http\Promise\Promise dissociateVpnGatewayWithCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVpnGatewayAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyVpnGatewayAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result moveVpnResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise moveVpnResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpnGateway(array $arguments = [])
 * @method \Http\Promise\Promise describeVpnGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpnGateways(array $arguments = [])
 * @method \Http\Promise\Promise describeVpnGatewaysAsync($arguments = [])
 * @method \Dew\Acs\Result listVpnCertificateAssociations(array $arguments = [])
 * @method \Http\Promise\Promise listVpnCertificateAssociationsAsync($arguments = [])
 * @method \Dew\Acs\Result diagnoseVpnGateway(array $arguments = [])
 * @method \Http\Promise\Promise diagnoseVpnGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result getVpnGatewayDiagnoseResult(array $arguments = [])
 * @method \Http\Promise\Promise getVpnGatewayDiagnoseResultAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpnGatewayAvailableZones(array $arguments = [])
 * @method \Http\Promise\Promise describeVpnGatewayAvailableZonesAsync($arguments = [])
 * @method \Dew\Acs\Result createCustomerGateway(array $arguments = [])
 * @method \Http\Promise\Promise createCustomerGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCustomerGateway(array $arguments = [])
 * @method \Http\Promise\Promise deleteCustomerGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result modifyCustomerGatewayAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyCustomerGatewayAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeCustomerGateway(array $arguments = [])
 * @method \Http\Promise\Promise describeCustomerGatewayAsync($arguments = [])
 * @method \Dew\Acs\Result describeCustomerGateways(array $arguments = [])
 * @method \Http\Promise\Promise describeCustomerGatewaysAsync($arguments = [])
 * @method \Dew\Acs\Result createVpnConnection(array $arguments = [])
 * @method \Http\Promise\Promise createVpnConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpnConnection(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpnConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVpnConnectionAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyVpnConnectionAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTunnelAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyTunnelAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpnConnection(array $arguments = [])
 * @method \Http\Promise\Promise describeVpnConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpnConnections(array $arguments = [])
 * @method \Http\Promise\Promise describeVpnConnectionsAsync($arguments = [])
 * @method \Dew\Acs\Result downloadVpnConnectionConfig(array $arguments = [])
 * @method \Http\Promise\Promise downloadVpnConnectionConfigAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpnConnectionLogs(array $arguments = [])
 * @method \Http\Promise\Promise describeVpnConnectionLogsAsync($arguments = [])
 * @method \Dew\Acs\Result diagnoseVpnConnections(array $arguments = [])
 * @method \Http\Promise\Promise diagnoseVpnConnectionsAsync($arguments = [])
 * @method \Dew\Acs\Result createVpnRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise createVpnRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result publishVpnRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise publishVpnRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpnRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpnRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVpnRouteEntryWeight(array $arguments = [])
 * @method \Http\Promise\Promise modifyVpnRouteEntryWeightAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpnRouteEntries(array $arguments = [])
 * @method \Http\Promise\Promise describeVpnRouteEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result createVpnPbrRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise createVpnPbrRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpnPbrRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpnPbrRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVpnPbrRouteEntryWeight(array $arguments = [])
 * @method \Http\Promise\Promise modifyVpnPbrRouteEntryWeightAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVpnPbrRouteEntryPriority(array $arguments = [])
 * @method \Http\Promise\Promise modifyVpnPbrRouteEntryPriorityAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVpnPbrRouteEntryAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyVpnPbrRouteEntryAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpnPbrRouteEntries(array $arguments = [])
 * @method \Http\Promise\Promise describeVpnPbrRouteEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result createVpnAttachment(array $arguments = [])
 * @method \Http\Promise\Promise createVpnAttachmentAsync($arguments = [])
 * @method \Dew\Acs\Result createVcoRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise createVcoRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpnAttachment(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpnAttachmentAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVcoRouteEntry(array $arguments = [])
 * @method \Http\Promise\Promise deleteVcoRouteEntryAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVpnAttachmentAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyVpnAttachmentAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVcoRouteEntryWeight(array $arguments = [])
 * @method \Http\Promise\Promise modifyVcoRouteEntryWeightAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpnAttachments(array $arguments = [])
 * @method \Http\Promise\Promise describeVpnAttachmentsAsync($arguments = [])
 * @method \Dew\Acs\Result describeVcoRouteEntries(array $arguments = [])
 * @method \Http\Promise\Promise describeVcoRouteEntriesAsync($arguments = [])
 * @method \Dew\Acs\Result checkVpnBgpEnabled(array $arguments = [])
 * @method \Http\Promise\Promise checkVpnBgpEnabledAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpnCrossAccountAuthorizations(array $arguments = [])
 * @method \Http\Promise\Promise describeVpnCrossAccountAuthorizationsAsync($arguments = [])
 * @method \Dew\Acs\Result createSslVpnClientCert(array $arguments = [])
 * @method \Http\Promise\Promise createSslVpnClientCertAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSslVpnClientCert(array $arguments = [])
 * @method \Http\Promise\Promise deleteSslVpnClientCertAsync($arguments = [])
 * @method \Dew\Acs\Result modifySslVpnClientCert(array $arguments = [])
 * @method \Http\Promise\Promise modifySslVpnClientCertAsync($arguments = [])
 * @method \Dew\Acs\Result describeSslVpnClientCerts(array $arguments = [])
 * @method \Http\Promise\Promise describeSslVpnClientCertsAsync($arguments = [])
 * @method \Dew\Acs\Result describeSslVpnClientCert(array $arguments = [])
 * @method \Http\Promise\Promise describeSslVpnClientCertAsync($arguments = [])
 * @method \Dew\Acs\Result describeSslVpnClients(array $arguments = [])
 * @method \Http\Promise\Promise describeSslVpnClientsAsync($arguments = [])
 * @method \Dew\Acs\Result createSslVpnServer(array $arguments = [])
 * @method \Http\Promise\Promise createSslVpnServerAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSslVpnServer(array $arguments = [])
 * @method \Http\Promise\Promise deleteSslVpnServerAsync($arguments = [])
 * @method \Dew\Acs\Result modifySslVpnServer(array $arguments = [])
 * @method \Http\Promise\Promise modifySslVpnServerAsync($arguments = [])
 * @method \Dew\Acs\Result describeSslVpnServers(array $arguments = [])
 * @method \Http\Promise\Promise describeSslVpnServersAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpnSslServerLogs(array $arguments = [])
 * @method \Http\Promise\Promise describeVpnSslServerLogsAsync($arguments = [])
 * @method \Dew\Acs\Result createIpsecServer(array $arguments = [])
 * @method \Http\Promise\Promise createIpsecServerAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIpsecServer(array $arguments = [])
 * @method \Http\Promise\Promise deleteIpsecServerAsync($arguments = [])
 * @method \Dew\Acs\Result updateIpsecServer(array $arguments = [])
 * @method \Http\Promise\Promise updateIpsecServerAsync($arguments = [])
 * @method \Dew\Acs\Result listIpsecServers(array $arguments = [])
 * @method \Http\Promise\Promise listIpsecServersAsync($arguments = [])
 * @method \Dew\Acs\Result listIpsecServerLogs(array $arguments = [])
 * @method \Http\Promise\Promise listIpsecServerLogsAsync($arguments = [])
 * @method \Dew\Acs\Result allocateIpv6Address(array $arguments = [])
 * @method \Http\Promise\Promise allocateIpv6AddressAsync($arguments = [])
 * @method \Dew\Acs\Result releaseIpv6Address(array $arguments = [])
 * @method \Http\Promise\Promise releaseIpv6AddressAsync($arguments = [])
 * @method \Dew\Acs\Result createIpv6Gateway(array $arguments = [])
 * @method \Http\Promise\Promise createIpv6GatewayAsync($arguments = [])
 * @method \Dew\Acs\Result createIpv6EgressOnlyRule(array $arguments = [])
 * @method \Http\Promise\Promise createIpv6EgressOnlyRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIpv6Gateway(array $arguments = [])
 * @method \Http\Promise\Promise deleteIpv6GatewayAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIpv6EgressOnlyRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteIpv6EgressOnlyRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIpv6InternetBandwidth(array $arguments = [])
 * @method \Http\Promise\Promise deleteIpv6InternetBandwidthAsync($arguments = [])
 * @method \Dew\Acs\Result modifyIpv6InternetBandwidth(array $arguments = [])
 * @method \Http\Promise\Promise modifyIpv6InternetBandwidthAsync($arguments = [])
 * @method \Dew\Acs\Result modifyIpv6GatewayAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyIpv6GatewayAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyIpv6AddressAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyIpv6AddressAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeIpv6Gateways(array $arguments = [])
 * @method \Http\Promise\Promise describeIpv6GatewaysAsync($arguments = [])
 * @method \Dew\Acs\Result describeIpv6EgressOnlyRules(array $arguments = [])
 * @method \Http\Promise\Promise describeIpv6EgressOnlyRulesAsync($arguments = [])
 * @method \Dew\Acs\Result describeIpv6Addresses(array $arguments = [])
 * @method \Http\Promise\Promise describeIpv6AddressesAsync($arguments = [])
 * @method \Dew\Acs\Result describeIpv6GatewayAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeIpv6GatewayAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result allocateIpv6InternetBandwidth(array $arguments = [])
 * @method \Http\Promise\Promise allocateIpv6InternetBandwidthAsync($arguments = [])
 * @method \Dew\Acs\Result createIPv6TranslatorAclList(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise createIPv6TranslatorAclListAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result createIPv6TranslatorEntry(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise createIPv6TranslatorEntryAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result addIPv6TranslatorAclListEntry(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise addIPv6TranslatorAclListEntryAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result createIPv6Translator(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise createIPv6TranslatorAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result deleteIPv6TranslatorAclList(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise deleteIPv6TranslatorAclListAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result deleteIPv6TranslatorEntry(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise deleteIPv6TranslatorEntryAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result deleteIPv6Translator(array $arguments = [])
 * @method \Http\Promise\Promise deleteIPv6TranslatorAsync($arguments = [])
 * @method \Dew\Acs\Result modifyIPv6TranslatorAclListEntry(array $arguments = [])
 * @method \Http\Promise\Promise modifyIPv6TranslatorAclListEntryAsync($arguments = [])
 * @method \Dew\Acs\Result modifyIPv6TranslatorAclAttribute(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise modifyIPv6TranslatorAclAttributeAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result modifyIPv6TranslatorBandwidth(array $arguments = [])
 * @method \Http\Promise\Promise modifyIPv6TranslatorBandwidthAsync($arguments = [])
 * @method \Dew\Acs\Result modifyIPv6TranslatorAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyIPv6TranslatorAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyIPv6TranslatorEntry(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise modifyIPv6TranslatorEntryAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result describeIPv6TranslatorAclLists(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise describeIPv6TranslatorAclListsAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result describeIPv6TranslatorAclListAttributes(array $arguments = [])
 * @method \Http\Promise\Promise describeIPv6TranslatorAclListAttributesAsync($arguments = [])
 * @method \Dew\Acs\Result describeIPv6Translators(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise describeIPv6TranslatorsAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result describeIPv6TranslatorEntries(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise describeIPv6TranslatorEntriesAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result removeIPv6TranslatorAclListEntry(array $arguments = [])
 * @method \Http\Promise\Promise removeIPv6TranslatorAclListEntryAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeZones(array $arguments = [])
 * @method \Http\Promise\Promise describeZonesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResourcesForExpressConnect(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesForExpressConnectAsync($arguments = [])
 * @method \Dew\Acs\Result unTagResources(array $arguments = [])
 * @method \Http\Promise\Promise unTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResourcesForExpressConnect(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesForExpressConnectAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result describeTags(array $arguments = [])
 * @method \Http\Promise\Promise describeTagsAsync($arguments = [])
 * @method \Dew\Acs\Result describeTagKeys(array $arguments = [])
 * @method \Http\Promise\Promise describeTagKeysAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResourcesForExpressConnect(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesForExpressConnectAsync($arguments = [])
 * @method \Dew\Acs\Result describeTagKeysForExpressConnect(array $arguments = [])
 * @method \Http\Promise\Promise describeTagKeysForExpressConnectAsync($arguments = [])
 * @method \Dew\Acs\Result createRouterInterface(array $arguments = [])
 * @method \Http\Promise\Promise createRouterInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRouterInterface(array $arguments = [])
 * @method \Http\Promise\Promise deleteRouterInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyRouterInterfaceAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyRouterInterfaceAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyRouterInterfaceSpec(array $arguments = [])
 * @method \Http\Promise\Promise modifyRouterInterfaceSpecAsync($arguments = [])
 * @method \Dew\Acs\Result describeRouterInterfaces(array $arguments = [])
 * @method \Http\Promise\Promise describeRouterInterfacesAsync($arguments = [])
 * @method \Dew\Acs\Result describeEcGrantRelation(array $arguments = [])
 * @method \Http\Promise\Promise describeEcGrantRelationAsync($arguments = [])
 * @method \Dew\Acs\Result describeRouterInterfaceAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeRouterInterfaceAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result deactivateRouterInterface(array $arguments = [])
 * @method \Http\Promise\Promise deactivateRouterInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result grantInstanceToVbr(array $arguments = [])
 * @method \Http\Promise\Promise grantInstanceToVbrAsync($arguments = [])
 * @method \Dew\Acs\Result activateRouterInterface(array $arguments = [])
 * @method \Http\Promise\Promise activateRouterInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result revokeInstanceFromVbr(array $arguments = [])
 * @method \Http\Promise\Promise revokeInstanceFromVbrAsync($arguments = [])
 * @method \Dew\Acs\Result connectRouterInterface(array $arguments = [])
 * @method \Http\Promise\Promise connectRouterInterfaceAsync($arguments = [])
 * @method \Dew\Acs\Result createExpressCloudConnection(array $arguments = [])
 * @method \Http\Promise\Promise createExpressCloudConnectionAsync($arguments = [])
 * @method \Dew\Acs\Result modifyExpressCloudConnectionAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyExpressCloudConnectionAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyExpressCloudConnectionBandwidth(array $arguments = [])
 * @method \Http\Promise\Promise modifyExpressCloudConnectionBandwidthAsync($arguments = [])
 * @method \Dew\Acs\Result createGlobalAccelerationInstance(array $arguments = []) {@deprecated 2016-04-28}
 * @method \Http\Promise\Promise createGlobalAccelerationInstanceAsync($arguments = []) {@deprecated 2016-04-28}
 * @method \Dew\Acs\Result addGlobalAccelerationInstanceIp(array $arguments = [])
 * @method \Http\Promise\Promise addGlobalAccelerationInstanceIpAsync($arguments = [])
 * @method \Dew\Acs\Result deleteGlobalAccelerationInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteGlobalAccelerationInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result unassociateGlobalAccelerationInstance(array $arguments = [])
 * @method \Http\Promise\Promise unassociateGlobalAccelerationInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyGlobalAccelerationInstanceAttributes(array $arguments = [])
 * @method \Http\Promise\Promise modifyGlobalAccelerationInstanceAttributesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyGlobalAccelerationInstanceSpec(array $arguments = [])
 * @method \Http\Promise\Promise modifyGlobalAccelerationInstanceSpecAsync($arguments = [])
 * @method \Dew\Acs\Result describeGlobalAccelerationInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeGlobalAccelerationInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result describeServerRelatedGlobalAccelerationInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeServerRelatedGlobalAccelerationInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result removeGlobalAccelerationInstanceIp(array $arguments = [])
 * @method \Http\Promise\Promise removeGlobalAccelerationInstanceIpAsync($arguments = [])
 * @method \Dew\Acs\Result createVpcGatewayEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise createVpcGatewayEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpcGatewayEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpcGatewayEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result updateVpcGatewayEndpointAttribute(array $arguments = [])
 * @method \Http\Promise\Promise updateVpcGatewayEndpointAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listVpcEndpointServicesByEndUser(array $arguments = [])
 * @method \Http\Promise\Promise listVpcEndpointServicesByEndUserAsync($arguments = [])
 * @method \Dew\Acs\Result getVpcGatewayEndpointAttribute(array $arguments = [])
 * @method \Http\Promise\Promise getVpcGatewayEndpointAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result listVpcGatewayEndpoints(array $arguments = [])
 * @method \Http\Promise\Promise listVpcGatewayEndpointsAsync($arguments = [])
 * @method \Dew\Acs\Result associateRouteTablesWithVpcGatewayEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise associateRouteTablesWithVpcGatewayEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result dissociateRouteTablesFromVpcGatewayEndpoint(array $arguments = [])
 * @method \Http\Promise\Promise dissociateRouteTablesFromVpcGatewayEndpointAsync($arguments = [])
 * @method \Dew\Acs\Result moveResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise moveResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result changeResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise changeResourceGroupAsync($arguments = [])
 */
final class VpcClient extends AcsClient
{
    //
}
