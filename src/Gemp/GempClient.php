<?php

declare(strict_types=1);

namespace Dew\Acs\Gemp;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result pushMonitor(array $arguments = [])
 * @method \Http\Promise\Promise pushMonitorAsync($arguments = [])
 * @method \Dew\Acs\Result createEscalationPlan(array $arguments = [])
 * @method \Http\Promise\Promise createEscalationPlanAsync($arguments = [])
 * @method \Dew\Acs\Result deleteEscalationPlan(array $arguments = [])
 * @method \Http\Promise\Promise deleteEscalationPlanAsync($arguments = [])
 * @method \Dew\Acs\Result disableEscalationPlan(array $arguments = [])
 * @method \Http\Promise\Promise disableEscalationPlanAsync($arguments = [])
 * @method \Dew\Acs\Result enableEscalationPlan(array $arguments = [])
 * @method \Http\Promise\Promise enableEscalationPlanAsync($arguments = [])
 * @method \Dew\Acs\Result getEscalationPlan(array $arguments = [])
 * @method \Http\Promise\Promise getEscalationPlanAsync($arguments = [])
 * @method \Dew\Acs\Result listEscalationPlans(array $arguments = [])
 * @method \Http\Promise\Promise listEscalationPlansAsync($arguments = [])
 * @method \Dew\Acs\Result updateEscalationPlan(array $arguments = [])
 * @method \Http\Promise\Promise updateEscalationPlanAsync($arguments = [])
 * @method \Dew\Acs\Result getIncidentListByIdList(array $arguments = [])
 * @method \Http\Promise\Promise getIncidentListByIdListAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIncident(array $arguments = [])
 * @method \Http\Promise\Promise deleteIncidentAsync($arguments = [])
 * @method \Dew\Acs\Result createIncident(array $arguments = [])
 * @method \Http\Promise\Promise createIncidentAsync($arguments = [])
 * @method \Dew\Acs\Result deliverIncident(array $arguments = [])
 * @method \Http\Promise\Promise deliverIncidentAsync($arguments = [])
 * @method \Dew\Acs\Result getIncident(array $arguments = [])
 * @method \Http\Promise\Promise getIncidentAsync($arguments = [])
 * @method \Dew\Acs\Result getIncidentStatistics(array $arguments = [])
 * @method \Http\Promise\Promise getIncidentStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result finishIncident(array $arguments = [])
 * @method \Http\Promise\Promise finishIncidentAsync($arguments = [])
 * @method \Dew\Acs\Result updateIncident(array $arguments = [])
 * @method \Http\Promise\Promise updateIncidentAsync($arguments = [])
 * @method \Dew\Acs\Result respondIncident(array $arguments = [])
 * @method \Http\Promise\Promise respondIncidentAsync($arguments = [])
 * @method \Dew\Acs\Result listIncidents(array $arguments = [])
 * @method \Http\Promise\Promise listIncidentsAsync($arguments = [])
 * @method \Dew\Acs\Result listIncidentDetailTimelines(array $arguments = [])
 * @method \Http\Promise\Promise listIncidentDetailTimelinesAsync($arguments = [])
 * @method \Dew\Acs\Result listIncidentTimelines(array $arguments = [])
 * @method \Http\Promise\Promise listIncidentTimelinesAsync($arguments = [])
 * @method \Dew\Acs\Result createUser(array $arguments = [])
 * @method \Http\Promise\Promise createUserAsync($arguments = [])
 * @method \Dew\Acs\Result deleteUser(array $arguments = [])
 * @method \Http\Promise\Promise deleteUserAsync($arguments = [])
 * @method \Dew\Acs\Result getUser(array $arguments = [])
 * @method \Http\Promise\Promise getUserAsync($arguments = [])
 * @method \Dew\Acs\Result listUsers(array $arguments = [])
 * @method \Http\Promise\Promise listUsersAsync($arguments = [])
 * @method \Dew\Acs\Result updateUser(array $arguments = [])
 * @method \Http\Promise\Promise updateUserAsync($arguments = [])
 * @method \Dew\Acs\Result createService(array $arguments = [])
 * @method \Http\Promise\Promise createServiceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteService(array $arguments = [])
 * @method \Http\Promise\Promise deleteServiceAsync($arguments = [])
 * @method \Dew\Acs\Result getService(array $arguments = [])
 * @method \Http\Promise\Promise getServiceAsync($arguments = [])
 * @method \Dew\Acs\Result listServices(array $arguments = [])
 * @method \Http\Promise\Promise listServicesAsync($arguments = [])
 * @method \Dew\Acs\Result updateService(array $arguments = [])
 * @method \Http\Promise\Promise updateServiceAsync($arguments = [])
 * @method \Dew\Acs\Result createServiceGroup(array $arguments = [])
 * @method \Http\Promise\Promise createServiceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createServiceGroupScheduling(array $arguments = [])
 * @method \Http\Promise\Promise createServiceGroupSchedulingAsync($arguments = [])
 * @method \Dew\Acs\Result deleteServiceGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteServiceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteServiceGroupUser(array $arguments = [])
 * @method \Http\Promise\Promise deleteServiceGroupUserAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceGroup(array $arguments = [])
 * @method \Http\Promise\Promise getServiceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceGroupPersonScheduling(array $arguments = [])
 * @method \Http\Promise\Promise getServiceGroupPersonSchedulingAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceGroupScheduling(array $arguments = [])
 * @method \Http\Promise\Promise getServiceGroupSchedulingAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceGroupSchedulingPreview(array $arguments = [])
 * @method \Http\Promise\Promise getServiceGroupSchedulingPreviewAsync($arguments = [])
 * @method \Dew\Acs\Result getServiceGroupSpecialPersonScheduling(array $arguments = [])
 * @method \Http\Promise\Promise getServiceGroupSpecialPersonSchedulingAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceGroups(array $arguments = [])
 * @method \Http\Promise\Promise listServiceGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result updateServiceGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateServiceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createRouteRule(array $arguments = [])
 * @method \Http\Promise\Promise createRouteRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteRouteRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteRouteRuleAsync($arguments = [])
 * @method \Dew\Acs\Result disableRouteRule(array $arguments = [])
 * @method \Http\Promise\Promise disableRouteRuleAsync($arguments = [])
 * @method \Dew\Acs\Result enableRouteRule(array $arguments = [])
 * @method \Http\Promise\Promise enableRouteRuleAsync($arguments = [])
 * @method \Dew\Acs\Result getRouteRule(array $arguments = [])
 * @method \Http\Promise\Promise getRouteRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listRouteRules(array $arguments = [])
 * @method \Http\Promise\Promise listRouteRulesAsync($arguments = [])
 * @method \Dew\Acs\Result updateRouteRule(array $arguments = [])
 * @method \Http\Promise\Promise updateRouteRuleAsync($arguments = [])
 * @method \Dew\Acs\Result verifyRouteRule(array $arguments = [])
 * @method \Http\Promise\Promise verifyRouteRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createRichText(array $arguments = [])
 * @method \Http\Promise\Promise createRichTextAsync($arguments = [])
 * @method \Dew\Acs\Result getRichText(array $arguments = [])
 * @method \Http\Promise\Promise getRichTextAsync($arguments = [])
 * @method \Dew\Acs\Result updateRichText(array $arguments = [])
 * @method \Http\Promise\Promise updateRichTextAsync($arguments = [])
 * @method \Dew\Acs\Result createSubscription(array $arguments = [])
 * @method \Http\Promise\Promise createSubscriptionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSubscription(array $arguments = [])
 * @method \Http\Promise\Promise deleteSubscriptionAsync($arguments = [])
 * @method \Dew\Acs\Result enableSubscription(array $arguments = [])
 * @method \Http\Promise\Promise enableSubscriptionAsync($arguments = [])
 * @method \Dew\Acs\Result updateSubscription(array $arguments = [])
 * @method \Http\Promise\Promise updateSubscriptionAsync($arguments = [])
 * @method \Dew\Acs\Result getSubscription(array $arguments = [])
 * @method \Http\Promise\Promise getSubscriptionAsync($arguments = [])
 * @method \Dew\Acs\Result disableSubscription(array $arguments = [])
 * @method \Http\Promise\Promise disableSubscriptionAsync($arguments = [])
 * @method \Dew\Acs\Result listSubscriptions(array $arguments = [])
 * @method \Http\Promise\Promise listSubscriptionsAsync($arguments = [])
 * @method \Dew\Acs\Result createIntegrationConfig(array $arguments = [])
 * @method \Http\Promise\Promise createIntegrationConfigAsync($arguments = [])
 * @method \Dew\Acs\Result disableIntegrationConfig(array $arguments = [])
 * @method \Http\Promise\Promise disableIntegrationConfigAsync($arguments = [])
 * @method \Dew\Acs\Result enableIntegrationConfig(array $arguments = [])
 * @method \Http\Promise\Promise enableIntegrationConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getIntegrationConfig(array $arguments = [])
 * @method \Http\Promise\Promise getIntegrationConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listIntegrationConfigs(array $arguments = [])
 * @method \Http\Promise\Promise listIntegrationConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result listIntegrationConfigTimelines(array $arguments = [])
 * @method \Http\Promise\Promise listIntegrationConfigTimelinesAsync($arguments = [])
 * @method \Dew\Acs\Result confirmIntegrationConfig(array $arguments = [])
 * @method \Http\Promise\Promise confirmIntegrationConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIntegrationConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteIntegrationConfigAsync($arguments = [])
 * @method \Dew\Acs\Result updateIntegrationConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateIntegrationConfigAsync($arguments = [])
 * @method \Dew\Acs\Result refreshIntegrationConfigKey(array $arguments = [])
 * @method \Http\Promise\Promise refreshIntegrationConfigKeyAsync($arguments = [])
 * @method \Dew\Acs\Result createProblem(array $arguments = [])
 * @method \Http\Promise\Promise createProblemAsync($arguments = [])
 * @method \Dew\Acs\Result createProblemMeasure(array $arguments = [])
 * @method \Http\Promise\Promise createProblemMeasureAsync($arguments = [])
 * @method \Dew\Acs\Result createProblemSubtotal(array $arguments = [])
 * @method \Http\Promise\Promise createProblemSubtotalAsync($arguments = [])
 * @method \Dew\Acs\Result createProblemTimeline(array $arguments = [])
 * @method \Http\Promise\Promise createProblemTimelineAsync($arguments = [])
 * @method \Dew\Acs\Result createProblemTimelines(array $arguments = [])
 * @method \Http\Promise\Promise createProblemTimelinesAsync($arguments = [])
 * @method \Dew\Acs\Result addProblemServiceGroup(array $arguments = [])
 * @method \Http\Promise\Promise addProblemServiceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateProblem(array $arguments = [])
 * @method \Http\Promise\Promise updateProblemAsync($arguments = [])
 * @method \Dew\Acs\Result updateProblemNotice(array $arguments = [])
 * @method \Http\Promise\Promise updateProblemNoticeAsync($arguments = [])
 * @method \Dew\Acs\Result updateProblemTimeline(array $arguments = [])
 * @method \Http\Promise\Promise updateProblemTimelineAsync($arguments = [])
 * @method \Dew\Acs\Result listProblemDetailOperations(array $arguments = [])
 * @method \Http\Promise\Promise listProblemDetailOperationsAsync($arguments = [])
 * @method \Dew\Acs\Result listProblemOperations(array $arguments = [])
 * @method \Http\Promise\Promise listProblemOperationsAsync($arguments = [])
 * @method \Dew\Acs\Result listProblems(array $arguments = [])
 * @method \Http\Promise\Promise listProblemsAsync($arguments = [])
 * @method \Dew\Acs\Result listProblemSubtotals(array $arguments = [])
 * @method \Http\Promise\Promise listProblemSubtotalsAsync($arguments = [])
 * @method \Dew\Acs\Result cancelProblem(array $arguments = [])
 * @method \Http\Promise\Promise cancelProblemAsync($arguments = [])
 * @method \Dew\Acs\Result finishProblem(array $arguments = [])
 * @method \Http\Promise\Promise finishProblemAsync($arguments = [])
 * @method \Dew\Acs\Result recoverProblem(array $arguments = [])
 * @method \Http\Promise\Promise recoverProblemAsync($arguments = [])
 * @method \Dew\Acs\Result replayProblem(array $arguments = [])
 * @method \Http\Promise\Promise replayProblemAsync($arguments = [])
 * @method \Dew\Acs\Result revokeProblemRecovery(array $arguments = [])
 * @method \Http\Promise\Promise revokeProblemRecoveryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProblem(array $arguments = [])
 * @method \Http\Promise\Promise deleteProblemAsync($arguments = [])
 * @method \Dew\Acs\Result getProblem(array $arguments = [])
 * @method \Http\Promise\Promise getProblemAsync($arguments = [])
 * @method \Dew\Acs\Result getProblemImprovement(array $arguments = [])
 * @method \Http\Promise\Promise getProblemImprovementAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProblemMeasure(array $arguments = [])
 * @method \Http\Promise\Promise deleteProblemMeasureAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProblemTimeline(array $arguments = [])
 * @method \Http\Promise\Promise deleteProblemTimelineAsync($arguments = [])
 * @method \Dew\Acs\Result listProblemTimeLines(array $arguments = [])
 * @method \Http\Promise\Promise listProblemTimeLinesAsync($arguments = [])
 * @method \Dew\Acs\Result getProblemEffectionService(array $arguments = [])
 * @method \Http\Promise\Promise getProblemEffectionServiceAsync($arguments = [])
 * @method \Dew\Acs\Result getProblemPreview(array $arguments = [])
 * @method \Http\Promise\Promise getProblemPreviewAsync($arguments = [])
 * @method \Dew\Acs\Result generateProblemPictureUploadSign(array $arguments = [])
 * @method \Http\Promise\Promise generateProblemPictureUploadSignAsync($arguments = [])
 * @method \Dew\Acs\Result updateProblemMeasure(array $arguments = [])
 * @method \Http\Promise\Promise updateProblemMeasureAsync($arguments = [])
 * @method \Dew\Acs\Result updateProblemEffectionService(array $arguments = [])
 * @method \Http\Promise\Promise updateProblemEffectionServiceAsync($arguments = [])
 * @method \Dew\Acs\Result generateProblemPictureLink(array $arguments = [])
 * @method \Http\Promise\Promise generateProblemPictureLinkAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProblemEffectionService(array $arguments = [])
 * @method \Http\Promise\Promise deleteProblemEffectionServiceAsync($arguments = [])
 * @method \Dew\Acs\Result disableServiceGroupWebhook(array $arguments = [])
 * @method \Http\Promise\Promise disableServiceGroupWebhookAsync($arguments = [])
 * @method \Dew\Acs\Result removeProblemServiceGroup(array $arguments = [])
 * @method \Http\Promise\Promise removeProblemServiceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createProblemEffectionService(array $arguments = [])
 * @method \Http\Promise\Promise createProblemEffectionServiceAsync($arguments = [])
 * @method \Dew\Acs\Result listMonitorSources(array $arguments = [])
 * @method \Http\Promise\Promise listMonitorSourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listIncidentSubtotals(array $arguments = [])
 * @method \Http\Promise\Promise listIncidentSubtotalsAsync($arguments = [])
 * @method \Dew\Acs\Result enableServiceGroupWebhook(array $arguments = [])
 * @method \Http\Promise\Promise enableServiceGroupWebhookAsync($arguments = [])
 * @method \Dew\Acs\Result listAlerts(array $arguments = [])
 * @method \Http\Promise\Promise listAlertsAsync($arguments = [])
 * @method \Dew\Acs\Result listSubscriptionServiceGroups(array $arguments = [])
 * @method \Http\Promise\Promise listSubscriptionServiceGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result updateProblemImprovement(array $arguments = [])
 * @method \Http\Promise\Promise updateProblemImprovementAsync($arguments = [])
 * @method \Dew\Acs\Result listDictionaries(array $arguments = [])
 * @method \Http\Promise\Promise listDictionariesAsync($arguments = [])
 * @method \Dew\Acs\Result listSourceEvents(array $arguments = [])
 * @method \Http\Promise\Promise listSourceEventsAsync($arguments = [])
 * @method \Dew\Acs\Result listUserSerivceGroups(array $arguments = [])
 * @method \Http\Promise\Promise listUserSerivceGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result createIncidentSubtotal(array $arguments = [])
 * @method \Http\Promise\Promise createIncidentSubtotalAsync($arguments = [])
 * @method \Dew\Acs\Result listConfigs(array $arguments = [])
 * @method \Http\Promise\Promise listConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result getEvent(array $arguments = [])
 * @method \Http\Promise\Promise getEventAsync($arguments = [])
 * @method \Dew\Acs\Result updateUserGuideStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateUserGuideStatusAsync($arguments = [])
 * @method \Dew\Acs\Result listEscalationPlanServices(array $arguments = [])
 * @method \Http\Promise\Promise listEscalationPlanServicesAsync($arguments = [])
 * @method \Dew\Acs\Result checkWebhook(array $arguments = [])
 * @method \Http\Promise\Promise checkWebhookAsync($arguments = [])
 * @method \Dew\Acs\Result getUserGuideStatus(array $arguments = [])
 * @method \Http\Promise\Promise getUserGuideStatusAsync($arguments = [])
 * @method \Dew\Acs\Result getResourceStatistics(array $arguments = [])
 * @method \Http\Promise\Promise getResourceStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result listIncidentDetailEscalationPlans(array $arguments = [])
 * @method \Http\Promise\Promise listIncidentDetailEscalationPlansAsync($arguments = [])
 * @method \Dew\Acs\Result updateServiceGroupScheduling(array $arguments = [])
 * @method \Http\Promise\Promise updateServiceGroupSchedulingAsync($arguments = [])
 * @method \Dew\Acs\Result updateServiceGroupSpecialDayScheduling(array $arguments = [])
 * @method \Http\Promise\Promise updateServiceGroupSpecialDaySchedulingAsync($arguments = [])
 * @method \Dew\Acs\Result getTenantApplication(array $arguments = [])
 * @method \Http\Promise\Promise getTenantApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result getSimilarIncidentStatistics(array $arguments = [])
 * @method \Http\Promise\Promise getSimilarIncidentStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result getIncidentSubtotalCount(array $arguments = [])
 * @method \Http\Promise\Promise getIncidentSubtotalCountAsync($arguments = [])
 * @method \Dew\Acs\Result createTenantApplication(array $arguments = [])
 * @method \Http\Promise\Promise createTenantApplicationAsync($arguments = [])
 * @method \Dew\Acs\Result getHomePageGuidance(array $arguments = [])
 * @method \Http\Promise\Promise getHomePageGuidanceAsync($arguments = [])
 * @method \Dew\Acs\Result listDataReportForServiceGroup(array $arguments = [])
 * @method \Http\Promise\Promise listDataReportForServiceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listChartDataForServiceGroup(array $arguments = [])
 * @method \Http\Promise\Promise listChartDataForServiceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listSourceEventsForMonitorSource(array $arguments = [])
 * @method \Http\Promise\Promise listSourceEventsForMonitorSourceAsync($arguments = [])
 * @method \Dew\Acs\Result listDataReportForUser(array $arguments = [])
 * @method \Http\Promise\Promise listDataReportForUserAsync($arguments = [])
 * @method \Dew\Acs\Result listChartDataForUser(array $arguments = [])
 * @method \Http\Promise\Promise listChartDataForUserAsync($arguments = [])
 * @method \Dew\Acs\Result listTrendForSourceEvent(array $arguments = [])
 * @method \Http\Promise\Promise listTrendForSourceEventAsync($arguments = [])
 * @method \Dew\Acs\Result generatePictureLink(array $arguments = [])
 * @method \Http\Promise\Promise generatePictureLinkAsync($arguments = [])
 * @method \Dew\Acs\Result generatePictureUploadSign(array $arguments = [])
 * @method \Http\Promise\Promise generatePictureUploadSignAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceGroupMonitorSourceTemplates(array $arguments = [])
 * @method \Http\Promise\Promise listServiceGroupMonitorSourceTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result removeIntegrationConfig(array $arguments = [])
 * @method \Http\Promise\Promise removeIntegrationConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listByMonitorSourceId(array $arguments = [])
 * @method \Http\Promise\Promise listByMonitorSourceIdAsync($arguments = [])
 * @method \Dew\Acs\Result listRouteRulesByService(array $arguments = [])
 * @method \Http\Promise\Promise listRouteRulesByServiceAsync($arguments = [])
 * @method \Dew\Acs\Result getTenantStatus(array $arguments = [])
 * @method \Http\Promise\Promise getTenantStatusAsync($arguments = [])
 * @method \Dew\Acs\Result billingStatistics(array $arguments = [])
 * @method \Http\Promise\Promise billingStatisticsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteServiceGroupScheduling(array $arguments = [])
 * @method \Http\Promise\Promise deleteServiceGroupSchedulingAsync($arguments = [])
 * @method \Dew\Acs\Result listEscalationPlansByNoticeObject(array $arguments = [])
 * @method \Http\Promise\Promise listEscalationPlansByNoticeObjectAsync($arguments = [])
 * @method \Dew\Acs\Result unbindUser(array $arguments = [])
 * @method \Http\Promise\Promise unbindUserAsync($arguments = [])
 * @method \Dew\Acs\Result listRouteRulesByAssignWhoId(array $arguments = [])
 * @method \Http\Promise\Promise listRouteRulesByAssignWhoIdAsync($arguments = [])
 * @method \Dew\Acs\Result listServiceGroupsByUserId(array $arguments = [])
 * @method \Http\Promise\Promise listServiceGroupsByUserIdAsync($arguments = [])
 */
final class GempClient extends AcsClient
{
    //
}
