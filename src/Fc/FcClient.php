<?php

declare(strict_types=1);

namespace Dew\Acs\Fc;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result changeResourceGroup(array $arguments = [])
 * @method \Http\Promise\Promise changeResourceGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result createCustomDomain(array $arguments = [])
 * @method \Http\Promise\Promise createCustomDomainAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCustomDomain(array $arguments = [])
 * @method \Http\Promise\Promise deleteCustomDomainAsync($arguments = [])
 * @method \Dew\Acs\Result getCustomDomain(array $arguments = [])
 * @method \Http\Promise\Promise getCustomDomainAsync($arguments = [])
 * @method \Dew\Acs\Result listCustomDomains(array $arguments = [])
 * @method \Http\Promise\Promise listCustomDomainsAsync($arguments = [])
 * @method \Dew\Acs\Result updateCustomDomain(array $arguments = [])
 * @method \Http\Promise\Promise updateCustomDomainAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFunctionVersion(array $arguments = [])
 * @method \Http\Promise\Promise deleteFunctionVersionAsync($arguments = [])
 * @method \Dew\Acs\Result getFunctionCode(array $arguments = [])
 * @method \Http\Promise\Promise getFunctionCodeAsync($arguments = [])
 * @method \Dew\Acs\Result listFunctionVersions(array $arguments = [])
 * @method \Http\Promise\Promise listFunctionVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result publishFunctionVersion(array $arguments = [])
 * @method \Http\Promise\Promise publishFunctionVersionAsync($arguments = [])
 * @method \Dew\Acs\Result createFunction(array $arguments = [])
 * @method \Http\Promise\Promise createFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteFunction(array $arguments = [])
 * @method \Http\Promise\Promise deleteFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result getFunction(array $arguments = [])
 * @method \Http\Promise\Promise getFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result listFunctions(array $arguments = [])
 * @method \Http\Promise\Promise listFunctionsAsync($arguments = [])
 * @method \Dew\Acs\Result invokeFunction(array $arguments = [])
 * @method \Http\Promise\Promise invokeFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result updateFunction(array $arguments = [])
 * @method \Http\Promise\Promise updateFunctionAsync($arguments = [])
 * @method \Dew\Acs\Result enableFunctionInvocation(array $arguments = [])
 * @method \Http\Promise\Promise enableFunctionInvocationAsync($arguments = [])
 * @method \Dew\Acs\Result disableFunctionInvocation(array $arguments = [])
 * @method \Http\Promise\Promise disableFunctionInvocationAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAlias(array $arguments = [])
 * @method \Http\Promise\Promise deleteAliasAsync($arguments = [])
 * @method \Dew\Acs\Result getAlias(array $arguments = [])
 * @method \Http\Promise\Promise getAliasAsync($arguments = [])
 * @method \Dew\Acs\Result listAliases(array $arguments = [])
 * @method \Http\Promise\Promise listAliasesAsync($arguments = [])
 * @method \Dew\Acs\Result updateAlias(array $arguments = [])
 * @method \Http\Promise\Promise updateAliasAsync($arguments = [])
 * @method \Dew\Acs\Result createAlias(array $arguments = [])
 * @method \Http\Promise\Promise createAliasAsync($arguments = [])
 * @method \Dew\Acs\Result createTrigger(array $arguments = [])
 * @method \Http\Promise\Promise createTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTrigger(array $arguments = [])
 * @method \Http\Promise\Promise deleteTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result getTrigger(array $arguments = [])
 * @method \Http\Promise\Promise getTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result listTriggers(array $arguments = [])
 * @method \Http\Promise\Promise listTriggersAsync($arguments = [])
 * @method \Dew\Acs\Result updateTrigger(array $arguments = [])
 * @method \Http\Promise\Promise updateTriggerAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAsyncInvokeConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteAsyncInvokeConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getAsyncInvokeConfig(array $arguments = [])
 * @method \Http\Promise\Promise getAsyncInvokeConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listAsyncInvokeConfigs(array $arguments = [])
 * @method \Http\Promise\Promise listAsyncInvokeConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result putAsyncInvokeConfig(array $arguments = [])
 * @method \Http\Promise\Promise putAsyncInvokeConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteProvisionConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteProvisionConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getProvisionConfig(array $arguments = [])
 * @method \Http\Promise\Promise getProvisionConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listProvisionConfigs(array $arguments = [])
 * @method \Http\Promise\Promise listProvisionConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result putProvisionConfig(array $arguments = [])
 * @method \Http\Promise\Promise putProvisionConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteConcurrencyConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteConcurrencyConfigAsync($arguments = [])
 * @method \Dew\Acs\Result getConcurrencyConfig(array $arguments = [])
 * @method \Http\Promise\Promise getConcurrencyConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listConcurrencyConfigs(array $arguments = [])
 * @method \Http\Promise\Promise listConcurrencyConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result putConcurrencyConfig(array $arguments = [])
 * @method \Http\Promise\Promise putConcurrencyConfigAsync($arguments = [])
 * @method \Dew\Acs\Result createLayerVersion(array $arguments = [])
 * @method \Http\Promise\Promise createLayerVersionAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLayerVersion(array $arguments = [])
 * @method \Http\Promise\Promise deleteLayerVersionAsync($arguments = [])
 * @method \Dew\Acs\Result getLayerVersion(array $arguments = [])
 * @method \Http\Promise\Promise getLayerVersionAsync($arguments = [])
 * @method \Dew\Acs\Result getLayerVersionByArn(array $arguments = [])
 * @method \Http\Promise\Promise getLayerVersionByArnAsync($arguments = [])
 * @method \Dew\Acs\Result listLayerVersions(array $arguments = [])
 * @method \Http\Promise\Promise listLayerVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result listLayers(array $arguments = [])
 * @method \Http\Promise\Promise listLayersAsync($arguments = [])
 * @method \Dew\Acs\Result putLayerACL(array $arguments = [])
 * @method \Http\Promise\Promise putLayerACLAsync($arguments = [])
 * @method \Dew\Acs\Result listInstances(array $arguments = [])
 * @method \Http\Promise\Promise listInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result listVpcBindings(array $arguments = [])
 * @method \Http\Promise\Promise listVpcBindingsAsync($arguments = [])
 * @method \Dew\Acs\Result createVpcBinding(array $arguments = [])
 * @method \Http\Promise\Promise createVpcBindingAsync($arguments = [])
 * @method \Dew\Acs\Result deleteVpcBinding(array $arguments = [])
 * @method \Http\Promise\Promise deleteVpcBindingAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result getAsyncTask(array $arguments = [])
 * @method \Http\Promise\Promise getAsyncTaskAsync($arguments = [])
 * @method \Dew\Acs\Result listAsyncTasks(array $arguments = [])
 * @method \Http\Promise\Promise listAsyncTasksAsync($arguments = [])
 * @method \Dew\Acs\Result stopAsyncTask(array $arguments = [])
 * @method \Http\Promise\Promise stopAsyncTaskAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScalingConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteScalingConfigAsync($arguments = [])
 */
final class FcClient extends AcsClient
{
    //
}
