<?php

declare(strict_types=1);

namespace Dew\Acs\CloudAPI;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result dissociateInstanceWithPrivateDNS(array $arguments = [])
 * @method \Http\Promise\Promise dissociateInstanceWithPrivateDNSAsync($arguments = [])
 * @method \Dew\Acs\Result deletePrivateDNS(array $arguments = [])
 * @method \Http\Promise\Promise deletePrivateDNSAsync($arguments = [])
 * @method \Dew\Acs\Result associateInstanceWithPrivateDNS(array $arguments = [])
 * @method \Http\Promise\Promise associateInstanceWithPrivateDNSAsync($arguments = [])
 * @method \Dew\Acs\Result createPrivateDNS(array $arguments = [])
 * @method \Http\Promise\Promise createPrivateDNSAsync($arguments = [])
 * @method \Dew\Acs\Result listPrivateDNS(array $arguments = [])
 * @method \Http\Promise\Promise listPrivateDNSAsync($arguments = [])
 * @method \Dew\Acs\Result updatePrivateDNS(array $arguments = [])
 * @method \Http\Promise\Promise updatePrivateDNSAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceVpcAttributeForConsole(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceVpcAttributeForConsoleAsync($arguments = [])
 * @method \Dew\Acs\Result createInstance(array $arguments = [])
 * @method \Http\Promise\Promise createInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteInstance(array $arguments = [])
 * @method \Http\Promise\Promise deleteInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceAttribute(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result modifyInstanceSpec(array $arguments = [])
 * @method \Http\Promise\Promise modifyInstanceSpecAsync($arguments = [])
 * @method \Dew\Acs\Result enableInstanceAccessControl(array $arguments = [])
 * @method \Http\Promise\Promise enableInstanceAccessControlAsync($arguments = [])
 * @method \Dew\Acs\Result disableInstanceAccessControl(array $arguments = [])
 * @method \Http\Promise\Promise disableInstanceAccessControlAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstances(array $arguments = [])
 * @method \Http\Promise\Promise describeInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result modifyIntranetDomainPolicy(array $arguments = [])
 * @method \Http\Promise\Promise modifyIntranetDomainPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result createApiGroup(array $arguments = [])
 * @method \Http\Promise\Promise createApiGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteApiGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteApiGroupAsync($arguments = [])
 * @method \Dew\Acs\Result modifyApiGroup(array $arguments = [])
 * @method \Http\Promise\Promise modifyApiGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiGroup(array $arguments = [])
 * @method \Http\Promise\Promise describeApiGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiGroups(array $arguments = [])
 * @method \Http\Promise\Promise describeApiGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result describePurchasedApiGroup(array $arguments = [])
 * @method \Http\Promise\Promise describePurchasedApiGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describePurchasedApiGroups(array $arguments = [])
 * @method \Http\Promise\Promise describePurchasedApiGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDomain(array $arguments = [])
 * @method \Http\Promise\Promise deleteDomainAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDomainCertificate(array $arguments = [])
 * @method \Http\Promise\Promise deleteDomainCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result setDomain(array $arguments = [])
 * @method \Http\Promise\Promise setDomainAsync($arguments = [])
 * @method \Dew\Acs\Result setDomainCertificate(array $arguments = [])
 * @method \Http\Promise\Promise setDomainCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result setDomainWebSocketStatus(array $arguments = [])
 * @method \Http\Promise\Promise setDomainWebSocketStatusAsync($arguments = [])
 * @method \Dew\Acs\Result setWildcardDomainPatterns(array $arguments = [])
 * @method \Http\Promise\Promise setWildcardDomainPatternsAsync($arguments = [])
 * @method \Dew\Acs\Result describeDomain(array $arguments = [])
 * @method \Http\Promise\Promise describeDomainAsync($arguments = [])
 * @method \Dew\Acs\Result reactivateDomain(array $arguments = [])
 * @method \Http\Promise\Promise reactivateDomainAsync($arguments = [])
 * @method \Dew\Acs\Result createMonitorGroup(array $arguments = [])
 * @method \Http\Promise\Promise createMonitorGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteMonitorGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteMonitorGroupAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiLatencyData(array $arguments = [])
 * @method \Http\Promise\Promise describeApiLatencyDataAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiQpsData(array $arguments = [])
 * @method \Http\Promise\Promise describeApiQpsDataAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiTrafficControls(array $arguments = [])
 * @method \Http\Promise\Promise describeApiTrafficControlsAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiTrafficData(array $arguments = [])
 * @method \Http\Promise\Promise describeApiTrafficDataAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceDropPacket(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceDropPacketAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceDropConnections(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceDropConnectionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceHttpCode(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceHttpCodeAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceLatency(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceLatencyAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceNewConnections(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceNewConnectionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstancePackets(array $arguments = [])
 * @method \Http\Promise\Promise describeInstancePacketsAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceQps(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceQpsAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceSlbConnect(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceSlbConnectAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceTraffic(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceTrafficAsync($arguments = [])
 * @method \Dew\Acs\Result describeGroupQps(array $arguments = [])
 * @method \Http\Promise\Promise describeGroupQpsAsync($arguments = [])
 * @method \Dew\Acs\Result createApi(array $arguments = [])
 * @method \Http\Promise\Promise createApiAsync($arguments = [])
 * @method \Dew\Acs\Result createApiStageVariable(array $arguments = [])
 * @method \Http\Promise\Promise createApiStageVariableAsync($arguments = [])
 * @method \Dew\Acs\Result importOAS(array $arguments = [])
 * @method \Http\Promise\Promise importOASAsync($arguments = [])
 * @method \Dew\Acs\Result importSwagger(array $arguments = [])
 * @method \Http\Promise\Promise importSwaggerAsync($arguments = [])
 * @method \Dew\Acs\Result deleteApi(array $arguments = [])
 * @method \Http\Promise\Promise deleteApiAsync($arguments = [])
 * @method \Dew\Acs\Result deleteApiStageVariable(array $arguments = [])
 * @method \Http\Promise\Promise deleteApiStageVariableAsync($arguments = [])
 * @method \Dew\Acs\Result modifyApiConfiguration(array $arguments = [])
 * @method \Http\Promise\Promise modifyApiConfigurationAsync($arguments = [])
 * @method \Dew\Acs\Result modifyApi(array $arguments = [])
 * @method \Http\Promise\Promise modifyApiAsync($arguments = [])
 * @method \Dew\Acs\Result describeApisByBackend(array $arguments = [])
 * @method \Http\Promise\Promise describeApisByBackendAsync($arguments = [])
 * @method \Dew\Acs\Result describeApi(array $arguments = [])
 * @method \Http\Promise\Promise describeApiAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiMarketAttributes(array $arguments = [])
 * @method \Http\Promise\Promise describeApiMarketAttributesAsync($arguments = [])
 * @method \Dew\Acs\Result describeApis(array $arguments = [])
 * @method \Http\Promise\Promise describeApisAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiHistory(array $arguments = [])
 * @method \Http\Promise\Promise describeApiHistoryAsync($arguments = [])
 * @method \Dew\Acs\Result describeApisByApp(array $arguments = [])
 * @method \Http\Promise\Promise describeApisByAppAsync($arguments = [])
 * @method \Dew\Acs\Result describeAuthorizedApis(array $arguments = [])
 * @method \Http\Promise\Promise describeAuthorizedApisAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiDoc(array $arguments = [])
 * @method \Http\Promise\Promise describeApiDocAsync($arguments = [])
 * @method \Dew\Acs\Result describeDeployedApi(array $arguments = [])
 * @method \Http\Promise\Promise describeDeployedApiAsync($arguments = [])
 * @method \Dew\Acs\Result describeHistoryApis(array $arguments = [])
 * @method \Http\Promise\Promise describeHistoryApisAsync($arguments = [])
 * @method \Dew\Acs\Result describeImportOASTask(array $arguments = [])
 * @method \Http\Promise\Promise describeImportOASTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describePurchasedApis(array $arguments = [])
 * @method \Http\Promise\Promise describePurchasedApisAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiHistories(array $arguments = [])
 * @method \Http\Promise\Promise describeApiHistoriesAsync($arguments = [])
 * @method \Dew\Acs\Result describeDeployedApis(array $arguments = [])
 * @method \Http\Promise\Promise describeDeployedApisAsync($arguments = [])
 * @method \Dew\Acs\Result describeMarketRemainsQuota(array $arguments = [])
 * @method \Http\Promise\Promise describeMarketRemainsQuotaAsync($arguments = [])
 * @method \Dew\Acs\Result describeDeployApiTask(array $arguments = [])
 * @method \Http\Promise\Promise describeDeployApiTaskAsync($arguments = [])
 * @method \Dew\Acs\Result describeAbolishApiTask(array $arguments = [])
 * @method \Http\Promise\Promise describeAbolishApiTaskAsync($arguments = [])
 * @method \Dew\Acs\Result abolishApi(array $arguments = [])
 * @method \Http\Promise\Promise abolishApiAsync($arguments = [])
 * @method \Dew\Acs\Result deployApi(array $arguments = [])
 * @method \Http\Promise\Promise deployApiAsync($arguments = [])
 * @method \Dew\Acs\Result batchDeployApis(array $arguments = [])
 * @method \Http\Promise\Promise batchDeployApisAsync($arguments = [])
 * @method \Dew\Acs\Result batchAbolishApis(array $arguments = [])
 * @method \Http\Promise\Promise batchAbolishApisAsync($arguments = [])
 * @method \Dew\Acs\Result switchApi(array $arguments = [])
 * @method \Http\Promise\Promise switchApiAsync($arguments = [])
 * @method \Dew\Acs\Result dryRunSwagger(array $arguments = [])
 * @method \Http\Promise\Promise dryRunSwaggerAsync($arguments = [])
 * @method \Dew\Acs\Result createApp(array $arguments = [])
 * @method \Http\Promise\Promise createAppAsync($arguments = [])
 * @method \Dew\Acs\Result deleteApp(array $arguments = [])
 * @method \Http\Promise\Promise deleteAppAsync($arguments = [])
 * @method \Dew\Acs\Result modifyApp(array $arguments = [])
 * @method \Http\Promise\Promise modifyAppAsync($arguments = [])
 * @method \Dew\Acs\Result describeApps(array $arguments = [])
 * @method \Http\Promise\Promise describeAppsAsync($arguments = [])
 * @method \Dew\Acs\Result describeAppAttributes(array $arguments = [])
 * @method \Http\Promise\Promise describeAppAttributesAsync($arguments = [])
 * @method \Dew\Acs\Result describeAuthorizedApps(array $arguments = [])
 * @method \Http\Promise\Promise describeAuthorizedAppsAsync($arguments = [])
 * @method \Dew\Acs\Result describeApp(array $arguments = [])
 * @method \Http\Promise\Promise describeAppAsync($arguments = [])
 * @method \Dew\Acs\Result describeAppSecurity(array $arguments = [])
 * @method \Http\Promise\Promise describeAppSecurityAsync($arguments = [])
 * @method \Dew\Acs\Result resetAppCode(array $arguments = [])
 * @method \Http\Promise\Promise resetAppCodeAsync($arguments = [])
 * @method \Dew\Acs\Result removeVpcAccess(array $arguments = [])
 * @method \Http\Promise\Promise removeVpcAccessAsync($arguments = [])
 * @method \Dew\Acs\Result removeVpcAccessAndAbolishApis(array $arguments = [])
 * @method \Http\Promise\Promise removeVpcAccessAndAbolishApisAsync($arguments = [])
 * @method \Dew\Acs\Result modifyVpcAccessAndUpdateApis(array $arguments = [])
 * @method \Http\Promise\Promise modifyVpcAccessAndUpdateApisAsync($arguments = [])
 * @method \Dew\Acs\Result modifyApiGroupVpcWhitelist(array $arguments = [])
 * @method \Http\Promise\Promise modifyApiGroupVpcWhitelistAsync($arguments = [])
 * @method \Dew\Acs\Result setVpcAccess(array $arguments = [])
 * @method \Http\Promise\Promise setVpcAccessAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiGroupVpcWhitelist(array $arguments = [])
 * @method \Http\Promise\Promise describeApiGroupVpcWhitelistAsync($arguments = [])
 * @method \Dew\Acs\Result describeVpcAccesses(array $arguments = [])
 * @method \Http\Promise\Promise describeVpcAccessesAsync($arguments = [])
 * @method \Dew\Acs\Result describeUpdateVpcInfoTask(array $arguments = [])
 * @method \Http\Promise\Promise describeUpdateVpcInfoTaskAsync($arguments = [])
 * @method \Dew\Acs\Result validateVpcConnectivity(array $arguments = [])
 * @method \Http\Promise\Promise validateVpcConnectivityAsync($arguments = [])
 * @method \Dew\Acs\Result createAccessControlList(array $arguments = [])
 * @method \Http\Promise\Promise createAccessControlListAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAccessControlList(array $arguments = [])
 * @method \Http\Promise\Promise deleteAccessControlListAsync($arguments = [])
 * @method \Dew\Acs\Result setAccessControlListAttribute(array $arguments = [])
 * @method \Http\Promise\Promise setAccessControlListAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result addAccessControlListEntry(array $arguments = [])
 * @method \Http\Promise\Promise addAccessControlListEntryAsync($arguments = [])
 * @method \Dew\Acs\Result removeAccessControlListEntry(array $arguments = [])
 * @method \Http\Promise\Promise removeAccessControlListEntryAsync($arguments = [])
 * @method \Dew\Acs\Result describeAccessControlListAttribute(array $arguments = [])
 * @method \Http\Promise\Promise describeAccessControlListAttributeAsync($arguments = [])
 * @method \Dew\Acs\Result describeAccessControlLists(array $arguments = [])
 * @method \Http\Promise\Promise describeAccessControlListsAsync($arguments = [])
 * @method \Dew\Acs\Result createPlugin(array $arguments = [])
 * @method \Http\Promise\Promise createPluginAsync($arguments = [])
 * @method \Dew\Acs\Result deletePlugin(array $arguments = [])
 * @method \Http\Promise\Promise deletePluginAsync($arguments = [])
 * @method \Dew\Acs\Result attachPlugin(array $arguments = [])
 * @method \Http\Promise\Promise attachPluginAsync($arguments = [])
 * @method \Dew\Acs\Result modifyPlugin(array $arguments = [])
 * @method \Http\Promise\Promise modifyPluginAsync($arguments = [])
 * @method \Dew\Acs\Result detachPlugin(array $arguments = [])
 * @method \Http\Promise\Promise detachPluginAsync($arguments = [])
 * @method \Dew\Acs\Result describePluginApis(array $arguments = [])
 * @method \Http\Promise\Promise describePluginApisAsync($arguments = [])
 * @method \Dew\Acs\Result describePluginsByApi(array $arguments = [])
 * @method \Http\Promise\Promise describePluginsByApiAsync($arguments = [])
 * @method \Dew\Acs\Result describePluginSchemas(array $arguments = [])
 * @method \Http\Promise\Promise describePluginSchemasAsync($arguments = [])
 * @method \Dew\Acs\Result describePluginTemplates(array $arguments = [])
 * @method \Http\Promise\Promise describePluginTemplatesAsync($arguments = [])
 * @method \Dew\Acs\Result describePlugins(array $arguments = [])
 * @method \Http\Promise\Promise describePluginsAsync($arguments = [])
 * @method \Dew\Acs\Result createDataset(array $arguments = [])
 * @method \Http\Promise\Promise createDatasetAsync($arguments = [])
 * @method \Dew\Acs\Result createDatasetItem(array $arguments = [])
 * @method \Http\Promise\Promise createDatasetItemAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDataset(array $arguments = [])
 * @method \Http\Promise\Promise deleteDatasetAsync($arguments = [])
 * @method \Dew\Acs\Result deleteDatasetItem(array $arguments = [])
 * @method \Http\Promise\Promise deleteDatasetItemAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDataset(array $arguments = [])
 * @method \Http\Promise\Promise modifyDatasetAsync($arguments = [])
 * @method \Dew\Acs\Result modifyDatasetItem(array $arguments = [])
 * @method \Http\Promise\Promise modifyDatasetItemAsync($arguments = [])
 * @method \Dew\Acs\Result describeDatasetInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeDatasetInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeDatasetList(array $arguments = [])
 * @method \Http\Promise\Promise describeDatasetListAsync($arguments = [])
 * @method \Dew\Acs\Result describeDatasetItemInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeDatasetItemInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeDatasetItemList(array $arguments = [])
 * @method \Http\Promise\Promise describeDatasetItemListAsync($arguments = [])
 * @method \Dew\Acs\Result createModel(array $arguments = [])
 * @method \Http\Promise\Promise createModelAsync($arguments = [])
 * @method \Dew\Acs\Result deleteModel(array $arguments = [])
 * @method \Http\Promise\Promise deleteModelAsync($arguments = [])
 * @method \Dew\Acs\Result modifyModel(array $arguments = [])
 * @method \Http\Promise\Promise modifyModelAsync($arguments = [])
 * @method \Dew\Acs\Result describeModels(array $arguments = [])
 * @method \Http\Promise\Promise describeModelsAsync($arguments = [])
 * @method \Dew\Acs\Result setApisAuthorities(array $arguments = [])
 * @method \Http\Promise\Promise setApisAuthoritiesAsync($arguments = [])
 * @method \Dew\Acs\Result setAppsAuthorities(array $arguments = [])
 * @method \Http\Promise\Promise setAppsAuthoritiesAsync($arguments = [])
 * @method \Dew\Acs\Result removeApisAuthorities(array $arguments = [])
 * @method \Http\Promise\Promise removeApisAuthoritiesAsync($arguments = [])
 * @method \Dew\Acs\Result removeAppsAuthorities(array $arguments = [])
 * @method \Http\Promise\Promise removeAppsAuthoritiesAsync($arguments = [])
 * @method \Dew\Acs\Result resetAppSecret(array $arguments = [])
 * @method \Http\Promise\Promise resetAppSecretAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result describeSummaryData(array $arguments = [])
 * @method \Http\Promise\Promise describeSummaryDataAsync($arguments = [])
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeSystemParameters(array $arguments = [])
 * @method \Http\Promise\Promise describeSystemParametersAsync($arguments = [])
 * @method \Dew\Acs\Result describeZones(array $arguments = [])
 * @method \Http\Promise\Promise describeZonesAsync($arguments = [])
 * @method \Dew\Acs\Result openApiGatewayService(array $arguments = [])
 * @method \Http\Promise\Promise openApiGatewayServiceAsync($arguments = [])
 * @method \Dew\Acs\Result createLogConfig(array $arguments = [])
 * @method \Http\Promise\Promise createLogConfigAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLogConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteLogConfigAsync($arguments = [])
 * @method \Dew\Acs\Result modifyLogConfig(array $arguments = [])
 * @method \Http\Promise\Promise modifyLogConfigAsync($arguments = [])
 * @method \Dew\Acs\Result queryRequestLogs(array $arguments = [])
 * @method \Http\Promise\Promise queryRequestLogsAsync($arguments = [])
 * @method \Dew\Acs\Result describeLogConfig(array $arguments = [])
 * @method \Http\Promise\Promise describeLogConfigAsync($arguments = [])
 * @method \Dew\Acs\Result sdkGenerateByAppForRegion(array $arguments = [])
 * @method \Http\Promise\Promise sdkGenerateByAppForRegionAsync($arguments = [])
 * @method \Dew\Acs\Result sdkGenerateByApp(array $arguments = [])
 * @method \Http\Promise\Promise sdkGenerateByAppAsync($arguments = [])
 * @method \Dew\Acs\Result sdkGenerateByGroup(array $arguments = [])
 * @method \Http\Promise\Promise sdkGenerateByGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createBackend(array $arguments = [])
 * @method \Http\Promise\Promise createBackendAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBackend(array $arguments = [])
 * @method \Http\Promise\Promise deleteBackendAsync($arguments = [])
 * @method \Dew\Acs\Result modifyBackend(array $arguments = [])
 * @method \Http\Promise\Promise modifyBackendAsync($arguments = [])
 * @method \Dew\Acs\Result describeBackendList(array $arguments = [])
 * @method \Http\Promise\Promise describeBackendListAsync($arguments = [])
 * @method \Dew\Acs\Result describeBackendInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeBackendInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeUpdateBackendTask(array $arguments = [])
 * @method \Http\Promise\Promise describeUpdateBackendTaskAsync($arguments = [])
 * @method \Dew\Acs\Result createBackendModel(array $arguments = [])
 * @method \Http\Promise\Promise createBackendModelAsync($arguments = [])
 * @method \Dew\Acs\Result deleteBackendModel(array $arguments = [])
 * @method \Http\Promise\Promise deleteBackendModelAsync($arguments = [])
 * @method \Dew\Acs\Result modifyBackendModel(array $arguments = [])
 * @method \Http\Promise\Promise modifyBackendModelAsync($arguments = [])
 * @method \Dew\Acs\Result createSignature(array $arguments = [])
 * @method \Http\Promise\Promise createSignatureAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSignature(array $arguments = [])
 * @method \Http\Promise\Promise deleteSignatureAsync($arguments = [])
 * @method \Dew\Acs\Result modifySignature(array $arguments = [])
 * @method \Http\Promise\Promise modifySignatureAsync($arguments = [])
 * @method \Dew\Acs\Result setSignatureApis(array $arguments = [])
 * @method \Http\Promise\Promise setSignatureApisAsync($arguments = [])
 * @method \Dew\Acs\Result describeSignatures(array $arguments = [])
 * @method \Http\Promise\Promise describeSignaturesAsync($arguments = [])
 * @method \Dew\Acs\Result describeApisBySignature(array $arguments = [])
 * @method \Http\Promise\Promise describeApisBySignatureAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiSignatures(array $arguments = [])
 * @method \Http\Promise\Promise describeApiSignaturesAsync($arguments = [])
 * @method \Dew\Acs\Result describeSignaturesByApi(array $arguments = [])
 * @method \Http\Promise\Promise describeSignaturesByApiAsync($arguments = [])
 * @method \Dew\Acs\Result removeSignatureApis(array $arguments = [])
 * @method \Http\Promise\Promise removeSignatureApisAsync($arguments = [])
 * @method \Dew\Acs\Result addTrafficSpecialControl(array $arguments = [])
 * @method \Http\Promise\Promise addTrafficSpecialControlAsync($arguments = [])
 * @method \Dew\Acs\Result createTrafficControl(array $arguments = [])
 * @method \Http\Promise\Promise createTrafficControlAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAllTrafficSpecialControl(array $arguments = [])
 * @method \Http\Promise\Promise deleteAllTrafficSpecialControlAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTrafficControl(array $arguments = [])
 * @method \Http\Promise\Promise deleteTrafficControlAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTrafficSpecialControl(array $arguments = [])
 * @method \Http\Promise\Promise deleteTrafficSpecialControlAsync($arguments = [])
 * @method \Dew\Acs\Result modifyTrafficControl(array $arguments = [])
 * @method \Http\Promise\Promise modifyTrafficControlAsync($arguments = [])
 * @method \Dew\Acs\Result setTrafficControlApis(array $arguments = [])
 * @method \Http\Promise\Promise setTrafficControlApisAsync($arguments = [])
 * @method \Dew\Acs\Result describeTrafficControls(array $arguments = [])
 * @method \Http\Promise\Promise describeTrafficControlsAsync($arguments = [])
 * @method \Dew\Acs\Result describeTrafficControlsByApi(array $arguments = [])
 * @method \Http\Promise\Promise describeTrafficControlsByApiAsync($arguments = [])
 * @method \Dew\Acs\Result describeApisByTrafficControl(array $arguments = [])
 * @method \Http\Promise\Promise describeApisByTrafficControlAsync($arguments = [])
 * @method \Dew\Acs\Result removeTrafficControlApis(array $arguments = [])
 * @method \Http\Promise\Promise removeTrafficControlApisAsync($arguments = [])
 * @method \Dew\Acs\Result addIpControlPolicyItem(array $arguments = [])
 * @method \Http\Promise\Promise addIpControlPolicyItemAsync($arguments = [])
 * @method \Dew\Acs\Result createIpControl(array $arguments = [])
 * @method \Http\Promise\Promise createIpControlAsync($arguments = [])
 * @method \Dew\Acs\Result deleteIpControl(array $arguments = [])
 * @method \Http\Promise\Promise deleteIpControlAsync($arguments = [])
 * @method \Dew\Acs\Result modifyIpControl(array $arguments = [])
 * @method \Http\Promise\Promise modifyIpControlAsync($arguments = [])
 * @method \Dew\Acs\Result modifyIpControlPolicyItem(array $arguments = [])
 * @method \Http\Promise\Promise modifyIpControlPolicyItemAsync($arguments = [])
 * @method \Dew\Acs\Result setIpControlApis(array $arguments = [])
 * @method \Http\Promise\Promise setIpControlApisAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiIpControls(array $arguments = [])
 * @method \Http\Promise\Promise describeApiIpControlsAsync($arguments = [])
 * @method \Dew\Acs\Result describeIpControlPolicyItems(array $arguments = [])
 * @method \Http\Promise\Promise describeIpControlPolicyItemsAsync($arguments = [])
 * @method \Dew\Acs\Result describeIpControls(array $arguments = [])
 * @method \Http\Promise\Promise describeIpControlsAsync($arguments = [])
 * @method \Dew\Acs\Result describeApisByIpControl(array $arguments = [])
 * @method \Http\Promise\Promise describeApisByIpControlAsync($arguments = [])
 * @method \Dew\Acs\Result removeIpControlApis(array $arguments = [])
 * @method \Http\Promise\Promise removeIpControlApisAsync($arguments = [])
 * @method \Dew\Acs\Result removeIpControlPolicyItem(array $arguments = [])
 * @method \Http\Promise\Promise removeIpControlPolicyItemAsync($arguments = [])
 * @method \Dew\Acs\Result describeApisWithStageNameIntegratedByApp(array $arguments = [])
 * @method \Http\Promise\Promise describeApisWithStageNameIntegratedByAppAsync($arguments = [])
 * @method \Dew\Acs\Result describeGroupLatency(array $arguments = [])
 * @method \Http\Promise\Promise describeGroupLatencyAsync($arguments = [])
 * @method \Dew\Acs\Result describeGroupTraffic(array $arguments = [])
 * @method \Http\Promise\Promise describeGroupTrafficAsync($arguments = [])
 * @method \Dew\Acs\Result modifyApiGroupInstance(array $arguments = [])
 * @method \Http\Promise\Promise modifyApiGroupInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result modifyApiGroupNetworkPolicy(array $arguments = [])
 * @method \Http\Promise\Promise modifyApiGroupNetworkPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result detachApiProduct(array $arguments = [])
 * @method \Http\Promise\Promise detachApiProductAsync($arguments = [])
 * @method \Dew\Acs\Result setApiProductsAuthorities(array $arguments = [])
 * @method \Http\Promise\Promise setApiProductsAuthoritiesAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiProductsByApp(array $arguments = [])
 * @method \Http\Promise\Promise describeApiProductsByAppAsync($arguments = [])
 * @method \Dew\Acs\Result describeApiProductApis(array $arguments = [])
 * @method \Http\Promise\Promise describeApiProductApisAsync($arguments = [])
 * @method \Dew\Acs\Result describeAppsByApiProduct(array $arguments = [])
 * @method \Http\Promise\Promise describeAppsByApiProductAsync($arguments = [])
 * @method \Dew\Acs\Result attachApiProduct(array $arguments = [])
 * @method \Http\Promise\Promise attachApiProductAsync($arguments = [])
 * @method \Dew\Acs\Result deleteApiProduct(array $arguments = [])
 * @method \Http\Promise\Promise deleteApiProductAsync($arguments = [])
 * @method \Dew\Acs\Result removeApiProductsAuthorities(array $arguments = [])
 * @method \Http\Promise\Promise removeApiProductsAuthoritiesAsync($arguments = [])
 * @method \Dew\Acs\Result setAppsAuthToApiProduct(array $arguments = [])
 * @method \Http\Promise\Promise setAppsAuthToApiProductAsync($arguments = [])
 * @method \Dew\Acs\Result describeApisByVpcAccess(array $arguments = [])
 * @method \Http\Promise\Promise describeApisByVpcAccessAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAppCode(array $arguments = [])
 * @method \Http\Promise\Promise deleteAppCodeAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAppKey(array $arguments = [])
 * @method \Http\Promise\Promise deleteAppKeyAsync($arguments = [])
 * @method \Dew\Acs\Result createAppCode(array $arguments = [])
 * @method \Http\Promise\Promise createAppCodeAsync($arguments = [])
 * @method \Dew\Acs\Result createAppKey(array $arguments = [])
 * @method \Http\Promise\Promise createAppKeyAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceClusterInfo(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceClusterInfoAsync($arguments = [])
 * @method \Dew\Acs\Result describeInstanceClusterList(array $arguments = [])
 * @method \Http\Promise\Promise describeInstanceClusterListAsync($arguments = [])
 * @method \Dew\Acs\Result describeAppSecurities(array $arguments = [])
 * @method \Http\Promise\Promise describeAppSecuritiesAsync($arguments = [])
 * @method \Dew\Acs\Result exportOAS(array $arguments = [])
 * @method \Http\Promise\Promise exportOASAsync($arguments = [])
 */
final class CloudAPIClient extends AcsClient
{
    //
}
