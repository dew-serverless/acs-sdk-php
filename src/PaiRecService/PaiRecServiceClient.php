<?php

declare(strict_types=1);

namespace Dew\Acs\PaiRecService;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result deleteEngineConfig(array $arguments = [])
 * @method \Http\Promise\Promise deleteEngineConfigAsync($arguments = [])
 * @method \Dew\Acs\Result updateEngineConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateEngineConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listEngineConfigs(array $arguments = [])
 * @method \Http\Promise\Promise listEngineConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result getEngineConfig(array $arguments = [])
 * @method \Http\Promise\Promise getEngineConfigAsync($arguments = [])
 * @method \Dew\Acs\Result createEngineConfig(array $arguments = [])
 * @method \Http\Promise\Promise createEngineConfigAsync($arguments = [])
 * @method \Dew\Acs\Result cloneEngineConfig(array $arguments = [])
 * @method \Http\Promise\Promise cloneEngineConfigAsync($arguments = [])
 * @method \Dew\Acs\Result applyEngineConfig(array $arguments = [])
 * @method \Http\Promise\Promise applyEngineConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listInstances(array $arguments = [])
 * @method \Http\Promise\Promise listInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result getInstance(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result checkInstanceResources(array $arguments = [])
 * @method \Http\Promise\Promise checkInstanceResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result updateInstanceResource(array $arguments = [])
 * @method \Http\Promise\Promise updateInstanceResourceAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceResourceTable(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceResourceTableAsync($arguments = [])
 * @method \Dew\Acs\Result listInstanceResources(array $arguments = [])
 * @method \Http\Promise\Promise listInstanceResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result getInstanceResource(array $arguments = [])
 * @method \Http\Promise\Promise getInstanceResourceAsync($arguments = [])
 * @method \Dew\Acs\Result deleteInstanceResource(array $arguments = [])
 * @method \Http\Promise\Promise deleteInstanceResourceAsync($arguments = [])
 * @method \Dew\Acs\Result createInstanceResource(array $arguments = [])
 * @method \Http\Promise\Promise createInstanceResourceAsync($arguments = [])
 * @method \Dew\Acs\Result updateTableMeta(array $arguments = [])
 * @method \Http\Promise\Promise updateTableMetaAsync($arguments = [])
 * @method \Dew\Acs\Result listTableMetas(array $arguments = [])
 * @method \Http\Promise\Promise listTableMetasAsync($arguments = [])
 * @method \Dew\Acs\Result getTableMeta(array $arguments = [])
 * @method \Http\Promise\Promise getTableMetaAsync($arguments = [])
 * @method \Dew\Acs\Result deleteTableMeta(array $arguments = [])
 * @method \Http\Promise\Promise deleteTableMetaAsync($arguments = [])
 * @method \Dew\Acs\Result createTableMeta(array $arguments = [])
 * @method \Http\Promise\Promise createTableMetaAsync($arguments = [])
 * @method \Dew\Acs\Result createScene(array $arguments = [])
 * @method \Http\Promise\Promise createSceneAsync($arguments = [])
 * @method \Dew\Acs\Result deleteScene(array $arguments = [])
 * @method \Http\Promise\Promise deleteSceneAsync($arguments = [])
 * @method \Dew\Acs\Result updateScene(array $arguments = [])
 * @method \Http\Promise\Promise updateSceneAsync($arguments = [])
 * @method \Dew\Acs\Result listScenes(array $arguments = [])
 * @method \Http\Promise\Promise listScenesAsync($arguments = [])
 * @method \Dew\Acs\Result getScene(array $arguments = [])
 * @method \Http\Promise\Promise getSceneAsync($arguments = [])
 * @method \Dew\Acs\Result createParam(array $arguments = [])
 * @method \Http\Promise\Promise createParamAsync($arguments = [])
 * @method \Dew\Acs\Result deleteParam(array $arguments = [])
 * @method \Http\Promise\Promise deleteParamAsync($arguments = [])
 * @method \Dew\Acs\Result updateParam(array $arguments = [])
 * @method \Http\Promise\Promise updateParamAsync($arguments = [])
 * @method \Dew\Acs\Result listParams(array $arguments = [])
 * @method \Http\Promise\Promise listParamsAsync($arguments = [])
 * @method \Dew\Acs\Result createCrowd(array $arguments = [])
 * @method \Http\Promise\Promise createCrowdAsync($arguments = [])
 * @method \Dew\Acs\Result createSubCrowd(array $arguments = [])
 * @method \Http\Promise\Promise createSubCrowdAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCrowd(array $arguments = [])
 * @method \Http\Promise\Promise deleteCrowdAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSubCrowd(array $arguments = [])
 * @method \Http\Promise\Promise deleteSubCrowdAsync($arguments = [])
 * @method \Dew\Acs\Result updateCrowd(array $arguments = [])
 * @method \Http\Promise\Promise updateCrowdAsync($arguments = [])
 * @method \Dew\Acs\Result listCrowds(array $arguments = [])
 * @method \Http\Promise\Promise listCrowdsAsync($arguments = [])
 * @method \Dew\Acs\Result listCrowdUsers(array $arguments = [])
 * @method \Http\Promise\Promise listCrowdUsersAsync($arguments = [])
 * @method \Dew\Acs\Result listSubCrowds(array $arguments = [])
 * @method \Http\Promise\Promise listSubCrowdsAsync($arguments = [])
 * @method \Dew\Acs\Result getSubCrowd(array $arguments = [])
 * @method \Http\Promise\Promise getSubCrowdAsync($arguments = [])
 * @method \Dew\Acs\Result createLaboratory(array $arguments = [])
 * @method \Http\Promise\Promise createLaboratoryAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLaboratory(array $arguments = [])
 * @method \Http\Promise\Promise deleteLaboratoryAsync($arguments = [])
 * @method \Dew\Acs\Result updateLaboratory(array $arguments = [])
 * @method \Http\Promise\Promise updateLaboratoryAsync($arguments = [])
 * @method \Dew\Acs\Result listLaboratories(array $arguments = [])
 * @method \Http\Promise\Promise listLaboratoriesAsync($arguments = [])
 * @method \Dew\Acs\Result getLaboratory(array $arguments = [])
 * @method \Http\Promise\Promise getLaboratoryAsync($arguments = [])
 * @method \Dew\Acs\Result onlineLaboratory(array $arguments = [])
 * @method \Http\Promise\Promise onlineLaboratoryAsync($arguments = [])
 * @method \Dew\Acs\Result offlineLaboratory(array $arguments = [])
 * @method \Http\Promise\Promise offlineLaboratoryAsync($arguments = [])
 * @method \Dew\Acs\Result cloneLaboratory(array $arguments = [])
 * @method \Http\Promise\Promise cloneLaboratoryAsync($arguments = [])
 * @method \Dew\Acs\Result createLayer(array $arguments = [])
 * @method \Http\Promise\Promise createLayerAsync($arguments = [])
 * @method \Dew\Acs\Result deleteLayer(array $arguments = [])
 * @method \Http\Promise\Promise deleteLayerAsync($arguments = [])
 * @method \Dew\Acs\Result updateLayer(array $arguments = [])
 * @method \Http\Promise\Promise updateLayerAsync($arguments = [])
 * @method \Dew\Acs\Result listLayers(array $arguments = [])
 * @method \Http\Promise\Promise listLayersAsync($arguments = [])
 * @method \Dew\Acs\Result getLayer(array $arguments = [])
 * @method \Http\Promise\Promise getLayerAsync($arguments = [])
 * @method \Dew\Acs\Result createExperimentGroup(array $arguments = [])
 * @method \Http\Promise\Promise createExperimentGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteExperimentGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteExperimentGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateExperimentGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateExperimentGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listExperimentGroups(array $arguments = [])
 * @method \Http\Promise\Promise listExperimentGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result getExperimentGroup(array $arguments = [])
 * @method \Http\Promise\Promise getExperimentGroupAsync($arguments = [])
 * @method \Dew\Acs\Result cloneExperimentGroup(array $arguments = [])
 * @method \Http\Promise\Promise cloneExperimentGroupAsync($arguments = [])
 * @method \Dew\Acs\Result onlineExperimentGroup(array $arguments = [])
 * @method \Http\Promise\Promise onlineExperimentGroupAsync($arguments = [])
 * @method \Dew\Acs\Result offlineExperimentGroup(array $arguments = [])
 * @method \Http\Promise\Promise offlineExperimentGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createExperiment(array $arguments = [])
 * @method \Http\Promise\Promise createExperimentAsync($arguments = [])
 * @method \Dew\Acs\Result deleteExperiment(array $arguments = [])
 * @method \Http\Promise\Promise deleteExperimentAsync($arguments = [])
 * @method \Dew\Acs\Result updateExperiment(array $arguments = [])
 * @method \Http\Promise\Promise updateExperimentAsync($arguments = [])
 * @method \Dew\Acs\Result getExperiment(array $arguments = [])
 * @method \Http\Promise\Promise getExperimentAsync($arguments = [])
 * @method \Dew\Acs\Result listExperiments(array $arguments = [])
 * @method \Http\Promise\Promise listExperimentsAsync($arguments = [])
 * @method \Dew\Acs\Result cloneExperiment(array $arguments = [])
 * @method \Http\Promise\Promise cloneExperimentAsync($arguments = [])
 * @method \Dew\Acs\Result offlineExperiment(array $arguments = [])
 * @method \Http\Promise\Promise offlineExperimentAsync($arguments = [])
 * @method \Dew\Acs\Result pushAllExperiment(array $arguments = [])
 * @method \Http\Promise\Promise pushAllExperimentAsync($arguments = [])
 * @method \Dew\Acs\Result onlineExperiment(array $arguments = [])
 * @method \Http\Promise\Promise onlineExperimentAsync($arguments = [])
 * @method \Dew\Acs\Result updateABMetric(array $arguments = [])
 * @method \Http\Promise\Promise updateABMetricAsync($arguments = [])
 * @method \Dew\Acs\Result createABMetric(array $arguments = [])
 * @method \Http\Promise\Promise createABMetricAsync($arguments = [])
 * @method \Dew\Acs\Result listABMetrics(array $arguments = [])
 * @method \Http\Promise\Promise listABMetricsAsync($arguments = [])
 * @method \Dew\Acs\Result getABMetric(array $arguments = [])
 * @method \Http\Promise\Promise getABMetricAsync($arguments = [])
 * @method \Dew\Acs\Result deleteABMetric(array $arguments = [])
 * @method \Http\Promise\Promise deleteABMetricAsync($arguments = [])
 * @method \Dew\Acs\Result reportABMetricGroup(array $arguments = [])
 * @method \Http\Promise\Promise reportABMetricGroupAsync($arguments = [])
 * @method \Dew\Acs\Result updateABMetricGroup(array $arguments = [])
 * @method \Http\Promise\Promise updateABMetricGroupAsync($arguments = [])
 * @method \Dew\Acs\Result createABMetricGroup(array $arguments = [])
 * @method \Http\Promise\Promise createABMetricGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listABMetricGroups(array $arguments = [])
 * @method \Http\Promise\Promise listABMetricGroupsAsync($arguments = [])
 * @method \Dew\Acs\Result getABMetricGroup(array $arguments = [])
 * @method \Http\Promise\Promise getABMetricGroupAsync($arguments = [])
 * @method \Dew\Acs\Result deleteABMetricGroup(array $arguments = [])
 * @method \Http\Promise\Promise deleteABMetricGroupAsync($arguments = [])
 * @method \Dew\Acs\Result listCalculationJobs(array $arguments = [])
 * @method \Http\Promise\Promise listCalculationJobsAsync($arguments = [])
 * @method \Dew\Acs\Result getCalculationJob(array $arguments = [])
 * @method \Http\Promise\Promise getCalculationJobAsync($arguments = [])
 * @method \Dew\Acs\Result createCalculationJobs(array $arguments = [])
 * @method \Http\Promise\Promise createCalculationJobsAsync($arguments = [])
 * @method \Dew\Acs\Result createFeatureConsistencyCheckJobConfig(array $arguments = [])
 * @method \Http\Promise\Promise createFeatureConsistencyCheckJobConfigAsync($arguments = [])
 * @method \Dew\Acs\Result createFeatureConsistencyCheckJob(array $arguments = [])
 * @method \Http\Promise\Promise createFeatureConsistencyCheckJobAsync($arguments = [])
 * @method \Dew\Acs\Result updateFeatureConsistencyCheckJobConfig(array $arguments = [])
 * @method \Http\Promise\Promise updateFeatureConsistencyCheckJobConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listFeatureConsistencyCheckJobConfigs(array $arguments = [])
 * @method \Http\Promise\Promise listFeatureConsistencyCheckJobConfigsAsync($arguments = [])
 * @method \Dew\Acs\Result getFeatureConsistencyCheckJobConfig(array $arguments = [])
 * @method \Http\Promise\Promise getFeatureConsistencyCheckJobConfigAsync($arguments = [])
 * @method \Dew\Acs\Result listFeatureConsistencyCheckJobs(array $arguments = [])
 * @method \Http\Promise\Promise listFeatureConsistencyCheckJobsAsync($arguments = [])
 * @method \Dew\Acs\Result getFeatureConsistencyCheckJob(array $arguments = [])
 * @method \Http\Promise\Promise getFeatureConsistencyCheckJobAsync($arguments = [])
 * @method \Dew\Acs\Result listFeatureConsistencyCheckJobFeatureReports(array $arguments = [])
 * @method \Http\Promise\Promise listFeatureConsistencyCheckJobFeatureReportsAsync($arguments = [])
 * @method \Dew\Acs\Result listFeatureConsistencyCheckJobScoreReports(array $arguments = [])
 * @method \Http\Promise\Promise listFeatureConsistencyCheckJobScoreReportsAsync($arguments = [])
 * @method \Dew\Acs\Result cloneFeatureConsistencyCheckJobConfig(array $arguments = [])
 * @method \Http\Promise\Promise cloneFeatureConsistencyCheckJobConfigAsync($arguments = [])
 * @method \Dew\Acs\Result terminateFeatureConsistencyCheckJob(array $arguments = [])
 * @method \Http\Promise\Promise terminateFeatureConsistencyCheckJobAsync($arguments = [])
 * @method \Dew\Acs\Result backflowFeatureConsistencyCheckJobData(array $arguments = [])
 * @method \Http\Promise\Promise backflowFeatureConsistencyCheckJobDataAsync($arguments = [])
 * @method \Dew\Acs\Result syncFeatureConsistencyCheckJobReplayLog(array $arguments = [])
 * @method \Http\Promise\Promise syncFeatureConsistencyCheckJobReplayLogAsync($arguments = [])
 */
final class PaiRecServiceClient extends AcsClient
{
    //
}
