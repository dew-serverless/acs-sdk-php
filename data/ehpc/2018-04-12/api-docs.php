<?php return array (
  'version' => '1.0',
  'info' => 
  array (
    'style' => 'RPC',
    'product' => 'EHPC',
    'version' => '2018-04-12',
  ),
  'directories' => 
  array (
    0 => 
    array (
      'id' => 181976,
      'title' => '集群',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'DescribePrice',
        1 => 'CreateCluster',
        2 => 'DescribeCluster',
        3 => 'ModifyClusterAttributes',
        4 => 'ListClusters',
        5 => 'ListClustersMeta',
        6 => 'StartCluster',
        7 => 'StopCluster',
        8 => 'RecoverCluster',
        9 => 'DeleteCluster',
      ),
    ),
    1 => 
    array (
      'id' => 181434,
      'title' => '混合云集群',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateHybridCluster',
        1 => 'AddLocalNodes',
        2 => 'GetHybridClusterConfig',
        3 => 'SyncUsers',
      ),
    ),
    2 => 
    array (
      'id' => 181509,
      'title' => 'ECS实例',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'ListPreferredEcsTypes',
        1 => 'ListAvailableEcsTypes',
        2 => 'GetIfEcsTypeSupportHtConfig',
      ),
    ),
    3 => 
    array (
      'id' => 62742,
      'title' => '镜像',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'ListImages',
        1 => 'DescribeEstackImage',
        2 => 'ListCustomImages',
        3 => 'ListCommunityImages',
        4 => 'DescribeImagePrice',
      ),
    ),
    4 => 
    array (
      'id' => 62758,
      'title' => '用户',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'AddUsers',
        1 => 'ListUsers',
        2 => 'ListUsersAsync',
        3 => 'ModifyUserGroups',
        4 => 'ModifyUserPasswords',
        5 => 'DeleteUsers',
      ),
    ),
    5 => 
    array (
      'id' => 62714,
      'title' => '节点',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'AddNodes',
        1 => 'ApplyNodes',
        2 => 'AddExistedNodes',
        3 => 'ListNodes',
        4 => 'ListNodesNoPaging',
        5 => 'StartNodes',
        6 => 'StopNodes',
        7 => 'ResetNodes',
        8 => 'DeleteNodes',
      ),
    ),
    6 => 
    array (
      'id' => 181435,
      'title' => '队列',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'AddQueue',
        1 => 'ListQueues',
        2 => 'UpdateQueueConfig',
        3 => 'ListNodesByQueue',
        4 => 'SetQueue',
        5 => 'DeleteQueue',
      ),
    ),
    7 => 
    array (
      'id' => 181510,
      'title' => '调度器',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'SetSchedulerInfo',
        1 => 'GetSchedulerInfo',
      ),
    ),
    8 => 
    array (
      'id' => 181437,
      'title' => '软件',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'ListSoftwares',
        1 => 'InstallSoftware',
        2 => 'ListInstalledSoftware',
        3 => 'UninstallSoftware',
      ),
    ),
    9 => 
    array (
      'id' => 62709,
      'title' => '存储',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'ListFileSystemWithMountTargets',
        1 => 'ListCpfsFileSystems',
        2 => 'GetClusterVolumes',
        3 => 'ListVolumes',
        4 => 'UpdateClusterVolumes',
      ),
    ),
    10 => 
    array (
      'id' => 62693,
      'title' => '作业',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'SubmitJob',
        1 => 'CreateJobFile',
        2 => 'ListJobs',
        3 => 'DescribeJob',
        4 => 'ListJobsWithFilters',
        5 => 'RerunJobs',
        6 => 'StopJobs',
        7 => 'GetJobLog',
        8 => 'DeleteJobs',
      ),
    ),
    11 => 
    array (
      'id' => 190861,
      'title' => 'Serverless作业',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'SubmitServerlessJob',
        1 => 'ListServerlessJobs',
        2 => 'DescribeServerlessJobs',
        3 => 'StopServerlessJobs',
      ),
    ),
    12 => 
    array (
      'id' => 62769,
      'title' => '作业模板',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateJobTemplate',
        1 => 'ListJobTemplates',
        2 => 'EditJobTemplate',
        3 => 'DeleteJobTemplates',
      ),
    ),
    13 => 
    array (
      'id' => 62737,
      'title' => '交互命令',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'InvokeShellCommand',
        1 => 'ListCommands',
        2 => 'ListInvocationResults',
        3 => 'ListInvocationStatus',
      ),
    ),
    14 => 
    array (
      'id' => 181511,
      'title' => '后处理脚本',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'SetPostScripts',
        1 => 'GetPostScripts',
      ),
    ),
    15 => 
    array (
      'id' => 62731,
      'title' => 'VNC',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetVisualServiceStatus',
        1 => 'ModifyVisualServicePasswd',
        2 => 'StartVisualService',
        3 => 'StopVisualService',
      ),
    ),
    16 => 
    array (
      'id' => 62705,
      'title' => '自动伸缩',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'SetAutoScaleConfig',
        1 => 'DescribeAutoScaleConfig',
        2 => 'GetAutoScaleConfig',
      ),
    ),
    17 => 
    array (
      'id' => 181439,
      'title' => '性能管理',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'RunCloudMetricProfiling',
        1 => 'GetCloudMetricProfiling',
        2 => 'ListCloudMetricProfilings',
        3 => 'GetCloudMetricLogs',
      ),
    ),
    18 => 
    array (
      'id' => 62772,
      'title' => '报表',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'GetAccountingReport',
      ),
    ),
    19 => 
    array (
      'id' => 62728,
      'title' => '操作日志',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'ListClusterLogs',
      ),
    ),
    20 => 
    array (
      'id' => 181438,
      'title' => '集群客户端',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'ListCurrentClientVersion',
        1 => 'UpgradeClient',
        2 => 'ListUpgradeClients',
      ),
    ),
    21 => 
    array (
      'id' => 62726,
      'title' => '服务包',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'QueryServicePackAndPrice',
      ),
    ),
    22 => 
    array (
      'id' => 62754,
      'title' => '安全组',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'AddSecurityGroup',
        1 => 'ListSecurityGroups',
        2 => 'DeleteSecurityGroup',
      ),
    ),
    23 => 
    array (
      'id' => 181515,
      'title' => '标签',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'TagResources',
        1 => 'ListTagResources',
        2 => 'UnTagResources',
      ),
    ),
    24 => 
    array (
      'id' => 62673,
      'title' => '地域',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'ListRegions',
      ),
    ),
    25 => 
    array (
      'id' => 181436,
      'title' => '高性能容器应用',
      'type' => 'directory',
      'children' => 
      array (
        0 => 
        array (
          'id' => 181512,
          'title' => '容器镜像',
          'type' => 'directory',
          'children' => 
          array (
            0 => 'GetCommonImage',
            1 => 'GetUserImage',
            2 => 'SummaryImages',
            3 => 'SummaryImagesInfo',
            4 => 'DescribeImageGatewayConfig',
            5 => 'ModifyImageGatewayConfig',
            6 => 'PullImage',
            7 => 'InspectImage',
            8 => 'ListContainerImages',
            9 => 'DescribeImage',
            10 => 'DeleteLocalImage',
            11 => 'DeleteImage',
          ),
        ),
        1 => 
        array (
          'id' => 181513,
          'title' => '容器应用',
          'type' => 'directory',
          'children' => 
          array (
            0 => 'DeleteContainerApps',
            1 => 'DescribeContainerApp',
            2 => 'ListContainerApps',
            3 => 'ModifyContainerAppAttributes',
            4 => 'AddContainerApp',
          ),
        ),
      ),
    ),
    26 => 
    array (
      'id' => 181440,
      'title' => '其他',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'ListTasks',
        1 => 'InitializeEHPC',
      ),
    ),
    27 => 
    array (
      'id' => 62675,
      'title' => '可视化实例',
      'type' => 'directory',
      'children' => 
      array (
        0 => 'CreateGWSImage',
        1 => 'DeleteGWSCluster',
        2 => 'DescribeGWSImages',
        3 => 'DescribeGWSClusters',
        4 => 'DescribeGWSClusterPolicy',
        5 => 'CreateGWSCluster',
        6 => 'CreateGWSInstance',
        7 => 'DescribeGWSInstances',
        8 => 'DeleteGWSInstance',
        9 => 'SetGWSInstanceUser',
        10 => 'SetGWSInstanceName',
        11 => 'StartGWSInstance',
        12 => 'StopGWSInstance',
        13 => 'MountNFS',
        14 => 'DescribeNFSClientStatus',
        15 => 'SetGWSClusterPolicy',
        16 => 'GetGWSConnectTicket',
      ),
    ),
  ),
  'components' => 
  array (
    'schemas' => 
    array (
    ),
  ),
  'apis' => 
  array (
    'DescribePrice' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
        'abilityTreeCode' => '75816',
        'abilityTreeNodes' => 
        array (
          0 => 'FEATUREehpcOQU2XV',
        ),
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PriceUnit',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'ECS实例的计费周期单位。仅当ChargeType=PrePaid时该参数有效。取值范围：

<props="china">
- Month：按月计费
- Year：按年计费
- Hour：按小时计费
- Week：按周计费

</props>


<props="intl">
- Month：按月计费
- Year：按年计费
- Hour：按小时计费

</props>

默认值：Hour
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'Hour',
          ),
        ),
        1 => 
        array (
          'name' => 'ChargeType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群节点ECS实例的计费方式。取值范围：
- PostPaid：按量付费
- PrePaid：包年包月

默认值：PostPaid',
            'type' => 'string',
            'required' => false,
            'example' => 'PostPaid',
          ),
        ),
        2 => 
        array (
          'name' => 'OrderType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '订单类型，仅支持设置为商品购买。取值：INSTANCE-BUY',
            'type' => 'string',
            'required' => false,
            'example' => 'INSTANCE-BUY',
          ),
        ),
        3 => 
        array (
          'name' => 'Commodities',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '商品列表。',
            'type' => 'array',
            'items' => 
            array (
              'type' => 'object',
              'properties' => 
              array (
                'Amount' => 
                array (
                  'description' => '第N个该类型节点的数量。取值范围：1~1000

默认值：1

N的取值范围：1~10',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => true,
                  'example' => '2',
                ),
                'SystemDiskSize' => 
                array (
                  'description' => '第N个该节点的系统盘大小。单位：GB

取值范围：40~500

默认值：40

N的取值范围：1~10',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '40',
                ),
                'SystemDiskPerformanceLevel' => 
                array (
                  'description' => '第N个该节点的系统盘类型为ESSD云盘时，区分性能等级。仅当Commodities.N.SystemDiskCategory=cloud_essd时该参数有效。取值范围：
- PL0：单盘最高随机读写IOPS 1万
- PL1：单盘最高随机读写IOPS 5万
- PL2：单盘最高随机读写IOPS 10万
- PL3：单盘最高随机读写IOPS 100万

默认值：PL1

N的取值范围：1~10',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'PL1',
                ),
                'NodeType' => 
                array (
                  'description' => '第N个节点类型。取值范围：
- Compute：计算节点
- Manager：管控节点
- Login：登录节点

N的取值范围：1~10',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'Compute',
                ),
                'SystemDiskCategory' => 
                array (
                  'description' => '第N个该节点的系统盘类型。可能值：
- cloud_efficiency：高效云盘
- cloud_ssd：SSD云盘
- cloud_essd：ESSD云盘
- cloud：普通云盘

默认值：cloud_efficiency

N的取值范围：1~10',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'cloud_ssd',
                ),
                'InternetChargeType' => 
                array (
                  'description' => '第N个该节点的公网付费方式。取值范围：

- PayByBandwidth：按固定带宽收费
- PayByTraffic：按流量计费

N的取值范围：1~10',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'PayByBandwidth',
                ),
                'NetworkType' => 
                array (
                  'description' => '第N个该节点的网络类型，仅支持设置为专有网络VPC。取值：VPC

N的取值范围：1~10',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'VPC',
                ),
                'InstanceType' => 
                array (
                  'description' => '第N个该节点的ECS实例规格。

N的取值范围：1~10',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'ecs.n1.tiny',
                ),
                'Period' => 
                array (
                  'description' => '第N个该节点的ECS实例的计费时长。取值范围：

<props="china">
- 当参数PriceUnit取值为Year时：1~3
- 当参数PriceUnit取值为Month时：1~9
- 当参数PriceUnit取值为Hour时：1
- 当参数PriceUnit取值为Week时：1~4

</props>


<props="intl">
- 当参数PriceUnit取值为Year时：1~3
- 当参数PriceUnit取值为Month时：1~9
- 当参数PriceUnit取值为Hour时：1

</props>


默认值：1

N的取值范围：1~10




',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => true,
                  'example' => '1',
                ),
                'InternetMaxBandWidthOut' => 
                array (
                  'description' => '第N个该节点公网出带宽最大值。单位为Mbit/s。

取值范围：0~100

默认值：0

N的取值范围：1~10',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '100',
                ),
                'DataDisks' => 
                array (
                  'description' => '随节点创建的数据盘信息列表。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'size' => 
                      array (
                        'description' => '第N个随节点创建的数据盘容量大小。单位：GB

取值范围：40~500

默认值：40

N的取值范围：0~4',
                        'type' => 'integer',
                        'format' => 'int32',
                        'required' => false,
                        'example' => '40',
                      ),
                      'category' => 
                      array (
                        'description' => '第N个随节点创建的数据盘类型。可能值：

- cloud_efficiency：高效云盘

- cloud_ssd：SSD云盘

- cloud_essd：ESSD云盘

- cloud：普通云盘

默认值：cloud_efficiency

N的取值范围：0~4',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'cloud_efficiency',
                      ),
                      'deleteWithInstance' => 
                      array (
                        'description' => '第N个随节点创建的数据盘是否随实例释放。取值范围：

- true：是

- false：否

默认值：true

N的取值范围：0~4',
                        'type' => 'boolean',
                        'required' => false,
                        'example' => 'true',
                      ),
                      'performanceLevel' => 
                      array (
                        'description' => '第N个随节点创建的数据盘类型为ESSD云盘时，区分性能等级。仅当Commodities.N.DataDisks.N.category=cloud_essd时该参数有效。取值范围：
- PL0：单盘最高随机读写IOPS 1万
- PL1：单盘最高随机读写IOPS 5万
- PL2：单盘最高随机读写IOPS 10万
- PL3：单盘最高随机读写IOPS 100万

默认值：PL1

N的取值范围：0~4',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'PL1',
                      ),
                      'encrypted' => 
                      array (
                        'description' => '第N个随节点创建的数据盘是否加密。取值范围：

- true：是

- false：否

默认值：false

N的取值范围：0~4',
                        'type' => 'boolean',
                        'required' => false,
                        'example' => 'false',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                  'maxItems' => 4,
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 2500,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TotalTradePrice' => 
              array (
                'description' => '总价格。

<props="china">单位：元</props>

<props="intl">单位：美元</props>',
                'type' => 'number',
                'format' => 'float',
                'example' => '1258',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '54FF9025-2C2F-42EB-870D-0DF5B0ACF24E',
              ),
              'Prices' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'PriceInfo' => 
                  array (
                    'description' => '集群价格列表。当请求参数查询集群的多个节点配置价格时，返回值PriceInfo内多个元素的顺序与请求参数设置的多个节点信息的顺序依次对应。例如，请求参数中N=1的节点信息，对应的返回值为PriceInfo内的第一个元素。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'OriginalPrice' => 
                        array (
                          'description' => '原价。

<props="china">单位：元</props>

<props="intl">单位：美元</props>',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '1258',
                        ),
                        'NodeType' => 
                        array (
                          'description' => '节点类型。可能值：
- Manager：管控节点
- Login：登录节点
- Compute：计算节点',
                          'type' => 'string',
                          'example' => 'Compute',
                        ),
                        'Currency' => 
                        array (
                          'description' => '货币单位。可能值：

<props="china">CNY：人民币</props>

<props="intl">USD：美元</props>',
                          'type' => 'string',
                          'example' => '<props="china">CNY</props>

<props="intl">USD</props>',
                        ),
                        'TradePrice' => 
                        array (
                          'description' => '成交价。

<props="china">单位：元</props>

<props="intl">单位：美元</props>',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '1258',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
          1 => 
          array (
            'errorCode' => 'EntityNotExist.Role',
            'errorMessage' => 'The role does not exist.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TotalTradePrice\\": 1258,\\n  \\"RequestId\\": \\"54FF9025-2C2F-42EB-870D-0DF5B0ACF24E\\",\\n  \\"Prices\\": {\\n    \\"PriceInfo\\": [\\n      {\\n        \\"OriginalPrice\\": 1258,\\n        \\"NodeType\\": \\"Compute\\",\\n        \\"Currency\\": \\"<props=\\\\\\"china\\\\\\">CNY</props>\\\\n\\\\n<props=\\\\\\"intl\\\\\\">USD</props>\\",\\n        \\"TradePrice\\": 1258\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribePriceResponse>\\n    <Prices>\\n        <PriceInfo>\\n            <OriginalPrice>1258</OriginalPrice>\\n            <TradePrice>1258</TradePrice>\\n            <Currency>CNY</Currency>\\n            <NodeType>Compute</NodeType>\\n        </PriceInfo>\\n    </Prices>\\n    <TotalTradePrice>1258</TotalTradePrice>\\n    <RequestId>54FF9025-2C2F-42EB-870D-0DF5B0ACF24E</RequestId>\\n</DescribePriceResponse>   ","errorExample":""}]',
      'title' => '查询集群配置价格',
      'summary' => '调用DescribePrice查询集群价格配置信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateCluster' => 
    array (
      'summary' => '创建一个按量付费或者预付费（包年包月）集群。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ZoneId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可用区ID。

您可以调用[ListRegions](~~188593~~)和[DescribeZones](~~25610~~)接口获取可以使用E-HPC的可用区ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-hangzhou-b',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群名称，长度为2~64个字符。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'test',
          ),
        ),
        2 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群描述信息。长度为2~256个英文或中文字符，不能以`http://`和`https://`开头。',
            'type' => 'string',
            'required' => false,
            'example' => 'TestDescription',
          ),
        ),
        3 => 
        array (
          'name' => 'EhpcVersion',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'E-HPC产品版本，默认为最新版本。',
            'type' => 'string',
            'required' => false,
            'example' => '1.0.0',
          ),
        ),
        4 => 
        array (
          'name' => 'ClientVersion',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群客户端版本，默认为最新版本。

您可以调用[ListCurrentClientVersion](~~87223~~)查询当前最新客户端版本号。',
            'type' => 'string',
            'required' => false,
            'example' => '1.0.64',
          ),
        ),
        5 => 
        array (
          'name' => 'OsTag',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '操作系统镜像标签。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'CentOS_7.2_64',
          ),
        ),
        6 => 
        array (
          'name' => 'AccountType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '域账号服务类型。取值范围：
- nis
- ldap

默认值：nis。',
            'type' => 'string',
            'required' => false,
            'example' => 'nis',
            'default' => 'nis',
          ),
        ),
        7 => 
        array (
          'name' => 'Domain',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '本地集群域名。

仅当AccoutType取值为Idap时，支持配置该参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'ldap',
          ),
        ),
        8 => 
        array (
          'name' => 'SchedulerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '调度器类型。取值范围：
- pbs
- slurm
- opengridscheduler
- deadline

默认值：pbs。',
            'type' => 'string',
            'required' => false,
            'example' => 'pbs',
            'default' => 'pbs',
          ),
        ),
        9 => 
        array (
          'name' => 'SecurityGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定新创建集群所属的安全组ID。

您可以调用[DescribeSecurityGroups](~~25556~~)查询当前地域可以使用的安全组。',
            'type' => 'string',
            'required' => false,
            'example' => 'sg-bp13n61xsydodfyg****',
          ),
        ),
        10 => 
        array (
          'name' => 'SecurityGroupName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '如果不使用已有安全组，则使用此名称创建新安全组，应用默认安全组策略。',
            'type' => 'string',
            'required' => false,
            'example' => 'ehpc-SecurityGroup',
          ),
        ),
        11 => 
        array (
          'name' => 'VpcId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群所属的VPC ID。

您可以调用[DescribeVpcs](~~35739~~)查询已创建的VPC信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'vpc-b3f3edefefeep0760yju****',
          ),
        ),
        12 => 
        array (
          'name' => 'VSwitchId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'VPC中交换机ID。E-HPC当前仅支持VPC网络。

您可以调用[DescribeVSwitches](~~35748~~)查询已创建的交换机的相关信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'vsw-bp1lfcjbfb099rrjn****',
          ),
        ),
        13 => 
        array (
          'name' => 'VolumeType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '共享存储类型，目前仅支持配置为`nas`，表示NAS文件系统。',
            'type' => 'string',
            'required' => false,
            'example' => 'nas',
            'default' => 'nas',
          ),
        ),
        14 => 
        array (
          'name' => 'VolumeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '阿里云NAS实例ID。如果该参数为空，创建集群的流程会默认创建一个性能型的NAS实例。

您可以调用[ListFileSystemWithMountTargets](~~204364~~)查询可用的NAS的VPC挂载点。',
            'type' => 'string',
            'required' => false,
            'example' => '008b64****',
          ),
        ),
        15 => 
        array (
          'name' => 'VolumeProtocol',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '共享存储的协议类型。取值范围：
- NFS
- SMB

默认值：NFS。',
            'type' => 'string',
            'required' => false,
            'example' => 'NFS',
            'default' => 'nfs',
          ),
        ),
        16 => 
        array (
          'name' => 'VolumeMountpoint',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'NAS的VPC挂载点。VolumeMountpoint有以下限制：

- 如果VolumeId参数为空，VolumeMountpoint可以为空，创建集群的流程会默认创建一个VPC挂载点。
- 如果VolumeId参数不为空，VolumeMountpoint为必填，您可以调用[ListFileSystemWithMountTargets](~~204364~~)查询可用的NAS的VPC挂载点。	
',
            'type' => 'string',
            'required' => false,
            'example' => '008b648bcb-s****.cn-hangzhou.nas.aliyuncs.com',
          ),
        ),
        17 => 
        array (
          'name' => 'VolumeMountOption',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '采用mount命令手动挂载NFS文件系统时的挂载参数。    

    <props="china">具体请参见[手动挂载NFS文件系统](https://help.aliyun.com/document_detail/90529.html#section-jyi-hyd-hbr)。</props>

<props="intl">具体请参见[手动挂载NFS文件系统](https://www.alibabacloud.com/help/en/nas/latest/mount-an-nfs-file-system-on-a-linux-ecs-instance#section-jyi-hyd-hbr)。</props>
',
            'type' => 'string',
            'required' => false,
            'example' => '-t nfs -o vers=4',
          ),
        ),
        18 => 
        array (
          'name' => 'RemoteDirectory',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '挂载共享存储的远程目录。',
            'type' => 'string',
            'required' => false,
            'example' => 'NasMountpoint:/RemoteDirectory',
          ),
        ),
        19 => 
        array (
          'name' => 'DeployMode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群部署模式。取值范围：
- Standard：账号节点、调度节点、登录节点、计算节点分离部署。
- Simple：账号节点和调度节点混合部署在一个节点上，登录节点和计算节点分离部署。
- Tiny：账号节点、调度节点、登录节点混合部署在一个节点上，计算节点分离部署。

默认值：Standard。',
            'type' => 'string',
            'required' => false,
            'example' => 'Simple',
          ),
        ),
        20 => 
        array (
          'name' => 'HaEnable',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否开启高可用。取值范围：
- true：开启。
- false：不开启。

默认值：false。
>若开启高可用则集群中的每种管控角色将会使用主备2个节点。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
            'default' => 'false',
          ),
        ),
        21 => 
        array (
          'name' => 'EcsChargeType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群中所有节点的付费类型，取值范围：
- PostPaid：按量付费。
- PrePaid：包年包月。

若选择包年包月类型，默认开启自动续费。',
            'type' => 'string',
            'required' => false,
            'example' => 'PostPaid',
            'default' => 'PostPaid',
          ),
        ),
        22 => 
        array (
          'name' => 'Password',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '登录节点的root密码。
> 建议使用HTTPS协议调用API避免密码泄露。

密码格式要求：

- 长度为8至30个字符。
- 必须同时包含大小写英文字母、数字和特殊符号中的三类字符。特殊符号可以是`( ) ~ ! @ # $ % ^ & * - + = | { } [ ] : ; ‘ < > , . ? / `。

> 集群的登录凭证支持密码和密钥对两种，Password和KeyPairName二者必选其一，如果二者都指定，则Password优先级高。',
            'type' => 'string',
            'required' => false,
            'example' => '123****',
          ),
        ),
        23 => 
        array (
          'name' => 'KeyPairName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '登录节点绑定的密钥对名称。关于如何创建密钥对，请参见[创建密钥对](~~51793~~)。

> 集群的登录凭证支持密码和密钥对两种，Password和KeyPairName二者必选其一，如果二者都指定，则Password优先级高。',
            'type' => 'string',
            'required' => false,
            'example' => 'test',
          ),
        ),
        24 => 
        array (
          'name' => 'ImageOwnerAlias',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像类型。取值范围：
- system：公共镜像
- self：自定义镜像
- others：共享镜像

默认值：system。',
            'type' => 'string',
            'required' => false,
            'example' => 'self',
            'default' => 'system',
          ),
        ),
        25 => 
        array (
          'name' => 'ImageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像ID。

您可以调用[ListImages](~~87213~~)和[ListCustomImages](~~87215~~)查询E-HPC可以使用的镜像ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'centos_7_02_64_20G_alibase_20170818****',
          ),
        ),
        26 => 
        array (
          'name' => 'EcsOrder.Manager.Count',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群管控节点数量。取值范围：1~2。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        27 => 
        array (
          'name' => 'EcsOrder.Manager.InstanceType',
          'in' => 'query',
          'allowEmptyValue' => false,
          'schema' => 
          array (
            'description' => '集群管控节点规格。

您可以调用[ListPreferredEcsTypes](~~188592~~)接口获取推荐的节点规格信息。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'ecs.n1.tiny',
          ),
        ),
        28 => 
        array (
          'name' => 'EcsOrder.Compute.Count',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群计算节点数量。取值范围：0~99。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => false,
            'example' => '1',
            'default' => '0',
          ),
        ),
        29 => 
        array (
          'name' => 'EcsOrder.Compute.InstanceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群计算节点规格。

您可以调用[ListPreferredEcsTypes](~~188592~~)接口获取推荐的节点规格信息。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'ecs.n1.tiny',
          ),
        ),
        30 => 
        array (
          'name' => 'EcsOrder.Login.Count',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群登录节点数量，仅支持配置1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => false,
            'example' => '1',
            'default' => '0',
          ),
        ),
        31 => 
        array (
          'name' => 'EcsOrder.Login.InstanceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群登录节点规格。

您可以调用[ListPreferredEcsTypes](~~188592~~)接口获取推荐的节点规格信息。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'ecs.n1.tiny',
          ),
        ),
        32 => 
        array (
          'name' => 'SccClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'SCC实例ID。

如果配置该参数，则将已有的SCC实例纳管到新创建的SCC集群中。',
            'type' => 'string',
            'required' => false,
            'example' => '00b648b****',
          ),
        ),
        33 => 
        array (
          'name' => 'ComputeSpotStrategy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点竞价策略。取值范围：
- NoSpot：正常按量付费节点。
- SpotWithPriceLimit：设置上限价格的抢占式节点。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格的抢占式节点。

默认值：NoSpot。',
            'type' => 'string',
            'required' => false,
            'example' => 'NoSpot',
          ),
        ),
        34 => 
        array (
          'name' => 'ComputeSpotPriceLimit',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点每小时最高价格。最大支持3位小数，参数ComputeSpotStrategy取值为SpotWithPriceLimit时生效。',
            'type' => 'string',
            'required' => false,
            'example' => '0.034',
          ),
        ),
        35 => 
        array (
          'name' => 'ComputeEnableHt',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点是否支持超线程。取值范围：
- true：支持。
- false：不支持。

默认值：true。
',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        36 => 
        array (
          'name' => 'Period',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '购买集群节点的时长。单位由`PeriodUnit`指定，取值范围：

<props="china">
- 当参数PriceUnit取值为Year时：1~3。
- 当参数PriceUnit取值为Month时：1~9。
- 当参数PriceUnit取值为Hour时：1。
- 当参数PriceUnit取值为Week时：1~4。

</props>


<props="intl">
- 当参数PriceUnit取值为Year时：1~3。
- 当参数PriceUnit取值为Month时：1~9。
- 当参数PriceUnit取值为Hour时：1。

</props>

默认值：1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        37 => 
        array (
          'name' => 'PeriodUnit',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '购买集群节点的时长单位。取值范围：

<props="china">
- Year
- Month
- Hour
- Week

</props>


<props="intl">
- Year
- Month
- Hour

</props>

默认值：Month。',
            'type' => 'string',
            'required' => false,
            'example' => 'Year',
          ),
        ),
        38 => 
        array (
          'name' => 'AutoRenew',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否自动续费。取值范围：
- true：自动续费。
- false：不自动续费。

默认值：false。',
            'type' => 'string',
            'required' => false,
            'example' => 'false',
            'default' => 'false',
          ),
        ),
        39 => 
        array (
          'name' => 'AutoRenewPeriod',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每次自动续费的时长，当参数AutoRenew取值true时生效。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        40 => 
        array (
          'name' => 'InputFileUrl',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '上传到OSS的作业文件的URL地址。',
            'type' => 'string',
            'required' => false,
            'example' => 'https://ehpc-tianshui.oss-cn-beijing.aliyuncs.com/test-u****/testlist_ehpc.sh',
          ),
        ),
        41 => 
        array (
          'name' => 'JobQueue',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点加入的队列名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'workq',
          ),
        ),
        42 => 
        array (
          'name' => 'SystemDiskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '系统盘的云盘种类。取值范围：
- cloud_efficiency：高效云盘。
- cloud_ssd：SSD云盘。
- cloud_essd：ESSD云盘。
- cloud：普通云盘，已售罄。

默认值：cloud_ssd。',
            'type' => 'string',
            'required' => false,
            'example' => 'cloud_ssd',
          ),
        ),
        43 => 
        array (
          'name' => 'SystemDiskSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '系统盘大小。单位：GB。

取值范围：40~500。

默认值：40。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '40',
          ),
        ),
        44 => 
        array (
          'name' => 'RemoteVisEnable',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否开启远程可视化。取值范围：
- true：开启。
- false：不开启。

默认值：false。',
            'type' => 'string',
            'required' => false,
            'example' => 'false',
            'default' => 'false',
          ),
        ),
        45 => 
        array (
          'name' => 'ResourceGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源组ID。

您可以调用[ListResourceGroups](~~158855~~)查询资源组ID。	',
            'type' => 'string',
            'required' => false,
            'example' => 'rg-acfmxazb4ph****',
          ),
        ),
        46 => 
        array (
          'name' => 'ClientToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。更多信息，请参见[如何保证幂等性](~~25693~~)。',
            'type' => 'string',
            'required' => false,
            'example' => '123e4567-e89b-12d3-a456-426655440000',
          ),
        ),
        47 => 
        array (
          'name' => 'WithoutElasticIp',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '登录节点是否使用弹性公网IP。默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
            'default' => 'false',
            'enum' => 
            array (
              0 => 'true',
              1 => 'false',
            ),
          ),
        ),
        48 => 
        array (
          'name' => 'SystemDiskLevel',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建ESSD云盘作为系统盘使用时，设置云盘的性能等级。取值范围：
- PL0：单盘最高随机读写IOPS 1万。
- PL1：单盘最高随机读写IOPS 5万。
- PL2：单盘最高随机读写IOPS 10万。
- PL3：单盘最高随机读写IOPS 100万。

默认值：PL1。

关于如何选择ESSD性能等级，请参见[ESSD云盘](~~122389~~)。',
            'type' => 'string',
            'required' => false,
            'example' => 'PL0',
          ),
        ),
        49 => 
        array (
          'name' => 'IsComputeEss',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否启用自动伸缩。取值范围：
- true：启用。
- false：未启用。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        50 => 
        array (
          'name' => 'ClusterVersion',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群版本号。

默认值：1.0。',
            'type' => 'string',
            'required' => false,
            'example' => '1.0',
          ),
        ),
        51 => 
        array (
          'name' => 'Application',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '应用软件信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '应用软件信息。',
              'type' => 'object',
              'properties' => 
              array (
                'Tag' => 
                array (
                  'description' => '应用软件的标签。

N的取值范围：0~100

您可以调用[ListSoftwares](~~87216~~)查询应用软件标签。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'OpenMPI_11.1',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
        52 => 
        array (
          'name' => 'AdditionalVolumes',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '挂载的共享存储信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '挂载的共享存储信息。',
              'type' => 'object',
              'properties' => 
              array (
                'JobQueue' => 
                array (
                  'description' => '挂载共享存储的节点作业所处队列。

N的取值范围：1~10。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'high',
                ),
                'VolumeId' => 
                array (
                  'description' => '挂载的NAS实例ID。


N的取值范围：1~10。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'extreme-00b88****',
                ),
                'Roles' => 
                array (
                  'description' => '共享存储挂载到新NAS上的节点信息。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '共享存储挂载到新NAS上的节点信息。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Name' => 
                      array (
                        'description' => '共享存储挂载到新NAS上的节点类型。

AdditionalVolumes.N.Roles中N的取值范围：1~10。

Roles.N.Name中N的取值范围：0~8。

',
                        'type' => 'string',
                        'required' => false,
                        'example' => '["Compute"]',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                  'maxItems' => 8,
                ),
                'VolumeMountpoint' => 
                array (
                  'description' => '挂载的NAS的VPC挂载点。

N的取值范围：1~10。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '0088****-sihc.cn-hangzhou.extreme.nas.aliyuncs.com',
                ),
                'VolumeMountOption' => 
                array (
                  'description' => 'NAS的挂载选项。

N的取值范围：1~10。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '-t nfs -o vers=4.0',
                ),
                'RemoteDirectory' => 
                array (
                  'description' => '挂载的共享存储的远程目录。

N的取值范围：1~10。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '/test',
                ),
                'VolumeType' => 
                array (
                  'description' => '挂载的共享存储类型。目前仅支持NAS。

N的取值范围：1~10',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'nas',
                ),
                'LocalDirectory' => 
                array (
                  'description' => '挂载的共享存储的本地挂载目录。

N的取值范围：1~10。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '/ff',
                ),
                'VolumeProtocol' => 
                array (
                  'description' => '挂载的共享存储协议类型。取值范围：
- NFS
- SMB

N的取值范围：1~10。

默认值：NFS。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'NFS',
                ),
                'Location' => 
                array (
                  'description' => '挂载的共享存储的集群类型，只能配置PublicCloud。

N的取值范围：1~10。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'PublicCloud',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
        53 => 
        array (
          'name' => 'PostInstallScript',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '安装后脚本信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '安装后脚本信息。',
              'type' => 'object',
              'properties' => 
              array (
                'Args' => 
                array (
                  'description' => '安装后脚本的执行参数。

N的取值范围：0~16。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'bashfile.sh',
                ),
                'Url' => 
                array (
                  'description' => '安装后脚本的下载地址。

N的取值范围：0~16。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '/opt/job.sh',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 16,
          ),
        ),
        54 => 
        array (
          'name' => 'Plugin',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '插件模式配置，仅当SchedulerType为custom生效。

格式为JSON字符串，包含pluginMod、pluginLocalPath、pluginOssPath三个参数，具体参数说明如下：

- pluginMod：插件模式，支持以下两种模式：
  
  - oss模式：将从OSS上下载插件解压到本地pluginLocalPath中。

  - image模式：默认插件已经放置到pluginLocalPath。

- pluginLocalPath：插件存放的本地路径，建议在oss模式下选择共享存储目录，image模式下选择非共享存储目录。

- pluginOssPath：插件放置在OSS上的远程路径，仅当pluginMod等于oss生效。',
            'type' => 'string',
            'required' => false,
            'example' => '{"pluginMod": "oss","pluginLocalPath": "/opt/plugin","pluginOssPath": "https://bucket.oss-cn-hangzhou.aliyuncs.com/plugin/plugin.tgz"}',
          ),
        ),
        55 => 
        array (
          'name' => 'WithoutAgent',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否不安装Agent客户端。

- true：不安装。

- false：安装。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        56 => 
        array (
          'name' => 'WithoutNas',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否不使用NAS作为共享存储。取值范围：

- true：不使用NAS。
- false：使用NAS。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false
',
          ),
        ),
        57 => 
        array (
          'name' => 'RamRoleName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例RAM角色名称。

您可以使用RAM API [ListRoles](~~28713~~)查询您已创建的实例RAM角色。


',
            'type' => 'string',
            'required' => false,
            'example' => 'testRamRoleName',
          ),
        ),
        58 => 
        array (
          'name' => 'NetworkInterfaceTrafficMode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '弹性网卡的通讯模式。取值范围：

- Standard：使用TCP通讯模式。
- HighPerformance：开启ERI（Elastic RDMA Interface）接口，使用RDMA通讯模式。',
            'type' => 'string',
            'required' => false,
            'example' => 'Standard',
          ),
        ),
        59 => 
        array (
          'name' => 'DeploymentSetId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '部署集ID。
您可以通过[DescribeDeploymentSets](~~91313~~)获取部署集ID，当前仅支持网络低时延策略的部署集。',
            'type' => 'string',
            'required' => false,
            'example' => 'ds-bp1frxuzdg87zh4pzq****',
          ),
        ),
        60 => 
        array (
          'name' => 'RamNodeTypes',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '授权实例角色的节点名称详情。
',
            'type' => 'array',
            'items' => 
            array (
              'description' => '授权实例角色的节点名称。

N的取值范围：0~4。

- 当DeployMode取值为Standard时，取值范围：scheduler、account、login、compute，支持多选，多个取值间用半角逗号（,）隔开。

- 当DeployMode取值为Simple时，取值范围：manager、login、compute，支持多选，多个取值间用半角逗号（,）隔开。

- 当DeployMode取值为Tiny时，取值范围：manager、compute。',
              'type' => 'string',
              'required' => false,
              'example' => 'manager',
            ),
            'required' => false,
            'example' => 'Standard',
            'maxItems' => 5,
            'minItems' => 0,
          ),
        ),
        61 => 
        array (
          'name' => 'Tag',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'title' => '标签列表，最多包含20个子项',
            'description' => '标签数组。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '标签数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Key' => 
                array (
                  'title' => '标签键',
                  'description' => '标签键。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'TestKey',
                ),
                'Value' => 
                array (
                  'title' => '标签值',
                  'description' => '标签值。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'TestValue',
                ),
              ),
              'required' => false,
              'example' => 'scheduler',
            ),
            'required' => false,
            'maxItems' => 20,
          ),
        ),
        62 => 
        array (
          'name' => 'AddOns',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '自定义组件服务。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '自定义组件服务。',
              'type' => 'object',
              'properties' => 
              array (
                'Name' => 
                array (
                  'description' => '组件名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'cromwell',
                ),
                'Version' => 
                array (
                  'description' => '组件版本号。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '85',
                ),
                'DeployMode' => 
                array (
                  'description' => '部署模式。取值范围：local，ecs。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'local',
                ),
                'DBType' => 
                array (
                  'description' => '数据库类型。取值范围：Mysql，null。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'Mysql',
                ),
                'ConfigFile' => 
                array (
                  'description' => '配置文件路径。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '/usr/local/addon/cromwell/cromwell.conf',
                ),
                'Port' => 
                array (
                  'description' => '自定义组件访问端口。',
                  'type' => 'number',
                  'format' => 'float',
                  'required' => false,
                  'example' => '10000',
                ),
                'DefaultStart' => 
                array (
                  'description' => '自定义组件是否自启动。取值范围：true，false。',
                  'type' => 'boolean',
                  'required' => false,
                  'example' => 'true',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 20,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'F6757FA4-8FED-4602-B7F5-3550C084****',
              ),
              'TaskId' => 
              array (
                'description' => '任务ID。

>由于CreateCluster是异步操作，请求成功就会立即返回结果，不会等待节点创建成功。您可以调用[ListTasks](~~268225~~)查询任务运行结果。',
                'type' => 'string',
                'example' => 'F6757FA4-8FED-4602-B7F5-3550C084****',
              ),
              'ClusterId' => 
              array (
                'description' => '集群ID。',
                'type' => 'string',
                'example' => 'ehpc-hz-FYUr32****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
          3 => 
          array (
            'errorCode' => 'OrderError.InsufficientBalance',
            'errorMessage' => 'The account balance is insufficient. Please add funds first and try again.',
          ),
          4 => 
          array (
            'errorCode' => 'OrderError.InstHasUnpaidOrder',
            'errorMessage' => 'Your account has an unpaid order.',
          ),
          5 => 
          array (
            'errorCode' => 'OrderError.Arrearage',
            'errorMessage' => 'Your account balance is less than CNY 100. Please add funds to your account and try again.',
          ),
          6 => 
          array (
            'errorCode' => 'OrderError.NoCard',
            'errorMessage' => 'No credit card is bound to your account.',
          ),
          7 => 
          array (
            'errorCode' => 'OrderError.InvalidPayMethod',
            'errorMessage' => 'No valid default payment method is specified for your account.',
          ),
          8 => 
          array (
            'errorCode' => 'OrderError.NoRealNameAuthentication',
            'errorMessage' => 'You have not completed the real name authentication.',
          ),
          9 => 
          array (
            'errorCode' => 'OrderError.NoRealNameRegistration',
            'errorMessage' => 'Real name registration is required for instances launched in mainland China.',
          ),
          10 => 
          array (
            'errorCode' => 'OrderError.UserProfileIncomplete',
            'errorMessage' => 'You have not completed your user profile.',
          ),
          11 => 
          array (
            'errorCode' => 'InvalidVpc',
            'errorMessage' => 'The specified VPC is invalid.',
          ),
          12 => 
          array (
            'errorCode' => 'InvalidVolume',
            'errorMessage' => 'The specified volume is invalid.',
          ),
          13 => 
          array (
            'errorCode' => 'InvalidSoftware',
            'errorMessage' => 'The specified software is not supported.',
          ),
          14 => 
          array (
            'errorCode' => 'InvalidVolumeProtocal',
            'errorMessage' => 'The specified volume protocol is invalid.',
          ),
          15 => 
          array (
            'errorCode' => 'InvalidVolumeMountpoint',
            'errorMessage' => 'The specified volume mount point is invalid.',
          ),
          16 => 
          array (
            'errorCode' => 'MissingParams',
            'errorMessage' => 'The %s parameter is required.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'TooManyClusters',
            'errorMessage' => 'The number of user clusters exceeds the quota.',
          ),
          1 => 
          array (
            'errorCode' => 'TooManyComputes',
            'errorMessage' => 'The number of computing nodes exceeds the quota.',
          ),
          2 => 
          array (
            'errorCode' => 'TooManyLogins',
            'errorMessage' => 'The maximum number of logged on nodes is exceeded.',
          ),
          3 => 
          array (
            'errorCode' => 'TooManyScc',
            'errorMessage' => 'The maximum number of SCC instances is exceeded.',
          ),
          4 => 
          array (
            'errorCode' => 'QuotaExceeded.PrivateIpAddress',
            'errorMessage' => 'Insufficient private IP addresses in vSwitch: %s.',
          ),
          5 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          6 => 
          array (
            'errorCode' => 'ImageNotSupported',
            'errorMessage' => 'The specified image is not supported.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'VolumeNotFound',
            'errorMessage' => 'The specified volume does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'VpcNotFound',
            'errorMessage' => 'The specified VPC does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'KeyPairNotFound',
            'errorMessage' => 'The specified KeyPair does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'NasError',
            'errorMessage' => 'NAS API request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'NasServiceNotOpen',
            'errorMessage' => 'The NAS service is not activated.',
          ),
          3 => 
          array (
            'errorCode' => 'EipError',
            'errorMessage' => 'The EIP API request failed.',
          ),
          4 => 
          array (
            'errorCode' => 'OrderError',
            'errorMessage' => 'An order request error occurred.',
          ),
          5 => 
          array (
            'errorCode' => 'FailToGenId',
            'errorMessage' => 'Generating cluster ID failed.',
          ),
          6 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          7 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          8 => 
          array (
            'errorCode' => 'AckError',
            'errorMessage' => 'An error occurred while calling the ACK API operation.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'No authorization is granted.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"F6757FA4-8FED-4602-B7F5-3550C084****\\",\\n  \\"TaskId\\": \\"F6757FA4-8FED-4602-B7F5-3550C084****\\",\\n  \\"ClusterId\\": \\"ehpc-hz-FYUr32****\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateClusterResponse>\\n    <TaskId>F6757FA4-8FED-4602-B7F5-3550C084****</TaskId>\\n    <RequestId>F6757FA4-8FED-4602-B7F5-3550C084****</RequestId>\\n    <ClusterId>ehpc-hz-FYUr32****</ClusterId>\\n</CreateClusterResponse>","errorExample":""}]',
      'title' => '创建集群',
      'description' => '## 接口说明

创建集群会涉及相关资源计费，建议您提前了解E-HPC的计费方式。更多信息，请参见[计费方式](~~57844~~)。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DescribeCluster' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。您可以调用[ListClusters](~~87116~~)查询指定地域下的集群列表。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-QKKVqO****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'ClusterInfo' => 
              array (
                'description' => '集群信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Status' => 
                  array (
                    'description' => '集群状态。可能值：
- uninit：未初始化
- creating：创建中
- Init：初始化中
- running：运行中
- exception：异常
- releasing：释放中',
                    'type' => 'string',
                    'example' => 'creating',
                  ),
                  'VpcId' => 
                  array (
                    'description' => '专有网络ID。',
                    'type' => 'string',
                    'example' => 'vpc-bp1pxkcvmmz53ki89****',
                  ),
                  'KeyPairName' => 
                  array (
                    'description' => '密钥对名称。',
                    'type' => 'string',
                    'example' => 'test',
                  ),
                  'EcsChargeType' => 
                  array (
                    'description' => '集群实例付费类型。可能值：
- PostPaid：按量付费
- PrePaid：包年包月',
                    'type' => 'string',
                    'example' => 'PostPaid',
                  ),
                  'SecurityGroupId' => 
                  array (
                    'description' => '安全组ID。',
                    'type' => 'string',
                    'example' => 'sg-bp1asugr34gzn****',
                  ),
                  'SccClusterId' => 
                  array (
                    'description' => '集群使用的SccCluster ID。如果集群不是SCC机型则为空。',
                    'type' => 'string',
                    'example' => '00b648b****',
                  ),
                  'CreateTime' => 
                  array (
                    'description' => '集群创建时间。',
                    'type' => 'string',
                    'example' => '2020-12-24T03:18:23.000Z',
                  ),
                  'AccountType' => 
                  array (
                    'description' => '账户服务器类型。可能值：
- nis
- ldap',
                    'type' => 'string',
                    'example' => 'nis',
                  ),
                  'VolumeProtocol' => 
                  array (
                    'description' => '网络共享存储协议。可能值：
- nfs
- smb',
                    'type' => 'string',
                    'example' => 'nfs',
                  ),
                  'Description' => 
                  array (
                    'description' => '集群描述。',
                    'type' => 'string',
                    'example' => 'cluster',
                  ),
                  'VolumeId' => 
                  array (
                    'description' => '阿里云NAS实例ID。目前不支持自动创建阿里云NAS实例。',
                    'type' => 'string',
                    'example' => '008b64****',
                  ),
                  'HaEnable' => 
                  array (
                    'description' => '是否开启高可用。
 >若开启高可用，则集群中的每种管控角色将会使用主备2台实例。',
                    'type' => 'boolean',
                    'example' => 'false',
                  ),
                  'BaseOsTag' => 
                  array (
                    'description' => '集群基础镜像。',
                    'type' => 'string',
                    'example' => 'CentOS_7.2_64',
                  ),
                  'Name' => 
                  array (
                    'description' => '集群名称。',
                    'type' => 'string',
                    'example' => 'cluster',
                  ),
                  'ImageId' => 
                  array (
                    'description' => '镜像ID。',
                    'type' => 'string',
                    'example' => 'centos_7_02_64_20G_alibase_20170818****',
                  ),
                  'SchedulerType' => 
                  array (
                    'description' => '调度服务器类型。可能值范围：
- pbs
- slurm
- opengridscheduler
- deadline',
                    'type' => 'string',
                    'example' => 'pbs',
                  ),
                  'SchedulerVersion' => 
                  array (
                    'description' => '调度器软件版本。',
                    'type' => 'string',
                    'example' => '18.1.1',
                  ),
                  'DeployMode' => 
                  array (
                    'description' => '集群部署模式。可能值：
- Standard：账号节点、调度节点、登录节点、计算节点分离部署。
- Advanced：HA模式部署。
- Simple：账号节点和调度节点混合部署在一个节点上，登录节点和计算节点分离部署。
- Tiny：账号节点、调度节点、登录节点混合部署在一个节点上，计算节点分离部署。',
                    'type' => 'string',
                    'example' => 'Simple',
                  ),
                  'ImageOwnerAlias' => 
                  array (
                    'description' => '镜像类型。可能值：
- system：公共镜像
- self：自定义镜像
- others：共享镜像
- marketplace：镜像市场镜像',
                    'type' => 'string',
                    'example' => 'system',
                  ),
                  'OsTag' => 
                  array (
                    'description' => '操作系统镜像标签。',
                    'type' => 'string',
                    'example' => 'CentOS_7.2_64',
                  ),
                  'VolumeMountpoint' => 
                  array (
                    'description' => 'NAS的VPC挂载点。目前不支持自动创建阿里云NAS挂载点。',
                    'type' => 'string',
                    'example' => '008b648bcb-s****.cn-hangzhou.nas.aliyuncs.com',
                  ),
                  'RemoteDirectory' => 
                  array (
                    'description' => '挂载共享存储的远程目录。',
                    'type' => 'string',
                    'example' => 'NasMountpoint:/RemoteDirectory',
                  ),
                  'RegionId' => 
                  array (
                    'description' => '地域ID。',
                    'type' => 'string',
                    'example' => 'cn-hangzhou',
                  ),
                  'VSwitchId' => 
                  array (
                    'description' => 'VPC中交换机ID。产品目前只支持VPC网络。',
                    'type' => 'string',
                    'example' => 'vsw-bp1e47optm9g58zcu****',
                  ),
                  'ImageName' => 
                  array (
                    'description' => '镜像名称。',
                    'type' => 'string',
                    'example' => 'test_for_Image',
                  ),
                  'VolumeType' => 
                  array (
                    'description' => '网络共享存储类型，目前仅支持阿里云NAS。',
                    'type' => 'string',
                    'example' => 'NAS',
                  ),
                  'Location' => 
                  array (
                    'description' => '集群所在位置。可能值：
- OnPremise：混合云集群。
- PublicCloud：公有云集群。',
                    'type' => 'string',
                    'example' => 'PublicCloud',
                  ),
                  'Id' => 
                  array (
                    'description' => '实例ID。',
                    'type' => 'string',
                    'example' => 'i-bp15de54eet1c43f****',
                  ),
                  'ClientVersion' => 
                  array (
                    'description' => '集群所使用的客户端版本号。',
                    'type' => 'string',
                    'example' => '1.0.1',
                  ),
                  'ZoneId' => 
                  array (
                    'description' => '可用区ID。',
                    'type' => 'string',
                    'example' => 'cn-hangzhou-k',
                  ),
                  'ResourceGroupId' => 
                  array (
                    'description' => '资源组ID。',
                    'type' => 'string',
                    'example' => 'rg-aek23szz5i2****',
                  ),
                  'RamRoleName' => 
                  array (
                    'description' => '实例RAM角色名称。',
                    'type' => 'string',
                    'example' => 'AliyunEHPCFullAccess',
                  ),
                  'RamNodeTypes' => 
                  array (
                    'description' => '授权实例角色的节点名称详情。',
                    'type' => 'string',
                    'example' => '["manager", "compute"]',
                  ),
                  'Applications' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'ApplicationInfo' => 
                      array (
                        'description' => '集群应用软件列表，包含软件的名称和版本号。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '集群应用软件列表，包含软件的名称和版本号。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Tag' => 
                            array (
                              'description' => '应用软件标签。',
                              'type' => 'string',
                              'example' => 'OpenMPI_1.8.7',
                            ),
                            'Name' => 
                            array (
                              'description' => '应用软件名称。',
                              'type' => 'string',
                              'example' => 'openmpi',
                            ),
                            'Version' => 
                            array (
                              'description' => '应用软件版本。',
                              'type' => 'string',
                              'example' => '1.10',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'PostInstallScripts' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'PostInstallScriptInfo' => 
                      array (
                        'description' => '安装后脚本列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '安装后脚本列表。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Url' => 
                            array (
                              'description' => '脚本下载路径。',
                              'type' => 'string',
                              'example' => 'example.com',
                            ),
                            'Args' => 
                            array (
                              'description' => '脚本执行参数。',
                              'type' => 'string',
                              'example' => 'bash file.sh',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'EcsInfo' => 
                  array (
                    'description' => '描述集群中ECS数量和规格的数据结构。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Manager' => 
                      array (
                        'description' => '管控节点信息。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'InstanceType' => 
                          array (
                            'description' => '管控节点实例规格。',
                            'type' => 'string',
                            'example' => 'ecs.n1.tiny',
                          ),
                          'Count' => 
                          array (
                            'description' => '管控节点的数量。',
                            'type' => 'integer',
                            'format' => 'int32',
                            'example' => '1',
                          ),
                        ),
                      ),
                      'Compute' => 
                      array (
                        'description' => '计算节点信息。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'InstanceType' => 
                          array (
                            'description' => '计算节点ECS实例规格。',
                            'type' => 'string',
                            'example' => 'ecs.n1.tiny',
                          ),
                          'Count' => 
                          array (
                            'description' => '计算节点数量。',
                            'type' => 'integer',
                            'format' => 'int32',
                            'example' => '1',
                          ),
                        ),
                      ),
                      'Login' => 
                      array (
                        'description' => '登录节点信息。',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'InstanceType' => 
                          array (
                            'description' => '登录节点实例规格。',
                            'type' => 'string',
                            'example' => 'ecs.n1.tiny',
                          ),
                          'Count' => 
                          array (
                            'description' => '登录节点数量。',
                            'type' => 'integer',
                            'format' => 'int32',
                            'example' => '1',
                          ),
                        ),
                      ),
                      'ProxyMgr' => 
                      array (
                        'description' => '云上代理节点信息。

仅当集群为混合云集群，并开启混合云代理模式时，返回该参数。
',
                        'type' => 'object',
                        'properties' => 
                        array (
                          'InstanceType' => 
                          array (
                            'description' => '云上代理节点的实例类型。',
                            'type' => 'string',
                            'example' => 'ecs.n1.tiny',
                          ),
                          'Count' => 
                          array (
                            'description' => '云上代理节点数量。',
                            'type' => 'integer',
                            'format' => 'int32',
                            'example' => '1',
                          ),
                        ),
                      ),
                    ),
                  ),
                  'OnPremiseInfo' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'OnPremiseInfo' => 
                      array (
                        'description' => '本地集群管理节点信息。

仅当集群为混合云集群，并开启混合云代理模式时，返回该参数。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '本地集群管理节点信息。

仅当集群为混合云集群，并开启混合云代理模式时，返回该参数。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Type' => 
                            array (
                              'description' => '本地集群管理节点类型，可能值：

- scheduler
- account
- account，scheduler',
                              'type' => 'string',
                              'example' => 'scheduler',
                            ),
                            'HostName' => 
                            array (
                              'description' => '本地集群管理节点主机名。',
                              'type' => 'string',
                              'example' => 'testecs',
                            ),
                            'IP' => 
                            array (
                              'description' => '本地集群管理节点IP地址。',
                              'type' => 'string',
                              'example' => '192.168.*.*',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'AddOnsInfo' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'AddOnsInfo' => 
                      array (
                        'description' => '自定义组件服务信息。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '自定义组件服务信息。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'SoftwareId' => 
                            array (
                              'description' => '组件的软件ID。',
                              'type' => 'string',
                              'example' => 'CROMWELL_85',
                            ),
                            'DeployMode' => 
                            array (
                              'description' => '自定义组件的部署模式。可能值：

- local
- ecs',
                              'type' => 'string',
                              'example' => 'local',
                            ),
                            'Port' => 
                            array (
                              'description' => '自定义组件的服务TCP端口号。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '10000',
                            ),
                            'Status' => 
                            array (
                              'description' => '自定义组件的运行状态。可能值：

- running
- stopped
- exception',
                              'type' => 'string',
                              'example' => 'running',
                            ),
                            'URL' => 
                            array (
                              'description' => '自定义组件服务的访问链接。',
                              'type' => 'string',
                              'example' => 'http://172.16.10.12:10000/',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'ClusterVersion' => 
                  array (
                    'description' => '集群版本号。',
                    'type' => 'string',
                    'example' => '1.0',
                  ),
                  'WithoutAgent' => 
                  array (
                    'description' => '是否不安装Agent客户端。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'false',
                  ),
                  'Plugin' => 
                  array (
                    'description' => '插件模式配置，仅当SchedulerType为custom生效。

格式为JSON字符串，包含pluginMod、pluginLocalPath、pluginOssPath三个参数，具体参数说明如下：

- pluginMod：插件模式，支持以下两种模式：
  
  - oss模式：将从OSS上下载插件解压到本地pluginLocalPath中。

  - image模式：默认插件已经放置到pluginLocalPath。

- pluginLocalPath：插件存放的本地路径，建议在oss模式下选择共享存储目录，image模式下选择非共享存储目录。

- pluginOssPath：插件放置在OSS上的远程路径，仅当pluginMod等于oss生效。',
                    'type' => 'string',
                    'example' => '{\\"pluginMod\\":\\"image\\",\\"pluginLocalPath\\":\\"/opt/plugin\\"}',
                  ),
                  'SchedulerPreInstall' => 
                  array (
                    'description' => '业务镜像是否已预安装调度器。可能值：
- true：已预安装，创建或扩容节点时无需执行安装调度器流程。
- false：未预安装，创建或扩容节点时需要执行安装调度器流程。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => 'true',
                  ),
                  'Domain' => 
                  array (
                    'description' => '本地集群域名。

仅当AccoutType取值为Idap时，支持配置该参数。',
                    'type' => 'string',
                    'example' => 'ldap',
                  ),
                  'OpenldapPar' => 
                  array (
                    'description' => '对接OpenLDAP服务器参数。',
                    'type' => 'string',
                    'example' => '{
	"LdapServerIp": "192.168.XX.XX",
	"BaseDn": "ehpctest",
	"FallbackHomeDir": "/home"
}',
                  ),
                  'WinAdPar' => 
                  array (
                    'description' => '连接Windows AD参数。',
                    'type' => 'string',
                    'example' => '{	"AdUser": "Administrator",	"AdUserPasswd": "xxxxxx",	"AdDc": "ad-hybrid001.ehpcad.com",	"AdIp": "192.168.XX.XX"}',
                  ),
                  'Period' => 
                  array (
                    'description' => '购买集群节点的时长。单位由`PeriodUnit`指定，取值范围：

<props="china">
- 当参数PriceUnit取值为Year时：1~3。
- 当参数PriceUnit取值为Month时：1~9。
- 当参数PriceUnit取值为Hour时：1。
- 当参数PriceUnit取值为Week时：1~4。

</props>


<props="intl">
- 当参数PriceUnit取值为Year时：1~3。
- 当参数PriceUnit取值为Month时：1~9。
- 当参数PriceUnit取值为Hour时：1。

</props>

默认值：1。',
                    'type' => 'string',
                    'example' => '1',
                  ),
                  'PeriodUnit' => 
                  array (
                    'description' => '购买集群节点的时长单位。取值范围：

<props="china">
- Year
- Month
- Hour
- Week

</props>


<props="intl">
- Year
- Month
- Hour

</props>

默认值：Month。',
                    'type' => 'string',
                    'example' => 'Month',
                  ),
                  'AutoRenewPeriod' => 
                  array (
                    'description' => '每次自动续费的时长。参数AutoRenew取值true时生效。
- PeriodUnit为Week时，AutoRenewPeriod取值{"1", "2", "3"}。
- PeriodUnit为Month时，AutoRenewPeriod取值{"1", "2", "3", "6", "12"}。

默认值：1。',
                    'type' => 'string',
                    'example' => '1',
                  ),
                  'AutoRenew' => 
                  array (
                    'description' => '是否自动续费，当参数EcsChargeType取值为PrePaid时才生效。取值范围：
- true：自动续费
- false：不自动续费

默认值：true',
                    'type' => 'string',
                    'example' => 'false',
                  ),
                  'ComputeSpotStrategy' => 
                  array (
                    'description' => '计算节点竞价策略。可能值：
- NoSpot：正常按量付费实例。
- SpotWithPriceLimit：设置上限价格的抢占式实例。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格。',
                    'type' => 'string',
                    'example' => 'NoSpot',
                  ),
                  'ComputeSpotPriceLimit' => 
                  array (
                    'description' => '计算节点每小时最高价格。最大支持3位小数，参数ComputeSpotStrategy取值为SpotWithPriceLimit时生效。',
                    'type' => 'string',
                    'example' => '0.56',
                  ),
                  'Nodes' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'NodesInfo' => 
                      array (
                        'description' => '本地集群节点信息列表。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'description' => '本地集群节点信息列表。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Role' => 
                            array (
                              'description' => '本地集群节点的角色。可能值：

- Manager：管控节点
- Login：登录节点
- Compute：计算节点',
                              'type' => 'string',
                              'example' => 'Compute',
                            ),
                            'HostName' => 
                            array (
                              'description' => '本地集群节点的主机名称。',
                              'type' => 'string',
                              'example' => 'compute000',
                            ),
                            'IpAddress' => 
                            array (
                              'description' => '本地集群节点的IP地址。',
                              'type' => 'string',
                              'example' => '192.168.XX.XX',
                            ),
                            'AccountType' => 
                            array (
                              'description' => '本地集群节点的域账号服务类型。可能值：

- nis
- ldap

默认值：nis',
                              'type' => 'string',
                              'example' => 'nis',
                            ),
                            'Dir' => 
                            array (
                              'description' => '本地集群节点的配置目录。',
                              'type' => 'string',
                              'example' => '/opt/sge/default/',
                            ),
                            'SchedulerType' => 
                            array (
                              'description' => '本地集群节点的调度器类型。可能值：

- pbs
- slurm
- opengridscheduler
- deadline

默认值：pbs。',
                              'type' => 'string',
                              'example' => 'pbs',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  'InitialImage' => 
                  array (
                    'description' => '操作系统镜像信息汇总。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'OsTag' => 
                      array (
                        'description' => 'E-HPC支持的操作系统镜像。',
                        'type' => 'string',
                        'example' => 'CentOS_7.6_64',
                      ),
                      'ImageOwnerAlias' => 
                      array (
                        'description' => '镜像类型，可能值：
- system：公共镜像
- self：自定义镜像
- others：共享镜像
- marketplace：镜像市场镜像',
                        'type' => 'string',
                        'example' => 'system',
                      ),
                      'ImageId' => 
                      array (
                        'description' => '镜像ID。',
                        'type' => 'string',
                        'example' => 'centos_7_6_x64_20G_alibase_20211130.vhd',
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'NasError',
            'errorMessage' => 'NAS API request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          3 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          4 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          5 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"ClusterInfo\\": {\\n    \\"Status\\": \\"creating\\",\\n    \\"VpcId\\": \\"vpc-bp1pxkcvmmz53ki89****\\",\\n    \\"KeyPairName\\": \\"test\\",\\n    \\"EcsChargeType\\": \\"PostPaid\\",\\n    \\"SecurityGroupId\\": \\"sg-bp1asugr34gzn****\\",\\n    \\"SccClusterId\\": \\"00b648b****\\",\\n    \\"CreateTime\\": \\"2020-12-24T03:18:23.000Z\\",\\n    \\"AccountType\\": \\"nis\\",\\n    \\"VolumeProtocol\\": \\"nfs\\",\\n    \\"Description\\": \\"cluster\\",\\n    \\"VolumeId\\": \\"008b64****\\",\\n    \\"HaEnable\\": false,\\n    \\"BaseOsTag\\": \\"CentOS_7.2_64\\",\\n    \\"Name\\": \\"cluster\\",\\n    \\"ImageId\\": \\"centos_7_02_64_20G_alibase_20170818****\\",\\n    \\"SchedulerType\\": \\"pbs\\",\\n    \\"SchedulerVersion\\": \\"18.1.1\\",\\n    \\"DeployMode\\": \\"Simple\\",\\n    \\"ImageOwnerAlias\\": \\"system\\",\\n    \\"OsTag\\": \\"CentOS_7.2_64\\",\\n    \\"VolumeMountpoint\\": \\"008b648bcb-s****.cn-hangzhou.nas.aliyuncs.com\\",\\n    \\"RemoteDirectory\\": \\"NasMountpoint:/RemoteDirectory\\",\\n    \\"RegionId\\": \\"cn-hangzhou\\",\\n    \\"VSwitchId\\": \\"vsw-bp1e47optm9g58zcu****\\",\\n    \\"ImageName\\": \\"test_for_Image\\",\\n    \\"VolumeType\\": \\"NAS\\",\\n    \\"Location\\": \\"PublicCloud\\",\\n    \\"Id\\": \\"i-bp15de54eet1c43f****\\",\\n    \\"ClientVersion\\": \\"1.0.1\\",\\n    \\"ZoneId\\": \\"cn-hangzhou-k\\",\\n    \\"ResourceGroupId\\": \\"rg-aek23szz5i2****\\",\\n    \\"RamRoleName\\": \\"AliyunEHPCFullAccess\\",\\n    \\"RamNodeTypes\\": \\"[\\\\\\"manager\\\\\\", \\\\\\"compute\\\\\\"]\\",\\n    \\"Applications\\": {\\n      \\"ApplicationInfo\\": [\\n        {\\n          \\"Tag\\": \\"OpenMPI_1.8.7\\",\\n          \\"Name\\": \\"openmpi\\",\\n          \\"Version\\": \\"1.10\\"\\n        }\\n      ]\\n    },\\n    \\"PostInstallScripts\\": {\\n      \\"PostInstallScriptInfo\\": [\\n        {\\n          \\"Url\\": \\"example.com\\",\\n          \\"Args\\": \\"bash file.sh\\"\\n        }\\n      ]\\n    },\\n    \\"EcsInfo\\": {\\n      \\"Manager\\": {\\n        \\"InstanceType\\": \\"ecs.n1.tiny\\",\\n        \\"Count\\": 1\\n      },\\n      \\"Compute\\": {\\n        \\"InstanceType\\": \\"ecs.n1.tiny\\",\\n        \\"Count\\": 1\\n      },\\n      \\"Login\\": {\\n        \\"InstanceType\\": \\"ecs.n1.tiny\\",\\n        \\"Count\\": 1\\n      },\\n      \\"ProxyMgr\\": {\\n        \\"InstanceType\\": \\"ecs.n1.tiny\\",\\n        \\"Count\\": 1\\n      }\\n    },\\n    \\"OnPremiseInfo\\": {\\n      \\"OnPremiseInfo\\": [\\n        {\\n          \\"Type\\": \\"scheduler\\",\\n          \\"HostName\\": \\"testecs\\",\\n          \\"IP\\": \\"192.168.*.*\\"\\n        }\\n      ]\\n    },\\n    \\"AddOnsInfo\\": {\\n      \\"AddOnsInfo\\": [\\n        {\\n          \\"SoftwareId\\": \\"CROMWELL_85\\",\\n          \\"DeployMode\\": \\"local\\",\\n          \\"Port\\": 10000,\\n          \\"Status\\": \\"running\\",\\n          \\"URL\\": \\"http://172.16.10.12:10000/\\"\\n        }\\n      ]\\n    },\\n    \\"ClusterVersion\\": \\"1.0\\",\\n    \\"WithoutAgent\\": 0,\\n    \\"Plugin\\": \\"{\\\\\\\\\\\\\\"pluginMod\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"pluginLocalPath\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"/opt/plugin\\\\\\\\\\\\\\"}\\",\\n    \\"SchedulerPreInstall\\": 0,\\n    \\"Domain\\": \\"ldap\\",\\n    \\"OpenldapPar\\": \\"{\\\\n\\\\t\\\\\\"LdapServerIp\\\\\\": \\\\\\"192.168.XX.XX\\\\\\",\\\\n\\\\t\\\\\\"BaseDn\\\\\\": \\\\\\"ehpctest\\\\\\",\\\\n\\\\t\\\\\\"FallbackHomeDir\\\\\\": \\\\\\"/home\\\\\\"\\\\n}\\",\\n    \\"WinAdPar\\": \\"{\\\\t\\\\\\"AdUser\\\\\\": \\\\\\"Administrator\\\\\\",\\\\t\\\\\\"AdUserPasswd\\\\\\": \\\\\\"xxxxxx\\\\\\",\\\\t\\\\\\"AdDc\\\\\\": \\\\\\"ad-hybrid001.ehpcad.com\\\\\\",\\\\t\\\\\\"AdIp\\\\\\": \\\\\\"192.168.XX.XX\\\\\\"}\\",\\n    \\"Period\\": \\"1\\",\\n    \\"PeriodUnit\\": \\"Month\\",\\n    \\"AutoRenewPeriod\\": \\"1\\",\\n    \\"AutoRenew\\": \\"false\\",\\n    \\"ComputeSpotStrategy\\": \\"NoSpot\\",\\n    \\"ComputeSpotPriceLimit\\": \\"0.56\\",\\n    \\"Nodes\\": {\\n      \\"NodesInfo\\": [\\n        {\\n          \\"Role\\": \\"Compute\\",\\n          \\"HostName\\": \\"compute000\\",\\n          \\"IpAddress\\": \\"192.168.XX.XX\\",\\n          \\"AccountType\\": \\"nis\\",\\n          \\"Dir\\": \\"/opt/sge/default/\\",\\n          \\"SchedulerType\\": \\"pbs\\"\\n        }\\n      ]\\n    },\\n    \\"InitialImage\\": {\\n      \\"OsTag\\": \\"CentOS_7.6_64\\",\\n      \\"ImageOwnerAlias\\": \\"system\\",\\n      \\"ImageId\\": \\"centos_7_6_x64_20G_alibase_20211130.vhd\\"\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeClusterResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\n    <ClusterInfo>\\n        <Status>creating</Status>\\n        <VpcId>vpc-bp1pxkcvmmz53ki89****</VpcId>\\n        <KeyPairName>test</KeyPairName>\\n        <EcsChargeType>PostPaid</EcsChargeType>\\n        <SecurityGroupId>sg-bp1asugr34gzn****</SecurityGroupId>\\n        <SccClusterId>00b648b****</SccClusterId>\\n        <CreateTime>2020-12-24T03:18:23.000Z</CreateTime>\\n        <AccountType>nis</AccountType>\\n        <VolumeProtocol>nfs</VolumeProtocol>\\n        <Description>cluster</Description>\\n        <VolumeId>008b64****</VolumeId>\\n        <HaEnable>false</HaEnable>\\n        <BaseOsTag>CentOS_7.2_64</BaseOsTag>\\n        <Name>cluster</Name>\\n        <ImageId>centos_7_02_64_20G_alibase_20170818****</ImageId>\\n        <SchedulerType>pbs</SchedulerType>\\n        <DeployMode>Simple</DeployMode>\\n        <ImageOwnerAlias>system</ImageOwnerAlias>\\n        <OsTag>CentOS_7.2_64</OsTag>\\n        <VolumeMountpoint>008b648bcb-s****.cn-hangzhou.nas.aliyuncs.com</VolumeMountpoint>\\n        <RemoteDirectory>NasMountpoint:/RemoteDirectory</RemoteDirectory>\\n        <RegionId>cn-hangzhou</RegionId>\\n        <VSwitchId>vsw-bp1e47optm9g58zcu****</VSwitchId>\\n        <ImageName>test_for_Image</ImageName>\\n        <VolumeType>NAS</VolumeType>\\n        <Location>PublicCloud</Location>\\n        <Id>i-bp15de54eet1c43f****</Id>\\n        <ClientVersion>1.0.1</ClientVersion>\\n        <Applications>\\n            <Tag>OpenMPI_1.8.7</Tag>\\n            <Name>openmpi</Name>\\n            <Version>1.10</Version>\\n        </Applications>\\n        <PostInstallScripts>\\n            <Url>example.com</Url>\\n            <Args>bash file.sh</Args>\\n        </PostInstallScripts>\\n        <EcsInfo>\\n            <Manager>\\n                <InstanceType>ecs.n1.tiny</InstanceType>\\n                <Count>1</Count>\\n            </Manager>\\n            <Compute>\\n                <InstanceType>ecs.n1.tiny</InstanceType>\\n                <Count>1</Count>\\n            </Compute>\\n            <Login>\\n                <InstanceType>ecs.n1.tiny</InstanceType>\\n                <Count>1</Count>\\n            </Login>\\n            <ProxyMgr>\\n                <InstanceType>ecs.n1.tiny</InstanceType>\\n                <Count>1</Count>\\n            </ProxyMgr>\\n        </EcsInfo>\\n        <OnPremiseInfo>\\n            <Type>scheduler</Type>\\n            <HostName>testecs</HostName>\\n            <IP>192.168.*.*</IP>\\n        </OnPremiseInfo>\\n    </ClusterInfo>\\n</DescribeClusterResponse>","errorExample":""}]',
      'title' => '查询单个集群信息',
      'summary' => '调用DescribeCluster查询指定集群信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ModifyClusterAttributes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定修改的集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '修改后的集群名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'cluster1',
          ),
        ),
        2 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '修改后的集群描述信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'test-description',
          ),
        ),
        3 => 
        array (
          'name' => 'ImageOwnerAlias',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群修改后的镜像类型。取值范围：
- system：公共镜像
- self：自定义镜像
- others：共享镜像
- marketplace：镜像市场镜像',
            'type' => 'string',
            'required' => false,
            'example' => 'self',
          ),
        ),
        4 => 
        array (
          'name' => 'ImageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'centos_7_06_64_20G_alibase_2019071****',
          ),
        ),
        5 => 
        array (
          'name' => 'RamRoleName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '授权实例配置时，实例RAM角色的名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'testRamRoleName',
          ),
        ),
        6 => 
        array (
          'name' => 'RamNodeTypes',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '授权实例配置时，要绑定RAM角色的节点类型。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '授权实例配置时，要绑定RAM角色的节点类型。

- 当DeployMode取值为Standard时，取值范围：scheduler、account、login、compute，支持多选，多个取值间用半角逗号（,）隔开。
- 当DeployMode取值为Simple时，取值范围：manager、login、compute，支持多选，多个取值间用半角逗号（,）隔开。
- 当DeployMode取值为Tiny时，取值范围：manager、compute。',
              'type' => 'string',
              'required' => false,
              'example' => 'manager,compute',
            ),
            'required' => false,
            'maxItems' => 5,
            'minItems' => 0,
          ),
        ),
        7 => 
        array (
          'name' => 'WinAdPar',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => '连接Windows AD参数。',
            'type' => 'object',
            'properties' => 
            array (
              'AdUser' => 
              array (
                'description' => 'Windows AD服务器管理员。',
                'type' => 'string',
                'required' => false,
                'example' => 'administrator',
              ),
              'AdUserPasswd' => 
              array (
                'description' => 'Windows AD服务器管理员密码。',
                'type' => 'string',
                'required' => false,
                'example' => 'xxxxxxx',
              ),
              'AdDc' => 
              array (
                'description' => 'Windows AD服务器域名。',
                'type' => 'string',
                'required' => false,
                'example' => 'ehpcad.com',
              ),
              'AdIp' => 
              array (
                'description' => 'Windows AD服务器IP。',
                'type' => 'string',
                'required' => false,
                'example' => '192.168.1.2',
              ),
              'FallbackHomeDir' => 
              array (
                'description' => 'Linux服务器home目录。',
                'type' => 'string',
                'required' => false,
                'example' => '/home',
              ),
            ),
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7336',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidImage',
            'errorMessage' => 'The image ID is invalid.',
          ),
          4 => 
          array (
            'errorCode' => 'ImageNotMatched',
            'errorMessage' => 'The image is not matched.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7336\\"\\n}","errorExample":""},{"type":"xml","example":"<ModifyClusterAttributesResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7336</RequestId>\\r\\n</ModifyClusterAttributesResponse>","errorExample":""}]',
      'title' => '修改一个集群的属性',
      'summary' => '调用ModifyClusterAttributes修改指定集群的基本信息，包括修改集群名称、集群描述和集群镜像。',
      'description' => '## 接口说明
修改集群基本信息前，您可以调用[DescribeCluster](~~87126~~)查询选择集群的详细信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListClusters' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '显示的页码，起始值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Clusters' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ClusterInfoSimple' => 
                  array (
                    'description' => '集群详细信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'VpcId' => 
                        array (
                          'description' => 'VPC ID。',
                          'type' => 'string',
                          'example' => 'vpc-b3f3edefefeep0760yju****',
                        ),
                        'Status' => 
                        array (
                          'description' => '集群状态。可能值：
- uninit：未初始化
- creating：创建中
- init：初始化中
- running：运行中
- exception：异常
- releasing：释放中',
                          'type' => 'string',
                          'example' => 'running',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '集群创建时间。',
                          'type' => 'string',
                          'example' => '2020-10-30T07:39:20.000Z',
                        ),
                        'IsComputeEss' => 
                        array (
                          'description' => '是否启用弹性伸缩组。可能值：
- true：启用
- false：未启用',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'ComputeSpotStrategy' => 
                        array (
                          'description' => '计算节点竞价策略。可能值：
- NoSpot：正常按量付费实例。
- SpotWithPriceLimit：设置上限价格的抢占式实例。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格。',
                          'type' => 'string',
                          'example' => 'NoSpot',
                        ),
                        'AccountType' => 
                        array (
                          'description' => '账户服务器类型。可能值：
- nis
- ldap',
                          'type' => 'string',
                          'example' => 'nis',
                        ),
                        'Count' => 
                        array (
                          'description' => '集群计算节点数目。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '3',
                        ),
                        'EhpcVersion' => 
                        array (
                          'description' => 'EHPC版本。',
                          'type' => 'string',
                          'example' => '1.0.0',
                        ),
                        'Description' => 
                        array (
                          'description' => '集群描述。',
                          'type' => 'string',
                          'example' => 'clusterdescription',
                        ),
                        'BaseOsTag' => 
                        array (
                          'description' => '基础镜像操作系统标签，仅管控节点使用。',
                          'type' => 'string',
                          'example' => 'CentOS_7.2_64',
                        ),
                        'Name' => 
                        array (
                          'description' => '集群名称。',
                          'type' => 'string',
                          'example' => 'test',
                        ),
                        'ImageId' => 
                        array (
                          'description' => '镜像ID。',
                          'type' => 'string',
                          'example' => 'wi_1607_x64_dtc_zh_40G_alibase****',
                        ),
                        'ComputeSpotPriceLimit' => 
                        array (
                          'description' => '计算节点下ECS实例的每小时最高价格。返回值最多保留小数点后3位。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '0.034',
                        ),
                        'SchedulerType' => 
                        array (
                          'description' => '调度服务器类型。可能值：
- pbs
- slurm
- opengridscheduler
- deadline',
                          'type' => 'string',
                          'example' => 'pbs',
                        ),
                        'DeployMode' => 
                        array (
                          'description' => '集群部署模式。可能值：
- Standard：账号节点、调度节点、登录节点、计算节点分离部署。
- Advanced：HA模式部署。
- Simple：账号节点和调度节点混合部署在一个节点上，登录节点和计算节点分离部署。
- Tiny：账号节点、调度节点、登录节点混合部署在一个节点上，计算节点分离部署。',
                          'type' => 'string',
                          'example' => 'Standard',
                        ),
                        'NodeSuffix' => 
                        array (
                          'description' => '主机后缀名。',
                          'type' => 'string',
                          'example' => 'name',
                        ),
                        'ImageOwnerAlias' => 
                        array (
                          'description' => '镜像类型。可能值：
- system：公共镜像
- self：自定义镜像
- others：共享镜像
- marketplace：镜像市场镜像',
                          'type' => 'string',
                          'example' => 'system',
                        ),
                        'OsTag' => 
                        array (
                          'description' => '操作系统镜像标签。',
                          'type' => 'string',
                          'example' => 'CentOS_7.2_64',
                        ),
                        'NodePrefix' => 
                        array (
                          'description' => '主机前缀名。',
                          'type' => 'string',
                          'example' => 'test',
                        ),
                        'InstanceType' => 
                        array (
                          'description' => '计算节点实例规格。',
                          'type' => 'string',
                          'example' => 'ecs.n1.tiny',
                        ),
                        'RegionId' => 
                        array (
                          'description' => '地域ID。',
                          'type' => 'string',
                          'example' => 'cn-hangzhou',
                        ),
                        'InstanceChargeType' => 
                        array (
                          'description' => '集群实例付费类型。可能值：

- PostPaid：按量付费
- PrePaid：包年包月',
                          'type' => 'string',
                          'example' => 'PostPaid',
                        ),
                        'VSwitchId' => 
                        array (
                          'description' => '交换机ID。',
                          'type' => 'string',
                          'example' => 'vsw-bp1lfcjbfb099rrjn****',
                        ),
                        'ZoneId' => 
                        array (
                          'description' => '可用区ID。',
                          'type' => 'string',
                          'example' => 'cn-hangzhou-c',
                        ),
                        'LoginNodes' => 
                        array (
                          'description' => '登录节点列表。',
                          'type' => 'string',
                          'example' => '{"Id": "i-bp13x4is8pvdhws7e****"}',
                        ),
                        'Id' => 
                        array (
                          'description' => '集群ID。',
                          'type' => 'string',
                          'example' => 'ehpc-hz-jeJki6****',
                        ),
                        'Location' => 
                        array (
                          'description' => '集群所在位置。可能值：
- OnPremise：混合云集群。
- PublicCloud：公有云集群。',
                          'type' => 'string',
                          'example' => 'PublicCloud',
                        ),
                        'ClientVersion' => 
                        array (
                          'description' => '集群客户端版本。',
                          'type' => 'string',
                          'example' => '1.0.64',
                        ),
                        'ResourceGroupId' => 
                        array (
                          'description' => '资源组ID。您可以调用ListResourceGroups查询资源组ID。',
                          'type' => 'string',
                          'example' => 'rg-acfmxazb4ph****',
                        ),
                        'Managers' => 
                        array (
                          'description' => '管理节点信息。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'OperatingCount' => 
                            array (
                              'description' => '操作进行中的节点数量，包括初始化、安装中、释放中等状态的节点。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                            'ExceptionCount' => 
                            array (
                              'description' => '异常节点数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'StoppedCount' => 
                            array (
                              'description' => '停止节点数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Total' => 
                            array (
                              'description' => '总管理节点数目。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '2',
                            ),
                            'NormalCount' => 
                            array (
                              'description' => '正常节点数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                          ),
                        ),
                        'Computes' => 
                        array (
                          'description' => '计算节点信息。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'OperatingCount' => 
                            array (
                              'description' => '操作进行中的节点数量，包括初始化、安装中、释放中等状态的节点。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                            'ExceptionCount' => 
                            array (
                              'description' => '异常节点数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'StoppedCount' => 
                            array (
                              'description' => '停止节点数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Total' => 
                            array (
                              'description' => '总节点数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '2',
                            ),
                            'NormalCount' => 
                            array (
                              'description' => '正常节点数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                          ),
                        ),
                        'TotalResources' => 
                        array (
                          'description' => '集群资源总量。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Gpu' => 
                            array (
                              'description' => 'GPU资源。单位：卡。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Cpu' => 
                            array (
                              'description' => 'CPU资源。单位：核。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                            'Memory' => 
                            array (
                              'description' => '内存大小。单位为MiB。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1024',
                            ),
                          ),
                        ),
                        'UsedResources' => 
                        array (
                          'description' => '集群资源使用量。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Gpu' => 
                            array (
                              'description' => 'GPU资源。单位：卡。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Cpu' => 
                            array (
                              'description' => 'CPU资源。单位：核。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                            'Memory' => 
                            array (
                              'description' => '内存大小。单位为MiB。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1024',
                            ),
                          ),
                        ),
                        'HasPlugin' => 
                        array (
                          'description' => '集群是否使用了插件。取值范围：

- true：是

- false：否

默认值：false',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
          1 => 
          array (
            'errorCode' => 'EntityNotExist.Role',
            'errorMessage' => 'The role does not exist.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 1,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Clusters\\": {\\n    \\"ClusterInfoSimple\\": [\\n      {\\n        \\"VpcId\\": \\"vpc-b3f3edefefeep0760yju****\\",\\n        \\"Status\\": \\"running\\",\\n        \\"CreateTime\\": \\"2020-10-30T07:39:20.000Z\\",\\n        \\"IsComputeEss\\": false,\\n        \\"ComputeSpotStrategy\\": \\"NoSpot\\",\\n        \\"AccountType\\": \\"nis\\",\\n        \\"Count\\": 3,\\n        \\"EhpcVersion\\": \\"1.0.0\\",\\n        \\"Description\\": \\"clusterdescription\\",\\n        \\"BaseOsTag\\": \\"CentOS_7.2_64\\",\\n        \\"Name\\": \\"test\\",\\n        \\"ImageId\\": \\"wi_1607_x64_dtc_zh_40G_alibase****\\",\\n        \\"ComputeSpotPriceLimit\\": 0.034,\\n        \\"SchedulerType\\": \\"pbs\\",\\n        \\"DeployMode\\": \\"Standard\\",\\n        \\"NodeSuffix\\": \\"name\\",\\n        \\"ImageOwnerAlias\\": \\"system\\",\\n        \\"OsTag\\": \\"CentOS_7.2_64\\",\\n        \\"NodePrefix\\": \\"test\\",\\n        \\"InstanceType\\": \\"ecs.n1.tiny\\",\\n        \\"RegionId\\": \\"cn-hangzhou\\",\\n        \\"InstanceChargeType\\": \\"PostPaid\\",\\n        \\"VSwitchId\\": \\"vsw-bp1lfcjbfb099rrjn****\\",\\n        \\"ZoneId\\": \\"cn-hangzhou-c\\",\\n        \\"LoginNodes\\": \\"{\\\\\\"Id\\\\\\": \\\\\\"i-bp13x4is8pvdhws7e****\\\\\\"}\\",\\n        \\"Id\\": \\"ehpc-hz-jeJki6****\\",\\n        \\"Location\\": \\"PublicCloud\\",\\n        \\"ClientVersion\\": \\"1.0.64\\",\\n        \\"ResourceGroupId\\": \\"rg-acfmxazb4ph****\\",\\n        \\"Managers\\": {\\n          \\"OperatingCount\\": 1,\\n          \\"ExceptionCount\\": 0,\\n          \\"StoppedCount\\": 0,\\n          \\"Total\\": 2,\\n          \\"NormalCount\\": 1\\n        },\\n        \\"Computes\\": {\\n          \\"OperatingCount\\": 1,\\n          \\"ExceptionCount\\": 0,\\n          \\"StoppedCount\\": 0,\\n          \\"Total\\": 2,\\n          \\"NormalCount\\": 1\\n        },\\n        \\"TotalResources\\": {\\n          \\"Gpu\\": 0,\\n          \\"Cpu\\": 1,\\n          \\"Memory\\": 1024\\n        },\\n        \\"UsedResources\\": {\\n          \\"Gpu\\": 0,\\n          \\"Cpu\\": 1,\\n          \\"Memory\\": 1024\\n        },\\n        \\"HasPlugin\\": false\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListClustersResponse>\\n    <PageSize>1</PageSize>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <TotalCount>1</TotalCount>\\n    <Clusters>\\n        <VpcId>vpc-b3f3edefefeep0760yju****</VpcId>\\n        <Status>running</Status>\\n        <CreateTime>2020-10-30T07:39:20.000Z</CreateTime>\\n        <IsComputeEss>false</IsComputeEss>\\n        <ComputeSpotStrategy>NoSpot</ComputeSpotStrategy>\\n        <AccountType>nis</AccountType>\\n        <Count>3</Count>\\n        <EhpcVersion>1.0.0</EhpcVersion>\\n        <Description>clusterdescription</Description>\\n        <BaseOsTag>CentOS_7.2_64</BaseOsTag>\\n        <Name>test</Name>\\n        <ImageId>wi_1607_x64_dtc_zh_40G_alibase****</ImageId>\\n        <ComputeSpotPriceLimit>0.034</ComputeSpotPriceLimit>\\n        <SchedulerType>pbs</SchedulerType>\\n        <DeployMode>Standard</DeployMode>\\n        <NodeSuffix>name</NodeSuffix>\\n        <ImageOwnerAlias>system</ImageOwnerAlias>\\n        <OsTag>CentOS_7.2_64</OsTag>\\n        <NodePrefix>test</NodePrefix>\\n        <InstanceType>ecs.n1.tiny</InstanceType>\\n        <RegionId>cn-hangzhou</RegionId>\\n        <InstanceChargeType>PostPaid</InstanceChargeType>\\n        <VSwitchId>vsw-bp1lfcjbfb099rrjn****</VSwitchId>\\n        <ZoneId>cn-hangzhou-c</ZoneId>\\n        <LoginNodes>{\\"Id\\": \\"i-bp13x4is8pvdhws7e****\\"}</LoginNodes>\\n        <Id>ehpc-hz-jeJki6****</Id>\\n        <Location>PublicCloud</Location>\\n        <ClientVersion>1.0.64</ClientVersion>\\n        <Managers>\\n            <OperatingCount>1</OperatingCount>\\n            <ExceptionCount>0</ExceptionCount>\\n            <StoppedCount>0</StoppedCount>\\n            <Total>2</Total>\\n            <NormalCount>1</NormalCount>\\n        </Managers>\\n        <Computes>\\n            <OperatingCount>1</OperatingCount>\\n            <ExceptionCount>0</ExceptionCount>\\n            <StoppedCount>0</StoppedCount>\\n            <Total>2</Total>\\n            <NormalCount>1</NormalCount>\\n        </Computes>\\n        <TotalResources>\\n            <Gpu>0</Gpu>\\n            <Cpu>1</Cpu>\\n            <Memory>1024</Memory>\\n        </TotalResources>\\n        <UsedResources>\\n            <Gpu>0</Gpu>\\n            <Cpu>1</Cpu>\\n            <Memory>1024</Memory>\\n        </UsedResources>\\n        <HasPlugin>false</HasPlugin>\\n    </Clusters>\\n</ListClustersResponse>","errorExample":""}]',
      'title' => '查询每个地域拥有的集群列表',
      'summary' => '查询用户账号中在每个地域拥有的所有集群的列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListClustersMeta' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '显示的页码，起始值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'example' => '10',
            'default' => '100',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '每页显示的条数。可能值：1~50',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'DD517102-B314-4665-BDAC-A32DE7834D02',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Clusters' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ClusterInfoSimple' => 
                  array (
                    'description' => '集群简要信息数组。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '集群状态。可能值：
- uninit：未初始化
- creating：创建中
- Init：初始化中
- running：运行中
- exception：异常
- releasing：释放中',
                          'type' => 'string',
                          'example' => 'running',
                        ),
                        'VpcId' => 
                        array (
                          'description' => 'VPC ID。',
                          'type' => 'string',
                          'example' => 'vpc-b3f3edefefeep0760yju****',
                        ),
                        'SchedulerType' => 
                        array (
                          'description' => '调度服务器类型。可能值：
- pbs
- slurm
- opengridscheduler
- deadline',
                          'type' => 'string',
                          'example' => 'pbs',
                        ),
                        'DeployMode' => 
                        array (
                          'description' => '集群部署模式。可能值：
- Standard：账号节点、调度节点、登录节点、计算节点分离部署。
- Advanced：HA模式部署。
- Simple：账号节点和调度节点混合部署在一个节点上，登录节点和计算节点分离部署。
- Tiny：账号节点、调度节点、登录节点混合部署在一个节点上，计算节点分离部署。',
                          'type' => 'string',
                          'example' => 'Standard',
                        ),
                        'IsComputeEss' => 
                        array (
                          'description' => '是否启用弹性伸缩组。可能值：
- true：启用
- false：未启用',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'OsTag' => 
                        array (
                          'description' => '操作系统镜像标签。',
                          'type' => 'string',
                          'example' => 'CentOS_7.2_64',
                        ),
                        'AccountType' => 
                        array (
                          'description' => '账户服务器类型。可能值：
- nis
- ldap',
                          'type' => 'string',
                          'example' => 'nis',
                        ),
                        'Description' => 
                        array (
                          'description' => '集群描述。',
                          'type' => 'string',
                          'example' => 'clusterdescription',
                        ),
                        'Name' => 
                        array (
                          'description' => '集群名称。',
                          'type' => 'string',
                          'example' => 'cluster1',
                        ),
                        'Id' => 
                        array (
                          'description' => '集群ID。',
                          'type' => 'string',
                          'example' => 'ehpc-hz-jeJki6****',
                        ),
                        'Location' => 
                        array (
                          'description' => '集群所在位置。可能值：
- OnPremise：混合云集群。
- PublicCloud：公有云集群。',
                          'type' => 'string',
                          'example' => 'PublicCloud',
                        ),
                        'ClientVersion' => 
                        array (
                          'description' => '集群客户端版本。',
                          'type' => 'string',
                          'example' => '1.0.64',
                        ),
                        'HasPlugin' => 
                        array (
                          'description' => '集群是否使用了插件，取值范围：

- true：是

- false：否

默认值：false',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'EhpcVersion' => 
                        array (
                          'description' => 'EHPC版本。',
                          'type' => 'string',
                          'example' => '1.0.0',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 10,\\n  \\"RequestId\\": \\"DD517102-B314-4665-BDAC-A32DE7834D02\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Clusters\\": {\\n    \\"ClusterInfoSimple\\": [\\n      {\\n        \\"Status\\": \\"running\\",\\n        \\"VpcId\\": \\"vpc-b3f3edefefeep0760yju****\\",\\n        \\"SchedulerType\\": \\"pbs\\",\\n        \\"DeployMode\\": \\"Standard\\",\\n        \\"IsComputeEss\\": false,\\n        \\"OsTag\\": \\"CentOS_7.2_64\\",\\n        \\"AccountType\\": \\"nis\\",\\n        \\"Description\\": \\"clusterdescription\\",\\n        \\"Name\\": \\"cluster1\\",\\n        \\"Id\\": \\"ehpc-hz-jeJki6****\\",\\n        \\"Location\\": \\"PublicCloud\\",\\n        \\"ClientVersion\\": \\"1.0.64\\",\\n        \\"HasPlugin\\": false,\\n        \\"EhpcVersion\\": \\"1.0.0\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListClustersMetaResponse>\\n    <PageSize>10</PageSize>\\n    <RequestId>DD517102-B314-4665-BDAC-A32DE7834D02</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <TotalCount>1</TotalCount>\\n    <Clusters>\\n        <Status>running</Status>\\n        <VpcId>vpc-b3f3edefefeep0760yju****</VpcId>\\n        <SchedulerType>pbs</SchedulerType>\\n        <DeployMode>Standard</DeployMode>\\n        <IsComputeEss>false</IsComputeEss>\\n        <OsTag>CentOS_7.2_64</OsTag>\\n        <AccountType>nis</AccountType>\\n        <Description>clusterdescription</Description>\\n        <Name>cluster1</Name>\\n        <Id>ehpc-hz-jeJki6****</Id>\\n        <Location>PublicCloud</Location>\\n        <ClientVersion>1.0.64</ClientVersion>\\n        <HasPlugin>false</HasPlugin>\\n    </Clusters>\\n</ListClustersMetaResponse>","errorExample":""}]',
      'title' => '查询集群元列表',
      'summary' => '调用ListClustersMeta查询集群元数据列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'StartCluster' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定启动的集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TaskId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => '76E1ADE7-D15A-457F-AAFD-06C5A5F0****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '76E1ADE7-D15A-457F-AAFD-06C5A5F0****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TaskId\\": \\"76E1ADE7-D15A-457F-AAFD-06C5A5F0****\\",\\n  \\"RequestId\\": \\"76E1ADE7-D15A-457F-AAFD-06C5A5F0****\\"\\n}","errorExample":""},{"type":"xml","example":"<StartClusterResponse>\\n    <TaskId>76E1ADE7-D15A-457F-AAFD-06C5A5F0****</TaskId>\\n    <RequestId>76E1ADE7-D15A-457F-AAFD-06C5A5F0****</RequestId>\\n</StartClusterResponse>","errorExample":""}]',
      'title' => '启动一个集群',
      'summary' => '调用StartCluster启动指定集群。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'StopCluster' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定停止的集群ID。

您可以调用[ListClusters](~~87116~~)查询集群列表。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TaskId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TaskId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<StopClusterResponse>\\n    <TaskId>04F0F334-1335-436C-A1D7-6C044FE7****</TaskId>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n</StopClusterResponse>","errorExample":""}]',
      'title' => '停止一个集群',
      'summary' => '调用StopCluster停止指定集群。',
      'description' => '停止集群后，集群中包年包月的节点计费不受影响，按量付费的节点如果开启了<i>节省停机模式</i>功能，将不再收取计算资源的费用。更多信息，请参见[按量付费实例节省停机模式](~~63353~~)。',
    ),
    'RecoverCluster' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定重置并修复的集群ID。并且，集群状态必须为exception（异常）时才能修复。

您可以通过调用[ListClusters](~~87116~~)获取集群ID及集群状态。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'OsTag',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '操作系统镜像标签。

您可以通过[ListImages](~~87213~~)和[ListCustomImages](~~87215~~)查询E-HPC支持的镜像标签。',
            'type' => 'string',
            'required' => false,
            'example' => 'CentOS_7.2_64',
          ),
        ),
        2 => 
        array (
          'name' => 'AccountType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '账户服务类型。取值范围：
- nis
- ldap

默认值：nis',
            'type' => 'string',
            'required' => false,
            'example' => 'nis',
          ),
        ),
        3 => 
        array (
          'name' => 'SchedulerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '调度服务器类型。取值范围：
- pbs
- slurm
- opengridscheduler
- deadline

默认值：pbs',
            'type' => 'string',
            'required' => false,
            'example' => 'pbs',
          ),
        ),
        4 => 
        array (
          'name' => 'ImageOwnerAlias',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像类型。取值范围：
- system：公共镜像
- self：自定义镜像
- others：共享镜像

默认值：system',
            'type' => 'string',
            'required' => false,
            'example' => 'system',
          ),
        ),
        5 => 
        array (
          'name' => 'ImageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像ID。

您可以通过[ListImages](~~87213~~)和[ListCustomImages](~~87215~~)查询E-HPC可安装的镜像。',
            'type' => 'string',
            'required' => false,
            'example' => 'm-bp18133n0335yq****',
          ),
        ),
        6 => 
        array (
          'name' => 'ClientVersion',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群所使用的客户端版本号，默认为最新版本。

您可以调用[ListCurrentClientVersion](~~87223~~)查询当前最新客户端版本号。',
            'type' => 'string',
            'required' => false,
            'example' => '1.0.76',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TaskId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => '18FB21E3-F423-4B84-BB63-D8887A29****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '18FB21E3-F423-4B84-BB63-D8887A29****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
          2 => 
          array (
            'errorCode' => 'OrderError.InsufficientBalance',
            'errorMessage' => 'The account balance is insufficient. Please add funds first and try again.',
          ),
          3 => 
          array (
            'errorCode' => 'OrderError.InstHasUnpaidOrder',
            'errorMessage' => 'Your account has an unpaid order.',
          ),
          4 => 
          array (
            'errorCode' => 'OrderError.Arrearage',
            'errorMessage' => 'Your account balance is less than CNY 100. Please add funds to your account and try again.',
          ),
          5 => 
          array (
            'errorCode' => 'OrderError.NoCard',
            'errorMessage' => 'No credit card is bound to your account.',
          ),
          6 => 
          array (
            'errorCode' => 'OrderError.InvalidPayMethod',
            'errorMessage' => 'No valid default payment method is specified for your account.',
          ),
          7 => 
          array (
            'errorCode' => 'OrderError.NoRealNameAuthentication',
            'errorMessage' => 'You have not completed the real name authentication.',
          ),
          8 => 
          array (
            'errorCode' => 'OrderError.NoRealNameRegistration',
            'errorMessage' => 'Real name registration is required for instances launched in mainland China.',
          ),
          9 => 
          array (
            'errorCode' => 'OrderError.UserProfileIncomplete',
            'errorMessage' => 'You have not completed your user profile.',
          ),
          10 => 
          array (
            'errorCode' => 'InvalidVpc',
            'errorMessage' => 'The specified VPC is invalid.',
          ),
          11 => 
          array (
            'errorCode' => 'InvalidVolume',
            'errorMessage' => 'The specified volume is invalid.',
          ),
          12 => 
          array (
            'errorCode' => 'InvalidSoftware',
            'errorMessage' => 'The specified software is not supported.',
          ),
          13 => 
          array (
            'errorCode' => 'InvalidVolumeProtocal',
            'errorMessage' => 'The specified volume protocol is invalid.',
          ),
          14 => 
          array (
            'errorCode' => 'InvalidVolumeMountpoint',
            'errorMessage' => 'The specified volume mount point is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'TooManyClusters',
            'errorMessage' => 'The number of user clusters exceeds the quota.',
          ),
          1 => 
          array (
            'errorCode' => 'TooManyComputes',
            'errorMessage' => 'The number of computing nodes exceeds the quota.',
          ),
          2 => 
          array (
            'errorCode' => 'TooManyLogins',
            'errorMessage' => 'The maximum number of logged on nodes is exceeded.',
          ),
          3 => 
          array (
            'errorCode' => 'TooManyScc',
            'errorMessage' => 'The maximum number of SCC instances is exceeded.',
          ),
          4 => 
          array (
            'errorCode' => 'QuotaExceeded.PrivateIpAddress',
            'errorMessage' => 'Insufficient private IP addresses in vSwitch: %s.',
          ),
          5 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          6 => 
          array (
            'errorCode' => 'ImageNotSupported',
            'errorMessage' => 'The specified image is not supported.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'VolumeNotFound',
            'errorMessage' => 'The specified volume does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'VpcNotFound',
            'errorMessage' => 'The specified VPC does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'NasError',
            'errorMessage' => 'NAS API request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'EipError',
            'errorMessage' => 'The EIP API request failed.',
          ),
          3 => 
          array (
            'errorCode' => 'OrderError',
            'errorMessage' => 'An order request error occurred.',
          ),
          4 => 
          array (
            'errorCode' => 'FailToGenId',
            'errorMessage' => 'Generating cluster ID failed.',
          ),
          5 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          6 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TaskId\\": \\"18FB21E3-F423-4B84-BB63-D8887A29****\\",\\n  \\"RequestId\\": \\"18FB21E3-F423-4B84-BB63-D8887A29****\\"\\n}","errorExample":""},{"type":"xml","example":"<RecoverClusterResponse>\\n    <TaskId>18FB21E3-F423-4B84-BB63-D8887A29****</TaskId>\\n    <RequestId>18FB21E3-F423-4B84-BB63-D8887A29****</RequestId>\\n</RecoverClusterResponse>    ","errorExample":""}]',
      'title' => '重置并修复集群',
      'summary' => '调用RecoverCluster重置并修复异常集群。',
      'description' => '仅当集群状态为exception（异常）时，才能调用该接口重置并修复集群。您可以通过调用[ListClusters](~~87116~~)获取集群ID及集群状态。
建议您操作前导出所有作业数据。重置并修复集群会有以下影响：
- 集群所有节点执行更换系统盘的操作，按创建集群时的配置重新配置系统盘。
- 集群所有节点的系统盘和数据盘的数据将会丢失，包括用户信息、作业信息、调度器队列信息、自动伸缩队列配置信息，但文件存储NAS上的数据仍然保留。
- 集群自建队列被清除，节点实例继续保留，并全部迁移到集群默认队列中。',
    ),
    'DeleteCluster' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定释放的集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-QKKVqO****',
          ),
        ),
        1 => 
        array (
          'name' => 'ReleaseInstance',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否释放由E-HPC创建的ECS实例。

默认值：true',
            'type' => 'string',
            'required' => false,
            'example' => 'true',
            'enum' => 
            array (
              0 => 'true',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TaskId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => 'F1AB6D8D-E185-4D94-859C-7CE7B8B7****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'F1AB6D8D-E185-4D94-859C-7CE7B8B7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TaskId\\": \\"F1AB6D8D-E185-4D94-859C-7CE7B8B7****\\",\\n  \\"RequestId\\": \\"F1AB6D8D-E185-4D94-859C-7CE7B8B7****\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteClusterResponse>\\n    <TaskId>F1AB6D8D-E185-4D94-859C-7CE7B8B7****</TaskId>\\n    <RequestId>F1AB6D8D-E185-4D94-859C-7CE7B8B7****</RequestId>\\n</DeleteClusterResponse>","errorExample":""}]',
      'title' => '释放一个集群',
      'summary' => '调用DeleteCluster释放指定集群。',
      'description' => '## 接口说明
集群释放后不可恢复，集群中按量付费的节点将立即释放，到期前的包年包月节点会保留，到期后的包年包月节点会自动释放。如果您需要释放到期前的包年包月节点，请申请退款或转为按量付费实例后再释放。请确认不再使用该集群后再进行释放集群的操作。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateHybridCluster' => 
    array (
      'summary' => '调用CreateHybridCluster创建一个混合云集群。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ZoneId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可用区ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-hangzhou-b',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群名称。长度2~64字符，只允许包含中文、字母、数字、短划线（-）和下划线（_），必须以字母或中文开头。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'hybridcluster',
          ),
        ),
        2 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群描述信息。长度为2~256个英文或中文字符，不能以http://和https://开头。

默认值：空',
            'type' => 'string',
            'required' => false,
            'example' => 'TestDescription',
          ),
        ),
        3 => 
        array (
          'name' => 'EhpcVersion',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'E-HPC产品版本号。默认使用最新版本。',
            'type' => 'string',
            'required' => false,
            'example' => '1.0.0',
          ),
        ),
        4 => 
        array (
          'name' => 'ClientVersion',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群客户端版本。默认使用最新版本。',
            'type' => 'string',
            'required' => false,
            'example' => '1.0.64',
          ),
        ),
        5 => 
        array (
          'name' => 'OsTag',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '操作系统镜像标签，您可以调用[ListImages](~~87213~~)接口查询。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'CentOS_7.2_64',
          ),
        ),
        6 => 
        array (
          'name' => 'Domain',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '域账号服务类型。取值范围：
- nis
- ldap

默认值：nis',
            'type' => 'string',
            'required' => false,
            'example' => 'nis',
          ),
        ),
        7 => 
        array (
          'name' => 'Location',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群所在的位置。位置固定为混合云集群，取值：OnPremise。',
            'type' => 'string',
            'required' => false,
            'example' => 'OnPremise',
          ),
        ),
        8 => 
        array (
          'name' => 'SecurityGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '使用已有安全组ID创建集群。
> 当指定该参数时，不能同时指定`SecurityGroupName`参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'sg-bp13n61xsydodfyg****',
          ),
        ),
        9 => 
        array (
          'name' => 'SecurityGroupName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '如果不使用已有安全组，则使用此名称创建新安全组，应用默认策略。
> 当指定该参数时，不能同时指定`SecurityGroupId`参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'ehpc-SecurityGroup',
          ),
        ),
        10 => 
        array (
          'name' => 'VpcId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群所属的VPC ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'vpc-b3f3edefefeep0760yju****',
          ),
        ),
        11 => 
        array (
          'name' => 'VSwitchId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '交换机ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'vsw-bp1lfcjbfb099rrjn****',
          ),
        ),
        12 => 
        array (
          'name' => 'EcsOrder.Manager.InstanceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '混合云集群云上管理节点规格。目前仅支持代理模式。',
            'type' => 'string',
            'required' => false,
            'example' => 'ecs.n1.tiny',
          ),
        ),
        13 => 
        array (
          'name' => 'EcsOrder.Compute.InstanceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群计算节点实例规格。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ecs.n1.tiny',
          ),
        ),
        14 => 
        array (
          'name' => 'VolumeType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '文件系统类型。目前仅支持NAS。',
            'type' => 'string',
            'required' => false,
            'example' => 'NAS',
            'default' => 'nas',
          ),
        ),
        15 => 
        array (
          'name' => 'VolumeId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '存储实例ID。目前不支持自动创建阿里云NAS实例。',
            'type' => 'string',
            'required' => false,
            'example' => '008b64****',
          ),
        ),
        16 => 
        array (
          'name' => 'VolumeProtocol',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '共享存储的协议类型。目前仅支持NFS。',
            'type' => 'string',
            'required' => false,
            'example' => 'NFS',
            'default' => 'nfs',
          ),
        ),
        17 => 
        array (
          'name' => 'VolumeMountpoint',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'NAS的VPC挂载点。目前不支持自动创建阿里云NAS挂载点。',
            'type' => 'string',
            'required' => false,
            'example' => '008b648bcb-s****.cn-hangzhou.nas.aliyuncs.com',
          ),
        ),
        18 => 
        array (
          'name' => 'RemoteDirectory',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '挂载文件系统的远程目录。',
            'type' => 'string',
            'required' => false,
            'example' => '/RemoteDirectory',
          ),
        ),
        19 => 
        array (
          'name' => 'OnPremiseVolumeProtocol',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '本地共享存储协议。目前仅支持NFS。',
            'type' => 'string',
            'required' => false,
            'example' => 'NFS',
          ),
        ),
        20 => 
        array (
          'name' => 'OnPremiseVolumeMountPoint',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '本地文件系统挂载点。',
            'type' => 'string',
            'required' => false,
            'example' => 'RemoteNasDomain.com',
          ),
        ),
        21 => 
        array (
          'name' => 'OnPremiseVolumeRemotePath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '本地文件系统挂载路径。',
            'type' => 'string',
            'required' => false,
            'example' => ' /RemoteDirectory',
          ),
        ),
        22 => 
        array (
          'name' => 'OnPremiseVolumeLocalPath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '本地文件系统挂载到云上节点的路径。',
            'type' => 'string',
            'required' => false,
            'example' => '/OnCloudDirectory',
          ),
        ),
        23 => 
        array (
          'name' => 'Password',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '登录节点的root密码。长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。特殊符号可以是：
`() ~ ! @ # $ % ^ & * - = + | { } [ ] : ; ‘ < > , . ? / `

> 建议使用HTTPS协议调用API避免密码泄露。',
            'type' => 'string',
            'required' => false,
            'example' => '123****',
          ),
        ),
        24 => 
        array (
          'name' => 'KeyPairName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '密钥对名称。长度为2~128个英文或中文字符。必须以大小字母或中文开头，不能以http://和https://开头。可以包含数字、半角冒号（:）、下划线（_）或者短划线（-）。
>如果您要使用ECS密钥对功能，具体操作，请参见[创建密钥对](~~51793~~)。',
            'type' => 'string',
            'required' => false,
            'example' => 'test',
          ),
        ),
        25 => 
        array (
          'name' => 'JobQueue',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '扩容节点默认加入的队列。',
            'type' => 'string',
            'required' => false,
            'example' => 'workq',
          ),
        ),
        26 => 
        array (
          'name' => 'ResourceGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源组ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'rg-acfmxazb4ph****',
          ),
        ),
        27 => 
        array (
          'name' => 'HybridClusterOpMode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '代理节点管理线下节点模式。取值范围：

- SSH：表示SSH登录方式管理。
- CA：表示云助手方式下发管理。',
            'type' => 'string',
            'required' => false,
            'example' => 'SSH',
          ),
        ),
        28 => 
        array (
          'name' => 'SchedulerPreInstall',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '业务镜像是否已预安装调度器。取值范围：
- true：已预安装，创建或扩容节点时无需执行安装调度器流程。
- false：未预安装，创建或扩容节点时需要执行安装调度器流程。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        29 => 
        array (
          'name' => 'ComputeSpotStrategy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点抢占策略。取值范围：
- NoSpot：正常按量付费实例。
- SpotWithPriceLimit：设置上限价格的抢占式实例。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格。

默认值：NoSpot',
            'type' => 'string',
            'required' => false,
            'example' => 'NoSpot',
          ),
        ),
        30 => 
        array (
          'name' => 'ComputeSpotPriceLimit',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点下ECS实例的每小时最高价格。支持最多3位小数，参数ComputeSpotStrategy取值为SpotWithPriceLimit时生效。',
            'type' => 'number',
            'format' => 'float',
            'required' => false,
            'example' => '0.034',
          ),
        ),
        31 => 
        array (
          'name' => 'ImageOwnerAlias',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像类型。取值范围：
- system：公共镜像
- self：自定义镜像
- others：共享镜像
- marketplace：镜像市场镜像',
            'type' => 'string',
            'required' => false,
            'example' => 'system',
          ),
        ),
        32 => 
        array (
          'name' => 'ImageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'wi_1607_x64_dtc_zh_40G_alibase****',
          ),
        ),
        33 => 
        array (
          'name' => 'ClientToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。更多信息，请参见[如何保证幂等性](~~25693~~)。',
            'type' => 'string',
            'required' => false,
            'example' => '123e4567-e89b-12d3-a456-426655440000',
          ),
        ),
        34 => 
        array (
          'name' => 'MultiOs',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群是否支持多操作系统。取值范围：
- true：支持多操作系统。
- false：不支持多操作系统。

默认值：false',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        35 => 
        array (
          'name' => 'Nodes',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '本地集群节点信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '节点信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'SchedulerType' => 
                array (
                  'description' => '本地集群节点的调度器类型。取值范围：
- pbs
- slurm
- opengridscheduler
- deadline

默认值：pbs',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'pbs',
                ),
                'IpAddress' => 
                array (
                  'description' => '本地集群节点的IP地址。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '00b648b****',
                ),
                'HostName' => 
                array (
                  'description' => '本地集群节点的主机名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'test1',
                ),
                'Role' => 
                array (
                  'description' => '本地集群节点的角色。取值范围：
- Manager：管控节点
- Login：登录节点
- Compute：计算节点',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'Compute',
                ),
                'AccountType' => 
                array (
                  'description' => '本地集群节点的域账号服务类型。取值范围：
- nis
- ldap

默认值：nis',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'nis',
                ),
                'Dir' => 
                array (
                  'description' => '本地集群节点的配置目录。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '/opt/sge/default/',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
        36 => 
        array (
          'name' => 'Application',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '应用软件信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '应用软件标签信息。最多可绑定5个标签。',
              'type' => 'object',
              'properties' => 
              array (
                'Tag' => 
                array (
                  'description' => '应用软件的标签。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'OpenMPI_11.1',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
        37 => 
        array (
          'name' => 'PostInstallScript',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '安装后脚本信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '安装后脚本信息。最多可配置16个安装后脚本。',
              'type' => 'object',
              'properties' => 
              array (
                'Args' => 
                array (
                  'description' => '安装后脚本的执行参数。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'bash file.sh',
                ),
                'Url' => 
                array (
                  'description' => '安装后脚本的全路径。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '/opt/job.sh',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 16,
          ),
        ),
        38 => 
        array (
          'name' => 'Plugin',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '插件模式配置，仅当SchedulerType为custom生效。

格式为JSON字符串，包含pluginMod、pluginLocalPath、pluginOssPath三个参数，具体参数说明如下：

- pluginMod：插件模式，支持以下两种模式：

    - oss模式：将从OSS上下载插件解压到本地pluginLocalPath中。

    -  image模式：默认插件已经放置到pluginLocalPath。

- pluginLocalPath：插件存放的本地路径，建议在oss模式下选择共享存储目录，image模式下选择非共享存储目录。

- pluginOssPath：插件放置在OSS上的远程路径，仅当pluginMod等于oss生效。',
            'type' => 'string',
            'required' => false,
            'example' => '{"pluginMod": "oss","pluginLocalPath": "/opt/plugin","pluginOssPath": "https://bucket.oss-cn-hangzhou.aliyuncs.com/plugin/plugin.tgz"}',
          ),
        ),
        39 => 
        array (
          'name' => 'OpenldapPar',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => '对接OpenLDAP服务器参数。',
            'type' => 'object',
            'properties' => 
            array (
              'LdapServerIp' => 
              array (
                'description' => 'LDAP服务器IP。',
                'type' => 'string',
                'required' => false,
                'example' => '192.168.1.2',
              ),
              'BaseDn' => 
              array (
                'description' => 'LDAP服务器BaseDN。',
                'type' => 'string',
                'required' => false,
                'example' => 'ehpctest',
              ),
              'FallbackHomeDir' => 
              array (
                'description' => 'Linux服务器home目录。',
                'type' => 'string',
                'required' => false,
                'example' => '/home',
              ),
            ),
            'required' => false,
          ),
        ),
        40 => 
        array (
          'name' => 'WinAdPar',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => '对接Windows AD服务器参数。',
            'type' => 'object',
            'properties' => 
            array (
              'AdUser' => 
              array (
                'description' => 'AD用户。',
                'type' => 'string',
                'required' => false,
                'example' => 'Administrator',
              ),
              'AdUserPasswd' => 
              array (
                'description' => 'AD用户密码。',
                'type' => 'string',
                'required' => false,
                'example' => 'xxxxxx',
              ),
              'AdDc' => 
              array (
                'description' => 'AD域名称。',
                'type' => 'string',
                'required' => false,
                'example' => 'ad-hybrid001.ehpcad.com',
              ),
              'AdIp' => 
              array (
                'description' => 'AD域IP。',
                'type' => 'string',
                'required' => false,
                'example' => '192.168.1.2',
              ),
            ),
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'F6757FA4-8FED-4602-B7F5-3550C0842122',
              ),
              'TaskId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => 'F6757FA4-8FED-4602-B7F5-3550C0842122',
              ),
              'ClusterId' => 
              array (
                'description' => '集群ID。',
                'type' => 'string',
                'example' => 'ehpc-hz-FYUr32****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
          3 => 
          array (
            'errorCode' => 'OrderError.InsufficientBalance',
            'errorMessage' => 'The account balance is insufficient. Please add funds first and try again.',
          ),
          4 => 
          array (
            'errorCode' => 'OrderError.InstHasUnpaidOrder',
            'errorMessage' => 'Your account has an unpaid order.',
          ),
          5 => 
          array (
            'errorCode' => 'OrderError.Arrearage',
            'errorMessage' => 'Your account balance is less than CNY 100. Please add funds to your account and try again.',
          ),
          6 => 
          array (
            'errorCode' => 'OrderError.NoCard',
            'errorMessage' => 'No credit card is bound to your account.',
          ),
          7 => 
          array (
            'errorCode' => 'OrderError.InvalidPayMethod',
            'errorMessage' => 'No valid default payment method is specified for your account.',
          ),
          8 => 
          array (
            'errorCode' => 'OrderError.NoRealNameAuthentication',
            'errorMessage' => 'You have not completed the real name authentication.',
          ),
          9 => 
          array (
            'errorCode' => 'OrderError.NoRealNameRegistration',
            'errorMessage' => 'Real name registration is required for instances launched in mainland China.',
          ),
          10 => 
          array (
            'errorCode' => 'OrderError.UserProfileIncomplete',
            'errorMessage' => 'You have not completed your user profile.',
          ),
          11 => 
          array (
            'errorCode' => 'InvalidVpc',
            'errorMessage' => 'The specified VPC is invalid.',
          ),
          12 => 
          array (
            'errorCode' => 'InvalidVolume',
            'errorMessage' => 'The specified volume is invalid.',
          ),
          13 => 
          array (
            'errorCode' => 'InvalidSoftware',
            'errorMessage' => 'The specified software is not supported.',
          ),
          14 => 
          array (
            'errorCode' => 'InvalidVolumeProtocal',
            'errorMessage' => 'The specified volume protocol is invalid.',
          ),
          15 => 
          array (
            'errorCode' => 'InvalidVolumeMountpoint',
            'errorMessage' => 'The specified volume mount point is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'TooManyClusters',
            'errorMessage' => 'The number of user clusters exceeds the quota.',
          ),
          1 => 
          array (
            'errorCode' => 'TooManyComputes',
            'errorMessage' => 'The number of computing nodes exceeds the quota.',
          ),
          2 => 
          array (
            'errorCode' => 'TooManyLogins',
            'errorMessage' => 'The maximum number of logged on nodes is exceeded.',
          ),
          3 => 
          array (
            'errorCode' => 'TooManyScc',
            'errorMessage' => 'The maximum number of SCC instances is exceeded.',
          ),
          4 => 
          array (
            'errorCode' => 'QuotaExceeded.PrivateIpAddress',
            'errorMessage' => 'Insufficient private IP addresses in vSwitch: %s.',
          ),
          5 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          6 => 
          array (
            'errorCode' => 'ImageNotSupported',
            'errorMessage' => 'The specified image is not supported.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'VolumeNotFound',
            'errorMessage' => 'The specified volume does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'VpcNotFound',
            'errorMessage' => 'The specified VPC does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'NasError',
            'errorMessage' => 'NAS API request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'NasServiceNotOpen',
            'errorMessage' => 'The NAS service is not activated.',
          ),
          3 => 
          array (
            'errorCode' => 'EipError',
            'errorMessage' => 'The EIP API request failed.',
          ),
          4 => 
          array (
            'errorCode' => 'OrderError',
            'errorMessage' => 'An order request error occurred.',
          ),
          5 => 
          array (
            'errorCode' => 'FailToGenId',
            'errorMessage' => 'Generating cluster ID failed.',
          ),
          6 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          7 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'No authorization is granted.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"F6757FA4-8FED-4602-B7F5-3550C0842122\\",\\n  \\"TaskId\\": \\"F6757FA4-8FED-4602-B7F5-3550C0842122\\",\\n  \\"ClusterId\\": \\"ehpc-hz-FYUr32****\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateHybridClusterResponse>\\r\\n      <RequestId>F6757FA4-8FED-4602-B7F5-3550C0842122</RequestId>\\r\\n      <TaskId>F6757FA4-8FED-4602-B7F5-3550C0842122</TaskId>\\r\\n      <ClusterId>ehpc-hz-FYUr32****</ClusterId>\\r\\n</CreateHybridClusterResponse>","errorExample":""}]',
      'title' => '创建一个E-HPC混合云集群',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'AddLocalNodes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Nodes',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '本地计算节点信息。JSON格式的字符串，包含本地节点的HostName、IpAddress、CpuCores、Memory（单位MB）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '[{"HostName":"test-HostName","IpAddress":"192.168.**.**"},{"CpuCores":2,"Memory":1024}]',
          ),
        ),
        2 => 
        array (
          'name' => 'Queue',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '本地计算节点所加入的调度器队列信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'test.q',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'InstanceIds' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'InstanceId' => 
                  array (
                    'description' => '集群中本地计算节点的信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '集群中本地计算节点的信息列表。',
                      'type' => 'string',
                      'example' => '[{"HostName":"test-HostName","IpAddress":"192.168.**.**"},{"CpuCores":2,"Memory":1024}]',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidOpt',
            'errorMessage' => 'The specified operation is invalid. Please try again later. If the problem still exists, submit a ticket.',
          ),
          2 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'VolumeNotFound',
            'errorMessage' => 'The specified volume does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
          3 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"InstanceIds\\": {\\n    \\"InstanceId\\": [\\n      \\"[{\\\\\\"HostName\\\\\\":\\\\\\"test-HostName\\\\\\",\\\\\\"IpAddress\\\\\\":\\\\\\"192.168.**.**\\\\\\"},{\\\\\\"CpuCores\\\\\\":2,\\\\\\"Memory\\\\\\":1024}]\\"\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<AddLocalNodesResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\n    <InstanceIds>[{\\"HostName\\":\\"test-HostName\\",\\"IpAddress\\":\\"192.168.**.**\\"},{\\"CpuCores\\":2,\\"Memory\\":1024}]</InstanceIds>\\n</AddLocalNodesResponse>","errorExample":""}]',
      'title' => '增加本地计算节点到云集群',
      'summary' => '增加本地计算节点到混合云集群或者云上集群。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetHybridClusterConfig' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Node',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '本地计算节点名称，获取本地计算节点配置信息。

默认获取集群的配置信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'testNode',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'ClusterConfig' => 
              array (
                'description' => '配置信息。用于配置本地集群节点。
- 若参数Node为空，获取的是混合云集群的配置信息。
- 若参数Node为指定本地计算节点，获取的是本地计算节点的配置信息。',
                'type' => 'string',
                'example' => 'ClNjaGcyI6W119Cg****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidOpt',
            'errorMessage' => 'The specified operation is invalid. Please try again later. If the problem still exists, submit a ticket.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"ClusterConfig\\": \\"ClNjaGcyI6W119Cg****\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\"\\n}","errorExample":""},{"type":"xml","example":"<AddLocalNodesResponse>\\r\\n            <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\r\\n            <ClusterConfig>ClNjaGcyI6W119Cg****</ClusterConfig>\\r\\n</AddLocalNodesResponse>","errorExample":""}]',
      'title' => '获取混合云集群配置',
      'summary' => '调用GetHybridClusterConfig获取指定混合云集群或指定计算节点的配置信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SyncUsers' => 
    array (
      'summary' => '调用SyncUsers在混合云代理模式下，同步本地集群用户到线上混合云集群中。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '地域ID。

您可以调用[ListRegions](~~188593~~)查询可以使用E-HPC的地域列表。


',
            'type' => 'string',
            'required' => true,
            'example' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以调用[ListClusters](~~87116~~)查询可以使用E-HPC的集群列表。

',
            'type' => 'string',
            'required' => true,
            'example' => 'ehpc-hz-gh5WKb****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The parameters are invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
          1 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError.Account.UserSynFailure',
            'errorMessage' => 'synchronize users failed: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<SyncUsersResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n</SyncUsersResponse>","errorExample":""}]',
      'title' => '同步本地集群用户到线上混合云集群',
    ),
    'ListPreferredEcsTypes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ZoneId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可用区ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'cn-hangzhou-b',
          ),
        ),
        1 => 
        array (
          'name' => 'SpotStrategy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'ECS实例竞价策略。取值范围：
- NoSpot：正常按量付费实例。
- SpotWithPriceLimit：设置上限价格的抢占式实例。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格。',
            'type' => 'string',
            'required' => false,
            'example' => 'NoSpot',
            'default' => 'NoSpot',
          ),
        ),
        2 => 
        array (
          'name' => 'InstanceChargeType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'ECS实例的付费类型。取值范围：
- PostPaid：按量付费。
- PrePaid：包年包月。',
            'type' => 'string',
            'required' => false,
            'example' => 'PostPaid',
            'default' => 'PostPaid',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'SupportSpotInstance' => 
              array (
                'description' => '是否支持竞价实例。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'Series' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'SeriesInfo' => 
                  array (
                    'description' => '推荐的ECS实例列表，每个系列包含E-HPC集群各种节点对应的推荐规格。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'SeriesName' => 
                        array (
                          'description' => '实例系列名称。可能值：
- SeriesHighCompute。
- SeriesHighMem。
- SeriesGPU。
- SeriesAll。',
                          'type' => 'string',
                          'example' => 'SeriesAll',
                        ),
                        'SeriesId' => 
                        array (
                          'description' => 'ECS实例系列ID。可能值：
- HighCompute：高计算。
- HighMem：高存储。
- GPU：GPU。
- All：代表全部可选项。',
                          'type' => 'string',
                          'example' => 'All',
                        ),
                        'Roles' => 
                        array (
                          'description' => 'E-HPC集群各类节点推荐的规格信息。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Manager' => 
                            array (
                              'type' => 'object',
                              'properties' => 
                              array (
                                'InstanceTypeId' => 
                                array (
                                  'description' => '管控节点推荐使用的ECS规格列表。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '管控节点推荐使用的ECS规格列表。',
                                    'type' => 'string',
                                    'example' => '[ "ecs.sn1ne.2xlarge", "ecs.sn1ne.4xlarge", "ecs.n1.tiny" ]',
                                  ),
                                ),
                              ),
                            ),
                            'Compute' => 
                            array (
                              'type' => 'object',
                              'properties' => 
                              array (
                                'InstanceTypeId' => 
                                array (
                                  'description' => '计算节点推荐使用的ECS规格列表。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '计算节点推荐使用的ECS规格列表。',
                                    'type' => 'string',
                                    'example' => '[ "ecs.sn1ne.2xlarge", "ecs.sn1ne.4xlarge", "ecs.n1.tiny" ]',
                                  ),
                                ),
                              ),
                            ),
                            'Login' => 
                            array (
                              'type' => 'object',
                              'properties' => 
                              array (
                                'InstanceTypeId' => 
                                array (
                                  'description' => '登录节点推荐使用的ECS规格列表。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '登录节点推荐使用的ECS规格列表。',
                                    'type' => 'string',
                                    'example' => '[ "ecs.sn1ne.2xlarge", "ecs.sn1ne.4xlarge", "ecs.n1.tiny" ]',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"SupportSpotInstance\\": true,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"Series\\": {\\n    \\"SeriesInfo\\": [\\n      {\\n        \\"SeriesName\\": \\"SeriesAll\\",\\n        \\"SeriesId\\": \\"All\\",\\n        \\"Roles\\": {\\n          \\"Manager\\": {\\n            \\"InstanceTypeId\\": [\\n              \\"[ \\\\\\"ecs.sn1ne.2xlarge\\\\\\", \\\\\\"ecs.sn1ne.4xlarge\\\\\\", \\\\\\"ecs.n1.tiny\\\\\\" ]\\"\\n            ]\\n          },\\n          \\"Compute\\": {\\n            \\"InstanceTypeId\\": [\\n              \\"[ \\\\\\"ecs.sn1ne.2xlarge\\\\\\", \\\\\\"ecs.sn1ne.4xlarge\\\\\\", \\\\\\"ecs.n1.tiny\\\\\\" ]\\"\\n            ]\\n          },\\n          \\"Login\\": {\\n            \\"InstanceTypeId\\": [\\n              \\"[ \\\\\\"ecs.sn1ne.2xlarge\\\\\\", \\\\\\"ecs.sn1ne.4xlarge\\\\\\", \\\\\\"ecs.n1.tiny\\\\\\" ]\\"\\n            ]\\n          }\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListPreferredEcsTypesResponse>\\n    <SupportSpotInstance>true</SupportSpotInstance>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\n    <Series>\\n        <SeriesName>SeriesAll</SeriesName>\\n        <SeriesId>All</SeriesId>\\n        <Roles>\\n            <Manager>[ \\"ecs.sn1ne.2xlarge\\", \\"ecs.sn1ne.4xlarge\\", \\"ecs.n1.tiny\\" ]</Manager>\\n            <Compute>[ \\"ecs.sn1ne.2xlarge\\", \\"ecs.sn1ne.4xlarge\\", \\"ecs.n1.tiny\\" ]</Compute>\\n            <Login>[ \\"ecs.sn1ne.2xlarge\\", \\"ecs.sn1ne.4xlarge\\", \\"ecs.n1.tiny\\" ]</Login>\\n        </Roles>\\n    </Series>\\n</ListPreferredEcsTypesResponse>","errorExample":""}]',
      'title' => '查询推荐的ECS实例规格',
      'summary' => '查询 E-HPC 推荐的 ECS 实例规格。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListAvailableEcsTypes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ZoneId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可用区ID。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'cn-hangzhou-b',
          ),
        ),
        1 => 
        array (
          'name' => 'SpotStrategy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'ECS实例抢占策略。取值范围：
- NoSpot：按量付费实例。
- SpotWithPriceLimit：设置上限价格的抢占式实例。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格的抢占式实例。
',
            'type' => 'string',
            'required' => false,
            'example' => 'NoSpot',
            'default' => 'NoSpot',
          ),
        ),
        2 => 
        array (
          'name' => 'InstanceChargeType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'ECS实例的付费类型。取值范围：
- PostPaid：按量付费
- PrePaid：包年包月',
            'type' => 'string',
            'required' => false,
            'example' => 'PostPaid',
            'default' => 'PostPaid',
          ),
        ),
        3 => 
        array (
          'name' => 'ShowSoldOut',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否显示ECS实例已售罄。取值范围：
- false：未售罄
- true：已售罄

默认值：false',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
            'default' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'SupportSpotInstance' => 
              array (
                'description' => '是否支持抢占式实例。可能值：
- false：不支持
- true：支持',
                'type' => 'boolean',
                'example' => 'false',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'D9DD3AF8-1F91-4075-8669-55D10E45****',
              ),
              'InstanceTypeFamilies' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'InstanceTypeFamilyInfo' => 
                  array (
                    'description' => '实例规格所属的规格族。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Generation' => 
                        array (
                          'description' => '实例规格族。',
                          'type' => 'string',
                          'example' => 'ecs-3',
                        ),
                        'InstanceTypeFamilyId' => 
                        array (
                          'description' => '实例规格所属的规格族ID。更多详情，请参见[实例规格族](~~25378~~)。',
                          'type' => 'string',
                          'example' => 'ecs.n4',
                        ),
                        'Types' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'TypesInfo' => 
                            array (
                              'description' => '规格列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'Status' => 
                                  array (
                                    'description' => 'ECS实例状态。可能值：
- SoldOut：资源已售罄
- Available：资源充足
',
                                    'type' => 'string',
                                    'example' => 'Available',
                                  ),
                                  'InstanceTypeId' => 
                                  array (
                                    'description' => 'ECS实例规格ID。',
                                    'type' => 'string',
                                    'example' => 'ecs.n4.xlarge',
                                  ),
                                  'InstanceBandwidthRx' => 
                                  array (
                                    'description' => '内网入方向带宽限制。单位：kbit/s',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '10240000',
                                  ),
                                  'GPUSpec' => 
                                  array (
                                    'description' => 'ECS实例安装的GPU类型。',
                                    'type' => 'string',
                                    'example' => 'NVIDIA V100',
                                  ),
                                  'InstanceBandwidthTx' => 
                                  array (
                                    'description' => '内网出方向带宽限制。单位：kbit/s',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '10240000',
                                  ),
                                  'InstancePpsRx' => 
                                  array (
                                    'description' => '内网入方向网络收发包能力。单位：Pps',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '9000000',
                                  ),
                                  'InstancePpsTx' => 
                                  array (
                                    'description' => '内网出方向网络收发包能力。单位：Pps',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '9000000',
                                  ),
                                  'GPUAmount' => 
                                  array (
                                    'description' => 'ECS实例安装的GPU数量。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '2',
                                  ),
                                  'CpuCoreCount' => 
                                  array (
                                    'description' => 'vCPU内核数目。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '4',
                                  ),
                                  'MemorySize' => 
                                  array (
                                    'description' => 'ECS实例内存大小。单位：GiB',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '8',
                                  ),
                                  'EniQuantity' => 
                                  array (
                                    'description' => 'ECS实例支持挂载的弹性网卡上限。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '2',
                                  ),
                                  'ZoneIds' => 
                                  array (
                                    'type' => 'object',
                                    'properties' => 
                                    array (
                                      'ZoneId' => 
                                      array (
                                        'description' => '可用区ID列表。',
                                        'type' => 'array',
                                        'items' => 
                                        array (
                                          'description' => '可用区ID列表。',
                                          'type' => 'string',
                                          'example' => 'cn-hangzhou-b',
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"SupportSpotInstance\\": false,\\n  \\"RequestId\\": \\"D9DD3AF8-1F91-4075-8669-55D10E45****\\",\\n  \\"InstanceTypeFamilies\\": {\\n    \\"InstanceTypeFamilyInfo\\": [\\n      {\\n        \\"Generation\\": \\"ecs-3\\",\\n        \\"InstanceTypeFamilyId\\": \\"ecs.n4\\",\\n        \\"Types\\": {\\n          \\"TypesInfo\\": [\\n            {\\n              \\"Status\\": \\"Available\\",\\n              \\"InstanceTypeId\\": \\"ecs.n4.xlarge\\",\\n              \\"InstanceBandwidthRx\\": 10240000,\\n              \\"GPUSpec\\": \\"NVIDIA V100\\",\\n              \\"InstanceBandwidthTx\\": 10240000,\\n              \\"InstancePpsRx\\": 9000000,\\n              \\"InstancePpsTx\\": 9000000,\\n              \\"GPUAmount\\": 2,\\n              \\"CpuCoreCount\\": 4,\\n              \\"MemorySize\\": 8,\\n              \\"EniQuantity\\": 2,\\n              \\"ZoneIds\\": {\\n                \\"ZoneId\\": [\\n                  \\"cn-hangzhou-b\\"\\n                ]\\n              }\\n            }\\n          ]\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListAvailableEcsTypesResponse>\\n<SupportSpotInstance>false</SupportSpotInstance>\\n<RequestId>D9DD3AF8-1F91-4075-8669-55D10E45****</RequestId>\\n<InstanceTypeFamilies>\\n    <InstanceTypeFamilyInfo>\\n        <InstanceTypeFamilyId>ecs.n4</InstanceTypeFamilyId>\\n        <Generation>ecs-3</Generation>\\n        <Types>\\n            <TypesInfo>\\n                <Status>Available</Status>\\n                <InstancePpsTx>9000000</InstancePpsTx>\\n                <MemorySize>8</MemorySize>\\n                <GPUSpec>NVIDIA V100</GPUSpec>\\n                <CpuCoreCount>4</CpuCoreCount>\\n                <InstancePpsRx>9000000</InstancePpsRx>\\n                <InstanceTypeId>ecs.n4.xlarge</InstanceTypeId>\\n                <EniQuantity>2</EniQuantity>\\n                <InstanceBandwidthRx>10240000</InstanceBandwidthRx>\\n                <GPUAmount>2</GPUAmount>\\n                <InstanceBandwidthTx>10240000</InstanceBandwidthTx>\\n                <ZoneIds>\\n                    <ZoneId>cn-hangzhou-b</ZoneId>\\n                </ZoneIds>\\n            </TypesInfo>\\n        </Types>\\n    </InstanceTypeFamilyInfo>\\n</InstanceTypeFamilies>\\n</ListAvailableEcsTypesResponse>","errorExample":""}]',
      'title' => '查询可用的ECS实例规格资源',
      'summary' => '调用ListAvailableEcsTypes查询可用的ECS实例规格资源。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetIfEcsTypeSupportHtConfig' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'ECS实例规格。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ecs.g6.large',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '80CA7A93-7291-4402-B63D-86DF334E0A1F',
              ),
              'DefaultHtEnabled' => 
              array (
                'description' => '是否默认开启超线程。可能值：
- true：默认开启超线程
- false：默认不开启超线程
>SCC规格族默认不开启超线程，其他规格族默认开启超线程。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'InstanceType' => 
              array (
                'description' => 'ECS实例规格。',
                'type' => 'string',
                'example' => 'ecs.g6.large',
              ),
              'SupportHtConfig' => 
              array (
                'description' => '是否支持超线程配置。可能值：
- true：支持超线程
- false：不支持超线程',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"80CA7A93-7291-4402-B63D-86DF334E0A1F\\",\\n  \\"DefaultHtEnabled\\": true,\\n  \\"InstanceType\\": \\"ecs.g6.large\\",\\n  \\"SupportHtConfig\\": true\\n}","errorExample":""},{"type":"xml","example":"<GetIfEcsTypeSupportHtConfigResponse>\\n    <RequestId>80CA7A93-7291-4402-B63D-86DF334E0A1F</RequestId>    \\n    <DefaultHtEnabled>true</DefaultHtEnabled>\\n    <SupportHtConfig>true</SupportHtConfig>\\n    <InstanceType>ecs.g6.large</InstanceType>\\n</GetIfEcsTypeSupportHtConfigResponse>","errorExample":""}]',
      'title' => '查询ECS实例规格是否支持开启和关闭超线程',
      'summary' => '调用GetIfEcsTypeSupportHtConfig查询指定的实例规格是否支持开启和关闭超线程。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListImages' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BaseOsTag',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '基础镜像标签，仅管控节点使用。',
            'type' => 'string',
            'required' => false,
            'example' => 'CentOS_7.2_64',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例规格。
- 该参数传入值，查询指定实例规格支持安装的镜像信息。
- 该参数不传值，默认查询所有实例规格支持安装的镜像信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'ecs.n1.medium',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'OsTags' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'OsInfo' => 
                  array (
                    'description' => 'E-HPC支持的镜像列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Version' => 
                        array (
                          'description' => '操作系统版本。',
                          'type' => 'string',
                          'example' => '7.2',
                        ),
                        'BaseOsTag' => 
                        array (
                          'description' => '基础镜像标签，仅管控节点使用。',
                          'type' => 'string',
                          'example' => 'CentOS_7.2_64',
                        ),
                        'Platform' => 
                        array (
                          'description' => '操作系统平台。可能值：
- CentOS
- windows',
                          'type' => 'string',
                          'example' => 'CentOS',
                        ),
                        'OsTag' => 
                        array (
                          'description' => '镜像标签。',
                          'type' => 'string',
                          'example' => 'CentOS_7.2_64',
                        ),
                        'ImageId' => 
                        array (
                          'description' => '镜像ID。',
                          'type' => 'string',
                          'example' => 'm-bp1h8aoe73p71iow****',
                        ),
                        'Architecture' => 
                        array (
                          'description' => '操作系统架构。可能值：
- i386
- x86_64',
                          'type' => 'string',
                          'example' => 'i386',
                        ),
                        'OSName' => 
                        array (
                          'description' => '镜像名称。',
                          'type' => 'string',
                          'example' => 'CentOS_7.2_64',
                        ),
                        'OSNameEn' => 
                        array (
                          'description' => '镜像名称（英文）。',
                          'type' => 'string',
                          'example' => 'CentOS_7.2_64',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"OsTags\\": {\\n    \\"OsInfo\\": [\\n      {\\n        \\"Version\\": \\"7.2\\",\\n        \\"BaseOsTag\\": \\"CentOS_7.2_64\\",\\n        \\"Platform\\": \\"CentOS\\",\\n        \\"OsTag\\": \\"CentOS_7.2_64\\",\\n        \\"ImageId\\": \\"m-bp1h8aoe73p71iow****\\",\\n        \\"Architecture\\": \\"i386\\",\\n        \\"OSName\\": \\"CentOS_7.2_64\\",\\n        \\"OSNameEn\\": \\"CentOS_7.2_64\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListImagesResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n    <OsTags>\\n        <Version>7.2</Version>\\n        <BaseOsTag>CentOS_7.2_64</BaseOsTag>\\n        <Platform>CentOS</Platform>\\n        <OsTag>CentOS_7.2_64</OsTag>\\n        <ImageId>m-bp1h8aoe73p71iow****</ImageId>\\n        <Architecture>i386</Architecture>\\n        <OSName>CentOS_7.2_64</OSName>\\n        <OSNameEn>CentOS_7.2_64</OSNameEn>\\n    </OsTags>\\n</ListImagesResponse>","errorExample":""}]',
      'title' => '查询E-HPC支持安装的镜像列表',
      'summary' => '调用ListImages查询E-HPC支持的镜像列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DescribeEstackImage' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示条数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '每页显示条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '2D69A58F-345C-4FDE-88E4-BF518948xxxx',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '镜像总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '100',
              ),
              'ImageList' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ImageListInfo' => 
                  array (
                    'description' => '基础镜像数组。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '基础镜像数组。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ImageName' => 
                        array (
                          'description' => '镜像名称。',
                          'type' => 'string',
                          'example' => 'tensorflow-21.09-tf1-py3.sif',
                        ),
                        'ImageSize' => 
                        array (
                          'description' => '镜像大小。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '65535',
                        ),
                        'RecentUpdateTime' => 
                        array (
                          'description' => '镜像最近更新时间。',
                          'type' => 'string',
                          'example' => '2022-05-05T07:10:55.000Z',
                        ),
                        'ImageUrl' => 
                        array (
                          'description' => '镜像下载链接。',
                          'type' => 'string',
                          'example' => 'http://xxxx.oss-cn-hangzhou.aliyuncs.com/eStackPackage/singularity/tensorflow-21.09-tf1-py3.sif',
                        ),
                        'ImageType' => 
                        array (
                          'description' => '镜像类型。',
                          'type' => 'string',
                          'example' => 'singularity',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 10,\\n  \\"RequestId\\": \\"2D69A58F-345C-4FDE-88E4-BF518948xxxx\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 100,\\n  \\"ImageList\\": {\\n    \\"ImageListInfo\\": [\\n      {\\n        \\"ImageName\\": \\"tensorflow-21.09-tf1-py3.sif\\",\\n        \\"ImageSize\\": 65535,\\n        \\"RecentUpdateTime\\": \\"2022-05-05T07:10:55.000Z\\",\\n        \\"ImageUrl\\": \\"http://xxxx.oss-cn-hangzhou.aliyuncs.com/eStackPackage/singularity/tensorflow-21.09-tf1-py3.sif\\",\\n        \\"ImageType\\": \\"singularity\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeEstackImageResponse>\\n    <PageSize>10</PageSize>\\n    <RequestId>2D69A58F-345C-4FDE-88E4-BF518948xxxx</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <TotalCount>100</TotalCount>\\n    <ImageList>\\n        <ImageName>tensorflow-21.09-tf1-py3.sif</ImageName>\\n        <ImageSize>65535</ImageSize>\\n        <RecentUpdateTime>2022-05-05T07:10:55.000Z</RecentUpdateTime>\\n        <ImageUrl>http://xxxx.oss-cn-hangzhou.aliyuncs.com/eStackPackage/singularity/tensorflow-21.09-tf1-py3.sif</ImageUrl>\\n        <ImageType>singularity</ImageType>\\n    </ImageList>\\n</DescribeEstackImageResponse>","errorExample":""}]',
      'title' => '查询E-HPC基础镜像',
      'summary' => '调用DescribeEstackImage查询E-HPC基础镜像。',
    ),
    'ListCustomImages' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ImageOwnerAlias',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像来源。取值范围：
- self：自定义镜像
- others：共享镜像',
            'type' => 'string',
            'required' => false,
            'example' => 'self',
          ),
        ),
        1 => 
        array (
          'name' => 'BaseOsTag',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '基础镜像标签，仅管控节点使用。',
            'type' => 'string',
            'required' => false,
            'example' => 'CentOS_7.2_64',
          ),
        ),
        2 => 
        array (
          'name' => 'InstanceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定实例规格。如果不指定实例规格，则默认查询所有实例规格支持的镜像列表。',
            'type' => 'string',
            'required' => false,
            'example' => 'ecs.n1.tiny',
          ),
        ),
        3 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

- 如果指定集群ID，则查询集群所在地域下的所有镜像列表。
- 如果不指定集群ID，则默认查询所有集群支持的镜像列表。',
            'type' => 'string',
            'required' => false,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'Images' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ImageInfo' => 
                  array (
                    'description' => 'E-HPC支持的自定义镜像和共享镜像的列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '>该参数未开放使用。',
                          'type' => 'string',
                          'example' => 'Available',
                        ),
                        'PostInstallScript' => 
                        array (
                          'description' => '>该参数未开放使用。',
                          'type' => 'string',
                          'example' => 'example.sh',
                        ),
                        'Description' => 
                        array (
                          'description' => '镜像描述。',
                          'type' => 'string',
                          'example' => 'ExampleDescription',
                        ),
                        'Size' => 
                        array (
                          'description' => '镜像大小。单位：GiB',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '40',
                        ),
                        'ImageOwnerAlias' => 
                        array (
                          'description' => '镜像类型。可能值：
- self：自定义镜像
- others：共享镜像',
                          'type' => 'string',
                          'example' => 'self',
                        ),
                        'ImageName' => 
                        array (
                          'description' => '镜像名称。',
                          'type' => 'string',
                          'example' => 'CHESS5V5.0.27',
                        ),
                        'SkuCode' => 
                        array (
                          'description' => '>该参数未开放使用。',
                          'type' => 'string',
                          'example' => 'ECS',
                        ),
                        'PricingCycle' => 
                        array (
                          'description' => '>该参数未开放使用。',
                          'type' => 'string',
                          'example' => 'Month',
                        ),
                        'ImageId' => 
                        array (
                          'description' => '镜像ID。',
                          'type' => 'string',
                          'example' => 'm-bp181x855551ww5yq****',
                        ),
                        'ProductCode' => 
                        array (
                          'description' => '>该参数未开放使用。',
                          'type' => 'string',
                          'example' => 'cmjj028279',
                        ),
                        'Uid' => 
                        array (
                          'description' => '>该参数未开放使用。',
                          'type' => 'string',
                          'example' => '127****',
                        ),
                        'BaseOsTag' => 
                        array (
                          'description' => '基础镜像标签。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Platform' => 
                            array (
                              'description' => '操作系统平台。可能值：
- CentOS
- windows',
                              'type' => 'string',
                              'example' => 'CentOS',
                            ),
                            'OsTag' => 
                            array (
                              'description' => '镜像标签。',
                              'type' => 'string',
                              'example' => 'CentOS_7.2_64',
                            ),
                            'Version' => 
                            array (
                              'description' => '操作系统版本。',
                              'type' => 'string',
                              'example' => '7.2',
                            ),
                            'Architecture' => 
                            array (
                              'description' => '操作系统架构。可能值：
- i386
- x86_64',
                              'type' => 'string',
                              'example' => 'i386',
                            ),
                          ),
                        ),
                        'OsTag' => 
                        array (
                          'description' => 'E-HPC支持的操作系统镜像。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Platform' => 
                            array (
                              'description' => '操作系统平台。',
                              'type' => 'string',
                              'example' => 'CentOS',
                            ),
                            'OsTag' => 
                            array (
                              'description' => '镜像标签。',
                              'type' => 'string',
                              'example' => 'CentOS_7.2_64',
                            ),
                            'Version' => 
                            array (
                              'description' => '操作系统版本。',
                              'type' => 'string',
                              'example' => '7.2',
                            ),
                            'Architecture' => 
                            array (
                              'description' => '操作系统架构。可能值：
- i386
- x86_64',
                              'type' => 'string',
                              'example' => 'x86_64',
                            ),
                            'BaseOsTag' => 
                            array (
                              'description' => '基础镜像标签。',
                              'type' => 'string',
                              'example' => 'CentOS_7.2_64',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"Images\\": {\\n    \\"ImageInfo\\": [\\n      {\\n        \\"Status\\": \\"Available\\",\\n        \\"PostInstallScript\\": \\"example.sh\\",\\n        \\"Description\\": \\"ExampleDescription\\",\\n        \\"Size\\": 40,\\n        \\"ImageOwnerAlias\\": \\"self\\",\\n        \\"ImageName\\": \\"CHESS5V5.0.27\\",\\n        \\"SkuCode\\": \\"ECS\\",\\n        \\"PricingCycle\\": \\"Month\\",\\n        \\"ImageId\\": \\"m-bp181x855551ww5yq****\\",\\n        \\"ProductCode\\": \\"cmjj028279\\",\\n        \\"Uid\\": \\"127****\\",\\n        \\"BaseOsTag\\": {\\n          \\"Platform\\": \\"CentOS\\",\\n          \\"OsTag\\": \\"CentOS_7.2_64\\",\\n          \\"Version\\": \\"7.2\\",\\n          \\"Architecture\\": \\"i386\\"\\n        },\\n        \\"OsTag\\": {\\n          \\"Platform\\": \\"CentOS\\",\\n          \\"OsTag\\": \\"CentOS_7.2_64\\",\\n          \\"Version\\": \\"7.2\\",\\n          \\"Architecture\\": \\"x86_64\\",\\n          \\"BaseOsTag\\": \\"CentOS_7.2_64\\"\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListCustomImagesResponse>\\n<RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n<Images>\\n    <ImageInfo>\\n        <Status>Available</Status>\\n        <ImageOwnerAlias>self</ImageOwnerAlias>\\n        <ImageName>CHESS5V5.0.27</ImageName>\\n        <Description>ExampleDescription</Description>\\n        <Size>40</Size>\\n        <ImageId>m-bp181x855551ww5yq****</ImageId>\\n        <BaseOsTag>\\n            <Architecture>i386</Architecture>\\n            <Platform>CentOS</Platform>\\n            <Version>7.2</Version>\\n            <OsTag>CentOS_7.2_64</OsTag>\\n        </BaseOsTag>\\n        <OsTag>\\n            <Architecture>x86_64</Architecture>\\n            <Platform>CentOS</Platform>\\n            <Version>7.2</Version>\\n            <OsTag>CentOS_7.2_64</OsTag>\\n            <BaseOsTag>CentOS_7.2_64</BaseOsTag>\\n        </OsTag>\\n    </ImageInfo>\\n</Images>\\n</ListCustomImagesResponse>","errorExample":""}]',
      'title' => '查询自定义和共享的镜像列表',
      'summary' => '查询E-HPC产品支持的自定义和共享的镜像列表。',
    ),
    'ListCommunityImages' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'BaseOsTag',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '基础镜像操作系统标签。',
            'type' => 'string',
            'required' => false,
            'example' => 'CentOS_7.2_64',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定实例规格。如果不指定实例规格，则默认查询所有实例规格支持的镜像列表。',
            'type' => 'string',
            'required' => false,
            'example' => 'ecs.n1.tiny',
          ),
        ),
        2 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定集群ID。如果该集群支持多操作系统，则查询集群所在地域下的所有镜像列表。

如果不指定集群ID，则默认查询所有集群支持的镜像列表。',
            'type' => 'string',
            'required' => false,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'Images' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ImageInfo' => 
                  array (
                    'description' => 'E-HPC支持的自定义镜像和共享镜像的列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '镜像状态。可能值：

- UnAvailable：不可用

- Available：可用

- Creating：创建中

- CreateFailed：创建失败',
                          'type' => 'string',
                          'example' => 'Available',
                        ),
                        'PostInstallScript' => 
                        array (
                          'description' => '安装镜像后执行的脚本。',
                          'type' => 'string',
                          'example' => 'example.sh',
                        ),
                        'Description' => 
                        array (
                          'description' => '镜像描述。',
                          'type' => 'string',
                          'example' => 'ExampleDescription',
                        ),
                        'Size' => 
                        array (
                          'description' => '镜像大小。单位：GiB。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '40',
                        ),
                        'ImageOwnerAlias' => 
                        array (
                          'description' => '镜像类型。可能值：

- self：自定义镜像

- others：共享镜像',
                          'type' => 'string',
                          'example' => 'self',
                        ),
                        'ImageName' => 
                        array (
                          'description' => '镜像名称。',
                          'type' => 'string',
                          'example' => 'linux_CentOS7.2_OceanBase_OBD_1ECS-3OB_3.0',
                        ),
                        'SkuCode' => 
                        array (
                          'description' => '商品规格码。可能值：

- ECS：按量付费

- package：预付费',
                          'type' => 'string',
                          'example' => 'ECS',
                        ),
                        'PricingCycle' => 
                        array (
                          'description' => '镜像计费单位，可能值：

- Hour：按小时付费

- Month：按月付费

- Year：按年付费',
                          'type' => 'string',
                          'example' => 'Month',
                        ),
                        'ImageId' => 
                        array (
                          'description' => '镜像ID。',
                          'type' => 'string',
                          'example' => 'm-bp181x855551ww5yq****',
                        ),
                        'ProductCode' => 
                        array (
                          'description' => '云市场的商品标识。',
                          'type' => 'string',
                          'example' => 'cmjj028279',
                        ),
                        'Uid' => 
                        array (
                          'description' => '镜像所有者。

',
                          'type' => 'string',
                          'example' => '127****',
                        ),
                        'BaseOsTag' => 
                        array (
                          'description' => '对应的基础镜像操作系统标签。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Platform' => 
                            array (
                              'description' => '
操作系统发行版。可能值：

- CentOS

- Ubuntu

- SUSE

- OpenSUSE

- Debian

- CoreOS

- Aliyun

- Windows Server 2003

- Windows Server 2008

- Windows Server 2012

- Others Linux

- Customized Linux',
                              'type' => 'string',
                              'example' => 'CentOS',
                            ),
                            'OsTag' => 
                            array (
                              'description' => '操作系统镜像标签。

',
                              'type' => 'string',
                              'example' => 'CentOS_7.2_64',
                            ),
                            'Version' => 
                            array (
                              'description' => '操作系统版本。

',
                              'type' => 'string',
                              'example' => '7.2',
                            ),
                            'Architecture' => 
                            array (
                              'description' => '操作系统架构。可能值：

- i386

- x86_64
',
                              'type' => 'string',
                              'example' => 'x86_64',
                            ),
                          ),
                        ),
                        'OsTag' => 
                        array (
                          'description' => 'E-HPC支持的操作系统镜像。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Platform' => 
                            array (
                              'description' => '操作系统平台。',
                              'type' => 'string',
                              'example' => 'CentOS',
                            ),
                            'OsTag' => 
                            array (
                              'description' => '操作系统镜像标签。',
                              'type' => 'string',
                              'example' => 'CentOS_7.2_64',
                            ),
                            'Version' => 
                            array (
                              'description' => '操作系统版本。',
                              'type' => 'string',
                              'example' => '7.2',
                            ),
                            'Architecture' => 
                            array (
                              'description' => '操作系统架构。可能值：
- i386

- x86_64',
                              'type' => 'string',
                              'example' => 'x86_64',
                            ),
                            'BaseOsTag' => 
                            array (
                              'description' => '对应的基础镜像操作系统标签。',
                              'type' => 'string',
                              'example' => 'CentOS_7.2_64',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"Images\\": {\\n    \\"ImageInfo\\": [\\n      {\\n        \\"Status\\": \\"Available\\",\\n        \\"PostInstallScript\\": \\"example.sh\\",\\n        \\"Description\\": \\"ExampleDescription\\",\\n        \\"Size\\": 40,\\n        \\"ImageOwnerAlias\\": \\"self\\",\\n        \\"ImageName\\": \\"linux_CentOS7.2_OceanBase_OBD_1ECS-3OB_3.0\\",\\n        \\"SkuCode\\": \\"ECS\\",\\n        \\"PricingCycle\\": \\"Month\\",\\n        \\"ImageId\\": \\"m-bp181x855551ww5yq****\\",\\n        \\"ProductCode\\": \\"cmjj028279\\",\\n        \\"Uid\\": \\"127****\\",\\n        \\"BaseOsTag\\": {\\n          \\"Platform\\": \\"CentOS\\",\\n          \\"OsTag\\": \\"CentOS_7.2_64\\",\\n          \\"Version\\": \\"7.2\\",\\n          \\"Architecture\\": \\"x86_64\\"\\n        },\\n        \\"OsTag\\": {\\n          \\"Platform\\": \\"CentOS\\",\\n          \\"OsTag\\": \\"CentOS_7.2_64\\",\\n          \\"Version\\": \\"7.2\\",\\n          \\"Architecture\\": \\"x86_64\\",\\n          \\"BaseOsTag\\": \\"CentOS_7.2_64\\"\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListCommunityImagesResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\n    <Images>\\n        <Status>Available</Status>\\n        <PostInstallScript>example.sh</PostInstallScript>\\n        <Description>ExampleDescription</Description>\\n        <Size>40</Size>\\n        <ImageOwnerAlias>self</ImageOwnerAlias>\\n        <ImageName>linux_CentOS7.2_OceanBase_OBD_1ECS-3OB_3.0</ImageName>\\n        <SkuCode>ECS</SkuCode>\\n        <PricingCycle>Month</PricingCycle>\\n        <ImageId>m-bp181x855551ww5yq****</ImageId>\\n        <ProductCode>cmjj028279</ProductCode>\\n        <Uid>127****</Uid>\\n        <BaseOsTag>\\n            <Platform>CentOS</Platform>\\n            <OsTag>CentOS_7.2_64</OsTag>\\n            <Version>7.2</Version>\\n            <Architecture>x86_64</Architecture>\\n        </BaseOsTag>\\n        <OsTag>\\n            <Platform>CentOS</Platform>\\n            <OsTag>CentOS_7.2_64</OsTag>\\n            <Version>7.2</Version>\\n            <Architecture>x86_64</Architecture>\\n            <BaseOsTag>CentOS_7.2_64</BaseOsTag>\\n        </OsTag>\\n    </Images>\\n</ListCommunityImagesResponse>","errorExample":""}]',
      'title' => '查询社区镜像',
      'summary' => '调用ListCommunityImages查询社区镜像。',
    ),
    'DescribeImagePrice' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ImageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'm-bp198jigq7l1ga11****',
          ),
        ),
        1 => 
        array (
          'name' => 'PriceUnit',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '购买时长的单位。取值范围：

- Day：日
- Month：月
- Year：年

默认值：Day',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'Day',
          ),
        ),
        2 => 
        array (
          'name' => 'SkuCode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '商品规格码。当前仅支持：package（预付费）',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'package',
          ),
        ),
        3 => 
        array (
          'name' => 'Period',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '购买时长。取值范围：
- 当参数PriceUnit取值为Day时：1~30
- 当参数PriceUnit取值为Month时：1~9
- 当参数PriceUnit取值为Year时：1~3


默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'Amount',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '购买数量。取值范围：1~1000

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '2',
          ),
        ),
        5 => 
        array (
          'name' => 'OrderType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '订单类型，仅支持设置为商品购买。取值：INSTANCE-BUY
',
            'type' => 'string',
            'required' => false,
            'example' => 'INSTANCE-BUY',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Amount' => 
              array (
                'description' => '购买数量。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '47ca3ac4-2a03-48f1-8bf2-ba6de0f3****',
              ),
              'DiscountPrice' => 
              array (
                'description' => '折扣。',
                'type' => 'number',
                'format' => 'float',
                'example' => '0',
              ),
              'TradePrice' => 
              array (
                'description' => '交易价格。',
                'type' => 'number',
                'format' => 'float',
                'example' => '0.8',
              ),
              'OriginalPrice' => 
              array (
                'description' => '原价。',
                'type' => 'number',
                'format' => 'float',
                'example' => '0.8',
              ),
              'ImageId' => 
              array (
                'description' => '镜像ID。',
                'type' => 'string',
                'example' => 'm-bp198jigq7l1ga11****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Amount\\": 1,\\n  \\"RequestId\\": \\"47ca3ac4-2a03-48f1-8bf2-ba6de0f3****\\",\\n  \\"DiscountPrice\\": 0,\\n  \\"TradePrice\\": 0.8,\\n  \\"OriginalPrice\\": 0.8,\\n  \\"ImageId\\": \\"m-bp198jigq7l1ga11****\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeImagePriceResponse>\\n    <Amount>1</Amount>\\n    <RequestId>47ca3ac4-2a03-48f1-8bf2-ba6de0f3****</RequestId>\\n    <DiscountPrice>0</DiscountPrice>\\n    <TradePrice>0.8</TradePrice>\\n    <OriginalPrice>0.8</OriginalPrice>\\n    <ImageId>m-bp198jigq7l1ga11****</ImageId>\\n</DescribeImagePriceResponse>","errorExample":""}]',
      'title' => '查询E-HPC支持的镜像市场镜像价格',
      'summary' => '调用DescribeImagePrice查询E-HPC支持的镜像市场的镜像价格。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'AddUsers' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'User',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '用户信息。可以传入1~100个用户信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '用户信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Password' => 
                array (
                  'description' => '新增用户的密码。长度为8~30个字符，必须同时包含以下四项中的三项：

- 大写英文字母
- 小写英文字母
- 数字
- 特殊字符：`()~!@#$%^&*-_+=|{}[]:;\'/<>,.?/`

> 建议使用HTTPS协议调用API以避免可能发生的密码泄露。',
                  'type' => 'string',
                  'required' => true,
                  'docRequired' => true,
                  'example' => '1@a2****',
                ),
                'Name' => 
                array (
                  'description' => '新增用户的用户名。长度为6~30个字符，必须以英文字母开头，可以包含数字、特殊字符（.）。',
                  'type' => 'string',
                  'required' => true,
                  'docRequired' => true,
                  'example' => 'user1',
                ),
                'Group' => 
                array (
                  'description' => '新增用户的用户组。取值范围：
- users：普通权限组，适用于只有提交、调试作业需求的普通用户。 
- wheel：sudo权限组，适用于需要管理集群的管理员，除提交、调试作业外，还可以执行sudo命令进行安装软件、重启节点等操作。',
                  'type' => 'string',
                  'required' => true,
                  'docRequired' => true,
                  'example' => 'users',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 10000,
          ),
        ),
        2 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否采用异步消息链路新增用户。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError.Account.GetentPasswdFailure',
            'errorMessage' => 'Failed to get the user list: %s.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError.Account.UserAlreadyExist',
            'errorMessage' => 'The specified user already exists in domain: %s.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError.Account.UserAddFailure',
            'errorMessage' => 'Failed to add user to domain: %s.',
          ),
          4 => 
          array (
            'errorCode' => 'AgentError.Account.DomainNotExist',
            'errorMessage' => 'The specified domain does not exist: %s.',
          ),
          5 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'staticInfo' => 
      array (
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<AddUsersResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n</AddUsersResponse>","errorExample":""}]',
      'title' => '批量新增集群用户',
      'summary' => '调用AddUsers为指定集群新增一个或多个用户。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListUsers' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Users' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'UserInfo' => 
                  array (
                    'description' => '用户列表信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Name' => 
                        array (
                          'description' => '用户名。',
                          'type' => 'string',
                          'example' => 'user1',
                        ),
                        'AddTime' => 
                        array (
                          'description' => '添加用户的时间。',
                          'type' => 'string',
                          'example' => '2018-07-18T17:46:47',
                        ),
                        'Group' => 
                        array (
                          'description' => '用户组。可能值：

- users：普通权限组，适用于只有提交、调试作业需求的普通用户。
- wheel：sudo权限组，适用于需要管理集群的管理员，除提交、调试作业外，还可以执行sudo命令进行安装软件、重启节点等操作。',
                          'type' => 'string',
                          'example' => 'wheel',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
          1 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError.Account.DomainNotExist',
            'errorMessage' => 'The specified domain does not exist: %s.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError.Account.GetentPasswdFailure',
            'errorMessage' => 'Failed to get the user list: %s.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError.Account.GetUserListFailure',
            'errorMessage' => 'Get user list fail: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 1,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Users\\": {\\n    \\"UserInfo\\": [\\n      {\\n        \\"Name\\": \\"user1\\",\\n        \\"AddTime\\": \\"2018-07-18T17:46:47\\",\\n        \\"Group\\": \\"wheel\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListUsersResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n    <TotalCount>1</TotalCount>\\r\\n    <PageNumber>1</PageNumber>\\r\\n    <PageSize>1</PageSize>\\r\\n    <Users>\\r\\n        <UserInfo>\\r\\n            <Name>user1</Name>\\r\\n            <Group>users</Group>\\r\\n        </UserInfo>\\r\\n        <UserInfo>\\r\\n            <Name>user2</Name>\\r\\n            <Group>wheel</Group>\\r\\n        </UserInfo>\\r\\n    </Users>\\r\\n</ListUsersResponse>","errorExample":""}]',
      'title' => '查询集群用户列表',
      'summary' => '调用ListUsers查询集群用户列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListUsersAsync' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-vu7c2WkVGx',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。    
起始值：1。    
默认值：1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。    
取值范围：1~50。    
默认值：10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'AsyncId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '异步任务ID。',
            'type' => 'string',
            'required' => false,
            'example' => 't-hz02xltxaex1q80',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '每页显示的条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '9A05F620-ED46-4A57-95F1-C67D6D3C5DD2',
              ),
              'PageNumber' => 
              array (
                'description' => '显示的页码，起始值为1。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '用户总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Users' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'UserInfo' => 
                  array (
                    'description' => '用户列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '用户信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Name' => 
                        array (
                          'description' => '用户名。',
                          'type' => 'string',
                          'example' => 'testuser',
                        ),
                        'AddTime' => 
                        array (
                          'description' => '创建时间。',
                          'type' => 'string',
                          'example' => '2022-09-28T09:05:26.000Z',
                        ),
                        'Group' => 
                        array (
                          'description' => '用户组。',
                          'type' => 'string',
                          'enumValueTitles' => 
                          array (
                          ),
                          'example' => 'wheel',
                        ),
                        'UserId' => 
                        array (
                          'description' => '用户ID。',
                          'type' => 'string',
                          'example' => '1000',
                        ),
                        'GroupId' => 
                        array (
                          'description' => '用户组ID。',
                          'type' => 'string',
                          'example' => '10',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'AsyncId' => 
              array (
                'description' => '异步任务ID。',
                'type' => 'string',
                'example' => 't-sh03egi3mls****',
              ),
              'AsyncStatus' => 
              array (
                'description' => '异步任务状态。',
                'type' => 'string',
                'example' => 'Success',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
          1 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError.Account.DomainNotExist',
            'errorMessage' => 'The specified domain does not exist: %s.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError.Account.GetentPasswdFailure',
            'errorMessage' => 'Failed to get the user list: %s.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError.Account.GetUserListFailure',
            'errorMessage' => 'Get user list fail: %s',
          ),
          4 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 10,\\n  \\"RequestId\\": \\"9A05F620-ED46-4A57-95F1-C67D6D3C5DD2\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Users\\": {\\n    \\"UserInfo\\": [\\n      {\\n        \\"Name\\": \\"testuser\\",\\n        \\"AddTime\\": \\"2022-09-28T09:05:26.000Z\\",\\n        \\"Group\\": \\"wheel\\",\\n        \\"UserId\\": \\"1000\\",\\n        \\"GroupId\\": \\"10\\"\\n      }\\n    ]\\n  },\\n  \\"AsyncId\\": \\"t-sh03egi3mls****\\",\\n  \\"AsyncStatus\\": \\"Success\\"\\n}","errorExample":""},{"type":"xml","example":"<ListUsersAsyncResponse>\\n    <TotalCount>1</TotalCount>\\n    <PageSize>1</PageSize>\\n    <RequestId>76CCF155-5F9B-5FC1-8DF8-579A61F69D99</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <AsyncId>t-sh03egi3mls****</AsyncId>\\n    <AsyncStatus>Success</AsyncStatus>\\n    <Users>\\n        <UserInfo>\\n            <Group>wheel</Group>\\n            <UserId>1000</UserId>\\n            <Name>testuser</Name>\\n            <GroupId>10</GroupId>\\n        </UserInfo>\\n    </Users>\\n</ListUsersAsyncResponse>","errorExample":""}]',
      'title' => '异步查询集群用户列表',
      'summary' => '调用ListUsersAsync异步查询集群中的用户列表。',
    ),
    'ModifyUserGroups' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'User',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '用户信息。可以传入1~100个用户信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '用户信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Name' => 
                array (
                  'description' => '要修改权限的用户名。

您可以通过调用[ListUsers](~~188572~~)获取该集群中的用户名。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'user11',
                ),
                'Group' => 
                array (
                  'description' => '需要修改的用户组。取值范围：

- users：普通权限组，适用于只有提交、调试作业需求的普通用户。
- wheel：sudo权限组，适用于需要管理集群的管理员，除提交、调试作业外，还可以执行sudo命令进行安装软件、重启节点等操作。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'users',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 10000,
          ),
        ),
        2 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否采用异步消息链路修改用户组。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidOpt',
            'errorMessage' => 'The specified operation is invalid. Please try again later. If the problem still exists, submit a ticket.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError.Account.DomainNotExist',
            'errorMessage' => 'The specified domain does not exist: %s.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError.Account.GetentPasswdFailure',
            'errorMessage' => 'Failed to get the user list: %s.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError.Account.UserAlreadyExist',
            'errorMessage' => 'The specified user already exists in domain: %s.',
          ),
          4 => 
          array (
            'errorCode' => 'AgentError.Account.UserAddFailure',
            'errorMessage' => 'Failed to add user to domain: %s.',
          ),
          5 => 
          array (
            'errorCode' => 'AgentError.Account.UserNotExist',
            'errorMessage' => 'The specified user is not found in the domain: %s.',
          ),
          6 => 
          array (
            'errorCode' => 'AgentError.Account.UserModifyGroupFailure',
            'errorMessage' => 'Failed to modify user groups in domain: %s.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<ModifyUserGroupsResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n</ModifyUserGroupsResponse>","errorExample":""}]',
      'title' => '批量修改用户所属用户组',
      'summary' => '调用ModifyUserGroups修改一个或多个用户所属的用户组。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ModifyUserPasswords' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'User',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '用户信息。可以传入1~100个用户信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '用户信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Password' => 
                array (
                  'description' => '用户的新密码。长度为8~30个字符，必须同时包含一下四项中的三项：

- 大写英文字母
- 小写英文字母
- 数字
- 特殊字符：`()~!@#$%^&*-_+=|{}[]:;\'/<>,.?/`

>建议使用HTTPS协议调用API以避免可能发生的密码泄露。',
                  'type' => 'string',
                  'required' => true,
                  'docRequired' => true,
                  'example' => '1@a****',
                ),
                'Name' => 
                array (
                  'description' => '要修改密码的用户的用户名。

您可以通过调用[ListUsers](~~188572~~)获取该集群中的用户名。',
                  'type' => 'string',
                  'required' => true,
                  'docRequired' => true,
                  'example' => 'user1',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 10000,
          ),
        ),
        2 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '采用异步消息链路修改用户密码。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidOpt',
            'errorMessage' => 'The specified operation is invalid. Please try again later. If the problem still exists, submit a ticket.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError.Account.DomainNotExist',
            'errorMessage' => 'The specified domain does not exist: %s.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError.Account.GetentPasswdFailure',
            'errorMessage' => 'Failed to get the user list: %s.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError.Account.UserNotExist',
            'errorMessage' => 'The specified user is not found in the domain: %s.',
          ),
          4 => 
          array (
            'errorCode' => 'AgentError.Account.UserChangePasswordFailure',
            'errorMessage' => 'Failed to modify user password in domain: %s.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<ModifyUserPasswordsResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n</ModifyUserPasswordsResponse>","errorExample":""}]',
      'title' => '批量修改用户的密码',
      'summary' => '调用ModifyUserPasswords修改一个或多个用户的密码。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteUsers' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'User',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '用户信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '用户信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Name' => 
                array (
                  'description' => '第N个要删除的用户名。N的取值范围：1~100

您可以通过调用[ListUsers](~~188572~~)获取该集群中的用户名。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'user1',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 10000,
          ),
        ),
        2 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '采用异步消息链路删除用户。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError.Account.DomainNotExist',
            'errorMessage' => 'The specified domain does not exist: %s.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError.Account.GetentPasswdFailure',
            'errorMessage' => 'Failed to get the user list: %s.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError.Account.UserNotExist',
            'errorMessage' => 'The specified user is not found in the domain: %s.',
          ),
          4 => 
          array (
            'errorCode' => 'AgentError.Account.UserDeleteFailure',
            'errorMessage' => 'Failed to delete user from domain: %s.',
          ),
          5 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE****\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteUsersResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n</DeleteUsersResponse>","errorExample":""}]',
      'title' => '批量删除用户账号',
      'summary' => '调用DeleteUsers删除一个或多个集群用户。',
      'description' => '## 接口说明
删除用户时仅删除用户信息，不删除存储在用户home目录下的文件。例如删除一个名为user1的用户，集群目录`/home/user1/`下的文件不会被删除。但被删除的用户不可恢复，即使再次创建同名用户也不会复用保留的数据。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'AddNodes' => 
    array (
      'summary' => '调用AddNodes添加一个或多个计算节点到指定集群。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待添加节点的集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'ImageOwnerAlias',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像类型。取值范围：
- system：公共镜像
- self：自定义镜像
- others：共享镜像
- marketplace：镜像市场镜像

默认值：system',
            'type' => 'string',
            'required' => false,
            'example' => 'system',
            'default' => 'system',
          ),
        ),
        2 => 
        array (
          'name' => 'ImageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '为待加入集群的计算节点指定的镜像，该镜像需满足以下条件：

- 指定的镜像的操作系统应与集群中节点的操作系统保持一致。如：集群中节点的操作系统为CentOS时，只能指定CentOS镜像。
> 如果集群为混合云集群，并且开启支持多系统功能，当集群中节点的操作系统为Windows时，指定的镜像可以为Windows、CentOS。

- 指定的镜像应与集群节点的镜像大版本号保持一致，如待加入集群为CentOS 7.x，指定的镜像也应该为CentOS 7.x。

您可以通过调用[ListImages](~~87213~~)和[ListCustomImages](~~87215~~)接口获取镜像ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'centos_7_06_64_20G_alibase_20190711.vhd',
          ),
        ),
        3 => 
        array (
          'name' => 'Count',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '添加的计算节点数量。取值范围：1~99，并且MinCount<Count。

- ECS库存数量<MinCount，添加节点失败。

- MinCount<ECS库存数量<Count，按照MinCount指定的数量添加节点。

- Count<ECS库存数量，按照Count指定的数量添加节点。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'InstanceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '扩容的实例规格，默认使用上次扩容或者创建集群时的计算节点实例规格。',
            'type' => 'string',
            'required' => false,
            'example' => 'ecs.n1.tiny',
          ),
        ),
        5 => 
        array (
          'name' => 'ComputeSpotStrategy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点抢占策略。当参数EcsChargeType取值为PostPaid时才生效。取值范围：
- NoSpot：正常按量付费实例。
- SpotWithPriceLimit：设置上限价格的抢占式实例。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格的抢占式实例。

默认值：NoSpot',
            'type' => 'string',
            'required' => false,
            'example' => 'NoSpot',
          ),
        ),
        6 => 
        array (
          'name' => 'ComputeSpotPriceLimit',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点每小时最高价格，支持最多3位小数。参数SpotStrategy取值为SpotWithPriceLimit时生效。',
            'type' => 'string',
            'required' => false,
            'example' => '0.68',
          ),
        ),
        7 => 
        array (
          'name' => 'EcsChargeType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群使用节点的付费类型。取值范围：
- PostPaid：按量付费
- PrePaid：包年包月

默认值：PostPaid

若选择包年包月类型，默认开启自动续费，集群释放后节点将关闭自动续费。',
            'type' => 'string',
            'required' => false,
            'example' => 'PostPaid',
            'default' => 'PostPaid',
          ),
        ),
        8 => 
        array (
          'name' => 'Period',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '购买资源的时长，单位由PeriodUnit指定。当参数InstanceChargeType取值为PrePaid时才生效且为必选值。取值范围：
- PeriodUnit=Week时，Period取值：{“1”, “2”, “3”, “4”}。
- PeriodUnit=Month时，Period取值：{“1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “12”, “24”, “36”, ”48”, ”60”}。

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        9 => 
        array (
          'name' => 'PeriodUnit',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '购买资源的时长。取值范围：
- Week
- Month

默认值：Month',
            'type' => 'string',
            'required' => false,
            'example' => 'Month',
          ),
        ),
        10 => 
        array (
          'name' => 'AutoRenew',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否自动续费，当参数EcsChargeType取值为PrePaid时才生效。取值范围：
- true：自动续费
- false：不自动续费

默认值：true',
            'type' => 'string',
            'required' => false,
            'example' => 'true',
            'default' => 'false',
          ),
        ),
        11 => 
        array (
          'name' => 'AutoRenewPeriod',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每次自动续费的时长。参数AutoRenew取值true时生效。
- PeriodUnit为Week时，AutoRenewPeriod取值{"1", "2", "3"}。
- PeriodUnit为Month时，AutoRenewPeriod取值{"1", "2", "3", "6", "12"}。

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        12 => 
        array (
          'name' => 'JobQueue',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点加入的队列名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'workq',
          ),
        ),
        13 => 
        array (
          'name' => 'CreateMode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点创建方式。取值范围：
- manual：手动扩容
- autoscale：自动扩容

默认值：manual',
            'type' => 'string',
            'required' => false,
            'example' => 'manual',
          ),
        ),
        14 => 
        array (
          'name' => 'SystemDiskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '系统盘的云盘类型。取值范围：
- cloud_efficiency：高效云盘
- cloud_ssd：SSD云盘
- cloud_essd：ESSD云盘
- cloud：普通云盘，已停售。

默认值：cloud_efficiency',
            'type' => 'string',
            'required' => false,
            'example' => 'cloud_ssd',
          ),
        ),
        15 => 
        array (
          'name' => 'SystemDiskSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '系统盘的大小。单位：GiB

取值范围：40~500

默认值：40',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '40',
          ),
        ),
        16 => 
        array (
          'name' => 'ZoneId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可用区ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-hangzhou-b',
          ),
        ),
        17 => 
        array (
          'name' => 'VSwitchId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '交换机ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'vsw-bp1lfcjbfb099rrjn****',
          ),
        ),
        18 => 
        array (
          'name' => 'HostNamePrefix',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主机名前缀。方便您分类管理节点。',
            'type' => 'string',
            'required' => false,
            'example' => 'compute',
          ),
        ),
        19 => 
        array (
          'name' => 'HostNameSuffix',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主机名后缀。方便您分类管理节点。',
            'type' => 'string',
            'required' => false,
            'example' => '01',
          ),
        ),
        20 => 
        array (
          'name' => 'ComputeEnableHt',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点是否支持超线程。取值范围：
- true：支持超线程
- false：不支持超线程

默认值：true',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        21 => 
        array (
          'name' => 'AllocatePublicAddress',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否分配公网地址。取值范围：
- true：分配公网地址
- false：不分配公网地址

默认值：false',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
            'default' => 'false',
          ),
        ),
        22 => 
        array (
          'name' => 'InternetChargeType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '弹性公网IP付费类型。取值范围：
- PayByBandwidth：按固定带宽收费
- PayByTraffic：按使用流量计费',
            'type' => 'string',
            'required' => false,
            'example' => 'PayByTraffic',
            'default' => 'PayByTraffic',
          ),
        ),
        23 => 
        array (
          'name' => 'InternetMaxBandWidthIn',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '公网入带宽最大值，单位为Mbit/s。取值范围：

- 当所购公网出带宽小于等于10Mbit/s时：1~10，默认为10。
- 当所购公网出带宽大于10Mbit/s时：1~InternetMaxBandWidthOut的取值，默认为InternetMaxBandWidthOut的取值。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '0',
            'example' => '10',
            'default' => '0',
          ),
        ),
        24 => 
        array (
          'name' => 'InternetMaxBandWidthOut',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '公网出带宽最大值，单位为Mbit/s。取值范围：0~100

默认值：0',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '0',
            'example' => '10',
            'default' => '0',
          ),
        ),
        25 => 
        array (
          'name' => 'ClientToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。更多信息，请参见[如何保证幂等性](~~25693~~)。',
            'type' => 'string',
            'required' => false,
            'example' => '123e4567-e89b-12d3-a456-426655440000',
          ),
        ),
        26 => 
        array (
          'name' => 'SystemDiskLevel',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建ESSD云盘作为系统盘使用时，设置云盘的性能等级。取值范围：
- PL0：单盘最高随机读写IOPS 1万
- PL1：单盘最高随机读写IOPS 5万
- PL2：单盘最高随机读写IOPS 10万
- PL3：单盘最高随机读写IOPS 100万

默认值：PL1

更多ESSD性能参数，请参见[ESSD云盘](~~122389~~)。',
            'type' => 'string',
            'required' => false,
            'example' => 'PL0',
          ),
        ),
        27 => 
        array (
          'name' => 'MinCount',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定最小添加的节点数量。取值范围：1~99，并且MinCount<Count。

- ECS库存数量<MinCount，添加节点失败。

- MinCount<ECS库存数量<Count，按照MinCount指定的数量添加节点。

- Count<ECS库存数量，按照Count指定的数量添加节点。

默认值：1
',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        28 => 
        array (
          'name' => 'Sync',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否设置该接口为同步接口。取值范围：

- true：是

- false：否

默认值：false',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        29 => 
        array (
          'name' => 'DataDisks',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '随节点创建的数据盘信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'type' => 'object',
              'properties' => 
              array (
                'DataDiskSize' => 
                array (
                  'description' => '第N个随节点创建的数据盘容量大小。单位：GB

取值范围：40~500

默认值：40

N的取值范围：0~16',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '40',
                ),
                'DataDiskCategory' => 
                array (
                  'description' => '第N个随节点创建的数据盘类型。可能值：

- cloud_efficiency：高效云盘

- cloud_ssd：SSD云盘

- cloud_essd：ESSD云盘

- cloud：普通云盘

默认值：cloud_efficiency

N的取值范围：0~16',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'cloud_efficiency',
                ),
                'DataDiskDeleteWithInstance' => 
                array (
                  'description' => '第N个随节点创建的数据盘是否随实例释放。取值范围：

- true：是

- false：否

默认值：true

N的取值范围：0~16',
                  'type' => 'boolean',
                  'required' => false,
                  'example' => 'true',
                ),
                'DataDiskPerformanceLevel' => 
                array (
                  'description' => '第N个随节点创建的数据盘类型为ESSD云盘时，区分性能等级。仅当DataDisks.N.DataDiskCategory=cloud_essd时该参数有效。取值范围：
- PL0：单盘最高随机读写IOPS 1万
- PL1：单盘最高随机读写IOPS 5万
- PL2：单盘最高随机读写IOPS 10万
- PL3：单盘最高随机读写IOPS 100万

默认值：PL1

N的取值范围：0~16',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'PL1',
                ),
                'DataDiskEncrypted' => 
                array (
                  'description' => '第N个随节点创建的数据盘是否加密。取值范围：

- true：是

- false：否

默认值：false

N的取值范围：0~16',
                  'type' => 'boolean',
                  'required' => false,
                  'example' => 'false',
                ),
                'DataDiskKMSKeyId' => 
                array (
                  'description' => '第N个随节点创建的数据盘使用的KMS密钥ID。

N的取值范围：0~16

',
                  'type' => 'string',
                  'required' => false,
                  'example' => '0e478b7a-4262-4802-b8cb-00d3fb40826X',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 16,
          ),
        ),
        30 => 
        array (
          'name' => 'ComputeSpotDuration',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '抢占式实例的保留时长，单位为小时。取值范围：0~6。
- 保留时长2~6正在邀测中，如需开通请提交工单。
- 取值为0，则为无保护期模式。
默认值：1。',
            'description' => '抢占式实例的保护期，单位为小时。取值范围为0~1，设置为0表示无保护期，默认为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '6',
            'minimum' => '0',
            'example' => '1',
            'default' => '1',
          ),
        ),
        31 => 
        array (
          'name' => 'ComputeSpotInterruptionBehavior',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '抢占实例中断模式。目前仅支持Terminate（默认）直接释放实例。',
            'description' => '抢占实例中断模式。目前仅支持Terminate（默认）直接释放实例。',
            'type' => 'string',
            'required' => false,
            'example' => 'Terminate',
            'default' => 'Terminate',
          ),
        ),
        32 => 
        array (
          'name' => 'NetworkInterfaceTrafficMode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '网卡的通讯模式。参数取值范围：

- Standard：使用TCP通讯模式。


- HighPerformance：开启ERI（Elastic RDMA Interface）接口，使用RDMA通讯模式。',
            'type' => 'string',
            'required' => false,
            'example' => 'Standard',
          ),
        ),
        33 => 
        array (
          'name' => 'DnsConfig',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DNS配置信息。',
            'type' => 'string',
            'required' => false,
            'example' => '"{\\"DnsType\\":\\"PrivateZone\\",\\"DnsName\\":\\"xxxxx\\"}"',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TaskId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => 'B745C159-3155-4B94-95D0-4B73D4D2****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B745C159-3155-4B94-95D0-4B73D4D2****',
              ),
              'InstanceIds' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'InstanceId' => 
                  array (
                    'description' => '实例ID',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '实例ID。

 > 由于AddNodes是异步操作，请求成功就会立即返回结果，不会等待实例创建成功，因此InstanceIds内容为空。您可以通过[ListNodes](~~87161~~)获取InstanceId。',
                      'type' => 'string',
                      'example' => 'null',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
          3 => 
          array (
            'errorCode' => 'InvaildSystemDiskSize',
            'errorMessage' => 'The system disk size must be greater than or equal to image size.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'TooManyComputes',
            'errorMessage' => 'The number of computing nodes exceeds the quota.',
          ),
          1 => 
          array (
            'errorCode' => 'TooManyLogins',
            'errorMessage' => 'The maximum number of logged on nodes is exceeded.',
          ),
          2 => 
          array (
            'errorCode' => 'TooManyScc',
            'errorMessage' => 'The maximum number of SCC instances is exceeded.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          4 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          5 => 
          array (
            'errorCode' => 'ImageNotSupported',
            'errorMessage' => 'The specified image is not supported.',
          ),
          6 => 
          array (
            'errorCode' => 'InvalidOpt',
            'errorMessage' => 'The specified operation is invalid. Please try again later.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'VolumeNotFound',
            'errorMessage' => 'The specified volume does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
          4 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
          5 => 
          array (
            'errorCode' => 'KeyPairNotFound',
            'errorMessage' => 'The specified KeyPair does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'EipError',
            'errorMessage' => 'The EIP API request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TaskId\\": \\"B745C159-3155-4B94-95D0-4B73D4D2****\\",\\n  \\"RequestId\\": \\"B745C159-3155-4B94-95D0-4B73D4D2****\\",\\n  \\"InstanceIds\\": {\\n    \\"InstanceId\\": [\\n      \\"null\\"\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<AddNodesResponse>\\n<TaskId>B745C159-3155-4B94-95D0-4B73D4D2****</TaskId>\\n<RequestId>B745C159-3155-4B94-95D0-4B73D4D2****</RequestId>\\n<InstanceIds>\\n    <InstanceId>null</InstanceId>\\n</InstanceIds>\\n</AddNodesResponse>","errorExample":""}]',
      'title' => '批量增加计算节点',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ApplyNodes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待添加节点的集群ID。

您可以通过调用[ListClusters](~~87126~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'ImageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待添加节点的镜像ID，仅在未指定TargetImageId时，ImageId生效。

您可以通过调用[ListImages](~~87213~~)和[ListCustomImages](~~87215~~)接口获取镜像ID。

>如果添加多个节点，仅指定了TargetImageId的节点会使用TargetImageId。',
            'type' => 'string',
            'required' => false,
            'example' => 'centos_7_06_64_20G_alibase_20190711.vhd',
          ),
        ),
        2 => 
        array (
          'name' => 'ComputeSpotStrategy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点抢占策略。取值范围：

- NoSpot：按量计费节点。

- SpotWithPriceLimit：设置上限价格的抢占式实例。

- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格的抢占式实例。

默认值：NoSpot',
            'type' => 'string',
            'required' => false,
            'example' => 'NoSpot',
          ),
        ),
        3 => 
        array (
          'name' => 'ComputeSpotPriceLimit',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点每小时最高价格，取值是浮点数，最多支持3位小数。参数ComputeSpotStrategy取值为SpotWithPriceLimit时生效。

当同时设置了ComputeSpotPriceLimit与InstanceTypeModel.N.MaxPrice时，按两者的最小值创建计算节点。',
            'type' => 'number',
            'format' => 'float',
            'required' => false,
            'example' => '0.68',
          ),
        ),
        4 => 
        array (
          'name' => 'SystemDiskType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '系统盘的云盘类型。取值范围：
- cloud_efficiency：高效云盘
- cloud_ssd：SSD云盘
- cloud_essd：ESSD云盘
- cloud：普通云盘，已停售',
            'type' => 'string',
            'required' => false,
            'example' => 'cloud_ssd',
          ),
        ),
        5 => 
        array (
          'name' => 'SystemDiskSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '系统盘的大小。单位：GB

取值范围：40~500

默认值：40',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '40',
          ),
        ),
        6 => 
        array (
          'name' => 'HostNamePrefix',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主机名前缀。方便您分类管理节点。',
            'type' => 'string',
            'required' => false,
            'example' => 'compute',
          ),
        ),
        7 => 
        array (
          'name' => 'HostNameSuffix',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主机名后缀。方便您分类管理节点。',
            'type' => 'string',
            'required' => false,
            'example' => '01',
          ),
        ),
        8 => 
        array (
          'name' => 'AllocatePublicAddress',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否分配公网地址。取值范围：

- true：分配公网地址

- false：不分配公网地址

默认值：false',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
            'default' => 'false',
          ),
        ),
        9 => 
        array (
          'name' => 'InternetChargeType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '弹性公网IP付费类型。取值范围：

- PayByBandwidth：按固定带宽收费

- PayByTraffic：按使用流量计费',
            'type' => 'string',
            'required' => false,
            'example' => 'PayByTraffic',
            'default' => 'PayByTraffic',
          ),
        ),
        10 => 
        array (
          'name' => 'InternetMaxBandWidthIn',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '公网入带宽最大值，单位为Mbit/s。取值范围：

- 当所购公网出带宽小于等于10Mbit/s时：1~10，默认为10。

- 当所购公网出带宽大于10Mbit/s时：1~InternetMaxBandWidthOut的取值，默认为InternetMaxBandWidthOut的取值。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '0',
            'example' => '10',
            'default' => '0',
          ),
        ),
        11 => 
        array (
          'name' => 'InternetMaxBandWidthOut',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '公网出带宽最大值，单位为Mbit/s。取值范围：0~100

默认值：0',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'minimum' => '0',
            'example' => '10',
            'default' => '0',
          ),
        ),
        12 => 
        array (
          'name' => 'Cores',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'vCPU个数。当参数ResourceAmountType为Cores时，该参数为必选。

同时指定vCPU和Memory可以定义节点规格。例如，vCPU=2、Memory=16可以定义配置为2 vCPU、16 GB的所有节点规格。结合节点规格、可用区等因素确定可用节点规格集合，并根据价格排序为您创建价格最低的节点。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '2',
          ),
        ),
        13 => 
        array (
          'name' => 'Memory',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '内存大小，当参数ResourceAmountType为Cores时，该参数为必选。单位：GB。

同时指定vCPU和Memory可以定义节点规格。例如，vCPU=2、Memory=16可以定义配置为2 vCPU、16 GB的所有节点规格。结合节点规格、可用区等因素确定可用节点规格集合，并根据价格排序为您创建价格最低的节点。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '16',
          ),
        ),
        14 => 
        array (
          'name' => 'InstanceFamilyLevel',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例规格族级别，在指定Cores和Memory时才生效。取值范围：

- EntryLevel：入门级。

- EnterpriseLevel：企业级。

- CreditEntryLevel：积分入门级。更多信息，请参见[突发性能实例](~~59977~~)。

默认值：EnterpriseLevel',
            'type' => 'string',
            'required' => false,
            'example' => 'EntryLevel',
          ),
        ),
        15 => 
        array (
          'name' => 'TargetCapacity',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '期望添加的资源数量，具体资源数量依赖ResourceAmountType取值。

- 当ResourceAmountType取值为Instance时，TargetCapacity取值范围：1~200

- 当ResourceAmountType取值为Cores时，TargetCapacity取值范围：1~1000',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '20',
          ),
        ),
        16 => 
        array (
          'name' => 'ResourceAmountType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '期望添加的资源类型。取值范围：

- Instances：计算节点对应的ECS实例

- Cores：vCPU和内存

默认值：Instances',
            'type' => 'string',
            'required' => false,
            'example' => 'Instances',
          ),
        ),
        17 => 
        array (
          'name' => 'PriorityStrategy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '抢占式节点申请策略。取值范围：

- LowPriceResourcePlanning：按vCPU单价从低到高进行尝试创建。当设置了抢占式计费方式的多节点规格时，优先创建对应抢占式计费节点。

- CapacityOptResourcePlanning：按照价格更低及释放率更低的方式综合编排创建。

- CustomizedResourcePlanning：根据预先定义的可用区（ZoneIds.N）扩容。当优先级较高的可用区没有实例库存时，自动使用下一优先级的可用区。',
            'type' => 'string',
            'required' => false,
            'example' => 'LowPriceResourcePlanning',
          ),
        ),
        18 => 
        array (
          'name' => 'StrictSatisfiedTargetCapacity',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否满足TargetCapacity的数量要求。取值范围：

- true：如果库存不足，则不创建任何节点并返回报错。如果库存充足，会存在以下两种情况：
  - StrictResourceProvision为true：检查库存，如果库存充足才会创建节点，并严格按期望数量创建节点，否则就不创建任何节点。
  - StrictResourceProvision为false：检查库存，如果库存充足才会创建节点，但实际可能会因为先查询库存量，创建节点时实时库存不足而创建部分节点。

- false：如果库存不足，则按库存量创建部分节点。

默认值：true',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        19 => 
        array (
          'name' => 'SystemDiskLevel',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建ESSD云盘作为系统盘使用时，设置云盘的性能等级。取值范围：
- PL0：单盘最高随机读写IOPS 1万
- PL1：单盘最高随机读写IOPS 5万
- PL2：单盘最高随机读写IOPS 10万
- PL3：单盘最高随机读写IOPS 100万

默认值：PL0
关于如何选择ESSD性能等级，请参见[ESSD云盘](~~122389~~)。',
            'type' => 'string',
            'required' => false,
            'example' => 'PL0',
          ),
        ),
        20 => 
        array (
          'name' => 'StrictResourceProvision',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否必须满足TargetCapacity的数量要求。当StrictSatisfiedTargetCapacity为true时生效。取值范围：

- true：检查库存，如果库存充足才会创建节点，并严格按期望数量创建节点，否则就不创建任何节点。
- false：检查库存，如果库存充足才会创建节点，但实际可能会因为先查询库存量，创建节点时实时库存不足而创建部分节点。

默认值：false',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        21 => 
        array (
          'name' => 'Round',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分批创建节点的总批数。 取值范围：1~10

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '10',
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        22 => 
        array (
          'name' => 'Interval',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分批创建节点的时间间隔。单位：秒，取值范围：60~600

默认值：60',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '600',
            'minimum' => '60',
            'example' => '60',
            'default' => '60',
          ),
        ),
        23 => 
        array (
          'name' => 'ZoneInfos',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '可用区信息。最多可以添加10个。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '可用区信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'VSwitchId' => 
                array (
                  'description' => '待添加节点的交换机ID。N的取值范围：1~10。',
                  'type' => 'string',
                  'required' => false,
                  'docRequired' => true,
                  'example' => 'vsw-bp1e47optm9g58zcu****',
                ),
                'ZoneId' => 
                array (
                  'description' => '待添加节点的可用区ID。N的取值范围：1~10。

>多个可用区ID之间不能相同。',
                  'type' => 'string',
                  'required' => false,
                  'docRequired' => true,
                  'example' => 'cn-hangzhou-b',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'docRequired' => true,
            'maxItems' => 100,
          ),
        ),
        24 => 
        array (
          'name' => 'InstanceTypeModel',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '抢占式实例信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '抢占式实例信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'MaxPrice' => 
                array (
                  'description' => '您可以为该抢占式实例支付的每小时最高价格。取值是浮点数，最多支持3位小数。

当参数ComputeSpotStrategy取值为SpotWithPriceLimit时才生效。

N的取值范围：1~10',
                  'type' => 'number',
                  'format' => 'float',
                  'required' => false,
                  'example' => '0.034',
                ),
                'TargetImageId' => 
                array (
                  'description' => '待添加节点的镜像ID，该镜像必须为Windows镜像。

N的取值范围：1~10',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'win2016_1607_x64_dtc_zh-cn_40G_alibase_20210516.vhd',
                ),
                'InstanceType' => 
                array (
                  'description' => '待添加的节点规格，默认使用上次扩容或者创建集群时的计算节点规格。

N的取值范围：1~10',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'ecs.n1.tiny',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
        25 => 
        array (
          'name' => 'Tag',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '标签信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '标签信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Key' => 
                array (
                  'description' => '待添加节点的标签键。一旦传入该值，则不允许为空字符串。最多支持128个字符，不能以aliyun和acs:开头，不能包含http://或 https://。

N的取值范围：1~20',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'TestKey',
                ),
                'Value' => 
                array (
                  'description' => '待添加节点的标签值。一旦传入该值，可以为空字符串。最多支持128个字符，不能以acs:开头，不能包含http://或者https://。

N的取值范围：1~20',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'TestValue',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 19,
          ),
        ),
        26 => 
        array (
          'name' => 'JobQueue',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点加入的队列名称。

您可以通过调用[ListQueues](~~92176~~)获取已有队列名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'workq',
          ),
        ),
        27 => 
        array (
          'name' => 'UserData',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例自定义数据。需要以 Base64 方式编码，原始数据最多为 16 KB。Linux操作系统支持shell脚本；Windows操作系统支持bat和powershell两种格式，在Base64编码前，第一行为[bat]或者[powershell]。
> 因为传输 API 请求时，不会加密您设置的 UserData，建议不要以明文方式传入机密的信息，例如密码和私钥等。如果必须传入，建议加密后，然后以 Base64 的方式编码后再传入，在实例内部以同样的方式反解密。',
            'type' => 'string',
            'required' => false,
            'example' => 'ZWNobyBoZWxsbyBlY3Mh
',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => 'B745C159-3155-4B94-95D0-4B73D4D2****',
              ),
              'SatisfiedAmount' => 
              array (
                'description' => '创建成功的计算节点数量。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'TaskId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B745C159-3155-4B94-95D0-4B73D4D2****',
              ),
              'Detail' => 
              array (
                'description' => 'API调用结果详情。',
                'type' => 'string',
                'example' => 'Resources Application is satisfied. Creating...',
              ),
              'InstanceIds' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'InstanceId' => 
                  array (
                    'description' => '实例ID。

 > 由于ApplyNodes是异步操作，请求成功就会立即返回结果，不会等待实例创建成功，因此InstanceIds内容为空。您可以通过[ListNodes](~~87161~~)获取InstanceId。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '实例ID。

 > 由于ApplyNodes是异步操作，请求成功就会立即返回结果，不会等待实例创建成功，因此InstanceIds内容为空。您可以通过[ListNodes](~~87161~~)获取InstanceId。',
                      'type' => 'string',
                      'example' => 'null',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidVswitch',
            'errorMessage' => 'The vSwitch parameter is invalid, or the number of available IP addresses is insufficient.',
          ),
          4 => 
          array (
            'errorCode' => 'InvalidImage',
            'errorMessage' => 'The image ID is invalid.',
          ),
          5 => 
          array (
            'errorCode' => 'InvaildSystemDiskSize',
            'errorMessage' => 'The system disk size must be greater than or equal to image size.',
          ),
          6 => 
          array (
            'errorCode' => 'InvalidInstanceType.NotSupported',
            'errorMessage' => 'The instance type is invalid.',
          ),
          7 => 
          array (
            'errorCode' => 'InvalidZoneId.ValueNotSupported',
            'errorMessage' => 'The specified ZoneId is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'TooManyComputes',
            'errorMessage' => 'The number of computing nodes exceeds the quota.',
          ),
          1 => 
          array (
            'errorCode' => 'TooManyLogins',
            'errorMessage' => 'The maximum number of logged on nodes is exceeded.',
          ),
          2 => 
          array (
            'errorCode' => 'TooManyScc',
            'errorMessage' => 'The maximum number of SCC instances is exceeded.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          4 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          5 => 
          array (
            'errorCode' => 'ImageNotSupported',
            'errorMessage' => 'The specified image is not supported.',
          ),
          6 => 
          array (
            'errorCode' => 'InvalidCapacityNum.ValueNotSupported',
            'errorMessage' => 'The specified TargetCapacity is invalid.',
          ),
          7 => 
          array (
            'errorCode' => 'RecommendEmpty.InstanceTypeSoldOut',
            'errorMessage' => 'The resource is out of stock.',
          ),
          8 => 
          array (
            'errorCode' => 'ResourceTargetAmount.NotSatisfied',
            'errorMessage' => 'The resource application is not satisfied.',
          ),
          9 => 
          array (
            'errorCode' => 'RecommendEmpty.PriceNotSatisfied',
            'errorMessage' => 'The price limit is not satisfied.',
          ),
          10 => 
          array (
            'errorCode' => 'QuotaExceed.PayasyougoInstance',
            'errorMessage' => 'The pay-as-you-go instance exceeds the quota.',
          ),
          11 => 
          array (
            'errorCode' => 'RecommendEmpty.InstanceTypeNoStock',
            'errorMessage' => 'The instanceTypes are out of usage.',
          ),
          12 => 
          array (
            'errorCode' => 'RecommendEmpty.InstanceTypeNotAuthorized',
            'errorMessage' => 'The recommend instanceTypes are not authorized.',
          ),
          13 => 
          array (
            'errorCode' => 'InvalidOpt',
            'errorMessage' => 'The specified operation is invalid. Please try again later.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'VolumeNotFound',
            'errorMessage' => 'The specified volume does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
          4 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
          5 => 
          array (
            'errorCode' => 'VswitchNotFound',
            'errorMessage' => 'The specified vSwitch does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'EipError',
            'errorMessage' => 'The EIP API request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"B745C159-3155-4B94-95D0-4B73D4D2****\\",\\n  \\"SatisfiedAmount\\": 10,\\n  \\"TaskId\\": \\"B745C159-3155-4B94-95D0-4B73D4D2****\\",\\n  \\"Detail\\": \\"Resources Application is satisfied. Creating...\\",\\n  \\"InstanceIds\\": {\\n    \\"InstanceId\\": [\\n      \\"null\\"\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ApplyNodes>\\n<TaskId>B745C159-3155-4B94-95D0-4B73D4D2****</TaskId>\\n<SatisfiedAmount>10</SatisfiedAmount>\\n<RequestId>B745C159-3155-4B94-95D0-4B73D4D2****</RequestId>\\n<InstanceIds>\\n    <InstanceId>null</InstanceId>\\n</InstanceIds>\\n<Detail>Resources Application is satisfied. Creating...</Detail>\\n</ApplyNodes>","errorExample":""}]',
      'title' => '批量添加节点到指定集群',
      'summary' => '调用ApplyNodes添加一个或多个按量计费或抢占式计算节点到指定集群中。',
      'description' => '## 接口说明

该接口支持按照节点数量或节点设置的vCPU个数、内存大小等维度灵活申请所需资源。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'AddExistedNodes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '该节点待加入的集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'ImageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '为待加入集群的计算节点指定的镜像，该镜像需满足以下条件：

- 指定的镜像的操作系统应与集群中节点的操作系统保持一致。如：集群中节点的操作系统为CentOS时，只能指定CentOS镜像。
> 如果集群为混合云集群，并且开启支持多系统功能，当集群中节点的操作系统为Windows时，指定的镜像可以为Windows、CentOS。

- 指定的镜像应与集群节点的镜像大版本号保持一致，如待加入集群为CentOS 7.x，指定的镜像也应该为CentOS 7.x。

您可以通过调用[ListImages](~~87213~~)和[ListCustomImages](~~87215~~)接口获取镜像ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'centos_7_06_64_20G_alibase_20190711.vhd',
          ),
        ),
        2 => 
        array (
          'name' => 'JobQueue',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '该节点要加入的集群中的队列。',
            'type' => 'string',
            'required' => false,
            'example' => 'workq',
          ),
        ),
        3 => 
        array (
          'name' => 'ImageOwnerAlias',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像类型。取值范围：

- system：公共镜像

- self：自定义镜像

- others：共享镜像

- marketplace：镜像市场镜像

默认值：system',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'system',
          ),
        ),
        4 => 
        array (
          'name' => 'Instance',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '要添加的节点信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '节点信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Id' => 
                array (
                  'description' => '第N个（N从1开始编号，可以有多条）要添加的节点ID。取值范围：1~100。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'i-bp16mxn6mt3t7ftk****',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 100,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TaskId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'TooManyComputes',
            'errorMessage' => 'The number of computing nodes exceeds the quota.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidOpt',
            'errorMessage' => 'The specified operation is invalid. Please try again later. If the problem still exists, submit a ticket.',
          ),
          3 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          4 => 
          array (
            'errorCode' => 'ImageNotSupported',
            'errorMessage' => 'The specified image is not supported.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'VolumeNotFound',
            'errorMessage' => 'The specified volume does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
          4 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TaskId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<AddExistedNodesResponse>\\n   <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n   <TaskId>04F0F334-1335-436C-A1D7-6C044FE7****</TaskId>\\n</AddExistedNodesResponse>","errorExample":""}]',
      'title' => '添加一个或多个已存在的节点',
      'summary' => '添加一个或多个已创建的ECS实例作为计算节点，加入到指定集群中。',
      'description' => '## 接口说明

- 待添加到集群的节点处于已停止状态。

- 加入集群后，该节点的操作系统会更换为ImageId指定的操作系统。

- 节点主机名不能和集群内已有节点的主机名冲突，否则会添加失败。
',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListNodes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待查询的集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Role',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点类型。取值范围：
- Manager：管控节点
- Login：登录节点
- Compute：计算节点',
            'type' => 'string',
            'required' => false,
            'example' => 'Manager',
            'default' => 'Compute',
          ),
        ),
        2 => 
        array (
          'name' => 'HostName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点名称，支持模糊查询，支持MySQL的正则表达式。',
            'type' => 'string',
            'required' => false,
            'example' => 'test-HostName',
          ),
        ),
        3 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '显示的页码，起始值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。取值范围：1~100

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'example' => '10',
            'default' => '10',
          ),
        ),
        5 => 
        array (
          'name' => 'Sequence',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点列表排序方式。取值范围：
- Forward：正序排序。
- Backward：逆序排序。

默认值：Forward

> 和SortBy同时使用，如SortBy设置为AddedTime，Sequence设置为Forward，表示按节点加入时间正序查询。
',
            'type' => 'string',
            'required' => false,
            'example' => 'Forward',
          ),
        ),
        6 => 
        array (
          'name' => 'SortBy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点列表排序方式。取值范围：
- AddedTime：按加入时间排序

- HostName：按节点主机名称排序
',
            'type' => 'string',
            'required' => false,
            'example' => 'AddedTime',
          ),
        ),
        7 => 
        array (
          'name' => 'Filter',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点状态过滤选项。

取值格式为：{"status":"node_status"}，请将其中node_status替换为节点的状态。节点的取值范围为：

- uninit：安装中
- exception：异常
- running：运行中
- initing：初始化中
- releasing：释放中
- untracking：未加入集群
- stopped：已停止',
            'type' => 'string',
            'required' => false,
            'example' => '{"status":"running"}',
          ),
        ),
        8 => 
        array (
          'name' => 'PrivateIpAddress',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '私网IP地址。',
            'type' => 'string',
            'required' => false,
            'example' => '172.16.**.**',
          ),
        ),
        9 => 
        array (
          'name' => 'HostNamePrefix',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主机名前缀。查询具有指定前缀的节点。',
            'type' => 'string',
            'required' => false,
            'example' => 'compute',
          ),
        ),
        10 => 
        array (
          'name' => 'HostNameSuffix',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主机名后缀。查询具有指定后缀的节点。',
            'type' => 'string',
            'required' => false,
            'example' => '01',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '89A1AC0F-4A6C-4F3D-98F9-BEF9A823****',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Nodes' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'NodeInfo' => 
                  array (
                    'description' => '节点列表信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'VpcId' => 
                        array (
                          'description' => '专有网络ID。',
                          'type' => 'string',
                          'example' => 'vpc-bp1gnu8br4ay7beb2w****',
                        ),
                        'Status' => 
                        array (
                          'description' => '节点状态。可能值：
- uninit：安装中
- exception：异常
- running：运行中
- initing：初始化中
- releasing：释放中
- untracking：未加入集群
- stopped：已停止',
                          'type' => 'string',
                          'example' => 'running',
                        ),
                        'HtEnabled' => 
                        array (
                          'description' => '是否开启超线程。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'Expired' => 
                        array (
                          'description' => '包年包月付费节点是否到期。如果是按量付费节点，返回值为false。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'ImageOwnerAlias' => 
                        array (
                          'description' => '镜像类型。可能值：
- system：公共镜像
- self：自定义镜像
- others：共享镜像
- marketplace：镜像市场镜像',
                          'type' => 'string',
                          'example' => 'system',
                        ),
                        'LockReason' => 
                        array (
                          'description' => '节点被锁定类型。可能值：
- financial：因欠费被锁定。
- security：因安全原因被锁定。
- recycling：抢占式实例的待释放锁定状态。
- dedicatedhostfinancial：因为专有宿主机欠费导致ECS实例被锁定。

默认返回为空字符串。',
                          'type' => 'string',
                          'example' => 'financial',
                        ),
                        'HostName' => 
                        array (
                          'description' => '节点名称。',
                          'type' => 'string',
                          'example' => 'test-HostName',
                        ),
                        'InstanceType' => 
                        array (
                          'description' => '节点实例规格。',
                          'type' => 'string',
                          'example' => 'ecs.c5.large',
                        ),
                        'PublicIpAddress' => 
                        array (
                          'description' => '公网IP地址。',
                          'type' => 'string',
                          'example' => '172.16.**.**',
                        ),
                        'SpotStrategy' => 
                        array (
                          'description' => '计算节点竞价策略。',
                          'type' => 'string',
                          'example' => 'NoSpot',
                        ),
                        'CreatedByEhpc' => 
                        array (
                          'description' => '是否由E-HPC创建。

- true：E-HPC创建

- false：非E-HPC创建',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'RegionId' => 
                        array (
                          'description' => '地域ID。',
                          'type' => 'string',
                          'example' => 'cn-hangzhou',
                        ),
                        'VSwitchId' => 
                        array (
                          'description' => '交换机ID。',
                          'type' => 'string',
                          'example' => 'vsw-bp1e47optm9g58zcu****',
                        ),
                        'IpAddress' => 
                        array (
                          'description' => '节点IP地址。',
                          'type' => 'string',
                          'example' => '172.16.**.**',
                        ),
                        'ExpiredTime' => 
                        array (
                          'description' => '包年包月付费节点到期时间。如果是按量付费节点，返回值为空。',
                          'type' => 'string',
                          'example' => '2020-06-09T06:22:02.000Z',
                        ),
                        'Version' => 
                        array (
                          'description' => '集群客户端版本。',
                          'type' => 'string',
                          'example' => '1.0.78',
                        ),
                        'ZoneId' => 
                        array (
                          'description' => '可用区ID。',
                          'type' => 'string',
                          'example' => 'cn-hangzhou-b',
                        ),
                        'AddTime' => 
                        array (
                          'description' => '加入集群的时间。',
                          'type' => 'string',
                          'example' => '2020-06-09T06:22:02.000Z',
                        ),
                        'ImageId' => 
                        array (
                          'description' => '镜像ID。',
                          'type' => 'string',
                          'example' => 'centos_7_06_64_20G_alibase_20190711.vhd',
                        ),
                        'Location' => 
                        array (
                          'description' => '节点所在位置。可能值：
- OnPremise：本地节点
- PublicCloud：公共云节点',
                          'type' => 'string',
                          'example' => 'PublicCloud',
                        ),
                        'Id' => 
                        array (
                          'description' => '节点ID。',
                          'type' => 'string',
                          'example' => 'i-bp15707mys2rsy0j****',
                        ),
                        'CreateMode' => 
                        array (
                          'description' => '节点创建方式。可能值：
- manual：手动扩容
- autoscale：自动扩容',
                          'type' => 'string',
                          'example' => 'manual',
                        ),
                        'Roles' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Role' => 
                            array (
                              'description' => '节点类别。可能值：
- Scheduler：主调度器
- SchedulerBackup：备用调度器
- Account：主域服务器
- AccountBackup：备用域服务器
- Login：登录节点
- Compute：计算节点

调度器和域服务器都属于管控节点。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '节点类别。可能值：
- Scheduler：主调度器
- SchedulerBackup：备用调度器
- Account：主域服务器
- AccountBackup：备用域服务器
- Login：登录节点
- Compute：计算节点

调度器和域服务器都属于管控节点。',
                                'type' => 'string',
                                'example' => '[“Compute”]',
                              ),
                            ),
                          ),
                        ),
                        'TotalResources' => 
                        array (
                          'description' => '该节点使用的资源总量。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Gpu' => 
                            array (
                              'description' => 'GPU卡个数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Cpu' => 
                            array (
                              'description' => 'CPU个数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                            'Memory' => 
                            array (
                              'description' => '内存资源总量。单位：GB
',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1024',
                            ),
                          ),
                        ),
                        'UsedResources' => 
                        array (
                          'description' => '计算节点资源使用量，其他类型节点返回值为空。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Gpu' => 
                            array (
                              'description' => 'GPU卡个数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Cpu' => 
                            array (
                              'description' => 'CPU个数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Memory' => 
                            array (
                              'description' => '内存资源总量。单位：GB',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                          ),
                        ),
                        'StateInSched' => 
                        array (
                          'description' => '从调度器查看到的节点状态，不同调度器状态不同。',
                          'type' => 'string',
                          'example' => 'active',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          4 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 1,\\n  \\"RequestId\\": \\"89A1AC0F-4A6C-4F3D-98F9-BEF9A823****\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Nodes\\": {\\n    \\"NodeInfo\\": [\\n      {\\n        \\"VpcId\\": \\"vpc-bp1gnu8br4ay7beb2w****\\",\\n        \\"Status\\": \\"running\\",\\n        \\"HtEnabled\\": true,\\n        \\"Expired\\": false,\\n        \\"ImageOwnerAlias\\": \\"system\\",\\n        \\"LockReason\\": \\"financial\\",\\n        \\"HostName\\": \\"test-HostName\\",\\n        \\"InstanceType\\": \\"ecs.c5.large\\",\\n        \\"PublicIpAddress\\": \\"172.16.**.**\\",\\n        \\"SpotStrategy\\": \\"NoSpot\\",\\n        \\"CreatedByEhpc\\": true,\\n        \\"RegionId\\": \\"cn-hangzhou\\",\\n        \\"VSwitchId\\": \\"vsw-bp1e47optm9g58zcu****\\",\\n        \\"IpAddress\\": \\"172.16.**.**\\",\\n        \\"ExpiredTime\\": \\"2020-06-09T06:22:02.000Z\\",\\n        \\"Version\\": \\"1.0.78\\",\\n        \\"ZoneId\\": \\"cn-hangzhou-b\\",\\n        \\"AddTime\\": \\"2020-06-09T06:22:02.000Z\\",\\n        \\"ImageId\\": \\"centos_7_06_64_20G_alibase_20190711.vhd\\",\\n        \\"Location\\": \\"PublicCloud\\",\\n        \\"Id\\": \\"i-bp15707mys2rsy0j****\\",\\n        \\"CreateMode\\": \\"manual\\",\\n        \\"Roles\\": {\\n          \\"Role\\": [\\n            \\"[“Compute”]\\"\\n          ]\\n        },\\n        \\"TotalResources\\": {\\n          \\"Gpu\\": 0,\\n          \\"Cpu\\": 1,\\n          \\"Memory\\": 1024\\n        },\\n        \\"UsedResources\\": {\\n          \\"Gpu\\": 0,\\n          \\"Cpu\\": 0,\\n          \\"Memory\\": 0\\n        },\\n        \\"StateInSched\\": \\"active\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListNodesResponse>\\n    <PageSize>1</PageSize>\\n    <RequestId>89A1AC0F-4A6C-4F3D-98F9-BEF9A823****</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <TotalCount>1</TotalCount>\\n    <Nodes>\\n        <VpcId>vpc-bp1gnu8br4ay7beb2w****</VpcId>\\n        <Status>running</Status>\\n        <HtEnabled>true</HtEnabled>\\n        <Expired>false</Expired>\\n        <ImageOwnerAlias>system</ImageOwnerAlias>\\n        <LockReason>financial</LockReason>\\n        <HostName>test-HostName</HostName>\\n        <InstanceType>ecs.c5.large</InstanceType>\\n        <PublicIpAddress>172.16.**.**</PublicIpAddress>\\n        <SpotStrategy>NoSpot</SpotStrategy>\\n        <CreatedByEhpc>true</CreatedByEhpc>\\n        <RegionId>cn-hangzhou</RegionId>\\n        <VSwitchId>vsw-bp1e47optm9g58zcu****</VSwitchId>\\n        <IpAddress>172.16.**.**</IpAddress>\\n        <ExpiredTime>2020-06-09T06:22:02.000Z</ExpiredTime>\\n        <Version>1.0.78</Version>\\n        <ZoneId>cn-hangzhou-b</ZoneId>\\n        <AddTime>2020-06-09T06:22:02.000Z</AddTime>\\n        <ImageId>centos_7_06_64_20G_alibase_20190711.vhd</ImageId>\\n        <Location>PublicCloud</Location>\\n        <Id>i-bp15707mys2rsy0j****</Id>\\n        <CreateMode>manual</CreateMode>\\n        <Roles>[“Compute”]</Roles>\\n        <TotalResources>\\n            <Gpu>0</Gpu>\\n            <Cpu>1</Cpu>\\n            <Memory>1024</Memory>\\n        </TotalResources>\\n        <UsedResources>\\n            <Gpu>0</Gpu>\\n            <Cpu>0</Cpu>\\n            <Memory>0</Memory>\\n        </UsedResources>\\n        <StateInSched>active</StateInSched>\\n    </Nodes>\\n</ListNodesResponse>","errorExample":""}]',
      'title' => '查询集群中节点列表',
      'summary' => '调用ListNodes查询指定集群中的节点列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListNodesNoPaging' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待查询的集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Role',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点类型，取值范围： 
- Manager：管控节点
- Login：登录节点
- Compute：计算节点

默认值：Compute',
            'type' => 'string',
            'required' => false,
            'example' => 'Compute',
            'default' => 'Compute',
          ),
        ),
        2 => 
        array (
          'name' => 'HostName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点名称，支持模糊查询，支持MySQL的正则表达式。',
            'type' => 'string',
            'required' => false,
            'example' => 'Compute0',
          ),
        ),
        3 => 
        array (
          'name' => 'Sequence',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点列表排序方式。取值范围：
- Forward：按节点的加入时间正序排序。
- Backward：按节点的加入时间逆序排序。

默认值：Forward',
            'type' => 'string',
            'required' => false,
            'example' => 'Forward',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'Nodes' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'NodeInfo' => 
                  array (
                    'description' => '节点列表信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '节点状态。可能值：
- uninit：安装中
- exception：异常
- running：运行中
- initing：初始化中
- releasing：释放中
- untracking：未加入集群
- stopped：已停止',
                          'type' => 'string',
                          'example' => 'untracking',
                        ),
                        'HostName' => 
                        array (
                          'description' => '节点名称。',
                          'type' => 'string',
                          'example' => 'compute0',
                        ),
                        'InstanceType' => 
                        array (
                          'description' => '节点规格。',
                          'type' => 'string',
                          'example' => 'ecs.n1.tiny',
                        ),
                        'ImageId' => 
                        array (
                          'description' => '镜像ID。',
                          'type' => 'string',
                          'example' => 'centos_7_02_64_20G_alibase_20170818****',
                        ),
                        'Id' => 
                        array (
                          'description' => '节点ID。',
                          'type' => 'string',
                          'example' => 'i-bp13p7vlcb1uihfv****',
                        ),
                        'Roles' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          4 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"Nodes\\": {\\n    \\"NodeInfo\\": [\\n      {\\n        \\"Status\\": \\"untracking\\",\\n        \\"HostName\\": \\"compute0\\",\\n        \\"InstanceType\\": \\"ecs.n1.tiny\\",\\n        \\"ImageId\\": \\"centos_7_02_64_20G_alibase_20170818****\\",\\n        \\"Id\\": \\"i-bp13p7vlcb1uihfv****\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListNodesNoPagingResponse>\\n<RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n<Nodes>\\n    <NodeInfo>\\n        <Status>untracking</Status>\\n        <ImageId>centos_7_02_64_20G_alibase_20170818****</ImageId>\\n        <Id>i-bp13p7vlcb1uihfv****</Id>\\n        <InstanceType>ecs.n1.tiny</InstanceType>\\n        <HostName>compute0</HostName>\\n    </NodeInfo>\\n</Nodes>\\n</ListNodesNoPagingResponse>","errorExample":""}]',
      'title' => '查询集群节点列表',
      'summary' => '不分页查询用户指定集群中的所有节点信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'StartNodes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Role',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点角色。取值范围：
- Manager：管控节点
- Login：登录节点
- Compute：计算节点

默认值：Compute',
            'type' => 'string',
            'required' => false,
            'example' => 'Compute',
            'default' => 'Compute',
          ),
        ),
        2 => 
        array (
          'name' => 'Instance',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '要启动的节点信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '节点信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Id' => 
                array (
                  'description' => '第N个要启动的节点的实例ID。N的取值范围：1~100

请确保节点状态必须为stopped（已停止），您可以调用[ListNodes](~~87161~~)查询待启动节点的状态 。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'i-bp13p7vlcb1uihfv****',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 10000,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TaskId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidNodeStatus',
            'errorMessage' => 'The operation failed due to invalid node status.',
          ),
          2 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ComputeNotFound',
            'errorMessage' => 'The specified compute node does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
          3 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'EipError',
            'errorMessage' => 'The EIP API request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TaskId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<StartNodesResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n    <TaskId>04F0F334-1335-436C-A1D7-6C044FE7****</TaskId>\\n</StartNodesResponse>","errorExample":""}]',
      'title' => '启动集群中节点列表',
      'summary' => '调用StartNodes启动集群中的一个或多个节点。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'StopNodes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Role',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点角色。取值范围：
- Manager：管控节点
- Login：登录节点
- Compute：计算节点

默认值：Compute',
            'type' => 'string',
            'required' => false,
            'example' => 'Compute',
            'default' => 'Compute',
          ),
        ),
        2 => 
        array (
          'name' => 'Instance',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '要停止的节点信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '节点信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Id' => 
                array (
                  'description' => '第N个要停止的节点ID。N的取值范围：1~100

您可以通过调用[ListNodes](~~87161~~)获取节点ID。',
                  'type' => 'string',
                  'required' => true,
                  'docRequired' => true,
                  'example' => 'i-bp13p7vlcb1uihf****',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 10000,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TaskId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidNodeStatus',
            'errorMessage' => 'The operation failed due to invalid node status.',
          ),
          2 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ComputeNotFound',
            'errorMessage' => 'The specified compute node does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
          3 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'EipError',
            'errorMessage' => 'The EIP API request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TaskId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<StartNodesResponse>\\n    <TaskId>04F0F334-1335-436C-A1D7-6C044FE7****</TaskId>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n</StartNodesResponse>","errorExample":""}]',
      'title' => '停止集群中节点列表',
      'summary' => '调用StopNodes停止集群中的一个或多个节点。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ResetNodes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Instance',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '要重置的节点信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '节点信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Id' => 
                array (
                  'description' => '第N个要重置的计算节点ID。N的取值范围：1~100

您可以通过调用[ListNodes](~~87161~~)获取节点ID。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'i-bp13p7vlcb1uihfv****',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 10000,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TaskId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidNodeStatus',
            'errorMessage' => 'The operation failed due to invalid node status.',
          ),
          2 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'VolumeNotFound',
            'errorMessage' => 'The specified volume does not exist.',
          ),
          3 => 
          array (
            'errorCode' => 'ComputeNotFound',
            'errorMessage' => 'The specified compute node does not exist.',
          ),
          4 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
          5 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'EipError',
            'errorMessage' => 'The EIP API request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TaskId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<ResetNodesResponse>\\n    <TaskId>04F0F334-1335-436C-A1D7-6C044FE7****</TaskId>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n</ResetNodesResponse>","errorExample":""}]',
      'title' => '批量重置计算节点',
      'summary' => '调用ResetNodes重置一个或多个计算节点。',
      'description' => '## 接口说明
重置节点后，节点的系统和软件将恢复初始状态。如无特殊需要（如故障修复等），请勿重置处于运行中状态的节点，以免作业无法正常运行。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteNodes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以调用[ListClusters](~~87116~~)查询集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'ReleaseInstance',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否释放由E-HPC创建的节点。

默认值：true',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
            'default' => 'true',
          ),
        ),
        2 => 
        array (
          'name' => 'Sync',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否直接删除节点。取值范围：

- true：是

- false：否',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        3 => 
        array (
          'name' => 'Instance',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '待删除的节点信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '节点信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Id' => 
                array (
                  'description' => '要删除的计算节点ID。N的取值范围：1~100

您可以调用[DescribeCluster](~~87126~~)查询指定集群中的节点ID。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'i-bp13p7vlcb1uihfv****',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 10000,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TaskId' => 
              array (
                'description' => '任务ID。

- 当Sync取值为true，该接口为同步接口。TaskId为Not Available。

- 当Sync取值为false，该接口为异步接口。您可以调用[ListTasks](~~268225~~)查询任务运行结果。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidNodeStatus',
            'errorMessage' => 'The operation failed due to invalid node status.',
          ),
          2 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ComputeNotFound',
            'errorMessage' => 'The specified compute node does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
          3 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'EipError',
            'errorMessage' => 'The EIP API request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TaskId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteNodesResponse>\\n    <TaskId>04F0F334-1335-436C-A1D7-6C044FE7****</TaskId>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n</DeleteNodesResponse>","errorExample":""}]',
      'title' => '批量删除计算节点',
      'summary' => '调用DeleteNodes删除指定集群中一个或多个计算节点。',
      'description' => '## 接口说明
删除节点前，建议您导出节点上所有作业数据，以免因为删除节点而导致数据丢失。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'AddQueue' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'QueueName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '要添加的队列名称。长度为1~63个字符，必须以大小写英文字母开头，可以包含数字、下划线（_）。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'test1',
          ),
        ),
        2 => 
        array (
          'name' => 'NetworkInterfaceTrafficMode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '弹性网卡的通讯模式。取值范围：

- Standard：使用TCP通讯模式。
- HighPerformance：开启ERI（Elastic RDMA Interface）接口，使用RDMA通讯模式。',
            'type' => 'string',
            'required' => false,
            'example' => 'Standard',
          ),
        ),
        3 => 
        array (
          'name' => 'DeploymentSetId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '部署集ID。
您可以通过[DescribeDeploymentSets](~~91313~~)获取部署集ID，当前仅支持网络低时延策略的部署集。',
            'type' => 'string',
            'required' => false,
            'example' => 'ds-bp1frxuzdg87zh4pzq****',
          ),
        ),
        4 => 
        array (
          'name' => 'UseESS',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否使用弹性伸缩组。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '7ABFF29F-BD9C-4663-AD5D-E620FA48****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          4 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          5 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"7ABFF29F-BD9C-4663-AD5D-E620FA48****\\"\\n}","errorExample":""},{"type":"xml","example":"<AddQueueResponse>\\n    <RequestId>7ABFF29F-BD9C-4663-AD5D-E620FA48****</RequestId>\\n</AddQueueResponse>","errorExample":""}]',
      'title' => '新建一个集群队列',
      'summary' => '调用AddQueue为指定集群新建一个队列。',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListQueues' => 
    array (
      'summary' => '调用ListQueues查询指定集群的队列列表。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否异步查询。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'C6E5005C-00B0-4F27-98BB-95AB88016C22',
              ),
              'Queues' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'QueueInfo' => 
                  array (
                    'description' => '队列详细信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '队列详细信息。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Type' => 
                        array (
                          'description' => '队列类型。可能值：

- Execution：可以执行作业的队列。
- Router：不能执行作业，只会将接受的作业转发至绑定的Execution队列执行。',
                          'type' => 'string',
                          'example' => 'Execution',
                        ),
                        'HostNamePrefix' => 
                        array (
                          'description' => '队列中计算节点的主机名前缀名称。',
                          'type' => 'string',
                          'example' => 'compute',
                        ),
                        'QueueName' => 
                        array (
                          'description' => '队列名称。',
                          'type' => 'string',
                          'example' => 'workq',
                        ),
                        'EnableAutoGrow' => 
                        array (
                          'description' => '队列是否启动自动扩容。可能值：

- true：已启动
- false：未启动',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'ResourceGroupId' => 
                        array (
                          'description' => '队列所属资源组ID。',
                          'type' => 'string',
                          'example' => 'rg-acfmxp7uc24****',
                        ),
                        'ImageId' => 
                        array (
                          'description' => '镜像ID。',
                          'type' => 'string',
                          'example' => 'centos_7_06_64_20G_alibase_20****.vhd',
                        ),
                        'HostNameSuffix' => 
                        array (
                          'description' => '队列中计算节点的主机名后缀名称。',
                          'type' => 'string',
                          'example' => '01',
                        ),
                        'SpotStrategy' => 
                        array (
                          'description' => '计算节点抢占策略。可能值：

- NoSpot：正常按量付费实例。
- SpotWithPriceLimit：设置上限价格的抢占式实例。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格。',
                          'type' => 'string',
                          'example' => 'NoSpot',
                        ),
                        'SpotInstanceTypes' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Instance' => 
                            array (
                              'description' => '抢占式实例信息。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '抢占式实例信息。',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'InstanceType' => 
                                  array (
                                    'description' => '抢占式实例的规格。',
                                    'type' => 'string',
                                    'example' => 'ecs.n1.tiny',
                                  ),
                                  'SpotPriceLimit' => 
                                  array (
                                    'description' => '实例的每小时最高价格，支持最多3位小数。参数SpotStrategy取值为SpotWithPriceLimit时生效。',
                                    'type' => 'number',
                                    'format' => 'float',
                                    'example' => '0.062',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                        'ComputeInstanceType' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'InstanceType' => 
                            array (
                              'description' => '计算节点的实例规格。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '计算节点的实例规格。',
                                'type' => 'string',
                                'example' => 'ecs.c7.xlarge',
                              ),
                            ),
                          ),
                        ),
                        'DeploymentSetId' => 
                        array (
                          'description' => '部署集ID。
您可以通过[DescribeDeploymentSets](~~91313~~)获取部署集ID，当前仅支持网络低时延策略的部署集。',
                          'type' => 'string',
                          'example' => 'ds-bp1frxuzdg87zh4pzq****',
                        ),
                        'UseESS' => 
                        array (
                          'description' => '是否使用弹性伸缩组。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'NetworkInterfaceTrafficMode' => 
                        array (
                          'description' => '弹性网卡的通讯模式。取值范围：

- Standard：使用TCP通讯模式。
- HighPerformance：开启ERI（Elastic RDMA Interface）接口，使用RDMA通讯模式。',
                          'type' => 'string',
                          'example' => 'Standard',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
          4 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          5 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          6 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"C6E5005C-00B0-4F27-98BB-95AB88016C22\\",\\n  \\"Queues\\": {\\n    \\"QueueInfo\\": [\\n      {\\n        \\"Type\\": \\"Execution\\",\\n        \\"HostNamePrefix\\": \\"compute\\",\\n        \\"QueueName\\": \\"workq\\",\\n        \\"EnableAutoGrow\\": false,\\n        \\"ResourceGroupId\\": \\"rg-acfmxp7uc24****\\",\\n        \\"ImageId\\": \\"centos_7_06_64_20G_alibase_20****.vhd\\",\\n        \\"HostNameSuffix\\": \\"01\\",\\n        \\"SpotStrategy\\": \\"NoSpot\\",\\n        \\"SpotInstanceTypes\\": {\\n          \\"Instance\\": [\\n            {\\n              \\"InstanceType\\": \\"ecs.n1.tiny\\",\\n              \\"SpotPriceLimit\\": 0.062\\n            }\\n          ]\\n        },\\n        \\"ComputeInstanceType\\": {\\n          \\"InstanceType\\": [\\n            \\"ecs.c7.xlarge\\"\\n          ]\\n        },\\n        \\"DeploymentSetId\\": \\"ds-bp1frxuzdg87zh4pzq****\\",\\n        \\"UseESS\\": false,\\n        \\"NetworkInterfaceTrafficMode\\": \\"Standard\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListQueuesResponse>\\n    <RequestId>C6E5005C-00B0-4F27-98BB-95AB88016C22</RequestId>\\n    <Queues>\\n        <QueueInfo>\\n            <HostNameSuffix>01</HostNameSuffix>\\n            <EnableAutoGrow>false</EnableAutoGrow>\\n            <SpotInstanceTypes>\\n            </SpotInstanceTypes>\\n            <ImageId>centos_7_06_64_20G_alibase_20****.vhd</ImageId>\\n            <HostNamePrefix>compute</HostNamePrefix>\\n            <QueueName>workq</QueueName>\\n            <ResourceGroupId>rg-acfmxp7uc24****</ResourceGroupId>\\n            <SpotStrategy>SpotWithPriceLimit</SpotStrategy>\\n            <SpotPriceLimit>0.062</SpotPriceLimit>\\n            <Type>Execution</Type>\\n            <ComputeInstanceType>\\n                <InstanceType>ecs.n1.small</InstanceType>\\n            </ComputeInstanceType>\\n        </QueueInfo>\\n    </Queues>\\n</ListQueuesResponse>","errorExample":""}]',
      'title' => '查询集群队列列表',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateQueueConfig' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'QueueName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '队列名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'workq',
          ),
        ),
        2 => 
        array (
          'name' => 'ResourceGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源组ID。

您可以通过调用[ListResourceGroups](~~158855~~)获取资源组ID。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'rg-acfmxazb4ph****',
          ),
        ),
        3 => 
        array (
          'name' => 'ComputeInstanceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点规格。

您可以调用[ListPreferredEcsTypes](~~188592~~)接口获取E-HPC推荐的节点规格信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'ecs.n1.tiny',
          ),
        ),
        4 => 
        array (
          'name' => 'DeploymentSetId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '部署集ID。
您可以通过[DescribeDeploymentSets](~~91313~~)获取部署集ID，当前仅支持网络低时延策略的部署集。',
            'type' => 'string',
            'required' => false,
            'example' => 'ds-bp1frxuzdg87zh4pzq****',
          ),
        ),
        5 => 
        array (
          'name' => 'NetworkInterfaceTrafficMode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '弹性网卡的通讯模式。取值范围：

- Standard：使用TCP通讯模式。
- HighPerformance：开启ERI（Elastic RDMA Interface）接口，使用RDMA通讯模式。',
            'type' => 'string',
            'required' => false,
            'example' => 'Standard',
            'enum' => 
            array (
              0 => 'Standard',
              1 => 'HighPerformance',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '5198C3E8-85F5-4280-8547-687C1710****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidClientVersion',
            'errorMessage' => 'The client version is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"5198C3E8-85F5-4280-8547-687C1710****\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeGWSClustersResponse>\\r\\n    <requestId>5198C3E8-85F5-4280-8547-687C1710****</requestId>\\r\\n</DescribeGWSClustersResponse>","errorExample":""}]',
      'title' => '更新队列资源组和计算节点实例信息',
      'summary' => '为集群中的队列更新资源组和计算节点实例的信息。',
      'description' => '## 接口说明
更新资源组后，如果您通过集群扩容新增节点，节点将会自动添加到新的资源组。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListNodesByQueue' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'QueueName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '队列名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'workq',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '显示的页码，起始值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的行数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'example' => '10',
            'default' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否异步查询。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B405FF19-2D5F-4489-A84C-BC15CC1B24BD',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Nodes' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'NodeInfo' => 
                  array (
                    'description' => '节点列表信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'VpcId' => 
                        array (
                          'description' => '专有网络ID。',
                          'type' => 'string',
                          'example' => 'vpc-bp1gnu8br4ay7beb2w****',
                        ),
                        'Status' => 
                        array (
                          'description' => '节点状态。可能值：
- uninit：未初始化
- init：初始化中
- ready：空闲
- running：运行中
- exception：异常
- untracking：未加入集群',
                          'type' => 'string',
                          'example' => 'untracking',
                        ),
                        'HtEnabled' => 
                        array (
                          'description' => '是否启用HT。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'Expired' => 
                        array (
                          'description' => '包年包月节点是否到期。如果是按量付费节点，则为false。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'ImageOwnerAlias' => 
                        array (
                          'description' => '镜像类型，可能值：
- system：公共镜像
- self：自定义镜像
- others：共享镜像
- marketplace：镜像市场镜像',
                          'type' => 'string',
                          'example' => 'system',
                        ),
                        'LockReason' => 
                        array (
                          'description' => '节点被锁定类型，可能值：
- financial：因欠费被锁定。
- security：因安全原因被锁定。
- recycling：抢占式实例的待释放锁定状态。
- dedicatedhostfinancial：因为专有宿主机欠费导致ECS实例被锁定。

默认返回为空字符串。',
                          'type' => 'string',
                          'example' => 'financial',
                        ),
                        'HostName' => 
                        array (
                          'description' => '节点名称。',
                          'type' => 'string',
                          'example' => 'compute0',
                        ),
                        'PublicIpAddress' => 
                        array (
                          'description' => '节点的公网IP地址。',
                          'type' => 'string',
                          'example' => '10.34.**.**',
                        ),
                        'SpotStrategy' => 
                        array (
                          'description' => '实例的抢占策略。可能值：
- NoSpot：正常按量付费实例。
- SpotWithPriceLimit：设置上限价格的抢占式实例。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格。',
                          'type' => 'string',
                          'example' => 'NoSpot',
                        ),
                        'CreatedByEhpc' => 
                        array (
                          'description' => '是否由E-HPC创建的节点。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'RegionId' => 
                        array (
                          'description' => '地域ID。',
                          'type' => 'string',
                          'example' => 'cn-hangzhou',
                        ),
                        'VSwitchId' => 
                        array (
                          'description' => '交换机ID。',
                          'type' => 'string',
                          'example' => 'vsw-bp1e47optm9g58zcu****',
                        ),
                        'IpAddress' => 
                        array (
                          'description' => '节点私网IP地址。',
                          'type' => 'string',
                          'example' => '172.168.**.**',
                        ),
                        'ExpiredTime' => 
                        array (
                          'description' => '包年包月节点到期时间。如果是按量付费节点，则此项为空。',
                          'type' => 'string',
                          'example' => '2020-09-18T13:24:29.000Z',
                        ),
                        'Version' => 
                        array (
                          'description' => '集群所使用的客户端版本号。',
                          'type' => 'string',
                          'example' => '1.0.64',
                        ),
                        'ZoneId' => 
                        array (
                          'description' => '可用区ID。',
                          'type' => 'string',
                          'example' => 'cn-hangzhou-b',
                        ),
                        'AddTime' => 
                        array (
                          'description' => '节点加入集群的时间。',
                          'type' => 'string',
                          'example' => '2019-09-18T13:24:29.000Z',
                        ),
                        'ImageId' => 
                        array (
                          'description' => '镜像ID。',
                          'type' => 'string',
                          'example' => 'centos_7_02_64_20G_alibase_20170818****',
                        ),
                        'Location' => 
                        array (
                          'description' => '节点所在位置。可能值：
- OnPremise：混合云集群。
- PublicCloud：公有云集群。',
                          'type' => 'string',
                          'example' => 'PublicCloud',
                        ),
                        'Id' => 
                        array (
                          'description' => '节点实例ID。',
                          'type' => 'string',
                          'example' => 'i-bp13p7vlcb1uihfv****',
                        ),
                        'CreateMode' => 
                        array (
                          'description' => '节点创建方式。可能值：
- manual：手动扩容
- autoscale：自动扩容',
                          'type' => 'string',
                          'example' => 'manual',
                        ),
                        'TotalResources' => 
                        array (
                          'description' => '资源总量。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Gpu' => 
                            array (
                              'description' => 'GPU资源总量。单位：卡',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Cpu' => 
                            array (
                              'description' => 'CPU资源总量。单位：核',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                            'Memory' => 
                            array (
                              'description' => '内存资源总量。单位：GB',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1024',
                            ),
                          ),
                        ),
                        'UsedResources' => 
                        array (
                          'description' => '计算节点资源使用量，其他类型节点返回值为空。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Gpu' => 
                            array (
                              'description' => 'GPU资源总量。单位：卡',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Cpu' => 
                            array (
                              'description' => 'CPU资源总量。单位：核',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                            'Memory' => 
                            array (
                              'description' => '内存资源总量。单位：GB',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '1',
                            ),
                          ),
                        ),
                        'StateInSched' => 
                        array (
                          'description' => '从调度器查看到的节点状态，不同调度器状态不同。',
                          'type' => 'string',
                          'example' => 'active',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          4 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 1,\\n  \\"RequestId\\": \\"B405FF19-2D5F-4489-A84C-BC15CC1B24BD\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Nodes\\": {\\n    \\"NodeInfo\\": [\\n      {\\n        \\"VpcId\\": \\"vpc-bp1gnu8br4ay7beb2w****\\",\\n        \\"Status\\": \\"untracking\\",\\n        \\"HtEnabled\\": true,\\n        \\"Expired\\": false,\\n        \\"ImageOwnerAlias\\": \\"system\\",\\n        \\"LockReason\\": \\"financial\\",\\n        \\"HostName\\": \\"compute0\\",\\n        \\"PublicIpAddress\\": \\"10.34.**.**\\",\\n        \\"SpotStrategy\\": \\"NoSpot\\",\\n        \\"CreatedByEhpc\\": true,\\n        \\"RegionId\\": \\"cn-hangzhou\\",\\n        \\"VSwitchId\\": \\"vsw-bp1e47optm9g58zcu****\\",\\n        \\"IpAddress\\": \\"172.168.**.**\\",\\n        \\"ExpiredTime\\": \\"2020-09-18T13:24:29.000Z\\",\\n        \\"Version\\": \\"1.0.64\\",\\n        \\"ZoneId\\": \\"cn-hangzhou-b\\",\\n        \\"AddTime\\": \\"2019-09-18T13:24:29.000Z\\",\\n        \\"ImageId\\": \\"centos_7_02_64_20G_alibase_20170818****\\",\\n        \\"Location\\": \\"PublicCloud\\",\\n        \\"Id\\": \\"i-bp13p7vlcb1uihfv****\\",\\n        \\"CreateMode\\": \\"manual\\",\\n        \\"TotalResources\\": {\\n          \\"Gpu\\": 0,\\n          \\"Cpu\\": 1,\\n          \\"Memory\\": 1024\\n        },\\n        \\"UsedResources\\": {\\n          \\"Gpu\\": 0,\\n          \\"Cpu\\": 1,\\n          \\"Memory\\": 1\\n        },\\n        \\"StateInSched\\": \\"active\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListNodesByQueueResponse>\\n    <PageSize>1</PageSize>\\n    <RequestId>B405FF19-2D5F-4489-A84C-BC15CC1B24BD</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <TotalCount>1</TotalCount>\\n    <Nodes>\\n        <VpcId>vpc-bp1gnu8br4ay7beb2w****</VpcId>\\n        <Status>untracking</Status>\\n        <HtEnabled>true</HtEnabled>\\n        <Expired>false</Expired>\\n        <ImageOwnerAlias>system</ImageOwnerAlias>\\n        <LockReason>financial</LockReason>\\n        <HostName>compute0</HostName>\\n        <PublicIpAddress>10.34.**.**</PublicIpAddress>\\n        <SpotStrategy>NoSpot</SpotStrategy>\\n        <CreatedByEhpc>true</CreatedByEhpc>\\n        <RegionId>cn-hangzhou</RegionId>\\n        <VSwitchId>vsw-bp1e47optm9g58zcu****</VSwitchId>\\n        <IpAddress>172.168.**.**</IpAddress>\\n        <ExpiredTime>2020-09-18T13:24:29.000Z</ExpiredTime>\\n        <Version>1.0.64</Version>\\n        <ZoneId>cn-hangzhou-b</ZoneId>\\n        <AddTime>2019-09-18T13:24:29.000Z</AddTime>\\n        <ImageId>centos_7_02_64_20G_alibase_20170818****</ImageId>\\n        <Location>PublicCloud</Location>\\n        <Id>i-bp13p7vlcb1uihfv****</Id>\\n        <CreateMode>manual</CreateMode>\\n        <TotalResources>\\n            <Gpu>0</Gpu>\\n            <Cpu>1</Cpu>\\n            <Memory>1024</Memory>\\n        </TotalResources>\\n        <UsedResources>\\n            <Gpu>0</Gpu>\\n            <Cpu>1</Cpu>\\n            <Memory>1</Memory>\\n        </UsedResources>\\n        <StateInSched>active</StateInSched>\\n    </Nodes>\\n</ListNodesByQueueResponse>","errorExample":""}]',
      'title' => '查询单个集群节点信息',
      'summary' => '按队列分组查询用户账户下单个集群的节点信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SetQueue' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'QueueName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '目标队列名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'work',
          ),
        ),
        2 => 
        array (
          'name' => 'Node',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '队列中节点信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '节点信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Name' => 
                array (
                  'description' => '需要移动的计算节点主机名称。',
                  'type' => 'string',
                  'required' => true,
                  'docRequired' => true,
                  'example' => 'compute1',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 1000,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'DFC3EAA9-F11F-4ED0-836F-4FFCB279E700',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          4 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          5 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"DFC3EAA9-F11F-4ED0-836F-4FFCB279E700\\"\\n}","errorExample":""},{"type":"xml","example":"<SetQueueResponse>\\n    <RequestId>DFC3EAA9-F11F-4ED0-836F-4FFCB279E700</RequestId>\\n</SetQueueResponse>","errorExample":""}]',
      'title' => '移动计算节点到指定队列',
      'summary' => '调用SetQueue移动计算节点到指定队列。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteQueue' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'QueueName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要删除的队列名称。

您可以通过调用[ListQueues](~~92176~~)获取队列名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'workq',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '464E9919-D04F-4D1D-B375-15989492****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          4 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          5 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"464E9919-D04F-4D1D-B375-15989492****\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteQueueResponse>\\n    <RequestId>464E9919-D04F-4D1D-B375-15989492****</RequestId>\\n</DeleteQueueResponse>","errorExample":""}]',
      'title' => '删除一个队列',
      'summary' => '调用DeleteQueue删除一个集群中的队列。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SetSchedulerInfo' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '地域ID。

您可以通过调用[ListRegions](~~188593~~)获取E-HPC支持的地域ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        2 => 
        array (
          'name' => 'PbsInfo',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => 'PBS调度器信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => 'PBS调度器信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'AclLimit' => 
                array (
                  'description' => '队列限制信息列表。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '队列限制信息数组。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Queue' => 
                      array (
                        'description' => 'AclLimit指用户使用的队列限制。N的取值范围：0~100。

假设`PbsInfo.N.AclLimit.N.Queue`设置为`workq`，`PbsInfo.N.AclLimit.N.AclUsers`设置为`user1,user2`，表示队列workq只能被user1和user2使用。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'workq',
                      ),
                      'AclUsers' => 
                      array (
                        'description' => '限制该队列使用的用户名，多个用户用`,`隔开。

当设置了用户名时，PbsInfo.N.AclLimit.N.Queue为必选。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'user1,user2',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                  'maxItems' => 100,
                ),
                'ResourceLimit' => 
                array (
                  'description' => '集群用户使用的节点信息列表。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '节点信息数组。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Nodes' => 
                      array (
                        'description' => '集群用户使用队列的最大节点个数。
',
                        'type' => 'integer',
                        'format' => 'int32',
                        'required' => false,
                        'example' => '2',
                      ),
                      'Cpus' => 
                      array (
                        'description' => '集群用户使用队列中节点的最大vCPU个数。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'required' => false,
                        'example' => '2',
                      ),
                      'User' => 
                      array (
                        'description' => '运行作业的集群用户名。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'user1',
                      ),
                      'Queue' => 
                      array (
                        'description' => 'PbsInfo指集群中可以设置的PBS调度信息个数。N的取值范围：0~100。

ResourceLimit指用户使用的队列资源限制。N的取值范围：0~100。

Queue指该集群用户运行作业使用的队列名称。

当ResourceLimit中设置了User、Cpus、Nodes、Mem中任一一个参数时，Queue为必选。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'workq',
                      ),
                      'Mem' => 
                      array (
                        'description' => '集群用户使用队列的最大内存资源。单位取值范围：

- gb

- mb

- kb
',
                        'type' => 'string',
                        'required' => false,
                        'example' => '2gb',
                      ),
                      'MaxJobs' => 
                      array (
                        'description' => '集群用户提交的最大作业数目。若用户的运行和排队作业数目总和超过此数值则将无法再继续提交作业。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'required' => false,
                        'example' => '1000',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                  'maxItems' => 100,
                ),
                'JobHistoryDuration' => 
                array (
                  'description' => '作业保留时间，超过保留之间后，作业数据会被销毁。单位为天。    
取值范围：1~30。    
默认值：14。',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '14',
                ),
                'SchedInterval' => 
                array (
                  'description' => 'PbsInfo指集群中可以设置的PBS调度信息个数。N的取值范围：0~100。

SchedInterval指调度周期，单位：秒

调度周期指运行多个作业之间时间间隔，如设置为60，表示本次作业开始运行60秒后才能开始运行下次作业。

默认值：60',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '60',
                ),
                'SchedMaxJobs' => 
                array (
                  'description' => '集群调度的最大作业数。若集群排队和运行的作业数总和超过此数值则无法再继续提交作业。默认值：20000',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '20000',
                ),
                'SchedMaxQueuedJobs' => 
                array (
                  'description' => '集群调度的最大排队作业数。若集群排队作业数量超过此数值则无法再继续提交作业。默认值：10000',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '10000',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
        3 => 
        array (
          'name' => 'SlurmInfo',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => 'Slurm调度器信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => 'Slurm调度器信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'BackfillInterval' => 
                array (
                  'description' => 'Backfill调度周期设置，单位：秒

默认值：60',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '60',
                ),
                'SchedInterval' => 
                array (
                  'description' => 'SlurmInfo指集群中可以设置的Slurm调度信息个数。N的取值范围：0~100。

SchedInterval指主调度周期设置，单位：秒

默认值：60',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '60',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 1000,
          ),
        ),
        4 => 
        array (
          'name' => 'Scheduler',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '调度器信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '调度器信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'SchedName' => 
                array (
                  'description' => '调度器名，取值范围：

- pbs
- pbs19
- slurm
- slurm19
- slurm20

> 调度器为pbs、pbs19时，PbsInfo.N.SchedInterval、PbsInfo.N.JobHistoryDuration、PbsInfo.N.ResourceLimit、PbsInfo.N.AclLimit中至少一个参数为必选；调度器为slurm、slurm19、slurm20时，SlurmInfo.N.SchedInterval、SlurmInfo.N.BackfillInterval中至少一个参数为必选。',
                  'type' => 'string',
                  'required' => true,
                  'example' => 'pbs',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 1000,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '返回消息。',
                'type' => 'string',
                'example' => 'pbs: scheduler setting successfully.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'BBC2F93D-003A-49C4-850C-B826EECF****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The target cluster is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'No authorization is granted.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"pbs: scheduler setting successfully.\\",\\n  \\"RequestId\\": \\"BBC2F93D-003A-49C4-850C-B826EECF****\\"\\n}","errorExample":""},{"type":"xml","example":"<SetSchedulerInfoResponse>\\n<Message>pbs: scheduler setting successfully.</Message>\\n<RequestId>BBC2F93D-003A-49C4-850C-B826EECF****</RequestId>\\n</SetSchedulerInfoResponse>","errorExample":""}]',
      'title' => '设置调度器信息',
      'summary' => '为指定集群设置调度器配置信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetSchedulerInfo' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '地域ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        2 => 
        array (
          'name' => 'Scheduler',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '调度器详细信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '调度器信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'SchedName' => 
                array (
                  'description' => '调度器名称。取值范围：

- pbs
- pbs19
- slurm
- slurm19
- slurm20',
                  'type' => 'string',
                  'required' => false,
                  'docRequired' => true,
                  'example' => 'pbs',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 1000,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'BBC2F93D-003A-49C4-850C-B826EECF****',
              ),
              'SchedInfo' => 
              array (
                'description' => '调度器配置信息。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '调度器配置信息。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Configuration' => 
                    array (
                      'description' => '调度器详细配置信息。',
                      'type' => 'string',
                      'example' => '{"AclInfo":[{"AclEnable":false,"UntrackUser":[],"User":[],"QueueName":"workq"}],"JobHistory":"","SchedIteration":"60","QueueResource":[{"UntrackUser":[],"User":[],"QueueName":"workq"}]}',
                    ),
                    'SchedName' => 
                    array (
                      'description' => '调度器名称。',
                      'type' => 'string',
                      'example' => 'pbs',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'No authorization is granted.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"BBC2F93D-003A-49C4-850C-B826EECF****\\",\\n  \\"SchedInfo\\": [\\n    {\\n      \\"Configuration\\": \\"{\\\\\\"AclInfo\\\\\\":[{\\\\\\"AclEnable\\\\\\":false,\\\\\\"UntrackUser\\\\\\":[],\\\\\\"User\\\\\\":[],\\\\\\"QueueName\\\\\\":\\\\\\"workq\\\\\\"}],\\\\\\"JobHistory\\\\\\":\\\\\\"\\\\\\",\\\\\\"SchedIteration\\\\\\":\\\\\\"60\\\\\\",\\\\\\"QueueResource\\\\\\":[{\\\\\\"UntrackUser\\\\\\":[],\\\\\\"User\\\\\\":[],\\\\\\"QueueName\\\\\\":\\\\\\"workq\\\\\\"}]}\\",\\n      \\"SchedName\\": \\"pbs\\"\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<GetSchedulerInfoResponse>\\n<RequestId>193120A7-3216-4DD7-9FE3-13DC77BD****</RequestId>\\n<SchedInfo>\\n    <Configuration>\\n        <AclInfo>\\n            <AclEnable>false</AclEnable>\\n            <QueueName>workq</QueueName>\\n        </AclInfo>\\n        <JobHistory/>\\n        <SchedIteration>60</SchedIteration>\\n        <QueueResource>\\n            <QueueName>workq</QueueName>\\n        </QueueResource>\\n    </Configuration>\\n    <SchedName>pbs</SchedName>\\n</SchedInfo>\\n</GetSchedulerInfoResponse>","errorExample":""}]',
      'title' => '查询指定集群的调度器配置',
      'summary' => '调用GetSchedulerInfo查询指定集群的调度信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListSoftwares' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'EhpcVersion',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'E-HPC产品版本号。

您可以调用[ListCurrentClientVersion](~~87223~~)接口查询产品版本号。',
            'type' => 'string',
            'required' => false,
            'example' => '1.0.0',
          ),
        ),
        1 => 
        array (
          'name' => 'OsTag',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像标签。

您可以通过[ListImages](~~87213~~)查询镜像标签。',
            'type' => 'string',
            'required' => false,
            'example' => 'CentOS_7.2_64',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'Softwares' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'SoftwareInfo' => 
                  array (
                    'description' => '软件信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'SchedulerType' => 
                        array (
                          'description' => '调度器类型。可能值：
- pbs
- pbs19
- slurm
- slurm19
- slurm20
- opengridscheduler
- deadline
- gridengine
- cube
- custom',
                          'type' => 'string',
                          'example' => 'pbs',
                        ),
                        'OsTag' => 
                        array (
                          'description' => '镜像标签。',
                          'type' => 'string',
                          'example' => 'CentOS_7.2_64',
                        ),
                        'SchedulerVersion' => 
                        array (
                          'description' => '调度器软件版本。',
                          'type' => 'string',
                          'example' => '18.1.1',
                        ),
                        'AccountVersion' => 
                        array (
                          'description' => '域账号服务版本。',
                          'type' => 'string',
                          'example' => '2.31',
                        ),
                        'AccountType' => 
                        array (
                          'description' => '域账号服务类型。可能值：
- nis
- ldap',
                          'type' => 'string',
                          'example' => 'nis',
                        ),
                        'EhpcVersion' => 
                        array (
                          'description' => 'E-HPC版本。',
                          'type' => 'string',
                          'example' => '1.0.0',
                        ),
                        'Applications' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'ApplicationInfo' => 
                            array (
                              'description' => '集群应用软件列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'Required' => 
                                  array (
                                    'description' => '是否必选软件。可能值：

- false：非必选
- true：必选',
                                    'type' => 'boolean',
                                    'example' => 'true',
                                  ),
                                  'Tag' => 
                                  array (
                                    'description' => '软件标签。',
                                    'type' => 'string',
                                    'example' => 'CUDNN_9.0',
                                  ),
                                  'Name' => 
                                  array (
                                    'description' => '软件名称。',
                                    'type' => 'string',
                                    'example' => 'cudnnt',
                                  ),
                                  'Version' => 
                                  array (
                                    'description' => '软件版本。',
                                    'type' => 'string',
                                    'example' => '9.0',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"Softwares\\": {\\n    \\"SoftwareInfo\\": [\\n      {\\n        \\"SchedulerType\\": \\"pbs\\",\\n        \\"OsTag\\": \\"CentOS_7.2_64\\",\\n        \\"SchedulerVersion\\": \\"18.1.1\\",\\n        \\"AccountVersion\\": \\"2.31\\",\\n        \\"AccountType\\": \\"nis\\",\\n        \\"EhpcVersion\\": \\"1.0.0\\",\\n        \\"Applications\\": {\\n          \\"ApplicationInfo\\": [\\n            {\\n              \\"Required\\": true,\\n              \\"Tag\\": \\"CUDNN_9.0\\",\\n              \\"Name\\": \\"cudnnt\\",\\n              \\"Version\\": \\"9.0\\"\\n            }\\n          ]\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListSoftwaresResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n    <Softwares>\\n        <SchedulerType>pbs</SchedulerType>\\n        <OsTag>CentOS_7.2_64</OsTag>\\n        <SchedulerVersion>18.1.1</SchedulerVersion>\\n        <AccountVersion>2.31</AccountVersion>\\n        <AccountType>nis</AccountType>\\n        <EhpcVersion>1.0.0</EhpcVersion>\\n        <Applications>\\n            <Required>true</Required>\\n            <Tag>CUDNN_9.0</Tag>\\n            <Name>cudnnt</Name>\\n            <Version>9.0</Version>\\n        </Applications>\\n    </Softwares>\\n</ListSoftwaresResponse>","errorExample":""}]',
      'title' => '查询支持安装的软件列表',
      'summary' => '查询 E-HPC 产品支持安装的软件列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'InstallSoftware' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        1 => 
        array (
          'name' => 'Application',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要安装的软件名称。

您可以调用[ListSoftwares](~~87216~~)查询可安装的软件列表。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ABYSS_2.1.5',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '896D338C-E4F4-41EC-A154-D605E5DE****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"896D338C-E4F4-41EC-A154-D605E5DE****\\"\\n}","errorExample":""},{"type":"xml","example":"<InstallSoftwareResponse>\\r\\n    <RequestId>896D338C-E4F4-41EC-A154-D605E5DE****</RequestId>\\r\\n</InstallSoftwareResponse>","errorExample":""}]',
      'title' => '安装软件',
      'summary' => '调用InstallSoftware为指定集群安装软件。',
    ),
    'ListInstalledSoftware' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'DDCA0E7B-03E7-430D-810C-0D508539****',
              ),
              'SoftwareList' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'SoftwareList' => 
                  array (
                    'description' => '已安装的软件列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '已安装的软件列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'SoftwareId' => 
                        array (
                          'description' => '软件ID。',
                          'type' => 'string',
                          'example' => 'MPICH_3.2',
                        ),
                        'SoftwareStatus' => 
                        array (
                          'description' => '软件安装状态。可能值：
- Installing：安装中
- Installed：已安装',
                          'type' => 'string',
                          'example' => 'Installing',
                        ),
                        'SoftwareVersion' => 
                        array (
                          'description' => '软件版本。',
                          'type' => 'string',
                          'example' => '3.2',
                        ),
                        'SoftwareName' => 
                        array (
                          'description' => '软件名称。',
                          'type' => 'string',
                          'example' => 'mpich',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"DDCA0E7B-03E7-430D-810C-0D508539****\\",\\n  \\"SoftwareList\\": {\\n    \\"SoftwareList\\": [\\n      {\\n        \\"SoftwareId\\": \\"MPICH_3.2\\",\\n        \\"SoftwareStatus\\": \\"Installing\\",\\n        \\"SoftwareVersion\\": \\"3.2\\",\\n        \\"SoftwareName\\": \\"mpich\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListInstalledSoftwareResponse>\\r\\n    <code>200</code>\\r\\n    <data>\\r\\n        <SoftwareList>\\r\\n            <SoftwareList>\\r\\n                <SoftwareVersion>3.2</SoftwareVersion>\\r\\n                <SoftwareStatus>Installing</SoftwareStatus>\\r\\n                <SoftwareId>MPICH_3.2</SoftwareId>\\r\\n                <SoftwareName>mpich</SoftwareName>\\r\\n            </SoftwareList>\\r\\n        </SoftwareList>\\r\\n    </data>\\r\\n    <requestId>DDCA0E7B-03E7-430D-810C-0D508539****</requestId>\\r\\n    <successResponse>true</successResponse>\\r\\n</ListInstalledSoftwareResponse>","errorExample":""}]',
      'title' => '查询指定集群已安装的软件列表',
      'summary' => '调用ListInstalledSoftware查询指定集群已安装的软件列表。',
    ),
    'UninstallSoftware' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        1 => 
        array (
          'name' => 'Application',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待卸载的软件名称。

您可以通过调用[ListInstalledSoftware](~~188591~~)查询集群已安装的软件列表。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ABYSS_2.1.5',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'C84FB8EF-5580-4B82-9BDE-6657814C****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"C84FB8EF-5580-4B82-9BDE-6657814C****\\"\\n}","errorExample":""},{"type":"xml","example":"<UninstallSoftwareResponse>\\n    <RequestId>C84FB8EF-5580-4B82-9BDE-6657814C****</RequestId>\\n</UninstallSoftwareResponse>","errorExample":""}]',
      'title' => '卸载软件',
      'summary' => '调用UninstallSoftware卸载指定集群中已安装的软件。',
    ),
    'ListFileSystemWithMountTargets' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询的页码。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的行数。取值范围：1~50默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '分页查询时设置的每页行数。 取值范围：1~50。 默认值：10。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID',
                'type' => 'string',
                'example' => '25638B77-2F19-5DC5-B578-7790CE92052B',
              ),
              'PageNumber' => 
              array (
                'description' => '分页查询的页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '显示列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'FileSystemList' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'FileSystems' => 
                  array (
                    'description' => '文件系统列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '文件系统列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '文件系统状态。可能值：
- Pending：当前文件系统正在处理任务中。
- Running：当前文件系统可用。
- Stopped：当前文件系统不可用。
- Extending：当前文件系统扩容中。
- Stopping：当前文件系统停机中。
- Deleting：当前文件系统删除中。',
                          'type' => 'string',
                          'example' => 'Running',
                        ),
                        'Capacity' => 
                        array (
                          'description' => '文件系统的容量。单位：GiB',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '5120',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '文件系统创建时间。',
                          'type' => 'string',
                          'example' => '2018-07-26 16:36:27',
                        ),
                        'StorageType' => 
                        array (
                          'description' => '存储规格类型。

- 当FileSystemType为standard时，可能值：Capacity（容量型）、Performance（性能型）
- 当FileSystemType为extreme时，可能值：standard（标准型）、advance（高级型）
<props="china">
- 当FileSystemType为CPFS时，可能值：advance_100（100MB/s/TiB基线）、advance_200（200MB/s/TiB基线）</props>',
                          'type' => 'string',
                          'example' => 'Performance',
                        ),
                        'BandWidth' => 
                        array (
                          'description' => '文件系统的带宽。单位：MB/s',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '150',
                        ),
                        'RegionId' => 
                        array (
                          'description' => '地域ID。',
                          'type' => 'string',
                          'example' => 'cn-hangzhou',
                        ),
                        'FileSystemId' => 
                        array (
                          'description' => '文件系统ID。',
                          'type' => 'string',
                          'example' => '088b****',
                        ),
                        'FileSystemType' => 
                        array (
                          'description' => '文件系统类型，可能值：

- standard：通用型NAS
- extreme：极速型NAS
<props="china">
- cpfs：CPFS</props>',
                          'type' => 'string',
                          'example' => 'standard',
                        ),
                        'MeteredSize' => 
                        array (
                          'description' => 'NAS文件系统已使用的容量，单位为Byte。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1216816455',
                        ),
                        'EncryptType' => 
                        array (
                          'description' => '文件系统是否加密。

使用KMS服务托管密钥，对文件系统落盘数据进行加密存储。在读写加密数据时，无需解密。

取值：

- 0（默认值）：不加密。
- 1：NAS托管密钥。当FileSystemType=standard或extreme时，支持NAS托管密钥。
- 2：用户管理密钥。仅当FileSystemType=extreme时，支持用户管理密钥。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'ProtocolType' => 
                        array (
                          'description' => '文件系统的协议类型。可能值：

- NFS- SMB
<props="china">
- CPFS</props>',
                          'type' => 'string',
                          'example' => 'NFS',
                        ),
                        'Destription' => 
                        array (
                          'description' => '文件系统描述。',
                          'type' => 'string',
                          'example' => 'FilesDescription',
                        ),
                        'PackageList' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Packages' => 
                            array (
                              'description' => '存储包信息列表。

',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '存储包信息列表。

',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'PackageId' => 
                                  array (
                                    'description' => '存储包ID。',
                                    'type' => 'string',
                                    'example' => 'naspackage-0be9c4b624-37****',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                        'MountTargetList' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'MountTargets' => 
                            array (
                              'description' => '挂载点列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '挂载点列表。',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'Status' => 
                                  array (
                                    'description' => '挂载点状态。可能值：
- Active：可用
- Inactive：不可用
- Pending：任务排队中
- Deleting：删除中',
                                    'type' => 'string',
                                    'example' => 'Active',
                                  ),
                                  'VpcId' => 
                                  array (
                                    'description' => '专有网络ID。',
                                    'type' => 'string',
                                    'example' => 'vpc-8vbvb34rtyh6xb3zrehs1****',
                                  ),
                                  'MountTargetDomain' => 
                                  array (
                                    'description' => '挂载目标域。',
                                    'type' => 'string',
                                    'example' => '088b****-lj2.cn-hangzhou.nas.aliyuncs.com',
                                  ),
                                  'AccessGroup' => 
                                  array (
                                    'description' => '权限组是否为用户的默认权限组。

包括：

- true：该权限组为默认权限组。当该权限组为默认权限组时，允许所有IP地址访问，且用户无法删除默认权限组及权限组内的权限规则。
- false：该权限组不是默认权限组。',
                                    'type' => 'string',
                                    'example' => 'DEFAULT_VPC_GROUP_NAME',
                                  ),
                                  'VswId' => 
                                  array (
                                    'description' => '交换机ID。',
                                    'type' => 'string',
                                    'example' => 'vsw-8vb34rtyh6xb3zrehs1****',
                                  ),
                                  'NetworkType' => 
                                  array (
                                    'description' => '网络类型。可能值：
- vpc：专有网络
- classic：经典网络',
                                    'type' => 'string',
                                    'example' => 'vpc',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                        'VpcId' => 
                        array (
                          'description' => '专有网络ID。',
                          'type' => 'string',
                          'example' => 'vpc-bp132kgui8n0targbn1cm',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'NasError',
            'errorMessage' => 'NAS API request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
          1 => 
          array (
            'errorCode' => 'EntityNotExist.Role',
            'errorMessage' => 'The role does not exist.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"PageSize\\": 10,\\n  \\"RequestId\\": \\"25638B77-2F19-5DC5-B578-7790CE92052B\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"FileSystemList\\": {\\n    \\"FileSystems\\": [\\n      {\\n        \\"Status\\": \\"Running\\",\\n        \\"Capacity\\": 5120,\\n        \\"CreateTime\\": \\"2018-07-26 16:36:27\\",\\n        \\"StorageType\\": \\"Performance\\",\\n        \\"BandWidth\\": 150,\\n        \\"RegionId\\": \\"cn-hangzhou\\",\\n        \\"FileSystemId\\": \\"088b****\\",\\n        \\"FileSystemType\\": \\"standard\\",\\n        \\"MeteredSize\\": 1216816455,\\n        \\"EncryptType\\": 0,\\n        \\"ProtocolType\\": \\"NFS\\",\\n        \\"Destription\\": \\"FilesDescription\\",\\n        \\"PackageList\\": {\\n          \\"Packages\\": [\\n            {\\n              \\"PackageId\\": \\"naspackage-0be9c4b624-37****\\"\\n            }\\n          ]\\n        },\\n        \\"MountTargetList\\": {\\n          \\"MountTargets\\": [\\n            {\\n              \\"Status\\": \\"Active\\",\\n              \\"VpcId\\": \\"vpc-8vbvb34rtyh6xb3zrehs1****\\",\\n              \\"MountTargetDomain\\": \\"088b****-lj2.cn-hangzhou.nas.aliyuncs.com\\",\\n              \\"AccessGroup\\": \\"DEFAULT_VPC_GROUP_NAME\\",\\n              \\"VswId\\": \\"vsw-8vb34rtyh6xb3zrehs1****\\",\\n              \\"NetworkType\\": \\"vpc\\"\\n            }\\n          ]\\n        },\\n        \\"VpcId\\": \\"vpc-bp132kgui8n0targbn1cm\\"\\n      }\\n    ]\\n  }\\n}","type":"json"}]',
      'title' => '查询文件系统和挂载点',
      'summary' => '调用ListFileSystemWithMountTargets查询文件系统和挂载点。',
    ),
    'ListCpfsFileSystems' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'FileSystemId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '文件系统ID。

默认查询您账号下所有的CPFS文件系统及其挂载点信息。',
            'type' => 'string',
            'required' => false,
            'example' => '096751****',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的行数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '2B900AFE-C938-4551-86E9-97E231BBC876',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'FileSystemList' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'FileSystems' => 
                  array (
                    'description' => '文件系统列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'FileSystemId' => 
                        array (
                          'description' => '文件系统ID。',
                          'type' => 'string',
                          'example' => '096751****',
                        ),
                        'Capacity' => 
                        array (
                          'description' => '文件系统容量。单位：GiB',
                          'type' => 'string',
                          'example' => '5120',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '文件系统创建时间。',
                          'type' => 'string',
                          'example' => '2018-07-26 16:36:27',
                        ),
                        'ZoneId' => 
                        array (
                          'description' => '可用区ID。',
                          'type' => 'string',
                          'example' => 'cn-hangzhou-b',
                        ),
                        'ProtocolType' => 
                        array (
                          'description' => '挂载的文件存储的协议类型。可能值：
- NFS
- SMB',
                          'type' => 'string',
                          'example' => 'NFS',
                        ),
                        'Destription' => 
                        array (
                          'description' => '文件系统描述。',
                          'type' => 'string',
                          'example' => 'FilsDestription',
                        ),
                        'RegionId' => 
                        array (
                          'description' => '地域ID。',
                          'type' => 'string',
                          'example' => 'cn-hangzhou',
                        ),
                        'MountTargetList' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'MountTargets' => 
                            array (
                              'description' => '挂载点列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'VpcId' => 
                                  array (
                                    'description' => '专有网络ID。',
                                    'type' => 'string',
                                    'example' => 'vpc-8vbvb34rtyh6xb3zrehs1****',
                                  ),
                                  'Status' => 
                                  array (
                                    'description' => '挂载点状态。可能值：
- Active：可用
- Inactive：不可用
- Pending：挂载中
- Deleting：删除中',
                                    'type' => 'string',
                                    'example' => 'Active',
                                  ),
                                  'VswId' => 
                                  array (
                                    'description' => '交换机ID。',
                                    'type' => 'string',
                                    'example' => 'vsw-8vb34rtyh6xb3zrehs1****',
                                  ),
                                  'NetworkType' => 
                                  array (
                                    'description' => '网络类型。',
                                    'type' => 'string',
                                    'example' => 'VPC',
                                  ),
                                  'MountTargetDomain' => 
                                  array (
                                    'description' => '挂载目标域。',
                                    'type' => 'string',
                                    'example' => 'c0967****.cn-hangzhou.cpfs.nas.aliyuncs.com',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'NasError',
            'errorMessage' => 'NAS API request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 10,\\n  \\"RequestId\\": \\"2B900AFE-C938-4551-86E9-97E231BBC876\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 10,\\n  \\"FileSystemList\\": {\\n    \\"FileSystems\\": [\\n      {\\n        \\"FileSystemId\\": \\"096751****\\",\\n        \\"Capacity\\": \\"5120\\",\\n        \\"CreateTime\\": \\"2018-07-26 16:36:27\\",\\n        \\"ZoneId\\": \\"cn-hangzhou-b\\",\\n        \\"ProtocolType\\": \\"NFS\\",\\n        \\"Destription\\": \\"FilsDestription\\",\\n        \\"RegionId\\": \\"cn-hangzhou\\",\\n        \\"MountTargetList\\": {\\n          \\"MountTargets\\": [\\n            {\\n              \\"VpcId\\": \\"vpc-8vbvb34rtyh6xb3zrehs1****\\",\\n              \\"Status\\": \\"Active\\",\\n              \\"VswId\\": \\"vsw-8vb34rtyh6xb3zrehs1****\\",\\n              \\"NetworkType\\": \\"VPC\\",\\n              \\"MountTargetDomain\\": \\"c0967****.cn-hangzhou.cpfs.nas.aliyuncs.com\\"\\n            }\\n          ]\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListCpfsFileSystemsResponse>\\r\\n    <PageNumber>1</PageNumber>\\r\\n    <TotalCount>10</TotalCount>\\r\\n    <FileSystemList>\\r\\n        <FileSystems>\\r\\n            <FileSystemId>096751****</FileSystemId>\\r\\n            <MountTargetList>\\r\\n                <MountTargets>\\r\\n                    <Status>Active</Status>\\r\\n                    <NetworkType>Vpc</NetworkType>\\r\\n                    <VswId>vsw-8vb34rtyh6xb3zrehs1****</VswId>\\r\\n                    <MountTargetDomain>c0967****.cn-hangzhou.cpfs.nas.aliyuncs.com </MountTargetDomain>\\r\\n                    <VpcId>vpc-8vbvb34rtyh6xb3zrehs1****</VpcId>\\r\\n                </MountTargets>\\r\\n            </MountTargetList>\\r\\n            <ProtocolType>NFS</ProtocolType>\\r\\n            <RegionId>cn-hangzhou</RegionId>\\r\\n            <CreateTime>2018-07-26 16:36:27</CreateTime>\\r\\n            <ZoneId>cn-hangzhou-a</ZoneId>\\r\\n            <Capacity>5120</Capacity>\\r\\n        </FileSystems>\\r\\n    </FileSystemList>\\r\\n    <PageSize>10</PageSize>\\r\\n    <RequestId>2B900AFE-C938-4551-86E9-97E231BBC876</RequestId>\\r\\n</ListCpfsFileSystemsResponse>","errorExample":""}]',
      'title' => '查询CPFS文件系统及其挂载点信息',
      'summary' => '调用 ListCpfsFileSystems查询CPFS文件系统及其挂载点信息。',
    ),
    'GetClusterVolumes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-gh5WKb****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RegionId' => 
              array (
                'description' => '地域ID。',
                'type' => 'string',
                'example' => 'cn-hangzhou',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '8BCFD52E-0336-4490-AE7D-F560F106****',
              ),
              'Volumes' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'VolumeInfo' => 
                  array (
                    'description' => '挂载到E-HPC的文件系统信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '挂载到E-HPC的文件系统信息列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'JobQueue' => 
                        array (
                          'description' => '作业队列。',
                          'type' => 'string',
                          'example' => 'workq',
                        ),
                        'VolumeId' => 
                        array (
                          'description' => '文件系统ID。',
                          'type' => 'string',
                          'example' => '0e754****',
                        ),
                        'RemoteDirectory' => 
                        array (
                          'description' => '远程挂载目录。',
                          'type' => 'string',
                          'example' => '/test',
                        ),
                        'VolumeMountpoint' => 
                        array (
                          'description' => '挂载点地址。',
                          'type' => 'string',
                          'example' => '0e754****-kal90.cn-hangzhou.nas.aliyuncs.com',
                        ),
                        'LocalDirectory' => 
                        array (
                          'description' => '本地挂载目录。',
                          'type' => 'string',
                          'example' => '/ehpcdata',
                        ),
                        'VolumeType' => 
                        array (
                          'description' => '文件系统类型。',
                          'type' => 'string',
                          'example' => 'NAS',
                        ),
                        'MustKeep' => 
                        array (
                          'description' => '是否为可卸载资源。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'Location' => 
                        array (
                          'description' => '集群类型。可能值：
- OnPremise：混合云集群。
- PublicCloud：公有云集群。',
                          'type' => 'string',
                          'example' => 'PublicCloud',
                        ),
                        'VolumeProtocol' => 
                        array (
                          'description' => '文件系统的存储协议类型。',
                          'type' => 'string',
                          'example' => 'NFS',
                        ),
                        'Roles' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'RoleInfo' => 
                            array (
                              'description' => '挂载文件系统的节点信息列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'description' => '挂载文件系统的节点信息列表。',
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'Name' => 
                                  array (
                                    'description' => '挂载文件系统的节点类型。可能值：
- Compute：计算节点
- Manager：管控节点
- Login：登录节点',
                                    'type' => 'string',
                                    'example' => 'Compute',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'NasError',
            'errorMessage' => 'NAS API request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RegionId\\": \\"cn-hangzhou\\",\\n  \\"RequestId\\": \\"8BCFD52E-0336-4490-AE7D-F560F106****\\",\\n  \\"Volumes\\": {\\n    \\"VolumeInfo\\": [\\n      {\\n        \\"JobQueue\\": \\"workq\\",\\n        \\"VolumeId\\": \\"0e754****\\",\\n        \\"RemoteDirectory\\": \\"/test\\",\\n        \\"VolumeMountpoint\\": \\"0e754****-kal90.cn-hangzhou.nas.aliyuncs.com\\",\\n        \\"LocalDirectory\\": \\"/ehpcdata\\",\\n        \\"VolumeType\\": \\"NAS\\",\\n        \\"MustKeep\\": true,\\n        \\"Location\\": \\"PublicCloud\\",\\n        \\"VolumeProtocol\\": \\"NFS\\",\\n        \\"Roles\\": {\\n          \\"RoleInfo\\": [\\n            {\\n              \\"Name\\": \\"Compute\\"\\n            }\\n          ]\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetClusterVolumesResponse>\\n    <Volumes>\\n        <VolumeInfo>\\n            <VolumeProtocol>NFS</VolumeProtocol>\\n            <LocalDirectory>/ehpcdata</LocalDirectory>\\n            <RemoteDirectory>/</RemoteDirectory>\\n            <VolumeId>0e754****</VolumeId>\\n            <VolumeType>NAS</VolumeType>\\n            <JobQueue>workq</JobQueue>\\n            <MustKeep>true</MustKeep>\\n            <VolumeMountpoint>0e754****-kal90.cn-hangzhou.nas.aliyuncs.com&lt;</VolumeMountpoint>\\n            <Location>PublicCloud</Location>\\n        </VolumeInfo>\\n        <VolumeInfo>\\n            <Roles>\\n                <RoleInfo>\\n                    <Name>Compute</Name>\\n                </RoleInfo>\\n            </Roles>\\n        </VolumeInfo>\\n    </Volumes>\\n    <RequestId>8BCFD52E-0336-4490-AE7D-F560F1065F9B</RequestId>\\n    <RegionId>cn-hangzhou</RegionId>\\n</GetClusterVolumesResponse>","errorExample":""}]',
      'title' => '查询挂载到集群的存储资源',
      'summary' => '调用GetClusterVolumes查询挂载到E-HPC指定集群中的存储资源。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListVolumes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的行数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Volumes' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'VolumeInfo' => 
                  array (
                    'description' => '挂载到E-HPC集群的文件系统信息数组。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'VolumeId' => 
                        array (
                          'description' => '文件系统ID。',
                          'type' => 'string',
                          'example' => 'bc8a****',
                        ),
                        'ClusterName' => 
                        array (
                          'description' => '集群名称。',
                          'type' => 'string',
                          'example' => 'cluster1',
                        ),
                        'RemoteDirectory' => 
                        array (
                          'description' => '文件系统挂载的远程目录。',
                          'type' => 'string',
                          'example' => '/test1',
                        ),
                        'VolumeMountpoint' => 
                        array (
                          'description' => '挂载点地址。',
                          'type' => 'string',
                          'example' => 'bc8a****-rgd51.cn-hangzhou.nas.aliyuncs.com',
                        ),
                        'VolumeType' => 
                        array (
                          'description' => '挂载到集群的文件系统类型，目前仅支持NAS。',
                          'type' => 'string',
                          'example' => 'NAS',
                        ),
                        'VolumeProtocol' => 
                        array (
                          'description' => '存储协议类型。可能值：
- NFS
- SMB',
                          'type' => 'string',
                          'example' => 'NFS',
                        ),
                        'RegionId' => 
                        array (
                          'description' => '地域ID。',
                          'type' => 'string',
                          'example' => 'cn-hangzhou',
                        ),
                        'ClusterId' => 
                        array (
                          'description' => '集群ID。',
                          'type' => 'string',
                          'example' => 'ehpc-hz-FYUr32****',
                        ),
                        'AdditionalVolumes' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'VolumeInfo' => 
                            array (
                              'description' => '新增文件系统挂载的信息列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'JobQueue' => 
                                  array (
                                    'description' => '作业所属队列。',
                                    'type' => 'string',
                                    'example' => 'all.q',
                                  ),
                                  'VolumeId' => 
                                  array (
                                    'description' => '文件系统ID。',
                                    'type' => 'string',
                                    'example' => '86y3****',
                                  ),
                                  'RemoteDirectory' => 
                                  array (
                                    'description' => '文件系统挂载的远程目录。',
                                    'type' => 'string',
                                    'example' => '/test',
                                  ),
                                  'VolumeMountpoint' => 
                                  array (
                                    'description' => '挂载点地址。',
                                    'type' => 'string',
                                    'example' => '86y3****-rgd51.cn-hangzhou.nas.aliyuncs.com',
                                  ),
                                  'Role' => 
                                  array (
                                    'description' => '挂载的节点类型。可能值：
- Manager：管控节点
- Login：登录节点
- Compute：计算节点',
                                    'type' => 'string',
                                    'example' => 'Compute',
                                  ),
                                  'LocalDirectory' => 
                                  array (
                                    'description' => '本地挂载目录。',
                                    'type' => 'string',
                                    'example' => '/testopt',
                                  ),
                                  'VolumeType' => 
                                  array (
                                    'description' => '新增的文件系统类型，目前仅支持NAS。',
                                    'type' => 'string',
                                    'example' => 'NAS',
                                  ),
                                  'Location' => 
                                  array (
                                    'description' => '集群所在位置。可能值：
- OnPremise：混合云集群。
- PublicCloud：公有云集群。',
                                    'type' => 'string',
                                    'example' => 'PublicCloud',
                                  ),
                                  'VolumeProtocol' => 
                                  array (
                                    'description' => '存储协议类型。可能值：
- NFS
- SMB',
                                    'type' => 'string',
                                    'example' => 'NFS',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'NasError',
            'errorMessage' => 'NAS API request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 1,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Volumes\\": {\\n    \\"VolumeInfo\\": [\\n      {\\n        \\"VolumeId\\": \\"bc8a****\\",\\n        \\"ClusterName\\": \\"cluster1\\",\\n        \\"RemoteDirectory\\": \\"/test1\\",\\n        \\"VolumeMountpoint\\": \\"bc8a****-rgd51.cn-hangzhou.nas.aliyuncs.com\\",\\n        \\"VolumeType\\": \\"NAS\\",\\n        \\"VolumeProtocol\\": \\"NFS\\",\\n        \\"RegionId\\": \\"cn-hangzhou\\",\\n        \\"ClusterId\\": \\"ehpc-hz-FYUr32****\\",\\n        \\"AdditionalVolumes\\": {\\n          \\"VolumeInfo\\": [\\n            {\\n              \\"JobQueue\\": \\"all.q\\",\\n              \\"VolumeId\\": \\"86y3****\\",\\n              \\"RemoteDirectory\\": \\"/test\\",\\n              \\"VolumeMountpoint\\": \\"86y3****-rgd51.cn-hangzhou.nas.aliyuncs.com\\",\\n              \\"Role\\": \\"Compute\\",\\n              \\"LocalDirectory\\": \\"/testopt\\",\\n              \\"VolumeType\\": \\"NAS\\",\\n              \\"Location\\": \\"PublicCloud\\",\\n              \\"VolumeProtocol\\": \\"NFS\\"\\n            }\\n          ]\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListVolumesResponse>\\n    <TotalCount>1</TotalCount>\\n    <Volumes>\\n        <VolumeInfo>\\n            <VolumeProtocol>nfs</VolumeProtocol>\\n            <RemoteDirectory>/test1</RemoteDirectory>\\n            <VolumeId>bc8a****</VolumeId>\\n            <VolumeType>NAS</VolumeType>\\n            <ClusterId>ehpc-hz-FYUr32****</ClusterId>\\n            <ClusterName>cluster1</ClusterName>\\n            <RegionId>cn-hangzhou</RegionId>\\n            <VolumeMountpoint>bc8a****-rgd51.cn-hangzhou.nas.aliyuncs.com</VolumeMountpoint>\\n        </VolumeInfo>\\n        <VolumeInfo>\\n            <AdditionalVolumes>\\n                <VolumeInfo>\\n                    <Role>Compute</Role>\\n                    <VolumeProtocol>NFS</VolumeProtocol>\\n                    <LocalDirectory>/testopt</LocalDirectory>\\n                    <RemoteDirectory>/</RemoteDirectory>\\n                    <VolumeId>bc8a****</VolumeId>\\n                    <VolumeType>NAS</VolumeType>\\n                    <JobQueue>all.q</JobQueue>\\n                    <VolumeMountpoint>bc8a****-rgd51.cn-hangzhou.nas.aliyuncs.com</VolumeMountpoint>\\n                    <Location> </Location>\\n                </VolumeInfo>\\n            </AdditionalVolumes>\\n        </VolumeInfo>\\n    </Volumes>\\n    <PageSize>1</PageSize>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\n    <PageNumber>1</PageNumber>\\n</ListVolumesResponse>","errorExample":""}]',
      'title' => '列出用户的存储卷',
      'summary' => '调用ListVolumes查询文件系统列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'UpdateClusterVolumes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'AdditionalVolumes',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '文件系统信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'type' => 'object',
              'properties' => 
              array (
                'JobQueue' => 
                array (
                  'description' => '附加挂载文件系统的队列名称。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'work',
                ),
                'VolumeId' => 
                array (
                  'description' => '附加挂载的文件系统ID。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'extreme-00b88****',
                ),
                'Roles' => 
                array (
                  'description' => '挂载文件系统的节点信息列表。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'Name' => 
                      array (
                        'description' => '附加挂载的文件系统挂载的节点类型。取值范围：
- Manager：管控节点
- Login：登录节点
- Compute：计算节点',
                        'type' => 'string',
                        'required' => false,
                        'example' => '["Compute"]',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                  'maxItems' => 8,
                ),
                'VolumeMountpoint' => 
                array (
                  'description' => '附加挂载的文件系统挂载点地址。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '0088****-sihc.cn-hangzhou.extreme.nas.aliyuncs.com',
                ),
                'RemoteDirectory' => 
                array (
                  'description' => '附加挂载的文件系统需要挂载的远程目录。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '/test',
                ),
                'VolumeType' => 
                array (
                  'description' => '附加挂载的文件系统类型，目前仅支持NAS。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'NAS',
                ),
                'LocalDirectory' => 
                array (
                  'description' => '附加挂载文件系统的本地挂载目录。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '/ff',
                ),
                'VolumeProtocol' => 
                array (
                  'description' => '附加挂载的文件系统协议类型。取值范围：
- NFS
- SMB',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'NFS',
                ),
                'Location' => 
                array (
                  'description' => '附加挂载的文件系统的存储位置。可能值：
- OnPremise：混合云集群。
- PublicCloud：公有云集群。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'PublicCloud',
                ),
                'VolumeMountOption' => 
                array (
                  'description' => '附加挂载的文件系统的存储挂载选项。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '-t nfs -o vers=3,nolock,noresvport',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'F6757FA4-8FED-4602-B7F5-3550C0842122',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'NasError',
            'errorMessage' => 'NAS API request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"F6757FA4-8FED-4602-B7F5-3550C0842122\\"\\n}","errorExample":""},{"type":"xml","example":"<UpdateClusterVolumesResponse>\\r\\n    <RequestId>F6757FA4-8FED-4602-B7F5-3550C0842122</RequestId>\\r\\n</UpdateClusterVolumesResponse>","errorExample":""}]',
      'title' => '为指定集群挂载新的存储资源',
      'summary' => '调用UpdateClusterVolumes为指定集群挂载新的存储资源。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SubmitJob' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'CommandLine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业命令。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => './LammpsTest/lammps.pbs',
          ),
        ),
        2 => 
        array (
          'name' => 'RunasUser',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业的用户名。

您可以通过调用[ListUsers](~~188572~~)获取该集群中的用户名。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'testuser',
          ),
        ),
        3 => 
        array (
          'name' => 'RunasUserPassword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户密码。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '12****',
          ),
        ),
        4 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业名称。长度为6~30个字符，必须以英文字母开头，可以包含数字、半角句号（.）。',
            'type' => 'string',
            'required' => false,
            'example' => 'jobtest',
          ),
        ),
        5 => 
        array (
          'name' => 'Priority',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业优先级，取值范围：0~9，取值越大，优先级越高。

默认值：0',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
          ),
        ),
        6 => 
        array (
          'name' => 'PackagePath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业路径。',
            'type' => 'string',
            'required' => false,
            'example' => './Tem',
          ),
        ),
        7 => 
        array (
          'name' => 'StdoutRedirectPath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '标准输出路径。',
            'type' => 'string',
            'required' => false,
            'example' => './LammpsTest',
          ),
        ),
        8 => 
        array (
          'name' => 'StderrRedirectPath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '错误输出路径。',
            'type' => 'string',
            'required' => false,
            'example' => './LammpsTest',
          ),
        ),
        9 => 
        array (
          'name' => 'ReRunable',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否支持重新执行作业。取值范围：
- true：支持
- false：不支持',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        10 => 
        array (
          'name' => 'ArrayRequest',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '队列作业。 

格式X-Y:Z， 最小值X是第一个索引，最大值Y是最后一个索引，Z表示步长，例如2-7:2，表示作业队列包含编号为2、4、6的3个子作业。',
            'type' => 'string',
            'required' => false,
            'example' => '1-10:2',
          ),
        ),
        11 => 
        array (
          'name' => 'Variables',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业的环境变量，可以在作业执行文件中访问环境变量。',
            'type' => 'string',
            'required' => false,
            'example' => '[{Name:test1,Value:value1},{Name:test2,Value:value2}]',
          ),
        ),
        12 => 
        array (
          'name' => 'InputFileUrl',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '上传到OSS的作业文件的URL地址。',
            'type' => 'string',
            'required' => false,
            'example' => 'https://ehpc-hangzhou.oss-cn-hangzhou.aliyuncs.com/test-u4****/testlist_ehpc.sh',
          ),
        ),
        13 => 
        array (
          'name' => 'UnzipCmd',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '解压命令。解压OSS下载的文件。取值范围：

- tar xzf：解开gzip格式压缩包

- tar xf：解开tar格式压缩包

- unzip：解开zip格式压缩包',
            'type' => 'string',
            'required' => false,
            'example' => 'tar xzf',
          ),
        ),
        14 => 
        array (
          'name' => 'PostCmdLine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '提交作业后执行的命令。',
            'type' => 'string',
            'required' => false,
            'example' => 'example.sh',
          ),
        ),
        15 => 
        array (
          'name' => 'ContainerId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '容器应用ID。如果选择使用容器执行作业，必须提供容器应用ID。

您可以通过调用[ListContainerApps](~~87333~~)获取容器应用ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'ehpc-container-uerfrfffff****',
          ),
        ),
        16 => 
        array (
          'name' => 'JobQueue',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业的队列名称。

您可以通过调用[ListQueues](~~92176~~)获取队列名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'workq',
          ),
        ),
        17 => 
        array (
          'name' => 'Node',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业所需的计算节点数。

> 若该参数为空，则参数Cpu、Task、Thread、Mem、Gpu不生效。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '2',
          ),
        ),
        18 => 
        array (
          'name' => 'Cpu',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个计算节点所需的CPU核数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '2',
          ),
        ),
        19 => 
        array (
          'name' => 'Task',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个计算节点创建的进程数。

适用于MPI作业。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '2',
          ),
        ),
        20 => 
        array (
          'name' => 'Thread',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个计算节点创建的线程数。

适用于OpenMP作业。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        21 => 
        array (
          'name' => 'Mem',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个计算节点最大使用内存数，支持GB、MB、KB，单位不区分大小写。',
            'type' => 'string',
            'required' => false,
            'example' => '1GB',
          ),
        ),
        22 => 
        array (
          'name' => 'Gpu',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个计算节点使用GPU的数量。

仅支持使用PBS调度器的集群，且集群内计算节点含GPU时该参数生效。 ',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        23 => 
        array (
          'name' => 'ClockTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业最大运行时间，支持三种格式：

- hh:mm:ss
- mm:ss
- ss

推荐使用第一种格式。若最大运行时间为12小时，示例：12:00:00。',
            'type' => 'string',
            'required' => false,
            'example' => '12:00:00',
          ),
        ),
        24 => 
        array (
          'name' => 'JobRetry.Count',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务重试次数，取值范围1~10。当前任务重试功能仅适用于PBS集群。

> 若该参数为空，则参数JobRetry.Priority、JobRetry.OnExitCode不生效。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '5',
          ),
        ),
        25 => 
        array (
          'name' => 'JobRetry.Priority',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '重试作业优先级，取值范围：0~9，取值越大，优先级越高。

> 若该参数为空，则重试作业优先级=min{原作业优先级+1, 9}',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        26 => 
        array (
          'name' => 'JobRetry.OnExitCode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业重试条件。退出码为参数值时，触发作业重试。

> 若该参数为空，退出码非0时触发作业重试。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        27 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '采用异步消息链路提交作业。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'headers' => 
          array (
          ),
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'JobId' => 
              array (
                'description' => '作业ID。',
                'type' => 'string',
                'example' => '1.manager',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          2 => 
          array (
            'errorCode' => 'UsernameExist',
            'errorMessage' => 'The username already exists.',
          ),
          3 => 
          array (
            'errorCode' => 'IncorrectCredential',
            'errorMessage' => 'The username or password is incorrect.',
          ),
          4 => 
          array (
            'errorCode' => 'AgentError.Account.ValidateCredentialFailure',
            'errorMessage' => 'Username or password verification failed.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ContainerNotFound',
            'errorMessage' => 'The specified container does not exist.',
          ),
          2 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError.Job.SubmitFailure',
            'errorMessage' => 'Failed to submit jobs: %s',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError.Job.InvalidContainerType',
            'errorMessage' => 'Unsupported container type: %s.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError.Account.AccountValidateCredentialFailure',
            'errorMessage' => 'Cannot get user info',
          ),
          4 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
          5 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"JobId\\": \\"1.manager\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<SubmitJobResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n    <JobId>1.manager</JobId>\\r\\n</SubmitJobResponse>","errorExample":""}]',
      'title' => '提交作业',
      'summary' => '调用SubmitJob在指定集群提交作业。',
      'description' => '## 接口说明
在集群提交作业前，请确认上传作业文件（如job.sh）到集群。具体操作，请参见[CreateJobFile](~~159049~~)。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateJobFile' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        1 => 
        array (
          'name' => 'RunasUser',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建作业文件的用户名。

您可以通过调用[ListUsers](~~188572~~)获取该集群中的用户名。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'testuser1',
          ),
        ),
        2 => 
        array (
          'name' => 'RunasUserPassword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户密码。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => '!QAZ****',
          ),
        ),
        3 => 
        array (
          'name' => 'Content',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业文件内容，是以Base64编码的文本内容。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'c2xlZXAgMzA=',
          ),
        ),
        4 => 
        array (
          'name' => 'TargetFile',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业文件名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'lammps.pbs',
          ),
        ),
        5 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '采用异步消息链路提交作业文件。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          2 => 
          array (
            'errorCode' => 'IncorrectCredential',
            'errorMessage' => 'The username or password is incorrect.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError.Account.ValidateCredentialFailure',
            'errorMessage' => 'Username or password verification failed.',
          ),
          4 => 
          array (
            'errorCode' => 'UsernameExist',
            'errorMessage' => 'The username already exists.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateJobFileResponse>\\n\\t<RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n</CreateJobFileResponse>","errorExample":""}]',
      'title' => '创建一个作业文件',
      'summary' => '调用CreateJobFile创建一个作业文件。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListJobs' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Owner',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '运行作业的用户。

您可以通过调用[ListUsers](~~188572~~)获取该集群中的用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'user1',
          ),
        ),
        2 => 
        array (
          'name' => 'State',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业状态。取值范围：

- all：所有状态。
- finished：已完成。
- notfinish：未完成。',
            'type' => 'string',
            'required' => false,
            'example' => 'finished',
          ),
        ),
        3 => 
        array (
          'name' => 'Rerunable',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否支持重新运行作业。取值范围：
- true：支持。
- false：不支持。

默认值：false。',
            'type' => 'string',
            'required' => false,
            'example' => 'false',
          ),
        ),
        4 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1。

默认值：1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        5 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询时设置的每页行数。最大值：50。

默认值：10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '分页查询时设置的本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Jobs' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'JobInfo' => 
                  array (
                    'description' => '作业信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Owner' => 
                        array (
                          'description' => '执行作业的用户名。',
                          'type' => 'string',
                          'example' => 'user1',
                        ),
                        'Comment' => 
                        array (
                          'description' => '作业描述信息。',
                          'type' => 'string',
                          'example' => 'jobDescription',
                        ),
                        'State' => 
                        array (
                          'description' => '作业状态。可能值：
- FINISHED：已完成。
- RUNNING：运行中。
- QUEUED：列队等待。',
                          'type' => 'string',
                          'example' => 'FINISHED',
                        ),
                        'Stderr' => 
                        array (
                          'description' => '错误输出位置。',
                          'type' => 'string',
                          'example' => './Temp',
                        ),
                        'Priority' => 
                        array (
                          'description' => '处理作业的优先级。取值范围：0~9，取值越大，优先级越高。',
                          'type' => 'string',
                          'example' => '0',
                        ),
                        'ShellPath' => 
                        array (
                          'description' => '运行作业路径。',
                          'type' => 'string',
                          'example' => './Temp',
                        ),
                        'Stdout' => 
                        array (
                          'description' => '标准输出位置。',
                          'type' => 'string',
                          'example' => './Temp',
                        ),
                        'ArrayRequest' => 
                        array (
                          'description' => '作业队列格式。如果不是队列作业，输出为空。

格式为X-Y:Z， 最小值X是第一个索引，最大值Y是最后一个索引，Z表示步长，例如2-7:2，表示作业队列包含编号为2、4、6的3个子作业。',
                          'type' => 'string',
                          'example' => '1-10:2',
                        ),
                        'StartTime' => 
                        array (
                          'description' => '作业开始时间。',
                          'type' => 'string',
                          'example' => '2018-07-18T17:46:48',
                        ),
                        'LastModifyTime' => 
                        array (
                          'description' => '作业最后修改时间。',
                          'type' => 'string',
                          'example' => '2018-07-18T17:46:48',
                        ),
                        'NodeList' => 
                        array (
                          'description' => '运行作业的计算节点列表。',
                          'type' => 'string',
                          'example' => '[\'compute2\', \'compute3\']',
                        ),
                        'Name' => 
                        array (
                          'description' => '作业名称。',
                          'type' => 'string',
                          'example' => 'job1',
                        ),
                        'Id' => 
                        array (
                          'description' => '作业ID。',
                          'type' => 'string',
                          'example' => '0.manager',
                        ),
                        'SubmitTime' => 
                        array (
                          'description' => '作业提交时间。',
                          'type' => 'string',
                          'example' => '2018-07-18T17:46:47',
                        ),
                        'Resources' => 
                        array (
                          'description' => '作业运行所需资源。',
                          'type' => 'object',
                          'properties' => 
                          array (
                            'Nodes' => 
                            array (
                              'description' => '作业运行的节点数量。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '0',
                            ),
                            'Cores' => 
                            array (
                              'description' => '运行作业的CPU个数。',
                              'type' => 'integer',
                              'format' => 'int32',
                              'example' => '2',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError.Job.ListFailure',
            'errorMessage' => 'Failed to list jobs: %s.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
          4 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 10,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Jobs\\": {\\n    \\"JobInfo\\": [\\n      {\\n        \\"Owner\\": \\"user1\\",\\n        \\"Comment\\": \\"jobDescription\\",\\n        \\"State\\": \\"FINISHED\\",\\n        \\"Stderr\\": \\"./Temp\\",\\n        \\"Priority\\": \\"0\\",\\n        \\"ShellPath\\": \\"./Temp\\",\\n        \\"Stdout\\": \\"./Temp\\",\\n        \\"ArrayRequest\\": \\"1-10:2\\",\\n        \\"StartTime\\": \\"2018-07-18T17:46:48\\",\\n        \\"LastModifyTime\\": \\"2018-07-18T17:46:48\\",\\n        \\"NodeList\\": \\"[\'compute2\', \'compute3\']\\",\\n        \\"Name\\": \\"job1\\",\\n        \\"Id\\": \\"0.manager\\",\\n        \\"SubmitTime\\": \\"2018-07-18T17:46:47\\",\\n        \\"Resources\\": {\\n          \\"Nodes\\": 0,\\n          \\"Cores\\": 2\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListJobsResponse>\\n    <TotalCount>1</TotalCount>\\n    <PageSize>10</PageSize>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <Jobs>\\n        <JobInfo>\\n            <Comment>jobDescription</Comment>\\n            <Owner>user1</Owner>\\n            <Priority>0</Priority>\\n            <NodeList>[\'compute2\', \'compute3\']</NodeList>\\n            <StartTime>2018-07-18T17:46:48</StartTime>\\n            <LastModifyTime>2018-07-18T17:46:48</LastModifyTime>\\n            <SubmitTime>2018-07-18T17:46:47</SubmitTime>\\n            <Name>job1</Name>\\n            <Stderr>./Temp</Stderr>\\n            <State>FINISHED</State>\\n            <ShellPath>./Temp</ShellPath>\\n            <Id>0.manager</Id>\\n            <ArrayRequest>1-10:2</ArrayRequest>\\n            <Stdout>./Temp</Stdout>\\n            <Resources>\\n                <Cores>2</Cores>\\n                <Nodes>0</Nodes>\\n            </Resources>\\n        </JobInfo>\\n    </Jobs>\\n</ListJobsResponse>","errorExample":""}]',
      'title' => '查询作业列表',
      'summary' => '调用ListJobs查询指定集群中的作业列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DescribeJob' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        1 => 
        array (
          'name' => 'JobId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业ID。

您可以调用[ListJobs](~~87251~~)查询作业ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1.scheduler****',
          ),
        ),
        2 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '采用异步消息链路停止作业。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '9697AD8D-56FA-4C8E-B46C-00AC9***',
              ),
              'Message' => 
              array (
                'description' => '信息列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'JobInfo' => 
                  array (
                    'description' => '作业详细信息。',
                    'type' => 'string',
                    'example' => '{"2.scheduler": {"egroup": "users","Stageout_status": 1,"Keep_Files": "n","server": "scheduler","queue": "workq"}}',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          4 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"9697AD8D-56FA-4C8E-B46C-00AC9***\\",\\n  \\"Message\\": {\\n    \\"JobInfo\\": \\"{\\\\\\"2.scheduler\\\\\\": {\\\\\\"egroup\\\\\\": \\\\\\"users\\\\\\",\\\\\\"Stageout_status\\\\\\": 1,\\\\\\"Keep_Files\\\\\\": \\\\\\"n\\\\\\",\\\\\\"server\\\\\\": \\\\\\"scheduler\\\\\\",\\\\\\"queue\\\\\\": \\\\\\"workq\\\\\\"}}\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeJobResponse>\\n    <RequestId>9697AD8D-56FA-4C8E-B46C-00AC9***</RequestId>\\n    <Message>\\n        <JobInfo>{\\"2.scheduler\\": {\\"egroup\\": \\"users\\",\\"Stageout_status\\": 1,\\"Keep_Files\\": \\"n\\",\\"server\\": \\"scheduler\\",\\"queue\\": \\"workq\\"}}</JobInfo>\\n    </Message>\\n</DescribeJobResponse>","errorExample":""}]',
      'title' => '查询作业信息',
      'summary' => '调用DescribeJob查询一个集群内指定作业的详细信息。',
    ),
    'ListJobsWithFilters' => 
    array (
      'summary' => '按照相关参数查询指定作业详情。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1。

默认值：1。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询时设置的每页行数。最大值：50。

默认值：10。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'Users',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => '执行作业的用户列表信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '执行作业的用户名，支持模糊查询。
您可以通过调用[ListUsers](~~188572~~)获取该集群中的用户ID。',
              'type' => 'string',
              'required' => false,
              'example' => 'user1',
            ),
            'required' => false,
            'maxItems' => 1,
          ),
        ),
        4 => 
        array (
          'name' => 'Queues',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => '执行作业的队列列表信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '执行作业的队列名称。支持模糊查询。',
              'type' => 'string',
              'required' => false,
              'example' => 'workq',
            ),
            'required' => false,
            'maxItems' => 1,
          ),
        ),
        5 => 
        array (
          'name' => 'Nodes',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => '执行作业的计算节点列表信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '计算节点名称，支持模糊查询。',
              'type' => 'string',
              'required' => false,
              'example' => 'node1',
            ),
            'required' => false,
            'maxItems' => 1,
          ),
        ),
        6 => 
        array (
          'name' => 'JobName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业名称。支持模糊查询。',
            'type' => 'string',
            'required' => false,
            'example' => 'job1',
          ),
        ),
        7 => 
        array (
          'name' => 'JobStatus',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业状态。取值范围：

- all：所有状态。

- finished：已完成。

- notfinish：未完成。

默认值：all。',
            'type' => 'string',
            'required' => false,
            'example' => 'finished',
          ),
        ),
        8 => 
        array (
          'name' => 'ExecuteOrder',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '按照作业执行时间进行排序。取值范围：

- asc：升序。

- desc：降序。',
            'type' => 'string',
            'required' => false,
            'example' => 'asc',
          ),
        ),
        9 => 
        array (
          'name' => 'SubmitOrder',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '按照作业提交时间进行排序。取值范围：

- asc：升序。

- desc：降序。',
            'type' => 'string',
            'required' => false,
            'example' => 'asc',
          ),
        ),
        10 => 
        array (
          'name' => 'PendOrder',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '按照作业排队时间进行排序。取值范围：

- asc：升序。

- desc：降序。',
            'type' => 'string',
            'required' => false,
            'example' => 'desc',
          ),
        ),
        11 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '地域ID。
您可以调用[ListRegions](~~188593~~)查询可以使用E-HPC的地域列表。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-hangzhou',
          ),
        ),
        12 => 
        array (
          'name' => 'CreateTimeStart',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业最早提交时间。格式为Unix时间戳，表示从1970-01-01T00:00:00Z起所经过的秒数。',
            'type' => 'string',
            'required' => false,
            'example' => '1647427667',
          ),
        ),
        13 => 
        array (
          'name' => 'CreateTimeEnd',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业最晚提交时间。格式为Unix时间戳，表示从1970-01-01T00:00:00Z起所经过的秒数。',
            'type' => 'string',
            'required' => false,
            'example' => '1647428667',
          ),
        ),
        14 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否异步查询。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'TotalCount' => 
              array (
                'title' => 'TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回',
                'description' => '本次请求条件下的数据总条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'PageSize' => 
              array (
                'title' => 'PageSize',
                'description' => '分页查询时设置的本页条数。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '10',
              ),
              'PageNumber' => 
              array (
                'title' => 'PageNumber',
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '1',
              ),
              'Jobs' => 
              array (
                'title' => 'Jobs',
                'description' => '作业信息列表。',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Owner' => 
                    array (
                      'description' => '执行作业的用户名。',
                      'type' => 'string',
                      'example' => 'test2@scheduler',
                    ),
                    'Comment' => 
                    array (
                      'description' => '作业描述信息。',
                      'type' => 'string',
                      'example' => 'jobDescription',
                    ),
                    'State' => 
                    array (
                      'description' => '作业状态。取值范围：

- FINISHED：已完成。

- RUNNING：运行中。

- QUEUED：列队等待。',
                      'type' => 'string',
                      'example' => 'FINISHED',
                    ),
                    'Stderr' => 
                    array (
                      'description' => '错误输出位置。',
                      'type' => 'string',
                      'example' => './Temp',
                    ),
                    'Priority' => 
                    array (
                      'description' => '处理作业的优先级。取值范围：0~9，取值越大，优先级越高。',
                      'type' => 'string',
                      'example' => '0',
                    ),
                    'ShellPath' => 
                    array (
                      'description' => '运行作业路径。',
                      'type' => 'string',
                      'example' => './Temp',
                    ),
                    'Stdout' => 
                    array (
                      'description' => '标准输出位置。',
                      'type' => 'string',
                      'example' => './Temp',
                    ),
                    'ArrayRequest' => 
                    array (
                      'description' => '作业队列格式。如果不是队列作业，输出为空。

格式为X-Y:Z， 最小值X是第一个索引，最大值Y是最后一个索引，Z表示步长，例如2-7:2，表示作业队列包含编号为2、4、6的3个子作业。',
                      'type' => 'string',
                      'example' => '1-10:2',
                    ),
                    'StartTime' => 
                    array (
                      'description' => '作业开始时间。',
                      'type' => 'string',
                      'example' => '1647427667',
                    ),
                    'LastModifyTime' => 
                    array (
                      'description' => '作业最后修改时间。',
                      'type' => 'string',
                      'example' => '1647428667',
                    ),
                    'NodeList' => 
                    array (
                      'description' => '运行作业的计算节点列表。',
                      'type' => 'string',
                      'example' => '[\'compute2\', \'compute3\']',
                    ),
                    'Name' => 
                    array (
                      'description' => '作业名称。',
                      'type' => 'string',
                      'example' => 'job1',
                    ),
                    'Id' => 
                    array (
                      'description' => '作业ID。',
                      'type' => 'string',
                      'example' => '8.scheduler',
                    ),
                    'SubmitTime' => 
                    array (
                      'description' => '作业提交时间戳。',
                      'type' => 'string',
                      'example' => '1647423718',
                    ),
                    'Resources' => 
                    array (
                      'description' => '作业运行所需资源。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Nodes' => 
                        array (
                          'description' => '作业运行的节点数量。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '0',
                        ),
                        'Cores' => 
                        array (
                          'description' => '运行作业的CPU个数。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '2',
                        ),
                      ),
                    ),
                    'Queue' => 
                    array (
                      'description' => '运行作业的队列数量。',
                      'type' => 'string',
                      'example' => '2',
                    ),
                    'Rerunable' => 
                    array (
                      'description' => '作业是否支持重新运行。可能值：

- true：支持。

- false：不支持。',
                      'type' => 'boolean',
                      'example' => 'true',
                    ),
                    'VariableList' => 
                    array (
                      'description' => '作业的变量列表。',
                      'type' => 'string',
                      'example' => '{"PBS_O_SHELL":"/bin/bash", 	"PBS_O_HOST":"manager", 	"PBS_O_SYSTEM":"Linux", 	"PBS_O_LANG":"en_US.UTF-8", 	"PBS_O_QUEUE":"workq"}',
                    ),
                  ),
                ),
              ),
              'Success' => 
              array (
                'title' => 'Success',
                'description' => '执行命令并获取结果的过程是否成功。取值范围：

- true：成功。

- false：失败。',
                'type' => 'boolean',
                'example' => 'true',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => '%s',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.	',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.	',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable	',
            'errorMessage' => 'The request has failed due to a temporary failure of the server	',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TotalCount\\": 1,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"PageSize\\": 10,\\n  \\"PageNumber\\": 1,\\n  \\"Jobs\\": [\\n    {\\n      \\"Owner\\": \\"test2@scheduler\\",\\n      \\"Comment\\": \\"jobDescription\\",\\n      \\"State\\": \\"FINISHED\\",\\n      \\"Stderr\\": \\"./Temp\\",\\n      \\"Priority\\": \\"0\\",\\n      \\"ShellPath\\": \\"./Temp\\",\\n      \\"Stdout\\": \\"./Temp\\",\\n      \\"ArrayRequest\\": \\"1-10:2\\",\\n      \\"StartTime\\": \\"1647427667\\",\\n      \\"LastModifyTime\\": \\"1647428667\\",\\n      \\"NodeList\\": \\"[\'compute2\', \'compute3\']\\",\\n      \\"Name\\": \\"job1\\",\\n      \\"Id\\": \\"8.scheduler\\",\\n      \\"SubmitTime\\": \\"1647423718\\",\\n      \\"Resources\\": {\\n        \\"Nodes\\": 0,\\n        \\"Cores\\": 2\\n      },\\n      \\"Queue\\": \\"2\\",\\n      \\"Rerunable\\": true,\\n      \\"VariableList\\": \\"{\\\\\\"PBS_O_SHELL\\\\\\":\\\\\\"/bin/bash\\\\\\", \\\\t\\\\\\"PBS_O_HOST\\\\\\":\\\\\\"manager\\\\\\", \\\\t\\\\\\"PBS_O_SYSTEM\\\\\\":\\\\\\"Linux\\\\\\", \\\\t\\\\\\"PBS_O_LANG\\\\\\":\\\\\\"en_US.UTF-8\\\\\\", \\\\t\\\\\\"PBS_O_QUEUE\\\\\\":\\\\\\"workq\\\\\\"}\\"\\n    }\\n  ],\\n  \\"Success\\": true\\n}","errorExample":""},{"type":"xml","example":"<ListJobsWithFiltersResponse>\\n    <TotalCount>1</TotalCount>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n    <PageSize>10</PageSize>\\n    <PageNumber>1</PageNumber>\\n    <Jobs>\\n        <Owner>test2@scheduler</Owner>\\n        <Comment>jobDescription</Comment>\\n        <State>FINISHED</State>\\n        <Stderr>./Temp</Stderr>\\n        <Priority>0</Priority>\\n        <ShellPath>./Temp</ShellPath>\\n        <Stdout>./Temp</Stdout>\\n        <ArrayRequest>1-10:2</ArrayRequest>\\n        <StartTime>1647427667</StartTime>\\n        <LastModifyTime>1647428667</LastModifyTime>\\n        <NodeList>[\'compute2\', \'compute3\']</NodeList>\\n        <Name>job1</Name>\\n        <Id>8.scheduler</Id>\\n        <SubmitTime>1647423718</SubmitTime>\\n        <Resources>\\n            <Nodes>0</Nodes>\\n            <Cores>2</Cores>\\n        </Resources>\\n        <Queue>2</Queue>\\n    </Jobs>\\n    <Success>true</Success>\\n</ListJobsWithFiltersResponse>","errorExample":""}]',
      'title' => '查询作业详情',
    ),
    'RerunJobs' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-sh-3VeFyR****',
          ),
        ),
        1 => 
        array (
          'name' => 'Jobs',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要重新运行的作业ID列表，作业数量取值范围：1~100。

格式为`[{"Id": "0.sched****"},{"Id": "1.sched****"}]`，多个作业间用半角逗号（,）隔开。

您可以调用[ListJobs](~~87251~~)查询作业ID。

>需要重新运行的作业状态必须为RUNNING或QUEUED。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '[{"Id":"1.scheduler"}]',
          ),
        ),
        2 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '采用异步消息链路重新运行作业。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          2 => 
          array (
            'errorCode' => 'UsernameExist',
            'errorMessage' => 'The username already exists.',
          ),
          3 => 
          array (
            'errorCode' => 'IncorrectCredential',
            'errorMessage' => 'The username or password is incorrect.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError.Job.RerunFailure',
            'errorMessage' => 'Failed to run the job again: %s.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteJobsResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n</DeleteJobsResponse>","errorExample":""}]',
      'title' => '重新运行脚本作业',
      'summary' => '调用RerunJobs重新运行一个或多个作业。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'StopJobs' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Jobs',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待停止的作业ID列表，作业数量取值范围：1~100。

格式为`[{"Id": "0.sched****"},{"Id": "1.sched****"}]`，多个作业间用半角逗号（,）隔开。

您可以调用[ListJobs](~~87251~~)查询作业ID。

>待停止的作业状态必须为RUNNING或QUEUED。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '[{"Id":"1.sched****"},{"Id":"0.sched****"}]',
          ),
        ),
        2 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '采用异步消息链路停止作业。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          2 => 
          array (
            'errorCode' => 'UsernameExist',
            'errorMessage' => 'The username already exists.',
          ),
          3 => 
          array (
            'errorCode' => 'IncorrectCredential',
            'errorMessage' => 'The username or password is incorrect.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError.Job.StopFailure',
            'errorMessage' => 'Failed to stop jobs: %s.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<StopJobsResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n</StopJobsResponse>","errorExample":""}]',
      'title' => '批量停止作业',
      'summary' => '调用StopJobs停止指定集群中一个或多个作业。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetJobLog' => 
    array (
      'summary' => '获取指定作业的输出日志。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待查询的集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        1 => 
        array (
          'name' => 'JobId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待查询的作业ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1.scheduler****',
          ),
        ),
        2 => 
        array (
          'name' => 'ExecHost',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业所在的节点名称。
- 对于已经完成的作业，无需指定该参数。
- 对于正在运行的作业，必须指定该参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'compute000',
          ),
        ),
        3 => 
        array (
          'name' => 'Size',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单次请求读取的日志大小。

单位：byte

默认值：1024

最大值：400 * 1024',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1024',
          ),
        ),
        4 => 
        array (
          'name' => 'Offset',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '日志读取的起始位置。

单位：byte

默认值：0',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '0',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'description' => '返回结果。',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '任务ID。',
                'type' => 'string',
                'example' => 'B745C159-3155-4B94-95D0-4B73D4D2****',
              ),
              'JobId' => 
              array (
                'description' => '本次请求查询的作业ID。',
                'type' => 'string',
                'example' => '1.scheduler****',
              ),
              'OutputLog' => 
              array (
                'description' => '作业结果日志，是以Base64编码的文本内容。',
                'type' => 'string',
                'example' => 'c2xlZXAgMzA=',
              ),
              'ErrorLog' => 
              array (
                'description' => '作业错误日志，是以Base64编码的文本内容。',
                'type' => 'string',
                'example' => 'c2xlZXAgMzA=',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ComputeNotFound',
            'errorMessage' => 'The specified compute node does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"B745C159-3155-4B94-95D0-4B73D4D2****\\",\\n  \\"JobId\\": \\"1.scheduler****\\",\\n  \\"OutputLog\\": \\"c2xlZXAgMzA=\\",\\n  \\"ErrorLog\\": \\"c2xlZXAgMzA=\\"\\n}","errorExample":""},{"type":"xml","example":"<GetJobLogResponse>\\n    <RequestId>B745C159-3155-4B94-95D0-4B73D4D2****</RequestId>\\n    <JobId>1.scheduler****</JobId>\\n    <OutputLog>c2xlZXAgMzA=</OutputLog>\\n    <ErrorLog>c2xlZXAgMzA=</ErrorLog>\\n</GetJobLogResponse>","errorExample":""}]',
      'title' => '获取作业日志',
    ),
    'DeleteJobs' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Jobs',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待删除的作业ID列表，作业数量取值范围：1~100。

格式为`[{"Id": "0.sched****"},{"Id": "1.sched****"}]`，多个作业间用半角逗号（,）隔开。

您可以调用[ListJobs](~~87251~~)查询作业ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '[{"Id": "0.sched****"},{"Id": "1.sched****"}]',
          ),
        ),
        2 => 
        array (
          'name' => 'Async',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '采用异步消息链路删除作业。

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          2 => 
          array (
            'errorCode' => 'UsernameExist',
            'errorMessage' => 'The username already exists.',
          ),
          3 => 
          array (
            'errorCode' => 'IncorrectCredential',
            'errorMessage' => 'The username or password is incorrect.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError.Job.DeleteFailure',
            'errorMessage' => 'Failed to delete job: %s',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteJobsResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n</DeleteJobsResponse>","errorExample":""}]',
      'title' => '批量删除作业',
      'summary' => '调用DeleteJobs删除指定集群中一个或多个作业。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SubmitServerlessJob' => 
    array (
      'summary' => '调用SubmitServerlessJob提交Serverless作业到E-HPC集群。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'JobName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Serverless作业名。
> 支持英文小写字母、数字或者短划线（-），不能以短划线开头或者结尾。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'testjob',
          ),
        ),
        2 => 
        array (
          'name' => 'ArrayProperties',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => '数组作业配置。
> 数组作业索引值会通过环境变量`EHPC_ARRAY_TASK_ID`传入Serverless作业容器中，支持用户业务程序访问。',
            'type' => 'object',
            'properties' => 
            array (
              'IndexStart' => 
              array (
                'description' => '数组作业索引的起始值。取值范围：0~4999。',
                'type' => 'integer',
                'format' => 'int64',
                'required' => false,
                'example' => '1',
              ),
              'IndexEnd' => 
              array (
                'description' => '数组作业索引的结束值。取值范围：0~4999，且大于等于IndexStart。',
                'type' => 'integer',
                'format' => 'int64',
                'required' => false,
                'example' => '5',
              ),
              'IndexStep' => 
              array (
                'description' => '数组作业索引的间隔。
> 若数组作业属性为IndexStart=1,IndexEnd=5,IndexStep=2，则该数组作业包含三个子任务，子任务索引分别为1,3,5。',
                'type' => 'integer',
                'format' => 'int64',
                'required' => false,
                'example' => '2',
              ),
            ),
            'required' => false,
          ),
        ),
        3 => 
        array (
          'name' => 'JobPriority',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Serverless作业的调度优先级。取值范围：0~999，取值越大，优先级越高。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'EphemeralStorage',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '为Serverless作业容器增加的临时存储空间大小。单位：GiB。
> Serverless作业容器默认提供30 GiB的免费存储空间，如果您的存储需求大于30 GiB，可以通过该参数自定义增加临时存储空间大小。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '200',
          ),
        ),
        5 => 
        array (
          'name' => 'Timeout',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Serverless作业的有效期限，超出该时间后，作业会强制终止。单位为秒。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '3600',
          ),
        ),
        6 => 
        array (
          'name' => 'VSwitchId',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => 'Serverless作业容器所属的交换机ID列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '交换机ID。
> E-HPC当前仅支持VPC网络。您可以调用[DescribeVSwitches](~~35748~~)查询已创建的交换机的相关信息。',
              'type' => 'string',
              'required' => false,
              'example' => 'vsw-bp1gb5gf5546rn****',
            ),
            'required' => false,
            'maxItems' => 10,
          ),
        ),
        7 => 
        array (
          'name' => 'InstanceType',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => 'Serverless作业容器所采用的ECS实例规格列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => 'ECS实例规格。',
              'type' => 'string',
              'required' => false,
              'example' => 'ecs.g7.8xlarge',
            ),
            'required' => false,
            'docRequired' => false,
            'maxItems' => 5,
          ),
        ),
        8 => 
        array (
          'name' => 'Cpu',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Serverless作业容器的vCPU大小。单位：核。',
            'type' => 'number',
            'format' => 'float',
            'required' => false,
            'docRequired' => false,
            'example' => '2',
            'default' => '1.0',
          ),
        ),
        9 => 
        array (
          'name' => 'Memory',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Serverless作业容器的内存大小。单位：GiB。',
            'type' => 'number',
            'format' => 'float',
            'required' => false,
            'docRequired' => false,
            'example' => '4',
            'default' => '2.0',
          ),
        ),
        10 => 
        array (
          'name' => 'SpotStrategy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例的抢占策略。取值范围：

- NoSpot：正常按量付费实例。
- SpotWithPriceLimit：设置上限价格的抢占式实例。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格的抢占式实例。

默认值：NoSpot。',
            'type' => 'string',
            'required' => false,
            'docRequired' => false,
            'example' => 'SpotWithPriceLimit',
          ),
        ),
        11 => 
        array (
          'name' => 'SpotPriceLimit',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '设置抢占式实例的每小时最高价格，最多精确到小数点后3位。

当SpotStrategy取值为SpotWithPriceLimit时，必须设置SpotPriceLimit。',
            'type' => 'number',
            'format' => 'float',
            'required' => false,
            'example' => '0.062',
          ),
        ),
        12 => 
        array (
          'name' => 'RamRoleName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Serverless作业容器绑定的RAM角色名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'testRamRoleName',
          ),
        ),
        13 => 
        array (
          'name' => 'Container',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => 'Serverless作业容器的属性。',
            'type' => 'object',
            'properties' => 
            array (
              'EnvironmentVar' => 
              array (
                'description' => '容器的环境变量值。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '容器的环境变量值。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Key' => 
                    array (
                      'description' => '环境变量名。长度为1~128位。格式要求：[0-9a-zA-Z]，以及下划线，不能以数字开头。',
                      'type' => 'string',
                      'required' => false,
                      'example' => 'PATH',
                    ),
                    'Value' => 
                    array (
                      'description' => '环境变量值。长度为0~256位。',
                      'type' => 'string',
                      'required' => false,
                      'example' => '/usr/local/bin',
                    ),
                  ),
                  'required' => false,
                ),
                'required' => false,
                'maxItems' => 20,
              ),
              'WorkingDir' => 
              array (
                'description' => '容器工作目录。',
                'type' => 'string',
                'required' => false,
                'example' => '/usr/local/
',
              ),
              'Image' => 
              array (
                'description' => '容器镜像。',
                'type' => 'string',
                'required' => true,
                'example' => 'registry-vpc.cn-hangzhou.aliyuncs.com/ehpc/hpl:latest
',
              ),
              'Command' => 
              array (
                'description' => '容器启动指令列表。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '容器启动指令。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'python3',
                ),
                'required' => false,
                'maxItems' => 20,
              ),
              'Arg' => 
              array (
                'description' => '容器启动命令对应的参数列表。最多10个。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '容器启动参数。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'hello.py',
                ),
                'required' => false,
                'maxItems' => 100,
              ),
              'Gpu' => 
              array (
                'description' => '容器使用的GPU个数。',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'example' => '1',
              ),
              'VolumeMount' => 
              array (
                'description' => '容器挂载的数据卷列表。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '容器挂载的数据卷信息。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'MountPath' => 
                    array (
                      'description' => '容器挂载数据卷的目录。    

> 容器挂载目录下的内容会被Volume的内容直接覆盖，请谨慎使用。',
                      'type' => 'string',
                      'required' => false,
                      'example' => '/data',
                    ),
                    'FlexVolumeDriver' => 
                    array (
                      'description' => '使用FlexVolume插件挂载数据卷时的驱动类型。取值范围如下：

- alicloud/nas：挂载NAS。

- alicloud/oss：挂载OSS。',
                      'type' => 'string',
                      'required' => false,
                      'example' => 'alicloud/oss',
                    ),
                    'FlexVolumeOptions' => 
                    array (
                      'description' => 'FlexVolume对象选项列表。为KV形式，采用JSON传递。',
                      'type' => 'string',
                      'required' => false,
                      'example' => '{"bucket":"hpctest","url": "oss-cn-hangzhou-internal.aliyuncs.com
","path":"/data","ramRole":"AliyunECSInstanceForEHPCRole"}',
                    ),
                  ),
                  'required' => false,
                ),
                'required' => false,
              ),
            ),
            'required' => true,
          ),
        ),
        14 => 
        array (
          'name' => 'DependsOn',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => 'Serverless作业依赖列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => 'Serverless作业依赖。',
              'type' => 'object',
              'properties' => 
              array (
                'JobId' => 
                array (
                  'description' => '所依赖的作业ID。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '10',
                ),
                'Type' => 
                array (
                  'description' => '依赖类型。取值范围：

- AfterSucceeded：所依赖作业或数组作业**所有子任务**运行成功（退出码为0）。
- AfterFailed：所依赖作业或数组作业**任一子任务**运行失败（退出码非0）。
- AfterAny：所依赖作业运行结束（成功或失败）。
- AfterCorresponding：所依赖数组作业对应的子任务运行成功（退出码为0）。

默认值：AfterSucceeded。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'AfterAny',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 10,
            'minItems' => 1,
          ),
        ),
        15 => 
        array (
          'name' => 'RetryStrategy',
          'in' => 'query',
          'style' => 'json',
          'schema' => 
          array (
            'description' => 'Serverless作业重试策略。',
            'type' => 'object',
            'properties' => 
            array (
              'Attempts' => 
              array (
                'description' => 'Serverless作业重试次数。取值范围：1～10。',
                'type' => 'integer',
                'format' => 'int32',
                'required' => false,
                'maximum' => '10',
                'minimum' => '1',
                'example' => '5',
              ),
              'EvaluateOnExit' => 
              array (
                'description' => 'Serverless作业重试规则列表。最多10个。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => 'Serverless作业重试规则。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Action' => 
                    array (
                      'description' => '作业行为。取值范围如下：

- Retry：当命中特定退出码时，作业开始新一轮重试。

- Exit：当命中特定退出码时，作业退出。',
                      'type' => 'string',
                      'required' => false,
                      'example' => 'Retry',
                    ),
                    'OnExitCode' => 
                    array (
                      'description' => '作业退出码，配合Action构成作业重试规则。取值范围：0～255。',
                      'type' => 'string',
                      'required' => false,
                      'example' => '10',
                    ),
                  ),
                  'required' => false,
                ),
                'required' => false,
                'maxItems' => 10,
              ),
            ),
            'required' => false,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'JobId' => 
              array (
                'description' => 'Serverless作业ID。',
                'type' => 'string',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed: %s',
          ),
          4 => 
          array (
            'errorCode' => 'ServiceAPIError',
            'errorMessage' => 'Failed to call the operation. Cause:%s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"JobId\\": \\"10\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\"\\n}","type":"json"}]',
      'title' => '提交Serverless作业',
    ),
    'ListServerlessJobs' => 
    array (
      'summary' => '按照过滤条件查询Serverless作业列表。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '地域ID。
您可以调用[ListRegions](~~188593~~)查询可以使用E-HPC的地域列表。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '页码。起始值：1，默认值：1。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示条数。最大值：100，默认值：20。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '20',
          ),
        ),
        4 => 
        array (
          'name' => 'JobIds',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => 'Serverless作业ID或子任务ID（数组作业）列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => 'Serverless作业ID或子任务ID（数组作业）。',
              'type' => 'string',
              'required' => false,
              'example' => '5',
            ),
            'required' => false,
            'maxItems' => 10,
          ),
        ),
        5 => 
        array (
          'name' => 'JobNames',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => 'Serverless作业名列表。',
            'type' => 'array',
            'items' => 
            array (
              'description' => 'Serverless作业名。',
              'type' => 'string',
              'required' => false,
              'example' => 'testjob',
            ),
            'required' => false,
            'maxItems' => 10,
          ),
        ),
        6 => 
        array (
          'name' => 'State',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'Serverless作业状态。取值范围：

- All：所有状态。
- Pending: 排队中。
- Running：运行中。
- Succeeded：已完成。
- Canceled：已取消。
- Failed：运行失败。

默认值：All。',
            'type' => 'string',
            'required' => false,
            'example' => 'Running',
            'enum' => 
            array (
              0 => 'Pending',
              1 => 'Running',
              2 => 'Canceled',
              3 => 'Failed',
              4 => 'All',
              5 => 'Succeeded',
            ),
          ),
        ),
        7 => 
        array (
          'name' => 'StartOrder',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '按照Serverless作业启动时间进行排序。取值范围：

- Asc：升序。
- Desc：降序。',
            'type' => 'string',
            'required' => false,
            'example' => 'Asc',
            'enum' => 
            array (
              0 => 'Desc',
              1 => 'Asc',
            ),
          ),
        ),
        8 => 
        array (
          'name' => 'SubmitOrder',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '按照Serverless作业提交时间进行排序。取值范围：

- Asc：升序。
- Desc：降序。',
            'type' => 'string',
            'required' => false,
            'example' => 'Asc',
            'enum' => 
            array (
              0 => 'Desc',
              1 => 'Asc',
            ),
          ),
        ),
        9 => 
        array (
          'name' => 'SubmitTimeStart',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '最早的作业提交时间戳。
> 用于按照Serverless作业的提交时间范围查询作业列表。',
            'type' => 'string',
            'required' => false,
            'example' => '1647427667',
          ),
        ),
        10 => 
        array (
          'name' => 'SubmitTimeEnd',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '最晚的作业提交时间戳。
> 用于按照Serverless作业的提交时间范围查询作业列表。',
            'type' => 'string',
            'required' => false,
            'example' => '1659521430',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'TotalCount' => 
              array (
                'title' => 'TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回',
                'description' => '本次请求条件下的数据总条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'PageSize' => 
              array (
                'title' => 'PageSize',
                'description' => '分页查询时设置的本页条数。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '20',
              ),
              'PageNumber' => 
              array (
                'title' => 'PageNumber',
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int64',
                'example' => '1',
              ),
              'Jobs' => 
              array (
                'title' => 'Jobs',
                'description' => 'Serverless作业信息列表。',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'JobId' => 
                    array (
                      'description' => 'Serverless作业ID或子任务ID（数组作业）。',
                      'type' => 'string',
                      'example' => '5',
                    ),
                    'JobName' => 
                    array (
                      'description' => 'Serverless作业名。',
                      'type' => 'string',
                      'example' => 'testjob',
                    ),
                    'State' => 
                    array (
                      'description' => 'Serverless作业状态。可能的值：

- Pending: 排队中。
- Initing：初始化中。
- Running：运行中。
- Succeeded：已完成。
- Canceled：已取消。
- Failed：运行失败。',
                      'type' => 'string',
                      'example' => 'Running',
                    ),
                    'Priority' => 
                    array (
                      'description' => 'Serverless作业的调度优先级。取值范围：0~999，取值越大，优先级越高。',
                      'type' => 'string',
                      'example' => '9',
                    ),
                    'Queue' => 
                    array (
                      'description' => '执行Serverless作业的队列名。',
                      'type' => 'string',
                      'example' => 'comp',
                    ),
                    'User' => 
                    array (
                      'description' => '执行Serverless作业的用户名。',
                      'type' => 'string',
                      'example' => 'testuser',
                    ),
                    'SubmitTime' => 
                    array (
                      'description' => 'Serverless作业提交时间戳。',
                      'type' => 'string',
                      'example' => '1647423718',
                    ),
                    'StartTime' => 
                    array (
                      'description' => 'Serverless作业开始时间戳。',
                      'type' => 'string',
                      'example' => '1647427667',
                    ),
                    'EndTime' => 
                    array (
                      'description' => 'Serverless作业结束时间戳。',
                      'type' => 'string',
                      'example' => '1682128871',
                    ),
                    'IsArrayJob' => 
                    array (
                      'description' => '是否是数组作业。可能的值：

- True：是数组作业。
- False：不是数组作业。',
                      'type' => 'boolean',
                      'example' => 'True',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          2 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          4 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"TotalCount\\": 1,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"PageSize\\": 20,\\n  \\"PageNumber\\": 1,\\n  \\"Jobs\\": [\\n    {\\n      \\"JobId\\": \\"5\\",\\n      \\"JobName\\": \\"testjob\\",\\n      \\"State\\": \\"Running\\",\\n      \\"Priority\\": \\"9\\",\\n      \\"Queue\\": \\"comp\\",\\n      \\"User\\": \\"testuser\\",\\n      \\"SubmitTime\\": \\"1647423718\\",\\n      \\"StartTime\\": \\"1647427667\\",\\n      \\"EndTime\\": \\"1682128871\\",\\n      \\"IsArrayJob\\": true\\n    }\\n  ]\\n}","type":"json"}]',
      'title' => '查询Serverless作业列表',
    ),
    'DescribeServerlessJobs' => 
    array (
      'summary' => '按照作业ID或子任务ID（数组作业）查询Serverless作业详细信息。当前仅支持传入单个作业ID或单个子任务ID。',
      'methods' => 
      array (
        0 => 'get',
        1 => 'post',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'JobIds',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => 'Serverless作业ID或子任务ID（数组作业）列表。
> - 当Serverless作业为数组作业时，仅支持传入子任务ID。子任务ID格式为：<数组作业ID>\\_<子任务索引>。例如：10\\_3表示ID为10的数组作业中索引为3的子任务。
> - 该列表当前仅支持传入一个元素。',
            'type' => 'array',
            'items' => 
            array (
              'description' => 'Serverless作业ID或子任务ID（数组作业）。',
              'type' => 'string',
              'required' => false,
              'example' => '5',
            ),
            'required' => true,
            'maxItems' => 1,
            'minItems' => 1,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TotalCount' => 
              array (
                'description' => '本次请求条件下的数据总条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'JobInfos' => 
              array (
                'description' => 'Serverless作业详细信息列表。',
                'type' => 'array',
                'items' => 
                array (
                  'type' => 'object',
                  'properties' => 
                  array (
                    'JobId' => 
                    array (
                      'description' => 'Serverless作业ID或子任务ID（数组作业）。',
                      'type' => 'string',
                      'example' => '5',
                    ),
                    'JobName' => 
                    array (
                      'description' => 'Serverless作业名。',
                      'type' => 'string',
                      'example' => 'testjob',
                    ),
                    'State' => 
                    array (
                      'description' => 'Serverless作业状态。可能的值：

- Pending: 排队中。
- Initing：初始化中。
- Running：运行中。
- Succeeded：已完成。
- Canceled：已取消。
- Failed：运行失败。',
                      'type' => 'string',
                      'example' => 'Running',
                    ),
                    'Priority' => 
                    array (
                      'description' => 'Serverless作业的调度优先级。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '9',
                    ),
                    'Queue' => 
                    array (
                      'description' => '执行Serverless作业的队列名。',
                      'type' => 'string',
                      'example' => 'comp',
                    ),
                    'User' => 
                    array (
                      'description' => '执行Serverless作业的用户名。',
                      'type' => 'string',
                      'example' => 'testuser',
                    ),
                    'SubmitTime' => 
                    array (
                      'description' => 'Serverless作业提交时间戳。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1647423718',
                    ),
                    'StartTime' => 
                    array (
                      'description' => 'Serverless作业开始时间戳。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1647427667',
                    ),
                    'EndTime' => 
                    array (
                      'description' => 'Serverless作业结束时间戳。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1662016121',
                    ),
                    'LastModifyTime' => 
                    array (
                      'description' => 'Serverless作业最近修改时间戳。',
                      'type' => 'integer',
                      'format' => 'int64',
                      'example' => '1663831441000',
                    ),
                    'IsArrayJob' => 
                    array (
                      'description' => '是否是数组作业。',
                      'type' => 'boolean',
                      'example' => 'false',
                    ),
                    'ArrayProperties' => 
                    array (
                      'description' => '数组作业属性。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'IndexStart' => 
                        array (
                          'description' => '数组作业索引的起始值',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '1',
                        ),
                        'IndexEnd' => 
                        array (
                          'description' => '数组作业索引的结束值。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '5',
                        ),
                        'IndexStep' => 
                        array (
                          'description' => '数组作业索引的间隔。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '2',
                        ),
                      ),
                    ),
                    'ContainerGroups' => 
                    array (
                      'description' => 'Serverless作业容器组实例信息列表。',
                      'type' => 'array',
                      'items' => 
                      array (
                        'type' => 'object',
                        'properties' => 
                        array (
                          'ContainerGroupId' => 
                          array (
                            'description' => '容器组实例ID。',
                            'type' => 'string',
                            'example' => 'eci-bp1jrgfqqy54kg5hc****',
                          ),
                          'ContainerGroupName' => 
                          array (
                            'description' => '容器组实例名称。',
                            'type' => 'string',
                            'example' => 'test',
                          ),
                          'Status' => 
                          array (
                            'description' => '实例状态。取值范围：

- Pending：启动中

- Running：运行中

- Succeeded：运行成功

- Failed：运行失败

- Scheduling：创建中

- ScheduleFailed：创建失败

- Restarting：重启中

- Updating：更新中

- Terminating：终止中

- Expired：过期',
                            'type' => 'string',
                            'example' => 'Running',
                          ),
                          'InstanceType' => 
                          array (
                            'description' => '指定的ECS实例规格。',
                            'type' => 'string',
                            'example' => 'ecs.g5.large',
                          ),
                          'SpotStrategy' => 
                          array (
                            'description' => '实例的抢占策略。取值范围：
- NoSpot（默认）：正常按量付费节点。
- SpotWithPriceLimit：设置上限价格的抢占式节点。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格。',
                            'type' => 'string',
                            'example' => 'NoSpot',
                          ),
                          'SpotPriceLimit' => 
                          array (
                            'description' => '抢占式实例的每小时最高价格。

仅当SpotStrategy为SpotWithPriceLimit时返回。',
                            'type' => 'number',
                            'format' => 'float',
                            'example' => '0.025',
                          ),
                          'Cpu' => 
                          array (
                            'description' => '容器的vCPU大小。',
                            'type' => 'number',
                            'format' => 'float',
                            'example' => '2',
                          ),
                          'Memory' => 
                          array (
                            'description' => '实例级别内存大小。单位为GiB。',
                            'type' => 'number',
                            'format' => 'float',
                            'example' => '4.0',
                          ),
                          'Containers' => 
                          array (
                            'description' => '容器组包含的容器列表。',
                            'type' => 'array',
                            'items' => 
                            array (
                              'type' => 'object',
                              'properties' => 
                              array (
                                'Args' => 
                                array (
                                  'description' => '容器启动参数。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '容器启动参数。',
                                    'type' => 'string',
                                    'example' => 'hello.py',
                                  ),
                                ),
                                'Commands' => 
                                array (
                                  'description' => '容器启动命令。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '容器启动命令。',
                                    'type' => 'string',
                                    'example' => '/usr/bin/python',
                                  ),
                                ),
                                'Cpu' => 
                                array (
                                  'description' => '容器的vCPU大小。',
                                  'type' => 'number',
                                  'format' => 'float',
                                  'example' => '2.0',
                                ),
                                'CurrentState' => 
                                array (
                                  'description' => '容器当前状态。',
                                  'type' => 'object',
                                  'properties' => 
                                  array (
                                    'DetailStatus' => 
                                    array (
                                      'description' => '容器状态详情。',
                                      'type' => 'string',
                                      'example' => 'working',
                                    ),
                                    'ExitCode' => 
                                    array (
                                      'description' => '容器运行退出码。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '0',
                                    ),
                                    'FinishTime' => 
                                    array (
                                      'description' => '容器运行结束时间。',
                                      'type' => 'string',
                                      'example' => '2018-08-02T15:00:00Z',
                                    ),
                                    'Message' => 
                                    array (
                                      'description' => '容器状态信息。',
                                      'type' => 'string',
                                      'example' => 'Back-off 5m0s restarting failed container=test pod=test_eci-xxx(xxx)',
                                    ),
                                    'Reason' => 
                                    array (
                                      'description' => '容器状态Reason。',
                                      'type' => 'string',
                                      'example' => 'Started',
                                    ),
                                    'Signal' => 
                                    array (
                                      'description' => '容器状态信号。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '1',
                                    ),
                                    'StartTime' => 
                                    array (
                                      'description' => '容器运行开始时间。',
                                      'type' => 'string',
                                      'example' => '2019-12-19T12:05:02Z
',
                                    ),
                                    'State' => 
                                    array (
                                      'description' => '作业状态。可能值：
- Waiting
- Running
- Terminated',
                                      'type' => 'string',
                                      'example' => 'Terminated
',
                                    ),
                                  ),
                                ),
                                'EnvironmentVars' => 
                                array (
                                  'description' => '环境变量。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'type' => 'object',
                                    'properties' => 
                                    array (
                                      'Key' => 
                                      array (
                                        'description' => '环境变量名。',
                                        'type' => 'string',
                                        'example' => 'PATH
',
                                      ),
                                      'Value' => 
                                      array (
                                        'description' => '环境变量值。',
                                        'type' => 'string',
                                        'example' => '/usr/bin/
',
                                      ),
                                      'ValueFrom' => 
                                      array (
                                        'description' => '环境变量值的来源。 如果值不为空，则无法使用。',
                                        'type' => 'object',
                                        'properties' => 
                                        array (
                                          'FieldRef' => 
                                          array (
                                            'description' => '指定字段。',
                                            'type' => 'object',
                                            'properties' => 
                                            array (
                                              'FieldPath' => 
                                              array (
                                                'description' => '字段的路径。',
                                                'type' => 'string',
                                                'example' => 'status.podIP',
                                              ),
                                            ),
                                          ),
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                                'Gpu' => 
                                array (
                                  'description' => 'GPU个数。',
                                  'type' => 'integer',
                                  'format' => 'int32',
                                  'example' => '1',
                                ),
                                'Image' => 
                                array (
                                  'description' => '容器镜像。',
                                  'type' => 'string',
                                  'example' => 'HPL',
                                ),
                                'ImagePullPolicy' => 
                                array (
                                  'description' => '镜像拉取策略。可能值：

- Always：总是拉取。每次都拉取镜像。
- IfNotPresent：按需拉取。优先使用本地镜像，本地没有镜像时则拉取镜像。
- Never：从不拉取。使用本地镜像，不拉取镜像。',
                                  'type' => 'string',
                                  'example' => 'Always',
                                ),
                                'LivenessProbe' => 
                                array (
                                  'description' => '存活探针。',
                                  'type' => 'object',
                                  'properties' => 
                                  array (
                                    'Execs' => 
                                    array (
                                      'description' => '执行命令。',
                                      'type' => 'array',
                                      'items' => 
                                      array (
                                        'description' => '执行命令。',
                                        'type' => 'string',
                                        'example' => '["/bin/sh", "-c", "echo Hello world > /usr/share/message"]
',
                                      ),
                                    ),
                                    'FailureThreshold' => 
                                    array (
                                      'description' => '从上次检查成功后认定检查失败的检查次数阈值（必须是连续失败）。默认为3次。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '3',
                                    ),
                                    'HttpGet' => 
                                    array (
                                      'description' => 'HttpGet。',
                                      'type' => 'object',
                                      'properties' => 
                                      array (
                                        'Path' => 
                                        array (
                                          'description' => 'HttpGet检测的路径。',
                                          'type' => 'string',
                                          'example' => '/usr/nginx/
',
                                        ),
                                        'Port' => 
                                        array (
                                          'description' => 'HttpGet检测的端口。',
                                          'type' => 'integer',
                                          'format' => 'int64',
                                          'example' => '80',
                                        ),
                                        'Scheme' => 
                                        array (
                                          'description' => 'HTTP或HTTPS。',
                                          'type' => 'string',
                                          'example' => 'HTTP',
                                        ),
                                      ),
                                    ),
                                    'InitialDelaySeconds' => 
                                    array (
                                      'description' => '检查开始执行的时间，以容器启动完成为起点计算。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '10',
                                    ),
                                    'PeriodSeconds' => 
                                    array (
                                      'description' => '检查执行的周期。默认为10秒，最小为1秒。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '5',
                                    ),
                                    'SuccessThreshold' => 
                                    array (
                                      'description' => '从上次检查失败后重新认定检查成功的检查次数阈值（必须是连续成功），默认为1。当前必须为1。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '1',
                                    ),
                                    'TcpSocket' => 
                                    array (
                                      'description' => 'TcpSocket。',
                                      'type' => 'object',
                                      'properties' => 
                                      array (
                                        'Host' => 
                                        array (
                                          'description' => '主机名。',
                                          'type' => 'string',
                                          'example' => '1.2.3.4
',
                                        ),
                                        'Port' => 
                                        array (
                                          'description' => '端口号。',
                                          'type' => 'integer',
                                          'format' => 'int64',
                                          'example' => '80',
                                        ),
                                      ),
                                    ),
                                    'TimeoutSeconds' => 
                                    array (
                                      'description' => '检查超时的时间，默认为1秒，最小为1秒。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '10',
                                    ),
                                  ),
                                ),
                                'Memory' => 
                                array (
                                  'description' => '实例级别内存大小。单位为GiB。',
                                  'type' => 'number',
                                  'format' => 'float',
                                  'example' => '4.0',
                                ),
                                'Name' => 
                                array (
                                  'description' => '容器名称。',
                                  'type' => 'string',
                                  'example' => 'HPL',
                                ),
                                'Ports' => 
                                array (
                                  'description' => '暴露端口和协议。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'type' => 'object',
                                    'properties' => 
                                    array (
                                      'Port' => 
                                      array (
                                        'description' => '端口号。可能值：1~65535。',
                                        'type' => 'integer',
                                        'format' => 'int64',
                                        'example' => '8080',
                                      ),
                                      'Protocol' => 
                                      array (
                                        'description' => '协议类型。',
                                        'type' => 'string',
                                        'example' => 'TCP',
                                      ),
                                    ),
                                  ),
                                ),
                                'PreviousState' => 
                                array (
                                  'description' => '上一次状态。',
                                  'type' => 'object',
                                  'properties' => 
                                  array (
                                    'DetailStatus' => 
                                    array (
                                      'description' => '状态详情。',
                                      'type' => 'string',
                                      'example' => 'working',
                                    ),
                                    'ExitCode' => 
                                    array (
                                      'description' => '容器运行退出码。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '0',
                                    ),
                                    'FinishTime' => 
                                    array (
                                      'description' => '容器运行结束时间。',
                                      'type' => 'string',
                                      'example' => '2018-08-02T15:00:00Z',
                                    ),
                                    'Message' => 
                                    array (
                                      'description' => '容器状态信息。',
                                      'type' => 'string',
                                      'example' => 'Back-off 5m0s restarting failed container=test pod=test_eci-xxx(xxx)',
                                    ),
                                    'Reason' => 
                                    array (
                                      'description' => '容器状态Reason。',
                                      'type' => 'string',
                                      'example' => 'Completed',
                                    ),
                                    'Signal' => 
                                    array (
                                      'description' => '容器状态信号。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '1',
                                    ),
                                    'StartTime' => 
                                    array (
                                      'description' => '容器运行开始时间。',
                                      'type' => 'string',
                                      'example' => '2018-08-02T15:00:00Z',
                                    ),
                                    'State' => 
                                    array (
                                      'description' => '容器状态。可能值：

- Waiting：启动中
- Running：运行中
- Terminated：运行终止',
                                      'type' => 'string',
                                      'example' => 'Terminated',
                                    ),
                                  ),
                                ),
                                'ReadinessProbe' => 
                                array (
                                  'description' => '应用业务探针（即就绪探针），用于检查容器是否已经就绪，可以为请求提供服务。',
                                  'type' => 'object',
                                  'properties' => 
                                  array (
                                    'Execs' => 
                                    array (
                                      'description' => '使用命令行方式进行健康检查时，在容器内执行的命令。',
                                      'type' => 'array',
                                      'items' => 
                                      array (
                                        'description' => '使用命令行方式进行健康检查时，在容器内执行的命令。',
                                        'type' => 'string',
                                        'example' => '[
      "/bin/sh",
      "-c",
      "echo Hello world > /usr/share/message"
]',
                                      ),
                                    ),
                                    'FailureThreshold' => 
                                    array (
                                      'description' => '从上次检查成功后认定检查失败的检查次数阈值（必须是连续失败），默认为3。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '3',
                                    ),
                                    'HttpGet' => 
                                    array (
                                      'description' => '使用HTTP请求方式进行健康检查。',
                                      'type' => 'object',
                                      'properties' => 
                                      array (
                                        'Path' => 
                                        array (
                                          'description' => 'HttpGet检测的路径。',
                                          'type' => 'string',
                                          'example' => '/usr/local',
                                        ),
                                        'Port' => 
                                        array (
                                          'description' => 'HttpGet检测的端口号。',
                                          'type' => 'integer',
                                          'format' => 'int64',
                                          'example' => '8080',
                                        ),
                                        'Scheme' => 
                                        array (
                                          'description' => 'HTTP／HTTPS。',
                                          'type' => 'string',
                                          'example' => 'HTTP',
                                        ),
                                      ),
                                    ),
                                    'InitialDelaySeconds' => 
                                    array (
                                      'description' => '检查开始执行的时间，以容器启动完成为起点计算。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '10',
                                    ),
                                    'PeriodSeconds' => 
                                    array (
                                      'description' => '检查执行的周期，默认为10秒，最小为1秒。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '5',
                                    ),
                                    'SuccessThreshold' => 
                                    array (
                                      'description' => '从上次检查失败后重新认定检查成功的检查次数阈值（必须是连续成功），默认为1。当前必须为1',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '1',
                                    ),
                                    'TcpSocket' => 
                                    array (
                                      'description' => '使用TCP Socket方式进行健康检查。',
                                      'type' => 'object',
                                      'properties' => 
                                      array (
                                        'Host' => 
                                        array (
                                          'description' => 'Host。',
                                          'type' => 'string',
                                          'example' => '1.2.3.4',
                                        ),
                                        'Port' => 
                                        array (
                                          'description' => '端口号。',
                                          'type' => 'integer',
                                          'format' => 'int64',
                                          'example' => '8888',
                                        ),
                                      ),
                                    ),
                                    'TimeoutSeconds' => 
                                    array (
                                      'description' => '检查超时的时间，默认为1秒，最小为1秒。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '1',
                                    ),
                                  ),
                                ),
                                'Ready' => 
                                array (
                                  'description' => '指定容器是否已通过其就绪探针。',
                                  'type' => 'boolean',
                                  'example' => 'true',
                                ),
                                'RestartCount' => 
                                array (
                                  'description' => '重启次数。',
                                  'type' => 'integer',
                                  'format' => 'int32',
                                  'example' => '5',
                                ),
                                'SecurityContext' => 
                                array (
                                  'description' => '容器运行的安全上下文。',
                                  'type' => 'object',
                                  'properties' => 
                                  array (
                                    'Capability' => 
                                    array (
                                      'description' => '容器内的进程所具备的特定权限。',
                                      'type' => 'object',
                                      'properties' => 
                                      array (
                                        'Adds' => 
                                        array (
                                          'description' => '容器内的进程所具备的特定权限。',
                                          'type' => 'array',
                                          'items' => 
                                          array (
                                            'description' => '容器内的进程所具备的特定权限。',
                                            'type' => 'string',
                                            'example' => 'NET_ADMIN',
                                          ),
                                        ),
                                      ),
                                    ),
                                    'ReadOnlyRootFilesystem' => 
                                    array (
                                      'description' => '是否只读根文件系统，目前仅支持True。',
                                      'type' => 'boolean',
                                      'example' => 'true',
                                    ),
                                    'RunAsUser' => 
                                    array (
                                      'description' => '用于运行容器进程入口点的UID。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '1558',
                                    ),
                                  ),
                                ),
                                'Stdin' => 
                                array (
                                  'description' => '此容器是否应在容器运行时为标准输入分配缓冲区。如果未设置，则容器中标准输入的读取值将导致EOF。默认为false。',
                                  'type' => 'boolean',
                                  'example' => 'true',
                                ),
                                'StdinOnce' => 
                                array (
                                  'description' => '当标准输入为true时，标准输入流将在多个附加会话中保持开启状态。如果StdinOnce设为true，标准输入在容器开启时被打开，在首个客户端附加到标准输入之前都为空，然后会一直保持开启状态，接收数据，直到客户端连接断开，此时标准输入被关闭，在容器重启前一直保持关闭状态。',
                                  'type' => 'boolean',
                                  'example' => 'true',
                                ),
                                'Tty' => 
                                array (
                                  'description' => '是否开启交互。默认为false。例如：当Command配置为/bin/bash时，需要配置为true。',
                                  'type' => 'boolean',
                                  'example' => 'false',
                                ),
                                'VolumeMounts' => 
                                array (
                                  'description' => '挂载的数据卷信息。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '挂载的数据卷信息。',
                                    'type' => 'object',
                                    'properties' => 
                                    array (
                                      'MountPath' => 
                                      array (
                                        'description' => '挂载目录，容器的挂载目录下的内容被Volume的内容直接覆盖。',
                                        'type' => 'string',
                                        'example' => '/usr/share/',
                                      ),
                                      'MountPropagation' => 
                                      array (
                                        'description' => '数据卷的挂载传播设置。挂载传播允许将Container挂载的卷共享到同一Pod中的其他Container，甚至可以共享到同一节点上的其他Pod。可能值：

- None：该卷不感知任何后续在此卷或其子目录上执行的挂载操作。
- HostToContainer：该卷将会感知到后续在此卷或其子目录上的挂载操作。
- Bidirectional：和HostToContainer类似，能感知挂载操作。另外，该卷将被传播回主机和使用同一卷的所有Pod的所有容器。',
                                        'type' => 'string',
                                        'example' => 'None',
                                      ),
                                      'Name' => 
                                      array (
                                        'description' => '数据卷名称。',
                                        'type' => 'string',
                                        'example' => 'test-empty',
                                      ),
                                      'ReadOnly' => 
                                      array (
                                        'description' => '是否只读。',
                                        'type' => 'boolean',
                                        'example' => 'false',
                                      ),
                                      'SubPath' => 
                                      array (
                                        'description' => '数据卷下的子目录。方便实例将同一个数据卷下的不同目录挂载到容器的不同目录。',
                                        'type' => 'string',
                                        'example' => '/usr/sub',
                                      ),
                                    ),
                                  ),
                                ),
                                'WorkingDir' => 
                                array (
                                  'description' => '工作目录。',
                                  'type' => 'string',
                                  'example' => '/usr/local/nginx',
                                ),
                              ),
                            ),
                          ),
                          'Volumes' => 
                          array (
                            'description' => '数据卷信息。',
                            'type' => 'array',
                            'items' => 
                            array (
                              'description' => '数据卷信息。',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'ConfigFileVolumeConfigFileToPaths' => 
                                array (
                                  'description' => '配置文件路径列表。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '配置文件路径列表。',
                                    'type' => 'object',
                                    'properties' => 
                                    array (
                                      'Content' => 
                                      array (
                                        'description' => '配置文件内容 (32KB)。',
                                        'type' => 'string',
                                        'example' => 'hello world',
                                      ),
                                      'Path' => 
                                      array (
                                        'description' => '相对文件路径。',
                                        'type' => 'string',
                                        'example' => '/usr/bin/',
                                      ),
                                    ),
                                  ),
                                ),
                                'DiskVolumeDiskId' => 
                                array (
                                  'description' => 'DiskVolume的ID。',
                                  'type' => 'string',
                                  'example' => 'd-xxxx',
                                ),
                                'DiskVolumeFsType' => 
                                array (
                                  'description' => '数据卷类型。',
                                  'type' => 'string',
                                  'example' => 'xfs',
                                ),
                                'EmptyDirVolumeMedium' => 
                                array (
                                  'description' => 'EmptyDir数据卷的存储媒介。默认为空，表示使用node文件系统。支持配置为以下值：

- Memory：表示使用内存。
- LocalRaid0：表示将本地盘组成RAID 0。该取值仅适用于创建本地盘实例并挂载本地盘的场景。更多信息，请参见[创建本地盘实例](~~114664~~)。',
                                  'type' => 'string',
                                  'example' => 'Memory',
                                ),
                                'EmptyDirVolumeSizeLimit' => 
                                array (
                                  'description' => 'EmptyDir数据卷的大小。取值请带上单位，建议使用Gi或Mi',
                                  'type' => 'string',
                                  'example' => '256Mi',
                                ),
                                'FlexVolumeDriver' => 
                                array (
                                  'description' => '用于FlexVolume的驱动程序名称。',
                                  'type' => 'string',
                                  'example' => 'flexvolume',
                                ),
                                'FlexVolumeFsType' => 
                                array (
                                  'description' => '挂载的文件系统类型，默认取决于FlexVolume的script。',
                                  'type' => 'string',
                                  'example' => 'ntfs',
                                ),
                                'FlexVolumeOptions' => 
                                array (
                                  'description' => 'FlexVolume对象选项列表。',
                                  'type' => 'string',
                                  'example' => '[nolock,tcp,noresvport]',
                                ),
                                'NFSVolumePath' => 
                                array (
                                  'description' => 'NFS数据卷路径。',
                                  'type' => 'string',
                                  'example' => '/eci',
                                ),
                                'NFSVolumeReadOnly' => 
                                array (
                                  'description' => '是否只读。',
                                  'type' => 'boolean',
                                  'example' => 'false',
                                ),
                                'NFSVolumeServer' => 
                                array (
                                  'description' => 'NFS服务器地址。',
                                  'type' => 'string',
                                  'example' => '0eafxxxxx-xxxxx.cn-hangzhou.nas.aliyuncs.com',
                                ),
                                'Name' => 
                                array (
                                  'description' => '数据卷名称。',
                                  'type' => 'string',
                                  'example' => 'test-empty',
                                ),
                                'Type' => 
                                array (
                                  'description' => '数据卷类型，可能值：
- EmptyDirVolume
- NFSVolume
- ConfigFileVolume
- FlexVolume',
                                  'type' => 'string',
                                  'example' => 'EmptyDirVolume',
                                ),
                              ),
                            ),
                          ),
                          'Events' => 
                          array (
                            'description' => '事件信息，上限50。',
                            'type' => 'array',
                            'items' => 
                            array (
                              'description' => '事件信息，上限50。',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'Count' => 
                                array (
                                  'description' => '事件数量。',
                                  'type' => 'integer',
                                  'format' => 'int32',
                                  'example' => '20',
                                ),
                                'FirstTimestamp' => 
                                array (
                                  'description' => '事件起始时间。',
                                  'type' => 'string',
                                  'example' => '2018-08-02T15:00:00Z',
                                ),
                                'LastTimestamp' => 
                                array (
                                  'description' => '事件结束时间。',
                                  'type' => 'string',
                                  'example' => '2018-08-02T15:00:00Z
',
                                ),
                                'Message' => 
                                array (
                                  'description' => '事件消息。',
                                  'type' => 'string',
                                  'example' => 'Started container',
                                ),
                                'Name' => 
                                array (
                                  'description' => '事件的归属对象名。',
                                  'type' => 'string',
                                  'example' => 'test-xxx',
                                ),
                                'Reason' => 
                                array (
                                  'description' => '事件名。',
                                  'type' => 'string',
                                  'example' => 'Created',
                                ),
                                'Type' => 
                                array (
                                  'description' => '事件类型。可能值：
- Normal
- Warning',
                                  'type' => 'string',
                                  'example' => 'Normal',
                                ),
                              ),
                            ),
                          ),
                          'CreationTime' => 
                          array (
                            'description' => '接到请求后的系统创建时间。UTC时间，RFC3339标准。',
                            'type' => 'string',
                            'example' => '2018-08-02T15:00:00Z',
                          ),
                          'SucceededTime' => 
                          array (
                            'description' => '容器全部成功退出后的时间。UTC时间，RFC3339标准。',
                            'type' => 'string',
                            'example' => '2019-12-11T04:33:42Z',
                          ),
                          'ExpiredTime' => 
                          array (
                            'description' => '由于账户欠费导致实例运行失败的时间。UTC时间，RFC3339标准。',
                            'type' => 'string',
                            'example' => '2018-08-02T15:00:00Z',
                          ),
                          'FailedTime' => 
                          array (
                            'description' => '实例运行失败的时间。UTC时间，RFC 3339标准。',
                            'type' => 'string',
                            'example' => '2018-08-02T15:00:00Z',
                          ),
                          'Discount' => 
                          array (
                            'description' => '折扣。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '9',
                          ),
                          'DnsConfig' => 
                          array (
                            'description' => 'DNS配置信息。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'NameServers' => 
                              array (
                                'description' => 'DNS服务器IP地址列表。',
                                'type' => 'array',
                                'items' => 
                                array (
                                  'description' => 'IP地址。',
                                  'type' => 'string',
                                  'example' => '[10.2.*.*]',
                                ),
                              ),
                              'Options' => 
                              array (
                                'description' => '对象选项列表，每个对象由Name和Value（可选）构成。',
                                'type' => 'array',
                                'items' => 
                                array (
                                  'description' => '对象选项列表，每个对象由Name和Value（可选）构成。',
                                  'type' => 'object',
                                  'properties' => 
                                  array (
                                    'Name' => 
                                    array (
                                      'description' => '对象变量名。',
                                      'type' => 'string',
                                      'example' => 'name',
                                    ),
                                    'Value' => 
                                    array (
                                      'description' => '对象变量值。',
                                      'type' => 'string',
                                      'example' => 'value',
                                    ),
                                  ),
                                ),
                              ),
                              'Searches' => 
                              array (
                                'description' => 'DNS搜索域列表。',
                                'type' => 'array',
                                'items' => 
                                array (
                                  'description' => 'DNS搜索域。',
                                  'type' => 'string',
                                  'example' => 'svc.local.kubenetes',
                                ),
                              ),
                            ),
                          ),
                          'EciSecurityContext' => 
                          array (
                            'description' => '容器组运行的安全上下文。',
                            'type' => 'object',
                            'properties' => 
                            array (
                              'Sysctls' => 
                              array (
                                'description' => 'sysctl参数。',
                                'type' => 'array',
                                'items' => 
                                array (
                                  'description' => 'sysctl参数。',
                                  'type' => 'object',
                                  'properties' => 
                                  array (
                                    'Name' => 
                                    array (
                                      'description' => 'sysctl参数名。',
                                      'type' => 'string',
                                      'example' => 'kernel.msgmax',
                                    ),
                                    'Value' => 
                                    array (
                                      'description' => 'sysctl参数值。',
                                      'type' => 'string',
                                      'example' => '65536',
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ),
                          'EniInstanceId' => 
                          array (
                            'description' => '弹性网卡ID。',
                            'type' => 'string',
                            'example' => 'eni-bp14rzqi6fd8satm****',
                          ),
                          'EphemeralStorage' => 
                          array (
                            'description' => '临时存储空间大小。单位为：GiB。',
                            'type' => 'integer',
                            'format' => 'int64',
                            'example' => '20',
                          ),
                          'HostAliases' => 
                          array (
                            'description' => '自定义实例内一个容器的Hostname映射。',
                            'type' => 'array',
                            'items' => 
                            array (
                              'description' => '自定义实例内一个容器的Hostname映射。',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'Hostnames' => 
                                array (
                                  'description' => '主机信息。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '主机名。',
                                    'type' => 'string',
                                    'example' => '[\'hehe.com\', \'haha.com\']',
                                  ),
                                ),
                                'Ip' => 
                                array (
                                  'description' => 'IP地址。',
                                  'type' => 'string',
                                  'example' => '192.0.XX.XX',
                                ),
                              ),
                            ),
                          ),
                          'InitContainers' => 
                          array (
                            'description' => 'Init容器列表。',
                            'type' => 'array',
                            'items' => 
                            array (
                              'description' => 'Init容器列表。',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'Args' => 
                                array (
                                  'description' => '启动参数。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '启动参数。',
                                    'type' => 'string',
                                    'example' => '[\'hello world\']',
                                  ),
                                ),
                                'Command' => 
                                array (
                                  'description' => '启动命令。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '启动命令。',
                                    'type' => 'string',
                                    'example' => '[/bin/sh echo]',
                                  ),
                                ),
                                'Cpu' => 
                                array (
                                  'description' => 'vCPU大小。',
                                  'type' => 'integer',
                                  'format' => 'int64',
                                  'example' => '1.0',
                                ),
                                'CurrentState' => 
                                array (
                                  'description' => '当前状态。',
                                  'type' => 'object',
                                  'properties' => 
                                  array (
                                    'DetailStatus' => 
                                    array (
                                      'description' => '状态详情。',
                                      'type' => 'string',
                                      'example' => 'working',
                                    ),
                                    'ExitCode' => 
                                    array (
                                      'description' => '容器退出码。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '0',
                                    ),
                                    'FinishTime' => 
                                    array (
                                      'description' => '容器运行结束时间。',
                                      'type' => 'string',
                                      'example' => '2018-08-02T15:00:00Z',
                                    ),
                                    'Message' => 
                                    array (
                                      'description' => '事件消息。',
                                      'type' => 'string',
                                      'example' => 'Created container',
                                    ),
                                    'Reason' => 
                                    array (
                                      'description' => '容器状态Reason。',
                                      'type' => 'string',
                                      'example' => 'Started',
                                    ),
                                    'Signal' => 
                                    array (
                                      'description' => '容器状态信号。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '1',
                                    ),
                                    'StartTime' => 
                                    array (
                                      'description' => '容器运行开始时间。',
                                      'type' => 'string',
                                      'example' => '2018-08-02T15:00:00Z',
                                    ),
                                    'State' => 
                                    array (
                                      'description' => '容器状态。可能值：
- Waiting
- Running
- Terminated',
                                      'type' => 'string',
                                      'example' => 'Running',
                                    ),
                                  ),
                                ),
                                'EnvironmentVars' => 
                                array (
                                  'description' => '环境变量。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '环境变量。',
                                    'type' => 'object',
                                    'properties' => 
                                    array (
                                      'Key' => 
                                      array (
                                        'description' => '环境变量名。',
                                        'type' => 'string',
                                        'example' => 'PATH',
                                      ),
                                      'Value' => 
                                      array (
                                        'description' => '环境变量值。',
                                        'type' => 'string',
                                        'example' => '/usr/local/bin',
                                      ),
                                      'ValueFrom' => 
                                      array (
                                        'description' => '环境变量值的来源。 如果值不为空，则无法使用。',
                                        'type' => 'object',
                                        'properties' => 
                                        array (
                                          'FieldRef' => 
                                          array (
                                            'description' => '指定的字段。',
                                            'type' => 'object',
                                            'properties' => 
                                            array (
                                              'FieldPath' => 
                                              array (
                                                'description' => '指定的版本中选择字段的路径，目前只支持 `status.podIP`。',
                                                'type' => 'string',
                                                'example' => 'status.podIP',
                                              ),
                                            ),
                                          ),
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                                'Gpu' => 
                                array (
                                  'description' => 'GPU个数。',
                                  'type' => 'integer',
                                  'format' => 'int64',
                                  'example' => '1',
                                ),
                                'Image' => 
                                array (
                                  'description' => '镜像。',
                                  'type' => 'string',
                                  'example' => 'nginx',
                                ),
                                'ImagePullPolicy' => 
                                array (
                                  'description' => '镜像拉取策略。',
                                  'type' => 'string',
                                  'example' => 'Always',
                                ),
                                'Memory' => 
                                array (
                                  'description' => 'Init容器内存大小。单位为GiB。',
                                  'type' => 'integer',
                                  'format' => 'int64',
                                  'example' => '2.0',
                                ),
                                'Name' => 
                                array (
                                  'description' => '容器名称。',
                                  'type' => 'string',
                                  'example' => 'Init-xxx',
                                ),
                                'Ports' => 
                                array (
                                  'description' => '暴露端口和协议。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => '暴露端口和协议。',
                                    'type' => 'object',
                                    'properties' => 
                                    array (
                                      'Port' => 
                                      array (
                                        'description' => '端口号。可能值：1~65535。',
                                        'type' => 'integer',
                                        'format' => 'int64',
                                        'example' => '8888',
                                      ),
                                      'Protocol' => 
                                      array (
                                        'description' => '协议类型。',
                                        'type' => 'string',
                                        'example' => 'TCP',
                                      ),
                                    ),
                                  ),
                                ),
                                'PreviousState' => 
                                array (
                                  'description' => '上一次状态。',
                                  'type' => 'object',
                                  'properties' => 
                                  array (
                                    'DetailStatus' => 
                                    array (
                                      'description' => '状态详情。',
                                      'type' => 'string',
                                      'example' => 'working',
                                    ),
                                    'ExitCode' => 
                                    array (
                                      'description' => '容器运行退出码。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '0',
                                    ),
                                    'FinishTime' => 
                                    array (
                                      'description' => '容器运行结束时间。',
                                      'type' => 'string',
                                      'example' => '2019-12-24T05:35:44Z',
                                    ),
                                    'Message' => 
                                    array (
                                      'description' => '容器状态信息。',
                                      'type' => 'string',
                                      'example' => 'Started container',
                                    ),
                                    'Reason' => 
                                    array (
                                      'description' => '容器状态Reason。',
                                      'type' => 'string',
                                      'example' => 'completed',
                                    ),
                                    'Signal' => 
                                    array (
                                      'description' => '容器状态信号。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '1',
                                    ),
                                    'StartTime' => 
                                    array (
                                      'description' => '容器运行开始时间。',
                                      'type' => 'string',
                                      'example' => '2019-12-24T05:35:44Z',
                                    ),
                                    'State' => 
                                    array (
                                      'description' => '容器状态，枚举值：Waiting，Running，Terminated。',
                                      'type' => 'string',
                                      'example' => 'Terminated',
                                    ),
                                  ),
                                ),
                                'Ready' => 
                                array (
                                  'description' => '指定容器是否已通过其就绪探针。',
                                  'type' => 'boolean',
                                  'example' => 'true',
                                ),
                                'RestartCount' => 
                                array (
                                  'description' => '重启次数。',
                                  'type' => 'integer',
                                  'format' => 'int64',
                                  'example' => '5',
                                ),
                                'SecurityContext' => 
                                array (
                                  'description' => '容器运行的安全上下文。',
                                  'type' => 'object',
                                  'properties' => 
                                  array (
                                    'Capability' => 
                                    array (
                                      'description' => '容器内的进程所具备的特定权限。',
                                      'type' => 'object',
                                      'properties' => 
                                      array (
                                        'Adds' => 
                                        array (
                                          'description' => '容器内的进程所具备的特定权限。',
                                          'type' => 'array',
                                          'items' => 
                                          array (
                                            'description' => '容器内的进程所具备的特定权限。',
                                            'type' => 'string',
                                            'example' => 'NET_ADMIN',
                                          ),
                                        ),
                                      ),
                                    ),
                                    'ReadOnlyRootFilesystem' => 
                                    array (
                                      'description' => '是否只读根文件系统，目前仅支持True。',
                                      'type' => 'boolean',
                                      'example' => 'true',
                                    ),
                                    'RunAsUser' => 
                                    array (
                                      'description' => '用于运行容器进程入口点的UID。',
                                      'type' => 'integer',
                                      'format' => 'int64',
                                      'example' => '1557',
                                    ),
                                  ),
                                ),
                                'VolumeMounts' => 
                                array (
                                  'description' => 'Init容器挂载的数据卷信息。',
                                  'type' => 'array',
                                  'items' => 
                                  array (
                                    'description' => 'Init容器挂载的数据卷信息。',
                                    'type' => 'object',
                                    'properties' => 
                                    array (
                                      'MountPath' => 
                                      array (
                                        'description' => '挂载目录，容器的挂载目录下的内容被Volume的内容直接覆盖。',
                                        'type' => 'string',
                                        'example' => '/usr/share/',
                                      ),
                                      'MountPropagation' => 
                                      array (
                                        'description' => '数据卷的挂载传播设置。挂载传播允许将Container挂载的卷共享到同一Pod中的其他Container，甚至可以共享到同一节点上的其他Pod。可能值：

- None：该卷不感知任何后续在此卷或其子目录上执行的挂载操作。
- HostToCotainer：该卷将会感知到后续在此卷或其子目录上的挂载操作。
- Bidirectional：和HostToCotainer类似，能感知挂载操作。另外，该卷将被传播回主机和使用同一卷的所有Pod的所有容器。

默认值：None。',
                                        'type' => 'string',
                                        'example' => 'None',
                                      ),
                                      'Name' => 
                                      array (
                                        'description' => '数据卷名称，同 Volume 中的 Name。',
                                        'type' => 'string',
                                        'example' => 'test-empty',
                                      ),
                                      'ReadOnly' => 
                                      array (
                                        'description' => '默认值为False。',
                                        'type' => 'boolean',
                                        'example' => 'false',
                                      ),
                                    ),
                                  ),
                                ),
                                'WorkingDir' => 
                                array (
                                  'description' => '工作目录。',
                                  'type' => 'string',
                                  'example' => '/usr/test',
                                ),
                              ),
                            ),
                          ),
                          'InternetIp' => 
                          array (
                            'description' => '公网IP。',
                            'type' => 'string',
                            'example' => '192.0.XX.XX',
                          ),
                          'IntranetIp' => 
                          array (
                            'description' => '内网IP。',
                            'type' => 'string',
                            'example' => '172.16.XX.XX',
                          ),
                          'Ipv6Address' => 
                          array (
                            'description' => 'IPv6地址。',
                            'type' => 'string',
                            'example' => '2001:XXXX:4:4:4:4:4:4',
                          ),
                          'RamRoleName' => 
                          array (
                            'description' => '实例RAM角色名称，ECI与ECS共用实例RAM角色，具体操作，请参见[通过API使用实例RAM角色](~~61178~~)。',
                            'type' => 'string',
                            'example' => 'ram:PassRole',
                          ),
                          'RegionId' => 
                          array (
                            'description' => '实例所属的地域ID。',
                            'type' => 'string',
                            'example' => 'cn-hangzhou',
                          ),
                          'ResourceGroupId' => 
                          array (
                            'description' => '实例所属的资源组ID。如果创建实例时没有指定资源组，实例将自动加入账号下的默认资源组。',
                            'type' => 'string',
                            'example' => 'rg-aekzh43v*****',
                          ),
                          'RestartPolicy' => 
                          array (
                            'description' => '实例重启策略。取值范围：

- Always：总是重启
- Never：从不重启
- OnFailure：失败时重启',
                            'type' => 'string',
                            'example' => 'Never',
                          ),
                          'SecurityGroupId' => 
                          array (
                            'description' => '安全组ID。',
                            'type' => 'string',
                            'example' => 'sg-bp12ujq5zpxuyjfo3o8r',
                          ),
                          'Tags' => 
                          array (
                            'description' => '实例标签信息。',
                            'type' => 'array',
                            'items' => 
                            array (
                              'description' => '实例标签信息。',
                              'type' => 'object',
                              'properties' => 
                              array (
                                'Key' => 
                                array (
                                  'description' => '标签键。',
                                  'type' => 'string',
                                  'example' => 'name',
                                ),
                                'Value' => 
                                array (
                                  'description' => '标签值。',
                                  'type' => 'string',
                                  'example' => 'test-xh',
                                ),
                              ),
                            ),
                          ),
                          'TenantEniInstanceId' => 
                          array (
                            'description' => '该参数未开放使用。',
                            'type' => 'string',
                            'example' => 'i-xxx',
                          ),
                          'TenantEniIp' => 
                          array (
                            'description' => '该参数未开放使用。',
                            'type' => 'string',
                            'example' => '10.10.XX.XX',
                          ),
                          'TenantSecurityGroupId' => 
                          array (
                            'description' => '该参数未开放使用。',
                            'type' => 'string',
                            'example' => 'sg-xxx',
                          ),
                          'TenantVSwitchId' => 
                          array (
                            'description' => '该参数未开放使用。',
                            'type' => 'string',
                            'example' => 'vsw-xxx',
                          ),
                          'VSwitchId' => 
                          array (
                            'description' => '虚拟交换机ID。',
                            'type' => 'string',
                            'example' => 'vsw-bp1vzjjflab6wvjox****',
                          ),
                          'VpcId' => 
                          array (
                            'description' => '实例所属的VPC ID。',
                            'type' => 'string',
                            'example' => 'vpc-1vzjjflab6wvjox****',
                          ),
                          'ZoneId' => 
                          array (
                            'description' => '实例所属的可用区。',
                            'type' => 'string',
                            'example' => 'cn-hangzhou-h',
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          4 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"TotalCount\\": 1,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"JobInfos\\": [\\n    {\\n      \\"JobId\\": \\"5\\",\\n      \\"JobName\\": \\"testjob\\",\\n      \\"State\\": \\"Running\\",\\n      \\"Priority\\": 9,\\n      \\"Queue\\": \\"comp\\",\\n      \\"User\\": \\"testuser\\",\\n      \\"SubmitTime\\": 1647423718,\\n      \\"StartTime\\": 1647427667,\\n      \\"EndTime\\": 1662016121,\\n      \\"LastModifyTime\\": 1663831441000,\\n      \\"IsArrayJob\\": false,\\n      \\"ArrayProperties\\": {\\n        \\"IndexStart\\": 1,\\n        \\"IndexEnd\\": 5,\\n        \\"IndexStep\\": 2\\n      },\\n      \\"ContainerGroups\\": [\\n        {\\n          \\"ContainerGroupId\\": \\"eci-bp1jrgfqqy54kg5hc****\\",\\n          \\"ContainerGroupName\\": \\"test\\",\\n          \\"Status\\": \\"Running\\",\\n          \\"InstanceType\\": \\"ecs.g5.large\\",\\n          \\"SpotStrategy\\": \\"NoSpot\\",\\n          \\"SpotPriceLimit\\": 0.025,\\n          \\"Cpu\\": 2,\\n          \\"Memory\\": 4,\\n          \\"Containers\\": [\\n            {\\n              \\"Args\\": [\\n                \\"hello.py\\"\\n              ],\\n              \\"Commands\\": [\\n                \\"/usr/bin/python\\"\\n              ],\\n              \\"Cpu\\": 2,\\n              \\"CurrentState\\": {\\n                \\"DetailStatus\\": \\"working\\",\\n                \\"ExitCode\\": 0,\\n                \\"FinishTime\\": \\"2018-08-02T15:00:00Z\\",\\n                \\"Message\\": \\"Back-off 5m0s restarting failed container=test pod=test_eci-xxx(xxx)\\",\\n                \\"Reason\\": \\"Started\\",\\n                \\"Signal\\": 1,\\n                \\"StartTime\\": \\"2019-12-19T12:05:02Z\\\\n\\",\\n                \\"State\\": \\"Terminated\\\\n\\"\\n              },\\n              \\"EnvironmentVars\\": [\\n                {\\n                  \\"Key\\": \\"PATH\\\\n\\",\\n                  \\"Value\\": \\"/usr/bin/\\\\n\\",\\n                  \\"ValueFrom\\": {\\n                    \\"FieldRef\\": {\\n                      \\"FieldPath\\": \\"status.podIP\\"\\n                    }\\n                  }\\n                }\\n              ],\\n              \\"Gpu\\": 1,\\n              \\"Image\\": \\"HPL\\",\\n              \\"ImagePullPolicy\\": \\"Always\\",\\n              \\"LivenessProbe\\": {\\n                \\"Execs\\": [\\n                  \\"[\\\\\\"/bin/sh\\\\\\", \\\\\\"-c\\\\\\", \\\\\\"echo Hello world > /usr/share/message\\\\\\"]\\\\n\\"\\n                ],\\n                \\"FailureThreshold\\": 3,\\n                \\"HttpGet\\": {\\n                  \\"Path\\": \\"/usr/nginx/\\\\n\\",\\n                  \\"Port\\": 80,\\n                  \\"Scheme\\": \\"HTTP\\"\\n                },\\n                \\"InitialDelaySeconds\\": 10,\\n                \\"PeriodSeconds\\": 5,\\n                \\"SuccessThreshold\\": 1,\\n                \\"TcpSocket\\": {\\n                  \\"Host\\": \\"1.2.3.4\\\\n\\",\\n                  \\"Port\\": 80\\n                },\\n                \\"TimeoutSeconds\\": 10\\n              },\\n              \\"Memory\\": 4,\\n              \\"Name\\": \\"HPL\\",\\n              \\"Ports\\": [\\n                {\\n                  \\"Port\\": 8080,\\n                  \\"Protocol\\": \\"TCP\\"\\n                }\\n              ],\\n              \\"PreviousState\\": {\\n                \\"DetailStatus\\": \\"working\\",\\n                \\"ExitCode\\": 0,\\n                \\"FinishTime\\": \\"2018-08-02T15:00:00Z\\",\\n                \\"Message\\": \\"Back-off 5m0s restarting failed container=test pod=test_eci-xxx(xxx)\\",\\n                \\"Reason\\": \\"Completed\\",\\n                \\"Signal\\": 1,\\n                \\"StartTime\\": \\"2018-08-02T15:00:00Z\\",\\n                \\"State\\": \\"Terminated\\"\\n              },\\n              \\"ReadinessProbe\\": {\\n                \\"Execs\\": [\\n                  \\"[\\\\n      \\\\\\"/bin/sh\\\\\\",\\\\n      \\\\\\"-c\\\\\\",\\\\n      \\\\\\"echo Hello world > /usr/share/message\\\\\\"\\\\n]\\"\\n                ],\\n                \\"FailureThreshold\\": 3,\\n                \\"HttpGet\\": {\\n                  \\"Path\\": \\"/usr/local\\",\\n                  \\"Port\\": 8080,\\n                  \\"Scheme\\": \\"HTTP\\"\\n                },\\n                \\"InitialDelaySeconds\\": 10,\\n                \\"PeriodSeconds\\": 5,\\n                \\"SuccessThreshold\\": 1,\\n                \\"TcpSocket\\": {\\n                  \\"Host\\": \\"1.2.3.4\\",\\n                  \\"Port\\": 8888\\n                },\\n                \\"TimeoutSeconds\\": 1\\n              },\\n              \\"Ready\\": true,\\n              \\"RestartCount\\": 5,\\n              \\"SecurityContext\\": {\\n                \\"Capability\\": {\\n                  \\"Adds\\": [\\n                    \\"NET_ADMIN\\"\\n                  ]\\n                },\\n                \\"ReadOnlyRootFilesystem\\": true,\\n                \\"RunAsUser\\": 1558\\n              },\\n              \\"Stdin\\": true,\\n              \\"StdinOnce\\": true,\\n              \\"Tty\\": false,\\n              \\"VolumeMounts\\": [\\n                {\\n                  \\"MountPath\\": \\"/usr/share/\\",\\n                  \\"MountPropagation\\": \\"None\\",\\n                  \\"Name\\": \\"test-empty\\",\\n                  \\"ReadOnly\\": false,\\n                  \\"SubPath\\": \\"/usr/sub\\"\\n                }\\n              ],\\n              \\"WorkingDir\\": \\"/usr/local/nginx\\"\\n            }\\n          ],\\n          \\"Volumes\\": [\\n            {\\n              \\"ConfigFileVolumeConfigFileToPaths\\": [\\n                {\\n                  \\"Content\\": \\"hello world\\",\\n                  \\"Path\\": \\"/usr/bin/\\"\\n                }\\n              ],\\n              \\"DiskVolumeDiskId\\": \\"d-xxxx\\",\\n              \\"DiskVolumeFsType\\": \\"xfs\\",\\n              \\"EmptyDirVolumeMedium\\": \\"Memory\\",\\n              \\"EmptyDirVolumeSizeLimit\\": \\"256Mi\\",\\n              \\"FlexVolumeDriver\\": \\"flexvolume\\",\\n              \\"FlexVolumeFsType\\": \\"ntfs\\",\\n              \\"FlexVolumeOptions\\": \\"[nolock,tcp,noresvport]\\",\\n              \\"NFSVolumePath\\": \\"/eci\\",\\n              \\"NFSVolumeReadOnly\\": false,\\n              \\"NFSVolumeServer\\": \\"0eafxxxxx-xxxxx.cn-hangzhou.nas.aliyuncs.com\\",\\n              \\"Name\\": \\"test-empty\\",\\n              \\"Type\\": \\"EmptyDirVolume\\"\\n            }\\n          ],\\n          \\"Events\\": [\\n            {\\n              \\"Count\\": 20,\\n              \\"FirstTimestamp\\": \\"2018-08-02T15:00:00Z\\",\\n              \\"LastTimestamp\\": \\"2018-08-02T15:00:00Z\\\\n\\",\\n              \\"Message\\": \\"Started container\\",\\n              \\"Name\\": \\"test-xxx\\",\\n              \\"Reason\\": \\"Created\\",\\n              \\"Type\\": \\"Normal\\"\\n            }\\n          ],\\n          \\"CreationTime\\": \\"2018-08-02T15:00:00Z\\",\\n          \\"SucceededTime\\": \\"2019-12-11T04:33:42Z\\",\\n          \\"ExpiredTime\\": \\"2018-08-02T15:00:00Z\\",\\n          \\"FailedTime\\": \\"2018-08-02T15:00:00Z\\",\\n          \\"Discount\\": 9,\\n          \\"DnsConfig\\": {\\n            \\"NameServers\\": [\\n              \\"[10.2.*.*]\\"\\n            ],\\n            \\"Options\\": [\\n              {\\n                \\"Name\\": \\"name\\",\\n                \\"Value\\": \\"value\\"\\n              }\\n            ],\\n            \\"Searches\\": [\\n              \\"svc.local.kubenetes\\"\\n            ]\\n          },\\n          \\"EciSecurityContext\\": {\\n            \\"Sysctls\\": [\\n              {\\n                \\"Name\\": \\"kernel.msgmax\\",\\n                \\"Value\\": \\"65536\\"\\n              }\\n            ]\\n          },\\n          \\"EniInstanceId\\": \\"eni-bp14rzqi6fd8satm****\\",\\n          \\"EphemeralStorage\\": 20,\\n          \\"HostAliases\\": [\\n            {\\n              \\"Hostnames\\": [\\n                \\"[\'hehe.com\', \'haha.com\']\\"\\n              ],\\n              \\"Ip\\": \\"192.0.XX.XX\\"\\n            }\\n          ],\\n          \\"InitContainers\\": [\\n            {\\n              \\"Args\\": [\\n                \\"[\'hello world\']\\"\\n              ],\\n              \\"Command\\": [\\n                \\"[/bin/sh echo]\\"\\n              ],\\n              \\"Cpu\\": 1,\\n              \\"CurrentState\\": {\\n                \\"DetailStatus\\": \\"working\\",\\n                \\"ExitCode\\": 0,\\n                \\"FinishTime\\": \\"2018-08-02T15:00:00Z\\",\\n                \\"Message\\": \\"Created container\\",\\n                \\"Reason\\": \\"Started\\",\\n                \\"Signal\\": 1,\\n                \\"StartTime\\": \\"2018-08-02T15:00:00Z\\",\\n                \\"State\\": \\"Running\\"\\n              },\\n              \\"EnvironmentVars\\": [\\n                {\\n                  \\"Key\\": \\"PATH\\",\\n                  \\"Value\\": \\"/usr/local/bin\\",\\n                  \\"ValueFrom\\": {\\n                    \\"FieldRef\\": {\\n                      \\"FieldPath\\": \\"status.podIP\\"\\n                    }\\n                  }\\n                }\\n              ],\\n              \\"Gpu\\": 1,\\n              \\"Image\\": \\"nginx\\",\\n              \\"ImagePullPolicy\\": \\"Always\\",\\n              \\"Memory\\": 2,\\n              \\"Name\\": \\"Init-xxx\\",\\n              \\"Ports\\": [\\n                {\\n                  \\"Port\\": 8888,\\n                  \\"Protocol\\": \\"TCP\\"\\n                }\\n              ],\\n              \\"PreviousState\\": {\\n                \\"DetailStatus\\": \\"working\\",\\n                \\"ExitCode\\": 0,\\n                \\"FinishTime\\": \\"2019-12-24T05:35:44Z\\",\\n                \\"Message\\": \\"Started container\\",\\n                \\"Reason\\": \\"completed\\",\\n                \\"Signal\\": 1,\\n                \\"StartTime\\": \\"2019-12-24T05:35:44Z\\",\\n                \\"State\\": \\"Terminated\\"\\n              },\\n              \\"Ready\\": true,\\n              \\"RestartCount\\": 5,\\n              \\"SecurityContext\\": {\\n                \\"Capability\\": {\\n                  \\"Adds\\": [\\n                    \\"NET_ADMIN\\"\\n                  ]\\n                },\\n                \\"ReadOnlyRootFilesystem\\": true,\\n                \\"RunAsUser\\": 1557\\n              },\\n              \\"VolumeMounts\\": [\\n                {\\n                  \\"MountPath\\": \\"/usr/share/\\",\\n                  \\"MountPropagation\\": \\"None\\",\\n                  \\"Name\\": \\"test-empty\\",\\n                  \\"ReadOnly\\": false\\n                }\\n              ],\\n              \\"WorkingDir\\": \\"/usr/test\\"\\n            }\\n          ],\\n          \\"InternetIp\\": \\"192.0.XX.XX\\",\\n          \\"IntranetIp\\": \\"172.16.XX.XX\\",\\n          \\"Ipv6Address\\": \\"2001:XXXX:4:4:4:4:4:4\\",\\n          \\"RamRoleName\\": \\"ram:PassRole\\",\\n          \\"RegionId\\": \\"cn-hangzhou\\",\\n          \\"ResourceGroupId\\": \\"rg-aekzh43v*****\\",\\n          \\"RestartPolicy\\": \\"Never\\",\\n          \\"SecurityGroupId\\": \\"sg-bp12ujq5zpxuyjfo3o8r\\",\\n          \\"Tags\\": [\\n            {\\n              \\"Key\\": \\"name\\",\\n              \\"Value\\": \\"test-xh\\"\\n            }\\n          ],\\n          \\"TenantEniInstanceId\\": \\"i-xxx\\",\\n          \\"TenantEniIp\\": \\"10.10.XX.XX\\",\\n          \\"TenantSecurityGroupId\\": \\"sg-xxx\\",\\n          \\"TenantVSwitchId\\": \\"vsw-xxx\\",\\n          \\"VSwitchId\\": \\"vsw-bp1vzjjflab6wvjox****\\",\\n          \\"VpcId\\": \\"vpc-1vzjjflab6wvjox****\\",\\n          \\"ZoneId\\": \\"cn-hangzhou-h\\"\\n        }\\n      ]\\n    }\\n  ]\\n}","type":"json"}]',
      'title' => '查询Serverless作业详细信息',
    ),
    'StopServerlessJobs' => 
    array (
      'summary' => '按照作业ID或子任务ID（数组作业）停止集群中一个或多个Serverless作业。当传入数组作业的作业ID时，会停止该作业下的所有子任务。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'JobIds',
          'in' => 'query',
          'style' => 'flat',
          'schema' => 
          array (
            'description' => 'Serverless作业ID或子任务ID（数组作业）列表。
> - 当传入数组作业的作业ID时，会停止该数组作业下的所有子任务。
> - 当传入数组作业下的子任务ID时，仅停止该子任务。',
            'type' => 'array',
            'items' => 
            array (
              'description' => 'Serverless作业ID或子任务ID（数组作业）。',
              'type' => 'string',
              'required' => false,
              'example' => '5',
            ),
            'required' => true,
            'maxItems' => 100,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ManagerNotFound',
            'errorMessage' => 'The manager nodes do not exist or their status is abnormal.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          4 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'staticInfo' => 
      array (
        'returnType' => 'synchronous',
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\"\\n}","type":"json"}]',
      'title' => '批量停止Serverless作业',
    ),
    'CreateJobTemplate' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'CommandLine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业命令。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => './LammpsTest/lammps.pbs',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业模板名称。长度为2~64字符，必须以英文字母开头，可以包含数字、短划线（-）、下划线（_）。
',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'jobtemplate1',
          ),
        ),
        2 => 
        array (
          'name' => 'RunasUser',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业的用户名。

您可以通过调用[ListUsers](~~188572~~)获取用户名。',
            'type' => 'string',
            'required' => false,
            'example' => 'user1',
          ),
        ),
        3 => 
        array (
          'name' => 'Priority',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业优先级，取值范围：0~9，取值越大，优先级越高。

默认值：0',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
          ),
        ),
        4 => 
        array (
          'name' => 'PackagePath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业路径。',
            'type' => 'string',
            'required' => false,
            'example' => './jobfolder',
          ),
        ),
        5 => 
        array (
          'name' => 'StdoutRedirectPath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '标准输出路径。',
            'type' => 'string',
            'required' => false,
            'example' => './LammpsTest',
          ),
        ),
        6 => 
        array (
          'name' => 'StderrRedirectPath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '错误输出路径。',
            'type' => 'string',
            'required' => false,
            'example' => './LammpsTest',
          ),
        ),
        7 => 
        array (
          'name' => 'ReRunable',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业执行失败后，是否支持自动重试。取值范围：
- true：支持
- false：不支持',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        8 => 
        array (
          'name' => 'ArrayRequest',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业队列。

格式X-Y:Z， 最小值X是第一个索引，最大值Y是最后一个索引，Z表示步长，例如2-7:2，表示作业队列包含编号为2、4、6的3个子作业。',
            'type' => 'string',
            'required' => false,
            'example' => '1-10:2',
          ),
        ),
        9 => 
        array (
          'name' => 'Variables',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业的环境变量，可以在作业执行文件中访问环境变量。',
            'type' => 'string',
            'required' => false,
            'example' => '[{Name:,Value:},{Name:,Value:}]',
          ),
        ),
        10 => 
        array (
          'name' => 'Queue',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业的队列名称。

您可以通过调用[ListQueues](~~92176~~)获取队列名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'workq',
          ),
        ),
        11 => 
        array (
          'name' => 'ClockTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业最大运行时间，支持三种格式：
- hh:mm:ss
- mm:ss
- ss

推荐使用第一种格式。若最大运行时间为12小时，示例：12:00:00。',
            'type' => 'string',
            'required' => false,
            'example' => '12:00:00',
          ),
        ),
        12 => 
        array (
          'name' => 'Node',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '提交作业所需计算节点数。取值范围：1~500

>若该参数为空，则参数Task、Thread、Mem、Gpu不生效。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '5000',
            'minimum' => '1',
            'example' => '2',
          ),
        ),
        13 => 
        array (
          'name' => 'Task',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个计算节点所需任务数。取值范围：1~1000',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '20000',
            'minimum' => '1',
            'example' => '2',
          ),
        ),
        14 => 
        array (
          'name' => 'Thread',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个任务所需线程数。取值范围：1~1000',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '20000',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        15 => 
        array (
          'name' => 'Mem',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个计算节点最大使用内存数，支持GB、MB、KB，单位不区分大小写。',
            'type' => 'string',
            'required' => false,
            'example' => '1GB',
          ),
        ),
        16 => 
        array (
          'name' => 'Gpu',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个计算节点使用GPU的数量，取值范围：1~8。

仅支持使用PBS调度器的集群，且集群内计算节点含GPU时该参数生效。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '20000',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        17 => 
        array (
          'name' => 'InputFileUrl',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '已上传到OSS上的作业文件链接。',
            'type' => 'string',
            'required' => false,
            'example' => 'https://test.oss-cn-beijing.aliyuncs.com/test.py',
          ),
        ),
        18 => 
        array (
          'name' => 'WithUnzipCmd',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否解压下载后的作业文件。取值范围：

- true：是

- false：否',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        19 => 
        array (
          'name' => 'UnzipCmd',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '解压命令，当WithUnzipCmd取值为true时，该参数生效。取值范围：

- tar xzf：解开gzip格式压缩包

- tar xf：解开tar格式压缩包

- unzip：解开zip格式压缩包',
            'type' => 'string',
            'required' => false,
            'example' => 'tar xzf',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TemplateId' => 
              array (
                'description' => '作业模板ID。',
                'type' => 'string',
                'example' => 'ehpc-job-tmpl-6RxO5y****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          2 => 
          array (
            'errorCode' => 'TemplateNameExist',
            'errorMessage' => 'The template name already exists.',
          ),
          3 => 
          array (
            'errorCode' => 'TooMuchTemplates',
            'errorMessage' => 'The number of templates exceeds the quota.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TemplateId\\": \\"ehpc-job-tmpl-6RxO5y****\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateJobTemplateResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n    <TemplateId>ehpc-job-tmpl-6RxO5y****</TemplateId>\\r\\n</CreateJobTemplateResponse>","errorExample":""}]',
      'title' => '创建作业模板',
      'summary' => '调用CreateJobTemplate创建作业模板。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListJobTemplates' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业模板名称。

您可以通过调用[ListJobTemplates](~~87248~~)获取模板名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'jobtemplateName',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '分页查询时设置的每页行数。最大值：50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Templates' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'JobTemplates' => 
                  array (
                    'description' => '作业模板信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Task' => 
                        array (
                          'description' => '单个计算节点所需任务数。可能值：1~1000',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '2',
                        ),
                        'Variables' => 
                        array (
                          'description' => '作业的环境变量。',
                          'type' => 'string',
                          'example' => '[{Name:,Value:},{Name:,Value:}]',
                        ),
                        'CommandLine' => 
                        array (
                          'description' => '执行作业命令。',
                          'type' => 'string',
                          'example' => './LammpsTest/lammps.pbs',
                        ),
                        'Queue' => 
                        array (
                          'description' => '作业队列。',
                          'type' => 'string',
                          'example' => 'workq',
                        ),
                        'Priority' => 
                        array (
                          'description' => '作业优先级。可能值：0~9，取值越大，优先级越高。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                        'Mem' => 
                        array (
                          'description' => '单个计算节点最大使用内存数。支持GB、MB、KB，单位不区分大小写。',
                          'type' => 'string',
                          'example' => '1GB',
                        ),
                        'Thread' => 
                        array (
                          'description' => '单个任务所需线程数。可能值：1~1000',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'ArrayRequest' => 
                        array (
                          'description' => '作业队列。

格式为X-Y:Z， 最小值X是第一个索引，最大值Y是最后一个索引，Z表示步长，例如2-7:2，表示作业队列包含编号为2、4、6的3个子作业。',
                          'type' => 'string',
                          'example' => '2-7:2',
                        ),
                        'StderrRedirectPath' => 
                        array (
                          'description' => '错误输出路径。',
                          'type' => 'string',
                          'example' => './LammpsTest',
                        ),
                        'Node' => 
                        array (
                          'description' => '提交作业所需计算节点数。可能值：1~500',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '2',
                        ),
                        'StdoutRedirectPath' => 
                        array (
                          'description' => '标准输出路径。',
                          'type' => 'string',
                          'example' => './Lammps',
                        ),
                        'Gpu' => 
                        array (
                          'description' => '单个计算节点使用GPU的数量。可能值：1~8。

仅支持使用pbs调度器的集群，且集群内计算节点含GPU时该参数生效。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1',
                        ),
                        'PackagePath' => 
                        array (
                          'description' => '执行作业路径。',
                          'type' => 'string',
                          'example' => './jobfolder',
                        ),
                        'ClockTime' => 
                        array (
                          'description' => '作业最大运行时间。支持三种格式：
- hh:mm:ss
- mm:ss
- ss',
                          'type' => 'string',
                          'example' => '12:00:00',
                        ),
                        'ReRunable' => 
                        array (
                          'description' => '是否支持重新执行作业。可能值：

- true：支持

- false：不支持',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'Name' => 
                        array (
                          'description' => '作业模板名称。',
                          'type' => 'string',
                          'example' => 'job1',
                        ),
                        'Id' => 
                        array (
                          'description' => '作业模板ID。',
                          'type' => 'string',
                          'example' => 'ehpc-job-tmpl-6RxO5y****',
                        ),
                        'RunasUser' => 
                        array (
                          'description' => '执行作业的用户名称。',
                          'type' => 'string',
                          'example' => 'user1',
                        ),
                        'InputFileUrl' => 
                        array (
                          'description' => '已上传到OSS上的作业文件链接。',
                          'type' => 'string',
                          'example' => 'https://test.oss-cn-beijing.aliyuncs.com/test.py',
                        ),
                        'WithUnzipCmd' => 
                        array (
                          'description' => '是否解压下载后的作业文件。取值范围：

- true：是

- false：否',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'UnzipCmd' => 
                        array (
                          'description' => '解压命令，当WithUnzipCmd取值为true时，该参数生效。取值范围：

- tar xzf：解开gzip格式压缩包

- tar xf：解开tar格式压缩包

- unzip：解开zip格式压缩包',
                          'type' => 'string',
                          'example' => 'tar xzf',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 1,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Templates\\": {\\n    \\"JobTemplates\\": [\\n      {\\n        \\"Task\\": 2,\\n        \\"Variables\\": \\"[{Name:,Value:},{Name:,Value:}]\\",\\n        \\"CommandLine\\": \\"./LammpsTest/lammps.pbs\\",\\n        \\"Queue\\": \\"workq\\",\\n        \\"Priority\\": 0,\\n        \\"Mem\\": \\"1GB\\",\\n        \\"Thread\\": 1,\\n        \\"ArrayRequest\\": \\"2-7:2\\",\\n        \\"StderrRedirectPath\\": \\"./LammpsTest\\",\\n        \\"Node\\": 2,\\n        \\"StdoutRedirectPath\\": \\"./Lammps\\",\\n        \\"Gpu\\": 1,\\n        \\"PackagePath\\": \\"./jobfolder\\",\\n        \\"ClockTime\\": \\"12:00:00\\",\\n        \\"ReRunable\\": false,\\n        \\"Name\\": \\"job1\\",\\n        \\"Id\\": \\"ehpc-job-tmpl-6RxO5y****\\",\\n        \\"RunasUser\\": \\"user1\\",\\n        \\"InputFileUrl\\": \\"https://test.oss-cn-beijing.aliyuncs.com/test.py\\",\\n        \\"WithUnzipCmd\\": true,\\n        \\"UnzipCmd\\": \\"tar xzf\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListJobTemplatesResponse>\\n    <PageSize>1</PageSize>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <TotalCount>1</TotalCount>\\n    <Templates>\\n        <Task>2</Task>\\n        <Variables>[{Name:,Value:},{Name:,Value:}]</Variables>\\n        <CommandLine>./LammpsTest/lammps.pbs</CommandLine>\\n        <Queue>workq</Queue>\\n        <Priority>0</Priority>\\n        <Mem>1GB</Mem>\\n        <Thread>1</Thread>\\n        <ArrayRequest>2-7:2</ArrayRequest>\\n        <StderrRedirectPath>./LammpsTest</StderrRedirectPath>\\n        <Node>2</Node>\\n        <StdoutRedirectPath>./Lammps</StdoutRedirectPath>\\n        <Gpu>1</Gpu>\\n        <PackagePath>./jobfolder</PackagePath>\\n        <ClockTime>12:00:00</ClockTime>\\n        <ReRunable>false</ReRunable>\\n        <Name>job1</Name>\\n        <Id>ehpc-job-tmpl-6RxO5y****</Id>\\n        <RunasUser>user1</RunasUser>\\n        <InputFileUrl>https://test.oss-cn-beijing.aliyuncs.com//test.py</InputFileUrl>\\n        <WithUnzipCmd>true</WithUnzipCmd>\\n        <UnzipCmd>tar xzf</UnzipCmd>\\n    </Templates>\\n</ListJobTemplatesResponse>","errorExample":""}]',
      'title' => '查询作业模板列表',
      'summary' => '调用ListJobTemplates查询作业模板列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'EditJobTemplate' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'TemplateId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业模板ID。

您可以通过调用[ListJobTemplates](~~87248~~)获取待修改的模板ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-job-tmpl-6RxO5y****',
          ),
        ),
        1 => 
        array (
          'name' => 'CommandLine',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业命令。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => './LammpsTest/lammps.pbs',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业模板名称。

您可以通过调用[ListJobTemplates](~~87248~~)获取待修改的模板名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'jobTemapleteName',
          ),
        ),
        3 => 
        array (
          'name' => 'RunasUser',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业的用户名。

您可以通过调用[ListUsers](~~188572~~)获取用户名。',
            'type' => 'string',
            'required' => false,
            'example' => 'user',
          ),
        ),
        4 => 
        array (
          'name' => 'Priority',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业优先级，取值范围：0~9，取值越大，优先级越高。

默认值：0',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
          ),
        ),
        5 => 
        array (
          'name' => 'PackagePath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业路径。',
            'type' => 'string',
            'required' => false,
            'example' => './packageFolder',
          ),
        ),
        6 => 
        array (
          'name' => 'StdoutRedirectPath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '标准输出路径。',
            'type' => 'string',
            'required' => false,
            'example' => './LammpsTest',
          ),
        ),
        7 => 
        array (
          'name' => 'StderrRedirectPath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '错误输出路径。',
            'type' => 'string',
            'required' => false,
            'example' => './Lammps',
          ),
        ),
        8 => 
        array (
          'name' => 'ReRunable',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否支持重新执行作业。取值范围：
- true：支持
- false：不支持',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        9 => 
        array (
          'name' => 'ArrayRequest',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业队列。 

格式X-Y:Z， 最小值X是第一个索引，最大值Y是最后一个索引，Z表示步长，例如2-7:2，表示作业队列包含编号为2、4、6的3个子作业。',
            'type' => 'string',
            'required' => false,
            'example' => '1-10:2',
          ),
        ),
        10 => 
        array (
          'name' => 'Variables',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业的环境变量，可以在作业执行文件中访问环境变量。',
            'type' => 'string',
            'required' => false,
            'example' => '[{Name:,Value:},{Name:,Value:}]',
          ),
        ),
        11 => 
        array (
          'name' => 'Queue',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '执行作业的队列名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'workq',
          ),
        ),
        12 => 
        array (
          'name' => 'ClockTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业最大运行时间，支持三种格式：
- hh:mm:ss
- mm:ss
- ss

推荐使用第一种格式。若最大运行时间为12小时，示例：12:00:00。',
            'type' => 'string',
            'required' => false,
            'example' => '12:00:00',
          ),
        ),
        13 => 
        array (
          'name' => 'Node',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '提交作业所需计算节点数。取值范围：1~500
>若该参数为空，则参数Task、Thread、Mem、Gpu不生效。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '5000',
            'minimum' => '1',
            'example' => '2',
          ),
        ),
        14 => 
        array (
          'name' => 'Task',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个计算节点所需任务数。取值范围：1~1000',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '20000',
            'minimum' => '1',
            'example' => '2',
          ),
        ),
        15 => 
        array (
          'name' => 'Thread',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个任务所需线程数。取值范围：1~1000',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '20000',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        16 => 
        array (
          'name' => 'Mem',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个计算节点最大使用内存数，支持GB、MB、KB，单位不区分大小写。',
            'type' => 'string',
            'required' => false,
            'example' => '1GB',
          ),
        ),
        17 => 
        array (
          'name' => 'Gpu',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '单个计算节点使用GPU的数量，取值范围：1~8。

仅支持使用pbs调度器的集群，且集群内计算节点含GPU时该参数生效。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '20000',
            'minimum' => '1',
            'example' => '1',
          ),
        ),
        18 => 
        array (
          'name' => 'InputFileUrl',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '已上传到OSS上的作业文件链接。',
            'type' => 'string',
            'required' => false,
            'example' => 'https://test.oss-cn-beijing.aliyuncs.com/test.py',
          ),
        ),
        19 => 
        array (
          'name' => 'WithUnzipCmd',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否解压下载后的作业文件。取值范围：

- true：是

- false：否',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        20 => 
        array (
          'name' => 'UnzipCmd',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '解压命令，当WithUnzipCmd取值为true时，该参数生效。取值范围：

- tar xzf：解开gzip格式压缩包

- tar xf：解开tar格式压缩包

- unzip：解开zip格式压缩包',
            'type' => 'string',
            'required' => false,
            'example' => 'tar xzf',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TemplateId' => 
              array (
                'description' => '作业模板ID。',
                'type' => 'string',
                'example' => 'ehpc-job-tmpl-6RxO5y****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          2 => 
          array (
            'errorCode' => 'TemplateNameExist',
            'errorMessage' => 'The template name already exists.',
          ),
          3 => 
          array (
            'errorCode' => 'TooMuchTemplates',
            'errorMessage' => 'The number of templates exceeds the quota.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'TemplateNotExist',
            'errorMessage' => 'The template ID does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TemplateId\\": \\"ehpc-job-tmpl-6RxO5y****\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<EditJobTemplateResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n    <TemplateId>ehpc-job-tmpl-6RxO5y****</TemplateId>\\r\\n</EditJobTemplateResponse>","errorExample":""}]',
      'title' => '编辑作业模板',
      'summary' => '调用EditJobTemplate编辑作业模板。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteJobTemplates' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Templates',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待删除的作业模板ID列表，取值范围：1~20

格式为`[{"Id": "0.sched****"},{"Id": "1.sched****"}]`，多个作业模板ID之间用半角逗号（,）隔开。

您可以通过调用[ListJobTemplates](~~87248~~)获取作业模板ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '[{"Id":"ehpc-job-tmpl-6RVcMK****"},{"Id": "ehpc-job-tmpl-6RxO5y****"}]',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteJobTemplatesResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n</DeleteJobTemplatesResponse>","errorExample":""}]',
      'title' => '批量删除作业模板',
      'summary' => '调用DeleteJobTemplates删除一个或多个作业模板。',
    ),
    'InvokeShellCommand' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Command',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '命令内容。长度为2~2048个字符。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'echo "hello world"',
          ),
        ),
        2 => 
        array (
          'name' => 'WorkingDir',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '命令工作目录。默认值为`/root`。',
            'type' => 'string',
            'required' => false,
            'example' => '/home',
          ),
        ),
        3 => 
        array (
          'name' => 'Timeout',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '超时时间，超时将终止命令进程。单位：秒

默认值：60',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '3600',
          ),
        ),
        4 => 
        array (
          'name' => 'Instance',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '执行命令的节点信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'type' => 'object',
              'properties' => 
              array (
                'Id' => 
                array (
                  'description' => '第N个执行命令的节点实例ID。
>用于限定执行范围，不指定则默认在集群所有节点上执行。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'i-bp1in9hmw3ur52x0****',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 10000,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'CommandId' => 
              array (
                'description' => '命令ID，可用于后续查询命令执行情况。',
                'type' => 'string',
                'example' => 'c-hz01v8vudql****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'InstanceIds' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'InstanceId' => 
                  array (
                    'description' => '执行命令的实例ID列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '执行命令的实例ID列表。',
                      'type' => 'string',
                      'example' => '[ "i-uf68t1zu3jkhs8w****", "i-uf6abz34m2714bp****", "i-uf65bh2113hlqvyx****", "i-uf68t1zu3jkhs8wx****", "i-uf6b0mtpx166fxxi****", "i-uf6faknz4dy1bit7****" ]',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"CommandId\\": \\"c-hz01v8vudql****\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"InstanceIds\\": {\\n    \\"InstanceId\\": [\\n      \\"[ \\\\\\"i-uf68t1zu3jkhs8w****\\\\\\", \\\\\\"i-uf6abz34m2714bp****\\\\\\", \\\\\\"i-uf65bh2113hlqvyx****\\\\\\", \\\\\\"i-uf68t1zu3jkhs8wx****\\\\\\", \\\\\\"i-uf6b0mtpx166fxxi****\\\\\\", \\\\\\"i-uf6faknz4dy1bit7****\\\\\\" ]\\"\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<InvokeShellCommandResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\r\\n    <CommandId>c-hz01v8vudql****</CommandId>\\r\\n    <InstanceIds>\\r\\n        <InstanceId>i-uf68t1zu3jkhs8w****</InstanceId>\\r\\n        <InstanceId>i-uf6abz34m2714bp****</InstanceId>\\r\\n        <InstanceId>i-uf65bh2113hlqvyx****</InstanceId>\\r\\n        <InstanceId>i-uf68t1zu3jkhs8wx****</InstanceId>\\r\\n        <InstanceId>i-uf6b0mtpx166fxxi****</InstanceId>\\r\\n        <InstanceId>i-uf6faknz4dy1bit7****</InstanceId>\\r\\n    </InstanceIds>\\r\\n</InvokeShellCommandResponse>","errorExample":""}]',
      'title' => '执行交互执行命令',
      'summary' => '调用InvokeShellCommand在指定的集群节点内执行交互命令。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListCommands' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'CommandId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '命令ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'c-hz01v8vudql****',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1。

默认值：1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的行数。    
取值范围：1~50。    
默认值：10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Commands' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'Command' => 
                  array (
                    'description' => '命令列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Timeout' => 
                        array (
                          'description' => '超时时间。单位为秒。',
                          'type' => 'string',
                          'example' => '60',
                        ),
                        'CommandId' => 
                        array (
                          'description' => '命令ID。',
                          'type' => 'string',
                          'example' => 'c-hz01v8vudql****',
                        ),
                        'WorkingDir' => 
                        array (
                          'description' => '命令工作目录。',
                          'type' => 'string',
                          'example' => '/home',
                        ),
                        'CommandContent' => 
                        array (
                          'description' => '命令内容。',
                          'type' => 'string',
                          'example' => 'echo "hello world"',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 10,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Commands\\": {\\n    \\"Command\\": [\\n      {\\n        \\"Timeout\\": \\"60\\",\\n        \\"CommandId\\": \\"c-hz01v8vudql****\\",\\n        \\"WorkingDir\\": \\"/home\\",\\n        \\"CommandContent\\": \\"echo \\\\\\"hello world\\\\\\"\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListCommandsResponse>\\n    <PageSize>10</PageSize>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <TotalCount>1</TotalCount>\\n    <Commands>\\n        <Timeout>60</Timeout>\\n        <CommandId>c-hz01v8vudql****</CommandId>\\n        <WorkingDir>/home</WorkingDir>\\n        <CommandContent>echo \\"hello world\\"</CommandContent>\\n    </Commands>\\n</ListCommandsResponse>","errorExample":""}]',
      'title' => '查看交互执行命令列表',
      'summary' => '调用ListCommands查看指定集群内的交互命令列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListInvocationResults' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'CommandId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '命令ID。

您可以通过调用[ListCommands](~~87388~~)获取命令ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'c-hz01v8x80o3****',
          ),
        ),
        2 => 
        array (
          'name' => 'InvokeRecordStatus',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要查询的命令的运行状态。取值范围：
- Finished：已结束
- Running：运行中
- Failed：运行失败
- Stopped：已停止',
            'type' => 'string',
            'required' => false,
            'example' => 'Finished',
          ),
        ),
        3 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        4 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的行数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
        5 => 
        array (
          'name' => 'Instance',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '执行命令的目标节点信息列表。',
            'type' => 'array',
            'items' => 
            array (
              'type' => 'object',
              'properties' => 
              array (
                'Id' => 
                array (
                  'description' => '第N个执行命令的目标节点实例ID。
>用于限定执行范围，不指定则默认在集群所有节点上执行。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'i-uf65bh2113hlqvyr****',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 10000,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '每页显示的行数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'PageNumber' => 
              array (
                'description' => '显示的页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'InvocationResults' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'InvocationResult' => 
                  array (
                    'description' => '执行结果信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Success' => 
                        array (
                          'description' => '执行命令并获取结果的过程是否成功。',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'Message' => 
                        array (
                          'description' => '输出结果。',
                          'type' => 'string',
                          'example' => 'hello world',
                        ),
                        'FinishedTime' => 
                        array (
                          'description' => '完成时间。',
                          'type' => 'string',
                          'example' => '2021-09-06T09:14:56Z',
                        ),
                        'CommandId' => 
                        array (
                          'description' => '命令ID。',
                          'type' => 'string',
                          'example' => 'c-hz01v8x80o3****',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '执行命令的节点实例ID。',
                          'type' => 'string',
                          'example' => 'i-uf65bh2113hlqvyr****',
                        ),
                        'InvokeRecordStatus' => 
                        array (
                          'description' => '查询的命令的运行状态。可能值：
- Finished：已结束
- Running：运行中
- Failed：运行失败
- Stopped：已停止',
                          'type' => 'string',
                          'example' => 'Finished',
                        ),
                        'ExitCode' => 
                        array (
                          'description' => 'Shell命令退出码。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '0',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 10,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"InvocationResults\\": {\\n    \\"InvocationResult\\": [\\n      {\\n        \\"Success\\": true,\\n        \\"Message\\": \\"hello world\\",\\n        \\"FinishedTime\\": \\"2021-09-06T09:14:56Z\\",\\n        \\"CommandId\\": \\"c-hz01v8x80o3****\\",\\n        \\"InstanceId\\": \\"i-uf65bh2113hlqvyr****\\",\\n        \\"InvokeRecordStatus\\": \\"Finished\\",\\n        \\"ExitCode\\": 0\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListInvocationResultsResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\r\\n    <TotalCount>1</TotalCount>\\r\\n    <PageNumber>1</PageNumber>\\r\\n    <PageSize>10</PageSize>\\r\\n    <InvocationResults>\\r\\n        <InvocationResult>\\r\\n            <CommandId>c-hz01v8x80o3****</CommandId>\\r\\n            <Success>true</Success>\\r\\n            <InvokeRecordStatus>Finished</InvokeRecordStatus>\\r\\n            <FinishedTime>2021-09-06T09:14:56Z</FinishedTime>\\r\\n            <ExitCode>0</ExitCode>\\r\\n            <Message>hello world</Message>\\r\\n            <InstanceId>i-uf65bh2113hlqvyr****</InstanceId>\\r\\n        </InvocationResult>\\r\\n    </InvocationResults>\\r\\n</ListInvocationResultsResponse>","errorExample":""}]',
      'title' => '查看交互执行命令执行结果',
      'summary' => '调用ListInvocationResults查看指定集群内交互命令的运行结果。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListInvocationStatus' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'CommandId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '命令ID。

您可以通过调用[ListCommands](~~87388~~)获取命令ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'c-hz01v8x80o3****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'CommandId' => 
              array (
                'description' => '命令ID。',
                'type' => 'string',
                'example' => 'c-hz01v8x80o3****',
              ),
              'InvokeStatus' => 
              array (
                'description' => '总体执行状态。可能值：
- Finished：已结束
- Running：运行中
- Failed：运行失败
- Stopped：已停止',
                'type' => 'string',
                'example' => 'Finished',
              ),
              'InvokeInstances' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'InvokeInstance' => 
                  array (
                    'description' => '执行状态列表，每个节点一条记录。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'InstanceInvokeStatus' => 
                        array (
                          'description' => '节点运行状态。可能值：
- Finished：已结束
- Running：运行中
- Failed：运行失败
- Stopped：已停止',
                          'type' => 'string',
                          'example' => 'Finished',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '节点实例ID。',
                          'type' => 'string',
                          'example' => 'i-uf6abz34m2714bp4****',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"CommandId\\": \\"c-hz01v8x80o3****\\",\\n  \\"InvokeStatus\\": \\"Finished\\",\\n  \\"InvokeInstances\\": {\\n    \\"InvokeInstance\\": [\\n      {\\n        \\"InstanceInvokeStatus\\": \\"Finished\\",\\n        \\"InstanceId\\": \\"i-uf6abz34m2714bp4****\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListInvocationStatusResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\r\\n    <CommandId>c-hz01v8x80o3****</CommandId>\\r\\n    <InvokeStatus>Finished</InvokeStatus>\\r\\n    <InvokeInstances>\\r\\n        <InvokeInstance>\\r\\n            <InstanceId>i-uf6abz34m2714bp4****</InstanceId>\\r\\n            <InstanceInvokeStatus>Finished</InstanceInvokeStatus>\\r\\n        </InvokeInstance>\\r\\n        <InvokeInstance>\\r\\n            <InstanceId>i-uf68t1zu3jkhs8wy****</InstanceId>\\r\\n            <InstanceInvokeStatus>Finished</InstanceInvokeStatus>\\r\\n        </InvokeInstance>\\r\\n    </InvokeInstances>\\r\\n</ListInvocationStatusResponse>","errorExample":""}]',
      'title' => '查看交互执行命令状态',
      'summary' => '调用ListInvocationStatus查看执行的交互命令运行的状态。',
    ),
    'SetPostScripts' => 
    array (
      'summary' => '调用SetPostScripts设置集群后处理脚本。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群所属的地域ID。您可以调用[ListRegions](~~188593~~)查看最新的阿里云地域列表。',
            'type' => 'string',
            'required' => true,
            'example' => 'cn-shanghai',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'ehpc-sh-EnjshUxn',
          ),
        ),
        2 => 
        array (
          'name' => 'PostInstallScripts',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '后处理脚本。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '后处理脚本。最多可以配置16个。',
              'type' => 'object',
              'properties' => 
              array (
                'Args' => 
                array (
                  'description' => '后处理脚本的执行参数。',
                  'type' => 'string',
                  'required' => false,
                  'example' => '-h',
                ),
                'Url' => 
                array (
                  'description' => '后处理脚本的下载地址。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'https://bucket.oss-cn-shanghai.aliyuncs.com/postscript_examples.sh',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 100,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B745C159-3155-4B94-95D0-4B73D4D2****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"B745C159-3155-4B94-95D0-4B73D4D2****\\"\\n}","errorExample":""},{"type":"xml","example":"<SetPostScriptsResponse>\\n    <RequestId>B745C159-3155-4B94-95D0-4B73D4D2****</RequestId>\\n</SetPostScriptsResponse>","errorExample":""}]',
      'title' => '设置集群后处理脚本',
    ),
    'GetPostScripts' => 
    array (
      'summary' => '调用GetPostScripts查询指定集群的后处理脚本。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群所属的地域ID。

您可以调用[ListRegions](~~188593~~)查看最新的阿里云地域列表。',
            'type' => 'string',
            'required' => true,
            'example' => 'cn-shanghai',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'ehpc-sh-EnjshUxn',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B745C159-3155-4B94-95D0-4B73D4D2****',
              ),
              'PostInstallScripts' => 
              array (
                'description' => '后处理脚本。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '后处理脚本。最多可以配置16个。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Args' => 
                    array (
                      'description' => '后处理脚本的执行参数。',
                      'type' => 'string',
                      'example' => '-h',
                    ),
                    'Url' => 
                    array (
                      'description' => '后处理脚本的下载地址。',
                      'type' => 'string',
                      'example' => 'https://bucket.oss-cn-shanghai.aliyuncs.com/postscript_examples.sh',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"B745C159-3155-4B94-95D0-4B73D4D2****\\",\\n  \\"PostInstallScripts\\": [\\n    {\\n      \\"Args\\": \\"-h\\",\\n      \\"Url\\": \\"https://bucket.oss-cn-shanghai.aliyuncs.com/postscript_examples.sh\\"\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<GetPostScriptsResponse>\\n    <PostInstallScripts>\\n        <Args>-h</Args>\\n        <Url>https://bucket.oss-cn-shanghai.aliyuncs.com/postscript_examples.sh</Url>\\n    </PostInstallScripts>\\n</GetPostScriptsResponse>","errorExample":""}]',
      'title' => '查询指定集群的后处理脚本',
    ),
    'GetVisualServiceStatus' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '返回消息。',
                'type' => 'string',
                'example' => 'inactive (dead) , ws service is not running.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '896D338C-E4F4-41EC-A154-D605E5DE****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          3 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentResponseTimeout',
            'errorMessage' => 'Agent response timeout: %s',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"inactive (dead) , ws service is not running.\\",\\n  \\"RequestId\\": \\"896D338C-E4F4-41EC-A154-D605E5DE****\\"\\n}","errorExample":""},{"type":"xml","example":"<GetVisualServiceStatusResponse>\\r\\n    <Message>\\r\\n        <Msg>inactive (dead) , ws service is not running.</Msg>\\r\\n    </Message>\\r\\n    <RequestId>896D338C-E4F4-41EC-A154-D605E5DE****</RequestId>\\r\\n</GetVisualServiceStatusResponse>","errorExample":""}]',
      'title' => '获取可视化服务状态',
      'summary' => '调用GetVisualServiceStatus查询指定集群中VNC远程可视化服务状态。',
    ),
    'ModifyVisualServicePasswd' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        1 => 
        array (
          'name' => 'RunasUser',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群的用户名。当前仅支持root用户。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'root',
          ),
        ),
        2 => 
        array (
          'name' => 'RunasUserPassword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'RunasUser用户当前的密码。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '2145****',
          ),
        ),
        3 => 
        array (
          'name' => 'Passwd',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '修改后的VNC远程可视化服务的连接密码。长度为6个字符，必须同时包含英文字母和数字。
>请务必使用HTTPS协议调用API以避免可能发生的密码泄露。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '1254****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '返回消息。',
                'type' => 'string',
                'example' => '{"Msg": "" }',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '896D338C-E4F4-41EC-A154-D605E5DE6880',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          3 => 
          array (
            'errorCode' => 'IncorrectCredential',
            'errorMessage' => 'The username or password is incorrect.',
          ),
          4 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"{\\\\\\"Msg\\\\\\": \\\\\\"\\\\\\" }\\",\\n  \\"RequestId\\": \\"896D338C-E4F4-41EC-A154-D605E5DE6880\\"\\n}","errorExample":""},{"type":"xml","example":"<ModifyVisualServicePasswdResponse>\\n<RequestId>92221BA0-4C9A-5F44-918F-6C1293F83BFA</RequestId>\\n<Message>\\n    <Msg/>\\n</Message>\\n</ModifyVisualServicePasswdResponse>","errorExample":""}]',
      'title' => '设置VNC服务远程连接密码',
      'summary' => '调用ModifyVisualServicePasswd设置指定集群的VNC远程可视化服务的连接密码。',
    ),
    'StartVisualService' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        1 => 
        array (
          'name' => 'CidrIp',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '允许访问VNC服务的源地址范围，用于设置安全组。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '190.100.XX.XX',
          ),
        ),
        2 => 
        array (
          'name' => 'Port',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '固定端口。固定为：12016',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '65535',
            'example' => '12016',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '返回消息。',
                'type' => 'string',
                'example' => 'Service started.',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '896D338C-E4F4-41EC-A154-D605E5DE****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          3 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Service started.\\",\\n  \\"RequestId\\": \\"896D338C-E4F4-41EC-A154-D605E5DE****\\"\\n}","errorExample":""},{"type":"xml","example":"<StartVisualServiceResponse>\\r\\n    <Message>\\r\\n        <Msg>Service started.</Msg>\\r\\n    </Message>\\r\\n    <RequestId>896D338C-E4F4-41EC-A154-D605E5DE****</RequestId>\\r\\n</StartVisualServiceResponse>","errorExample":""}]',
      'title' => '启动VNC远程服务',
      'summary' => '调用StartVisualService启动指定集群的VNC远程可视化服务。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'StopVisualService' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        1 => 
        array (
          'name' => 'CidrIp',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '允许访问VNC服务的源地址范围，用于设置安全组。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => '100.168.XX.XX',
          ),
        ),
        2 => 
        array (
          'name' => 'Port',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '固定端口。取值：12016',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'maximum' => '65535',
            'example' => '12016',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Message' => 
              array (
                'description' => '返回消息。',
                'type' => 'string',
                'example' => 'Service stopped',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '896D338C-E4F4-41EC-A154-D605E5DE****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          3 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Message\\": \\"Service stopped\\",\\n  \\"RequestId\\": \\"896D338C-E4F4-41EC-A154-D605E5DE****\\"\\n}","errorExample":""},{"type":"xml","example":"<StopVisualServiceResponse>\\r\\n    <Message>\\r\\n        <Msg>Service stopped</Msg>\\r\\n    </Message>\\r\\n    <RequestId>896D338C-E4F4-41EC-A154-D605E5DE****</RequestId>\\r\\n</StopVisualServiceResponse>","errorExample":""}]',
      'title' => '停止可视化服务',
      'summary' => '调用StopVisualService停止指定集群的VNC远程可视化服务。',
    ),
    'SetAutoScaleConfig' => 
    array (
      'summary' => '调用SetAutoScaleConfig设置指定集群的自动伸缩配置信息。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'EnableAutoGrow',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否开启自动扩容。取值范围：
- true：开启自动扩容
- false：不开启自动扩容

默认值： false
',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
            'default' => 'false',
          ),
        ),
        2 => 
        array (
          'name' => 'EnableAutoShrink',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否开启自动缩容。取值范围：
- true：开启自动缩容
- false：不开启自动缩容

默认值： false',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
            'default' => 'false',
          ),
        ),
        3 => 
        array (
          'name' => 'GrowIntervalInMinutes',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每轮计算节点扩容的时间间隔。单位：分钟

取值范围：2~10

默认值：2

>一次扩容任务可能会分几次完成，或者连续触发扩容时的时间间隔。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '2',
            'default' => '2',
          ),
        ),
        4 => 
        array (
          'name' => 'ShrinkIntervalInMinutes',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每轮计算节点收缩的时间间隔。单位：分钟

取值范围：2~10

默认值：2',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '2',
            'default' => '2',
          ),
        ),
        5 => 
        array (
          'name' => 'ShrinkIdleTimes',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '节点连续空闲（未运行作业）次数。节点收缩检查时，一个节点连续处于空闲状态的次数。

取值范围：2~5

默认值：3

如果设置为3，表示一个计算节点连续空闲超过3次，就会被释放。因为ShrinkIntervalInMinutes默认值是2分钟，所以默认配置下，一个计算节点连续空闲时间超过6分钟，就会被释放。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '3',
            'default' => '3',
          ),
        ),
        6 => 
        array (
          'name' => 'GrowTimeoutInMinutes',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '扩容超时时间。单位：分钟

取值范围：10~60

默认值：20

如果扩容时间大于扩容超时时间，节点依然未达到运行状态，该节点将被释放。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '20',
            'default' => '20',
          ),
        ),
        7 => 
        array (
          'name' => 'ExtraNodesGrowRatio',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '额外节点百分比。取值范围：0~100

默认值：0

如果作业负载需要新增100个计算节点，ExtraNodesGrowRatio值为2，那么最终新增数量为102。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '0',
            'default' => '0',
          ),
        ),
        8 => 
        array (
          'name' => 'GrowRatio',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '扩容比例。取值范围：1~100

默认值：100

如果作业负载需要新增10个计算节点，GrowRatio配置为50，那么会进行多轮扩容，每轮扩容当前所需的50%节点。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'example' => '50',
            'default' => '100',
          ),
        ),
        9 => 
        array (
          'name' => 'MaxNodesInCluster',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群最多可以扩容的计算节点数量。取值范围：0~500

默认值：100',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '100',
          ),
        ),
        10 => 
        array (
          'name' => 'ExcludeNodes',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '例外节点列表，不参与自动伸缩的节点列表。节点之间用半角逗号（,）隔开。

如果您希望一直保留某个节点，可以设置为例外节点，空闲时不被释放。',
            'type' => 'string',
            'required' => false,
            'example' => 'i-bp19lgqwxb4206t5****,i-bp1g4hvzs9pywrhb****',
          ),
        ),
        11 => 
        array (
          'name' => 'SpotStrategy',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点抢占策略。取值范围：
- NoSpot：正常按量付费节点。
- SpotWithPriceLimit：设置上限价格的抢占式节点。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格的抢占式节点。

默认值：NoSpot',
            'type' => 'string',
            'required' => false,
            'example' => 'SpotWithPriceLimit',
          ),
        ),
        12 => 
        array (
          'name' => 'SpotPriceLimit',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '设置节点的每小时最高价格，最多支持3位小数。参数`SpotStrategy`取值为`SpotWithPriceLimit`时生效。',
            'type' => 'number',
            'format' => 'float',
            'required' => false,
            'example' => '0.062',
          ),
        ),
        13 => 
        array (
          'name' => 'ImageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像ID。

> - 如果同时设置了`Queues.N.QueueImageId`和`ImageId`时，默认使用`Queues.N.QueueImageId`。
- 如果设置了`Queues.N.QueueImageId`或`ImageId`，以设置的参数为准。
- 如果`Queues.N.QueueImageId`和`ImageId`都为空，则默认使用集群上次扩容的镜像，若之前没有进行过扩容，则默认使用创建集群时的镜像。
',
            'type' => 'string',
            'required' => false,
            'example' => 'centos_7_03_64_20G_alibase_201708****',
          ),
        ),
        14 => 
        array (
          'name' => 'Queues',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '队列信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '队列信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'QueueImageId' => 
                array (
                  'description' => ' 扩容队列的镜像ID。N的取值范围：1~8

> - 如果同时设置了`Queues.N.QueueImageId`和`ImageId`时，默认使用`Queues.N.QueueImageId`。
- 如果设置了`Queues.N.QueueImageId`或`ImageId`，以设置的参数为准。
- 如果`Queues.N.QueueImageId`和`ImageId`都为空，则默认使用集群上次扩容的镜像，若之前没有进行过扩容，则默认使用创建集群时的镜像。
',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'centos_7_03_64_20G_alibase_201708****',
                ),
                'SystemDiskCategory' => 
                array (
                  'description' => '队列中扩容的计算节点系统盘类型。取值范围：

- cloud_efficiency：高效云盘
- cloud_ssd：SSD云盘
- cloud_essd：ESSD云盘
- cloud：普通云盘，已售罄

N的取值范围：1~8

默认值：cloud_efficiency',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'cloud_efficiency',
                ),
                'InstanceType' => 
                array (
                  'description' => '队列中自动扩容的节点规格。N的取值范围：1~8',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'ecs.n1.medium',
                ),
                'HostNameSuffix' => 
                array (
                  'description' => ' 队列中扩容的主机名后缀。方便您管理具有指定后缀的节点。

N的取值范围：1~8',
                  'type' => 'string',
                  'required' => false,
                  'example' => '000',
                ),
                'SpotStrategy' => 
                array (
                  'description' => '队列中自动扩容的计算节点的抢占策略。N的取值范围：1~8

抢占策略取值范围为：
- NoSpot：正常按量付费节点。
- SpotWithPriceLimit：设置上限价格的抢占式节点。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格的抢占式节点。

默认值：NoSpot',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'NoSpot',
                ),
                'HostNamePrefix' => 
                array (
                  'description' => ' 队列中扩容的主机名前缀。方便您管理具有指定前缀的节点。

N的取值范围：1~8',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'compute',
                ),
                'MinNodesInQueue' => 
                array (
                  'description' => ' 队列允许收缩的最小节点数。取值范围：0~50

N的取值范围：1~8

默认值：0',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '0',
                ),
                'SystemDiskSize' => 
                array (
                  'description' => '队列中扩容的节点系统盘大小。单位：GB

取值范围：40~500

N的取值范围：1~8

默认值：40',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '40',
                ),
                'MaxNodesInQueue' => 
                array (
                  'description' => '队列允许扩容的最大节点数。取值范围：0~500

N的取值范围：1~8

默认值：100',
                  'type' => 'integer',
                  'format' => 'int32',
                  'required' => false,
                  'example' => '30',
                ),
                'EnableAutoShrink' => 
                array (
                  'description' => '队列是否允许自动缩容。取值范围：
- true：允许自动缩容
- false：不允许自动缩容

N的取值范围：1~8

默认值：false',
                  'type' => 'boolean',
                  'required' => false,
                  'example' => 'false',
                ),
                'QueueName' => 
                array (
                  'description' => '队列名称。支持同时设置N个队列的名称，N的取值范围：1~8',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'cluster1',
                ),
                'EnableAutoGrow' => 
                array (
                  'description' => ' 队列是否允许自动扩容。取值范围：
- true：允许自动扩容
- false：不允许自动扩容

N的取值范围：1~8

默认值：false',
                  'type' => 'boolean',
                  'required' => false,
                  'example' => 'false',
                ),
                'SystemDiskLevel' => 
                array (
                  'description' => '队列中扩容的计算节点系统盘性能等级。取值范围：

- PL0：单盘最高随机读写IOPS 1万
- PL1：单盘最高随机读写IOPS 5万
- PL2：单盘最高随机读写IOPS 10万
- PL3：单盘最高随机读写IOPS 100万

N的取值范围：1~8

默认值：PL1',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'PL1',
                ),
                'SpotPriceLimit' => 
                array (
                  'description' => '队列中自动扩容的计算节点的每小时最高价格，支持最多3位小数。参数`Queues.N.SpotStrategy`取值为`SpotWithPriceLimit`时生效。

N的取值范围：1~8',
                  'type' => 'number',
                  'format' => 'float',
                  'required' => false,
                  'example' => '0.662',
                ),
                'InstanceTypes' => 
                array (
                  'description' => '队列中节点信息。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '节点信息数组。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'VSwitchId' => 
                      array (
                        'description' => '队列中自动扩容的节点绑定的交换机ID。

支持同时设置N个队列的名称，N的取值范围：1~8

队列自动扩容时支持同时为队列中N个节点设置交换机ID，N的取值范围：0~500',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'vsw-bp1lfcjbfb099rrjn****',
                      ),
                      'ZoneId' => 
                      array (
                        'description' => '队列中自动扩容的节点所在可用区ID。

支持同时设置N个队列的名称，N的取值范围：1~8

队列自动扩容时支持同时为队列中N个节点设置可用区ID，N的取值范围：0~500',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'cn-hangzhou-b',
                      ),
                      'SpotPriceLimit' => 
                      array (
                        'description' => '队列中自动扩容的节点每小时最高价格，支持最多3位小数。参数`Queues.N.InstanceTypes.N.SpotStrategy`取值为`SpotWithPriceLimit`时生效。

支持同时设置N个队列的名称，N的取值范围：1~8

队列自动扩容时支持同时为队列中N个节点设置每小时最高价格，N的取值范围：0~500',
                        'type' => 'number',
                        'format' => 'float',
                        'required' => false,
                        'example' => '0.660',
                      ),
                      'InstanceType' => 
                      array (
                        'description' => '队列中自动扩容的节点规格。

支持同时设置N个队列的名称，N的取值范围：1~8

队列自动扩容时支持同时为队列中N个节点设置规格参数，N的取值范围：0~500',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'ecs.n1.tiny',
                      ),
                      'SpotStrategy' => 
                      array (
                        'description' => '队列中自动扩容的计算节点竞价策略。取值范围：
- NoSpot：正常按量付费节点。
- SpotWithPriceLimit：设置上限价格的抢占式节点。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格的抢占式节点。

默认值：NoSpot

支持同时设置N个队列的名称，N的取值范围：1~8

队列自动扩容时支持同时为队列中N个节点设置计算节点竞价策略，N的取值范围：0~500',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'SpotWithPriceLimit',
                      ),
                      'SpotDuration' => 
                      array (
                        'title' => '抢占式实例的保留时长，单位为小时。取值范围：0~6。
- 保留时长2~6正在邀测中，如需开通请提交工单。
- 取值为0，则为无保护期模式。
默认值：1。',
                        'description' => '抢占式实例的保护期，单位为小时。取值为0~1，设置为0则表示无保护期，默认为1。',
                        'type' => 'integer',
                        'format' => 'int32',
                        'required' => false,
                        'example' => '0',
                      ),
                      'SpotInterruptionBehavior' => 
                      array (
                        'title' => '抢占实例中断模式。目前仅支持Terminate（默认）直接释放实例。',
                        'description' => '抢占实例中断模式。目前仅支持Terminate（默认）直接释放实例。',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'Terminate',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                  'maxItems' => 16,
                ),
                'DataDisks' => 
                array (
                  'description' => '随节点创建的数据盘信息列表。',
                  'type' => 'array',
                  'items' => 
                  array (
                    'description' => '随节点创建的数据盘信息列表。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'DataDiskSize' => 
                      array (
                        'description' => '第N个随节点创建的数据盘容量大小。单位：GB

取值范围：40~500

默认值：40

N的取值范围：0~16',
                        'type' => 'integer',
                        'format' => 'int32',
                        'required' => false,
                        'example' => '40',
                      ),
                      'DataDiskCategory' => 
                      array (
                        'description' => '第N个随节点创建的数据盘类型。取值范围：

- cloud_efficiency：高效云盘

- cloud_ssd：SSD云盘

- cloud_essd：ESSD云盘

- cloud：普通云盘

默认值：cloud_efficiency

N的取值范围：0~16',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'cloud_efficiency',
                      ),
                      'DataDiskDeleteWithInstance' => 
                      array (
                        'description' => '第N个随节点创建的数据盘是否随实例释放。取值范围：

- true：是

- false：否

默认值：true

N的取值范围：0~16',
                        'type' => 'boolean',
                        'required' => false,
                        'example' => 'true',
                      ),
                      'DataDiskPerformanceLevel' => 
                      array (
                        'description' => '第N个随节点创建的数据盘类型为ESSD云盘时，区分性能等级。仅当Queues.N.DataDisks.N.DataDiskCategory=cloud_essd时该参数有效。取值范围：
- PL0：单盘最高随机读写IOPS 1万
- PL1：单盘最高随机读写IOPS 5万
- PL2：单盘最高随机读写IOPS 10万
- PL3：单盘最高随机读写IOPS 100万

默认值：PL1

N的取值范围：0~16',
                        'type' => 'string',
                        'required' => false,
                        'example' => 'PL1',
                      ),
                      'DataDiskEncrypted' => 
                      array (
                        'description' => '第N个随节点创建的数据盘是否加密。取值范围：

- true：是

- false：否

默认值：false

N的取值范围：0~16',
                        'type' => 'boolean',
                        'required' => false,
                        'example' => 'false',
                      ),
                      'DataDiskKMSKeyId' => 
                      array (
                        'description' => '第N个随节点创建的数据盘使用的KMS密钥ID。

N的取值范围：0~16',
                        'type' => 'string',
                        'required' => false,
                        'example' => '0e478b7a-4262-4802-b8cb-00d3fb40826X',
                      ),
                    ),
                    'required' => false,
                  ),
                  'required' => false,
                  'maxItems' => 16,
                ),
                'MaxNodesPerCycle' => 
                array (
                  'description' => '自动伸缩每轮扩容的最大计算节点数。取值范围：0~99。

默认值：0。',
                  'type' => 'integer',
                  'format' => 'int64',
                  'required' => false,
                  'example' => '20',
                ),
                'MinNodesPerCycle' => 
                array (
                  'description' => '自动伸缩每轮扩容的最小计算节点数。取值范围：1~99。

默认值：1。

如果某一轮次需扩容节点数量小于所设置的最小计算节点数，自动伸缩为保证资源的正常交付，会将该轮次的最小计算节点数自动调整为当前轮次需要扩容节点数量。

>该调整仅对当前轮次的最小计算节点数生效。

',
                  'type' => 'integer',
                  'format' => 'int64',
                  'required' => false,
                  'example' => '5',
                ),
                'AutoMinNodesPerCycle' => 
                array (
                  'description' => '自动设置单轮扩容的最小节点数量。
如果设置为true，则每次扩容的最小节点数等于作业所需的节点数量，上限是99台。',
                  'type' => 'boolean',
                  'required' => false,
                  'example' => 'false',
                ),
                'SortedByInventory' => 
                array (
                  'description' => '实例是否支持乱序排列，取值范围：

- true：是

- false：否

> 如果设置为true，自动伸缩会按照实例库存数量从多到少的顺序选择实例规格，尽力交付实例资源。',
                  'type' => 'boolean',
                  'required' => false,
                  'example' => 'false',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 8,
          ),
        ),
        15 => 
        array (
          'name' => 'ComputeEnableHt',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '计算节点对应的ECS实例是否开启超线程。

> 该配置仅对部分支持开关超线程的实例规格生效。对于不支持的实例，默认开启超线程。具体请参见[自定义CPU选项](~~145895~~)。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
        16 => 
        array (
          'name' => 'DnsConfig',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'DNS配置信息。',
            'type' => 'string',
            'required' => false,
            'example' => '"{\\"DnsType\\":\\"PrivateZone\\",\\"DnsName\\":\\"xxxxx\\"}"',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-13358736C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidOpt',
            'errorMessage' => 'The specified operation is invalid. Please try again later. If the problem still exists, submit a ticket.',
          ),
          1 => 
          array (
            'errorCode' => 'TooManyComputes',
            'errorMessage' => 'The number of computing nodes exceeds the quota.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ImageNotFound',
            'errorMessage' => 'The specified image does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-13358736C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<SetAutoScaleConfigResponse>\\n    <RequestId>04F0F334-13358736C-A1D7-6C044FE7****</RequestId>\\n</SetAutoScaleConfigResponse>","errorExample":""}]',
      'title' => '设置自动伸缩配置信息',
      'description' => '## 接口说明

当队列配置和全局配置中配置不一致时，以队列设置为优先。
',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DescribeAutoScaleConfig' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'MaxNodesInCluster' => 
              array (
                'description' => '集群最大计算节点数，集群最多可以扩展的节点数量。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '100',
              ),
              'GrowTimeoutInMinutes' => 
              array (
                'description' => '扩容超时时间，等待启动节点的超时时间。可能值：10~60',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '20',
              ),
              'SpotStrategy' => 
              array (
                'description' => '计算节点竞价策略。可能值：
- NoSpot：正常按量付费实例。
- SpotWithPriceLimit：设置上限价格的抢占式实例。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格。',
                'type' => 'string',
                'example' => 'NoSpot',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73',
              ),
              'EnableAutoShrink' => 
              array (
                'description' => '是否开启自动缩容。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ClusterType' => 
              array (
                'description' => '集群的调度器类型。可能值：
- pbs
- slurm
- opengridscheduler
- deadline',
                'type' => 'string',
                'example' => 'slurm',
              ),
              'EnableAutoGrow' => 
              array (
                'description' => '是否开启自动扩容。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ExcludeNodes' => 
              array (
                'description' => '不使用自动伸缩的节点列表。',
                'type' => 'string',
                'example' => 'i-bp19lgqwxb4206t5****,i-bp1g4hvzs9pywrhb****',
              ),
              'GrowIntervalInMinutes' => 
              array (
                'description' => '扩容时间间隔，每轮计算节点扩容的时间间隔。可能值：2~10',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'ShrinkIntervalInMinutes' => 
              array (
                'description' => '缩容时间间隔，每轮计算节点收缩的时间间隔。可能值：2~10',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '2',
              ),
              'SpotPriceLimit' => 
              array (
                'description' => '实例的每小时最高价格。支持最多3位小数，参数SpotStrategy取值为SpotWithPriceLimit时生效。',
                'type' => 'string',
                'example' => '0.062',
              ),
              'ShrinkIdleTimes' => 
              array (
                'description' => '节点连续空闲次数，资源收缩检查时，一个节点连续处于空闲的次数。可能值：2~5',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '3',
              ),
              'ExtraNodesGrowRatio' => 
              array (
                'description' => '额外节点百分比。可能值：0~100',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '0',
              ),
              'GrowRatio' => 
              array (
                'description' => '扩容比例。可能值：1~100',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Uid' => 
              array (
                'description' => '用户ID。',
                'type' => 'string',
                'example' => 'testu****',
              ),
              'ClusterId' => 
              array (
                'description' => '集群ID。',
                'type' => 'string',
                'example' => 'ehpc-hz-FYUr32****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidOpt',
            'errorMessage' => 'The specified operation is invalid. Please try again later. If the problem still exists, submit a ticket.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"MaxNodesInCluster\\": 100,\\n  \\"GrowTimeoutInMinutes\\": 20,\\n  \\"SpotStrategy\\": \\"NoSpot\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73\\",\\n  \\"EnableAutoShrink\\": true,\\n  \\"ClusterType\\": \\"slurm\\",\\n  \\"EnableAutoGrow\\": true,\\n  \\"ExcludeNodes\\": \\"i-bp19lgqwxb4206t5****,i-bp1g4hvzs9pywrhb****\\",\\n  \\"GrowIntervalInMinutes\\": 10,\\n  \\"ShrinkIntervalInMinutes\\": 2,\\n  \\"SpotPriceLimit\\": \\"0.062\\",\\n  \\"ShrinkIdleTimes\\": 3,\\n  \\"ExtraNodesGrowRatio\\": 0,\\n  \\"GrowRatio\\": 1,\\n  \\"Uid\\": \\"testu****\\",\\n  \\"ClusterId\\": \\"ehpc-hz-FYUr32****\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeAutoScaleConfigResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73</RequestId>\\n    <ClusterType>slurm</ClusterType>\\n    <Uid>testu****</Uid>\\n    <EnableAutoGrow>true</EnableAutoGrow>\\n    <EnableAutoShrink>true</EnableAutoShrink>\\n    <ExcludeNodes>i-bp19lgqwxb4206t5****,i-bp1g4hvzs9pywrhb****</ExcludeNodes>\\n    <GrowIntervalInMinutes>10</GrowIntervalInMinutes>\\n    <ShrinkIntervalInMinutes>2</ShrinkIntervalInMinutes>\\n    <ShrinkIdleTimes>3</ShrinkIdleTimes>\\n    <GrowTimeoutInMinutes>20</GrowTimeoutInMinutes>\\n    <ExtraNodesGrowRatio>0</ExtraNodesGrowRatio>\\n    <MaxNodesInCluster>100</MaxNodesInCluster>\\n    <GrowRatio>1</GrowRatio>\\n    <SpotStrategy>NoSpot</SpotStrategy>\\n    <SpotPriceLimit>0</SpotPriceLimit>\\n</DescribeAutoScaleConfigResponse>    ","errorExample":""}]',
      'title' => '查询自动伸缩配置信息',
      'summary' => '调用DescribeAutoScaleConfig查询指定集群的自动伸缩配置信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetAutoScaleConfig' => 
    array (
      'summary' => '调用GetAutoScaleConfig获取指定集群的自动伸缩配置信息。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'MaxNodesInCluster' => 
              array (
                'description' => '集群最多可以扩容的节点数量。可能值：0~500',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '300',
              ),
              'GrowTimeoutInMinutes' => 
              array (
                'description' => '扩容超时时间，等待启动节点的超时时间。单位：分钟，可能值：10~60

如果扩容时间大于扩容超时时间，节点依然未达到运行状态，系统将此节点释放。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '20',
              ),
              'SpotStrategy' => 
              array (
                'description' => '计算节点抢占策略。可能值：
- NoSpot：正常按量付费节点。
- SpotWithPriceLimit：设置上限价格的抢占式节点。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格的抢占式节点。',
                'type' => 'string',
                'example' => 'SpotWithPriceLimit',
              ),
              'EnableAutoShrink' => 
              array (
                'description' => '集群是否启动自动缩容。可能值：
- true
- false',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'EnableAutoGrow' => 
              array (
                'description' => '集群是否启动自动扩容。可能值：
- true
- false',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'ClusterType' => 
              array (
                'description' => '集群的调度器类型。可能值：
- slurm
- pbs
- opengridscheduler
- deadline',
                'type' => 'string',
                'example' => 'pbs',
              ),
              'ExcludeNodes' => 
              array (
                'description' => '不参与自动伸缩的节点列表，多个节点之间用半角逗号（,）隔开。',
                'type' => 'string',
                'example' => 'i-bp19lgqwxb4206t5****,i-bp1g4hvzs9pywrhb****',
              ),
              'ShrinkIntervalInMinutes' => 
              array (
                'description' => '缩容时间间隔，每轮计算节点收缩的时间间隔。单位：分钟，可能值：2~10',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '2',
              ),
              'GrowIntervalInMinutes' => 
              array (
                'description' => '扩容时间间隔，每轮计算节点扩容的时间间隔。单位：分钟，可能值：2~10

>一次扩容任务可能会分几次完成，或者连续触发扩容时的时间间隔。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '2',
              ),
              'SpotPriceLimit' => 
              array (
                'description' => '计算节点每小时最高价格，最多支持3位小数。参数SpotStrategy取值为SpotWithPriceLimit时生效。',
                'type' => 'number',
                'format' => 'float',
                'example' => '0.062',
              ),
              'ExtraNodesGrowRatio' => 
              array (
                'description' => '额外节点百分比。可能值：0~100

如果作业负载需要新增100个计算节点，ExtraNodesGrowRatio值为2，那么最终新增数量为102。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '2',
              ),
              'ShrinkIdleTimes' => 
              array (
                'description' => '节点连续空闲（未运行作业）次数。节点收缩检查时，一个节点连续处于空闲状态的次数。可能值：2~5

如果该参数值为3，表示一个计算节点连续空闲超过3次，就会被释放。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '3',
              ),
              'ImageId' => 
              array (
                'description' => '队列中计算节点镜像ID。',
                'type' => 'string',
                'example' => 'm-bp10txryr4mhrrt1****',
              ),
              'GrowRatio' => 
              array (
                'description' => '扩容比例。可能值：1~100

如果作业负载需要新增10个计算节点，GrowRatio配置为50，那么会进行多轮扩容，每轮扩容当前所需的50%。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '100',
              ),
              'ClusterId' => 
              array (
                'description' => '集群ID。',
                'type' => 'string',
                'example' => 'ehpc-hz-FYUr32****',
              ),
              'Uid' => 
              array (
                'description' => '阿里云账号ID。',
                'type' => 'string',
                'example' => '129845258050****',
              ),
              'Queues' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'QueueInfo' => 
                  array (
                    'description' => '集群队列的自动伸缩配置信息。
>集群和队列同时开启了扩容或缩容时，则以队列设置为优先。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'QueueImageId' => 
                        array (
                          'description' => '队列中计算节点镜像ID。',
                          'type' => 'string',
                          'example' => 'centos_7_06_64_20G_alibase_2019071****',
                        ),
                        'SystemDiskCategory' => 
                        array (
                          'description' => '系统盘类型。可能值：

- cloud_efficiency：高效云盘
- cloud_ssd：SSD云盘
- cloud_essd：ESSD云盘
- cloud：普通云盘',
                          'type' => 'string',
                          'example' => 'cloud_efficiency',
                        ),
                        'InstanceType' => 
                        array (
                          'description' => '该队列自动扩容的节点规格。

',
                          'type' => 'string',
                          'example' => 'ecs.sn1ne.large',
                        ),
                        'HostNameSuffix' => 
                        array (
                          'description' => '队列名后缀。方便您查询具有指定后缀的队列。',
                          'type' => 'string',
                          'example' => '000',
                        ),
                        'SpotStrategy' => 
                        array (
                          'description' => '计算节点的抢占策略。可能值：
- NoSpot：正常按量付费节点。
- SpotWithPriceLimit：设置上限价格的抢占式节点。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格的抢占式节点。',
                          'type' => 'string',
                          'example' => 'NoSpot',
                        ),
                        'MinNodesInQueue' => 
                        array (
                          'description' => '单个队列最小计算节点数，队列最少可以保留的计算节点数量。可能值：0~50',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '10',
                        ),
                        'HostNamePrefix' => 
                        array (
                          'description' => '队列名前缀。方便您查询具有指定前缀的队列。',
                          'type' => 'string',
                          'example' => 'compute',
                        ),
                        'SystemDiskSize' => 
                        array (
                          'description' => '系统盘大小。单位：GB，可能值：40~500',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '40',
                        ),
                        'MaxNodesInQueue' => 
                        array (
                          'description' => '单个队列最多可以扩容的节点数量。可能值：0~500',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '100',
                        ),
                        'EnableAutoShrink' => 
                        array (
                          'description' => '队列是否启动自动缩容。可能值：
- true
- false',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'QueueName' => 
                        array (
                          'description' => '队列名称。',
                          'type' => 'string',
                          'example' => 'workq',
                        ),
                        'EnableAutoGrow' => 
                        array (
                          'description' => '队列是否启动自动扩容。可能值：
- true
- false',
                          'type' => 'boolean',
                          'example' => 'true',
                        ),
                        'SystemDiskLevel' => 
                        array (
                          'description' => '系统盘性能等级。可能值：

- PL0：单盘最高随机读写IOPS 1万

- PL1：单盘最高随机读写IOPS 5万

- PL2：单盘最高随机读写IOPS10万

- PL3：单盘最高随机读写IOPS 100万',
                          'type' => 'string',
                          'example' => 'PL1',
                        ),
                        'ResourceGroupId' => 
                        array (
                          'description' => '计算节点所属的资源组ID。',
                          'type' => 'string',
                          'example' => 'rg-acfmxp7uc24****',
                        ),
                        'SpotPriceLimit' => 
                        array (
                          'description' => '计算节点每小时最高价格，支持最大3位小数。参数SpotStrategy取值为SpotWithPriceLimit时生效。',
                          'type' => 'number',
                          'format' => 'float',
                          'example' => '0.062',
                        ),
                        'InstanceTypes' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'InstanceTypeInfo' => 
                            array (
                              'description' => '计算节点规格信息。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'HostNamePrefix' => 
                                  array (
                                    'description' => '主机名前缀。方便您查询具有指定前缀的节点。',
                                    'type' => 'string',
                                    'example' => 'compute',
                                  ),
                                  'VSwitchId' => 
                                  array (
                                    'description' => '计算节点所属的交换机ID。',
                                    'type' => 'string',
                                    'example' => 'vsw-bp1lfcjbfb099rrjn****',
                                  ),
                                  'ZoneId' => 
                                  array (
                                    'description' => '计算节点所属的可用区ID。',
                                    'type' => 'string',
                                    'example' => 'cn-hangzhou-b',
                                  ),
                                  'SpotPriceLimit' => 
                                  array (
                                    'description' => '计算节点每小时最高价格，支持最多3位小数。参数SpotStrategy取值为SpotWithPriceLimit时生效。',
                                    'type' => 'number',
                                    'format' => 'float',
                                    'example' => '0.062',
                                  ),
                                  'InstanceType' => 
                                  array (
                                    'description' => '节点规格。',
                                    'type' => 'string',
                                    'example' => 'ecs.sn1ne.large',
                                  ),
                                  'SpotStrategy' => 
                                  array (
                                    'description' => '计算节点竞价策略。可能值：
- NoSpot：正常按量付费节点。
- SpotWithPriceLimit：设置上限价格的抢占式节点。
- SpotAsPriceGo：系统自动出价，跟随当前市场实际价格的抢占式节点。',
                                    'type' => 'string',
                                    'example' => 'NoSpot',
                                  ),
                                  'SpotDuration' => 
                                  array (
                                    'description' => '抢占式实例的保护期，单位为小时。取值为0~1，默认为1，设置为0表示无保护期。',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '0',
                                  ),
                                  'SpotInterruptionBehavior' => 
                                  array (
                                    'title' => '抢占实例中断模式。目前仅支持Terminate（默认）直接释放实例。
',
                                    'description' => '抢占实例中断模式。目前仅支持Terminate（默认）直接释放实例。
',
                                    'type' => 'string',
                                    'example' => 'Terminate',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                        'DataDisks' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'DataDisksInfo' => 
                            array (
                              'description' => '节点上挂载的数据盘信息列表。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'DataDiskCategory' => 
                                  array (
                                    'description' => '第N个该节点挂载的数据盘类型。可能值：

- cloud_efficiency：高效云盘

- cloud_ssd：SSD云盘

- cloud_essd：ESSD云盘

- cloud：普通云盘',
                                    'type' => 'string',
                                    'example' => 'cloud_efficiency',
                                  ),
                                  'DataDiskSize' => 
                                  array (
                                    'description' => '第N个该节点挂载的数据盘容量大小。单位：GB

可能值：40~500',
                                    'type' => 'integer',
                                    'format' => 'int32',
                                    'example' => '40',
                                  ),
                                  'DataDiskDeleteWithInstance' => 
                                  array (
                                    'description' => '第N个该节点挂载的数据盘是否随实例释放。可能值：

- true：是

- false：否',
                                    'type' => 'boolean',
                                    'example' => 'true',
                                  ),
                                  'DataDiskPerformanceLevel' => 
                                  array (
                                    'description' => '第N个该节点的数据盘类型为ESSD云盘时，区分性能等级。仅当DataDisks.N.DataDiskCategory=cloud_essd时返回该参数。可能值：
- PL0：单盘最高随机读写IOPS 1万
- PL1：单盘最高随机读写IOPS 5万
- PL2：单盘最高随机读写IOPS 10万
- PL3：单盘最高随机读写IOPS 100万',
                                    'type' => 'string',
                                    'example' => 'PL1',
                                  ),
                                  'DataDiskEncrypted' => 
                                  array (
                                    'description' => '第N个该节点的数据盘是否加密。可能值：

- true：是

- false：否',
                                    'type' => 'boolean',
                                    'example' => 'false',
                                  ),
                                  'DataDiskKMSKeyId' => 
                                  array (
                                    'description' => '第N个该节点的数据盘使用的KMS密钥ID。',
                                    'type' => 'string',
                                    'example' => '0e478b7a-4262-4802-b8cb-00d3fb40826X',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                        'MaxNodesPerCycle' => 
                        array (
                          'description' => '自动伸缩每轮扩容的最大计算节点数。取值范围：0~99。

默认值：0。',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '20',
                        ),
                        'MinNodesPerCycle' => 
                        array (
                          'description' => '自动伸缩每轮扩容的最小计算节点数。取值范围：1~99。

默认值：1。

如果某一轮次需扩容节点数量小于所设置的最小计算节点数，自动伸缩为保证资源的正常交付，会将该轮次的最小计算节点数自动调整为当前轮次需要扩容节点数量。

>该调整仅对当前轮次的最小计算节点数生效。

',
                          'type' => 'integer',
                          'format' => 'int64',
                          'example' => '5',
                        ),
                        'AutoMinNodesPerCycle' => 
                        array (
                          'description' => '自动设置单轮扩容的最小节点数量。
如果设置为true，则每次扩容的最小节点数等于作业所需的节点数量，上限是99台。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                        'SortedByInventory' => 
                        array (
                          'description' => '实例是否支持乱序排列，取值范围：

- true：是

- false：否

> 如果设置为true，自动伸缩会按照实例库存数量从多到少的顺序选择实例规格，尽力交付实例资源。',
                          'type' => 'boolean',
                          'example' => 'false',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              'ComputeEnableHt' => 
              array (
                'description' => '计算节点对应的ECS实例是否开启超线程。',
                'type' => 'boolean',
                'example' => 'true',
              ),
              'DnsConfig' => 
              array (
                'description' => 'DNS配置信息。',
                'type' => 'string',
                'example' => '"{\\"DnsType\\":\\"PrivateZone\\",\\"DnsName\\":\\"xxxxx\\"}"',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidOpt',
            'errorMessage' => 'The specified operation is invalid. Please try again later. If the problem still exists, submit a ticket.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"MaxNodesInCluster\\": 300,\\n  \\"GrowTimeoutInMinutes\\": 20,\\n  \\"SpotStrategy\\": \\"SpotWithPriceLimit\\",\\n  \\"EnableAutoShrink\\": true,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"EnableAutoGrow\\": true,\\n  \\"ClusterType\\": \\"pbs\\",\\n  \\"ExcludeNodes\\": \\"i-bp19lgqwxb4206t5****,i-bp1g4hvzs9pywrhb****\\",\\n  \\"ShrinkIntervalInMinutes\\": 2,\\n  \\"GrowIntervalInMinutes\\": 2,\\n  \\"SpotPriceLimit\\": 0.062,\\n  \\"ExtraNodesGrowRatio\\": 2,\\n  \\"ShrinkIdleTimes\\": 3,\\n  \\"ImageId\\": \\"m-bp10txryr4mhrrt1****\\",\\n  \\"GrowRatio\\": 100,\\n  \\"ClusterId\\": \\"ehpc-hz-FYUr32****\\",\\n  \\"Uid\\": \\"129845258050****\\",\\n  \\"Queues\\": {\\n    \\"QueueInfo\\": [\\n      {\\n        \\"QueueImageId\\": \\"centos_7_06_64_20G_alibase_2019071****\\",\\n        \\"SystemDiskCategory\\": \\"cloud_efficiency\\",\\n        \\"InstanceType\\": \\"ecs.sn1ne.large\\",\\n        \\"HostNameSuffix\\": \\"000\\",\\n        \\"SpotStrategy\\": \\"NoSpot\\",\\n        \\"MinNodesInQueue\\": 10,\\n        \\"HostNamePrefix\\": \\"compute\\",\\n        \\"SystemDiskSize\\": 40,\\n        \\"MaxNodesInQueue\\": 100,\\n        \\"EnableAutoShrink\\": true,\\n        \\"QueueName\\": \\"workq\\",\\n        \\"EnableAutoGrow\\": true,\\n        \\"SystemDiskLevel\\": \\"PL1\\",\\n        \\"ResourceGroupId\\": \\"rg-acfmxp7uc24****\\",\\n        \\"SpotPriceLimit\\": 0.062,\\n        \\"InstanceTypes\\": {\\n          \\"InstanceTypeInfo\\": [\\n            {\\n              \\"HostNamePrefix\\": \\"compute\\",\\n              \\"VSwitchId\\": \\"vsw-bp1lfcjbfb099rrjn****\\",\\n              \\"ZoneId\\": \\"cn-hangzhou-b\\",\\n              \\"SpotPriceLimit\\": 0.062,\\n              \\"InstanceType\\": \\"ecs.sn1ne.large\\",\\n              \\"SpotStrategy\\": \\"NoSpot\\",\\n              \\"SpotDuration\\": 0,\\n              \\"SpotInterruptionBehavior\\": \\"Terminate\\"\\n            }\\n          ]\\n        },\\n        \\"DataDisks\\": {\\n          \\"DataDisksInfo\\": [\\n            {\\n              \\"DataDiskCategory\\": \\"cloud_efficiency\\",\\n              \\"DataDiskSize\\": 40,\\n              \\"DataDiskDeleteWithInstance\\": true,\\n              \\"DataDiskPerformanceLevel\\": \\"PL1\\",\\n              \\"DataDiskEncrypted\\": false,\\n              \\"DataDiskKMSKeyId\\": \\"0e478b7a-4262-4802-b8cb-00d3fb40826X\\"\\n            }\\n          ]\\n        },\\n        \\"MaxNodesPerCycle\\": 20,\\n        \\"MinNodesPerCycle\\": 5,\\n        \\"AutoMinNodesPerCycle\\": false,\\n        \\"SortedByInventory\\": false\\n      }\\n    ]\\n  },\\n  \\"ComputeEnableHt\\": true,\\n  \\"DnsConfig\\": \\"\\\\\\"{\\\\\\\\\\\\\\"DnsType\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"PrivateZone\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"DnsName\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"xxxxx\\\\\\\\\\\\\\"}\\\\\\"\\"\\n}","errorExample":""},{"type":"xml","example":"<GetAutoScaleConfigResponse>\\n    <MaxNodesInCluster>300</MaxNodesInCluster>\\n    <GrowTimeoutInMinutes>20</GrowTimeoutInMinutes>\\n    <SpotStrategy>SpotWithPriceLimit</SpotStrategy>\\n    <EnableAutoShrink>true</EnableAutoShrink>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\n    <EnableAutoGrow>true</EnableAutoGrow>\\n    <ClusterType>pbs</ClusterType>\\n    <ExcludeNodes>i-bp19lgqwxb4206t5****,i-bp1g4hvzs9pywrhb****</ExcludeNodes>\\n    <ShrinkIntervalInMinutes>2</ShrinkIntervalInMinutes>\\n    <GrowIntervalInMinutes>2</GrowIntervalInMinutes>\\n    <SpotPriceLimit>0.062</SpotPriceLimit>\\n    <ExtraNodesGrowRatio>2</ExtraNodesGrowRatio>\\n    <ShrinkIdleTimes>3</ShrinkIdleTimes>\\n    <ImageId>m-bp10txryr4mhrrt1****</ImageId>\\n    <GrowRatio>100</GrowRatio>\\n    <ClusterId>ehpc-hz-FYUr32****</ClusterId>\\n    <Uid>129845258050****</Uid>\\n    <Queues>\\n        <QueueImageId>centos_7_06_64_20G_alibase_2019071****</QueueImageId>\\n        <SystemDiskCategory>cloud_efficiency</SystemDiskCategory>\\n        <InstanceType>ecs.sn1ne.large</InstanceType>\\n        <HostNameSuffix>000</HostNameSuffix>\\n        <SpotStrategy>NoSpot</SpotStrategy>\\n        <MinNodesInQueue>10</MinNodesInQueue>\\n        <HostNamePrefix>compute</HostNamePrefix>\\n        <SystemDiskSize>40</SystemDiskSize>\\n        <MaxNodesInQueue>100</MaxNodesInQueue>\\n        <EnableAutoShrink>true</EnableAutoShrink>\\n        <QueueName>workq</QueueName>\\n        <EnableAutoGrow>true</EnableAutoGrow>\\n        <SystemDiskLevel>PL1</SystemDiskLevel>\\n        <ResourceGroupId>rg-acfmxp7uc24****</ResourceGroupId>\\n        <SpotPriceLimit>0.062</SpotPriceLimit>\\n        <InstanceTypes>\\n            <HostNamePrefix>compute</HostNamePrefix>\\n            <VSwitchId>vsw-bp1lfcjbfb099rrjn****</VSwitchId>\\n            <ZoneId>cn-hangzhou-b</ZoneId>\\n            <SpotPriceLimit>0.062</SpotPriceLimit>\\n            <InstanceType>ecs.sn1ne.large</InstanceType>\\n            <SpotStrategy>NoSpot</SpotStrategy>\\n        </InstanceTypes>\\n        <DataDisks>\\n            <DataDiskCategory>cloud_efficiency</DataDiskCategory>\\n            <DataDiskSize>40</DataDiskSize>\\n            <DataDiskDeleteWithInstance>true</DataDiskDeleteWithInstance>\\n            <DataDiskPerformanceLevel>PL1</DataDiskPerformanceLevel>\\n            <DataDiskEncrypted>false</DataDiskEncrypted>\\n            <DataDiskKMSKeyId>0e478b7a-4262-4802-b8cb-00d3fb40826X</DataDiskKMSKeyId>\\n        </DataDisks>\\n    </Queues>\\n</GetAutoScaleConfigResponse>","errorExample":""}]',
      'title' => '获取自动伸缩配置信息',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'RunCloudMetricProfiling' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '地域ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-hangzhou',
            'default' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        2 => 
        array (
          'name' => 'HostName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '主机名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'compute0',
          ),
        ),
        3 => 
        array (
          'name' => 'ProcessId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '剖析进程ID。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '29075',
          ),
        ),
        4 => 
        array (
          'name' => 'Duration',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '剖析时长。单位：秒

取值范围：10~300

默认值：30',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '300',
            'default' => '300',
          ),
        ),
        5 => 
        array (
          'name' => 'Freq',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '采样频率。单位：Hz
取值范围：1~2000

默认值：2000',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '2000',
            'default' => '2000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '8442AF35-875B-4FC0-8B7AAFDC339335D5',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"8442AF35-875B-4FC0-8B7AAFDC339335D5\\"\\n}","errorExample":""},{"type":"xml","example":"<RunCloudMetricProfilingResponse>\\r\\n    <RequestId>8442AF35-875B-4FC0-8B7AAFDC339335D5</RequestId>\\r\\n</RunCloudMetricProfilingResponse>","errorExample":""}]',
      'title' => '启动集群的性能剖析',
      'summary' => '调用RunCloudMetricProfiling启动指定集群的性能剖析。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetCloudMetricProfiling' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '地域ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-hangzhou',
            'default' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        2 => 
        array (
          'name' => 'ProfilingId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '性能剖析ID。您可以通过调用[ListCloudMetricProfilings](~~188711~~)接口获取性能剖析ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-i-bplukzqgl****_21687_2019-09-09-02-37-40',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0DD6F715-85EE-4EA6-BDC4-48A75B719068',
              ),
              'SvgUrls' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'SvgInfo' => 
                  array (
                    'description' => '性能剖析结果列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Type' => 
                        array (
                          'description' => 'SVG文件类型。',
                          'type' => 'string',
                          'example' => 'file',
                        ),
                        'Url' => 
                        array (
                          'description' => 'SVG文件存储在OSS的URL。',
                          'type' => 'string',
                          'example' => 'https://cloudmetrics-****-hz.oss-cn-hangzhou.aliyuncs.com/112****/ehpc-hz-faRavb****njuik%Oxlftyhujmi0Y****',
                        ),
                        'Name' => 
                        array (
                          'description' => 'SVG文件名称。',
                          'type' => 'string',
                          'example' => 'ehpc-hz-faRavbPf6b_i-bdrftgyh890654****_21687_2019-09-09-02-37-40.bottomup.svg',
                        ),
                        'Size' => 
                        array (
                          'description' => 'SVG文件大小。单位为字节（Byte）。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '648',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0DD6F715-85EE-4EA6-BDC4-48A75B719068\\",\\n  \\"SvgUrls\\": {\\n    \\"SvgInfo\\": [\\n      {\\n        \\"Type\\": \\"file\\",\\n        \\"Url\\": \\"https://cloudmetrics-****-hz.oss-cn-hangzhou.aliyuncs.com/112****/ehpc-hz-faRavb****njuik%Oxlftyhujmi0Y****\\",\\n        \\"Name\\": \\"ehpc-hz-faRavbPf6b_i-bdrftgyh890654****_21687_2019-09-09-02-37-40.bottomup.svg\\",\\n        \\"Size\\": 648\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetCloudMetricProfilingResponse>\\n    <RequestId>0DD6F715-85EE-4EA6-BDC4-48A75B719068</RequestId>\\n    <SvgUrls>\\n        <SvgInfo>\\n            <Name>ehpc-hz-faRavbPf6b_i-bdrftgyh890654****_21687_2019-09-09-02-37-40.svg</Name>\\n            <Size>648</Size>\\n            <Type>file</Type>\\n            <Url>https://cloudmetrics-****-hz.oss-cn-hangzhou.aliyuncs.com/112****/ehpc-hz-faRavb****njuik%Oxlftyhujmi0Y****</Url>\\n        </SvgInfo>\\n    </SvgUrls>\\n</GetCloudMetricProfilingResponse>","errorExample":""}]',
      'title' => '获取集群任务性能剖析结果',
      'summary' => '调用GetCloudMetricProfiling获取集群任务性能剖析结果。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListCloudMetricProfilings' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '地域ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-hangzhou',
            'default' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '9A05F620-ED46-4A57-95F1-C67D6D3C5DD2',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Profilings' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ProfilingInfo' => 
                  array (
                    'description' => '历史性能剖析信息。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ProfilingId' => 
                        array (
                          'description' => '剖析ID。',
                          'type' => 'string',
                          'example' => 'ehpc-hz-i-bplukzqgl****_21687_2019-09-09-02-37-40',
                        ),
                        'TriggerTime' => 
                        array (
                          'description' => '触发时间。',
                          'type' => 'string',
                          'example' => '2019-09-09 02:37:40',
                        ),
                        'Pid' => 
                        array (
                          'description' => '进程ID。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '21687',
                        ),
                        'HostName' => 
                        array (
                          'description' => '实例机器名称。',
                          'type' => 'string',
                          'example' => 'compute5',
                        ),
                        'Duration' => 
                        array (
                          'description' => '采集时长。单位：秒

可能值：10~300',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '30',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '实例ID。',
                          'type' => 'string',
                          'example' => 'i-bp1j76z8dlukzqgl0****',
                        ),
                        'Freq' => 
                        array (
                          'description' => '采集频率。单位：Hz

可能值：1~2000',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '2000',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 1,\\n  \\"RequestId\\": \\"9A05F620-ED46-4A57-95F1-C67D6D3C5DD2\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Profilings\\": {\\n    \\"ProfilingInfo\\": [\\n      {\\n        \\"ProfilingId\\": \\"ehpc-hz-i-bplukzqgl****_21687_2019-09-09-02-37-40\\",\\n        \\"TriggerTime\\": \\"2019-09-09 02:37:40\\",\\n        \\"Pid\\": 21687,\\n        \\"HostName\\": \\"compute5\\",\\n        \\"Duration\\": 30,\\n        \\"InstanceId\\": \\"i-bp1j76z8dlukzqgl0****\\",\\n        \\"Freq\\": 2000\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListCloudMetricProfilingsResponse>\\r\\n    <PageNumber>1</PageNumber>\\r\\n    <TotalCount>1</TotalCount>\\r\\n    <PageSize>10</PageSize>\\r\\n    <RequestId>9A05F620-ED46-4A57-95F1-C67D6D3C5DD2</RequestId>\\r\\n    <Profilings>\\r\\n        <ProfilingInfo>\\r\\n            <InstanceId>i-bp1j76z8dlukzqgl****</InstanceId>\\r\\n            <Duration>30</Duration>\\r\\n            <TriggerTime>2019-09-09 02:37:40</TriggerTime>\\r\\n            <ProfilingId>ehpc-hz-i-bplukzqgl****_21687_2019-09-09-02-37-40</ProfilingId>\\r\\n            <Freq>2000</Freq>\\r\\n            <Pid>21687</Pid>\\r\\n            <HostName>compute5</HostName>\\r\\n        </ProfilingInfo>\\r\\n    </Profilings>\\r\\n</ListCloudMetricProfilingsResponse>","errorExample":""}]',
      'title' => '查询集群的历史性能剖析信息',
      'summary' => '调用ListCloudMetricProfilings查询指定集群的历史性能剖析信息。',
    ),
    'GetCloudMetricLogs' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        1 => 
        array (
          'name' => 'From',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询开始时间点。Unix时间戳类型，表示从1970-1-1 00:00:00 UTC计算起的秒数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1583907780',
          ),
        ),
        2 => 
        array (
          'name' => 'To',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询结束时间点。Unix时间戳类型，表示从1970-1-1 00:00:00 UTC计算起的秒数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '1583907790',
          ),
        ),
        3 => 
        array (
          'name' => 'Reverse',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '按时间逆序返回日志。
默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        4 => 
        array (
          'name' => 'AggregationType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '
数据聚合类别。取值范围：
- sum：统计和。
- avg：平均值。
- max：最大值。
- min：最小值。

默认不使用聚合。',
            'type' => 'string',
            'required' => false,
            'example' => 'avg',
          ),
        ),
        5 => 
        array (
          'name' => 'AggregationInterval',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据聚合间隔。单位：秒。

取值范围：1、10、60、600、3600。

默认值：1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
        6 => 
        array (
          'name' => 'MetricScope',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '性能指标的维度。取值范围：
- machine： 整机。
- process：进程。
- network：网络。
- disk：磁盘。',
            'type' => 'string',
            'required' => false,
            'example' => 'network',
          ),
        ),
        7 => 
        array (
          'name' => 'Filter',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '指定过滤条件。JSON格式字符串，包含若干key:value对。key的取值范围：
- InstanceId：节点ID。
- Hostname：节点主机名称。
- NetworkInterface：网络接口名称。
- DiskDevice：磁盘设备名称。',
            'type' => 'string',
            'required' => false,
            'example' => '{"Hostname":"compute000"}',
          ),
        ),
        8 => 
        array (
          'name' => 'MetricCategories',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '
输出性能指标的类别，多个指标用半角逗号（,）隔开。取值范围：
- cpu：CPU。
- memory：内存。


',
            'type' => 'string',
            'required' => false,
            'example' => 'cpu',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '015C2C4D-1884-4EB7-BCD3-C5BB8D7E56DB',
              ),
              'MetricLogs' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'MetricLog' => 
                  array (
                    'description' => '性能数据列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Time' => 
                        array (
                          'description' => '日志时间戳。Unix时间戳类型，表示从1970-1-1 00:00:00 UTC计算起的秒数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1583907780',
                        ),
                        'DiskDevice' => 
                        array (
                          'description' => '磁盘设备名称。',
                          'type' => 'string',
                          'example' => 'vda1',
                        ),
                        'NetworkInterface' => 
                        array (
                          'description' => '网络接口名称。',
                          'type' => 'string',
                          'example' => 'eth1',
                        ),
                        'MetricData' => 
                        array (
                          'description' => 'JSON序列化字符串，包含多个类别性能指标数值。',
                          'type' => 'string',
                          'example' => '{\\"process|cpusage\\":0,\\"process|cpuser\\":0,\\"process|cpusys\\":0,******}',
                        ),
                        'Hostname' => 
                        array (
                          'description' => '节点主机名称。',
                          'type' => 'string',
                          'example' => 'compute000',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '节点ID。',
                          'type' => 'string',
                          'example' => 'i-bp132g97g7zwnvta****',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'ConflictOpt',
            'errorMessage' => 'A conflicting operation is running.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'SlsError',
            'errorMessage' => 'SLS API request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"015C2C4D-1884-4EB7-BCD3-C5BB8D7E56DB\\",\\n  \\"MetricLogs\\": {\\n    \\"MetricLog\\": [\\n      {\\n        \\"Time\\": 1583907780,\\n        \\"DiskDevice\\": \\"vda1\\",\\n        \\"NetworkInterface\\": \\"eth1\\",\\n        \\"MetricData\\": \\"{\\\\\\\\\\\\\\"process|cpusage\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\"process|cpuser\\\\\\\\\\\\\\":0,\\\\\\\\\\\\\\"process|cpusys\\\\\\\\\\\\\\":0,******}\\",\\n        \\"Hostname\\": \\"compute000\\",\\n        \\"InstanceId\\": \\"i-bp132g97g7zwnvta****\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetCloudMetricLogsResponse>\\n    <RequestId>DD186204-A3D6-533C-B57E-576466E92C92</RequestId>\\n    <MetricLogs>\\n        <MetricLog>\\n            <InstanceId>i-uf69kb5o3mz68wpmvadg</InstanceId>\\n            <Hostname>account</Hostname>\\n            <Time>1664603931</Time>\\n            <MetricData>{\\"process|cpusage\\":0,\\"process|cpuser\\":0,\\"process|cpusys\\":0,\\"process|memusage\\":0,\\"process|procName\\":\\"\\\\\\"edac-poller\\\\\\"\\",\\"process|stat\\":\\"\\\\\\"S\\\\\\"\\",\\"process|pid\\":28,\\"process|vss\\":0,\\"process|rss\\":0,\\"network|recv_rate\\":0.6191,\\"network|sent_rate\\":3.5137,\\"network|max_bw\\":4.1328,\\"disk_usage|max_usage\\":0.1016,\\"disk_usage|total\\":\\"null\\",\\"disk_usage|used\\":\\"null\\",\\"disk_usage|avail\\":\\"null\\",\\"disk_usage|usage\\":\\"null\\",\\"cputil|idle\\":1,\\"cputil|user\\":0,\\"cputil|sys\\":0,\\"cputil|iowait\\":0,\\"cputil|usage\\":0,\\"disk_bw|max_bw\\":0,\\"disk_bw|read\\":\\"null\\",\\"disk_bw|write\\":\\"null\\",\\"memory|memusage\\":0.0612,\\"memory|memcached\\":0.7073,\\"memory|swapusage\\":0}</MetricData>\\n        </MetricLog>\\n        <MetricLog>\\n            <InstanceId>i-uf6bbo03kfnm1ld3st4p</InstanceId>\\n            <Hostname>scheduler</Hostname>\\n            <Time>1664603931</Time>\\n            <MetricData>{\\"process|cpusage\\":0.005,\\"process|cpuser\\":0.005,\\"process|cpusys\\":0,\\"process|memusage\\":0.0113,\\"process|procName\\":\\"\\\\\\"AliYunDun\\\\\\"\\",\\"process|stat\\":\\"\\\\\\"S\\\\\\"\\",\\"process|pid\\":16246,\\"process|vss\\":172457984,\\"process|rss\\":10527,\\"network|recv_rate\\":0.959,\\"network|sent_rate\\":4.3711,\\"network|max_bw\\":5.3301,\\"memory|memusage\\":0.0815,\\"memory|memcached\\":0.7892,\\"memory|swapusage\\":0,\\"cputil|idle\\":0.995,\\"cputil|user\\":0.005,\\"cputil|sys\\":0,\\"cputil|iowait\\":0,\\"cputil|usage\\":0.005,\\"disk_usage|max_usage\\":0.1074,\\"disk_usage|total\\":\\"null\\",\\"disk_usage|used\\":\\"null\\",\\"disk_usage|avail\\":\\"null\\",\\"disk_usage|usage\\":\\"null\\",\\"disk_bw|max_bw\\":0,\\"disk_bw|read\\":\\"null\\",\\"disk_bw|write\\":\\"null\\"}</MetricData>\\n        </MetricLog>\\n        <MetricLog>\\n            <InstanceId>i-uf609tfkmu7wct642ob2</InstanceId>\\n            <Hostname>compute000</Hostname>\\n            <Time>1664603931</Time>\\n            <MetricData>{\\"memory|memusage\\":0.058,\\"memory|memcached\\":0.5132,\\"memory|swapusage\\":0,\\"disk_usage|max_usage\\":0.0918,\\"disk_usage|total\\":\\"null\\",\\"disk_usage|used\\":\\"null\\",\\"disk_usage|avail\\":\\"null\\",\\"disk_usage|usage\\":\\"null\\",\\"process|cpusage\\":0,\\"process|cpuser\\":0,\\"process|cpusys\\":0,\\"process|memusage\\":0,\\"process|procName\\":\\"\\\\\\"watchdogd\\\\\\"\\",\\"process|stat\\":\\"\\\\\\"S\\\\\\"\\",\\"process|pid\\":29,\\"process|vss\\":0,\\"process|rss\\":0,\\"network|recv_rate\\":0.6602,\\"network|sent_rate\\":3.5166,\\"network|max_bw\\":4.1768,\\"cputil|idle\\":1,\\"cputil|user\\":0,\\"cputil|sys\\":0,\\"cputil|iowait\\":0,\\"cputil|usage\\":0,\\"disk_bw|max_bw\\":0,\\"disk_bw|read\\":\\"null\\",\\"disk_bw|write\\":\\"null\\"}</MetricData>\\n        </MetricLog>\\n        <MetricLog>\\n            <InstanceId>i-uf6275hb357f2r0zz8iy</InstanceId>\\n            <Hostname>login0</Hostname>\\n            <Time>1664603931</Time>\\n            <MetricData>{\\"memory|memusage\\":0.2802,\\"memory|memcached\\":0.6,\\"memory|swapusage\\":0,\\"disk_usage|max_usage\\":0.1609,\\"disk_usage|total\\":\\"null\\",\\"disk_usage|used\\":\\"null\\",\\"disk_usage|avail\\":\\"null\\",\\"disk_usage|usage\\":\\"null\\",\\"network|recv_rate\\":0.9404,\\"network|sent_rate\\":5.2568,\\"network|max_bw\\":6.1973,\\"process|cpusage\\":0,\\"process|cpuser\\":0,\\"process|cpusys\\":0,\\"process|memusage\\":0,\\"process|procName\\":\\"\\\\\\"rpciod\\\\\\"\\",\\"process|stat\\":\\"\\\\\\"S\\\\\\"\\",\\"process|pid\\":2590,\\"process|vss\\":0,\\"process|rss\\":0,\\"cputil|idle\\":0.9949,\\"cputil|user\\":0,\\"cputil|sys\\":0.0051,\\"cputil|iowait\\":0,\\"cputil|usage\\":0.0051,\\"disk_bw|max_bw\\":4,\\"disk_bw|read\\":\\"null\\",\\"disk_bw|write\\":\\"null\\"}</MetricData>\\n        </MetricLog>\\n    </MetricLogs>\\n</GetCloudMetricLogsResponse>","errorExample":""}]',
      'title' => '读取性能指标日志',
      'summary' => '调用GetCloudMetricLogs读取EHPC性能指标（CloudMetrics）日志。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetAccountingReport' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'StartTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询开始时间点。Unix时间戳类型，表示从1970-1-1 00:00:00 UTC计算起的秒数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'example' => '1576922873',
          ),
        ),
        2 => 
        array (
          'name' => 'EndTime',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询结束时间点。Unix时间戳类型，表示从1970-1-1 00:00:00 UTC计算起的秒数。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'docRequired' => true,
            'example' => '1577441873',
          ),
        ),
        3 => 
        array (
          'name' => 'ReportType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '
查询类别。取值范围：
- total_report：查询不同维度的核时数。
- job_report：统计节点的历史节点数据。
- number_report：查询不同维度的作业信息。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'job_report',
          ),
        ),
        4 => 
        array (
          'name' => 'FilterValue',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '查询对应维度的实际名称。取值范围：
- 当参数Dim取值为user时，FilterValue取值为指定的用户名称。
- 当参数Dim取值为queue时，FilterValue取值为指定的队列名称。
- 当参数Dim取值为instance时，FilterValue取值为实例名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'userNo1',
          ),
        ),
        5 => 
        array (
          'name' => 'Dim',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '
查询维度。取值范围：
- user：按用户查询。
- queue：按队列查询。
- instance：按实例查询。',
            'type' => 'string',
            'required' => false,
            'example' => 'user',
          ),
        ),
        6 => 
        array (
          'name' => 'JobId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '作业ID。',
            'type' => 'string',
            'required' => false,
            'example' => '[{Id: 1.scheduler}]',
          ),
        ),
        7 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
          ),
        ),
        8 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TotalCoreTime' => 
              array (
                'description' => '查询的集群总核数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '261300',
              ),
              'Metrics' => 
              array (
                'description' => 'JSON序列化的列表，包含Data中每条记录的列名称。',
                'type' => 'string',
                'example' => '[\\"user\\",\\"coreTime\\",\\"usedMem\\"]',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'B1DCB399-9333-4B38-A35A-0BDFABC71881',
              ),
              'PageSize' => 
              array (
                'description' => '显示本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'PageNumber' => 
              array (
                'description' => '显示当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '显示列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'Data' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'Data' => 
                  array (
                    'description' => 'JSON序列化的列表，列表包含多条记录。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => 'JSON序列化的列表，列表包含多条记录。',
                      'type' => 'string',
                      'example' => '[[\\"userNo1\\",49856,7062192],[\\"userNo2\\",29904,4317280]]',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
          3 => 
          array (
            'errorCode' => 'Cluster.NotSupported',
            'errorMessage' => 'Current cluster does not support this operation.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'ObjectNotFound',
            'errorMessage' => 'The specified object is not found.',
          ),
          2 => 
          array (
            'errorCode' => 'ComputeNotFound',
            'errorMessage' => 'The specified compute node does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'SlsError',
            'errorMessage' => 'SLS API request failed.',
          ),
          1 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
          2 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TotalCoreTime\\": 261300,\\n  \\"Metrics\\": \\"[\\\\\\\\\\\\\\"user\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"coreTime\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"usedMem\\\\\\\\\\\\\\"]\\",\\n  \\"RequestId\\": \\"B1DCB399-9333-4B38-A35A-0BDFABC71881\\",\\n  \\"PageSize\\": 10,\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 10,\\n  \\"Data\\": {\\n    \\"Data\\": [\\n      \\"[[\\\\\\\\\\\\\\"userNo1\\\\\\\\\\\\\\",49856,7062192],[\\\\\\\\\\\\\\"userNo2\\\\\\\\\\\\\\",29904,4317280]]\\"\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<GetAccountingReportResponse>\\n    <Metrics>[\\"user\\",\\"coreTime\\",\\"usedMem\\"]</Metrics>\\n    <PageNumber>1</PageNumber>\\n    <PageSize>10</PageSize>\\n    <RequestId>B1DCB399-9333-4B38-A35A-0BDFABC71881</RequestId>\\n    <Data>[[\\"userNo1\\",49856,7062192],[\\"userNo2\\",29904,4317280]]</Data>\\n    <TotalCoreTime>261300</TotalCoreTime>\\n    <TotalCount>10</TotalCount>\\n</GetAccountingReportResponse>","errorExample":""}]',
      'title' => '获取资源报表信息',
      'summary' => '调用GetAccountingReport获取指定集群的资源报表信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListClusterLogs' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '显示的页码，起始值为1。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。取值范围：1~100。

默认值：10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '100',
            'example' => '10',
            'default' => '20',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'BBC2F93D-003A-49C4-850C-B826EECF6667',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '2',
              ),
              'ClusterId' => 
              array (
                'description' => '集群ID。',
                'type' => 'string',
                'example' => 'ehpc-hz-FYUr32****',
              ),
              'Logs' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'LogInfo' => 
                  array (
                    'description' => '操作日志简要信息数组。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Operation' => 
                        array (
                          'description' => '操作类型。可能值：

- CreateCluster
- StartCluster
- StopCluster
- DeleteCluster
- AddNodes
- StartNodes
- ResetNodes
- StopNodes
- DeleteNodes',
                          'type' => 'string',
                          'example' => 'CreateCluster',
                        ),
                        'Message' => 
                        array (
                          'description' => '日志内容。',
                          'type' => 'string',
                          'example' => 'Begin to create cluster',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '日志创建时间。',
                          'type' => 'string',
                          'example' => '2019-09-18T13:24:13.000',
                        ),
                        'Level' => 
                        array (
                          'description' => '日志级别。可能值：

- warn
- error
- infor',
                          'type' => 'string',
                          'example' => 'info',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 1,\\n  \\"PageNumber\\": 1,\\n  \\"RequestId\\": \\"BBC2F93D-003A-49C4-850C-B826EECF6667\\",\\n  \\"TotalCount\\": 2,\\n  \\"ClusterId\\": \\"ehpc-hz-FYUr32****\\",\\n  \\"Logs\\": {\\n    \\"LogInfo\\": [\\n      {\\n        \\"Operation\\": \\"CreateCluster\\",\\n        \\"Message\\": \\"Begin to create cluster\\",\\n        \\"CreateTime\\": \\"2019-09-18T13:24:13.000\\",\\n        \\"Level\\": \\"info\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListClusterLogsResponse>\\r\\n\\t<PageNumber>1</PageNumber>\\r\\n\\t<Logs>\\r\\n\\t\\t<LogInfo>\\r\\n\\t\\t\\t<Operation>CreateCluster</Operation>\\r\\n\\t\\t\\t<Message>Begin to create cluster</Message>\\r\\n\\t\\t\\t<CreateTime>2019-09-18T13:24:13.000Z</CreateTime>\\r\\n\\t\\t\\t<Level>info</Level>\\r\\n\\t\\t</LogInfo>\\r\\n\\t</Logs>\\r\\n\\t<TotalCount>1</TotalCount>\\r\\n\\t<ClusterId>ehpc-hz-FYUr32****</ClusterId>\\r\\n\\t<PageSize>20</PageSize>\\r\\n\\t<RequestId>BBC2F93D-003A-49C4-850C-B826EECF6667</RequestId>\\r\\n</ListClusterLogsResponse>","errorExample":""}]',
      'title' => '查询集群近期操作记录',
      'summary' => '调用ListClusterLogs查询集群三天内的操作记录。',
    ),
    'ListCurrentClientVersion' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'ClientVersion' => 
              array (
                'description' => 'ehpcutil最新版本号。',
                'type' => 'string',
                'example' => '1.1.1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"ClientVersion\\": \\"1.1.1\\",\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\"\\n}","errorExample":""},{"type":"xml","example":"<ListCurrentClientVersionResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\r\\n    <ClientVersion>1.0.24</ClientVersion>\\r\\n</ListCurrentClientVersionResponse>","errorExample":""}]',
      'title' => '查询ehpcutil最新版本号',
      'summary' => '调用ListCurrentClientVersion查询集群客户端（ehpcutil）的最新版本号。',
    ),
    'UpgradeClient' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'ClientVersion',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'ehpcutil将升级到的版本，默认升级到最新版本。您可以调用[ListCurrentClientVersion](~~87223~~)查询ehpcutil最新版本号。',
            'type' => 'string',
            'required' => false,
            'example' => '2.0.0',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '4994fbcd-2a09-4045-b2b2-2c3bee8e9296',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidClusterStatus',
            'errorMessage' => 'The operation failed due to invalid cluster status.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidClientVersion',
            'errorMessage' => 'The client version is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"4994fbcd-2a09-4045-b2b2-2c3bee8e9296\\"\\n}","errorExample":""},{"type":"xml","example":"<RequestId>4994fbcd-2a09-4045-b2b2-2c3bee8e9296</RequestId>","errorExample":""}]',
      'title' => '升级ehpcutil到目标版本',
      'summary' => '调用UpgradeClient升级集群客户端（ehpcutil）到目标版本。',
      'extraInfo' => ' ',
    ),
    'ListUpgradeClients' => 
    array (
      'summary' => '调用ListUpgradeClients查询集群当前可升级的客户端（ehpcutil）最新版本和历史升级操作。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '地域ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '89A1AC0F-4A6C-4F3D-98F9-BEF9A823****',
              ),
              'LatestVersion' => 
              array (
                'description' => '当前已发布的最新ehpcutil版本。',
                'type' => 'string',
                'example' => '1.2.22',
              ),
              'ClientRecords' => 
              array (
                'description' => '集群的ehpcutil升级操作记录。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '集群的ehpcutil升级操作记录。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'SubUid' => 
                    array (
                      'description' => '升级ehpcutil版本的用户ID。',
                      'type' => 'string',
                      'example' => '129******84',
                    ),
                    'OldVersion' => 
                    array (
                      'description' => '升级前的ehpcutil版本。',
                      'type' => 'string',
                      'example' => '1.2.16',
                    ),
                    'NewVersion' => 
                    array (
                      'description' => '升级后的ehpcutil版本。',
                      'type' => 'string',
                      'example' => '1.2.21',
                    ),
                    'UpdateTime' => 
                    array (
                      'description' => '操作时间。',
                      'type' => 'string',
                      'example' => '2022-08-26T06:26:57.000Z',
                    ),
                  ),
                ),
              ),
              'CurrentVersion' => 
              array (
                'description' => '集群当前的ehpcutil版本。',
                'type' => 'string',
                'example' => '1.2.21',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"89A1AC0F-4A6C-4F3D-98F9-BEF9A823****\\",\\n  \\"LatestVersion\\": \\"1.2.22\\",\\n  \\"ClientRecords\\": [\\n    {\\n      \\"SubUid\\": \\"129******84\\",\\n      \\"OldVersion\\": \\"1.2.16\\",\\n      \\"NewVersion\\": \\"1.2.21\\",\\n      \\"UpdateTime\\": \\"2022-08-26T06:26:57.000Z\\"\\n    }\\n  ],\\n  \\"CurrentVersion\\": \\"1.2.21\\"\\n}","errorExample":""},{"type":"xml","example":"<ListUpgradeClientsResponse>\\n    <RequestId>89A1AC0F-4A6C-4F3D-98F9-BEF9A823****</RequestId>\\n    <LatestVersion>1.2.22</LatestVersion>\\n    <ClientRecords>\\n        <SubUid>129******84</SubUid>\\n        <OldVersion>1.2.16</OldVersion>\\n        <NewVersion>1.2.21</NewVersion>\\n        <UpdateTime>2022-08-26T06:26:57.000Z</UpdateTime>\\n    </ClientRecords>\\n    <CurrentVersion>1.2.21</CurrentVersion>\\n</ListUpgradeClientsResponse>","errorExample":""}]',
      'title' => '查询集群当前可升级的ehpcutil最新版本和历史升级操作',
    ),
    'QueryServicePackAndPrice' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'OriginalAmount' => 
              array (
                'description' => '该地域所有集群总核数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '3191',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '3B2E8108-7068-413E-BCA7-CAAB25D46408',
              ),
              'DiscountPrice' => 
              array (
                'description' => '每小时按量付费的折扣价。单位：元。',
                'type' => 'number',
                'format' => 'float',
                'example' => '0.418',
              ),
              'TradePrice' => 
              array (
                'description' => '最终每小时按量付费的价格。单位：元。',
                'type' => 'number',
                'format' => 'float',
                'example' => '2.922',
              ),
              'OriginalPrice' => 
              array (
                'description' => '每小时按量付费的价格。单位：元。',
                'type' => 'number',
                'format' => 'float',
                'example' => '3.34',
              ),
              'ChargeAmount' => 
              array (
                'description' => '按量付费核数，为集群总核数减去服务包规格和免费核数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '167',
              ),
              'Currency' => 
              array (
                'description' => '货币单位。',
                'type' => 'string',
                'example' => 'CNY',
              ),
              'RegionId' => 
              array (
                'description' => '地域ID。',
                'type' => 'string',
                'example' => 'cn-hangzhou',
              ),
              'ServicePack' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ServicePackInfo' => 
                  array (
                    'description' => 'E-HPC服务包列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => 'E-HPC服务包列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'EndTime' => 
                        array (
                          'description' => '服务包到期时间。Unix时间戳类型，表示从1970-1-1 00:00:00 UTC计算起的秒数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1612705988',
                        ),
                        'Capacity' => 
                        array (
                          'description' => '服务包规格。单位：核。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '2000',
                        ),
                        'StartTime' => 
                        array (
                          'description' => '服务包购买时间。Unix时间戳类型，表示从1970-1-1 00:00:00 UTC计算起的秒数。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '1610027588',
                        ),
                        'InstanceName' => 
                        array (
                          'description' => '服务包名称。',
                          'type' => 'string',
                          'example' => 'EHPCBAG-cn-78v12vbme0****',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'OrderError',
            'errorMessage' => 'An order request error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          2 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          3 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"OriginalAmount\\": 3191,\\n  \\"RequestId\\": \\"3B2E8108-7068-413E-BCA7-CAAB25D46408\\",\\n  \\"DiscountPrice\\": 0.418,\\n  \\"TradePrice\\": 2.922,\\n  \\"OriginalPrice\\": 3.34,\\n  \\"ChargeAmount\\": 167,\\n  \\"Currency\\": \\"CNY\\",\\n  \\"RegionId\\": \\"cn-hangzhou\\",\\n  \\"ServicePack\\": {\\n    \\"ServicePackInfo\\": [\\n      {\\n        \\"EndTime\\": 1612705988,\\n        \\"Capacity\\": 2000,\\n        \\"StartTime\\": 1610027588,\\n        \\"InstanceName\\": \\"EHPCBAG-cn-78v12vbme0****\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<QueryServicePackAndPriceResponse>\\n    <OriginalPrice>3.34</OriginalPrice>\\n    <RequestId>3B2E8108-7068-413E-BCA7-CAAB25D46408</RequestId>\\n    <DiscountPrice>0.418</DiscountPrice>\\n    <Currency>CNY</Currency>\\n    <ServicePack>\\n        <ServicePackInfo>\\n            <InstanceName>EHPCBAG-cn-78v12vbme0****</InstanceName>\\n            <EndTime>1612705988</EndTime>\\n            <Capacity>2000</Capacity>\\n            <StartTime>1610027588</StartTime>\\n        </ServicePackInfo>\\n    </ServicePack>\\n    <RegionId>cn-hangzhou</RegionId>\\n    <TradePrice>2.922</TradePrice>\\n    <OriginalAmount>3191</OriginalAmount>\\n    <ChargeAmount>167</ChargeAmount>\\n</QueryServicePackAndPriceResponse>","errorExample":""}]',
      'title' => '查询服务包和按量付费信息',
      'summary' => '调用QueryServicePackAndPrice查询集群的总核数、购买的服务包信息，以及当前按量付费的情况。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'AddSecurityGroup' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'SecurityGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '安全组ID。

您可以调用[DescribeSecurityGroups](~~25556~~)查询可以使用的安全组。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'sg-bp13n61xsydodfyg****',
          ),
        ),
        2 => 
        array (
          'name' => 'ClientToken',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。更多信息，请参见[如何保证幂等性](~~25693~~)。',
            'type' => 'string',
            'required' => false,
            'example' => '123e4567-e89b-12d3-a456-426655440000',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidSecurityGroup',
            'errorMessage' => 'The security group ID is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'SecurityGroupNotSupported',
            'errorMessage' => 'The security group is not supported.',
          ),
          1 => 
          array (
            'errorCode' => 'SecurityGroupAlreadyExists',
            'errorMessage' => 'The security group already exists.',
          ),
          2 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'ECS api request error',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'Aliyun api service error',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\"\\n}","errorExample":""},{"type":"xml","example":"<AddSecurityGroupResponse>\\r\\n      <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\r\\n</AddSecurityGroupResponse>","errorExample":""}]',
      'title' => '将集群加入到指定的安全组',
      'summary' => '调用AddSecurityGroup将集群加入到指定的安全组。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListSecurityGroups' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'TotalCount' => 
              array (
                'description' => '集群加入的安全组总个数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '6D9A3378-61CA-4415-BEB0-1168C2A15975',
              ),
              'SecurityGroups' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'SecurityGroup' => 
                  array (
                    'description' => '安全组ID。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '安全组ID。',
                      'type' => 'string',
                      'example' => '["sg-bp13n61xsydodfyg****"]',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'ECS api request error',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'Aliyun api service error',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"TotalCount\\": 1,\\n  \\"RequestId\\": \\"6D9A3378-61CA-4415-BEB0-1168C2A15975\\",\\n  \\"SecurityGroups\\": {\\n    \\"SecurityGroup\\": [\\n      \\"[\\\\\\"sg-bp13n61xsydodfyg****\\\\\\"]\\"\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListSecurityGroupsResponse>\\n    <SecurityGroups>\\n        <SecurityGroup>sg-bp13n61xsydodfyg****</SecurityGroup>\\n    </SecurityGroups>\\n    <TotalCount>1</TotalCount>\\n    <RequestId>6D9A3378-61CA-4415-BEB0-1168C2A15975</RequestId>\\n</ListSecurityGroupsResponse>","errorExample":""}]',
      'title' => '查询集群加入的安全组列表',
      'summary' => '调用ListSecurityGroups查询指定集群加入的安全组列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteSecurityGroup' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'SecurityGroupId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '安全组ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'sg-bp13n61xsydodfyg****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'SecurityGroupNotSupported',
            'errorMessage' => 'The security group is not supported.',
          ),
          2 => 
          array (
            'errorCode' => 'InvalidSecurityGroup',
            'errorMessage' => 'The security group ID is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'ECS api request error',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'Aliyun api service error',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\"\\n}","errorExample":""},{"type":"xml","example":"<AddSecurityGroupResponse>\\r\\n        <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\r\\n</AddSecurityGroupResponse>","errorExample":""}]',
      'title' => '将集群移出指定的安全组',
      'summary' => '调用DeleteSecurityGroup将集群移出指定的安全组。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'TagResources' => 
    array (
      'summary' => '调用TagResources为指定资源创建并绑定标签。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '地域',
            'description' => '资源所属的地域ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'ResourceType',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '资源类型',
            'description' => '资源类型。目前仅支持cluster，即E-HPC集群。',
            'type' => 'string',
            'required' => true,
            'example' => 'cluster',
          ),
        ),
        2 => 
        array (
          'name' => 'ResourceId',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'title' => '资源ID,最多 50个子项',
            'description' => '资源ID，最多50个。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '资源ID，最多50个。',
              'type' => 'string',
              'required' => false,
              'example' => 'ehpc-hz-xxxx',
            ),
            'required' => true,
            'maxItems' => 51,
          ),
        ),
        3 => 
        array (
          'name' => 'Tag',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'title' => '标签列表，最多包含20个子项',
            'description' => '标签列表，最多20个。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '标签列表，最多20个。',
              'type' => 'object',
              'properties' => 
              array (
                'Key' => 
                array (
                  'title' => '标签键',
                  'description' => '标签键。一旦传入该值，则不允许为空字符串。最多支持128个字符，不能以`aliyun`和`acs:`开头，不能包含`http://`或者`https://`。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'TestKey',
                ),
                'Value' => 
                array (
                  'title' => '标签值',
                  'description' => '标签值。一旦传入该值，则不允许为空字符串。最多支持128个字符，不能以`aliyun`和`acs:`开头，不能包含`http://`或者`https://`。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'TestValue',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 21,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'Duplicate.TagKey',
            'errorMessage' => 'The Tag.N.Key contain duplicate key.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'TagError',
            'errorMessage' => 'TAG API request failed.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E\\"\\n}","errorExample":""},{"type":"xml","example":"<TagResourcesResponse>\\n    <RequestId>473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E</RequestId>\\n</TagResourcesResponse>","errorExample":""}]',
      'title' => '为指定资源创建并绑定标签',
    ),
    'ListTagResources' => 
    array (
      'summary' => '调用ListTagResources查询资源绑定的标签信息。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '地域',
            'description' => '资源所属的地域ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'NextToken',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '下一个查询开始Token',
            'description' => '下一个查询开始Token。',
            'type' => 'string',
            'required' => false,
            'example' => 'caeba0bbb2be03f84eb48b699f0axxxx',
          ),
        ),
        2 => 
        array (
          'name' => 'ResourceType',
          'in' => 'query',
          'schema' => 
          array (
            'title' => '资源类型',
            'description' => '资源类型定义。目前仅支持cluster，即E-HPC集群。',
            'type' => 'string',
            'required' => true,
            'example' => 'cluster',
          ),
        ),
        3 => 
        array (
          'name' => 'ResourceId',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'title' => '资源ID,最多 50个子项',
            'description' => '资源ID，最多50个。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '资源ID，最多50个。',
              'type' => 'string',
              'required' => false,
              'example' => 'ehpc-hz-xxxx',
            ),
            'required' => false,
            'maxItems' => 51,
          ),
        ),
        4 => 
        array (
          'name' => 'Tag',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'title' => '标签列表，最多包含20个子项',
            'description' => '标签列表，最多20个。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '标签列表，最多20个。',
              'type' => 'object',
              'properties' => 
              array (
                'Key' => 
                array (
                  'title' => '标签键',
                  'description' => '标签键。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'TestKey',
                ),
                'Value' => 
                array (
                  'title' => '标签值',
                  'description' => '标签值。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'TestValue',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 21,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'NextToken' => 
              array (
                'title' => '下一个查询开始Token，NextToken为空说明没有下一个',
                'description' => '下一个查询开始Token，NextToken为空说明没有下一个。',
                'type' => 'string',
                'example' => 'caeba0bbb2be03f84eb48b699f0axxxx',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '484256DA-D816-44D2-9D86-B6EE4D5BA78C',
              ),
              'TagResources' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'TagResource' => 
                  array (
                    'title' => '资源列表',
                    'description' => '标签列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'ResourceType' => 
                        array (
                          'title' => '资源类型',
                          'description' => '资源类型。目前仅支持cluster，即E-HPC集群。',
                          'type' => 'string',
                          'example' => 'cluster',
                        ),
                        'TagValue' => 
                        array (
                          'title' => '标签值',
                          'description' => '标签值。',
                          'type' => 'string',
                          'example' => 'TestValue',
                        ),
                        'ResourceId' => 
                        array (
                          'title' => '资源ID',
                          'description' => '资源ID，即集群ID。',
                          'type' => 'string',
                          'example' => 'ehpc-hz-xxxx',
                        ),
                        'TagKey' => 
                        array (
                          'title' => '标签键',
                          'description' => '标签键。',
                          'type' => 'string',
                          'example' => 'TestKey',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'TagError',
            'errorMessage' => 'TAG API request failed.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"NextToken\\": \\"caeba0bbb2be03f84eb48b699f0axxxx\\",\\n  \\"RequestId\\": \\"484256DA-D816-44D2-9D86-B6EE4D5BA78C\\",\\n  \\"TagResources\\": {\\n    \\"TagResource\\": [\\n      {\\n        \\"ResourceType\\": \\"cluster\\",\\n        \\"TagValue\\": \\"TestValue\\",\\n        \\"ResourceId\\": \\"ehpc-hz-xxxx\\",\\n        \\"TagKey\\": \\"TestKey\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListTagResourcesResponse>\\n    <NextToken>caeba0bbb2be03f84eb48b699f0axxxx</NextToken>\\n    <RequestId>484256DA-D816-44D2-9D86-B6EE4D5BA78C</RequestId>\\n    <TagResources>\\n        <ResourceType>cluster</ResourceType>\\n        <TagValue>TestValue</TagValue>\\n        <ResourceId>ehpc-hz-xxxx</ResourceId>\\n        <TagKey>TestKey</TagKey>\\n    </TagResources>\\n</ListTagResourcesResponse>","errorExample":""}]',
      'title' => '查询资源绑定的标签信息',
    ),
    'UnTagResources' => 
    array (
      'summary' => '调用UnTagResources为指定的资源解绑标签。',
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源所属的地域ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'ResourceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '资源类型。目前仅支持cluster，即E-HPC集群。',
            'type' => 'string',
            'required' => true,
            'example' => 'cluster',
          ),
        ),
        2 => 
        array (
          'name' => 'ResourceId',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '资源ID，最多50个。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '资源ID，最多50个。',
              'type' => 'string',
              'required' => false,
              'example' => 'ehpc-hz-xxxx',
            ),
            'required' => true,
            'maxItems' => 50,
          ),
        ),
        3 => 
        array (
          'name' => 'TagKey',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '资源的标签键，最多20个。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '资源的标签键。',
              'type' => 'string',
              'required' => false,
              'example' => 'TestKey',
            ),
            'required' => false,
            'maxItems' => 50,
          ),
        ),
        4 => 
        array (
          'name' => 'All',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否解绑资源上全部的标签。当请求中未设置TagKey.N时，该参数才有效。取值范围：

- true

- false

默认值：false。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'TagError',
            'errorMessage' => 'TAG API request failed.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\"\\n}","errorExample":""},{"type":"xml","example":"<UnTagResourcesResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\n</UnTagResourcesResponse>","errorExample":""}]',
      'title' => '为指定资源解绑标签',
    ),
    'ListRegions' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'Regions' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'RegionInfo' => 
                  array (
                    'description' => '地域信息组成的列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '地域信息组成的列表。',
                      'type' => 'object',
                      'properties' => 
                      array (
                        'LocalName' => 
                        array (
                          'description' => '地域名称。',
                          'type' => 'string',
                          'example' => '华东1（杭州）',
                        ),
                        'RegionId' => 
                        array (
                          'description' => '地域ID。',
                          'type' => 'string',
                          'example' => 'cn-hangzhou',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'OrderError',
            'errorMessage' => 'An order request error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"Regions\\": {\\n    \\"RegionInfo\\": [\\n      {\\n        \\"LocalName\\": \\"华东1（杭州）\\",\\n        \\"RegionId\\": \\"cn-hangzhou\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListRegionsResponse>\\n    <Regions>\\n        <RegionInfo>\\n            <RegionId>cn-hangzhou</RegionId>\\n            <LocalName>华东 1 (杭州)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>cn-beijing</RegionId>\\n            <LocalName>华北 2 (北京)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>cn-shanghai</RegionId>\\n            <LocalName>华东 2 (上海)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>cn-shenzhen</RegionId>\\n            <LocalName>华南 1 (深圳)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>cn-qingdao</RegionId>\\n            <LocalName>华北 1 (青岛)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>cn-zhangjiakou</RegionId>\\n            <LocalName>华北 3 (张家口)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>cn-huhehaote</RegionId>\\n            <LocalName>华北 5 (呼和浩特)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>ap-southeast-1</RegionId>\\n            <LocalName>亚太东南 1 (新加坡)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>cn-hongkong</RegionId>\\n            <LocalName>中国 (香港)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>eu-central-1</RegionId>\\n            <LocalName>欧洲中部 1 (法兰克福)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>ap-southeast-2</RegionId>\\n            <LocalName>亚太东南 2 (悉尼)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>ap-northeast-1</RegionId>\\n            <LocalName>亚太东北 1 (东京)</LocalName>\\n        </RegionInfo>\\n        <RegionInfo>\\n            <RegionId>cn-wulanchabu</RegionId>\\n            <LocalName>华北 6（乌兰察布）</LocalName>\\n        </RegionInfo>\\n    </Regions>\\n</ListRegionsResponse>","errorExample":""}]',
      'title' => '查询可以使用E-HPC的地域列表',
      'summary' => '调用ListRegions查询可以使用E-HPC的地域列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetCommonImage' => 
    array (
      'summary' => '获取ehpc当前提供的镜像，包括intel oneapi镜像，pytorch镜像，TensorFlow镜像等。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ImageName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要获取的镜像名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'tensorflow-21.09-tf1-py3.sif',
          ),
        ),
        1 => 
        array (
          'name' => 'ContainType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像类型。',
            'type' => 'string',
            'required' => false,
            'example' => 'singularity',
          ),
        ),
        2 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID，将需要的镜像存入此集群。',
            'type' => 'string',
            'required' => false,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        3 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群所在的地域ID。您可以通过调用[describeregions](~~36063~~)接口获取地域ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'cn-hangzhou',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'successResponse',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => 'Id of the request',
                'type' => 'string',
                'example' => '1DB7684F-4F93-5314-8D3F-F28EE0788E9E',
              ),
            ),
            'enumValueTitles' => 
            array (
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"RequestId\\": \\"1DB7684F-4F93-5314-8D3F-F28EE0788E9E\\"\\n}","type":"json"}]',
      'title' => '获取常用镜像',
    ),
    'GetUserImage' => 
    array (
      'summary' => '调用GetUserImage将您保存在OSS中的自有镜像，拉取到指定集群中，并按E-HPC标准镜像管理方式进行管理。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'ehpc-hz-ibug69*****',
          ),
        ),
        1 => 
        array (
          'name' => 'ImageName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像名称。',
            'type' => 'string',
            'required' => true,
            'example' => 'test.sif',
          ),
        ),
        2 => 
        array (
          'name' => 'ContainerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像类型，目前只支持singularity。',
            'type' => 'string',
            'required' => true,
            'example' => 'singularity',
          ),
        ),
        3 => 
        array (
          'name' => 'ImagePath',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'OSS Bucket中的镜像存放路径。',
            'type' => 'string',
            'required' => true,
            'example' => 'testUserImages',
          ),
        ),
        4 => 
        array (
          'name' => 'OSSBucket',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '存放镜像的OSS Bucket。',
            'type' => 'string',
            'required' => true,
            'example' => 'XXXXXXX',
          ),
        ),
        5 => 
        array (
          'name' => 'OSSEndPoint',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'OSS的Endpoint。',
            'type' => 'string',
            'required' => true,
            'example' => 'vpc***-oss-cn-hangzhou.aliyuncs.com',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'C84FB8EF-5580-4B82-9BDE-6657814C****',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"errorExample":"","example":"{\\n  \\"RequestId\\": \\"C84FB8EF-5580-4B82-9BDE-6657814C****\\"\\n}","type":"json"}]',
      'title' => '将OSS中的镜像拉取到集群中',
    ),
    'SummaryImages' => 
    array (
      'summary' => '调用SummaryImages获取指定集群上的全部镜像名称，便于您管理集群上的镜像。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要获取镜像信息的集群ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'ehpc-hz-jeJki6****',
          ),
        ),
        1 => 
        array (
          'name' => 'ContainerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要获取镜像的类型，目前只支持singularity。',
            'type' => 'string',
            'required' => true,
            'example' => 'singularity',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '896D338C-E4F4-41EC-A154-D605E5DE****',
              ),
              'ImagesName' => 
              array (
                'description' => '指定集群上的全部镜像名称。',
                'type' => 'string',
                'example' => '{"summaryImages":["gromacs.sif","linpack.sif","sccIntelMPI1.sif","test.sif","usergromac.sif.user"]}',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"896D338C-E4F4-41EC-A154-D605E5DE****\\",\\n  \\"ImagesName\\": \\"{\\\\\\"summaryImages\\\\\\":[\\\\\\"gromacs.sif\\\\\\",\\\\\\"linpack.sif\\\\\\",\\\\\\"sccIntelMPI1.sif\\\\\\",\\\\\\"test.sif\\\\\\",\\\\\\"usergromac.sif.user\\\\\\"]}\\"\\n}","errorExample":""},{"type":"xml","example":"<SummaryImagesResponse>\\n    <RequestId>896D338C-E4F4-41EC-A154-D605E5DE****</RequestId>\\n    <ImagesName>{\\"summaryImages\\":[\\"gromacs.sif\\",\\"linpack.sif\\",\\"sccIntelMPI1.sif\\",\\"test.sif\\",\\"usergromac.sif.user\\"]}</ImagesName>\\n</SummaryImagesResponse>","errorExample":""}]',
      'title' => '获取指定集群上的全部镜像名称',
    ),
    'SummaryImagesInfo' => 
    array (
      'summary' => '调用SummaryImagesInfo获取指定集群上已有镜像的详细信息，包括镜像获取日期，镜像大小等内容。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要获取镜像信息的集群ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'ehpc-hz-ibug699XXX',
          ),
        ),
        1 => 
        array (
          'name' => 'ContainerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要获取镜像的类型，目前只支持singularity。',
            'type' => 'string',
            'required' => false,
            'example' => 'singularity',
          ),
        ),
        2 => 
        array (
          'name' => 'ImageName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像名称。您可以调用[SummaryImages](~~440783~~)查询指定集群上的全部镜像名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'test.sif',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '896D338C-E4F4-41EC-A154-D605E5DE****',
              ),
              'ImagesInfo' => 
              array (
                'description' => '镜像详细信息。',
                'type' => 'string',
                'example' => '{"summaryImagesInfo":[{"ImageName":"gromacs.sif","ImageSize":"4","CreateTime":"16:18","CreateDate":"Apr.1"},{"ImageName":"linpack.sif","ImageSize":"665847525","CreateTime":"14:45","CreateDate":"Apr.1"},{"ImageName":"sccIntelMPI1.sif","ImageSize":"665847525","CreateTime":"14:41","CreateDate":"Apr.1"},{"ImageName":"test.sif","ImageSize":"24","CreateTime":"12:25","CreateDate":"Apr.20"},{"ImageName":"usergromac.sif.user","ImageSize":"4","CreateTime":"15:16","CreateDate":"Apr.19"}]}',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"896D338C-E4F4-41EC-A154-D605E5DE****\\",\\n  \\"ImagesInfo\\": \\"{\\\\\\"summaryImagesInfo\\\\\\":[{\\\\\\"ImageName\\\\\\":\\\\\\"gromacs.sif\\\\\\",\\\\\\"ImageSize\\\\\\":\\\\\\"4\\\\\\",\\\\\\"CreateTime\\\\\\":\\\\\\"16:18\\\\\\",\\\\\\"CreateDate\\\\\\":\\\\\\"Apr.1\\\\\\"},{\\\\\\"ImageName\\\\\\":\\\\\\"linpack.sif\\\\\\",\\\\\\"ImageSize\\\\\\":\\\\\\"665847525\\\\\\",\\\\\\"CreateTime\\\\\\":\\\\\\"14:45\\\\\\",\\\\\\"CreateDate\\\\\\":\\\\\\"Apr.1\\\\\\"},{\\\\\\"ImageName\\\\\\":\\\\\\"sccIntelMPI1.sif\\\\\\",\\\\\\"ImageSize\\\\\\":\\\\\\"665847525\\\\\\",\\\\\\"CreateTime\\\\\\":\\\\\\"14:41\\\\\\",\\\\\\"CreateDate\\\\\\":\\\\\\"Apr.1\\\\\\"},{\\\\\\"ImageName\\\\\\":\\\\\\"test.sif\\\\\\",\\\\\\"ImageSize\\\\\\":\\\\\\"24\\\\\\",\\\\\\"CreateTime\\\\\\":\\\\\\"12:25\\\\\\",\\\\\\"CreateDate\\\\\\":\\\\\\"Apr.20\\\\\\"},{\\\\\\"ImageName\\\\\\":\\\\\\"usergromac.sif.user\\\\\\",\\\\\\"ImageSize\\\\\\":\\\\\\"4\\\\\\",\\\\\\"CreateTime\\\\\\":\\\\\\"15:16\\\\\\",\\\\\\"CreateDate\\\\\\":\\\\\\"Apr.19\\\\\\"}]}\\"\\n}","errorExample":""},{"type":"xml","example":"<SummaryImagesInfoResponse>\\n    <RequestId>896D338C-E4F4-41EC-A154-D605E5DE****</RequestId>\\n    <ImagesInfo>{\\"summaryImagesInfo\\":[{\\"ImageName\\":\\"gromacs.sif\\",\\"ImageSize\\":\\"4\\",\\"CreateTime\\":\\"16:18\\",\\"CreateDate\\":\\"Apr.1\\"},{\\"ImageName\\":\\"linpack.sif\\",\\"ImageSize\\":\\"665847525\\",\\"CreateTime\\":\\"14:45\\",\\"CreateDate\\":\\"Apr.1\\"},{\\"ImageName\\":\\"sccIntelMPI1.sif\\",\\"ImageSize\\":\\"665847525\\",\\"CreateTime\\":\\"14:41\\",\\"CreateDate\\":\\"Apr.1\\"},{\\"ImageName\\":\\"test.sif\\",\\"ImageSize\\":\\"24\\",\\"CreateTime\\":\\"12:25\\",\\"CreateDate\\":\\"Apr.20\\"},{\\"ImageName\\":\\"usergromac.sif.user\\",\\"ImageSize\\":\\"4\\",\\"CreateTime\\":\\"15:16\\",\\"CreateDate\\":\\"Apr.19\\"}]}</ImagesInfo>\\n</SummaryImagesInfoResponse>","errorExample":""}]',
      'title' => '获取指定集群上已有镜像的详细信息',
    ),
    'DescribeImageGatewayConfig' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'ehpc-hz-FYUr32****',
            'docRequired' => true,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'Imagegw' => 
              array (
                'description' => '镜像网关配置文件信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'UpdateDateTime' => 
                  array (
                    'description' => '文件更新时间。',
                    'type' => 'string',
                    'example' => '2018-07-18T17:46:47',
                  ),
                  'ImageExpirationTimeout' => 
                  array (
                    'description' => '镜像失效时间限制。',
                    'type' => 'string',
                    'example' => '90:00:00',
                  ),
                  'MongoDBURI' => 
                  array (
                    'description' => '镜像网关数据库信息。',
                    'type' => 'string',
                    'example' => 'mongodb://localhost',
                  ),
                  'DefaultImageLocation' => 
                  array (
                    'description' => '默认仓库源址。',
                    'type' => 'string',
                    'example' => 'registry-1.docker.io',
                  ),
                  'PullUpdateTimeout' => 
                  array (
                    'description' => '拉取镜像的时间限制。',
                    'type' => 'integer',
                    'format' => 'int64',
                    'example' => '300',
                  ),
                  'Locations' => 
                  array (
                    'type' => 'object',
                    'properties' => 
                    array (
                      'LocationInfo' => 
                      array (
                        'description' => '仓库源址数组。',
                        'type' => 'array',
                        'items' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'URL' => 
                            array (
                              'description' => '仓库源址URL。',
                              'type' => 'string',
                              'example' => 'https://regi****.docker-cn.com',
                            ),
                            'RemoteType' => 
                            array (
                              'description' => '仓库类型。
',
                              'type' => 'string',
                              'example' => 'dockerv2',
                            ),
                            'Location' => 
                            array (
                              'description' => '仓库源址。',
                              'type' => 'string',
                              'example' => 'regi****.docker.io',
                            ),
                            'Authentication' => 
                            array (
                              'description' => '仓库的认证方式。可能值：
- http
- https',
                              'type' => 'string',
                              'example' => 'https',
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'LoginNotFound',
            'errorMessage' => 'The specified login node does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"Imagegw\\": {\\n    \\"UpdateDateTime\\": \\"2018-07-18T17:46:47\\",\\n    \\"ImageExpirationTimeout\\": \\"90:00:00\\",\\n    \\"MongoDBURI\\": \\"mongodb://localhost\\",\\n    \\"DefaultImageLocation\\": \\"registry-1.docker.io\\",\\n    \\"PullUpdateTimeout\\": 300,\\n    \\"Locations\\": {\\n      \\"LocationInfo\\": [\\n        {\\n          \\"URL\\": \\"https://regi****.docker-cn.com\\",\\n          \\"RemoteType\\": \\"dockerv2\\",\\n          \\"Location\\": \\"regi****.docker.io\\",\\n          \\"Authentication\\": \\"https\\"\\n        }\\n      ]\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeImageGatewayConfigResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\r\\n    <DefaultImageLocation>regi****.docker.io</DefaultImageLocation>\\r\\n    <PullUpdateTimeout>300</PullUpdateTimeout>\\r\\n    <MongoDBURI>mongodb://localhost</MongoDBURI>\\r\\n    <ImageExpirationTimeout>90:00:00</ImageExpirationTimeout>\\r\\n    <Locations>\\r\\n        <LocationInfo>\\r\\n            <Location>regi****.docker.io</Location>\\r\\n            <Remotetype>dockerv2</Remotetype>\\r\\n            <Authentication>http</Authentication>\\r\\n        </LocationInfo>\\r\\n        <LocationInfo>\\r\\n            <Location>regi****.docker-cn.com</Location>\\r\\n            <Remotetype>dockerv2</Remotetype>\\r\\n            <Authentication>https</Authentication>\\r\\n            <URL>https://regi****.docker-cn.com</URL>\\r\\n        </LocationInfo>\\r\\n    </Locations>\\r\\n</DescribeImageGatewayConfigResponse>","errorExample":""}]',
      'title' => '查询镜像网关配置文件',
      'summary' => '调用DescribeImageGatewayConfig查询指定集群shifter类型容器的镜像网关配置文件。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ModifyImageGatewayConfig' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'DBType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库类型。取值：mongodb',
            'type' => 'string',
            'required' => false,
            'example' => 'mongodb',
          ),
        ),
        2 => 
        array (
          'name' => 'DBUsername',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库用户名。',
            'type' => 'string',
            'required' => false,
            'example' => 'root',
          ),
        ),
        3 => 
        array (
          'name' => 'DBPassword',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库用户密码。',
            'type' => 'string',
            'required' => false,
            'example' => '13****',
          ),
        ),
        4 => 
        array (
          'name' => 'DBServerInfo',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '数据库URI信息。',
            'type' => 'string',
            'required' => false,
            'example' => 'dds-uf6628e4287716b433270.mongodb.rds.aliyuncs.com:3717/admin',
          ),
        ),
        5 => 
        array (
          'name' => 'DefaultRepoLocation',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '默认仓库服务。取值：registry-1.docker.io',
            'type' => 'string',
            'required' => false,
            'example' => 'registry-1.docker.io',
          ),
        ),
        6 => 
        array (
          'name' => 'PullUpdateTimeout',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '拉取镜像时间限制。单位为秒。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '300',
            'default' => '300',
          ),
        ),
        7 => 
        array (
          'name' => 'ImageExpirationTimeout',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '删除镜像时间限制。',
            'type' => 'string',
            'required' => false,
            'example' => '12:00:00',
            'default' => '90:00:00:00',
          ),
        ),
        8 => 
        array (
          'name' => 'Repo',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '仓库信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '仓库信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Auth' => 
                array (
                  'description' => '仓库的认证方式。取值范围：
- http
- https

默认值：http',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'http',
                ),
                'URL' => 
                array (
                  'description' => '仓库的URL，如果要增加仓库源址，必须提供URL。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'https://registry.docker-cn.com',
                ),
                'Location' => 
                array (
                  'description' => '第N个仓库地址。',
                  'type' => 'string',
                  'required' => false,
                  'example' => 'registry.docker-cn.com',
                ),
              ),
              'required' => false,
            ),
            'required' => false,
            'maxItems' => 10000,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
          1 => 
          array (
            'errorCode' => 'LoginNotFound',
            'errorMessage' => 'The specified login node does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\"\\n}","errorExample":""},{"type":"xml","example":"<ModifyImageGatewayConfigResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\r\\n</ModifyImageGatewayConfigResponse>","errorExample":""}]',
      'title' => '修改镜像网关配置文件',
      'summary' => '调用ModifyImageGatewayConfig修改指定集群的镜像网关配置文件。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'PullImage' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-nkKsP3****',
          ),
        ),
        1 => 
        array (
          'name' => 'Repository',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '仓库名。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'centos',
          ),
        ),
        2 => 
        array (
          'name' => 'ImageTag',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像标签，如果不提供则默认为latest。',
            'type' => 'string',
            'required' => false,
            'example' => 'latest',
          ),
        ),
        3 => 
        array (
          'name' => 'ContainerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像类型，默认值为shifter。',
            'type' => 'string',
            'required' => false,
            'example' => 'shifter',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '29d3d9Ee-8eCB-5013-A1c2-1CeD19C6CfFe',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidContainerType',
            'errorMessage' => 'Unsupported container type: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'LoginNotFound',
            'errorMessage' => 'The specified login node does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"29d3d9Ee-8eCB-5013-A1c2-1CeD19C6CfFe\\"\\n}","errorExample":""},{"type":"xml","example":"<PullImageResponse>\\n    <requestId>29d3d9Ee-8eCB-5013-A1c2-1CeD19C6CfFe</requestId>\\n</PullImageResponse>","errorExample":""}]',
      'title' => '拉取镜像',
      'summary' => '调用PullImage来拉取镜像。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'InspectImage' => 
    array (
      'summary' => '调用InspectImage展示镜像构建信息，即容器镜像inspect信息。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需获取构建信息的镜像所在的E-HPC集群ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'ehpc-hz-ibug699***',
          ),
        ),
        1 => 
        array (
          'name' => 'ContainerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '容器镜像类型。固定值，目前仅支持singularity。',
            'type' => 'string',
            'required' => false,
            'example' => 'singularity',
          ),
        ),
        2 => 
        array (
          'name' => 'ImageName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '被查看inspect信息的镜像名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'test.sif',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '896D338C-E4F4-41EC-A154-D605E5DE****',
              ),
              'ImageStatus' => 
              array (
                'description' => '容器镜像状态。',
                'type' => 'object',
                'properties' => 
                array (
                  'ImageInspectInfo' => 
                  array (
                    'description' => '镜像inspect信息合集。',
                    'type' => 'object',
                    'properties' => 
                    array (
                      'BuildArch' => 
                      array (
                        'description' => '构建镜像时使用的体系结构。',
                        'type' => 'string',
                        'example' => 'amd64',
                      ),
                      'BuildDate' => 
                      array (
                        'description' => '镜像构建日期。',
                        'type' => 'string',
                        'example' => 'Tuesday_9_November_2021_19',
                      ),
                      'BootStrap' => 
                      array (
                        'description' => '容器内镜像引导程序版本。',
                        'type' => 'string',
                        'example' => '1.0',
                      ),
                      'DefFrom' => 
                      array (
                        'description' => '镜像构建的方式。',
                        'type' => 'string',
                        'example' => 'localimage',
                      ),
                      'ContainerVersion' => 
                      array (
                        'description' => '容器镜像版本。',
                        'type' => 'string',
                        'example' => 'sccIntelMPI.sif',
                      ),
                      'SchemaVersion' => 
                      array (
                        'description' => '镜像的singularity版本以及内核版本。',
                        'type' => 'string',
                        'example' => '3.8.3-1.el7',
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidContainerType',
            'errorMessage' => 'Unsupported container type: %s.	',
          ),
        ),
        401 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidContainerName',
            'errorMessage' => 'The request cannot get the %s image',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"896D338C-E4F4-41EC-A154-D605E5DE****\\",\\n  \\"ImageStatus\\": {\\n    \\"ImageInspectInfo\\": {\\n      \\"BuildArch\\": \\"amd64\\",\\n      \\"BuildDate\\": \\"Tuesday_9_November_2021_19\\",\\n      \\"BootStrap\\": \\"1.0\\",\\n      \\"DefFrom\\": \\"localimage\\",\\n      \\"ContainerVersion\\": \\"sccIntelMPI.sif\\",\\n      \\"SchemaVersion\\": \\"3.8.3-1.el7\\"\\n    }\\n  }\\n}","errorExample":""},{"type":"xml","example":"<InspectImageResponse>\\n    <RequestId>896D338C-E4F4-41EC-A154-D605E5DE****</RequestId>\\n    <ImageStatus>\\n        <ImageInspectInfo>\\n            <BuildArch>amd64</BuildArch>\\n            <BuildDate>Tuesday_9_November_2021_19</BuildDate>\\n            <BootStrap>1.0</BootStrap>\\n            <DefFrom>localimage</DefFrom>\\n            <ContainerVersion>sccIntelMPI.sif</ContainerVersion>\\n            <SchemaVersion>3.8.3-1.el7</SchemaVersion>\\n        </ImageInspectInfo>\\n    </ImageStatus>\\n</InspectImageResponse>","errorExample":""}]',
      'title' => '展示镜像构建信息',
    ),
    'ListContainerImages' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'ContainerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '容器类型。固定值：singularity',
            'type' => 'string',
            'required' => false,
            'example' => 'singularity',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的行数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条目数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'PageNumber' => 
              array (
                'description' => '本页页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'DBInfo' => 
              array (
                'description' => '数据库信息。',
                'type' => 'string',
                'example' => 'mongodb://localhost/',
              ),
              'Images' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'Images' => 
                  array (
                    'description' => '镜像信息数组。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Type' => 
                        array (
                          'description' => '镜像的容器类型。固定值：singularity',
                          'type' => 'string',
                          'example' => 'docker',
                        ),
                        'Status' => 
                        array (
                          'description' => '镜像状态。',
                          'type' => 'string',
                          'example' => 'READY',
                        ),
                        'UpdateDateTime' => 
                        array (
                          'description' => '镜像更新时间。',
                          'type' => 'string',
                          'example' => '2018-08-02T20:11:36',
                        ),
                        'Repository' => 
                        array (
                          'description' => '仓库名称。',
                          'type' => 'string',
                          'example' => 'busybox',
                        ),
                        'Tag' => 
                        array (
                          'description' => '镜像标签。',
                          'type' => 'string',
                          'example' => 'latest',
                        ),
                        'System' => 
                        array (
                          'description' => '镜像的容器系统。',
                          'type' => 'string',
                          'example' => 'mycluster',
                        ),
                        'ImageId' => 
                        array (
                          'description' => '镜像ID。',
                          'type' => 'string',
                          'example' => 'centos_7_06_64_20G_alibase_2019071****',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidContainerType',
            'errorMessage' => 'Unsupported container type: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'LoginNotFound',
            'errorMessage' => 'The specified login node does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'ExecFail',
            'errorMessage' => 'Failed to execute the command: %s.',
          ),
          3 => 
          array (
            'errorCode' => 'AgentError',
            'errorMessage' => 'The agent service request failed.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 1,\\n  \\"PageNumber\\": 1,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"TotalCount\\": 1,\\n  \\"DBInfo\\": \\"mongodb://localhost/\\",\\n  \\"Images\\": {\\n    \\"Images\\": [\\n      {\\n        \\"Type\\": \\"docker\\",\\n        \\"Status\\": \\"READY\\",\\n        \\"UpdateDateTime\\": \\"2018-08-02T20:11:36\\",\\n        \\"Repository\\": \\"busybox\\",\\n        \\"Tag\\": \\"latest\\",\\n        \\"System\\": \\"mycluster\\",\\n        \\"ImageId\\": \\"centos_7_06_64_20G_alibase_2019071****\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListContainerImagesResponse>\\n    <PageSize>1</PageSize>\\n    <PageNumber>1</PageNumber>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n    <TotalCount>1</TotalCount>\\n    <DBInfo>mongodb://localhost/</DBInfo>\\n    <Images>\\n        <Type>docker</Type>\\n        <Status>READY</Status>\\n        <UpdateDateTime>2018-08-02T20:11:36</UpdateDateTime>\\n        <Repository>busybox</Repository>\\n        <Tag>latest</Tag>\\n        <System>mycluster</System>\\n        <ImageId>centos_7_06_64_20G_alibase_2019071****</ImageId>\\n    </Images>\\n</ListContainerImagesResponse>","errorExample":""}]',
      'title' => '查询本地镜像列表',
      'summary' => '调用ListContainerImages查询指定集群的本地镜像列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DescribeImage' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'Repository',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '仓库名。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'repo1',
          ),
        ),
        2 => 
        array (
          'name' => 'ImageTag',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像标签。默认值：latest',
            'type' => 'string',
            'required' => false,
            'example' => 'latest',
          ),
        ),
        3 => 
        array (
          'name' => 'ContainerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '容器类型。取值：singularity',
            'type' => 'string',
            'required' => false,
            'example' => 'singularity',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
              'ImageInfo' => 
              array (
                'description' => '镜像信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Type' => 
                  array (
                    'description' => '镜像类型。可能值：
- shifter
- docker',
                    'type' => 'string',
                    'example' => 'docker',
                  ),
                  'Status' => 
                  array (
                    'description' => '镜像状态。',
                    'type' => 'string',
                    'example' => 'READY',
                  ),
                  'UpdateDateTime' => 
                  array (
                    'description' => '最后一次更新镜像的时间。',
                    'type' => 'string',
                    'example' => '2018-08-02T20:11:36',
                  ),
                  'Repository' => 
                  array (
                    'description' => '仓库名。',
                    'type' => 'string',
                    'example' => 'hello-world',
                  ),
                  'Tag' => 
                  array (
                    'description' => '镜像标签。',
                    'type' => 'string',
                    'example' => 'latest',
                  ),
                  'System' => 
                  array (
                    'description' => '容器系统。',
                    'type' => 'string',
                    'example' => 'mycluster',
                  ),
                  'ImageId' => 
                  array (
                    'description' => '镜像ID。',
                    'type' => 'string',
                    'example' => '353506****',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'InvalidContainerType',
            'errorMessage' => 'Unsupported container type: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'LoginNotFound',
            'errorMessage' => 'The specified login node does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\",\\n  \\"ImageInfo\\": {\\n    \\"Type\\": \\"docker\\",\\n    \\"Status\\": \\"READY\\",\\n    \\"UpdateDateTime\\": \\"2018-08-02T20:11:36\\",\\n    \\"Repository\\": \\"hello-world\\",\\n    \\"Tag\\": \\"latest\\",\\n    \\"System\\": \\"mycluster\\",\\n    \\"ImageId\\": \\"353506****\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeImageResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\n    <ImageInfo>\\n        <Type>docker</Type>\\n        <Status>READY</Status>\\n        <UpdateDateTime>2018-08-02T20:11:36</UpdateDateTime>\\n        <Repository>hello-world</Repository>\\n        <Tag>latest</Tag>\\n        <System>mycluster</System>\\n        <ImageId>353506****</ImageId>\\n    </ImageInfo>\\n</DescribeImageResponse>","errorExample":""}]',
      'title' => '查询本地单个镜像信息',
      'summary' => '调用DescribeImage查询指定集群本地镜像信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteLocalImage' => 
    array (
      'summary' => '调用DeleteLocalImage删除已下载到集群的镜像。',
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要删除镜像的集群ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'ehpc-hz-ibug69****',
          ),
        ),
        1 => 
        array (
          'name' => 'ImageName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要删除镜像的名称。',
            'type' => 'string',
            'required' => true,
            'example' => 'test.sif',
          ),
        ),
        2 => 
        array (
          'name' => 'ContainerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '需要删除镜像的类型，目前只支持singularity。',
            'type' => 'string',
            'required' => true,
            'example' => 'singularity',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'title' => 'Schema of Response',
            'description' => 'Schema of Response',
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'title' => 'Id of the request',
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '896D338C-E4F4-41EC-A154-D605E5DE****',
              ),
            ),
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"896D338C-E4F4-41EC-A154-D605E5DE****\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteLocalImageResponse>\\n    <RequestId>896D338C-E4F4-41EC-A154-D605E5DE****</RequestId>\\n</DeleteLocalImageResponse>","errorExample":""}]',
      'title' => '删除已下载到集群的镜像',
    ),
    'DeleteImage' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'ehpc-hz-FYUr32****',
            'docRequired' => true,
          ),
        ),
        1 => 
        array (
          'name' => 'Repository',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '仓库名。

您可以通过调用[ListContainerImages](~~87348~~)获取仓库名称。',
            'type' => 'string',
            'required' => true,
            'example' => 'repo1',
            'docRequired' => true,
          ),
        ),
        2 => 
        array (
          'name' => 'ImageTag',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像标签。
默认值：latest',
            'type' => 'string',
            'required' => false,
            'example' => 'latest',
          ),
        ),
        3 => 
        array (
          'name' => 'ContainerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '容器类型。固定值：singularity
',
            'type' => 'string',
            'required' => false,
            'example' => 'singularity',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
          3 => 
          array (
            'errorCode' => 'InvalidContainerType',
            'errorMessage' => 'Unsupported container type: %s.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'LoginNotFound',
            'errorMessage' => 'The specified login node does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteImageResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n</DeleteImageResponse>","errorExample":""}]',
      'title' => '删除本地镜像',
      'summary' => '调用DeleteImage删除本地镜像。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteContainerApps' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ContainerApp',
          'in' => 'query',
          'style' => 'repeatList',
          'schema' => 
          array (
            'description' => '容器信息。',
            'type' => 'array',
            'items' => 
            array (
              'description' => '容器信息数组。',
              'type' => 'object',
              'properties' => 
              array (
                'Id' => 
                array (
                  'description' => '第N个要删除的容器应用ID。N的取值范围：1~100',
                  'type' => 'string',
                  'required' => true,
                  'docRequired' => true,
                  'example' => 'ehpc-container-ABDUGSkjs****',
                ),
              ),
              'required' => false,
            ),
            'required' => true,
            'maxItems' => 10000,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ContainerNotFound',
            'errorMessage' => 'The specified container does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteContainerAppsResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\r\\n</DeleteContainerAppsResponse>","errorExample":""}]',
      'title' => '批量删除容器应用',
      'summary' => '调用DeleteContainerApps批量删除容器应用。',
      'description' => '## 接口说明
删除容器应用前，您可以调用[ListContainerApps](~~87333~~)查询容器应用列表。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DescribeContainerApp' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ContainerId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '容器应用ID。

您可以通过调用[ListContainerApps](~~87333~~)获取容器应用ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-container-ABDUGSkjs****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'ContainerAppInfo' => 
              array (
                'description' => '容器应用信息。',
                'type' => 'object',
                'properties' => 
                array (
                  'Type' => 
                  array (
                    'description' => '容器应用类型。固定值：singularity',
                    'type' => 'string',
                    'example' => 'singularity',
                  ),
                  'Description' => 
                  array (
                    'description' => '容器应用描述。',
                    'type' => 'string',
                    'example' => 'ExampleDescription',
                  ),
                  'CreateTime' => 
                  array (
                    'description' => '创建容器应用时间。',
                    'type' => 'string',
                    'example' => '2018-07-18T17:46:47',
                  ),
                  'Repository' => 
                  array (
                    'description' => '仓库名。',
                    'type' => 'string',
                    'example' => 'busybox',
                  ),
                  'ImageTag' => 
                  array (
                    'description' => '镜像标签。',
                    'type' => 'string',
                    'example' => 'latest',
                  ),
                  'Name' => 
                  array (
                    'description' => '容器应用名称。',
                    'type' => 'string',
                    'example' => 'ExampleName',
                  ),
                  'Id' => 
                  array (
                    'description' => '容器应用ID。',
                    'type' => 'string',
                    'example' => 'ehpc-container-ABDUGSkjs****',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ContainerNotFound',
            'errorMessage' => 'The specified container does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"ContainerAppInfo\\": {\\n    \\"Type\\": \\"singularity\\",\\n    \\"Description\\": \\"ExampleDescription\\",\\n    \\"CreateTime\\": \\"2018-07-18T17:46:47\\",\\n    \\"Repository\\": \\"busybox\\",\\n    \\"ImageTag\\": \\"latest\\",\\n    \\"Name\\": \\"ExampleName\\",\\n    \\"Id\\": \\"ehpc-container-ABDUGSkjs****\\"\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeContainerAppResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n    <ContainerAppInfo>\\r\\n        <Id>ehpc-container-ABDUGSkjs****</Id>\\r\\n        <Name>ExampleName</Name>\\r\\n        <Description>ExampleDescription</Description>\\r\\n        <Repository>busybox</Repository>\\r\\n        <ImageTag>latest</ImageTag>\\r\\n        <CreateTime>2018-07-18T17:46:47</CreateTime>\\r\\n        <Type>singularity</Type>\\r\\n    </ContainerAppInfo>\\r\\n</DescribeContainerAppResponse>","errorExample":""}]',
      'title' => '查询单个容器应用信息',
      'summary' => '调用DescribeContainerApp查询指定容器应用信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListContainerApps' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的行数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '容器应用总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'ContainerApps' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ContainerApps' => 
                  array (
                    'description' => '容器应用信息数组。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Type' => 
                        array (
                          'description' => '容器应用类型。固定值：singularity',
                          'type' => 'string',
                          'example' => 'singularity',
                        ),
                        'Description' => 
                        array (
                          'description' => '容器应用描述。',
                          'type' => 'string',
                          'example' => 'ExampleDescription',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '创建容器应用时间。',
                          'type' => 'string',
                          'example' => '2018-07-18T17:46:47',
                        ),
                        'Repository' => 
                        array (
                          'description' => '仓库名。',
                          'type' => 'string',
                          'example' => 'busybox',
                        ),
                        'ImageTag' => 
                        array (
                          'description' => '镜像标签。',
                          'type' => 'string',
                          'example' => 'latest',
                        ),
                        'Name' => 
                        array (
                          'description' => '容器应用名称。',
                          'type' => 'string',
                          'example' => 'ExampleName',
                        ),
                        'Id' => 
                        array (
                          'description' => '容器应用ID。',
                          'type' => 'string',
                          'example' => 'ehpc-container-ABDUGSkjs****',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 1,\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"ContainerApps\\": {\\n    \\"ContainerApps\\": [\\n      {\\n        \\"Type\\": \\"singularity\\",\\n        \\"Description\\": \\"ExampleDescription\\",\\n        \\"CreateTime\\": \\"2018-07-18T17:46:47\\",\\n        \\"Repository\\": \\"busybox\\",\\n        \\"ImageTag\\": \\"latest\\",\\n        \\"Name\\": \\"ExampleName\\",\\n        \\"Id\\": \\"ehpc-container-ABDUGSkjs****\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<ListContainerAppsResponse>\\n    <PageSize>1</PageSize>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <TotalCount>1</TotalCount>\\n    <ContainerApps>\\n        <Type>singularity</Type>\\n        <Description>ExampleDescription</Description>\\n        <CreateTime>2018-07-18T17:46:47</CreateTime>\\n        <Repository>busybox</Repository>\\n        <ImageTag>latest</ImageTag>\\n        <Name>ExampleName</Name>\\n        <Id>ehpc-container-ABDUGSkjs****</Id>\\n    </ContainerApps>\\n</ListContainerAppsResponse>","errorExample":""}]',
      'title' => '查询容器应用列表',
      'summary' => '调用ListContainerApps查询容器应用列表及详细信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ModifyContainerAppAttributes' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ContainerId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '容器ID。

您可以通过调用[ListContainerApps](~~87333~~)获取容器应用ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-container-ABDUGSkjs****',
          ),
        ),
        1 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '修改后的容器应用描述。',
            'type' => 'string',
            'required' => false,
            'example' => 'ExampleDescription',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<ModifyContainerAppAttributesResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n</ModifyContainerAppAttributesResponse>","errorExample":""}]',
      'title' => '修改容器应用属性',
      'summary' => '调用ModifyContainerAppAttributes修改一个容器应用的部分属性，目前支持修改容器应用的描述。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'AddContainerApp' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '容器名称。长度为2~64个字符，必须以字母开头，可以包含字母、数字、短划线（-）和下划线（_） 。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'container1',
          ),
        ),
        1 => 
        array (
          'name' => 'Repository',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '获取Docker Hub中与仓库名称同名的镜像。

具体镜像名请参见[Docker Hub镜像](https://hub.docker.com/search?q=&type=image)。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'repo1',
          ),
        ),
        2 => 
        array (
          'name' => 'Description',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '容器描述。',
            'type' => 'string',
            'required' => false,
            'example' => 'descriptionContainer',
          ),
        ),
        3 => 
        array (
          'name' => 'ImageTag',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '镜像的标签。

镜像仓库中会存放一类镜像，例如Ubuntu，标签用于区分一类镜像中不同的镜像文件，例如16.04、17.04、latest。

默认值：latest',
            'type' => 'string',
            'required' => false,
            'example' => 'latest',
          ),
        ),
        4 => 
        array (
          'name' => 'ContainerType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '容器类型。 固定值：singularity',
            'type' => 'string',
            'required' => false,
            'example' => 'singularity',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
              'ContainerId' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ContainerId' => 
                  array (
                    'description' => '容器ID。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'description' => '容器ID。',
                      'type' => 'string',
                      'example' => 'ehpc-container-ABDUGSkjs****',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
          2 => 
          array (
            'errorCode' => 'InDebt',
            'errorMessage' => 'Your account has overdue payments.',
          ),
        ),
        403 => 
        array (
          0 => 
          array (
            'errorCode' => 'ContainerNameExist',
            'errorMessage' => 'The container name already exists.',
          ),
          1 => 
          array (
            'errorCode' => 'TooManyContainers',
            'errorMessage' => 'The number of containers exceeds the quota.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
          2 => 
          array (
            'errorCode' => 'FailToGenId',
            'errorMessage' => 'Generating cluster ID failed.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\",\\n  \\"ContainerId\\": {\\n    \\"ContainerId\\": [\\n      \\"ehpc-container-ABDUGSkjs****\\"\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<AddContainerAppResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n    <ContainerId>ehpc-container-ABDUGSkjs****</ContainerId>\\r\\n</AddContainerAppResponse>","errorExample":""}]',
      'title' => '新增容器应用',
      'summary' => '新增容器应用操作不会进行镜像的拉取，拉取镜像请参照PullImage。',
      'description' => '## 接口说明
新增的容器应用默认获取Docker Hub中的镜像，不会拉取最新镜像。您可以调用[PullImage](~~159052~~)拉取最新镜像。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'ListTasks' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待查询的集群ID。

您可以通过调用[ListClusters](~~87116~~)获取集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehpc-hz-FYUr32****',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '显示的页码，起始值为1，取值范围：1~999。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '999',
            'minimum' => '1',
            'example' => '1',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。取值范围：1~50。

默认值：10。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'minimum' => '1',
            'example' => '10',
            'default' => '10',
          ),
        ),
        3 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务ID。您可以调用以下异步API获取对应的TaskId。

- [CreateCluster](~~87100~~)
- [StartCluster](~~200345~~)
- [StopCluster](~~200346~~)
- [DeleteCluster](~~87110~~)
- [AddNodes](~~87147~~)
- [StartNodes](~~87159~~)
- [ResetNodes](~~87158~~)
- [StopNodes](~~87160~~)
- [DeleteNodes](~~87155~~)',
            'type' => 'string',
            'required' => false,
            'example' => 'B745C159-3155-4B94-95D0-4B73D4D2****',
          ),
        ),
        4 => 
        array (
          'name' => 'Archived',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否显示已运行的异步API的历史返回结果。取值范围：

- true：显示正在运行和历史运行的任务返回结果。

- false：仅显示正在运行的任务返回结果，当没有正在运行的任务时，task返回为`[]`。

默认值：false。

>当您配置了TaskId参数时，此参数无效。',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
            'default' => 'false',
            'enum' => 
            array (
              0 => 'true',
              1 => 'false',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '89A1AC0F-4A6C-4F3D-98F9-BEF9A823****',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '任务列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'Tasks' => 
              array (
                'description' => '任务信息列表。',
                'type' => 'array',
                'items' => 
                array (
                  'description' => '任务信息列表。',
                  'type' => 'object',
                  'properties' => 
                  array (
                    'Status' => 
                    array (
                      'description' => '任务运行状态。可能值：

- Processing：运行中
- Success：运行成功
- Fail：运行失败
- PartialFail：部分运行失败',
                      'type' => 'string',
                      'example' => 'Processing',
                    ),
                    'TaskType' => 
                    array (
                      'description' => '任务类型。可能值：

- CreateCluster：创建集群，对应的API为[CreateCluster](~~87100~~)
- StartCluster：启动集群，对应的API为[StartCluster](~~200345~~)
- StopCluster：停止集群，对应的API为[StopCluster](~~200346~~)
- DeleteCluster：释放集群，对应的API为[DeleteCluster](~~87110~~)
- AddComputes：添加节点到集群，对应的API为[AddNodes](~~87147~~)
- StartComputes：启动节点，对应的API为[StartNodes](~~87159~~)
- ResetComputes：重置节点，对应的API为[ResetNodes](~~87158~~)
- StopComputes：停止节点，对应的API为[StopNodes](~~87160~~)
- DeleteComputes：删除节点，对应的API为[DeleteNodes](~~87155~~)',
                      'type' => 'string',
                      'example' => 'StopCluster',
                    ),
                    'TotalSteps' => 
                    array (
                      'description' => '任务总操作步数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '35',
                    ),
                    'CurrentStep' => 
                    array (
                      'description' => '任务当前操作步数。',
                      'type' => 'integer',
                      'format' => 'int32',
                      'example' => '16',
                    ),
                    'Result' => 
                    array (
                      'description' => '任务运行结果。可能值：

- 当TaskType为CreateCluster和AddComputes时，格式为`{\\"Instances\\":[]}`，表示加入到集群的节点信息。

- 当TaskType为除CreateCluster和AddComputes的其他值时，格式为`{}`。

',
                      'type' => 'string',
                      'example' => '{\\"Instances\\":[{\\"InstanceId\\":\\"i-bp1inb1j2xz8pnoi****\\",\\"Ip\\":\\"192.168.*.*\\",\\"Hostname\\":\\"login0\\",\\"role\\":\\"login\\"}]}',
                    ),
                    'Errors' => 
                    array (
                      'description' => '任务运行错误信息列表。

<props="china">您可以在[错误中心](https://error-center.aliyun.com/status/product/EHPC)查看错误信息及对应的解决方案。</props>



<props="intl">您可以在[错误中心](https://error-center.alibabacloud.com/status/product/EHPC)查看错误信息及对应的解决方案。</props>
',
                      'type' => 'string',
                      'example' => '[]',
                    ),
                    'TaskId' => 
                    array (
                      'description' => '任务ID。',
                      'type' => 'string',
                      'example' => 'B745C159-3155-4B94-95D0-4B73D4D2****',
                    ),
                    'Request' => 
                    array (
                      'description' => '任务的请求参数信息，格式为JSON字符串。',
                      'type' => 'string',
                      'example' => '{\\"requestId\\":\\"0A6CA33E-BFBF-4F92-BDAE-4E8860DA****\\",\\"uid\\":\\"160998252992****\\",\\"bid\\":\\"268**\\",\\"clusterId\\":\\"ehpc-hz-ysQtcZ****\\"}',
                    ),
                    'ClusterId' => 
                    array (
                      'description' => '集群ID。',
                      'type' => 'string',
                      'example' => 'ehpc-hz-FYUr32****',
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
          1 => 
          array (
            'errorCode' => 'NotEnabled',
            'errorMessage' => 'You have not enabled this service',
          ),
        ),
        404 => 
        array (
          0 => 
          array (
            'errorCode' => 'ClusterNotFound',
            'errorMessage' => 'The specified cluster does not exist.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'DbError',
            'errorMessage' => 'A database service error occurred.',
          ),
          1 => 
          array (
            'errorCode' => 'RedisError',
            'errorMessage' => 'A Redis service error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 10,\\n  \\"RequestId\\": \\"89A1AC0F-4A6C-4F3D-98F9-BEF9A823****\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 10,\\n  \\"Tasks\\": [\\n    {\\n      \\"Status\\": \\"Processing\\",\\n      \\"TaskType\\": \\"StopCluster\\",\\n      \\"TotalSteps\\": 35,\\n      \\"CurrentStep\\": 16,\\n      \\"Result\\": \\"{\\\\\\\\\\\\\\"Instances\\\\\\\\\\\\\\":[{\\\\\\\\\\\\\\"InstanceId\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"i-bp1inb1j2xz8pnoi****\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"Ip\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"192.168.*.*\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"Hostname\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"login0\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"role\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"login\\\\\\\\\\\\\\"}]}\\",\\n      \\"Errors\\": \\"[]\\",\\n      \\"TaskId\\": \\"B745C159-3155-4B94-95D0-4B73D4D2****\\",\\n      \\"Request\\": \\"{\\\\\\\\\\\\\\"requestId\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"0A6CA33E-BFBF-4F92-BDAE-4E8860DA****\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"uid\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"160998252992****\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"bid\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"268**\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"clusterId\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"ehpc-hz-ysQtcZ****\\\\\\\\\\\\\\"}\\",\\n      \\"ClusterId\\": \\"ehpc-hz-FYUr32****\\"\\n    }\\n  ]\\n}","errorExample":""},{"type":"xml","example":"<ListTasksResponse>\\n<TotalCount>10</TotalCount>\\n<Tasks>\\n    <Status>Processing</Status>\\n    <Errors>[]</Errors>\\n    <TaskId>B745C159-3155-4B94-95D0-4B73D4D2****</TaskId>\\n    <ClusterId>ehpc-hz-FYUr32****</ClusterId>\\n    <TaskType>StopCluster</TaskType>\\n    <Request>{\\\\\\"requestId\\\\\\":\\\\\\"0A6CA33E-BFBF-4F92-BDAE-4E8860DA****\\\\\\",\\\\\\"uid\\\\\\":\\\\\\"160998252992****\\\\\\",\\\\\\"bid\\\\\\":\\\\\\"268**\\\\\\",\\\\\\"clusterId\\\\\\":\\\\\\"ehpc-hz-ysQtcZ****\\\\\\"}</Request>\\n    <CurrentStep>16</CurrentStep>\\n    <TotalSteps>35</TotalSteps>\\n    <Result>{\\\\\\"Instances\\\\\\":[{\\\\\\"InstanceId\\\\\\":\\\\\\"i-bp1inb1j2xz8pnoi****\\\\\\",\\\\\\"Ip\\\\\\":\\\\\\"192.168.*.*\\\\\\",\\\\\\"Hostname\\\\\\":\\\\\\"login0\\\\\\",\\\\\\"role\\\\\\":\\\\\\"login\\\\\\"}]}</Result>\\n</Tasks>\\n<PageSize>10</PageSize>\\n<RequestId>89A1AC0F-4A6C-4F3D-98F9-BEF9A823****</RequestId>\\n<PageNumber>1</PageNumber>\\n</ListTasksResponse>","errorExample":""}]',
      'title' => '获取任务列表',
      'summary' => '调用ListTasks查询指定集群下异步API的返回结果。',
      'description' => '对于一些异步API（如AddNodes），请求成功会立即返回结果，但不会等待节点创建成功。此时，您可以使用接口返回的TaskId查询具体的任务运行结果。',
    ),
    'InitializeEHPC' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'readAndWrite',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'RegionId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '创建服务关联角色的地域ID。

您可以通过调用[ListRegions](~~188593~~)接口查询E-HPC支持的地域ID。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'cn-hangzhou',
          ),
        ),
        1 => 
        array (
          'name' => 'ServiceName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '要使用的服务名称，需要创建对应的服务关联角色。取值范围：

- E-HPC：表示创建AliyunServiceRoleForEHPC。
- E-HPC Instant：表示创建AliyunServiceRoleForEHPCManagedNetwork。

> 该参数暂未开放使用。',
            'type' => 'string',
            'required' => false,
            'example' => 'E-HPC',
            'enum' => 
            array (
              0 => 'E-HPC',
              1 => 'E-HPC Instant',
            ),
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE7****',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'EntityAlreadyExists.RoleError',
            'errorMessage' => 'AliyunServiceRoleForEHPC already exists.',
          ),
        ),
        501 => 
        array (
          0 => 
          array (
            'errorCode' => 'NoPermission',
            'errorMessage' => 'You are not authorized to perform the operation.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE7****\\"\\n}","errorExample":""},{"type":"xml","example":"<InitializeEHPCResponse>\\r\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE7****</RequestId>\\r\\n </InitializeEHPCResponse>   ","errorExample":""}]',
      'title' => '创建EHPC关联角色',
      'summary' => '创建EHPC的服务关联角色（首次使用必须）。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateGWSImage' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'i-bp66guhybgtrftpa1****',
            'docRequired' => true,
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例的镜像名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'EHPC-TEST',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'ImageId' => 
              array (
                'description' => '可视化实例镜像ID。',
                'type' => 'string',
                'example' => 'ehs-fakeid-****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '5198C3E8-85F5-4280-8547-687C1710FE08',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"ImageId\\": \\"ehs-fakeid-****\\",\\n  \\"RequestId\\": \\"5198C3E8-85F5-4280-8547-687C1710FE08\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateGWSImageResponse>\\n    <GWSImageId>ehs-fakeid-****</GWSImageId>\\n    <requestId>5198C3E8-85F5-4280-8547-687C1710FE08</requestId>\\n</CreateGWSImageResponse>","errorExample":""}]',
      'title' => '创建一个自定义的云图站镜像',
      'summary' => '调用CreateGWSImage创建一个自定义的可视化实例镜像。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteGWSCluster' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化服务集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'gws-rhz99q8rc****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '8442AF35-875B-4FC0-8B7AAFDC339335D5',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"8442AF35-875B-4FC0-8B7AAFDC339335D5\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteGWSClusterResponse>\\r\\n    <RequestId>8442AF35-875B-4FC0-8B7AAFDC339335D5</RequestId>\\r\\n</DeleteGWSClusterResponse>","errorExample":""}]',
      'title' => '删除可视化服务集群',
      'summary' => '调用DeleteGWSCluster删除可视化服务集群。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DescribeGWSImages' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        1 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '本页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '   请求ID。',
                'type' => 'string',
                'example' => '2777461A-E45E-42F8-8E67-0EBF132E93E0',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '2',
              ),
              'Images' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ImageInfo' => 
                  array (
                    'description' => '可视化镜像信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '镜像状态。可能值：
- Creating：创建中
- CreateFailed：创建失败
- Available：可用
- UnAvailable：不可用',
                          'type' => 'string',
                          'example' => 'Available',
                        ),
                        'ImageType' => 
                        array (
                          'description' => '可视化镜像类型。可能值：
- system：系统镜像
- custom：自定义镜像',
                          'type' => 'string',
                          'example' => 'system',
                        ),
                        'Progress' => 
                        array (
                          'description' => '镜像进程完成的进度。',
                          'type' => 'string',
                          'example' => '100%',
                        ),
                        'Size' => 
                        array (
                          'description' => '镜像大小。单位：GB',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '40',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '镜像创建时间。',
                          'type' => 'string',
                          'example' => '2019-05-15T06:05:40.000Z',
                        ),
                        'Name' => 
                        array (
                          'description' => '可视化镜像名称。',
                          'type' => 'string',
                          'example' => 'Windows Server 2019',
                        ),
                        'ImageId' => 
                        array (
                          'description' => '可视化镜像ID。',
                          'type' => 'string',
                          'example' => 'm-bp1by33e4h650m70lb****',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 10,\\n  \\"RequestId\\": \\"2777461A-E45E-42F8-8E67-0EBF132E93E0\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 2,\\n  \\"Images\\": {\\n    \\"ImageInfo\\": [\\n      {\\n        \\"Status\\": \\"Available\\",\\n        \\"ImageType\\": \\"system\\",\\n        \\"Progress\\": \\"100%\\",\\n        \\"Size\\": 40,\\n        \\"CreateTime\\": \\"2019-05-15T06:05:40.000Z\\",\\n        \\"Name\\": \\"Windows Server 2019\\",\\n        \\"ImageId\\": \\"m-bp1by33e4h650m70lb****\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeGWSImagesResponse>\\n    <TotalCount>2</TotalCount>\\n    <PageSize>10</PageSize>\\n    <RequestId>2777461A-E45E-42F8-8E67-0EBF132E93E0</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <Images>\\n        <ImageInfo>\\n            <Status>Available</Status>\\n            <Progress>100%</Progress>\\n            <Size>40</Size>\\n            <CreateTime>2019-05-15T06:05:40.000Z</CreateTime>\\n            <ImageId>m-bp1by33e4h650m70lb****</ImageId>\\n            <ImageType>system</ImageType>\\n            <Name>Windows Server 2019</Name>\\n        </ImageInfo>\\n    </Images>\\n</DescribeGWSImagesResponse>","errorExample":""}]',
      'title' => '查询可视化镜像信息',
      'summary' => '调用DescribeGWSImages查询可视化镜像信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DescribeGWSClusters' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化服务集群ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'gws-rhz99q8rc****',
          ),
        ),
        1 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        2 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '当前页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'PageNumber' => 
              array (
                'description' => '当前页码。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '2777461A-E45E-42F8-8E67-0EBF132E93E0',
              ),
              'CallerType' => 
              array (
                'description' => '账号类型。可能值：
- sub：RAM用户
- parent：阿里云账号',
                'type' => 'string',
                'example' => 'sub',
              ),
              'TotalCount' => 
              array (
                'description' => '列表条目总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Clusters' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'ClusterInfo' => 
                  array (
                    'description' => '可视化集群信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'VpcId' => 
                        array (
                          'description' => 'VPC ID。',
                          'type' => 'string',
                          'example' => 'vpc-bp1nq8oshqudln3hy****',
                        ),
                        'Status' => 
                        array (
                          'description' => '可视化集群状态。可能值：
- creating：创建中
- starting：启动中
- running：运行中
- deleted：已删除',
                          'type' => 'string',
                          'example' => 'running',
                        ),
                        'InstanceCount' => 
                        array (
                          'description' => '可视化实例数目。',
                          'type' => 'integer',
                          'format' => 'int32',
                          'example' => '3',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '可视化集群创建时间。',
                          'type' => 'string',
                          'example' => '2019-05-15T06:05:40.000Z',
                        ),
                        'ClusterId' => 
                        array (
                          'description' => '可视化集群ID。',
                          'type' => 'string',
                          'example' => 'gws-rhz99q8rc****',
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 10,\\n  \\"PageNumber\\": 1,\\n  \\"RequestId\\": \\"2777461A-E45E-42F8-8E67-0EBF132E93E0\\",\\n  \\"CallerType\\": \\"sub\\",\\n  \\"TotalCount\\": 1,\\n  \\"Clusters\\": {\\n    \\"ClusterInfo\\": [\\n      {\\n        \\"VpcId\\": \\"vpc-bp1nq8oshqudln3hy****\\",\\n        \\"Status\\": \\"running\\",\\n        \\"InstanceCount\\": 3,\\n        \\"CreateTime\\": \\"2019-05-15T06:05:40.000Z\\",\\n        \\"ClusterId\\": \\"gws-rhz99q8rc****\\"\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeGWSClustersResponse>\\n    <TotalCount>1</TotalCount>\\n    <PageSize>10</PageSize>\\n    <RequestId>41CD61B3-D1B3-4B8B-94A5-89179BDA4EED</RequestId>\\n    <PageNumber>1</PageNumber>\\n    <Clusters>\\n        <ClusterInfo>\\n            <Status>running</Status>\\n            <InstanceCount>5</InstanceCount>\\n            <VpcId>vpc-bp1nq8oshqudln3hy****</VpcId>\\n            <ClusterId>gws-rhz99q8rc****</ClusterId>\\n            <CreateTime>2019-09-29T06:54:35Z</CreateTime>\\n        </ClusterInfo>\\n    </Clusters>\\n    <CallerType>sub</CallerType>\\n</DescribeGWSClustersResponse>","errorExample":""}]',
      'title' => '查询可视化服务集群信息',
      'summary' => '调用DescribeGWSClusters查询可视化服务集群信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DescribeGWSClusterPolicy' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化服务集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'gws-rhz99q8rc****',
          ),
        ),
        1 => 
        array (
          'name' => 'TaskId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '任务ID。只有AsyncMode取值为true时有效，您可以通过调用[DescribeClusterConnections](~~187347~~)接口查询任务的执行状态。
',
            'type' => 'string',
            'required' => false,
            'example' => 't-****',
          ),
        ),
        2 => 
        array (
          'name' => 'AsyncMode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否支持异步调用模式：
- false：不支持，当本次请求调用完成后，才返回结果。
- true：支持，无需等待本次请求调用完成，立即返回结果。

默认值：false',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Watermark' => 
              array (
                'description' => '水印。可能值：
- on：开启
- off：关闭',
                'type' => 'string',
                'example' => 'on',
              ),
              'Clipboard' => 
              array (
                'description' => '剪贴板权限。可能值：
- read：只读。可以将本地内容复制到云桌面，不能将云桌面内容复制到本地。
- readwrite：读写。可以将本地内容复制到云桌面，也可以将云桌面内容复制到本地。
- off：关闭。云桌面和本地之间无法进行复制操作。',
                'type' => 'string',
                'example' => 'read',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '7afc5a17-e60d-4a2a-85d6-7c9d4a81d65e',
              ),
              'UsbRedirect' => 
              array (
                'description' => 'USB重定向。可能值：
- on：开启
- off：关闭',
                'type' => 'string',
                'example' => 'on',
              ),
              'LocalDrive' => 
              array (
                'description' => '本地磁盘映射权限。可能值：
- read：只读。云桌面上有本地磁盘的映射，但是只能读取（复制）本地文件，不能修改本地文件。
- readwrite：读写。云桌面上有本地磁盘的映射，可以读取（复制）本地文件，也可以修改本地文件。
- off：关闭。云桌面上没有本地磁盘的映射。',
                'type' => 'string',
                'example' => 'off',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Watermark\\": \\"on\\",\\n  \\"Clipboard\\": \\"read\\",\\n  \\"RequestId\\": \\"7afc5a17-e60d-4a2a-85d6-7c9d4a81d65e\\",\\n  \\"UsbRedirect\\": \\"on\\",\\n  \\"LocalDrive\\": \\"off\\"\\n}","errorExample":""},{"type":"xml","example":"<DescribeGWSClusterPolicyResponse>\\n    <requestId>7afc5a17-e60d-4a2a-85d6-7c9d4a81d65e</requestId>\\n    <Clipboard>read</Clipboard>\\n    <Watermark>on</Watermark>\\n    <UsbRedirect>on</UsbRedirect>\\n    <LocalDrive>off</LocalDrive>\\n</DescribeGWSClusterPolicyResponse>","errorExample":""}]',
      'title' => '查看可是化服务的策略配置信息',
      'summary' => '调用DescribeGWSClusterPolicy查看可视化服务的配置信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateGWSCluster' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'VpcId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'VPC ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'vpc-bp1se4wjbp0760yju****',
          ),
        ),
        1 => 
        array (
          'name' => 'ClusterType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化服务集群类型，固定为：gws.s1.standard',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'gws.s1.standard',
          ),
        ),
        2 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化服务集群的名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'TestGWS',
          ),
        ),
        3 => 
        array (
          'name' => 'VSwitchId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'VPC中交换机ID。E-HPC当前仅支持VPC网络。',
            'type' => 'string',
            'required' => false,
            'example' => 'vsw-bp1lfcjbfb099rrjn****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'ClusterId' => 
              array (
                'description' => '可视化服务集群ID。',
                'type' => 'string',
                'example' => 'gws-rhz397kdngua****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '5198C3E8-85F5-4280-8547-687C1710FE08',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"ClusterId\\": \\"gws-rhz397kdngua****\\",\\n  \\"RequestId\\": \\"5198C3E8-85F5-4280-8547-687C1710FE08\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateGWSClusterResponse>\\n    <GWSClusterId>gws-rhz397kdngua****</GWSClusterId>\\n    <requestId>5198C3E8-85F5-4280-8547-687C1710FE08</requestId>\\n</CreateGWSClusterResponse>","errorExample":""}]',
      'title' => '创建可视化服务',
      'summary' => '每个E-HPC集群只能创建一个可视化服务。',
      'description' => '## 接口说明
每个E-HPC集群只能创建一个可视化服务集群。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'CreateGWSInstance' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'create',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化服务集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'gws-rhzxpazwebua****',
          ),
        ),
        1 => 
        array (
          'name' => 'ImageId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化服务镜像ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ehs-faeid-****',
          ),
        ),
        2 => 
        array (
          'name' => 'SystemDiskSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '系统盘大小。单位：GiB

取值范围：20~500',
            'type' => 'integer',
            'format' => 'int32',
            'required' => true,
            'docRequired' => true,
            'example' => '20',
          ),
        ),
        3 => 
        array (
          'name' => 'SystemDiskCategory',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '系统盘类型。取值范围：
- cloud_efficiency：高效云盘
- cloud_ssd：SSD云盘
- cloud_essd：ESSD云盘
- cloud：普通云盘',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'cloud',
          ),
        ),
        4 => 
        array (
          'name' => 'InstanceType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例规格。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'ecs.g6.large',
          ),
        ),
        5 => 
        array (
          'name' => 'InstanceChargeType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例计费方式，不能为抢占式实例。
- PostPaid：按量付费
- PrePaid：包年包月

默认值：PostPaid',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'PostPaid',
          ),
        ),
        6 => 
        array (
          'name' => 'WorkMode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '实例工作模式。取值范围：
- Desktop：桌面模式
- Application：应用模式',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'Desktop',
          ),
        ),
        7 => 
        array (
          'name' => 'AllocatePublicAddress',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否分配公网地址。取值范围：
- true：分配
- false：不分配

默认值：false',
            'type' => 'boolean',
            'required' => true,
            'docRequired' => true,
            'example' => 'false',
          ),
        ),
        8 => 
        array (
          'name' => 'InternetChargeType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '公网带宽计费方式。取值范围：
- PayByBandwidth：按固定带宽计费。
- PayByTraffic：按使用流量计费。

默认值：PayByTraffic',
            'type' => 'string',
            'required' => false,
            'example' => 'PayByTraffic',
          ),
        ),
        9 => 
        array (
          'name' => 'InternetMaxBandwidthIn',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '公网入带宽最大值。单位为Mbit/s。取值范围：
- 当所购出网带宽小于等于10 Mbit/s时：1~10。默认值：10
- 当所购出网带宽大于10 Mbit/s时：1~InternetMaxBandwidthOut的取值，默认为InternetMaxBandwidthOut的取值。',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '122',
          ),
        ),
        10 => 
        array (
          'name' => 'InternetMaxBandwidthOut',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '公网出带宽最大值。单位：Mbit/s

取值范围：0~100

默认值：0',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '122',
          ),
        ),
        11 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'Test-ehpc',
          ),
        ),
        12 => 
        array (
          'name' => 'Period',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '购买资源的时长。单位由PeriodUnit指定。当InstanceChargeType取值为PrePaid时才生效，且为必选值。
- 如果PeriodUnit为Month，该参数的取值范围：{“1”, “2”, “3”, “6”}。
- 如果PeriodUnit为Year，该参数的取值范围：{“1”, “2”, “3”, “4”, “5”}。',
            'type' => 'string',
            'required' => false,
            'example' => '1',
          ),
        ),
        13 => 
        array (
          'name' => 'PeriodUnit',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '购买资源的时长单位。取值范围：
- Month：月
- Year：年',
            'type' => 'string',
            'required' => false,
            'example' => 'Month',
          ),
        ),
        14 => 
        array (
          'name' => 'AutoRenew',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否自动续费。取值范围：
- true：是
- false：否

默认值：false',
            'type' => 'boolean',
            'required' => false,
            'example' => 'false',
          ),
        ),
        15 => 
        array (
          'name' => 'AppList',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '应用程序列表。WorkMode选择为Application时必选。包含如下信息：
- AppName：应用名称。
- AppPath：应用运行路径。
- AppArgs：应用运行参数。',
            'type' => 'string',
            'required' => false,
            'example' => '[{AppName: notepad},{AppArgs:c:/temp.txt}]',
          ),
        ),
        16 => 
        array (
          'name' => 'VSwitchId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '交换机ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'vsw-bp1gb5gf5546rn****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'InstanceId' => 
              array (
                'description' => '可视化实例ID。',
                'type' => 'string',
                'example' => 'i-bp1bzqddeemudsdsdsdsdn****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '5198C3E8-85F5-4280-8547-687C1710FE08',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"InstanceId\\": \\"i-bp1bzqddeemudsdsdsdsdn****\\",\\n  \\"RequestId\\": \\"5198C3E8-85F5-4280-8547-687C1710FE08\\"\\n}","errorExample":""},{"type":"xml","example":"<CreateGWSInstanceResponse>\\n    <InstanceId>i-bp1bzqq4rj1ddeemudsdsdsdsdn****</InstanceId>\\n    <requestId>5198C3E8-85F5-4280-8547-687C1710FE08</requestId>\\n</CreateGWSInstanceResponse>","errorExample":""}]',
      'title' => '创建一个可视化实例',
      'summary' => '调用CreateGWSInstance创建一个可视化实例。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DescribeGWSInstances' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化集群ID。',
            'type' => 'string',
            'required' => false,
            'docRequired' => true,
            'example' => 'gws-rhz99q8rc****',
          ),
        ),
        1 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例ID。',
            'type' => 'string',
            'required' => false,
            'example' => 'i-bp1bzqq1ddeemuddn****',
          ),
        ),
        2 => 
        array (
          'name' => 'PageNumber',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '当前页码。

起始值：1

默认值：1',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'example' => '1',
            'default' => '1',
          ),
        ),
        3 => 
        array (
          'name' => 'PageSize',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '每页显示的条数。取值范围：1~50

默认值：10',
            'type' => 'integer',
            'format' => 'int32',
            'required' => false,
            'maximum' => '50',
            'example' => '10',
            'default' => '10',
          ),
        ),
        4 => 
        array (
          'name' => 'UserUid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '列出分配给指定用户ID的所有实例。
>如果此参数未指定，则列出所有用户的实例。',
            'type' => 'integer',
            'format' => 'int64',
            'required' => false,
            'example' => '1234567890',
          ),
        ),
        5 => 
        array (
          'name' => 'UserName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '列出分配给指定用户名称的所有实例。

> 如果此参数未指定，则列出所有用户的实例。',
            'type' => 'string',
            'required' => false,
            'example' => 'testuser',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'PageSize' => 
              array (
                'description' => '显示每页条数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '10',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '2777461A-E45E-42F8-8E67-0EBF132E93E0',
              ),
              'PageNumber' => 
              array (
                'description' => '显示当前页。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'TotalCount' => 
              array (
                'description' => '列表信息总数。',
                'type' => 'integer',
                'format' => 'int32',
                'example' => '1',
              ),
              'Instances' => 
              array (
                'type' => 'object',
                'properties' => 
                array (
                  'InstanceInfo' => 
                  array (
                    'description' => '可视化实例信息列表。',
                    'type' => 'array',
                    'items' => 
                    array (
                      'type' => 'object',
                      'properties' => 
                      array (
                        'Status' => 
                        array (
                          'description' => '可视化实例的状态。可能值：

- Creating：创建中

- Starting：启动中

- Stopping：停止中

- Stopped：已停止

- Initializing：初始化

- Unregistered：未注册

- Registered：已注册

- InUse：使用中

- Missing：丢失

- Cloning：镜像制作中',
                          'type' => 'string',
                          'example' => 'Creating',
                        ),
                        'WorkMode' => 
                        array (
                          'description' => '可视化实例工作模式。可能值：
- Desktop：桌面模式
- Application：应用模式',
                          'type' => 'string',
                          'example' => 'Desktop',
                        ),
                        'ExpireTime' => 
                        array (
                          'description' => '可视化实例到期时间。',
                          'type' => 'string',
                          'example' => '2099-12-31T15:59Z',
                        ),
                        'CreateTime' => 
                        array (
                          'description' => '可视化实例创建时间。',
                          'type' => 'string',
                          'example' => '2020-02-03T14:03Z',
                        ),
                        'InstanceId' => 
                        array (
                          'description' => '可视化实例ID。',
                          'type' => 'string',
                          'example' => 'i-bp1bzqq1ddeemuddn****',
                        ),
                        'Name' => 
                        array (
                          'description' => '可视化实例名称。',
                          'type' => 'string',
                          'example' => 'c0-i01-1-g6-2c8g',
                        ),
                        'InstanceType' => 
                        array (
                          'description' => '可视化实例类型。',
                          'type' => 'string',
                          'example' => 'ecs.g6.large',
                        ),
                        'UserName' => 
                        array (
                          'description' => '可视化实例分配的用户名。
>实例未分配给指定用户时，此值为空。',
                          'type' => 'string',
                          'example' => 'user-****',
                        ),
                        'ClusterId' => 
                        array (
                          'description' => '可视化集群ID。',
                          'type' => 'string',
                          'example' => 'gws-rhz99q8rc****',
                        ),
                        'AppList' => 
                        array (
                          'type' => 'object',
                          'properties' => 
                          array (
                            'AppInfo' => 
                            array (
                              'description' => '应用程序列表信息。

>工作模式为桌面模式时，此列表为空。',
                              'type' => 'array',
                              'items' => 
                              array (
                                'type' => 'object',
                                'properties' => 
                                array (
                                  'AppName' => 
                                  array (
                                    'description' => '应用程序名称。',
                                    'type' => 'string',
                                    'example' => 'notepad',
                                  ),
                                  'AppArgs' => 
                                  array (
                                    'description' => '应用运行参数。',
                                    'type' => 'string',
                                    'example' => 'temp.txt',
                                  ),
                                  'AppPath' => 
                                  array (
                                    'description' => '应用程序运行路径。',
                                    'type' => 'string',
                                    'example' => '/home/test/notepad.exe',
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"PageSize\\": 10,\\n  \\"RequestId\\": \\"2777461A-E45E-42F8-8E67-0EBF132E93E0\\",\\n  \\"PageNumber\\": 1,\\n  \\"TotalCount\\": 1,\\n  \\"Instances\\": {\\n    \\"InstanceInfo\\": [\\n      {\\n        \\"Status\\": \\"Creating\\",\\n        \\"WorkMode\\": \\"Desktop\\",\\n        \\"ExpireTime\\": \\"2099-12-31T15:59Z\\",\\n        \\"CreateTime\\": \\"2020-02-03T14:03Z\\",\\n        \\"InstanceId\\": \\"i-bp1bzqq1ddeemuddn****\\",\\n        \\"Name\\": \\"c0-i01-1-g6-2c8g\\",\\n        \\"InstanceType\\": \\"ecs.g6.large\\",\\n        \\"UserName\\": \\"user-****\\",\\n        \\"ClusterId\\": \\"gws-rhz99q8rc****\\",\\n        \\"AppList\\": {\\n          \\"AppInfo\\": [\\n            {\\n              \\"AppName\\": \\"notepad\\",\\n              \\"AppArgs\\": \\"temp.txt\\",\\n              \\"AppPath\\": \\"/home/test/notepad.exe\\"\\n            }\\n          ]\\n        }\\n      }\\n    ]\\n  }\\n}","errorExample":""},{"type":"xml","example":"</DescribeGWSInstancesResponse>\\n    <Instances>\\n        <InstanceInfo>\\n            <Status>Creating</Status>\\n            <UserName>user-****</UserName>\\n            <InstanceId>i-bp1bzqq1ddeemuddn****</InstanceId>\\n            <ClusterId>gws-rhz99q8rc****</ClusterId>\\n            <CreateTime>2020-02-03T14:03Z</CreateTime>\\n            <ExpireTime>2099-12-31T15:59Z</ExpireTime>\\n            <InstanceType>ecs.g6.large</InstanceType>\\n            <WorkMode>Desktop</WorkMode>\\n            <Name>c0-i01-1-g6-2c8g</Name>\\n        </InstanceInfo>\\n        <InstanceInfo>\\n            <AppList>\\n                <AppInfo>\\n                    <AppArgs>temp.txt</AppArgs>\\n                    <AppPath>/home/test/notepad.exe</AppPath>\\n                    <AppName>notepad</AppName>\\n                </AppInfo>\\n            </AppList>\\n        </InstanceInfo>\\n    </Instances>\\n    <TotalCount>1</TotalCount>\\n    <PageSize>10</PageSize>\\n    <RequestId>2777461A-E45E-42F8-8E67-0EBF132E93E0</RequestId>\\n    <PageNumber>1</PageNumber>\\n</DescribeGWSInstancesResponse>","errorExample":""}]',
      'title' => '查询可视化集群实例信息',
      'summary' => '调用DescribeGWSInstances查询可视化集群实例信息。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DeleteGWSInstance' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'delete',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'i-bp66guhybgtrftpa1****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '2777461A-E45E-42F8-8E67-0EBF132E93E0',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"2777461A-E45E-42F8-8E67-0EBF132E93E0\\"\\n}","errorExample":""},{"type":"xml","example":"<DeleteGWSInstanceResponse>\\r\\n    <RequestId>2777461A-E45E-42F8-8E67-0EBF132E93E0</RequestId>\\r\\n</DeleteGWSInstanceResponse>","errorExample":""}]',
      'title' => '删除可视化实例',
      'summary' => '调用DeleteGWSInstance删除可视化实例。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SetGWSInstanceUser' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'i-bp1bzqq4rj1eemun****',
          ),
        ),
        1 => 
        array (
          'name' => 'UserUid',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户ID。',
            'type' => 'string',
            'required' => false,
            'example' => '217346586905362****',
          ),
        ),
        2 => 
        array (
          'name' => 'UserName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '用户名称。',
            'type' => 'string',
            'required' => false,
            'example' => 'test_****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => 'CDC4FF2F-62DB-48D2-B342-A3B9E2684B99rrwr',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"CDC4FF2F-62DB-48D2-B342-A3B9E2684B99rrwr\\"\\n}","errorExample":""},{"type":"xml","example":"<SetGWSInstanceUserResponse>\\n    <RequestId>CDC4FF2F-62DB-48D2-B342-A3B9E2684B99rrwr</RequestId>\\n</SetGWSInstanceUserResponse>","errorExample":""}]',
      'title' => '为可视化实例分配可使用该实例的用户',
      'summary' => '调用SetGWSInstanceUser为可视化实例分配可使用该实例的用户。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SetGWSInstanceName' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'i-bp1bzqq4rj1eemun****',
          ),
        ),
        1 => 
        array (
          'name' => 'Name',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例名称。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'c0-i01-1-g6-2c8g',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '0505220-2409-4B78-B7B6-CD5F294518C9',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"0505220-2409-4B78-B7B6-CD5F294518C9\\"\\n}","errorExample":""},{"type":"xml","example":"<SetGWSInstanceNameResponse>\\n    <RequestId>0505220-2409-4B78-B7B6-CD5F294518C9</RequestId>\\n</SetGWSInstanceNameResponse>","errorExample":""}]',
      'title' => '设置可视化实例名称',
      'summary' => '调用SetGWSInstanceName设置可视化实例名称。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'StartGWSInstance' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'i-bp1bzqq4rj1eemun****',
            'docRequired' => true,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\"\\n}","errorExample":""},{"type":"xml","example":"<StartGWSInstanceResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\n</StartGWSInstanceResponse>","errorExample":""}]',
      'title' => '启动一个可视化实例',
      'summary' => '调用StartGWSInstance启动一个可视化实例。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'StopGWSInstance' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'i-bp1bzqq4rj1eemun****',
            'docRequired' => true,
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '04F0F334-1335-436C-A1D7-6C044FE73368',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
          1 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        409 => 
        array (
          0 => 
          array (
            'errorCode' => 'PartFailure',
            'errorMessage' => 'Part of the batch operation failed.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"04F0F334-1335-436C-A1D7-6C044FE73368\\"\\n}","errorExample":""},{"type":"xml","example":"<StopGWSInstanceResponse>\\n    <RequestId>04F0F334-1335-436C-A1D7-6C044FE73368</RequestId>\\n</StopGWSInstanceResponse>","errorExample":""}]',
      'title' => '停止一个可视化实例',
      'summary' => '调用StopGWSInstance停止一个可视化实例。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'MountNFS' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例ID。',
            'type' => 'string',
            'required' => true,
            'example' => 'i-bp1bzqq4rremun****',
            'docRequired' => true,
          ),
        ),
        1 => 
        array (
          'name' => 'NfsDir',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '挂载点地址。',
            'type' => 'string',
            'required' => true,
            'example' => '\\\\0de-jup****.cn-hangzhou.nas.aliyuncs.com\\',
            'docRequired' => true,
          ),
        ),
        2 => 
        array (
          'name' => 'MountDir',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '本地挂载目录。',
            'type' => 'string',
            'required' => true,
            'example' => 'Z:',
            'docRequired' => true,
          ),
        ),
        3 => 
        array (
          'name' => 'ProtocolType',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '协议类型。取值范围：
- nfs
- smb',
            'type' => 'string',
            'required' => false,
            'example' => 'nfs',
          ),
        ),
        4 => 
        array (
          'name' => 'RemoteDir',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '远端挂载地址。',
            'type' => 'string',
            'required' => false,
            'example' => '/test',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'InvokeId' => 
              array (
                'description' => '脚本进程执行ID。',
                'type' => 'string',
                'example' => 't-hz0jdfwd9f****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '6FDDFC21-40CD-4DB2-9978-012AB7FC9BDW',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"InvokeId\\": \\"t-hz0jdfwd9f****\\",\\n  \\"RequestId\\": \\"6FDDFC21-40CD-4DB2-9978-012AB7FC9BDW\\"\\n}","errorExample":""},{"type":"xml","example":"<MountNFSResponse>\\n    <RequestId>6FDDFC21-40CD-4DB2-9978-012AB7FC9BDW</RequestId>\\n    <InvokeId>t-hz0jdfwd9f****</InvokeId>\\n</MountNFSResponse>","errorExample":""}]',
      'title' => '对可视化实例进行NAS挂载',
      'summary' => '调用MountNFS在可视化实例挂载NAS。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'DescribeNFSClientStatus' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'i-bp1bzq4rj1emun****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Status' => 
              array (
                'description' => '客户端部署状态。可能值：
- NotInstalled：未安装
- Running：安装中
- Finished：已安装',
                'type' => 'string',
                'example' => 'Running',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '3EB7FCEE-D731-4948-85A3-4B2C341CA983',
              ),
              'Result' => 
              array (
                'description' => '结果列表。',
                'type' => 'object',
                'properties' => 
                array (
                  'Output' => 
                  array (
                    'description' => '命令执行结果。',
                    'type' => 'string',
                    'example' => 'TmV3LUlWtmOWc6XxpZW50Rm9yLi4uDQ****',
                  ),
                  'InvokeRecordStatus' => 
                  array (
                    'description' => '调用记录状态，与Status的状态一致。',
                    'type' => 'string',
                    'example' => 'Running',
                  ),
                  'ExitCode' => 
                  array (
                    'description' => '使用base64解码Output字段，最后一个非空行为True表示安装成功，否则失败。',
                    'type' => 'integer',
                    'format' => 'int32',
                    'example' => '0',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Status\\": \\"Running\\",\\n  \\"RequestId\\": \\"3EB7FCEE-D731-4948-85A3-4B2C341CA983\\",\\n  \\"Result\\": {\\n    \\"Output\\": \\"TmV3LUlWtmOWc6XxpZW50Rm9yLi4uDQ****\\",\\n    \\"InvokeRecordStatus\\": \\"Running\\",\\n    \\"ExitCode\\": 0\\n  }\\n}","errorExample":""},{"type":"xml","example":"<DescribeNFSClientStatusResponse>\\r\\n    <RequestId>3EB7FCEE-D731-4948-85A3-4B2C341CA983</RequestId>\\r\\n    <Status>Running</Status>\\r\\n    <Result>\\r\\n        <InvokeRecordStatus>Running</InvokeRecordStatus>\\r\\n        <ExitCode>0</ExitCode>\\r\\n        <Output>TmV3LUlWtmOWc6XxpZW50Rm9yLi4uDQ****</Output>\\r\\n    </Result>\\r\\n</DescribeNFSClientStatusResponse>","errorExample":""}]',
      'title' => '查看NFS客户端状态',
      'summary' => '调用DescribeNFSClientStatus查询指定可视化实例部署NFS客户端的状态。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'SetGWSClusterPolicy' => 
    array (
      'methods' => 
      array (
        0 => 'post',
        1 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'write',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'update',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'ClusterId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化服务集群ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'gws-rhz99q8rc****',
          ),
        ),
        1 => 
        array (
          'name' => 'Clipboard',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '剪贴板权限。取值范围：
- read：只读。可以将本地内容复制到云桌面，不能将云桌面内容复制到本地。
- readwrite：读写。可以将本地内容复制到云桌面，也可以将云桌面内容复制到本地。
- off：关闭。云桌面和本地之间无法进行复制操作。

默认值：off',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'readwrite',
          ),
        ),
        2 => 
        array (
          'name' => 'LocalDrive',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '本地磁盘映射权限。取值范围：
- read：只读。云桌面上有本地磁盘的映射，但是只能读取（复制）本地文件，不能修改本地文件。
- readwrite：读写。云桌面上有本地磁盘的映射，可以读取（复制）本地文件，也可以修改本地文件。
- off：关闭。云桌面上没有本地磁盘的映射。

默认值：off',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'read',
          ),
        ),
        3 => 
        array (
          'name' => 'UsbRedirect',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'USB重定向。取值范围：
- on：开启
- off：关闭

默认值：off',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'on',
          ),
        ),
        4 => 
        array (
          'name' => 'Watermark',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '水印。取值范围：
- on：开启
- off：关闭

默认值：off',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'on',
          ),
        ),
        5 => 
        array (
          'name' => 'UdpPort',
          'in' => 'query',
          'schema' => 
          array (
            'description' => 'UDP端口。取值范围：
- on：打开
- off：关闭

默认值：on',
            'type' => 'string',
            'required' => false,
            'example' => 'on',
          ),
        ),
        6 => 
        array (
          'name' => 'AsyncMode',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '是否支持异步调用模式：
- false：不支持，当本次请求调用完成后，才返回结果。
- true：支持，无需等待本次请求调用完成，立即返回结果。

默认值：false',
            'type' => 'boolean',
            'required' => false,
            'example' => 'true',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '142951B5-815A-4324-B598-6E1C11FBF6E4',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'EcsError',
            'errorMessage' => 'An error occurred while calling the ECS API operation.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"RequestId\\": \\"142951B5-815A-4324-B598-6E1C11FBF6E4\\"\\n}","errorExample":""},{"type":"xml","example":"<SetGWSClusterPolicyResponse>\\n    <RequestId>142951B5-815A-4324-B598-6E1C11FBF6E4</RequestId>\\n</SetGWSClusterPolicyResponse>","errorExample":""}]',
      'title' => '为可视化服务进行策略配置',
      'summary' => '调用SetGWSClusterPolicy为可视化服务配置策略。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
    'GetGWSConnectTicket' => 
    array (
      'methods' => 
      array (
        0 => 'get',
      ),
      'schemes' => 
      array (
        0 => 'http',
        1 => 'https',
      ),
      'security' => 
      array (
        0 => 
        array (
          'AK' => 
          array (
          ),
        ),
      ),
      'operationType' => 'read',
      'deprecated' => false,
      'systemTags' => 
      array (
        'operationType' => 'get',
      ),
      'parameters' => 
      array (
        0 => 
        array (
          'name' => 'InstanceId',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '可视化实例ID。',
            'type' => 'string',
            'required' => true,
            'docRequired' => true,
            'example' => 'i-bp1ch35z696b6b26****',
          ),
        ),
        1 => 
        array (
          'name' => 'AppName',
          'in' => 'query',
          'schema' => 
          array (
            'description' => '待启动的App名称。
- 可视化实例的WorkMode为Application（应用模式）时，此参数必填。
- 可视化实例的WorkMode为Desktop（桌面模式）时，不需要指定此参数。',
            'type' => 'string',
            'required' => false,
            'example' => 'app-****',
          ),
        ),
      ),
      'responses' => 
      array (
        200 => 
        array (
          'schema' => 
          array (
            'type' => 'object',
            'properties' => 
            array (
              'Ticket' => 
              array (
                'description' => '用来连接可视化实例的Ticket。使用时需要先将其内容做Base64的解码，保存为.ica文件。',
                'type' => 'string',
                'example' => 'W0VuY29kaG9ydFJlY29ubmVjdEVuY****',
              ),
              'RequestId' => 
              array (
                'description' => '请求ID。',
                'type' => 'string',
                'example' => '5198C3E8-85F5-4280-8547-687C1710FE08',
              ),
            ),
          ),
        ),
      ),
      'errorCodes' => 
      array (
        400 => 
        array (
          0 => 
          array (
            'errorCode' => 'InvalidParams',
            'errorMessage' => 'The specified parameter %s is invalid.',
          ),
        ),
        406 => 
        array (
          0 => 
          array (
            'errorCode' => 'AliyunError',
            'errorMessage' => 'An Alibaba Cloud product error occurred.',
          ),
        ),
        407 => 
        array (
          0 => 
          array (
            'errorCode' => 'NotAuthorized',
            'errorMessage' => 'You are not authorized by RAM for this request.',
          ),
        ),
        500 => 
        array (
          0 => 
          array (
            'errorCode' => 'UnknownError',
            'errorMessage' => 'An unknown error occurred.',
          ),
        ),
        503 => 
        array (
          0 => 
          array (
            'errorCode' => 'ServiceUnavailable',
            'errorMessage' => 'The request has failed due to a temporary failure of the server',
          ),
        ),
      ),
      'responseDemo' => '[{"type":"json","example":"{\\n  \\"Ticket\\": \\"W0VuY29kaG9ydFJlY29ubmVjdEVuY****\\",\\n  \\"RequestId\\": \\"5198C3E8-85F5-4280-8547-687C1710FE08\\"\\n}","errorExample":""},{"type":"xml","example":"<GetGWSConnectTicketResponse>\\n    <Ticket>W0VuY29kaG9ydFJlY29ubmVjdEVuY****</Ticket>\\n    <RequestId>5198C3E8-85F5-4280-8547-687C1710FE08</RequestId>\\n</GetGWSConnectTicketResponse>","errorExample":""}]',
      'title' => '连接可视化实例桌面或者APP',
      'summary' => '调用GetGWSConnectTicket获取连接可视化实例的Ticket。',
      'requestParamsDescription' => ' ',
      'responseParamsDescription' => ' ',
      'extraInfo' => ' ',
    ),
  ),
  'endpoints' => 
  array (
    0 => 
    array (
      'regionId' => 'cn-qingdao',
      'endpoint' => 'ehpc.cn-qingdao.aliyuncs.com',
    ),
    1 => 
    array (
      'regionId' => 'cn-beijing',
      'endpoint' => 'ehpc.cn-beijing.aliyuncs.com',
    ),
    2 => 
    array (
      'regionId' => 'cn-zhangjiakou',
      'endpoint' => 'ehpc.cn-zhangjiakou.aliyuncs.com',
    ),
    3 => 
    array (
      'regionId' => 'cn-huhehaote',
      'endpoint' => 'ehpc.cn-huhehaote.aliyuncs.com',
    ),
    4 => 
    array (
      'regionId' => 'cn-hangzhou',
      'endpoint' => 'ehpc.cn-hangzhou.aliyuncs.com',
    ),
    5 => 
    array (
      'regionId' => 'cn-shanghai',
      'endpoint' => 'ehpc.cn-shanghai.aliyuncs.com',
    ),
    6 => 
    array (
      'regionId' => 'cn-shenzhen',
      'endpoint' => 'ehpc.cn-shenzhen.aliyuncs.com',
    ),
    7 => 
    array (
      'regionId' => 'cn-hongkong',
      'endpoint' => 'ehpc.cn-hongkong.aliyuncs.com',
    ),
    8 => 
    array (
      'regionId' => 'ap-northeast-1',
      'endpoint' => 'ehpc.ap-northeast-1.aliyuncs.com',
    ),
    9 => 
    array (
      'regionId' => 'ap-southeast-1',
      'endpoint' => 'ehpc.ap-southeast-1.aliyuncs.com',
    ),
    10 => 
    array (
      'regionId' => 'ap-southeast-2',
      'endpoint' => 'ehpc.ap-southeast-2.aliyuncs.com',
    ),
    11 => 
    array (
      'regionId' => 'eu-central-1',
      'endpoint' => 'ehpc.eu-central-1.aliyuncs.com',
    ),
    12 => 
    array (
      'regionId' => 'cn-heyuan',
      'endpoint' => 'ehpc.cn-heyuan.aliyuncs.com',
    ),
    13 => 
    array (
      'regionId' => 'cn-chengdu',
      'endpoint' => 'ehpc.cn-chengdu.aliyuncs.com',
    ),
    14 => 
    array (
      'regionId' => 'cn-wulanchabu',
      'endpoint' => 'ehpc.cn-wulanchabu.aliyuncs.com',
    ),
    15 => 
    array (
      'regionId' => 'ap-southeast-5',
      'endpoint' => 'ehpc.ap-southeast-5.aliyuncs.com',
    ),
  ),
);