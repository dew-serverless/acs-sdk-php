<?php

declare(strict_types=1);

namespace Dew\Acs\Kms;

use Dew\Acs\AcsClient;

/**
 * @method \Dew\Acs\Result describeRegions(array $arguments = [])
 * @method \Http\Promise\Promise describeRegionsAsync($arguments = [])
 * @method \Dew\Acs\Result describeAccountKmsStatus(array $arguments = [])
 * @method \Http\Promise\Promise describeAccountKmsStatusAsync($arguments = [])
 * @method \Dew\Acs\Result openKmsService(array $arguments = [])
 * @method \Http\Promise\Promise openKmsServiceAsync($arguments = [])
 * @method \Dew\Acs\Result listKmsInstances(array $arguments = [])
 * @method \Http\Promise\Promise listKmsInstancesAsync($arguments = [])
 * @method \Dew\Acs\Result connectKmsInstance(array $arguments = [])
 * @method \Http\Promise\Promise connectKmsInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getKmsInstance(array $arguments = [])
 * @method \Http\Promise\Promise getKmsInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result updateKmsInstanceBindVpc(array $arguments = [])
 * @method \Http\Promise\Promise updateKmsInstanceBindVpcAsync($arguments = [])
 * @method \Dew\Acs\Result releaseKmsInstance(array $arguments = [])
 * @method \Http\Promise\Promise releaseKmsInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result getDefaultKmsInstance(array $arguments = [])
 * @method \Http\Promise\Promise getDefaultKmsInstanceAsync($arguments = [])
 * @method \Dew\Acs\Result createKey(array $arguments = [])
 * @method \Http\Promise\Promise createKeyAsync($arguments = [])
 * @method \Dew\Acs\Result listKeys(array $arguments = [])
 * @method \Http\Promise\Promise listKeysAsync($arguments = [])
 * @method \Dew\Acs\Result describeKey(array $arguments = [])
 * @method \Http\Promise\Promise describeKeyAsync($arguments = [])
 * @method \Dew\Acs\Result updateKeyDescription(array $arguments = [])
 * @method \Http\Promise\Promise updateKeyDescriptionAsync($arguments = [])
 * @method \Dew\Acs\Result enableKey(array $arguments = [])
 * @method \Http\Promise\Promise enableKeyAsync($arguments = [])
 * @method \Dew\Acs\Result disableKey(array $arguments = [])
 * @method \Http\Promise\Promise disableKeyAsync($arguments = [])
 * @method \Dew\Acs\Result getPublicKey(array $arguments = [])
 * @method \Http\Promise\Promise getPublicKeyAsync($arguments = [])
 * @method \Dew\Acs\Result createAlias(array $arguments = [])
 * @method \Http\Promise\Promise createAliasAsync($arguments = [])
 * @method \Dew\Acs\Result listAliases(array $arguments = [])
 * @method \Http\Promise\Promise listAliasesAsync($arguments = [])
 * @method \Dew\Acs\Result listAliasesByKeyId(array $arguments = [])
 * @method \Http\Promise\Promise listAliasesByKeyIdAsync($arguments = [])
 * @method \Dew\Acs\Result deleteAlias(array $arguments = [])
 * @method \Http\Promise\Promise deleteAliasAsync($arguments = [])
 * @method \Dew\Acs\Result updateAlias(array $arguments = [])
 * @method \Http\Promise\Promise updateAliasAsync($arguments = [])
 * @method \Dew\Acs\Result getParametersForImport(array $arguments = [])
 * @method \Http\Promise\Promise getParametersForImportAsync($arguments = [])
 * @method \Dew\Acs\Result importKeyMaterial(array $arguments = [])
 * @method \Http\Promise\Promise importKeyMaterialAsync($arguments = [])
 * @method \Dew\Acs\Result deleteKeyMaterial(array $arguments = [])
 * @method \Http\Promise\Promise deleteKeyMaterialAsync($arguments = [])
 * @method \Dew\Acs\Result scheduleKeyDeletion(array $arguments = [])
 * @method \Http\Promise\Promise scheduleKeyDeletionAsync($arguments = [])
 * @method \Dew\Acs\Result cancelKeyDeletion(array $arguments = [])
 * @method \Http\Promise\Promise cancelKeyDeletionAsync($arguments = [])
 * @method \Dew\Acs\Result setDeletionProtection(array $arguments = [])
 * @method \Http\Promise\Promise setDeletionProtectionAsync($arguments = [])
 * @method \Dew\Acs\Result updateRotationPolicy(array $arguments = [])
 * @method \Http\Promise\Promise updateRotationPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result describeKeyVersion(array $arguments = [])
 * @method \Http\Promise\Promise describeKeyVersionAsync($arguments = [])
 * @method \Dew\Acs\Result createKeyVersion(array $arguments = [])
 * @method \Http\Promise\Promise createKeyVersionAsync($arguments = [])
 * @method \Dew\Acs\Result listKeyVersions(array $arguments = [])
 * @method \Http\Promise\Promise listKeyVersionsAsync($arguments = [])
 * @method \Dew\Acs\Result getKeyPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getKeyPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result getSecretPolicy(array $arguments = [])
 * @method \Http\Promise\Promise getSecretPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result generateDataKey(array $arguments = [])
 * @method \Http\Promise\Promise generateDataKeyAsync($arguments = [])
 * @method \Dew\Acs\Result generateAndExportDataKey(array $arguments = [])
 * @method \Http\Promise\Promise generateAndExportDataKeyAsync($arguments = [])
 * @method \Dew\Acs\Result encrypt(array $arguments = [])
 * @method \Http\Promise\Promise encryptAsync($arguments = [])
 * @method \Dew\Acs\Result decrypt(array $arguments = [])
 * @method \Http\Promise\Promise decryptAsync($arguments = [])
 * @method \Dew\Acs\Result reEncrypt(array $arguments = [])
 * @method \Http\Promise\Promise reEncryptAsync($arguments = [])
 * @method \Dew\Acs\Result exportDataKey(array $arguments = [])
 * @method \Http\Promise\Promise exportDataKeyAsync($arguments = [])
 * @method \Dew\Acs\Result generateDataKeyWithoutPlaintext(array $arguments = [])
 * @method \Http\Promise\Promise generateDataKeyWithoutPlaintextAsync($arguments = [])
 * @method \Dew\Acs\Result asymmetricSign(array $arguments = [])
 * @method \Http\Promise\Promise asymmetricSignAsync($arguments = [])
 * @method \Dew\Acs\Result asymmetricVerify(array $arguments = [])
 * @method \Http\Promise\Promise asymmetricVerifyAsync($arguments = [])
 * @method \Dew\Acs\Result asymmetricEncrypt(array $arguments = [])
 * @method \Http\Promise\Promise asymmetricEncryptAsync($arguments = [])
 * @method \Dew\Acs\Result asymmetricDecrypt(array $arguments = [])
 * @method \Http\Promise\Promise asymmetricDecryptAsync($arguments = [])
 * @method \Dew\Acs\Result createSecret(array $arguments = [])
 * @method \Http\Promise\Promise createSecretAsync($arguments = [])
 * @method \Dew\Acs\Result deleteSecret(array $arguments = [])
 * @method \Http\Promise\Promise deleteSecretAsync($arguments = [])
 * @method \Dew\Acs\Result updateSecret(array $arguments = [])
 * @method \Http\Promise\Promise updateSecretAsync($arguments = [])
 * @method \Dew\Acs\Result updateSecretVersionStage(array $arguments = [])
 * @method \Http\Promise\Promise updateSecretVersionStageAsync($arguments = [])
 * @method \Dew\Acs\Result updateSecretRotationPolicy(array $arguments = [])
 * @method \Http\Promise\Promise updateSecretRotationPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listSecrets(array $arguments = [])
 * @method \Http\Promise\Promise listSecretsAsync($arguments = [])
 * @method \Dew\Acs\Result describeSecret(array $arguments = [])
 * @method \Http\Promise\Promise describeSecretAsync($arguments = [])
 * @method \Dew\Acs\Result getSecretValue(array $arguments = [])
 * @method \Http\Promise\Promise getSecretValueAsync($arguments = [])
 * @method \Dew\Acs\Result listSecretVersionIds(array $arguments = [])
 * @method \Http\Promise\Promise listSecretVersionIdsAsync($arguments = [])
 * @method \Dew\Acs\Result getRandomPassword(array $arguments = [])
 * @method \Http\Promise\Promise getRandomPasswordAsync($arguments = [])
 * @method \Dew\Acs\Result putSecretValue(array $arguments = [])
 * @method \Http\Promise\Promise putSecretValueAsync($arguments = [])
 * @method \Dew\Acs\Result restoreSecret(array $arguments = [])
 * @method \Http\Promise\Promise restoreSecretAsync($arguments = [])
 * @method \Dew\Acs\Result rotateSecret(array $arguments = [])
 * @method \Http\Promise\Promise rotateSecretAsync($arguments = [])
 * @method \Dew\Acs\Result setKeyPolicy(array $arguments = [])
 * @method \Http\Promise\Promise setKeyPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result setSecretPolicy(array $arguments = [])
 * @method \Http\Promise\Promise setSecretPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result createCertificate(array $arguments = [])
 * @method \Http\Promise\Promise createCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result deleteCertificate(array $arguments = [])
 * @method \Http\Promise\Promise deleteCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result updateCertificateStatus(array $arguments = [])
 * @method \Http\Promise\Promise updateCertificateStatusAsync($arguments = [])
 * @method \Dew\Acs\Result describeCertificate(array $arguments = [])
 * @method \Http\Promise\Promise describeCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result getCertificate(array $arguments = [])
 * @method \Http\Promise\Promise getCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result uploadCertificate(array $arguments = [])
 * @method \Http\Promise\Promise uploadCertificateAsync($arguments = [])
 * @method \Dew\Acs\Result certificatePrivateKeySign(array $arguments = [])
 * @method \Http\Promise\Promise certificatePrivateKeySignAsync($arguments = [])
 * @method \Dew\Acs\Result certificatePublicKeyEncrypt(array $arguments = [])
 * @method \Http\Promise\Promise certificatePublicKeyEncryptAsync($arguments = [])
 * @method \Dew\Acs\Result certificatePrivateKeyDecrypt(array $arguments = [])
 * @method \Http\Promise\Promise certificatePrivateKeyDecryptAsync($arguments = [])
 * @method \Dew\Acs\Result certificatePublicKeyVerify(array $arguments = [])
 * @method \Http\Promise\Promise certificatePublicKeyVerifyAsync($arguments = [])
 * @method \Dew\Acs\Result untagResources(array $arguments = [])
 * @method \Http\Promise\Promise untagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listTagResources(array $arguments = [])
 * @method \Http\Promise\Promise listTagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result tagResources(array $arguments = [])
 * @method \Http\Promise\Promise tagResourcesAsync($arguments = [])
 * @method \Dew\Acs\Result listResourceTags(array $arguments = [])
 * @method \Http\Promise\Promise listResourceTagsAsync($arguments = [])
 * @method \Dew\Acs\Result tagResource(array $arguments = [])
 * @method \Http\Promise\Promise tagResourceAsync($arguments = [])
 * @method \Dew\Acs\Result untagResource(array $arguments = [])
 * @method \Http\Promise\Promise untagResourceAsync($arguments = [])
 * @method \Dew\Acs\Result createNetworkRule(array $arguments = [])
 * @method \Http\Promise\Promise createNetworkRuleAsync($arguments = [])
 * @method \Dew\Acs\Result listNetworkRules(array $arguments = [])
 * @method \Http\Promise\Promise listNetworkRulesAsync($arguments = [])
 * @method \Dew\Acs\Result describeNetworkRule(array $arguments = [])
 * @method \Http\Promise\Promise describeNetworkRuleAsync($arguments = [])
 * @method \Dew\Acs\Result updateNetworkRule(array $arguments = [])
 * @method \Http\Promise\Promise updateNetworkRuleAsync($arguments = [])
 * @method \Dew\Acs\Result deleteNetworkRule(array $arguments = [])
 * @method \Http\Promise\Promise deleteNetworkRuleAsync($arguments = [])
 * @method \Dew\Acs\Result createPolicy(array $arguments = [])
 * @method \Http\Promise\Promise createPolicyAsync($arguments = [])
 * @method \Dew\Acs\Result listPolicies(array $arguments = [])
 * @method \Http\Promise\Promise listPoliciesAsync($arguments = [])
 * @method \Dew\Acs\Result describePolicy(array $arguments = [])
 * @method \Http\Promise\Promise describePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result updatePolicy(array $arguments = [])
 * @method \Http\Promise\Promise updatePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result deletePolicy(array $arguments = [])
 * @method \Http\Promise\Promise deletePolicyAsync($arguments = [])
 * @method \Dew\Acs\Result createApplicationAccessPoint(array $arguments = [])
 * @method \Http\Promise\Promise createApplicationAccessPointAsync($arguments = [])
 * @method \Dew\Acs\Result listApplicationAccessPoints(array $arguments = [])
 * @method \Http\Promise\Promise listApplicationAccessPointsAsync($arguments = [])
 * @method \Dew\Acs\Result describeApplicationAccessPoint(array $arguments = [])
 * @method \Http\Promise\Promise describeApplicationAccessPointAsync($arguments = [])
 * @method \Dew\Acs\Result updateApplicationAccessPoint(array $arguments = [])
 * @method \Http\Promise\Promise updateApplicationAccessPointAsync($arguments = [])
 * @method \Dew\Acs\Result deleteApplicationAccessPoint(array $arguments = [])
 * @method \Http\Promise\Promise deleteApplicationAccessPointAsync($arguments = [])
 * @method \Dew\Acs\Result createClientKey(array $arguments = [])
 * @method \Http\Promise\Promise createClientKeyAsync($arguments = [])
 * @method \Dew\Acs\Result listClientKeys(array $arguments = [])
 * @method \Http\Promise\Promise listClientKeysAsync($arguments = [])
 * @method \Dew\Acs\Result getClientKey(array $arguments = [])
 * @method \Http\Promise\Promise getClientKeyAsync($arguments = [])
 * @method \Dew\Acs\Result deleteClientKey(array $arguments = [])
 * @method \Http\Promise\Promise deleteClientKeyAsync($arguments = [])
 */
final class KmsClient extends AcsClient
{
    //
}
